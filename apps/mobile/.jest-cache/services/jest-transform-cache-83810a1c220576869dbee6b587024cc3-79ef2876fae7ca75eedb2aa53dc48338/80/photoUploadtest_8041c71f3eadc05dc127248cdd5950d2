68e742e5065cb412217ffff3ed1e3df6
"use strict";

_getJestObj().mock("../api");
_getJestObj().mock('expo-file-system', function () {
  return {
    uploadAsync: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _photoUpload = require("../photoUpload");
var _api = require("../api");
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApi = _api.api;
var mockFileSystem = FileSystem;
(0, _globals.describe)('Photo Upload Service', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('Happy Path', function () {
    (0, _globals.it)('should upload photo successfully', (0, _asyncToGenerator2.default)(function* () {
      var presignData = {
        url: 'https://s3.amazonaws.com/bucket/key',
        key: 'photos/user123/photo456.jpg'
      };
      mockApi.post.mockResolvedValueOnce({
        data: presignData
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(result).toBe(presignData.key);
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/uploads/photos/presign', {
        contentType: 'image/jpeg'
      });
      (0, _globals.expect)(mockFileSystem.uploadAsync).toHaveBeenCalledWith(presignData.url, 'file://photo.jpg', {
        httpMethod: 'PUT',
        headers: {
          'Content-Type': 'image/jpeg'
        },
        uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
      });
    }));
    (0, _globals.it)('should handle different content types', (0, _asyncToGenerator2.default)(function* () {
      var _mockFileSystem$uploa, _mockFileSystem$uploa2, _mockFileSystem$uploa3;
      var presignData = {
        url: 'https://s3.amazonaws.com/bucket/key',
        key: 'photos/user123/video.mp4'
      };
      mockApi.post.mockResolvedValueOnce({
        data: presignData
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)('file://video.mp4', 'video/mp4');
      (0, _globals.expect)(result).toBe(presignData.key);
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/uploads/photos/presign', {
        contentType: 'video/mp4'
      });
      (0, _globals.expect)((_mockFileSystem$uploa = mockFileSystem.uploadAsync.mock.calls[0]) == null ? void 0 : (_mockFileSystem$uploa2 = _mockFileSystem$uploa[2]) == null ? void 0 : (_mockFileSystem$uploa3 = _mockFileSystem$uploa2.headers) == null ? void 0 : _mockFileSystem$uploa3['Content-Type']).toBe('video/mp4');
    }));
    (0, _globals.it)('should handle PNG images', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.png'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)('file://photo.png', 'image/png');
      (0, _globals.expect)(result).toBe('photos/user123/photo.png');
    }));
    (0, _globals.it)('should handle JPEG images', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(result).toBe('photos/user123/photo.jpg');
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle presign API errors', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockRejectedValueOnce(new Error('Presign failed'));
      yield (0, _globals.expect)((0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg')).rejects.toThrow('Presign failed');
      (0, _globals.expect)(mockFileSystem.uploadAsync).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle upload errors', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockRejectedValueOnce(new Error('Upload failed'));
      yield (0, _globals.expect)((0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg')).rejects.toThrow('Upload failed');
    }));
    (0, _globals.it)('should handle S3 upload failures', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 403,
        headers: {},
        body: ''
      });
      yield (0, _globals.expect)((0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg')).rejects.toThrow();
    }));
    (0, _globals.it)('should handle network timeouts', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockImplementation(function () {
        return new Promise(function (_, reject) {
          return setTimeout(function () {
            return reject(new Error('Timeout'));
          }, 1);
        });
      });
      yield (0, _globals.expect)((0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg')).rejects.toThrow('Timeout');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty file URI', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      yield (0, _photoUpload.uploadPhoto)('', 'image/jpeg');
      (0, _globals.expect)(mockFileSystem.uploadAsync).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle very long file URIs', (0, _asyncToGenerator2.default)(function* () {
      var longUri = `file://${'x'.repeat(10000)}.jpg`;
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/long.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)(longUri, 'image/jpeg');
      (0, _globals.expect)(result).toBe('photos/user123/long.jpg');
    }));
    (0, _globals.it)('should handle special characters in content type', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/svg+xml');
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/uploads/photos/presign', {
        contentType: 'image/svg+xml'
      });
    }));
    (0, _globals.it)('should handle different file URIs', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var uris = ['content://photo.jpg', 'file:///data/user/0/photo.jpg', 'assets-library://photo.jpg'];
      for (var uri of uris) {
        yield (0, _photoUpload.uploadPhoto)(uri, 'image/jpeg');
      }
      (0, _globals.expect)(mockFileSystem.uploadAsync).toHaveBeenCalledTimes(3);
    }));
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should integrate with API service', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/uploads/photos/presign', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should integrate with FileSystem', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(mockFileSystem.uploadAsync).toHaveBeenCalledWith('https://s3.amazonaws.com/bucket/key', 'file://photo.jpg', _globals.expect.objectContaining({
        httpMethod: 'PUT',
        uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
      }));
    }));
  });
  (0, _globals.describe)('Type Safety', function () {
    (0, _globals.it)('should maintain type safety for return value', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(typeof result).toBe('string');
      (0, _globals.expect)(result).toContain('photos/');
    }));
    (0, _globals.it)('should handle all required parameters', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/uploads/photos/presign', {
        contentType: _globals.expect.any(String)
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,