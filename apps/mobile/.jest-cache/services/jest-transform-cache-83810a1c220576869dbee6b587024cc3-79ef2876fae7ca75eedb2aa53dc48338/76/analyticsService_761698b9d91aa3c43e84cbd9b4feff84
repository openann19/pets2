ef83be78e172a5aa247ebf6036498c5d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnalyticsEvents = void 0;
exports.track = track;
exports.trackScreenView = trackScreenView;
exports.trackUserAction = trackUserAction;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _api = require("./api");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function track(_x, _x2) {
  return _track.apply(this, arguments);
}
function _track() {
  _track = (0, _asyncToGenerator2.default)(function* (event, props) {
    try {
      yield (0, _api.request)('/admin/analytics/track', {
        method: 'POST',
        body: {
          event: event,
          props: props
        }
      });
    } catch (error) {
      var _yield$import = yield Promise.resolve().then(function () {
          return _interopRequireWildcard(require("./logger"));
        }),
        logger = _yield$import.logger;
      var errorDetails = error instanceof Error ? error : new Error('Unknown analytics error');
      logger.warn('Analytics tracking failed', {
        error: errorDetails,
        event: event,
        props: props
      });
    }
  });
  return _track.apply(this, arguments);
}
var AnalyticsEvents = exports.AnalyticsEvents = {
  USER_SIGNED_UP: 'user.signed_up',
  USER_LOGGED_IN: 'user.logged_in',
  USER_LOGGED_OUT: 'user.logged_out',
  PREMIUM_SUBSCRIBED: 'premium.subscribed',
  PREMIUM_CANCELLED: 'premium.cancelled',
  PREMIUM_FEATURE_USED: 'premium.feature_used',
  SWIPE_RIGHT: 'swipe.right',
  SWIPE_LEFT: 'swipe.left',
  SWIPE_SUPERLIKE: 'swipe.superlike',
  MATCH_CREATED: 'match.created',
  MATCH_OPENED: 'match.opened',
  MATCH_BLOCKED: 'match.blocked',
  MESSAGE_SENT: 'message.sent',
  MESSAGE_RECEIVED: 'message.received',
  VOICE_NOTE_SENT: 'voice_note.sent',
  PROFILE_VIEWED: 'profile.viewed',
  PROFILE_EDITED: 'profile.edited',
  PHOTO_UPLOADED: 'photo.uploaded',
  ACTIVITY_STARTED: 'activity.started',
  ACTIVITY_ENDED: 'activity.ended',
  PIN_LIKED: 'pin.liked',
  PIN_COMMENTED: 'pin.commented',
  SETTINGS_UPDATED: 'settings.updated',
  NOTIFICATION_PREFERENCE_CHANGED: 'notification.preference_changed'
};
function trackScreenView(screenName, props) {
  track('screen_view', _objectSpread({
    screen: screenName
  }, props));
}
function trackUserAction(action, props) {
  track('user_action', _objectSpread({
    action: action
  }, props));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,