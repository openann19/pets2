{"version":3,"names":["_getJestObj","mock","processImageForUpload","jest","fn","checkUploadQuota","uploadWithRetry","pickAndProcessImage","captureAndProcessImage","api","presignPhoto","request","EncodingType","Base64","UTF8","readAsStringAsync","_interopRequireDefault","require","_defineProperty2","_asyncToGenerator2","_globals","FileSystem","_interopRequireWildcard","_enhancedUploadService","_uploadHygiene","_api","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","_require","mockApi","mockRequest","mockProcessImageForUpload","mockCheckUploadQuota","mockUploadWithRetry","mockPickAndProcessImage","mockCaptureAndProcessImage","mockFileSystem","mockFetch","global","fetch","describe","service","mockProcessedImage","mockProgressCallback","beforeEach","clearAllMocks","EnhancedUploadService","instance","undefined","getInstance","uri","width","height","fileSize","mimeType","metadata","originalWidth","originalHeight","orientationFixed","exifStripped","mockResolvedValue","key","url","ok","data","upload","_id","s3Key","status","afterEach","clearAllTimers","it","instance1","instance2","expect","toBe","toBeDefined","result","uploadProcessedImage","toEqual","uploadId","analysis","toHaveBeenCalledWith","phase","percent","message","types","type","mockResolvedValueOnce","method","body","objectContaining","not","toHaveBeenCalled","mockRejectedValue","Error","rejects","toThrow","statusText","encoding","any","String","Blob","stringContaining","largeImage","allowed","remaining","resetAt","Date","limit","uploadFromPicker","petId","allowEditing","useCamera","maxDimension","quality","approvedResponse","safety","labels","pollUploadStatus","toHaveBeenCalledTimes","flagReason","mockRejectedValueOnce","images","results","uploadBatch","toHaveLength","mockResponse","isDuplicate","similarImages","checkDuplicate","base64Data","blob","fileUriToBlob","toBeInstanceOf","size","toBeGreaterThan","expectedResult","retryUpload","Function","longUri","repeat","longImage","specialUri","specialImage","uploadPromises","Promise","all","hugeImage","largeBase64","malformedImage","errorCallback","mockImplementation","resolves"],"sources":["enhancedUploadService.test.ts"],"sourcesContent":["/**\n * Comprehensive tests for EnhancedUploadService\n *\n * Coverage:\n * - Complete upload pipeline from processing to registration\n * - Progress tracking and callbacks\n * - Batch upload operations\n * - Upload status polling\n * - Duplicate checking\n * - Retry logic with backoff\n * - Error handling and recovery\n * - File URI to blob conversion\n * - Quota checking integration\n * - Singleton pattern\n * - Concurrent operations\n */\n\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport * as FileSystem from 'expo-file-system';\nimport { EnhancedUploadService, type ProcessedImage, type UploadProgress } from '../enhancedUploadService';\n\n// Mock dependencies\njest.mock('../uploadHygiene', () => ({\n  processImageForUpload: jest.fn(),\n  checkUploadQuota: jest.fn(),\n  uploadWithRetry: jest.fn(),\n  pickAndProcessImage: jest.fn(),\n  captureAndProcessImage: jest.fn(),\n}));\n\njest.mock('../api', () => ({\n  api: {\n    presignPhoto: jest.fn(),\n  },\n  request: jest.fn(),\n}));\n\njest.mock('expo-file-system', () => ({\n  EncodingType: {\n    Base64: 'base64',\n    UTF8: 'utf8',\n  },\n  readAsStringAsync: jest.fn(),\n}));\n\nimport { processImageForUpload, checkUploadQuota, uploadWithRetry, pickAndProcessImage, captureAndProcessImage } from '../uploadHygiene';\nimport { api, request } from '../api';\n\nconst mockApi = api as jest.Mocked<typeof api>;\nconst mockRequest = request as jest.MockedFunction<typeof request>;\nconst mockProcessImageForUpload = processImageForUpload as jest.MockedFunction<typeof processImageForUpload>;\nconst mockCheckUploadQuota = checkUploadQuota as jest.MockedFunction<typeof checkUploadQuota>;\nconst mockUploadWithRetry = uploadWithRetry as jest.MockedFunction<typeof uploadWithRetry>;\nconst mockPickAndProcessImage = pickAndProcessImage as jest.MockedFunction<typeof pickAndProcessImage>;\nconst mockCaptureAndProcessImage = captureAndProcessImage as jest.MockedFunction<typeof captureAndProcessImage>;\nconst mockFileSystem = FileSystem as jest.Mocked<typeof FileSystem>;\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('EnhancedUploadService', () => {\n  let service: EnhancedUploadService;\n  let mockProcessedImage: ProcessedImage;\n  let mockProgressCallback: jest.MockedFunction<(progress: UploadProgress) => void>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Reset singleton\n    (EnhancedUploadService as any).instance = undefined;\n\n    service = EnhancedUploadService.getInstance();\n\n    mockProcessedImage = {\n      uri: 'file://test-image.jpg',\n      width: 1024,\n      height: 768,\n      fileSize: 256000,\n      mimeType: 'image/jpeg',\n      metadata: {\n        originalWidth: 2048,\n        originalHeight: 1536,\n        orientationFixed: true,\n        exifStripped: true,\n      },\n    };\n\n    mockProgressCallback = jest.fn();\n\n    // Setup default mocks\n    mockApi.presignPhoto.mockResolvedValue({\n      key: 'test-key-123',\n      url: 'https://s3.amazonaws.com/test-bucket/test-key-123',\n    });\n\n    mockFetch.mockResolvedValue({\n      ok: true,\n    } as any);\n\n    mockRequest.mockResolvedValue({\n      data: {\n        upload: {\n          _id: 'upload-123',\n          s3Key: 'test-key-123',\n          url: 'https://cdn.example.com/test-key-123',\n          status: 'pending',\n        },\n      },\n    });\n\n    mockFileSystem.readAsStringAsync.mockResolvedValue('base64data');\n  });\n\n  afterEach(() => {\n    jest.clearAllTimers();\n  });\n\n  describe('Singleton Pattern', () => {\n    it('should return the same instance', () => {\n      const instance1 = EnhancedUploadService.getInstance();\n      const instance2 = EnhancedUploadService.getInstance();\n\n      expect(instance1).toBe(instance2);\n      expect(instance1).toBe(service);\n    });\n\n    it('should maintain state across calls', () => {\n      // This is implicit in the singleton pattern\n      expect(service).toBeDefined();\n    });\n  });\n\n  describe('uploadProcessedImage', () => {\n    it('should complete full upload pipeline successfully', async () => {\n      const result = await service.uploadProcessedImage(\n        mockProcessedImage,\n        'pet',\n        'pet-123',\n        mockProgressCallback\n      );\n\n      expect(result).toEqual({\n        uploadId: 'upload-123',\n        s3Key: 'test-key-123',\n        url: 'https://cdn.example.com/test-key-123',\n        status: 'pending',\n        analysis: undefined,\n      });\n\n      // Check progress callbacks\n      expect(mockProgressCallback).toHaveBeenCalledWith({\n        phase: 'presign',\n        percent: 10,\n        message: 'Requesting upload URL...',\n      });\n\n      expect(mockProgressCallback).toHaveBeenCalledWith({\n        phase: 'upload',\n        percent: 30,\n        message: 'Uploading to secure storage...',\n      });\n\n      expect(mockProgressCallback).toHaveBeenCalledWith({\n        phase: 'register',\n        percent: 60,\n        message: 'Registering upload...',\n      });\n\n      expect(mockProgressCallback).toHaveBeenCalledWith({\n        phase: 'analyze',\n        percent: 80,\n        message: 'Analyzing photo...',\n      });\n\n      expect(mockProgressCallback).toHaveBeenCalledWith({\n        phase: 'pending',\n        percent: 90,\n        message: 'Awaiting moderation...',\n      });\n    });\n\n    it('should handle different upload types', async () => {\n      const types: Array<'profile' | 'pet' | 'verification'> = ['profile', 'pet', 'verification'];\n\n      for (const type of types) {\n        mockRequest.mockResolvedValueOnce({\n          data: {\n            upload: {\n              _id: `upload-${type}`,\n              s3Key: `key-${type}`,\n              url: `url-${type}`,\n              status: 'pending',\n            },\n          },\n        });\n\n        const result = await service.uploadProcessedImage(mockProcessedImage, type);\n\n        expect(mockRequest).toHaveBeenCalledWith('/uploads', {\n          method: 'POST',\n          body: expect.objectContaining({ type }),\n        });\n\n        expect(result.uploadId).toBe(`upload-${type}`);\n      }\n    });\n\n    it('should work without progress callback', async () => {\n      const result = await service.uploadProcessedImage(mockProcessedImage);\n\n      expect(result).toBeDefined();\n      expect(mockProgressCallback).not.toHaveBeenCalled();\n    });\n\n    it('should handle presign failure', async () => {\n      mockApi.presignPhoto.mockRejectedValue(new Error('Presign failed'));\n\n      await expect(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow('Presign failed');\n    });\n\n    it('should handle S3 upload failure', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 403,\n        statusText: 'Forbidden',\n      } as any);\n\n      await expect(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow('S3 upload failed');\n    });\n\n    it('should handle registration failure', async () => {\n      mockRequest.mockRejectedValue(new Error('Registration failed'));\n\n      await expect(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow('Registration failed');\n    });\n\n    it('should handle file URI to blob conversion', async () => {\n      // This is tested implicitly through the upload process\n      // The fileUriToBlob method should be called during upload\n      await service.uploadProcessedImage(mockProcessedImage);\n\n      expect(mockFileSystem.readAsStringAsync).toHaveBeenCalledWith(\n        mockProcessedImage.uri,\n        { encoding: FileSystem.EncodingType.Base64 }\n      );\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.objectContaining({\n          method: 'PUT',\n          body: expect.any(Blob),\n        })\n      );\n    });\n\n    it('should handle missing optional fields in response', async () => {\n      mockRequest.mockResolvedValue({\n        data: {\n          upload: {\n            // Missing id, s3Key, url\n            status: 'approved',\n          },\n        },\n      });\n\n      const result = await service.uploadProcessedImage(mockProcessedImage);\n\n      expect(result).toEqual({\n        uploadId: '',\n        s3Key: 'test-key-123', // Falls back to presigned key\n        url: expect.stringContaining('s3.amazonaws.com'), // Falls back to constructed URL\n        status: 'approved',\n        analysis: undefined,\n      });\n    });\n\n    it('should handle large file uploads', async () => {\n      const largeImage = {\n        ...mockProcessedImage,\n        fileSize: 10 * 1024 * 1024, // 10MB\n      };\n\n      const result = await service.uploadProcessedImage(largeImage);\n\n      expect(result).toBeDefined();\n      expect(mockFetch).toHaveBeenCalled();\n    });\n  });\n\n  describe('uploadFromPicker', () => {\n    it('should complete full pipeline from picker', async () => {\n      mockCheckUploadQuota.mockResolvedValue({\n        allowed: true,\n        remaining: 5,\n        resetAt: new Date(),\n        limit: 10,\n      });\n\n      mockPickAndProcessImage.mockResolvedValue(mockProcessedImage);\n\n      const result = await service.uploadFromPicker(\n        {\n          type: 'profile',\n          petId: 'pet-456',\n          allowEditing: false,\n          useCamera: false,\n        },\n        mockProgressCallback\n      );\n\n      expect(mockCheckUploadQuota).toHaveBeenCalledWith('current-user-id');\n      expect(mockPickAndProcessImage).toHaveBeenCalledWith(false, {\n        maxDimension: 2048,\n        quality: 0.9,\n      });\n\n      expect(result).toBeDefined();\n    });\n\n    it('should use camera when specified', async () => {\n      mockCheckUploadQuota.mockResolvedValue({\n        allowed: true,\n        remaining: 5,\n        resetAt: new Date(),\n        limit: 10,\n      });\n\n      mockCaptureAndProcessImage.mockResolvedValue(mockProcessedImage);\n\n      await service.uploadFromPicker({\n        useCamera: true,\n      });\n\n      expect(mockCaptureAndProcessImage).toHaveBeenCalledWith({\n        maxDimension: 2048,\n        quality: 0.9,\n      });\n\n      expect(mockPickAndProcessImage).not.toHaveBeenCalled();\n    });\n\n    it('should handle quota exceeded', async () => {\n      mockCheckUploadQuota.mockResolvedValue({\n        allowed: false,\n        remaining: 0,\n        resetAt: new Date(),\n        limit: 10,\n      });\n\n      await expect(service.uploadFromPicker()).rejects.toThrow('Upload quota exceeded');\n    });\n\n    it('should handle image picker cancellation', async () => {\n      mockCheckUploadQuota.mockResolvedValue({\n        allowed: true,\n        remaining: 5,\n        resetAt: new Date(),\n        limit: 10,\n      });\n\n      mockPickAndProcessImage.mockResolvedValue(null);\n\n      await expect(service.uploadFromPicker()).rejects.toThrow('No image selected');\n    });\n\n    it('should use default options when not provided', async () => {\n      mockCheckUploadQuota.mockResolvedValue({\n        allowed: true,\n        remaining: 5,\n        resetAt: new Date(),\n        limit: 10,\n      });\n\n      mockPickAndProcessImage.mockResolvedValue(mockProcessedImage);\n\n      await service.uploadFromPicker();\n\n      expect(mockPickAndProcessImage).toHaveBeenCalledWith(true, {\n        maxDimension: 2048,\n        quality: 0.9,\n      });\n    });\n\n    it('should handle quota check failure', async () => {\n      mockCheckUploadQuota.mockRejectedValue(new Error('Quota service unavailable'));\n\n      await expect(service.uploadFromPicker()).rejects.toThrow('Quota service unavailable');\n    });\n  });\n\n  describe('pollUploadStatus', () => {\n    it('should poll until approved status', async () => {\n      const approvedResponse = {\n        data: {\n          upload: {\n            s3Key: 'approved-key',\n            url: 'approved-url',\n            status: 'approved',\n          },\n          analysis: { safety: 'safe', labels: ['dog'] },\n        },\n      };\n\n      mockRequest.mockResolvedValue(approvedResponse);\n\n      const result = await service.pollUploadStatus('upload-123', 5, 100);\n\n      expect(result).toEqual({\n        uploadId: 'upload-123',\n        s3Key: 'approved-key',\n        url: 'approved-url',\n        status: 'approved',\n        analysis: approvedResponse.data.analysis,\n      });\n\n      expect(mockRequest).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle rejected status', async () => {\n      mockRequest.mockResolvedValue({\n        data: {\n          upload: {\n            status: 'rejected',\n            flagReason: 'Inappropriate content',\n          },\n        },\n      });\n\n      await expect(service.pollUploadStatus('upload-123')).rejects.toThrow(\n        'Upload rejected: Inappropriate content'\n      );\n    });\n\n    it('should poll multiple times for pending status', async () => {\n      // First 2 calls return pending\n      mockRequest.mockResolvedValueOnce({\n        data: { upload: { status: 'pending' } },\n      });\n      mockRequest.mockResolvedValueOnce({\n        data: { upload: { status: 'analyzing' } },\n      });\n      // Third call returns approved\n      mockRequest.mockResolvedValueOnce({\n        data: {\n          upload: {\n            s3Key: 'final-key',\n            url: 'final-url',\n            status: 'approved',\n          },\n        },\n      });\n\n      // Use real timers with fast intervals for reliable async behavior\n      const result = await service.pollUploadStatus('upload-123', 5, 10);\n\n      expect(result.status).toBe('approved');\n      expect(mockRequest).toHaveBeenCalledTimes(3);\n    }, 10000);\n\n    it('should timeout after max attempts', async () => {\n      mockRequest.mockResolvedValue({\n        data: { upload: { status: 'pending' } },\n      });\n\n      // Use real timers with fast intervals\n      await expect(\n        service.pollUploadStatus('upload-123', 3, 10)\n      ).rejects.toThrow('Upload status polling timeout');\n      \n      expect(mockRequest).toHaveBeenCalledTimes(3);\n    }, 10000);\n\n    it('should handle API errors during polling', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('Network error'));\n      mockRequest.mockResolvedValueOnce({\n        data: { upload: { status: 'approved' } },\n      });\n\n      const result = await service.pollUploadStatus('upload-123', 3, 10);\n\n      expect(result.status).toBe('approved');\n      // Should continue polling despite error\n    });\n\n    it('should use default polling parameters', async () => {\n      mockRequest.mockResolvedValue({\n        data: { upload: { status: 'approved' } },\n      });\n\n      await service.pollUploadStatus('upload-123');\n\n      expect(mockRequest).toHaveBeenCalledWith('/uploads/upload-123', {\n        method: 'GET',\n      });\n    });\n  });\n\n  describe('uploadBatch', () => {\n    it('should upload multiple images successfully', async () => {\n      const images = [\n        { ...mockProcessedImage, uri: 'image1.jpg' },\n        { ...mockProcessedImage, uri: 'image2.jpg' },\n        { ...mockProcessedImage, uri: 'image3.jpg' },\n      ];\n\n      const mockProgressCallback = jest.fn();\n\n      const results = await service.uploadBatch(images, 'pet', 'pet-123', mockProgressCallback);\n\n      expect(results).toHaveLength(3);\n      expect(mockProgressCallback).toHaveBeenCalledTimes(3);\n\n      // Check progress callbacks for each image\n      expect(mockProgressCallback).toHaveBeenCalledWith(0, {\n        phase: 'presign',\n        percent: 0,\n        message: 'Processing photo 1/3',\n      });\n\n      expect(mockProgressCallback).toHaveBeenCalledWith(1, {\n        phase: 'presign',\n        percent: 0,\n        message: 'Processing photo 2/3',\n      });\n\n      expect(mockProgressCallback).toHaveBeenCalledWith(2, {\n        phase: 'presign',\n        percent: 0,\n        message: 'Processing photo 3/3',\n      });\n    });\n\n    it('should handle partial failures in batch upload', async () => {\n      const images = [\n        mockProcessedImage,\n        { ...mockProcessedImage, uri: 'fail-image.jpg' },\n        mockProcessedImage,\n      ];\n\n      // Make second upload fail\n      mockFetch.mockResolvedValueOnce({ ok: true } as any);\n      mockRequest.mockResolvedValueOnce({ data: { upload: { _id: 'upload1' } } });\n\n      mockFetch.mockResolvedValueOnce({ ok: false } as any); // Second upload fails\n\n      mockFetch.mockResolvedValueOnce({ ok: true } as any);\n      mockRequest.mockResolvedValueOnce({ data: { upload: { _id: 'upload3' } } });\n\n      const results = await service.uploadBatch(images);\n\n      expect(results).toHaveLength(2); // Only successful uploads\n      expect(results[0].uploadId).toBe('upload1');\n      expect(results[1].uploadId).toBe('upload3');\n    });\n\n    it('should work without progress callback', async () => {\n      const images = [mockProcessedImage];\n\n      const results = await service.uploadBatch(images);\n\n      expect(results).toHaveLength(1);\n    });\n\n    it('should handle empty batch', async () => {\n      const results = await service.uploadBatch([]);\n\n      expect(results).toEqual([]);\n    });\n  });\n\n  describe('checkDuplicate', () => {\n    it('should check for duplicate uploads', async () => {\n      const mockResponse = {\n        data: {\n          isDuplicate: true,\n          similarImages: ['similar1.jpg', 'similar2.jpg'],\n        },\n      };\n\n      mockRequest.mockResolvedValue(mockResponse);\n\n      const result = await service.checkDuplicate('upload-123');\n\n      expect(result).toEqual({\n        isDuplicate: true,\n        similarImages: ['similar1.jpg', 'similar2.jpg'],\n      });\n\n      expect(mockRequest).toHaveBeenCalledWith('/uploads/upload-123/duplicate-check', {\n        method: 'GET',\n      });\n    });\n\n    it('should handle no duplicates found', async () => {\n      const mockResponse = {\n        data: {\n          isDuplicate: false,\n        },\n      };\n\n      mockRequest.mockResolvedValue(mockResponse);\n\n      const result = await service.checkDuplicate('upload-456');\n\n      expect(result).toEqual({\n        isDuplicate: false,\n        similarImages: undefined,\n      });\n    });\n\n    it('should handle API errors gracefully', async () => {\n      mockRequest.mockRejectedValue(new Error('Duplicate check failed'));\n\n      const result = await service.checkDuplicate('upload-789');\n\n      expect(result).toEqual({\n        isDuplicate: false,\n      });\n    });\n  });\n\n  describe('File URI to Blob Conversion', () => {\n    it('should convert file URI to blob', async () => {\n      const uri = 'file://test-image.jpg';\n      const base64Data = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==';\n\n      mockFileSystem.readAsStringAsync.mockResolvedValue(base64Data);\n\n      const blob = await (service as any).fileUriToBlob(uri);\n\n      expect(blob).toBeInstanceOf(Blob);\n      expect(blob.type).toBe('image/jpeg');\n      expect(blob.size).toBeGreaterThan(0);\n    });\n\n    it('should handle file read errors', async () => {\n      mockFileSystem.readAsStringAsync.mockRejectedValue(new Error('File read failed'));\n\n      await expect((service as any).fileUriToBlob('invalid-uri')).rejects.toThrow('File read failed');\n    });\n\n    it('should handle empty base64 data', async () => {\n      mockFileSystem.readAsStringAsync.mockResolvedValue('');\n\n      const blob = await (service as any).fileUriToBlob('empty-file');\n\n      expect(blob.size).toBe(0);\n    });\n  });\n\n  describe('Retry Upload', () => {\n    it('should retry upload with backoff', async () => {\n      const expectedResult = { uploadId: 'retry-success' };\n\n      mockUploadWithRetry.mockResolvedValue(expectedResult);\n\n      const result = await service.retryUpload(mockProcessedImage, 'pet', 'pet-123', 3);\n\n      expect(mockUploadWithRetry).toHaveBeenCalledWith(\n        expect.any(Function),\n        3,\n        1000\n      );\n\n      expect(result).toEqual(expectedResult);\n    });\n\n    it('should use default retry parameters', async () => {\n      mockUploadWithRetry.mockResolvedValue({ uploadId: 'default-retry' });\n\n      await service.retryUpload(mockProcessedImage);\n\n      expect(mockUploadWithRetry).toHaveBeenCalledWith(\n        expect.any(Function),\n        3, // default maxRetries\n        1000 // default backoffMs\n      );\n    });\n\n    it('should handle retry failures', async () => {\n      mockUploadWithRetry.mockRejectedValue(new Error('All retries failed'));\n\n      await expect(service.retryUpload(mockProcessedImage)).rejects.toThrow('All retries failed');\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle very long URIs', async () => {\n      const longUri = 'file://' + 'a'.repeat(1000) + '.jpg';\n\n      const longImage = { ...mockProcessedImage, uri: longUri };\n\n      await service.uploadProcessedImage(longImage);\n\n      expect(mockFetch).toHaveBeenCalled();\n    });\n\n    it('should handle special characters in URIs', async () => {\n      const specialUri = 'file://test image (copy).jpg';\n\n      const specialImage = { ...mockProcessedImage, uri: specialUri };\n\n      await service.uploadProcessedImage(specialImage);\n\n      expect(mockFileSystem.readAsStringAsync).toHaveBeenCalledWith(specialUri, expect.any(Object));\n    });\n\n    it('should handle network timeouts during upload', async () => {\n      mockFetch.mockRejectedValue(new Error('Network timeout'));\n\n      await expect(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow('Network timeout');\n    });\n\n    it('should handle malformed presign responses', async () => {\n      mockApi.presignPhoto.mockResolvedValue({\n        // Missing required fields\n      });\n\n      await expect(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow();\n      // Should fail when trying to access undefined url/key\n    });\n\n    it('should handle concurrent uploads', async () => {\n      const uploadPromises = [\n        service.uploadProcessedImage({ ...mockProcessedImage, uri: 'img1.jpg' }),\n        service.uploadProcessedImage({ ...mockProcessedImage, uri: 'img2.jpg' }),\n        service.uploadProcessedImage({ ...mockProcessedImage, uri: 'img3.jpg' }),\n      ];\n\n      const results = await Promise.all(uploadPromises);\n\n      expect(results).toHaveLength(3);\n      results.forEach(result => {\n        expect(result.uploadId).toBe('upload-123');\n      });\n    });\n\n    it('should handle extremely large files', async () => {\n      const hugeImage = {\n        ...mockProcessedImage,\n        fileSize: 100 * 1024 * 1024, // 100MB\n      };\n\n      // Mock reading large base64 data\n      const largeBase64 = 'A'.repeat(1024 * 1024); // 1MB of base64\n      mockFileSystem.readAsStringAsync.mockResolvedValue(largeBase64);\n\n      await service.uploadProcessedImage(hugeImage);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.objectContaining({\n          body: expect.any(Blob),\n        })\n      );\n    });\n\n    it('should handle malformed processed images', async () => {\n      const malformedImage = {\n        uri: 'test.jpg',\n        // Missing required fields\n      } as ProcessedImage;\n\n      await expect(service.uploadProcessedImage(malformedImage)).rejects.toThrow();\n    });\n\n    it('should handle upload registration with missing response fields', async () => {\n      mockRequest.mockResolvedValue({\n        data: {\n          upload: {}, // Empty upload object\n        },\n      });\n\n      const result = await service.uploadProcessedImage(mockProcessedImage);\n\n      expect(result).toEqual({\n        uploadId: '',\n        s3Key: 'test-key-123',\n        url: expect.stringContaining('s3.amazonaws.com'),\n        status: 'pending',\n        analysis: undefined,\n      });\n    });\n\n    it('should handle progress callback errors gracefully', async () => {\n      const errorCallback = jest.fn().mockImplementation(() => {\n        throw new Error('Progress callback failed');\n      });\n\n      // Should not fail the upload due to progress callback error\n      await expect(service.uploadProcessedImage(mockProcessedImage, 'pet', undefined, errorCallback)).resolves.toBeDefined();\n    });\n\n    it('should handle file system read errors during blob conversion', async () => {\n      mockFileSystem.readAsStringAsync.mockRejectedValue(new Error('File system error'));\n\n      await expect(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow('File system error');\n    });\n\n    it('should handle invalid base64 data', async () => {\n      mockFileSystem.readAsStringAsync.mockResolvedValue('invalid base64!@#$%');\n\n      // atob will throw on invalid base64, but the method should handle it\n      await expect(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow();\n    });\n\n    it('should handle polling with invalid upload IDs', async () => {\n      mockRequest.mockRejectedValue(new Error('Upload not found'));\n\n      await expect(service.pollUploadStatus('invalid-id')).rejects.toThrow('Upload not found');\n    });\n\n    it('should handle batch upload with all failures', async () => {\n      mockFetch.mockResolvedValue({ ok: false } as any);\n\n      const images = [mockProcessedImage, mockProcessedImage];\n      const results = await service.uploadBatch(images);\n\n      expect(results).toEqual([]);\n    });\n\n    it('should handle duplicate check with malformed responses', async () => {\n      mockRequest.mockResolvedValue({\n        data: 'invalid response format',\n      });\n\n      const result = await service.checkDuplicate('upload-123');\n\n      expect(result).toEqual({\n        isDuplicate: false,\n      });\n    });\n\n    it('should handle retry with invalid parameters', async () => {\n      mockUploadWithRetry.mockRejectedValue(new Error('Invalid retry params'));\n\n      await expect(service.retryUpload(mockProcessedImage, 'invalid' as any)).rejects.toThrow('Invalid retry params');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}