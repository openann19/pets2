92fd32629d0197e1bf6c81d55d80ab42
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_OPTIONS = void 0;
exports.captureAndProcessImage = captureAndProcessImage;
exports.checkUploadQuota = checkUploadQuota;
exports.pickAndProcessImage = pickAndProcessImage;
exports.processImageForUpload = processImageForUpload;
exports.uploadWithRetry = uploadWithRetry;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _logger = require("./logger");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DEFAULT_OPTIONS = exports.DEFAULT_OPTIONS = {
  maxDimension: 2048,
  quality: 0.9,
  aspectRatio: [4, 3],
  stripExif: true,
  cropToAspect: true
};
function validateMimeType(_x) {
  return _validateMimeType.apply(this, arguments);
}
function _validateMimeType() {
  _validateMimeType = (0, _asyncToGenerator2.default)(function* (uri) {
    try {
      var fileInfo = yield FileSystem.getInfoAsync(uri);
      var isFile = fileInfo.exists && !fileInfo.isDirectory;
      if (isFile) {
        var ext = uri.split('.').pop();
        var validExtensions = ['jpg', 'jpeg', 'png', 'webp'];
        var mimeTypes = {
          jpg: 'image/jpeg',
          jpeg: 'image/jpeg',
          png: 'image/png',
          webp: 'image/webp'
        };
        if (typeof ext === 'string') {
          var normalizedExt = ext.toLowerCase();
          if (validExtensions.includes(normalizedExt)) {
            return {
              valid: true,
              mimeType: mimeTypes[normalizedExt]
            };
          }
        }
      }
      return {
        valid: false,
        mimeType: 'unknown'
      };
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('MIME validation error', {
        error: err
      });
      return {
        valid: false,
        mimeType: 'unknown'
      };
    }
  });
  return _validateMimeType.apply(this, arguments);
}
function fixOrientation(_x2) {
  return _fixOrientation.apply(this, arguments);
}
function _fixOrientation() {
  _fixOrientation = (0, _asyncToGenerator2.default)(function* (imageUri) {
    try {
      var result = yield ImageManipulator.manipulateAsync(imageUri, [], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
      return result.uri;
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Orientation fix error', {
        error: err
      });
      return imageUri;
    }
  });
  return _fixOrientation.apply(this, arguments);
}
function resizeImage(_x3, _x4) {
  return _resizeImage.apply(this, arguments);
}
function _resizeImage() {
  _resizeImage = (0, _asyncToGenerator2.default)(function* (imageUri, maxDimension) {
    try {
      var manipulateResult = yield ImageManipulator.manipulateAsync(imageUri, [], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
      var width = manipulateResult.width,
        height = manipulateResult.height;
      var newWidth = width;
      var newHeight = height;
      if (width > maxDimension || height > maxDimension) {
        if (width > height) {
          newWidth = maxDimension;
          newHeight = Math.round(height / width * maxDimension);
        } else {
          newHeight = maxDimension;
          newWidth = Math.round(width / height * maxDimension);
        }
      }
      if (newWidth < width || newHeight < height) {
        return yield ImageManipulator.manipulateAsync(imageUri, [{
          resize: {
            width: newWidth,
            height: newHeight
          }
        }], {
          compress: 1,
          format: ImageManipulator.SaveFormat.JPEG
        });
      }
      return manipulateResult;
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Resize error', {
        error: err
      });
      throw err;
    }
  });
  return _resizeImage.apply(this, arguments);
}
function cropToAspectRatio(_x5, _x6, _x7, _x8) {
  return _cropToAspectRatio.apply(this, arguments);
}
function _cropToAspectRatio() {
  _cropToAspectRatio = (0, _asyncToGenerator2.default)(function* (imageUri, aspectRatio, width, height) {
    try {
      var _aspectRatio = (0, _slicedToArray2.default)(aspectRatio, 2),
        targetWidth = _aspectRatio[0],
        targetHeight = _aspectRatio[1];
      var targetAspect = targetWidth / targetHeight;
      var imageAspect = width / height;
      var cropRegion = {
        crop: {
          originX: 0,
          originY: 0,
          width: width,
          height: height
        }
      };
      if (Math.abs(imageAspect - targetAspect) > 0.01) {
        if (imageAspect > targetAspect) {
          var newWidth = height * targetAspect;
          var originX = (width - newWidth) / 2;
          cropRegion = {
            crop: {
              originX: originX,
              originY: 0,
              width: newWidth,
              height: height
            }
          };
        } else {
          var newHeight = width / targetAspect;
          var originY = (height - newHeight) / 2;
          cropRegion = {
            crop: {
              originX: 0,
              originY: originY,
              width: width,
              height: newHeight
            }
          };
        }
      }
      return yield ImageManipulator.manipulateAsync(imageUri, [cropRegion], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Crop error', {
        error: err
      });
      throw err;
    }
  });
  return _cropToAspectRatio.apply(this, arguments);
}
function compressImage(_x9, _x0) {
  return _compressImage.apply(this, arguments);
}
function _compressImage() {
  _compressImage = (0, _asyncToGenerator2.default)(function* (imageUri, quality) {
    try {
      return yield ImageManipulator.manipulateAsync(imageUri, [], {
        compress: quality,
        format: ImageManipulator.SaveFormat.JPEG
      });
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Compress error', {
        error: err
      });
      throw err;
    }
  });
  return _compressImage.apply(this, arguments);
}
function getFileInfo(_x1) {
  return _getFileInfo.apply(this, arguments);
}
function _getFileInfo() {
  _getFileInfo = (0, _asyncToGenerator2.default)(function* (uri) {
    try {
      var info = yield FileSystem.getInfoAsync(uri);
      if (info.exists && 'size' in info) {
        return {
          size: info.size,
          exists: info.exists
        };
      }
      return {
        size: 0,
        exists: false
      };
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('File info error', {
        error: err
      });
      return {
        size: 0,
        exists: false
      };
    }
  });
  return _getFileInfo.apply(this, arguments);
}
function processImageForUpload(_x10) {
  return _processImageForUpload.apply(this, arguments);
}
function _processImageForUpload() {
  _processImageForUpload = (0, _asyncToGenerator2.default)(function* (imageUri) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var opts = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);
    try {
      _logger.logger.info('Starting upload hygiene processing', {
        uri: imageUri
      });
      var mimeValidation = yield validateMimeType(imageUri);
      if (!mimeValidation.valid) {
        throw new Error(`Invalid file type: ${mimeValidation.mimeType}`);
      }
      _logger.logger.debug('MIME type validated', {
        mimeType: mimeValidation.mimeType
      });
      var orientationFixed = yield fixOrientation(imageUri);
      _logger.logger.debug('Orientation fixed');
      var initialManipulate = yield ImageManipulator.manipulateAsync(orientationFixed, [], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
      var originalWidth = initialManipulate.width;
      var originalHeight = initialManipulate.height;
      _logger.logger.debug('Original dimensions', {
        width: originalWidth,
        height: originalHeight
      });
      var resized = yield resizeImage(orientationFixed, opts.maxDimension);
      _logger.logger.debug('Image resized', {
        width: resized.width,
        height: resized.height
      });
      var cropped = resized;
      if (opts.cropToAspect) {
        cropped = yield cropToAspectRatio(resized.uri, opts.aspectRatio, resized.width, resized.height);
        _logger.logger.debug('Image cropped', {
          aspectRatio: opts.aspectRatio
        });
      }
      var compressed = yield compressImage(cropped.uri, opts.quality);
      _logger.logger.debug('Image compressed', {
        quality: opts.quality
      });
      var fileInfo = yield getFileInfo(compressed.uri);
      var result = {
        uri: compressed.uri,
        width: compressed.width,
        height: compressed.height,
        fileSize: fileInfo.size,
        mimeType: 'image/jpeg',
        metadata: {
          originalWidth: originalWidth,
          originalHeight: originalHeight,
          orientationFixed: true,
          exifStripped: opts.stripExif ? true : false
        }
      };
      _logger.logger.info('Upload hygiene complete', {
        finalSize: `${result.width}x${result.height}`,
        fileSize: `${(result.fileSize / 1024).toFixed(2)} KB`,
        mimeType: result.mimeType,
        metadata: result.metadata
      });
      return result;
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Upload hygiene processing failed', {
        error: err
      });
      throw err;
    }
  });
  return _processImageForUpload.apply(this, arguments);
}
function pickAndProcessImage() {
  return _pickAndProcessImage.apply(this, arguments);
}
function _pickAndProcessImage() {
  _pickAndProcessImage = (0, _asyncToGenerator2.default)(function* () {
    var allowEditing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    try {
      var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),
        status = _yield$ImagePicker$re.status;
      if (status !== 'granted') {
        throw new Error('Camera roll permissions not granted');
      }
      var result = yield ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: allowEditing,
        quality: 1,
        allowsMultipleSelection: false
      });
      if (result.canceled || !result.assets[0]) {
        return null;
      }
      var asset = result.assets[0];
      return yield processImageForUpload(asset.uri, options);
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Pick and process error', {
        error: err
      });
      throw err;
    }
  });
  return _pickAndProcessImage.apply(this, arguments);
}
function captureAndProcessImage() {
  return _captureAndProcessImage.apply(this, arguments);
}
function _captureAndProcessImage() {
  _captureAndProcessImage = (0, _asyncToGenerator2.default)(function* () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    try {
      var _yield$ImagePicker$re2 = yield ImagePicker.requestCameraPermissionsAsync(),
        status = _yield$ImagePicker$re2.status;
      if (status !== 'granted') {
        throw new Error('Camera permissions not granted');
      }
      var result = yield ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: false,
        quality: 1
      });
      if (result.canceled || !result.assets[0]) {
        return null;
      }
      var asset = result.assets[0];
      return yield processImageForUpload(asset.uri, options);
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Capture and process error', {
        error: err
      });
      throw err;
    }
  });
  return _captureAndProcessImage.apply(this, arguments);
}
function checkUploadQuota(_x11) {
  return _checkUploadQuota.apply(this, arguments);
}
function _checkUploadQuota() {
  _checkUploadQuota = (0, _asyncToGenerator2.default)(function* (userId) {
    try {
      return {
        allowed: true,
        remaining: 10,
        resetAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
        limit: 10
      };
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Quota check error', {
        error: err,
        userId: userId
      });
      throw err;
    }
  });
  return _checkUploadQuota.apply(this, arguments);
}
function uploadWithRetry(_x12) {
  return _uploadWithRetry.apply(this, arguments);
}
function _uploadWithRetry() {
  _uploadWithRetry = (0, _asyncToGenerator2.default)(function* (uploadFn) {
    var maxRetries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
    var backoffMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;
    var lastError = null;
    var _loop = function* _loop() {
        try {
          return {
            v: yield uploadFn()
          };
        } catch (error) {
          lastError = error instanceof Error ? error : new Error(String(error));
          if (attempt < maxRetries) {
            var delay = backoffMs * Math.pow(2, attempt - 1);
            _logger.logger.warn('Upload failed, retrying', {
              delay: delay,
              attempt: attempt,
              maxRetries: maxRetries,
              error: lastError
            });
            yield new Promise(function (resolve) {
              return setTimeout(resolve, delay);
            });
          }
        }
      },
      _ret;
    for (var attempt = 1; attempt <= maxRetries; attempt++) {
      _ret = yield* _loop();
      if (_ret) return _ret.v;
    }
    throw lastError || new Error('Upload failed after retries');
  });
  return _uploadWithRetry.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,