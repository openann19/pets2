ba3a6ed172d0f77b5fc4147517d91450
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('@sentry/react-native');
_getJestObj().mock('@react-native-community/netinfo');
_getJestObj().mock("../logger", function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn(),
      debug: _globals.jest.fn(),
      performance: _globals.jest.fn(),
      security: _globals.jest.fn(),
      setUserContext: _globals.jest.fn(),
      clearUserContext: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../utils/PerformanceMonitor", function () {
  return {
    performanceMonitor: {
      getCurrentFPS: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _globals = require("@jest/globals");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var Sentry = _interopRequireWildcard(require("@sentry/react-native"));
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _observability = require("../observability");
var _logger = require("../logger");
var _PerformanceMonitor = require("../utils/PerformanceMonitor");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockSentry = Sentry;
var mockNetInfo = _netinfo.default;
var mockLogger = _logger.logger;
var mockPerformanceMonitor = _PerformanceMonitor.performanceMonitor;
(0, _globals.describe)('ObservabilityService', function () {
  var service;
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    _observability.ObservabilityService.instance = undefined;
    mockPerformanceMonitor.getCurrentFPS.mockReturnValue(60);
    mockNetInfo.addEventListener.mockReturnValue({
      remove: _globals.jest.fn()
    });
    mockNetInfo.fetch.mockResolvedValue({
      isConnected: true,
      type: 'wifi',
      isInternetReachable: true
    });
    service = _observability.ObservabilityService.getInstance();
  });
  (0, _globals.afterEach)(function () {
    _globals.jest.clearAllTimers();
  });
  (0, _globals.describe)('Singleton Pattern', function () {
    (0, _globals.it)('should return the same instance', function () {
      var instance1 = _observability.ObservabilityService.getInstance();
      var instance2 = _observability.ObservabilityService.getInstance();
      (0, _globals.expect)(instance1).toBe(instance2);
      (0, _globals.expect)(instance1).toBe(_observability.observability);
    });
    (0, _globals.it)('should initialize with default configuration', function () {
      var config = service.config;
      (0, _globals.expect)(config).toEqual({
        enablePerformanceTracking: true,
        enableErrorTracking: true,
        enableAnalytics: true,
        enableSecurityMonitoring: true,
        sampleRate: 1.0,
        environment: 'development'
      });
    });
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize Sentry when error tracking is enabled', function () {
      service.initialize();
      (0, _globals.expect)(mockSentry.init).toHaveBeenCalledWith({
        dsn: undefined,
        environment: 'development',
        sampleRate: 1.0,
        beforeSend: _globals.expect.any(Function)
      });
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Sentry error tracking initialized');
    });
    (0, _globals.it)('should not initialize Sentry when error tracking is disabled', function () {
      service.config.enableErrorTracking = false;
      service.initialize();
      (0, _globals.expect)(mockSentry.init).not.toHaveBeenCalled();
    });
    (0, _globals.it)('should initialize network monitoring', function () {
      service.initialize();
      (0, _globals.expect)(mockNetInfo.addEventListener).toHaveBeenCalled();
      (0, _globals.expect)(mockNetInfo.fetch).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle initialization errors gracefully', function () {
      mockSentry.init.mockImplementation(function () {
        throw new Error('Sentry init failed');
      });
      (0, _globals.expect)(function () {
        return service.initialize();
      }).not.toThrow();
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to initialize observability service', {
        error: _globals.expect.any(Error)
      });
    });
    (0, _globals.it)('should not initialize twice', function () {
      service.initialize();
      service.initialize();
      (0, _globals.expect)(mockSentry.init).toHaveBeenCalledTimes(1);
    });
  });
  (0, _globals.describe)('Performance Tracking', function () {
    (0, _globals.beforeEach)(function () {
      service.initialize();
    });
    (0, _globals.it)('should track performance metrics', function () {
      var metadata = {
        screen: 'Home',
        component: 'Feed'
      };
      service.trackPerformance('render_feed', 150, metadata);
      (0, _globals.expect)(mockPerformanceMonitor.getCurrentFPS).toHaveBeenCalled();
      (0, _globals.expect)(mockLogger.performance).toHaveBeenCalledWith('Performance: render_feed', 150, _globals.expect.objectContaining(_objectSpread(_objectSpread({}, metadata), {}, {
        fps: 60,
        memoryUsage: 0,
        interactionTime: 150,
        timestamp: _globals.expect.any(String)
      })));
    });
    (0, _globals.it)('should not track performance when disabled', function () {
      service.config.enablePerformanceTracking = false;
      service.trackPerformance('test', 100);
      (0, _globals.expect)(mockLogger.performance).not.toHaveBeenCalled();
    });
    (0, _globals.it)('should send performance data to analytics', function () {
      var metadata = {
        screen: 'Profile',
        component: 'Header'
      };
      service.trackPerformance('load_profile', 200, metadata);
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Analytics: performance_metric', _globals.expect.objectContaining(_objectSpread({
        analytics: true,
        operation: 'load_profile',
        duration: 200,
        fps: 60,
        memoryUsage: 0
      }, metadata)));
    });
    (0, _globals.it)('should handle missing metadata gracefully', function () {
      service.trackPerformance('simple_operation', 50);
      (0, _globals.expect)(mockLogger.performance).toHaveBeenCalledWith('Performance: simple_operation', 50, _globals.expect.objectContaining({
        screen: 'unknown',
        component: 'unknown'
      }));
    });
  });
  (0, _globals.describe)('User Interaction Tracking', function () {
    (0, _globals.beforeEach)(function () {
      service.initialize();
    });
    (0, _globals.it)('should track user interactions', function () {
      var metadata = {
        element: 'like_button',
        value: true
      };
      service.trackInteraction('Home', 'Feed', 'like', metadata);
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('User interaction: Home.Feed.like', _globals.expect.objectContaining(_objectSpread(_objectSpread({
        screen: 'Home',
        component: 'Feed',
        action: 'like'
      }, metadata), {}, {
        timestamp: _globals.expect.any(String)
      })));
    });
    (0, _globals.it)('should handle empty metadata', function () {
      service.trackInteraction('Profile', 'Avatar', 'tap');
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('User interaction: Profile.Avatar.tap', _globals.expect.objectContaining({
        screen: 'Profile',
        component: 'Avatar',
        action: 'tap',
        timestamp: _globals.expect.any(String)
      }));
    });
  });
  (0, _globals.describe)('Error Tracking', function () {
    (0, _globals.beforeEach)(function () {
      service.initialize();
    });
    (0, _globals.it)('should track errors with full context', function () {
      var error = new Error('Test error');
      var context = {
        userId: 'user123',
        sessionId: 'session456',
        screen: 'Home',
        component: 'Feed',
        action: 'load',
        metadata: {
          feedId: 'feed789'
        }
      };
      service.trackError(error, context);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error in Home.Feed', _globals.expect.objectContaining(_objectSpread({
        error: _globals.expect.objectContaining({
          message: 'Test error',
          stack: error.stack,
          name: 'Error'
        })
      }, context)));
      (0, _globals.expect)(mockSentry.captureException).toHaveBeenCalledWith(error, {
        tags: {
          screen: 'Home',
          component: 'Feed',
          action: 'load'
        },
        user: {
          id: 'user123'
        },
        extra: context.metadata
      });
    });
    (0, _globals.it)('should not send to Sentry when error tracking is disabled', function () {
      service.config.enableErrorTracking = false;
      var error = new Error('Test error');
      var context = {
        screen: 'Test',
        component: 'Test',
        action: 'test',
        metadata: {}
      };
      service.trackError(error, context);
      (0, _globals.expect)(mockSentry.captureException).not.toHaveBeenCalled();
    });
    (0, _globals.it)('should handle errors without user ID', function () {
      var error = new Error('Anonymous error');
      var context = {
        screen: 'Public',
        component: 'Button',
        action: 'press',
        metadata: {
          public: true
        }
      };
      service.trackError(error, context);
      (0, _globals.expect)(mockSentry.captureException).toHaveBeenCalledWith(error, {
        tags: {
          screen: 'Public',
          component: 'Button',
          action: 'press'
        },
        user: {
          id: undefined
        },
        extra: context.metadata
      });
    });
  });
  (0, _globals.describe)('Security Event Tracking', function () {
    (0, _globals.beforeEach)(function () {
      service.initialize();
    });
    (0, _globals.it)('should track security events with different severities', function () {
      var securityEvent = {
        type: 'auth_attempt',
        severity: 'high',
        userId: 'user123',
        ip: '192.168.1.1',
        details: {
          attempts: 3,
          success: false
        }
      };
      service.trackSecurity(securityEvent);
      (0, _globals.expect)(mockLogger.security).toHaveBeenCalledWith('Security event: auth_attempt [HIGH]', _globals.expect.objectContaining({
        type: 'auth_attempt',
        severity: 'high',
        userId: 'user123',
        ip: '192.168.1.1',
        attempts: 3,
        success: false,
        timestamp: _globals.expect.any(String)
      }));
    });
    (0, _globals.it)('should send critical security events to Sentry', function () {
      var criticalEvent = {
        type: 'data_breach_attempt',
        severity: 'critical',
        userId: 'hacker123',
        details: {
          suspicious: true
        }
      };
      service.trackSecurity(criticalEvent);
      (0, _globals.expect)(mockSentry.captureMessage).toHaveBeenCalledWith('Critical security event: data_breach_attempt', 'fatal');
    });
    (0, _globals.it)('should not track security events when disabled', function () {
      service.config.enableSecurityMonitoring = false;
      var securityEvent = {
        type: 'suspicious_activity',
        severity: 'medium',
        details: {}
      };
      service.trackSecurity(securityEvent);
      (0, _globals.expect)(mockLogger.security).not.toHaveBeenCalled();
    });
    (0, _globals.it)('should handle security events without user ID', function () {
      var anonymousEvent = {
        type: 'rate_limit',
        severity: 'low',
        ip: '10.0.0.1',
        details: {
          endpoint: '/api/login'
        }
      };
      service.trackSecurity(anonymousEvent);
      (0, _globals.expect)(mockLogger.security).toHaveBeenCalledWith('Security event: rate_limit [LOW]', _globals.expect.objectContaining({
        type: 'rate_limit',
        severity: 'low',
        userId: undefined,
        ip: '10.0.0.1'
      }));
    });
  });
  (0, _globals.describe)('Analytics Event Tracking', function () {
    (0, _globals.beforeEach)(function () {
      service.initialize();
    });
    (0, _globals.it)('should track analytics events', function () {
      var properties = {
        screen: 'Home',
        action: 'scroll',
        distance: 500
      };
      service.trackAnalytics('user_scroll', properties);
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Analytics: user_scroll', _globals.expect.objectContaining({
        analytics: true,
        event: 'user_scroll',
        properties: properties,
        timestamp: _globals.expect.any(Number)
      }));
    });
    (0, _globals.it)('should not track analytics when disabled', function () {
      service.config.enableAnalytics = false;
      service.trackAnalytics('test_event', {});
      (0, _globals.expect)(mockLogger.info).not.toHaveBeenCalled();
    });
    (0, _globals.it)('should handle empty properties', function () {
      service.trackAnalytics('simple_event', {});
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Analytics: simple_event', _globals.expect.objectContaining({
        analytics: true,
        event: 'simple_event',
        properties: {}
      }));
    });
  });
  (0, _globals.describe)('User Journey Tracking', function () {
    (0, _globals.beforeEach)(function () {
      service.initialize();
    });
    (0, _globals.it)('should track user journey progression', function () {
      var journey = ['Welcome', 'Profile Setup', 'Pet Registration', 'Home'];
      var currentStep = 'Pet Registration';
      service.trackJourney('user123', journey, currentStep, {
        completedSteps: 2,
        totalSteps: 4
      });
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('User journey: Welcome → Profile Setup → Pet Registration → Home', _globals.expect.objectContaining({
        userId: 'user123',
        journey: journey,
        currentStep: currentStep,
        stepIndex: 2,
        totalSteps: 4,
        completedSteps: 2,
        totalSteps: 4
      }));
    });
    (0, _globals.it)('should handle single-step journey', function () {
      var journey = ['Single Step'];
      var currentStep = 'Single Step';
      service.trackJourney('user456', journey, currentStep);
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('User journey: Single Step', _globals.expect.objectContaining({
        userId: 'user456',
        journey: journey,
        currentStep: currentStep,
        stepIndex: 0,
        totalSteps: 1
      }));
    });
  });
  (0, _globals.describe)('Feature Usage Tracking', function () {
    (0, _globals.beforeEach)(function () {
      service.initialize();
    });
    (0, _globals.it)('should track feature usage', function () {
      var metadata = {
        feature: 'super_like',
        source: 'profile',
        remaining: 2
      };
      service.trackFeatureUsage('super_like', 'user123', metadata);
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Feature usage: super_like', _globals.expect.objectContaining(_objectSpread(_objectSpread({
        feature: 'super_like',
        userId: 'user123'
      }, metadata), {}, {
        timestamp: _globals.expect.any(String)
      })));
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Analytics: feature_used', _globals.expect.objectContaining({
        analytics: true,
        event: 'feature_used',
        properties: _globals.expect.objectContaining(_objectSpread({
          feature: 'super_like'
        }, metadata))
      }));
    });
    (0, _globals.it)('should handle feature usage without metadata', function () {
      service.trackFeatureUsage('basic_like', 'user789');
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Feature usage: basic_like', _globals.expect.objectContaining({
        feature: 'basic_like',
        userId: 'user789',
        timestamp: _globals.expect.any(String)
      }));
    });
  });
  (0, _globals.describe)('Performance Tracing', function () {
    (0, _globals.beforeEach)(function () {
      service.initialize();
    });
    (0, _globals.it)('should create and complete performance traces', function () {
      var trace = service.startTrace('api_call');
      (0, _globals.expect)(typeof trace.end).toBe('function');
      _globals.jest.advanceTimersByTime(100);
      var metadata = {
        endpoint: '/api/test',
        status: 200
      };
      trace.end(metadata);
      (0, _globals.expect)(mockLogger.performance).toHaveBeenCalledWith('Performance: api_call', _globals.expect.any(Number), _globals.expect.objectContaining(metadata));
    });
    (0, _globals.it)('should handle trace completion without metadata', function () {
      var trace = service.startTrace('render_component');
      _globals.jest.advanceTimersByTime(50);
      trace.end();
      (0, _globals.expect)(mockLogger.performance).toHaveBeenCalledWith('Performance: render_component', _globals.expect.any(Number), _globals.expect.any(Object));
    });
    (0, _globals.it)('should handle multiple concurrent traces', function () {
      var trace1 = service.startTrace('operation1');
      var trace2 = service.startTrace('operation2');
      _globals.jest.advanceTimersByTime(75);
      trace1.end({
        result: 'success'
      });
      trace2.end({
        result: 'error'
      });
      (0, _globals.expect)(mockLogger.performance).toHaveBeenCalledTimes(2);
    });
  });
  (0, _globals.describe)('User Context Management', function () {
    (0, _globals.beforeEach)(function () {
      service.initialize();
    });
    (0, _globals.it)('should set user context', function () {
      var userId = 'user123';
      var properties = {
        email: 'user@example.com',
        subscription: 'premium'
      };
      service.setUserContext(userId, properties);
      (0, _globals.expect)(mockSentry.setUser).toHaveBeenCalledWith({
        id: userId,
        email: 'user@example.com',
        subscription: 'premium'
      });
      (0, _globals.expect)(mockLogger.setUserContext).toHaveBeenCalledWith(userId, properties);
    });
    (0, _globals.it)('should set user context with minimal properties', function () {
      service.setUserContext('user456');
      (0, _globals.expect)(mockSentry.setUser).toHaveBeenCalledWith({
        id: 'user456'
      });
    });
    (0, _globals.it)('should clear user context', function () {
      service.clearUserContext();
      (0, _globals.expect)(mockSentry.setUser).toHaveBeenCalledWith(null);
      (0, _globals.expect)(mockLogger.clearUserContext).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Breadcrumb Tracking', function () {
    (0, _globals.beforeEach)(function () {
      service.initialize();
    });
    (0, _globals.it)('should add breadcrumbs for debugging', function () {
      var message = 'User navigated to profile';
      var category = 'navigation';
      var metadata = {
        fromScreen: 'Home',
        toScreen: 'Profile',
        userId: 'user123'
      };
      service.addBreadcrumb(message, category, metadata);
      (0, _globals.expect)(mockSentry.addBreadcrumb).toHaveBeenCalledWith(_objectSpread({
        message: message,
        category: category,
        level: 'info'
      }, metadata));
      (0, _globals.expect)(mockLogger.debug).toHaveBeenCalledWith(`Breadcrumb: ${message}`, _globals.expect.objectContaining(_objectSpread({
        category: category
      }, metadata)));
    });
    (0, _globals.it)('should handle breadcrumbs without metadata', function () {
      service.addBreadcrumb('Button pressed', 'interaction');
      (0, _globals.expect)(mockSentry.addBreadcrumb).toHaveBeenCalledWith({
        message: 'Button pressed',
        category: 'interaction',
        level: 'info'
      });
    });
  });
  (0, _globals.describe)('Network Monitoring', function () {
    (0, _globals.it)('should monitor network status changes', function () {
      service.initialize();
      var networkListener = mockNetInfo.addEventListener.mock.calls[0][0];
      networkListener({
        isConnected: true,
        type: 'wifi',
        isInternetReachable: true
      });
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Network status changed', {
        isConnected: true,
        type: 'wifi',
        isInternetReachable: true
      });
      networkListener({
        isConnected: false,
        type: 'none',
        isInternetReachable: false
      });
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Network status changed', {
        isConnected: false,
        type: 'none',
        isInternetReachable: false
      });
    });
    (0, _globals.it)('should handle network monitoring initialization errors', function () {
      mockNetInfo.addEventListener.mockImplementation(function () {
        throw new Error('Network monitoring failed');
      });
      (0, _globals.expect)(function () {
        return service.initialize();
      }).not.toThrow();
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to initialize network monitoring', {
        error: _globals.expect.any(Error)
      });
    });
  });
  (0, _globals.describe)('Data Sanitization', function () {
    (0, _globals.it)('should sanitize sensitive data from Sentry events', function () {
      var beforeSend = mockSentry.init.mock.calls[0][0].beforeSend;
      var eventWithSensitiveData = {
        request: {
          data: {
            email: 'user@example.com',
            password: 'secret123',
            token: 'jwt-token-here',
            normalField: 'normal-value'
          }
        }
      };
      var sanitizedEvent = beforeSend(eventWithSensitiveData);
      (0, _globals.expect)(sanitizedEvent.request.data.password).toBe('[REDACTED]');
      (0, _globals.expect)(sanitizedEvent.request.data.token).toBe('[REDACTED]');
      (0, _globals.expect)(sanitizedEvent.request.data.email).toBe('user@example.com');
      (0, _globals.expect)(sanitizedEvent.request.data.normalField).toBe('normal-value');
    });
    (0, _globals.it)('should handle events without request data', function () {
      var beforeSend = mockSentry.init.mock.calls[0][0].beforeSend;
      var eventWithoutRequest = {
        message: 'Error message',
        tags: {
          component: 'Test'
        }
      };
      var result = beforeSend(eventWithoutRequest);
      (0, _globals.expect)(result).toBe(eventWithoutRequest);
    });
  });
  (0, _globals.describe)('Resource Cleanup', function () {
    (0, _globals.it)('should cleanup resources', function () {
      var mockUnsubscribe = _globals.jest.fn();
      service.networkUnsubscribe = mockUnsubscribe;
      service.cleanup();
      (0, _globals.expect)(mockUnsubscribe).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle cleanup when no resources to clean', function () {
      (0, _globals.expect)(function () {
        return service.cleanup();
      }).not.toThrow();
    });
  });
  (0, _globals.describe)('Configuration Management', function () {
    (0, _globals.it)('should update configuration', function () {
      var newConfig = {
        enablePerformanceTracking: false,
        enableAnalytics: false,
        sampleRate: 0.5
      };
      service.config = _objectSpread(_objectSpread({}, service.config), newConfig);
      (0, _globals.expect)(service.config.enablePerformanceTracking).toBe(false);
      (0, _globals.expect)(service.config.enableAnalytics).toBe(false);
      (0, _globals.expect)(service.config.sampleRate).toBe(0.5);
    });
    (0, _globals.it)('should respect configuration flags', function () {
      service.config.enablePerformanceTracking = false;
      service.config.enableAnalytics = false;
      service.config.enableErrorTracking = false;
      service.config.enableSecurityMonitoring = false;
      service.trackPerformance('test', 100);
      service.trackAnalytics('test', {});
      service.trackError(new Error('test'), {
        screen: 'test',
        component: 'test',
        action: 'test',
        metadata: {}
      });
      service.trackSecurity({
        type: 'test',
        severity: 'low',
        details: {}
      });
      (0, _globals.expect)(mockLogger.performance).not.toHaveBeenCalled();
      (0, _globals.expect)(mockLogger.info).not.toHaveBeenCalledWith(_globals.expect.stringContaining('Analytics:'), _globals.expect.anything());
      (0, _globals.expect)(mockSentry.captureException).not.toHaveBeenCalled();
      (0, _globals.expect)(mockLogger.security).not.toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Environment Handling', function () {
    (0, _globals.it)('should use development environment in dev mode', function () {
      (0, _globals.expect)(service.config.environment).toBe('development');
    });
    (0, _globals.it)('should configure appropriate sample rate for development', function () {
      (0, _globals.expect)(service.config.sampleRate).toBe(1.0);
    });
    (0, _globals.it)('should handle different environments', function () {
      global.__DEV__ = false;
      var prodService = new _observability.ObservabilityService();
      (0, _globals.expect)(prodService.config.environment).toBe('production');
      global.__DEV__ = true;
    });
  });
  (0, _globals.describe)('Error Handling and Edge Cases', function () {
    (0, _globals.it)('should handle malformed performance data', function () {
      service.trackPerformance('test', NaN, {
        invalid: undefined
      });
      (0, _globals.expect)(mockLogger.performance).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle errors in error tracking', function () {
      mockSentry.captureException.mockImplementation(function () {
        throw new Error('Sentry error');
      });
      var error = new Error('Original error');
      var context = {
        screen: 'Test',
        component: 'Test',
        action: 'test',
        metadata: {}
      };
      (0, _globals.expect)(function () {
        return service.trackError(error, context);
      }).not.toThrow();
    });
    (0, _globals.it)('should handle analytics service failures', function () {
      mockLogger.info.mockImplementation(function () {
        throw new Error('Logger error');
      });
      (0, _globals.expect)(function () {
        return service.trackAnalytics('test', {});
      }).not.toThrow();
    });
    (0, _globals.it)('should handle network status edge cases', function () {
      var networkListener = mockNetInfo.addEventListener.mock.calls[0][0];
      networkListener(null);
      networkListener(undefined);
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle extreme timing values in traces', function () {
      var trace = service.startTrace('extreme_test');
      _globals.jest.advanceTimersByTime(24 * 60 * 60 * 1000);
      trace.end();
      (0, _globals.expect)(mockLogger.performance).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle concurrent operations', function () {
      service.initialize();
      var operations = [service.trackPerformance('op1', 100), service.trackInteraction('Screen', 'Component', 'action'), service.trackAnalytics('event', {
        concurrent: true
      }), service.trackError(new Error('Concurrent error'), {
        screen: 'Test',
        component: 'Test',
        action: 'concurrent',
        metadata: {}
      })];
      (0, _globals.expect)(operations).toHaveLength(4);
    });
    (0, _globals.it)('should handle malformed event data', function () {
      (0, _globals.expect)(function () {
        service.trackAnalytics('', null);
        service.trackInteraction('', '', '', null);
        service.trackSecurity(null);
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,