23beb79daf841c9ca2cb24b65436db0a
"use strict";

_getJestObj().mock("../api", function () {
  return {
    request: _globals.jest.fn(),
    api: {
      get: _globals.jest.fn(),
      post: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _verificationService = require("../verificationService");
var _api = require("../api");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRequest = _api.request;
(0, _globals.describe)('VerificationService', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('getStatus', function () {
    (0, _globals.it)('should retrieve verification status successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockStatus = {
        tier: 'tier1',
        verified: true,
        badges: ['identity_verified', 'pet_owner'],
        status: 'approved',
        submittedAt: new Date('2024-01-01'),
        reviewedAt: new Date('2024-01-02'),
        requirements: {
          identity: 'completed',
          petOwnership: 'completed'
        }
      };
      mockRequest.mockResolvedValueOnce(mockStatus);
      var result = yield _verificationService.verificationService.getStatus();
      (0, _globals.expect)(result).toEqual(mockStatus);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/status', {
        method: 'GET'
      });
    }));
    (0, _globals.it)('should handle API errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('API Error'));
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow('API Error');
    }));
    (0, _globals.it)('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Network Error'));
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow('Network Error');
    }));
  });
  (0, _globals.describe)('submitIdentityVerification', function () {
    var mockIdentityData = {
      idDocument: {
        front: 'front-doc-url',
        back: 'back-doc-url'
      },
      selfie: 'selfie-url',
      personalInfo: {
        legalName: 'John Doe',
        dateOfBirth: '1990-01-01',
        address: {
          street: '123 Main St',
          city: 'New York',
          state: 'NY',
          zipCode: '10001',
          country: 'USA'
        },
        phone: '+1234567890'
      },
      consentToDataProcessing: true
    };
    (0, _globals.it)('should submit identity verification successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        tier: 'tier1',
        verified: false,
        badges: [],
        status: 'pending_review',
        submittedAt: new Date()
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitIdentityVerification(mockIdentityData);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/identity', {
        method: 'POST',
        body: mockIdentityData
      });
    }));
    (0, _globals.it)('should handle submission errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Submission failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitIdentityVerification(mockIdentityData)).rejects.toThrow('Submission failed');
    }));
    (0, _globals.it)('should handle validation errors', (0, _asyncToGenerator2.default)(function* () {
      var invalidData = _objectSpread(_objectSpread({}, mockIdentityData), {}, {
        personalInfo: _objectSpread(_objectSpread({}, mockIdentityData.personalInfo), {}, {
          legalName: ''
        })
      });
      mockRequest.mockRejectedValueOnce(new Error('Validation failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitIdentityVerification(invalidData)).rejects.toThrow('Validation failed');
    }));
  });
  (0, _globals.describe)('submitPetOwnershipVerification', function () {
    var mockPetOwnershipData = {
      primaryProof: {
        type: 'registration',
        documentUrl: 'registration-doc-url'
      },
      secondaryProof: {
        type: 'selfie_with_pet',
        documentUrl: 'selfie-url'
      },
      petInfo: {
        petId: 'pet123',
        petName: 'Buddy',
        species: 'Dog',
        breed: 'Golden Retriever'
      }
    };
    (0, _globals.it)('should submit pet ownership verification successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        tier: 'tier2',
        verified: false,
        badges: ['pet_owner'],
        status: 'in_progress',
        submittedAt: new Date()
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitPetOwnershipVerification(mockPetOwnershipData);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/pet-ownership', mockPetOwnershipData);
    }));
    (0, _globals.it)('should handle different proof types', (0, _asyncToGenerator2.default)(function* () {
      var microchipData = _objectSpread(_objectSpread({}, mockPetOwnershipData), {}, {
        secondaryProof: {
          type: 'microchip_number',
          microchipNumber: '123456789'
        }
      });
      var mockResponse = {
        tier: 'tier2',
        verified: false,
        badges: ['pet_owner'],
        status: 'pending_review'
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitPetOwnershipVerification(microchipData);
      (0, _globals.expect)(result.status).toBe('pending_review');
    }));
    (0, _globals.it)('should handle submission errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Pet verification failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitPetOwnershipVerification(mockPetOwnershipData)).rejects.toThrow('Pet verification failed');
    }));
  });
  (0, _globals.describe)('submitVeterinaryVerification', function () {
    var mockVeterinaryData = {
      veterinaryDocuments: {
        vaccinationRecord: 'vaccination-url',
        spayNeuterProof: 'spay-neuter-url',
        healthCertificate: 'health-cert-url'
      },
      vetClinicInfo: {
        name: 'Happy Paws Veterinary',
        city: 'New York',
        state: 'NY',
        country: 'USA'
      },
      piiRedacted: true
    };
    (0, _globals.it)('should submit veterinary verification successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        tier: 'tier3',
        verified: false,
        badges: ['veterinary_verified'],
        status: 'pending_review',
        submittedAt: new Date()
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitVeterinaryVerification(mockVeterinaryData);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/veterinary', mockVeterinaryData);
    }));
    (0, _globals.it)('should handle minimal veterinary data', (0, _asyncToGenerator2.default)(function* () {
      var minimalData = {
        veterinaryDocuments: {
          vaccinationRecord: 'vaccination-url'
        },
        vetClinicInfo: {
          name: 'Vet Clinic',
          city: 'City',
          country: 'Country'
        },
        piiRedacted: false
      };
      var mockResponse = {
        tier: 'tier3',
        verified: false,
        status: 'in_progress'
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitVeterinaryVerification(minimalData);
      (0, _globals.expect)(result.tier).toBe('tier3');
    }));
    (0, _globals.it)('should handle veterinary submission errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Veterinary verification failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitVeterinaryVerification(mockVeterinaryData)).rejects.toThrow('Veterinary verification failed');
    }));
  });
  (0, _globals.describe)('submitOrganizationVerification', function () {
    var mockOrganizationData = {
      organizationType: 'shelter',
      documents: {
        licenseOrRegistration: 'license-url',
        businessRegistration: 'business-reg-url',
        website: 'https://example-shelter.com'
      },
      selfieAtFacility: 'selfie-facility-url',
      publicListingUrl: 'https://shelter-listing.com'
    };
    (0, _globals.it)('should submit organization verification successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        tier: 'tier4',
        verified: false,
        badges: ['organization_verified'],
        status: 'pending_review',
        submittedAt: new Date()
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitOrganizationVerification(mockOrganizationData);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/organization', mockOrganizationData);
    }));
    (0, _globals.it)('should handle different organization types', (0, _asyncToGenerator2.default)(function* () {
      var breederData = _objectSpread(_objectSpread({}, mockOrganizationData), {}, {
        organizationType: 'breeder'
      });
      var mockResponse = {
        tier: 'tier4',
        verified: false,
        badges: ['breeder_verified'],
        status: 'in_progress'
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitOrganizationVerification(breederData);
      (0, _globals.expect)(result.badges).toContain('breeder_verified');
    }));
    (0, _globals.it)('should handle minimal organization data', (0, _asyncToGenerator2.default)(function* () {
      var minimalData = {
        organizationType: 'rescue',
        documents: {
          licenseOrRegistration: 'license-url'
        }
      };
      var mockResponse = {
        tier: 'tier4',
        verified: false,
        status: 'pending_review'
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitOrganizationVerification(minimalData);
      (0, _globals.expect)(result.tier).toBe('tier4');
    }));
    (0, _globals.it)('should handle organization submission errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Organization verification failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitOrganizationVerification(mockOrganizationData)).rejects.toThrow('Organization verification failed');
    }));
  });
  (0, _globals.describe)('getRequirements', function () {
    (0, _globals.it)('should retrieve tier requirements successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockRequirements = ['Valid government-issued ID', 'Clear selfie photo', 'Address verification'];
      mockRequest.mockResolvedValueOnce({
        requirements: mockRequirements
      });
      var result = yield _verificationService.verificationService.getRequirements('tier1');
      (0, _globals.expect)(result).toEqual(mockRequirements);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/requirements/tier1');
    }));
    (0, _globals.it)('should handle requirements retrieval errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Requirements not found'));
      yield (0, _globals.expect)(_verificationService.verificationService.getRequirements('tier5')).rejects.toThrow('Requirements not found');
    }));
  });
  (0, _globals.describe)('cancelVerification', function () {
    (0, _globals.it)('should cancel verification successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      yield (0, _globals.expect)(_verificationService.verificationService.cancelVerification('verification-123')).resolves.not.toThrow();
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/verification-123/cancel');
    }));
    (0, _globals.it)('should handle cancellation errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Cannot cancel completed verification'));
      yield (0, _globals.expect)(_verificationService.verificationService.cancelVerification('verification-123')).rejects.toThrow('Cannot cancel completed verification');
    }));
  });
  (0, _globals.describe)('getBadges', function () {
    (0, _globals.it)('should retrieve user badges successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockBadges = ['identity_verified', 'pet_owner', 'veterinary_verified'];
      mockRequest.mockResolvedValueOnce({
        badges: mockBadges
      });
      var result = yield _verificationService.verificationService.getBadges();
      (0, _globals.expect)(result).toEqual(mockBadges);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/badges');
    }));
    (0, _globals.it)('should handle empty badges list', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        badges: []
      });
      var result = yield _verificationService.verificationService.getBadges();
      (0, _globals.expect)(result).toEqual([]);
    }));
    (0, _globals.it)('should handle badge retrieval errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Badges not available'));
      yield (0, _globals.expect)(_verificationService.verificationService.getBadges()).rejects.toThrow('Badges not available');
    }));
  });
  (0, _globals.describe)('hasTier', function () {
    (0, _globals.it)('should check tier availability successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        hasTier: true
      });
      var result = yield _verificationService.verificationService.hasTier('tier2');
      (0, _globals.expect)(result).toBe(true);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/has-tier/tier2');
    }));
    (0, _globals.it)('should return false for unavailable tier', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        hasTier: false
      });
      var result = yield _verificationService.verificationService.hasTier('tier4');
      (0, _globals.expect)(result).toBe(false);
    }));
    (0, _globals.it)('should handle tier checking errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Tier check failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.hasTier('tier3')).rejects.toThrow('Tier check failed');
    }));
  });
  (0, _globals.describe)('uploadDocument', function () {
    (0, _globals.beforeEach)(function () {
      global.FormData = _globals.jest.fn(function () {
        return {
          append: _globals.jest.fn()
        };
      });
    });
    (0, _globals.it)('should upload document successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockFormData = {
        append: _globals.jest.fn()
      };
      global.FormData.mockImplementation(function () {
        return mockFormData;
      });
      mockRequest.mockResolvedValueOnce({
        url: 'uploaded-doc-url'
      });
      var result = yield _verificationService.verificationService.uploadDocument('file://document.jpg', 'identity_document', 'tier1');
      (0, _globals.expect)(result).toBe('uploaded-doc-url');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/upload', mockFormData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        params: {
          documentType: 'identity_document',
          verificationType: 'tier1'
        }
      });
    }));
    (0, _globals.it)('should upload document without verification type', (0, _asyncToGenerator2.default)(function* () {
      var mockFormData = {
        append: _globals.jest.fn()
      };
      global.FormData.mockImplementation(function () {
        return mockFormData;
      });
      mockRequest.mockResolvedValueOnce({
        url: 'uploaded-doc-url'
      });
      var result = yield _verificationService.verificationService.uploadDocument('file://document.jpg', 'pet_proof');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/upload', mockFormData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        params: {
          documentType: 'pet_proof',
          verificationType: undefined
        }
      });
    }));
    (0, _globals.it)('should handle upload errors', (0, _asyncToGenerator2.default)(function* () {
      var mockFormData = {
        append: _globals.jest.fn()
      };
      global.FormData.mockImplementation(function () {
        return mockFormData;
      });
      mockRequest.mockRejectedValueOnce(new Error('Upload failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.uploadDocument('file://document.jpg', 'identity_document')).rejects.toThrow('Upload failed');
    }));
    (0, _globals.it)('should handle FormData creation errors', (0, _asyncToGenerator2.default)(function* () {
      global.FormData.mockImplementation(function () {
        throw new Error('FormData not available');
      });
      mockRequest.mockResolvedValueOnce({
        url: 'uploaded-doc-url'
      });
      yield (0, _globals.expect)(_verificationService.verificationService.uploadDocument('file://document.jpg', 'document')).rejects.toThrow('FormData not available');
    }));
  });
  (0, _globals.describe)('requestStatusUpdate', function () {
    (0, _globals.it)('should request status update successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      yield (0, _globals.expect)(_verificationService.verificationService.requestStatusUpdate()).resolves.not.toThrow();
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/request-update');
    }));
    (0, _globals.it)('should handle status update request errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Status update failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.requestStatusUpdate()).rejects.toThrow('Status update failed');
    }));
  });
  (0, _globals.describe)('Error Handling and Edge Cases', function () {
    (0, _globals.it)('should handle malformed API responses', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(null);
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow();
    }));
    (0, _globals.it)('should handle network timeouts', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Request timeout'));
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow('Request timeout');
    }));
    (0, _globals.it)('should handle unauthorized access', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Unauthorized'));
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow('Unauthorized');
    }));
    (0, _globals.it)('should handle server errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Internal server error'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitIdentityVerification({})).rejects.toThrow('Internal server error');
    }));
    (0, _globals.it)('should handle concurrent requests', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        data: {
          tier: 'tier0',
          verified: false,
          badges: [],
          status: 'not_started'
        }
      });
      var promises = [_verificationService.verificationService.getStatus(), _verificationService.verificationService.getStatus(), _verificationService.verificationService.getStatus()];
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toHaveLength(3);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(3);
    }));
    (0, _globals.it)('should handle large data payloads', (0, _asyncToGenerator2.default)(function* () {
      var largeIdentityData = {
        idDocument: {
          front: 'A'.repeat(1000),
          back: 'B'.repeat(1000)
        },
        selfie: 'C'.repeat(1000),
        personalInfo: {
          legalName: 'John Doe',
          dateOfBirth: '1990-01-01',
          address: {
            street: '123 Main St',
            city: 'New York',
            state: 'NY',
            zipCode: '10001',
            country: 'USA'
          },
          phone: '+1234567890'
        },
        consentToDataProcessing: true
      };
      mockRequest.mockResolvedValueOnce({
        tier: 'tier1',
        verified: false,
        status: 'pending_review'
      });
      var result = yield _verificationService.verificationService.submitIdentityVerification(largeIdentityData);
      (0, _globals.expect)(result.status).toBe('pending_review');
    }));
  });
  (0, _globals.describe)('Data Validation', function () {
    (0, _globals.it)('should handle invalid tier names', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Invalid tier'));
      yield (0, _globals.expect)(_verificationService.verificationService.getRequirements('invalid-tier')).rejects.toThrow('Invalid tier');
    }));
    (0, _globals.it)('should handle invalid verification IDs', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Invalid verification ID'));
      yield (0, _globals.expect)(_verificationService.verificationService.cancelVerification('invalid-id')).rejects.toThrow('Invalid verification ID');
    }));
    (0, _globals.it)('should handle empty file uploads', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Empty file'));
      yield (0, _globals.expect)(_verificationService.verificationService.uploadDocument('', 'document')).rejects.toThrow('Empty file');
    }));
    (0, _globals.it)('should handle unsupported document types', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Unsupported document type'));
      yield (0, _globals.expect)(_verificationService.verificationService.uploadDocument('file://document.exe', 'executable')).rejects.toThrow('Unsupported document type');
    }));
  });
  (0, _globals.describe)('Status Transitions', function () {
    (0, _globals.it)('should handle tier progression', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        data: {
          tier: 'tier0',
          verified: false,
          badges: [],
          status: 'not_started'
        }
      });
      var status = yield _verificationService.verificationService.getStatus();
      (0, _globals.expect)(status.tier).toBe('tier0');
      mockRequest.mockResolvedValueOnce({
        data: {
          tier: 'tier1',
          verified: false,
          badges: ['identity_verified'],
          status: 'approved'
        }
      });
      status = yield _verificationService.verificationService.submitIdentityVerification({});
      (0, _globals.expect)(status.tier).toBe('tier1');
      (0, _globals.expect)(status.badges).toContain('identity_verified');
    }));
    (0, _globals.it)('should handle verification rejection', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        data: {
          tier: 'tier1',
          verified: false,
          badges: [],
          status: 'rejected',
          rejectionReason: 'Document unclear'
        }
      });
      var status = yield _verificationService.verificationService.submitIdentityVerification({});
      (0, _globals.expect)(status.status).toBe('rejected');
      (0, _globals.expect)(status.rejectionReason).toBe('Document unclear');
    }));
    (0, _globals.it)('should handle pending review status', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        data: {
          tier: 'tier2',
          verified: false,
          badges: ['pet_owner'],
          status: 'pending_review',
          submittedAt: new Date()
        }
      });
      var status = yield _verificationService.verificationService.submitPetOwnershipVerification({});
      (0, _globals.expect)(status.status).toBe('pending_review');
      (0, _globals.expect)(status.submittedAt).toBeInstanceOf(Date);
    }));
  });
  (0, _globals.describe)('Integration Scenarios', function () {
    (0, _globals.it)('should handle complete verification workflow', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        data: {
          tier: 'tier0',
          verified: false,
          badges: [],
          status: 'not_started'
        }
      });
      var status = yield _verificationService.verificationService.getStatus();
      (0, _globals.expect)(status.tier).toBe('tier0');
      mockRequest.mockResolvedValueOnce({
        data: {
          tier: 'tier1',
          verified: true,
          badges: ['identity_verified'],
          status: 'approved'
        }
      });
      status = yield _verificationService.verificationService.submitIdentityVerification({});
      (0, _globals.expect)(status.tier).toBe('tier1');
      (0, _globals.expect)(status.verified).toBe(true);
      mockRequest.mockResolvedValueOnce({
        data: {
          badges: ['identity_verified']
        }
      });
      var badges = yield _verificationService.verificationService.getBadges();
      (0, _globals.expect)(badges).toContain('identity_verified');
      mockRequest.mockResolvedValueOnce({
        data: {
          hasTier: true
        }
      });
      var hasTier = yield _verificationService.verificationService.hasTier('tier1');
      (0, _globals.expect)(hasTier).toBe(true);
    }));
    (0, _globals.it)('should handle document upload workflow', (0, _asyncToGenerator2.default)(function* () {
      var mockFormData = {
        append: _globals.jest.fn()
      };
      global.FormData.mockImplementation(function () {
        return mockFormData;
      });
      mockRequest.mockResolvedValueOnce({
        data: {
          url: 'uploaded-identity-url'
        }
      });
      var identityUrl = yield _verificationService.verificationService.uploadDocument('file://identity.jpg', 'identity_document', 'tier1');
      (0, _globals.expect)(identityUrl).toBe('uploaded-identity-url');
      mockRequest.mockResolvedValueOnce({
        data: {
          url: 'uploaded-pet-url'
        }
      });
      var petUrl = yield _verificationService.verificationService.uploadDocument('file://pet-registration.pdf', 'pet_registration', 'tier2');
      (0, _globals.expect)(petUrl).toBe('uploaded-pet-url');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,