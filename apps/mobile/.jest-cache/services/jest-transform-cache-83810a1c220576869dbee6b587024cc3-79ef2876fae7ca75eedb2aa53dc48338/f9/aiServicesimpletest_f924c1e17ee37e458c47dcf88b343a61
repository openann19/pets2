1ff3524570e7820365fb449d46d6be8f
"use strict";

_getJestObj().mock("../api", function () {
  return {
    request: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _aiService = require("../aiService");
var _api = require("../api");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRequest = _api.request;
(0, _globals.describe)('AIService - Core Tests', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('generateBio', function () {
    var bioParams = {
      petName: 'Luna',
      keywords: ['friendly', 'playful', 'cuddly'],
      tone: 'professional',
      length: 'medium',
      petType: 'cat',
      age: 3,
      breed: 'Persian'
    };
    (0, _globals.it)('should generate a bio successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        bio: 'Luna is a three-year-old Persian cat who embodies gentleness and affection.',
        keywords: ['friendly', 'gentle', 'affectionate'],
        sentiment: {
          score: 0.8,
          label: 'positive'
        },
        matchScore: 85
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _aiService.generateBio)(bioParams);
      (0, _globals.expect)(result).toBe(mockResponse.bio);
      (0, _globals.expect)(typeof result).toBe('string');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/ai/generate-bio', {
        method: 'POST',
        body: bioParams
      });
    }));
    (0, _globals.it)('should handle API errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('AI service unavailable'));
      yield (0, _globals.expect)((0, _aiService.generateBio)(bioParams)).rejects.toThrow('AI service unavailable');
    }));
    (0, _globals.it)('should handle different parameter combinations', (0, _asyncToGenerator2.default)(function* () {
      var minimalParams = {
        petName: 'Buddy',
        keywords: ['energetic']
      };
      var mockResponse = {
        bio: 'Buddy is an energetic dog full of life.',
        keywords: ['energetic', 'playful'],
        sentiment: {
          score: 0.9,
          label: 'very positive'
        },
        matchScore: 90
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _aiService.generateBio)(minimalParams);
      (0, _globals.expect)(result).toBe(mockResponse.bio);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/ai/generate-bio', {
        method: 'POST',
        body: minimalParams
      });
    }));
  });
  (0, _globals.describe)('analyzePhoto', function () {
    var photoUrl = 'https://example.com/photo.jpg';
    (0, _globals.it)('should analyze a photo successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        labels: ['dog', 'golden retriever', 'outdoor'],
        lighting: 0.85,
        sharpness: 0.92,
        score: 0.88
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _aiService.analyzePhoto)(photoUrl);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(result.labels).toContain('dog');
      (0, _globals.expect)(result.score).toBeGreaterThan(0.8);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/ai/analyze-photo', {
        method: 'POST',
        body: {
          url: photoUrl
        }
      });
    }));
    (0, _globals.it)('should handle photo analysis errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Invalid image format'));
      yield (0, _globals.expect)((0, _aiService.analyzePhoto)(photoUrl)).rejects.toThrow('Invalid image format');
    }));
    (0, _globals.it)('should handle empty labels', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        labels: [],
        lighting: 0.5,
        sharpness: 0.6,
        score: 0.4
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _aiService.analyzePhoto)(photoUrl);
      (0, _globals.expect)(result.labels).toEqual([]);
      (0, _globals.expect)(result.score).toBeLessThan(0.5);
    }));
  });
  (0, _globals.describe)('computeCompatibility', function () {
    (0, _globals.it)('should compute compatibility between two pets', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        score: 85,
        breakdown: {
          breed: 90,
          size: 80,
          energy: 85,
          age: 80,
          traits: 90
        }
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _aiService.computeCompatibility)('pet1', 'pet2');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(result.score).toBe(85);
      (0, _globals.expect)(result.breakdown.breed).toBe(90);
      (0, _globals.expect)(typeof result.breakdown).toBe('object');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/ai/compatibility', {
        method: 'POST',
        body: {
          pet1Id: 'pet1',
          pet2Id: 'pet2'
        }
      });
    }));
    (0, _globals.it)('should handle perfect compatibility', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        score: 100,
        breakdown: {
          breed: 100,
          size: 100,
          energy: 100,
          age: 100,
          traits: 100
        }
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _aiService.computeCompatibility)('pet1', 'pet2');
      (0, _globals.expect)(result.score).toBe(100);
      (0, _globals.expect)(result.breakdown.breed).toBe(100);
    }));
    (0, _globals.it)('should handle zero compatibility', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        score: 0,
        breakdown: {
          breed: 0,
          size: 0,
          energy: 0,
          age: 0,
          traits: 0
        }
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _aiService.computeCompatibility)('pet1', 'pet2');
      (0, _globals.expect)(result.score).toBe(0);
      (0, _globals.expect)(result.breakdown.energy).toBe(0);
    }));
    (0, _globals.it)('should handle API errors during compatibility computation', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Compatibility calculation failed'));
      yield (0, _globals.expect)((0, _aiService.computeCompatibility)('pet1', 'pet2')).rejects.toThrow('Compatibility calculation failed');
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle network timeouts', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Network timeout'));
      yield (0, _globals.expect)((0, _aiService.generateBio)({
        petName: 'Test',
        keywords: ['test']
      })).rejects.toThrow('Network timeout');
    }));
    (0, _globals.it)('should handle service unavailability', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('AI service is temporarily unavailable'));
      yield (0, _globals.expect)((0, _aiService.analyzePhoto)('test.jpg')).rejects.toThrow('AI service is temporarily unavailable');
    }));
    (0, _globals.it)('should handle malformed API responses', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(null);
      yield (0, _globals.expect)((0, _aiService.generateBio)({
        petName: 'Test',
        keywords: ['test']
      })).rejects.toThrow();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,