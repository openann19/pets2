2a7df15049749f1ad77b047cc5b343cb
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('@react-native-community/netinfo');
_getJestObj().mock("../api", function () {
  return {
    api: {
      getPets: _globals.jest.fn(),
      getMatches: _globals.jest.fn(),
      getMessages: _globals.jest.fn(),
      sendMessage: _globals.jest.fn(),
      updateUserProfile: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _offlineService = require("../offlineService");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _api = require("../api");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockNetInfo = _netinfo.default;
var mockApi = _api.api;
(0, _globals.describe)('OfflineService - Core Tests', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockAsyncStorage.removeItem.mockResolvedValue(undefined);
    mockAsyncStorage.getAllKeys.mockResolvedValue(['offline_data', 'other_key']);
    mockNetInfo.fetch.mockResolvedValue({
      isConnected: true,
      type: 'wifi',
      isInternetReachable: true
    });
    mockApi.getPets.mockResolvedValue([]);
    mockApi.getMatches.mockResolvedValue([]);
    mockApi.getMessages.mockResolvedValue([]);
    mockApi.sendMessage.mockResolvedValue(undefined);
    mockApi.updateUserProfile.mockResolvedValue(undefined);
  });
  (0, _globals.afterEach)(function () {
    _offlineService.offlineService.cleanup();
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with default offline data', function () {
      var offlineData = _offlineService.offlineService.offlineData;
      (0, _globals.expect)(offlineData.pets).toEqual([]);
      (0, _globals.expect)(offlineData.user).toBeNull();
      (0, _globals.expect)(offlineData.matches).toEqual([]);
      (0, _globals.expect)(offlineData.messages).toEqual([]);
      (0, _globals.expect)(offlineData.pendingActions).toEqual([]);
      (0, _globals.expect)(typeof offlineData.lastSync).toBe('string');
    });
    (0, _globals.it)('should load offline data from storage', (0, _asyncToGenerator2.default)(function* () {
      var storedData = {
        pets: [{
          id: 'pet1',
          name: 'Buddy'
        }],
        user: {
          id: 'user1',
          name: 'John'
        },
        matches: [{
          id: 'match1'
        }],
        messages: [{
          id: 'msg1'
        }],
        lastSync: '2024-01-01T00:00:00Z',
        pendingActions: [{
          id: 'action1',
          type: 'swipe',
          data: {},
          timestamp: '2024-01-01T00:00:00Z',
          retryCount: 0
        }]
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(storedData));
      var newService = new _offlineService.OfflineService();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      var offlineData = newService.offlineData;
      (0, _globals.expect)(offlineData.pets).toEqual(storedData.pets);
      (0, _globals.expect)(offlineData.user).toEqual(storedData.user);
      (0, _globals.expect)(offlineData.pendingActions).toEqual(storedData.pendingActions);
    }));
  });
  (0, _globals.describe)('Data Management', function () {
    (0, _globals.it)('should retrieve pets from offline storage', (0, _asyncToGenerator2.default)(function* () {
      var pets = [{
        id: 'pet1',
        name: 'Buddy'
      }];
      _offlineService.offlineService.offlineData.pets = pets;
      var result = yield _offlineService.offlineService.getPets();
      (0, _globals.expect)(result).toEqual(pets);
    }));
    (0, _globals.it)('should retrieve user from offline storage', (0, _asyncToGenerator2.default)(function* () {
      var user = {
        id: 'user1',
        name: 'John'
      };
      _offlineService.offlineService.offlineData.user = user;
      var result = _offlineService.offlineService.getUser();
      (0, _globals.expect)(result).toEqual(user);
    }));
    (0, _globals.it)('should fetch pets online when available', (0, _asyncToGenerator2.default)(function* () {
      var onlinePets = [{
        id: 'pet2',
        name: 'Luna'
      }];
      mockApi.getPets.mockResolvedValue(onlinePets);
      var result = yield _offlineService.offlineService.getPets();
      (0, _globals.expect)(result).toEqual(onlinePets);
      (0, _globals.expect)(mockApi.getPets).toHaveBeenCalled();
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalled();
    }));
    (0, _globals.it)('should fetch user online when available', (0, _asyncToGenerator2.default)(function* () {
      var offlineUser = {
        id: 'user1',
        name: 'John'
      };
      _offlineService.offlineService.offlineData.user = offlineUser;
      var result = _offlineService.offlineService.getUser();
      (0, _globals.expect)(result).toEqual(offlineUser);
    }));
  });
  (0, _globals.describe)('Pending Actions', function () {
    (0, _globals.it)('should add pending actions', function () {
      _offlineService.offlineService.addPendingAction('swipe', {
        petId: 'pet1',
        direction: 'like'
      });
      var offlineData = _offlineService.offlineService.offlineData;
      (0, _globals.expect)(offlineData.pendingActions).toHaveLength(1);
      (0, _globals.expect)(offlineData.pendingActions[0].type).toBe('swipe');
      (0, _globals.expect)(offlineData.pendingActions[0].data).toEqual({
        petId: 'pet1',
        direction: 'like'
      });
    });
    (0, _globals.it)('should retrieve pending actions count', function () {
      _offlineService.offlineService.addPendingAction('swipe', {
        petId: 'pet1',
        direction: 'like'
      });
      _offlineService.offlineService.addPendingAction('message', {
        matchId: 'match1',
        text: 'Hi!'
      });
      var status = _offlineService.offlineService.getSyncStatus();
      (0, _globals.expect)(status.pendingActionsCount).toBe(2);
    });
    (0, _globals.it)('should add swipe action offline', function () {
      _offlineService.offlineService.swipePet('pet1', 'like');
      var offlineData = _offlineService.offlineService.offlineData;
      (0, _globals.expect)(offlineData.pendingActions).toHaveLength(1);
      (0, _globals.expect)(offlineData.pendingActions[0].type).toBe('swipe');
      (0, _globals.expect)(offlineData.pendingActions[0].data).toEqual({
        petId: 'pet1',
        direction: 'like'
      });
    });
  });
  (0, _globals.describe)('Network Monitoring', function () {
    (0, _globals.it)('should report online status when connected', (0, _asyncToGenerator2.default)(function* () {
      var status = _offlineService.offlineService.getSyncStatus();
      (0, _globals.expect)(status.isOnline).toBe(true);
    }));
  });
  (0, _globals.describe)('Sync Status', function () {
    (0, _globals.it)('should provide comprehensive sync status', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.addPendingAction('swipe', {
        petId: 'pet1'
      });
      _offlineService.offlineService.isSyncing = false;
      _offlineService.offlineService.offlineData.lastSync = '2024-01-01T00:00:00Z';
      var status = _offlineService.offlineService.getSyncStatus();
      (0, _globals.expect)(status.isOnline).toBe(true);
      (0, _globals.expect)(status.isSyncing).toBe(false);
      (0, _globals.expect)(status.pendingActionsCount).toBe(1);
      (0, _globals.expect)(status.lastSyncTime).toBe('2024-01-01T00:00:00Z');
    }));
  });
  (0, _globals.describe)('Data Persistence', function () {
    (0, _globals.it)('should clear offline data', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.offlineData.pets = [{
        id: 'pet1'
      }];
      _offlineService.offlineService.offlineData.user = {
        id: 'user1'
      };
      _offlineService.offlineService.addPendingAction('swipe', {
        petId: 'pet1'
      });
      yield _offlineService.offlineService.clearOfflineData();
      var offlineData = _offlineService.offlineService.offlineData;
      (0, _globals.expect)(offlineData.pets).toEqual([]);
      (0, _globals.expect)(offlineData.user).toBeNull();
      (0, _globals.expect)(offlineData.pendingActions).toEqual([]);
    }));
    (0, _globals.it)('should get storage size', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getAllKeys.mockResolvedValue(['offline_data', 'other_key']);
      mockAsyncStorage.getItem.mockImplementation(function (key) {
        if (key === 'offline_data') return Promise.resolve('{"pets":[]}');
        if (key === 'other_key') return Promise.resolve('test_data');
        return Promise.resolve(null);
      });
      var size = yield _offlineService.offlineService.getStorageSize();
      (0, _globals.expect)(size).toBeGreaterThan(0);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,