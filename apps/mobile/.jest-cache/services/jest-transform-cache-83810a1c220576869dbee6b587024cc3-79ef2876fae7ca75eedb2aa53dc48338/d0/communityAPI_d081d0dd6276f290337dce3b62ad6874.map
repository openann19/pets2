{"version":3,"names":["_core","require","_apiClient","_interopRequireDefault","handleApiError","error","context","Error","logger","message","stack","communityAPI","exports","getFeed","_getFeed","_asyncToGenerator2","default","params","queryParams","URLSearchParams","page","set","toString","limit","packId","userId","type","response","apiClient","get","_x","apply","arguments","createPost","_createPost","data","content","trim","post","_x2","likePost","_likePost","postId","_x3","getComments","_getComments","_x4","_x5","addComment","_addComment","_x6","_x7","reportContent","_reportContent","_x8","blockUser","_blockUser","_x9","joinActivity","_joinActivity","_x0","leaveActivity","_leaveActivity","_x1","deletePost","_deletePost","delete","_x10","updatePost","_updatePost","put","_x11","_x12","_default"],"sources":["communityAPI.ts"],"sourcesContent":["/**\n * Community API Service for Mobile App\n *\n * Production-grade service for community feed, posts, likes, comments, and activities.\n * Includes offline queue support, retry logic, and comprehensive error handling.\n */\n\nimport { logger } from \"@pawfectmatch/core\";\nimport apiClient from \"./apiClient\";\nimport type { AxiosError } from \"axios\";\n\n// ============================================================================\n// Type Definitions\n// ============================================================================\n\nexport interface CommunityPost {\n  _id: string;\n  author: {\n    _id: string;\n    name: string;\n    avatar: string;\n  };\n  content: string;\n  images: string[];\n  likes: number;\n  liked: boolean;\n  comments: CommunityComment[];\n  createdAt: string;\n  packId?: string;\n  packName?: string;\n  type: \"post\" | \"activity\";\n  activityDetails?: ActivityDetails;\n}\n\nexport interface ActivityDetails {\n  date: string;\n  location: string;\n  maxAttendees: number;\n  currentAttendees: number;\n  attending: boolean;\n}\n\nexport interface CommunityComment {\n  _id: string;\n  author: {\n    _id: string;\n    name: string;\n    avatar: string;\n  };\n  content: string;\n  createdAt: string;\n  postId: string;\n}\n\nexport interface CreatePostRequest {\n  content: string;\n  images?: string[];\n  packId?: string;\n  type?: \"post\" | \"activity\";\n  activityDetails?: ActivityDetails;\n}\n\nexport interface CreateCommentRequest {\n  content: string;\n}\n\nexport interface CommunityFeedResponse {\n  success: boolean;\n  posts: CommunityPost[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  };\n  appliedFilters: {\n    packId: string | null;\n    userId: string | null;\n    type: string | null;\n    matchedCount: number;\n  };\n}\n\nexport interface LikeResponse {\n  success: boolean;\n  post: {\n    _id: string;\n    likes: number;\n    liked: boolean;\n  };\n  message: string;\n}\n\nexport interface CommentResponse {\n  success: boolean;\n  comment: CommunityComment;\n  message: string;\n}\n\nexport interface CommentsListResponse {\n  success: boolean;\n  comments: CommunityComment[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  };\n  postId: string;\n}\n\nexport interface GetFeedParams {\n  page?: number;\n  limit?: number;\n  packId?: string;\n  userId?: string;\n  type?: \"post\" | \"activity\";\n}\n\nexport interface GetCommentsParams {\n  page?: number;\n  limit?: number;\n}\n\n// ============================================================================\n// Error Handling\n// ============================================================================\n\nconst handleApiError = (error: unknown, context: string): never => {\n  if (error instanceof Error) {\n    logger.error(`${context}:`, { error: error.message, stack: error.stack });\n    throw error;\n  }\n  logger.error(`${context}: Unknown error`, { error });\n  throw new Error(`${context}: Unknown error`);\n};\n\n// ============================================================================\n// Community API Service\n// ============================================================================\n\nexport const communityAPI = {\n  /**\n   * Get community feed with pagination and filters\n   */\n  getFeed: async (params?: GetFeedParams): Promise<CommunityFeedResponse> => {\n    try {\n      const queryParams = new URLSearchParams();\n      if (params?.page) queryParams.set(\"page\", params.page.toString());\n      if (params?.limit) queryParams.set(\"limit\", params.limit.toString());\n      if (params?.packId) queryParams.set(\"packId\", params.packId);\n      if (params?.userId) queryParams.set(\"userId\", params.userId);\n      if (params?.type) queryParams.set(\"type\", params.type);\n\n      const response = await apiClient.get<CommunityFeedResponse>(\n        `/community/posts?${queryParams.toString()}`,\n      );\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to fetch community feed\");\n    }\n  },\n\n  /**\n   * Create a new community post\n   */\n  createPost: async (\n    data: CreatePostRequest,\n  ): Promise<{\n    success: boolean;\n    post: CommunityPost;\n    message: string;\n  }> => {\n    try {\n      if (!data.content || !data.content.trim()) {\n        throw new Error(\"Post content is required\");\n      }\n\n      const response = await apiClient.post<{\n        success: boolean;\n        post: CommunityPost;\n        message: string;\n      }>(\"/community/posts\", data);\n\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to create community post\");\n    }\n  },\n\n  /**\n   * Like or unlike a community post\n   */\n  likePost: async (postId: string): Promise<LikeResponse> => {\n    try {\n      const response = await apiClient.post<LikeResponse>(\n        `/community/posts/${postId}/like`,\n      );\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to like/unlike community post\");\n    }\n  },\n\n  /**\n   * Get comments for a specific post\n   */\n  getComments: async (\n    postId: string,\n    params?: GetCommentsParams,\n  ): Promise<CommentsListResponse> => {\n    try {\n      const queryParams = new URLSearchParams();\n      if (params?.page)\n        queryParams.set(\"page\", params.page.toString());\n      if (params?.limit)\n        queryParams.set(\"limit\", params.limit.toString());\n\n      const response = await apiClient.get<CommentsListResponse>(\n        `/community/posts/${postId}/comments?${queryParams.toString()}`,\n      );\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to fetch post comments\");\n    }\n  },\n\n  /**\n   * Add a comment to a post\n   */\n  addComment: async (\n    postId: string,\n    data: CreateCommentRequest,\n  ): Promise<CommentResponse> => {\n    try {\n      if (!data.content || !data.content.trim()) {\n        throw new Error(\"Comment content is required\");\n      }\n\n      const response = await apiClient.post<CommentResponse>(\n        `/community/posts/${postId}/comments`,\n        data,\n      );\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to add comment to post\");\n    }\n  },\n\n  /**\n   * Report a post or comment\n   */\n  reportContent: async (data: {\n    type: \"post\" | \"comment\";\n    targetId: string;\n    reason: string;\n    description?: string;\n  }): Promise<{ success: boolean; message: string }> => {\n    try {\n      const response = await apiClient.post<{\n        success: boolean;\n        message: string;\n      }>(\"/community/report\", data);\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to report content\");\n    }\n  },\n\n  /**\n   * Block a user from community\n   */\n  blockUser: async (\n    userId: string,\n  ): Promise<{ success: boolean; message: string }> => {\n    try {\n      const response = await apiClient.post<{\n        success: boolean;\n        message: string;\n      }>(\"/community/block\", { userId });\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to block user\");\n    }\n  },\n\n  /**\n   * Join an activity\n   */\n  joinActivity: async (\n    postId: string,\n  ): Promise<{\n    success: boolean;\n    post: CommunityPost;\n    message: string;\n  }> => {\n    try {\n      const response = await apiClient.post<{\n        success: boolean;\n        post: CommunityPost;\n        message: string;\n      }>(`/community/posts/${postId}/join`);\n\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to join activity\");\n    }\n  },\n\n  /**\n   * Leave an activity\n   */\n  leaveActivity: async (\n    postId: string,\n  ): Promise<{\n    success: boolean;\n    post: CommunityPost;\n    message: string;\n  }> => {\n    try {\n      const response = await apiClient.post<{\n        success: boolean;\n        post: CommunityPost;\n        message: string;\n      }>(`/community/posts/${postId}/leave`);\n\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to leave activity\");\n    }\n  },\n\n  /**\n   * Delete a user's own post\n   */\n  deletePost: async (\n    postId: string,\n  ): Promise<{ success: boolean; message: string }> => {\n    try {\n      const response = await apiClient.delete<{\n        success: boolean;\n        message: string;\n      }>(`/community/posts/${postId}`);\n\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to delete post\");\n    }\n  },\n\n  /**\n   * Edit a user's own post\n   */\n  updatePost: async (\n    postId: string,\n    data: Partial<CreatePostRequest>,\n  ): Promise<{\n    success: boolean;\n    post: CommunityPost;\n    message: string;\n  }> => {\n    try {\n      const response = await apiClient.put<{\n        success: boolean;\n        post: CommunityPost;\n        message: string;\n      }>(`/community/posts/${postId}`, data);\n\n      return response;\n    } catch (error) {\n      return handleApiError(error, \"Failed to update post\");\n    }\n  },\n};\n\nexport default communityAPI;\n\n"],"mappings":";;;;;;;;AAOA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAC,sBAAA,CAAAF,OAAA;AAwHA,IAAMG,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAc,EAAEC,OAAe,EAAY;EACjE,IAAID,KAAK,YAAYE,KAAK,EAAE;IAC1BC,YAAM,CAACH,KAAK,CAAC,GAAGC,OAAO,GAAG,EAAE;MAAED,KAAK,EAAEA,KAAK,CAACI,OAAO;MAAEC,KAAK,EAAEL,KAAK,CAACK;IAAM,CAAC,CAAC;IACzE,MAAML,KAAK;EACb;EACAG,YAAM,CAACH,KAAK,CAAC,GAAGC,OAAO,iBAAiB,EAAE;IAAED,KAAK,EAALA;EAAM,CAAC,CAAC;EACpD,MAAM,IAAIE,KAAK,CAAC,GAAGD,OAAO,iBAAiB,CAAC;AAC9C,CAAC;AAMM,IAAMK,YAAY,GAAAC,OAAA,CAAAD,YAAA,GAAG;EAI1BE,OAAO;IAAA,IAAAC,QAAA,OAAAC,kBAAA,CAAAC,OAAA,EAAE,WAAOC,MAAsB,EAAqC;MACzE,IAAI;QACF,IAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;QACzC,IAAIF,MAAM,YAANA,MAAM,CAAEG,IAAI,EAAEF,WAAW,CAACG,GAAG,CAAC,MAAM,EAAEJ,MAAM,CAACG,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC;QACjE,IAAIL,MAAM,YAANA,MAAM,CAAEM,KAAK,EAAEL,WAAW,CAACG,GAAG,CAAC,OAAO,EAAEJ,MAAM,CAACM,KAAK,CAACD,QAAQ,CAAC,CAAC,CAAC;QACpE,IAAIL,MAAM,YAANA,MAAM,CAAEO,MAAM,EAAEN,WAAW,CAACG,GAAG,CAAC,QAAQ,EAAEJ,MAAM,CAACO,MAAM,CAAC;QAC5D,IAAIP,MAAM,YAANA,MAAM,CAAEQ,MAAM,EAAEP,WAAW,CAACG,GAAG,CAAC,QAAQ,EAAEJ,MAAM,CAACQ,MAAM,CAAC;QAC5D,IAAIR,MAAM,YAANA,MAAM,CAAES,IAAI,EAAER,WAAW,CAACG,GAAG,CAAC,MAAM,EAAEJ,MAAM,CAACS,IAAI,CAAC;QAEtD,IAAMC,QAAQ,SAASC,kBAAS,CAACC,GAAG,CAClC,oBAAoBX,WAAW,CAACI,QAAQ,CAAC,CAAC,EAC5C,CAAC;QACD,OAAOK,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,gCAAgC,CAAC;MAChE;IACF,CAAC;IAAA,SAhBDQ,OAAOA,CAAAiB,EAAA;MAAA,OAAAhB,QAAA,CAAAiB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAPnB,OAAO;EAAA,GAgBN;EAKDoB,UAAU;IAAA,IAAAC,WAAA,OAAAnB,kBAAA,CAAAC,OAAA,EAAE,WACVmB,IAAuB,EAKnB;MACJ,IAAI;QACF,IAAI,CAACA,IAAI,CAACC,OAAO,IAAI,CAACD,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,CAAC,EAAE;UACzC,MAAM,IAAI9B,KAAK,CAAC,0BAA0B,CAAC;QAC7C;QAEA,IAAMoB,QAAQ,SAASC,kBAAS,CAACU,IAAI,CAIlC,kBAAkB,EAAEH,IAAI,CAAC;QAE5B,OAAOR,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,iCAAiC,CAAC;MACjE;IACF,CAAC;IAAA,SAtBD4B,UAAUA,CAAAM,GAAA;MAAA,OAAAL,WAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAVC,UAAU;EAAA,GAsBT;EAKDO,QAAQ;IAAA,IAAAC,SAAA,OAAA1B,kBAAA,CAAAC,OAAA,EAAE,WAAO0B,MAAc,EAA4B;MACzD,IAAI;QACF,IAAMf,QAAQ,SAASC,kBAAS,CAACU,IAAI,CACnC,oBAAoBI,MAAM,OAC5B,CAAC;QACD,OAAOf,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,sCAAsC,CAAC;MACtE;IACF,CAAC;IAAA,SATDmC,QAAQA,CAAAG,GAAA;MAAA,OAAAF,SAAA,CAAAV,KAAA,OAAAC,SAAA;IAAA;IAAA,OAARQ,QAAQ;EAAA,GASP;EAKDI,WAAW;IAAA,IAAAC,YAAA,OAAA9B,kBAAA,CAAAC,OAAA,EAAE,WACX0B,MAAc,EACdzB,MAA0B,EACQ;MAClC,IAAI;QACF,IAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;QACzC,IAAIF,MAAM,YAANA,MAAM,CAAEG,IAAI,EACdF,WAAW,CAACG,GAAG,CAAC,MAAM,EAAEJ,MAAM,CAACG,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC;QACjD,IAAIL,MAAM,YAANA,MAAM,CAAEM,KAAK,EACfL,WAAW,CAACG,GAAG,CAAC,OAAO,EAAEJ,MAAM,CAACM,KAAK,CAACD,QAAQ,CAAC,CAAC,CAAC;QAEnD,IAAMK,QAAQ,SAASC,kBAAS,CAACC,GAAG,CAClC,oBAAoBa,MAAM,aAAaxB,WAAW,CAACI,QAAQ,CAAC,CAAC,EAC/D,CAAC;QACD,OAAOK,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,+BAA+B,CAAC;MAC/D;IACF,CAAC;IAAA,SAlBDuC,WAAWA,CAAAE,GAAA,EAAAC,GAAA;MAAA,OAAAF,YAAA,CAAAd,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAXY,WAAW;EAAA,GAkBV;EAKDI,UAAU;IAAA,IAAAC,WAAA,OAAAlC,kBAAA,CAAAC,OAAA,EAAE,WACV0B,MAAc,EACdP,IAA0B,EACG;MAC7B,IAAI;QACF,IAAI,CAACA,IAAI,CAACC,OAAO,IAAI,CAACD,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,CAAC,EAAE;UACzC,MAAM,IAAI9B,KAAK,CAAC,6BAA6B,CAAC;QAChD;QAEA,IAAMoB,QAAQ,SAASC,kBAAS,CAACU,IAAI,CACnC,oBAAoBI,MAAM,WAAW,EACrCP,IACF,CAAC;QACD,OAAOR,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,+BAA+B,CAAC;MAC/D;IACF,CAAC;IAAA,SAjBD2C,UAAUA,CAAAE,GAAA,EAAAC,GAAA;MAAA,OAAAF,WAAA,CAAAlB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAVgB,UAAU;EAAA,GAiBT;EAKDI,aAAa;IAAA,IAAAC,cAAA,OAAAtC,kBAAA,CAAAC,OAAA,EAAE,WAAOmB,IAKrB,EAAqD;MACpD,IAAI;QACF,IAAMR,QAAQ,SAASC,kBAAS,CAACU,IAAI,CAGlC,mBAAmB,EAAEH,IAAI,CAAC;QAC7B,OAAOR,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,0BAA0B,CAAC;MAC1D;IACF,CAAC;IAAA,SAfD+C,aAAaA,CAAAE,GAAA;MAAA,OAAAD,cAAA,CAAAtB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAboB,aAAa;EAAA,GAeZ;EAKDG,SAAS;IAAA,IAAAC,UAAA,OAAAzC,kBAAA,CAAAC,OAAA,EAAE,WACTS,MAAc,EACqC;MACnD,IAAI;QACF,IAAME,QAAQ,SAASC,kBAAS,CAACU,IAAI,CAGlC,kBAAkB,EAAE;UAAEb,MAAM,EAANA;QAAO,CAAC,CAAC;QAClC,OAAOE,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,sBAAsB,CAAC;MACtD;IACF,CAAC;IAAA,SAZDkD,SAASA,CAAAE,GAAA;MAAA,OAAAD,UAAA,CAAAzB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAATuB,SAAS;EAAA,GAYR;EAKDG,YAAY;IAAA,IAAAC,aAAA,OAAA5C,kBAAA,CAAAC,OAAA,EAAE,WACZ0B,MAAc,EAKV;MACJ,IAAI;QACF,IAAMf,QAAQ,SAASC,kBAAS,CAACU,IAAI,CAIlC,oBAAoBI,MAAM,OAAO,CAAC;QAErC,OAAOf,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,yBAAyB,CAAC;MACzD;IACF,CAAC;IAAA,SAlBDqD,YAAYA,CAAAE,GAAA;MAAA,OAAAD,aAAA,CAAA5B,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAZ0B,YAAY;EAAA,GAkBX;EAKDG,aAAa;IAAA,IAAAC,cAAA,OAAA/C,kBAAA,CAAAC,OAAA,EAAE,WACb0B,MAAc,EAKV;MACJ,IAAI;QACF,IAAMf,QAAQ,SAASC,kBAAS,CAACU,IAAI,CAIlC,oBAAoBI,MAAM,QAAQ,CAAC;QAEtC,OAAOf,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,0BAA0B,CAAC;MAC1D;IACF,CAAC;IAAA,SAlBDwD,aAAaA,CAAAE,GAAA;MAAA,OAAAD,cAAA,CAAA/B,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAb6B,aAAa;EAAA,GAkBZ;EAKDG,UAAU;IAAA,IAAAC,WAAA,OAAAlD,kBAAA,CAAAC,OAAA,EAAE,WACV0B,MAAc,EACqC;MACnD,IAAI;QACF,IAAMf,QAAQ,SAASC,kBAAS,CAACsC,MAAM,CAGpC,oBAAoBxB,MAAM,EAAE,CAAC;QAEhC,OAAOf,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,uBAAuB,CAAC;MACvD;IACF,CAAC;IAAA,SAbD2D,UAAUA,CAAAG,IAAA;MAAA,OAAAF,WAAA,CAAAlC,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAVgC,UAAU;EAAA,GAaT;EAKDI,UAAU;IAAA,IAAAC,WAAA,OAAAtD,kBAAA,CAAAC,OAAA,EAAE,WACV0B,MAAc,EACdP,IAAgC,EAK5B;MACJ,IAAI;QACF,IAAMR,QAAQ,SAASC,kBAAS,CAAC0C,GAAG,CAIjC,oBAAoB5B,MAAM,EAAE,EAAEP,IAAI,CAAC;QAEtC,OAAOR,QAAQ;MACjB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACd,OAAOD,cAAc,CAACC,KAAK,EAAE,uBAAuB,CAAC;MACvD;IACF,CAAC;IAAA,SAnBD+D,UAAUA,CAAAG,IAAA,EAAAC,IAAA;MAAA,OAAAH,WAAA,CAAAtC,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAVoC,UAAU;EAAA;AAoBZ,CAAC;AAAC,IAAAK,QAAA,GAAA7D,OAAA,CAAAI,OAAA,GAEaL,YAAY","ignoreList":[]}