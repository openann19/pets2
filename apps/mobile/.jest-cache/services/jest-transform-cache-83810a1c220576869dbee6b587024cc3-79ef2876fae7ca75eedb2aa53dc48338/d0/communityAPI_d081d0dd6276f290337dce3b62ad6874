78ff4d5b1c0772ce3c2a13a11197bd27
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.communityAPI = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _core = require("@pawfectmatch/core");
var _apiClient = _interopRequireDefault(require("./apiClient"));
var handleApiError = function handleApiError(error, context) {
  if (error instanceof Error) {
    _core.logger.error(`${context}:`, {
      error: error.message,
      stack: error.stack
    });
    throw error;
  }
  _core.logger.error(`${context}: Unknown error`, {
    error: error
  });
  throw new Error(`${context}: Unknown error`);
};
var communityAPI = exports.communityAPI = {
  getFeed: function () {
    var _getFeed = (0, _asyncToGenerator2.default)(function* (params) {
      try {
        var queryParams = new URLSearchParams();
        if (params != null && params.page) queryParams.set("page", params.page.toString());
        if (params != null && params.limit) queryParams.set("limit", params.limit.toString());
        if (params != null && params.packId) queryParams.set("packId", params.packId);
        if (params != null && params.userId) queryParams.set("userId", params.userId);
        if (params != null && params.type) queryParams.set("type", params.type);
        var response = yield _apiClient.default.get(`/community/posts?${queryParams.toString()}`);
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to fetch community feed");
      }
    });
    function getFeed(_x) {
      return _getFeed.apply(this, arguments);
    }
    return getFeed;
  }(),
  createPost: function () {
    var _createPost = (0, _asyncToGenerator2.default)(function* (data) {
      try {
        if (!data.content || !data.content.trim()) {
          throw new Error("Post content is required");
        }
        var response = yield _apiClient.default.post("/community/posts", data);
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to create community post");
      }
    });
    function createPost(_x2) {
      return _createPost.apply(this, arguments);
    }
    return createPost;
  }(),
  likePost: function () {
    var _likePost = (0, _asyncToGenerator2.default)(function* (postId) {
      try {
        var response = yield _apiClient.default.post(`/community/posts/${postId}/like`);
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to like/unlike community post");
      }
    });
    function likePost(_x3) {
      return _likePost.apply(this, arguments);
    }
    return likePost;
  }(),
  getComments: function () {
    var _getComments = (0, _asyncToGenerator2.default)(function* (postId, params) {
      try {
        var queryParams = new URLSearchParams();
        if (params != null && params.page) queryParams.set("page", params.page.toString());
        if (params != null && params.limit) queryParams.set("limit", params.limit.toString());
        var response = yield _apiClient.default.get(`/community/posts/${postId}/comments?${queryParams.toString()}`);
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to fetch post comments");
      }
    });
    function getComments(_x4, _x5) {
      return _getComments.apply(this, arguments);
    }
    return getComments;
  }(),
  addComment: function () {
    var _addComment = (0, _asyncToGenerator2.default)(function* (postId, data) {
      try {
        if (!data.content || !data.content.trim()) {
          throw new Error("Comment content is required");
        }
        var response = yield _apiClient.default.post(`/community/posts/${postId}/comments`, data);
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to add comment to post");
      }
    });
    function addComment(_x6, _x7) {
      return _addComment.apply(this, arguments);
    }
    return addComment;
  }(),
  reportContent: function () {
    var _reportContent = (0, _asyncToGenerator2.default)(function* (data) {
      try {
        var response = yield _apiClient.default.post("/community/report", data);
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to report content");
      }
    });
    function reportContent(_x8) {
      return _reportContent.apply(this, arguments);
    }
    return reportContent;
  }(),
  blockUser: function () {
    var _blockUser = (0, _asyncToGenerator2.default)(function* (userId) {
      try {
        var response = yield _apiClient.default.post("/community/block", {
          userId: userId
        });
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to block user");
      }
    });
    function blockUser(_x9) {
      return _blockUser.apply(this, arguments);
    }
    return blockUser;
  }(),
  joinActivity: function () {
    var _joinActivity = (0, _asyncToGenerator2.default)(function* (postId) {
      try {
        var response = yield _apiClient.default.post(`/community/posts/${postId}/join`);
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to join activity");
      }
    });
    function joinActivity(_x0) {
      return _joinActivity.apply(this, arguments);
    }
    return joinActivity;
  }(),
  leaveActivity: function () {
    var _leaveActivity = (0, _asyncToGenerator2.default)(function* (postId) {
      try {
        var response = yield _apiClient.default.post(`/community/posts/${postId}/leave`);
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to leave activity");
      }
    });
    function leaveActivity(_x1) {
      return _leaveActivity.apply(this, arguments);
    }
    return leaveActivity;
  }(),
  deletePost: function () {
    var _deletePost = (0, _asyncToGenerator2.default)(function* (postId) {
      try {
        var response = yield _apiClient.default.delete(`/community/posts/${postId}`);
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to delete post");
      }
    });
    function deletePost(_x10) {
      return _deletePost.apply(this, arguments);
    }
    return deletePost;
  }(),
  updatePost: function () {
    var _updatePost = (0, _asyncToGenerator2.default)(function* (postId, data) {
      try {
        var response = yield _apiClient.default.put(`/community/posts/${postId}`, data);
        return response;
      } catch (error) {
        return handleApiError(error, "Failed to update post");
      }
    });
    function updatePost(_x11, _x12) {
      return _updatePost.apply(this, arguments);
    }
    return updatePost;
  }()
};
var _default = exports.default = communityAPI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,