f872bd723582014aa7d4089582d2de5a
"use strict";

_getJestObj().mock("../uploadHygiene", function () {
  return {
    processImageForUpload: _globals.jest.fn(),
    checkUploadQuota: _globals.jest.fn(),
    uploadWithRetry: _globals.jest.fn(),
    pickAndProcessImage: _globals.jest.fn(),
    captureAndProcessImage: _globals.jest.fn()
  };
});
_getJestObj().mock("../api", function () {
  return {
    api: {
      presignPhoto: _globals.jest.fn()
    },
    request: _globals.jest.fn()
  };
});
_getJestObj().mock('expo-file-system', function () {
  return {
    EncodingType: {
      Base64: 'base64',
      UTF8: 'utf8'
    },
    readAsStringAsync: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _enhancedUploadService = require("../enhancedUploadService");
var _uploadHygiene = require("../uploadHygiene");
var _api = require("../api");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApi = _api.api;
var mockRequest = _api.request;
var mockProcessImageForUpload = _uploadHygiene.processImageForUpload;
var mockCheckUploadQuota = _uploadHygiene.checkUploadQuota;
var mockUploadWithRetry = _uploadHygiene.uploadWithRetry;
var mockPickAndProcessImage = _uploadHygiene.pickAndProcessImage;
var mockCaptureAndProcessImage = _uploadHygiene.captureAndProcessImage;
var mockFileSystem = FileSystem;
var mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
(0, _globals.describe)('EnhancedUploadService', function () {
  var service;
  var mockProcessedImage;
  var mockProgressCallback;
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    _enhancedUploadService.EnhancedUploadService.instance = undefined;
    service = _enhancedUploadService.EnhancedUploadService.getInstance();
    mockProcessedImage = {
      uri: 'file://test-image.jpg',
      width: 1024,
      height: 768,
      fileSize: 256000,
      mimeType: 'image/jpeg',
      metadata: {
        originalWidth: 2048,
        originalHeight: 1536,
        orientationFixed: true,
        exifStripped: true
      }
    };
    mockProgressCallback = _globals.jest.fn();
    mockApi.presignPhoto.mockResolvedValue({
      key: 'test-key-123',
      url: 'https://s3.amazonaws.com/test-bucket/test-key-123'
    });
    mockFetch.mockResolvedValue({
      ok: true
    });
    mockRequest.mockResolvedValue({
      data: {
        upload: {
          _id: 'upload-123',
          s3Key: 'test-key-123',
          url: 'https://cdn.example.com/test-key-123',
          status: 'pending'
        }
      }
    });
    mockFileSystem.readAsStringAsync.mockResolvedValue('base64data');
  });
  (0, _globals.afterEach)(function () {
    _globals.jest.clearAllTimers();
  });
  (0, _globals.describe)('Singleton Pattern', function () {
    (0, _globals.it)('should return the same instance', function () {
      var instance1 = _enhancedUploadService.EnhancedUploadService.getInstance();
      var instance2 = _enhancedUploadService.EnhancedUploadService.getInstance();
      (0, _globals.expect)(instance1).toBe(instance2);
      (0, _globals.expect)(instance1).toBe(service);
    });
    (0, _globals.it)('should maintain state across calls', function () {
      (0, _globals.expect)(service).toBeDefined();
    });
  });
  (0, _globals.describe)('uploadProcessedImage', function () {
    (0, _globals.it)('should complete full upload pipeline successfully', (0, _asyncToGenerator2.default)(function* () {
      var result = yield service.uploadProcessedImage(mockProcessedImage, 'pet', 'pet-123', mockProgressCallback);
      (0, _globals.expect)(result).toEqual({
        uploadId: 'upload-123',
        s3Key: 'test-key-123',
        url: 'https://cdn.example.com/test-key-123',
        status: 'pending',
        analysis: undefined
      });
      (0, _globals.expect)(mockProgressCallback).toHaveBeenCalledWith({
        phase: 'presign',
        percent: 10,
        message: 'Requesting upload URL...'
      });
      (0, _globals.expect)(mockProgressCallback).toHaveBeenCalledWith({
        phase: 'upload',
        percent: 30,
        message: 'Uploading to secure storage...'
      });
      (0, _globals.expect)(mockProgressCallback).toHaveBeenCalledWith({
        phase: 'register',
        percent: 60,
        message: 'Registering upload...'
      });
      (0, _globals.expect)(mockProgressCallback).toHaveBeenCalledWith({
        phase: 'analyze',
        percent: 80,
        message: 'Analyzing photo...'
      });
      (0, _globals.expect)(mockProgressCallback).toHaveBeenCalledWith({
        phase: 'pending',
        percent: 90,
        message: 'Awaiting moderation...'
      });
    }));
    (0, _globals.it)('should handle different upload types', (0, _asyncToGenerator2.default)(function* () {
      var types = ['profile', 'pet', 'verification'];
      for (var type of types) {
        mockRequest.mockResolvedValueOnce({
          data: {
            upload: {
              _id: `upload-${type}`,
              s3Key: `key-${type}`,
              url: `url-${type}`,
              status: 'pending'
            }
          }
        });
        var result = yield service.uploadProcessedImage(mockProcessedImage, type);
        (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/uploads', {
          method: 'POST',
          body: _globals.expect.objectContaining({
            type: type
          })
        });
        (0, _globals.expect)(result.uploadId).toBe(`upload-${type}`);
      }
    }));
    (0, _globals.it)('should work without progress callback', (0, _asyncToGenerator2.default)(function* () {
      var result = yield service.uploadProcessedImage(mockProcessedImage);
      (0, _globals.expect)(result).toBeDefined();
      (0, _globals.expect)(mockProgressCallback).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle presign failure', (0, _asyncToGenerator2.default)(function* () {
      mockApi.presignPhoto.mockRejectedValue(new Error('Presign failed'));
      yield (0, _globals.expect)(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow('Presign failed');
    }));
    (0, _globals.it)('should handle S3 upload failure', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 403,
        statusText: 'Forbidden'
      });
      yield (0, _globals.expect)(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow('S3 upload failed');
    }));
    (0, _globals.it)('should handle registration failure', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Registration failed'));
      yield (0, _globals.expect)(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow('Registration failed');
    }));
    (0, _globals.it)('should handle file URI to blob conversion', (0, _asyncToGenerator2.default)(function* () {
      yield service.uploadProcessedImage(mockProcessedImage);
      (0, _globals.expect)(mockFileSystem.readAsStringAsync).toHaveBeenCalledWith(mockProcessedImage.uri, {
        encoding: FileSystem.EncodingType.Base64
      });
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
        method: 'PUT',
        body: _globals.expect.any(Blob)
      }));
    }));
    (0, _globals.it)('should handle missing optional fields in response', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        data: {
          upload: {
            status: 'approved'
          }
        }
      });
      var result = yield service.uploadProcessedImage(mockProcessedImage);
      (0, _globals.expect)(result).toEqual({
        uploadId: '',
        s3Key: 'test-key-123',
        url: _globals.expect.stringContaining('s3.amazonaws.com'),
        status: 'approved',
        analysis: undefined
      });
    }));
    (0, _globals.it)('should handle large file uploads', (0, _asyncToGenerator2.default)(function* () {
      var largeImage = _objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        fileSize: 10 * 1024 * 1024
      });
      var result = yield service.uploadProcessedImage(largeImage);
      (0, _globals.expect)(result).toBeDefined();
      (0, _globals.expect)(mockFetch).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('uploadFromPicker', function () {
    (0, _globals.it)('should complete full pipeline from picker', (0, _asyncToGenerator2.default)(function* () {
      mockCheckUploadQuota.mockResolvedValue({
        allowed: true,
        remaining: 5,
        resetAt: new Date(),
        limit: 10
      });
      mockPickAndProcessImage.mockResolvedValue(mockProcessedImage);
      var result = yield service.uploadFromPicker({
        type: 'profile',
        petId: 'pet-456',
        allowEditing: false,
        useCamera: false
      }, mockProgressCallback);
      (0, _globals.expect)(mockCheckUploadQuota).toHaveBeenCalledWith('current-user-id');
      (0, _globals.expect)(mockPickAndProcessImage).toHaveBeenCalledWith(false, {
        maxDimension: 2048,
        quality: 0.9
      });
      (0, _globals.expect)(result).toBeDefined();
    }));
    (0, _globals.it)('should use camera when specified', (0, _asyncToGenerator2.default)(function* () {
      mockCheckUploadQuota.mockResolvedValue({
        allowed: true,
        remaining: 5,
        resetAt: new Date(),
        limit: 10
      });
      mockCaptureAndProcessImage.mockResolvedValue(mockProcessedImage);
      yield service.uploadFromPicker({
        useCamera: true
      });
      (0, _globals.expect)(mockCaptureAndProcessImage).toHaveBeenCalledWith({
        maxDimension: 2048,
        quality: 0.9
      });
      (0, _globals.expect)(mockPickAndProcessImage).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle quota exceeded', (0, _asyncToGenerator2.default)(function* () {
      mockCheckUploadQuota.mockResolvedValue({
        allowed: false,
        remaining: 0,
        resetAt: new Date(),
        limit: 10
      });
      yield (0, _globals.expect)(service.uploadFromPicker()).rejects.toThrow('Upload quota exceeded');
    }));
    (0, _globals.it)('should handle image picker cancellation', (0, _asyncToGenerator2.default)(function* () {
      mockCheckUploadQuota.mockResolvedValue({
        allowed: true,
        remaining: 5,
        resetAt: new Date(),
        limit: 10
      });
      mockPickAndProcessImage.mockResolvedValue(null);
      yield (0, _globals.expect)(service.uploadFromPicker()).rejects.toThrow('No image selected');
    }));
    (0, _globals.it)('should use default options when not provided', (0, _asyncToGenerator2.default)(function* () {
      mockCheckUploadQuota.mockResolvedValue({
        allowed: true,
        remaining: 5,
        resetAt: new Date(),
        limit: 10
      });
      mockPickAndProcessImage.mockResolvedValue(mockProcessedImage);
      yield service.uploadFromPicker();
      (0, _globals.expect)(mockPickAndProcessImage).toHaveBeenCalledWith(true, {
        maxDimension: 2048,
        quality: 0.9
      });
    }));
    (0, _globals.it)('should handle quota check failure', (0, _asyncToGenerator2.default)(function* () {
      mockCheckUploadQuota.mockRejectedValue(new Error('Quota service unavailable'));
      yield (0, _globals.expect)(service.uploadFromPicker()).rejects.toThrow('Quota service unavailable');
    }));
  });
  (0, _globals.describe)('pollUploadStatus', function () {
    (0, _globals.it)('should poll until approved status', (0, _asyncToGenerator2.default)(function* () {
      var approvedResponse = {
        data: {
          upload: {
            s3Key: 'approved-key',
            url: 'approved-url',
            status: 'approved'
          },
          analysis: {
            safety: 'safe',
            labels: ['dog']
          }
        }
      };
      mockRequest.mockResolvedValue(approvedResponse);
      var result = yield service.pollUploadStatus('upload-123', 5, 100);
      (0, _globals.expect)(result).toEqual({
        uploadId: 'upload-123',
        s3Key: 'approved-key',
        url: 'approved-url',
        status: 'approved',
        analysis: approvedResponse.data.analysis
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(1);
    }));
    (0, _globals.it)('should handle rejected status', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        data: {
          upload: {
            status: 'rejected',
            flagReason: 'Inappropriate content'
          }
        }
      });
      yield (0, _globals.expect)(service.pollUploadStatus('upload-123')).rejects.toThrow('Upload rejected: Inappropriate content');
    }));
    (0, _globals.it)('should poll multiple times for pending status', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        data: {
          upload: {
            status: 'pending'
          }
        }
      });
      mockRequest.mockResolvedValueOnce({
        data: {
          upload: {
            status: 'analyzing'
          }
        }
      });
      mockRequest.mockResolvedValueOnce({
        data: {
          upload: {
            s3Key: 'final-key',
            url: 'final-url',
            status: 'approved'
          }
        }
      });
      var result = yield service.pollUploadStatus('upload-123', 5, 10);
      (0, _globals.expect)(result.status).toBe('approved');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(3);
    }), 10000);
    (0, _globals.it)('should timeout after max attempts', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        data: {
          upload: {
            status: 'pending'
          }
        }
      });
      yield (0, _globals.expect)(service.pollUploadStatus('upload-123', 3, 10)).rejects.toThrow('Upload status polling timeout');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(3);
    }), 10000);
    (0, _globals.it)('should handle API errors during polling', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Network error'));
      mockRequest.mockResolvedValueOnce({
        data: {
          upload: {
            status: 'approved'
          }
        }
      });
      var result = yield service.pollUploadStatus('upload-123', 3, 10);
      (0, _globals.expect)(result.status).toBe('approved');
    }));
    (0, _globals.it)('should use default polling parameters', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        data: {
          upload: {
            status: 'approved'
          }
        }
      });
      yield service.pollUploadStatus('upload-123');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/uploads/upload-123', {
        method: 'GET'
      });
    }));
  });
  (0, _globals.describe)('uploadBatch', function () {
    (0, _globals.it)('should upload multiple images successfully', (0, _asyncToGenerator2.default)(function* () {
      var images = [_objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        uri: 'image1.jpg'
      }), _objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        uri: 'image2.jpg'
      }), _objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        uri: 'image3.jpg'
      })];
      var mockProgressCallback = _globals.jest.fn();
      var results = yield service.uploadBatch(images, 'pet', 'pet-123', mockProgressCallback);
      (0, _globals.expect)(results).toHaveLength(3);
      (0, _globals.expect)(mockProgressCallback).toHaveBeenCalledTimes(3);
      (0, _globals.expect)(mockProgressCallback).toHaveBeenCalledWith(0, {
        phase: 'presign',
        percent: 0,
        message: 'Processing photo 1/3'
      });
      (0, _globals.expect)(mockProgressCallback).toHaveBeenCalledWith(1, {
        phase: 'presign',
        percent: 0,
        message: 'Processing photo 2/3'
      });
      (0, _globals.expect)(mockProgressCallback).toHaveBeenCalledWith(2, {
        phase: 'presign',
        percent: 0,
        message: 'Processing photo 3/3'
      });
    }));
    (0, _globals.it)('should handle partial failures in batch upload', (0, _asyncToGenerator2.default)(function* () {
      var images = [mockProcessedImage, _objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        uri: 'fail-image.jpg'
      }), mockProcessedImage];
      mockFetch.mockResolvedValueOnce({
        ok: true
      });
      mockRequest.mockResolvedValueOnce({
        data: {
          upload: {
            _id: 'upload1'
          }
        }
      });
      mockFetch.mockResolvedValueOnce({
        ok: false
      });
      mockFetch.mockResolvedValueOnce({
        ok: true
      });
      mockRequest.mockResolvedValueOnce({
        data: {
          upload: {
            _id: 'upload3'
          }
        }
      });
      var results = yield service.uploadBatch(images);
      (0, _globals.expect)(results).toHaveLength(2);
      (0, _globals.expect)(results[0].uploadId).toBe('upload1');
      (0, _globals.expect)(results[1].uploadId).toBe('upload3');
    }));
    (0, _globals.it)('should work without progress callback', (0, _asyncToGenerator2.default)(function* () {
      var images = [mockProcessedImage];
      var results = yield service.uploadBatch(images);
      (0, _globals.expect)(results).toHaveLength(1);
    }));
    (0, _globals.it)('should handle empty batch', (0, _asyncToGenerator2.default)(function* () {
      var results = yield service.uploadBatch([]);
      (0, _globals.expect)(results).toEqual([]);
    }));
  });
  (0, _globals.describe)('checkDuplicate', function () {
    (0, _globals.it)('should check for duplicate uploads', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        data: {
          isDuplicate: true,
          similarImages: ['similar1.jpg', 'similar2.jpg']
        }
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield service.checkDuplicate('upload-123');
      (0, _globals.expect)(result).toEqual({
        isDuplicate: true,
        similarImages: ['similar1.jpg', 'similar2.jpg']
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/uploads/upload-123/duplicate-check', {
        method: 'GET'
      });
    }));
    (0, _globals.it)('should handle no duplicates found', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        data: {
          isDuplicate: false
        }
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield service.checkDuplicate('upload-456');
      (0, _globals.expect)(result).toEqual({
        isDuplicate: false,
        similarImages: undefined
      });
    }));
    (0, _globals.it)('should handle API errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Duplicate check failed'));
      var result = yield service.checkDuplicate('upload-789');
      (0, _globals.expect)(result).toEqual({
        isDuplicate: false
      });
    }));
  });
  (0, _globals.describe)('File URI to Blob Conversion', function () {
    (0, _globals.it)('should convert file URI to blob', (0, _asyncToGenerator2.default)(function* () {
      var uri = 'file://test-image.jpg';
      var base64Data = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==';
      mockFileSystem.readAsStringAsync.mockResolvedValue(base64Data);
      var blob = yield service.fileUriToBlob(uri);
      (0, _globals.expect)(blob).toBeInstanceOf(Blob);
      (0, _globals.expect)(blob.type).toBe('image/jpeg');
      (0, _globals.expect)(blob.size).toBeGreaterThan(0);
    }));
    (0, _globals.it)('should handle file read errors', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.readAsStringAsync.mockRejectedValue(new Error('File read failed'));
      yield (0, _globals.expect)(service.fileUriToBlob('invalid-uri')).rejects.toThrow('File read failed');
    }));
    (0, _globals.it)('should handle empty base64 data', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.readAsStringAsync.mockResolvedValue('');
      var blob = yield service.fileUriToBlob('empty-file');
      (0, _globals.expect)(blob.size).toBe(0);
    }));
  });
  (0, _globals.describe)('Retry Upload', function () {
    (0, _globals.it)('should retry upload with backoff', (0, _asyncToGenerator2.default)(function* () {
      var expectedResult = {
        uploadId: 'retry-success'
      };
      mockUploadWithRetry.mockResolvedValue(expectedResult);
      var result = yield service.retryUpload(mockProcessedImage, 'pet', 'pet-123', 3);
      (0, _globals.expect)(mockUploadWithRetry).toHaveBeenCalledWith(_globals.expect.any(Function), 3, 1000);
      (0, _globals.expect)(result).toEqual(expectedResult);
    }));
    (0, _globals.it)('should use default retry parameters', (0, _asyncToGenerator2.default)(function* () {
      mockUploadWithRetry.mockResolvedValue({
        uploadId: 'default-retry'
      });
      yield service.retryUpload(mockProcessedImage);
      (0, _globals.expect)(mockUploadWithRetry).toHaveBeenCalledWith(_globals.expect.any(Function), 3, 1000);
    }));
    (0, _globals.it)('should handle retry failures', (0, _asyncToGenerator2.default)(function* () {
      mockUploadWithRetry.mockRejectedValue(new Error('All retries failed'));
      yield (0, _globals.expect)(service.retryUpload(mockProcessedImage)).rejects.toThrow('All retries failed');
    }));
  });
  (0, _globals.describe)('Error Handling and Edge Cases', function () {
    (0, _globals.it)('should handle very long URIs', (0, _asyncToGenerator2.default)(function* () {
      var longUri = 'file://' + 'a'.repeat(1000) + '.jpg';
      var longImage = _objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        uri: longUri
      });
      yield service.uploadProcessedImage(longImage);
      (0, _globals.expect)(mockFetch).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle special characters in URIs', (0, _asyncToGenerator2.default)(function* () {
      var specialUri = 'file://test image (copy).jpg';
      var specialImage = _objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        uri: specialUri
      });
      yield service.uploadProcessedImage(specialImage);
      (0, _globals.expect)(mockFileSystem.readAsStringAsync).toHaveBeenCalledWith(specialUri, _globals.expect.any(Object));
    }));
    (0, _globals.it)('should handle network timeouts during upload', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockRejectedValue(new Error('Network timeout'));
      yield (0, _globals.expect)(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow('Network timeout');
    }));
    (0, _globals.it)('should handle malformed presign responses', (0, _asyncToGenerator2.default)(function* () {
      mockApi.presignPhoto.mockResolvedValue({});
      yield (0, _globals.expect)(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow();
    }));
    (0, _globals.it)('should handle concurrent uploads', (0, _asyncToGenerator2.default)(function* () {
      var uploadPromises = [service.uploadProcessedImage(_objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        uri: 'img1.jpg'
      })), service.uploadProcessedImage(_objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        uri: 'img2.jpg'
      })), service.uploadProcessedImage(_objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        uri: 'img3.jpg'
      }))];
      var results = yield Promise.all(uploadPromises);
      (0, _globals.expect)(results).toHaveLength(3);
      results.forEach(function (result) {
        (0, _globals.expect)(result.uploadId).toBe('upload-123');
      });
    }));
    (0, _globals.it)('should handle extremely large files', (0, _asyncToGenerator2.default)(function* () {
      var hugeImage = _objectSpread(_objectSpread({}, mockProcessedImage), {}, {
        fileSize: 100 * 1024 * 1024
      });
      var largeBase64 = 'A'.repeat(1024 * 1024);
      mockFileSystem.readAsStringAsync.mockResolvedValue(largeBase64);
      yield service.uploadProcessedImage(hugeImage);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
        body: _globals.expect.any(Blob)
      }));
    }));
    (0, _globals.it)('should handle malformed processed images', (0, _asyncToGenerator2.default)(function* () {
      var malformedImage = {
        uri: 'test.jpg'
      };
      yield (0, _globals.expect)(service.uploadProcessedImage(malformedImage)).rejects.toThrow();
    }));
    (0, _globals.it)('should handle upload registration with missing response fields', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        data: {
          upload: {}
        }
      });
      var result = yield service.uploadProcessedImage(mockProcessedImage);
      (0, _globals.expect)(result).toEqual({
        uploadId: '',
        s3Key: 'test-key-123',
        url: _globals.expect.stringContaining('s3.amazonaws.com'),
        status: 'pending',
        analysis: undefined
      });
    }));
    (0, _globals.it)('should handle progress callback errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var errorCallback = _globals.jest.fn().mockImplementation(function () {
        throw new Error('Progress callback failed');
      });
      yield (0, _globals.expect)(service.uploadProcessedImage(mockProcessedImage, 'pet', undefined, errorCallback)).resolves.toBeDefined();
    }));
    (0, _globals.it)('should handle file system read errors during blob conversion', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.readAsStringAsync.mockRejectedValue(new Error('File system error'));
      yield (0, _globals.expect)(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow('File system error');
    }));
    (0, _globals.it)('should handle invalid base64 data', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.readAsStringAsync.mockResolvedValue('invalid base64!@#$%');
      yield (0, _globals.expect)(service.uploadProcessedImage(mockProcessedImage)).rejects.toThrow();
    }));
    (0, _globals.it)('should handle polling with invalid upload IDs', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Upload not found'));
      yield (0, _globals.expect)(service.pollUploadStatus('invalid-id')).rejects.toThrow('Upload not found');
    }));
    (0, _globals.it)('should handle batch upload with all failures', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: false
      });
      var images = [mockProcessedImage, mockProcessedImage];
      var results = yield service.uploadBatch(images);
      (0, _globals.expect)(results).toEqual([]);
    }));
    (0, _globals.it)('should handle duplicate check with malformed responses', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        data: 'invalid response format'
      });
      var result = yield service.checkDuplicate('upload-123');
      (0, _globals.expect)(result).toEqual({
        isDuplicate: false
      });
    }));
    (0, _globals.it)('should handle retry with invalid parameters', (0, _asyncToGenerator2.default)(function* () {
      mockUploadWithRetry.mockRejectedValue(new Error('Invalid retry params'));
      yield (0, _globals.expect)(service.retryUpload(mockProcessedImage, 'invalid')).rejects.toThrow('Invalid retry params');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,