9357fda6cafd047d0cd050dc35254d4a
"use strict";

_getJestObj().mock('expo-location');
_getJestObj().mock("../api", function () {
  return {
    request: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var Location = _interopRequireWildcard(require("expo-location"));
var _mapActivityService = require("../mapActivityService");
var _api = require("../api");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockLocation = Location;
var mockRequest = _api.request;
(0, _globals.describe)('MapActivityService', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockLocation.getCurrentPositionAsync.mockResolvedValue({
      coords: {
        latitude: 40.7128,
        longitude: -74.0060,
        altitude: 10,
        accuracy: 5,
        altitudeAccuracy: 1,
        heading: 90,
        speed: 1.5
      },
      timestamp: Date.now()
    });
    mockLocation.requestForegroundPermissionsAsync.mockResolvedValue({
      status: 'granted',
      granted: true,
      canAskAgain: true
    });
  });
  (0, _globals.describe)('startActivity', function () {
    (0, _globals.it)('should start an activity with current location', (0, _asyncToGenerator2.default)(function* () {
      var params = {
        petId: 'pet123',
        activity: 'walking',
        message: 'Enjoying a walk in the park!',
        shareToMap: true,
        radiusMeters: 500
      };
      var mockResponse = {
        _id: 'activity123',
        userId: 'user456',
        petId: 'pet123',
        activity: 'walking',
        message: 'Enjoying a walk in the park!',
        location: {
          type: 'Point',
          coordinates: [-74.0060, 40.7128]
        },
        radiusMeters: 500,
        shareToMap: true,
        active: true,
        likes: [],
        createdAt: '2024-01-01T12:00:00Z',
        updatedAt: '2024-01-01T12:00:00Z'
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.startActivity)(params);
      (0, _globals.expect)(mockLocation.getCurrentPositionAsync).toHaveBeenCalledWith({
        accuracy: Location.Accuracy.Balanced
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/activity/start', {
        method: 'POST',
        body: _objectSpread(_objectSpread({}, params), {}, {
          location: {
            latitude: 40.7128,
            longitude: -74.0060
          }
        })
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should handle location permission denied', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.getCurrentPositionAsync.mockRejectedValue(new Error('Location permission denied'));
      var params = {
        petId: 'pet123',
        activity: 'playing'
      };
      yield (0, _globals.expect)((0, _mapActivityService.startActivity)(params)).rejects.toThrow('Location permission denied');
    }));
    (0, _globals.it)('should handle location services unavailable', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.getCurrentPositionAsync.mockRejectedValue(new Error('Location services are disabled'));
      var params = {
        petId: 'pet123',
        activity: 'resting'
      };
      yield (0, _globals.expect)((0, _mapActivityService.startActivity)(params)).rejects.toThrow('Location services are disabled');
    }));
    (0, _globals.it)('should start activity with minimal parameters', (0, _asyncToGenerator2.default)(function* () {
      var params = {
        petId: 'pet456',
        activity: 'eating'
      };
      var mockResponse = {
        _id: 'activity456',
        userId: 'user789',
        petId: 'pet456',
        activity: 'eating',
        location: {
          type: 'Point',
          coordinates: [-74.0060, 40.7128]
        },
        radiusMeters: 100,
        shareToMap: false,
        active: true,
        likes: [],
        createdAt: '2024-01-01T13:00:00Z',
        updatedAt: '2024-01-01T13:00:00Z'
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.startActivity)(params);
      (0, _globals.expect)(result.petId).toBe('pet456');
      (0, _globals.expect)(result.activity).toBe('eating');
    }));
    (0, _globals.it)('should handle API errors during activity start', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Activity creation failed'));
      var params = {
        petId: 'pet123',
        activity: 'walking'
      };
      yield (0, _globals.expect)((0, _mapActivityService.startActivity)(params)).rejects.toThrow('Activity creation failed');
    }));
    (0, _globals.it)('should handle extreme location coordinates', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.getCurrentPositionAsync.mockResolvedValue({
        coords: {
          latitude: 89.9999,
          longitude: 179.9999,
          altitude: 8848,
          accuracy: 1,
          altitudeAccuracy: 0.5,
          heading: 359,
          speed: 0
        },
        timestamp: Date.now()
      });
      var params = {
        petId: 'pet123',
        activity: 'exploring'
      };
      var mockResponse = {
        _id: 'extreme-activity',
        userId: 'user123',
        petId: 'pet123',
        activity: 'exploring',
        location: {
          type: 'Point',
          coordinates: [179.9999, 89.9999]
        },
        radiusMeters: 100,
        shareToMap: false,
        active: true,
        likes: [],
        createdAt: '2024-01-01T14:00:00Z',
        updatedAt: '2024-01-01T14:00:00Z'
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.startActivity)(params);
      (0, _globals.expect)(result.location.coordinates).toEqual([179.9999, 89.9999]);
    }));
  });
  (0, _globals.describe)('endActivity', function () {
    (0, _globals.it)('should end an activity successfully', (0, _asyncToGenerator2.default)(function* () {
      var activityId = 'activity123';
      mockRequest.mockResolvedValue({
        success: true
      });
      yield (0, _globals.expect)((0, _mapActivityService.endActivity)(activityId)).resolves.not.toThrow();
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/activity/end', {
        method: 'POST',
        body: {
          activityId: activityId
        }
      });
    }));
    (0, _globals.it)('should handle API errors during activity end', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Activity end failed'));
      yield (0, _globals.expect)((0, _mapActivityService.endActivity)('invalid-activity')).rejects.toThrow('Activity end failed');
    }));
    (0, _globals.it)('should handle activity not found', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Activity not found'));
      yield (0, _globals.expect)((0, _mapActivityService.endActivity)('nonexistent')).rejects.toThrow('Activity not found');
    }));
  });
  (0, _globals.describe)('getNearbyPins', function () {
    (0, _globals.it)('should get nearby pins with coordinates', (0, _asyncToGenerator2.default)(function* () {
      var latitude = 40.7128;
      var longitude = -74.0060;
      var maxDistance = 1000;
      var mockPins = [{
        _id: 'pin1',
        userId: 'user1',
        petId: 'pet1',
        activity: 'walking',
        message: 'Nice walk!',
        location: {
          type: 'Point',
          coordinates: [-74.0050, 40.7130]
        },
        radiusMeters: 500,
        shareToMap: true,
        active: true,
        likes: [{
          userId: 'user2',
          likedAt: '2024-01-01T15:00:00Z'
        }],
        createdAt: '2024-01-01T14:00:00Z',
        updatedAt: '2024-01-01T15:00:00Z'
      }, {
        _id: 'pin2',
        userId: 'user2',
        petId: 'pet2',
        activity: 'playing',
        location: {
          type: 'Point',
          coordinates: [-74.0070, 40.7120]
        },
        radiusMeters: 300,
        shareToMap: true,
        active: true,
        likes: [],
        createdAt: '2024-01-01T14:30:00Z',
        updatedAt: '2024-01-01T14:30:00Z'
      }];
      mockRequest.mockResolvedValue(mockPins);
      var result = yield (0, _mapActivityService.getNearbyPins)(latitude, longitude, maxDistance);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/pins', {
        method: 'GET',
        params: {
          latitude: latitude,
          longitude: longitude,
          maxDistance: maxDistance
        }
      });
      (0, _globals.expect)(result).toEqual(mockPins);
      (0, _globals.expect)(result).toHaveLength(2);
    }));
    (0, _globals.it)('should get nearby pins without max distance', (0, _asyncToGenerator2.default)(function* () {
      var latitude = 51.5074;
      var longitude = -0.1278;
      var mockPins = [{
        _id: 'london-pin',
        userId: 'user-london',
        petId: 'pet-london',
        activity: 'park_visit',
        location: {
          type: 'Point',
          coordinates: [-0.1270, 51.5080]
        },
        radiusMeters: 200,
        shareToMap: true,
        active: true,
        likes: [],
        createdAt: '2024-01-01T16:00:00Z',
        updatedAt: '2024-01-01T16:00:00Z'
      }];
      mockRequest.mockResolvedValue(mockPins);
      var result = yield (0, _mapActivityService.getNearbyPins)(latitude, longitude);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/pins', {
        method: 'GET',
        params: {
          latitude: latitude,
          longitude: longitude
        }
      });
      (0, _globals.expect)(result).toEqual(mockPins);
    }));
    (0, _globals.it)('should handle empty results', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue([]);
      var result = yield (0, _mapActivityService.getNearbyPins)(0, 0, 100);
      (0, _globals.expect)(result).toEqual([]);
      (0, _globals.expect)(result).toHaveLength(0);
    }));
    (0, _globals.it)('should handle API errors when fetching pins', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Pins fetch failed'));
      yield (0, _globals.expect)((0, _mapActivityService.getNearbyPins)(40.7128, -74.0060)).rejects.toThrow('Pins fetch failed');
    }));
    (0, _globals.it)('should handle extreme coordinates', (0, _asyncToGenerator2.default)(function* () {
      var extremeLat = 85.0511;
      var extremeLng = 180.0000;
      mockRequest.mockResolvedValue([]);
      var result = yield (0, _mapActivityService.getNearbyPins)(extremeLat, extremeLng, 5000);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/pins', {
        method: 'GET',
        params: {
          latitude: extremeLat,
          longitude: extremeLng,
          maxDistance: 5000
        }
      });
    }));
    (0, _globals.it)('should handle very large max distance', (0, _asyncToGenerator2.default)(function* () {
      var hugeDistance = 100000;
      mockRequest.mockResolvedValue([]);
      yield (0, _mapActivityService.getNearbyPins)(40.7128, -74.0060, hugeDistance);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/pins', {
        method: 'GET',
        params: {
          latitude: 40.7128,
          longitude: -74.0060,
          maxDistance: hugeDistance
        }
      });
    }));
  });
  (0, _globals.describe)('likePin', function () {
    (0, _globals.it)('should like a pin successfully', (0, _asyncToGenerator2.default)(function* () {
      var pinId = 'pin123';
      var mockResponse = {
        likes: 5
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.likePin)(pinId);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith(`/map/pins/${pinId}/like`, {
        method: 'POST'
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(result.likes).toBe(5);
    }));
    (0, _globals.it)('should handle API errors when liking pin', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Like failed'));
      yield (0, _globals.expect)((0, _mapActivityService.likePin)('invalid-pin')).rejects.toThrow('Like failed');
    }));
    (0, _globals.it)('should handle pin not found', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Pin not found'));
      yield (0, _globals.expect)((0, _mapActivityService.likePin)('nonexistent')).rejects.toThrow('Pin not found');
    }));
    (0, _globals.it)('should handle already liked pin', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Already liked'));
      yield (0, _globals.expect)((0, _mapActivityService.likePin)('already-liked')).rejects.toThrow('Already liked');
    }));
  });
  (0, _globals.describe)('commentOnPin', function () {
    (0, _globals.it)('should comment on a pin successfully', (0, _asyncToGenerator2.default)(function* () {
      var pinId = 'pin123';
      var commentText = 'Great activity!';
      var mockResponse = {
        comments: 3
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.commentOnPin)(pinId, commentText);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith(`/map/pins/${pinId}/comment`, {
        method: 'POST',
        body: {
          text: commentText
        }
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(result.comments).toBe(3);
    }));
    (0, _globals.it)('should handle empty comments', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        comments: 1
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.commentOnPin)('pin123', '');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/pins/pin123/comment', {
        method: 'POST',
        body: {
          text: ''
        }
      });
    }));
    (0, _globals.it)('should handle long comments', (0, _asyncToGenerator2.default)(function* () {
      var longComment = 'A'.repeat(1000);
      var mockResponse = {
        comments: 2
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.commentOnPin)('pin123', longComment);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/pins/pin123/comment', {
        method: 'POST',
        body: {
          text: longComment
        }
      });
    }));
    (0, _globals.it)('should handle API errors when commenting', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Comment failed'));
      yield (0, _globals.expect)((0, _mapActivityService.commentOnPin)('pin123', 'Test comment')).rejects.toThrow('Comment failed');
    }));
    (0, _globals.it)('should handle comment moderation rejection', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Comment contains inappropriate content'));
      yield (0, _globals.expect)((0, _mapActivityService.commentOnPin)('pin123', 'bad comment')).rejects.toThrow('Comment contains inappropriate content');
    }));
    (0, _globals.it)('should handle special characters in comments', (0, _asyncToGenerator2.default)(function* () {
      var specialComment = 'Great activity! 🌟🚀 #petlife @friend 🐕';
      var mockResponse = {
        comments: 4
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.commentOnPin)('pin123', specialComment);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/pins/pin123/comment', {
        method: 'POST',
        body: {
          text: specialComment
        }
      });
    }));
  });
  (0, _globals.describe)('Error Handling and Edge Cases', function () {
    (0, _globals.it)('should handle network connectivity issues', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Network request failed'));
      yield (0, _globals.expect)((0, _mapActivityService.startActivity)({
        petId: 'pet123',
        activity: 'walking'
      })).rejects.toThrow('Network request failed');
    }));
    (0, _globals.it)('should handle malformed API responses', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue('invalid response');
      var result = yield (0, _mapActivityService.startActivity)({
        petId: 'pet123',
        activity: 'walking'
      });
      (0, _globals.expect)(result).toBe('invalid response');
    }));
    (0, _globals.it)('should handle concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      var operations = [(0, _mapActivityService.startActivity)({
        petId: 'pet1',
        activity: 'walking'
      }), (0, _mapActivityService.startActivity)({
        petId: 'pet2',
        activity: 'playing'
      }), (0, _mapActivityService.getNearbyPins)(40.7128, -74.0060), (0, _mapActivityService.likePin)('pin1'), (0, _mapActivityService.commentOnPin)('pin2', 'Nice!')];
      operations.forEach(function () {
        mockRequest.mockResolvedValueOnce({});
      });
      var results = yield Promise.all(operations);
      (0, _globals.expect)(results).toHaveLength(5);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(5);
    }));
    (0, _globals.it)('should handle partial failures in concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      var operations = [(0, _mapActivityService.startActivity)({
        petId: 'pet1',
        activity: 'walking'
      }), (0, _mapActivityService.startActivity)({
        petId: 'pet2',
        activity: 'playing'
      }), (0, _mapActivityService.getNearbyPins)(40.7128, -74.0060)];
      mockRequest.mockResolvedValueOnce({
        _id: 'activity1'
      });
      mockRequest.mockRejectedValueOnce(new Error('Activity 2 failed'));
      mockRequest.mockResolvedValueOnce([]);
      var results = yield Promise.allSettled(operations);
      (0, _globals.expect)(results[0].status).toBe('fulfilled');
      (0, _globals.expect)(results[1].status).toBe('rejected');
      (0, _globals.expect)(results[1].reason.message).toBe('Activity 2 failed');
      (0, _globals.expect)(results[2].status).toBe('fulfilled');
    }));
    (0, _globals.it)('should handle invalid activity parameters', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _globals.expect)((0, _mapActivityService.startActivity)({
        petId: '',
        activity: 'walking'
      })).rejects.toThrow();
      yield (0, _globals.expect)((0, _mapActivityService.startActivity)({
        petId: 'pet123',
        activity: ''
      })).rejects.toThrow();
    }));
    (0, _globals.it)('should handle location accuracy variations', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.getCurrentPositionAsync.mockResolvedValue({
        coords: {
          latitude: 40.7128,
          longitude: -74.0060,
          altitude: null,
          accuracy: 100,
          altitudeAccuracy: null,
          heading: null,
          speed: null
        },
        timestamp: Date.now()
      });
      var params = {
        petId: 'pet123',
        activity: 'walking'
      };
      var mockResponse = {
        _id: 'low-accuracy-activity',
        userId: 'user123',
        petId: 'pet123',
        activity: 'walking',
        location: {
          type: 'Point',
          coordinates: [-74.0060, 40.7128]
        },
        radiusMeters: 100,
        shareToMap: false,
        active: true,
        likes: [],
        createdAt: '2024-01-01T17:00:00Z',
        updatedAt: '2024-01-01T17:00:00Z'
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.startActivity)(params);
      (0, _globals.expect)(result.location.coordinates).toEqual([-74.0060, 40.7128]);
    }));
    (0, _globals.it)('should handle zero coordinates', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.getCurrentPositionAsync.mockResolvedValue({
        coords: {
          latitude: 0,
          longitude: 0,
          altitude: 0,
          accuracy: 1,
          altitudeAccuracy: 1,
          heading: 0,
          speed: 0
        },
        timestamp: Date.now()
      });
      var params = {
        petId: 'pet123',
        activity: 'resting'
      };
      var mockResponse = {
        _id: 'zero-coords-activity',
        userId: 'user123',
        petId: 'pet123',
        activity: 'resting',
        location: {
          type: 'Point',
          coordinates: [0, 0]
        },
        radiusMeters: 100,
        shareToMap: false,
        active: true,
        likes: [],
        createdAt: '2024-01-01T18:00:00Z',
        updatedAt: '2024-01-01T18:00:00Z'
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.startActivity)(params);
      (0, _globals.expect)(result.location.coordinates).toEqual([0, 0]);
    }));
    (0, _globals.it)('should handle very large radius values', (0, _asyncToGenerator2.default)(function* () {
      var params = {
        petId: 'pet123',
        activity: 'exploring',
        radiusMeters: 50000
      };
      var mockResponse = {
        _id: 'large-radius-activity',
        userId: 'user123',
        petId: 'pet123',
        activity: 'exploring',
        location: {
          type: 'Point',
          coordinates: [-74.0060, 40.7128]
        },
        radiusMeters: 50000,
        shareToMap: false,
        active: true,
        likes: [],
        createdAt: '2024-01-01T19:00:00Z',
        updatedAt: '2024-01-01T19:00:00Z'
      };
      mockRequest.mockResolvedValue(mockResponse);
      var result = yield (0, _mapActivityService.startActivity)(params);
      (0, _globals.expect)(result.radiusMeters).toBe(50000);
    }));
    (0, _globals.it)('should handle activities with many likes', (0, _asyncToGenerator2.default)(function* () {
      var manyLikes = Array.from({
        length: 100
      }, function (_, i) {
        return {
          userId: `user${i}`,
          likedAt: new Date(Date.now() - i * 60000).toISOString()
        };
      });
      var mockPin = {
        _id: 'popular-pin',
        userId: 'creator',
        petId: 'pet123',
        activity: 'popular_activity',
        location: {
          type: 'Point',
          coordinates: [-74.0060, 40.7128]
        },
        radiusMeters: 200,
        shareToMap: true,
        active: true,
        likes: manyLikes,
        createdAt: '2024-01-01T20:00:00Z',
        updatedAt: '2024-01-01T20:00:00Z'
      };
      mockRequest.mockResolvedValue([mockPin]);
      var result = yield (0, _mapActivityService.getNearbyPins)(40.7128, -74.0060);
      (0, _globals.expect)(result[0].likes).toHaveLength(100);
    }));
    (0, _globals.it)('should handle pins with very long messages', (0, _asyncToGenerator2.default)(function* () {
      var _result$0$message;
      var longMessage = 'A'.repeat(2000);
      var mockPin = {
        _id: 'long-message-pin',
        userId: 'user123',
        petId: 'pet123',
        activity: 'storytelling',
        message: longMessage,
        location: {
          type: 'Point',
          coordinates: [-74.0060, 40.7128]
        },
        radiusMeters: 100,
        shareToMap: true,
        active: true,
        likes: [],
        createdAt: '2024-01-01T21:00:00Z',
        updatedAt: '2024-01-01T21:00:00Z'
      };
      mockRequest.mockResolvedValue([mockPin]);
      var result = yield (0, _mapActivityService.getNearbyPins)(40.7128, -74.0060);
      (0, _globals.expect)(result[0].message).toBe(longMessage);
      (0, _globals.expect)((_result$0$message = result[0].message) == null ? void 0 : _result$0$message.length).toBe(2000);
    }));
    (0, _globals.it)('should handle rate limiting', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Rate limit exceeded'));
      yield (0, _globals.expect)((0, _mapActivityService.likePin)('pin123')).rejects.toThrow('Rate limit exceeded');
    }));
    (0, _globals.it)('should handle authentication errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Unauthorized'));
      yield (0, _globals.expect)((0, _mapActivityService.startActivity)({
        petId: 'pet123',
        activity: 'walking'
      })).rejects.toThrow('Unauthorized');
    }));
    (0, _globals.it)('should handle server errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Internal server error'));
      yield (0, _globals.expect)((0, _mapActivityService.getNearbyPins)(40.7128, -74.0060)).rejects.toThrow('Internal server error');
    }));
  });
  (0, _globals.describe)('Location Permission Handling', function () {
    (0, _globals.it)('should handle permission granted', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.requestForegroundPermissionsAsync.mockResolvedValue({
        status: 'granted',
        granted: true,
        canAskAgain: true
      });
      var permission = yield mockLocation.requestForegroundPermissionsAsync();
      (0, _globals.expect)(permission.granted).toBe(true);
    }));
    (0, _globals.it)('should handle permission denied', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.requestForegroundPermissionsAsync.mockResolvedValue({
        status: 'denied',
        granted: false,
        canAskAgain: false
      });
      var permission = yield mockLocation.requestForegroundPermissionsAsync();
      (0, _globals.expect)(permission.granted).toBe(false);
    }));
    (0, _globals.it)('should handle permission undetermined', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.requestForegroundPermissionsAsync.mockResolvedValue({
        status: 'undetermined',
        granted: false,
        canAskAgain: true
      });
      var permission = yield mockLocation.requestForegroundPermissionsAsync();
      (0, _globals.expect)(permission.granted).toBe(false);
      (0, _globals.expect)(permission.canAskAgain).toBe(true);
    }));
  });
  (0, _globals.describe)('Data Validation and Type Safety', function () {
    (0, _globals.it)('should maintain type safety for MapPin objects', (0, _asyncToGenerator2.default)(function* () {
      var mockPin = {
        _id: 'typed-pin',
        userId: 'user123',
        petId: 'pet123',
        activity: 'walking',
        message: 'Type-safe message',
        location: {
          type: 'Point',
          coordinates: [-74.0060, 40.7128]
        },
        radiusMeters: 500,
        shareToMap: true,
        active: true,
        likes: [{
          userId: 'liker1',
          likedAt: '2024-01-01T22:00:00Z'
        }, {
          userId: 'liker2',
          likedAt: '2024-01-01T22:30:00Z'
        }],
        createdAt: '2024-01-01T21:00:00Z',
        updatedAt: '2024-01-01T22:00:00Z'
      };
      mockRequest.mockResolvedValue([mockPin]);
      var result = yield (0, _mapActivityService.getNearbyPins)(40.7128, -74.0060);
      (0, _globals.expect)(result[0]._id).toBe('typed-pin');
      (0, _globals.expect)(result[0].location.type).toBe('Point');
      (0, _globals.expect)(Array.isArray(result[0].location.coordinates)).toBe(true);
      (0, _globals.expect)(result[0].location.coordinates).toHaveLength(2);
      (0, _globals.expect)(typeof result[0].radiusMeters).toBe('number');
      (0, _globals.expect)(typeof result[0].shareToMap).toBe('boolean');
      (0, _globals.expect)(Array.isArray(result[0].likes)).toBe(true);
    }));
    (0, _globals.it)('should handle optional fields correctly', (0, _asyncToGenerator2.default)(function* () {
      var pinWithoutOptionals = {
        _id: 'minimal-pin',
        userId: 'user123',
        petId: 'pet123',
        activity: 'minimal',
        location: {
          type: 'Point',
          coordinates: [0, 0]
        },
        radiusMeters: 100,
        shareToMap: false,
        active: true,
        likes: [],
        createdAt: '2024-01-01T23:00:00Z',
        updatedAt: '2024-01-01T23:00:00Z'
      };
      mockRequest.mockResolvedValue([pinWithoutOptionals]);
      var result = yield (0, _mapActivityService.getNearbyPins)(0, 0);
      (0, _globals.expect)(result[0].message).toBeUndefined();
      (0, _globals.expect)(result[0].packId).toBeUndefined();
      (0, _globals.expect)(result[0].packName).toBeUndefined();
      (0, _globals.expect)(result[0].activityDetails).toBeUndefined();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,