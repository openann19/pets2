6c130265bcc5b59757ee8f537b4ae501
"use strict";

_getJestObj().mock('expo-image-picker');
_getJestObj().mock('expo-image-manipulator');
_getJestObj().mock('expo-file-system');
_getJestObj().mock('react-native', function () {
  return {
    Platform: {
      OS: 'ios'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _globals = require("@jest/globals");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _reactNative = require("react-native");
var _uploadHygiene = require("../uploadHygiene");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalConsole = global.console;
global.console = _objectSpread(_objectSpread({}, originalConsole), {}, {
  log: _globals.jest.fn(),
  error: _globals.jest.fn(),
  warn: _globals.jest.fn()
});
var mockImagePicker = ImagePicker;
var mockImageManipulator = ImageManipulator;
var mockFileSystem = FileSystem;
(0, _globals.describe)('UploadHygiene Service', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockImageManipulator.manipulateAsync.mockResolvedValue({
      uri: 'processed-image.jpg',
      width: 1024,
      height: 768,
      base64: undefined
    });
    mockFileSystem.getInfoAsync.mockResolvedValue({
      exists: true,
      isDirectory: false,
      size: 512000,
      uri: 'test-image.jpg',
      modificationTime: Date.now()
    });
    mockImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: 'granted',
      granted: true,
      canAskAgain: true
    });
    mockImagePicker.requestCameraPermissionsAsync.mockResolvedValue({
      status: 'granted',
      granted: true,
      canAskAgain: true
    });
    mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: 'picked-image.jpg',
        width: 2048,
        height: 1536,
        type: 'image',
        fileName: 'test.jpg',
        fileSize: 1024000,
        mimeType: 'image/jpeg',
        exif: {}
      }]
    });
    mockImagePicker.launchCameraAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: 'captured-image.jpg',
        width: 2048,
        height: 1536,
        type: 'image',
        fileName: 'capture.jpg',
        fileSize: 1024000,
        mimeType: 'image/jpeg',
        exif: {}
      }]
    });
  });
  (0, _globals.afterEach)(function () {
    global.console = originalConsole;
  });
  (0, _globals.describe)('MIME Type Validation', function () {
    (0, _globals.it)('should validate JPEG files', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1000,
        uri: 'test.jpg',
        modificationTime: Date.now()
      });
      var result = yield global.validateMimeType('test.jpg');
      (0, _globals.expect)(result.valid).toBe(true);
      (0, _globals.expect)(result.mimeType).toBe('image/jpeg');
    }));
    (0, _globals.it)('should validate PNG files', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1000,
        uri: 'test.png',
        modificationTime: Date.now()
      });
      var result = yield global.validateMimeType('test.png');
      (0, _globals.expect)(result.valid).toBe(true);
      (0, _globals.expect)(result.mimeType).toBe('image/png');
    }));
    (0, _globals.it)('should validate WebP files', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1000,
        uri: 'test.webp',
        modificationTime: Date.now()
      });
      var result = yield global.validateMimeType('test.webp');
      (0, _globals.expect)(result.valid).toBe(true);
      (0, _globals.expect)(result.mimeType).toBe('image/webp');
    }));
    (0, _globals.it)('should reject invalid file extensions', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1000,
        uri: 'test.txt',
        modificationTime: Date.now()
      });
      var result = yield global.validateMimeType('test.txt');
      (0, _globals.expect)(result.valid).toBe(false);
      (0, _globals.expect)(result.mimeType).toBe('unknown');
    }));
    (0, _globals.it)('should handle file system errors', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockRejectedValue(new Error('File not found'));
      var result = yield global.validateMimeType('nonexistent.jpg');
      (0, _globals.expect)(result.valid).toBe(false);
      (0, _globals.expect)(result.mimeType).toBe('unknown');
      (0, _globals.expect)(console.error).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle files without extensions', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1000,
        uri: 'image_without_extension',
        modificationTime: Date.now()
      });
      var result = yield global.validateMimeType('image_without_extension');
      (0, _globals.expect)(result.valid).toBe(false);
      (0, _globals.expect)(result.mimeType).toBe('unknown');
    }));
  });
  (0, _globals.describe)('EXIF Orientation Fixing', function () {
    (0, _globals.it)('should fix image orientation', (0, _asyncToGenerator2.default)(function* () {
      var inputUri = 'input.jpg';
      var outputUri = 'oriented.jpg';
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: outputUri,
        width: 1000,
        height: 800,
        base64: undefined
      });
      var result = yield global.fixOrientation(inputUri);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith(inputUri, [], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
      (0, _globals.expect)(result).toBe(outputUri);
    }));
    (0, _globals.it)('should return original URI on orientation fix failure', (0, _asyncToGenerator2.default)(function* () {
      var inputUri = 'input.jpg';
      mockImageManipulator.manipulateAsync.mockRejectedValue(new Error('Orientation fix failed'));
      var result = yield global.fixOrientation(inputUri);
      (0, _globals.expect)(result).toBe(inputUri);
      (0, _globals.expect)(console.error).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Image Resizing', function () {
    (0, _globals.it)('should resize images larger than max dimension', (0, _asyncToGenerator2.default)(function* () {
      var inputUri = 'large.jpg';
      var maxDimension = 1024;
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'temp.jpg',
        width: 2048,
        height: 1536,
        base64: undefined
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'resized.jpg',
        width: 1024,
        height: 768,
        base64: undefined
      });
      var result = yield global.resizeImage(inputUri, maxDimension);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledTimes(2);
      (0, _globals.expect)(result.width).toBe(1024);
      (0, _globals.expect)(result.height).toBe(768);
    }));
    (0, _globals.it)('should not resize images smaller than max dimension', (0, _asyncToGenerator2.default)(function* () {
      var inputUri = 'small.jpg';
      var maxDimension = 2048;
      var originalResult = {
        uri: 'small.jpg',
        width: 800,
        height: 600,
        base64: undefined
      };
      mockImageManipulator.manipulateAsync.mockResolvedValue(originalResult);
      var result = yield global.resizeImage(inputUri, maxDimension);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledTimes(1);
      (0, _globals.expect)(result).toBe(originalResult);
    }));
    (0, _globals.it)('should handle landscape images correctly', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'temp.jpg',
        width: 3000,
        height: 2000,
        base64: undefined
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'resized.jpg',
        width: 1536,
        height: 1024,
        base64: undefined
      });
      var result = yield global.resizeImage('landscape.jpg', 1536);
      (0, _globals.expect)(result.width).toBe(1536);
      (0, _globals.expect)(result.height).toBe(1024);
    }));
    (0, _globals.it)('should handle portrait images correctly', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'temp.jpg',
        width: 2000,
        height: 3000,
        base64: undefined
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'resized.jpg',
        width: 1024,
        height: 1536,
        base64: undefined
      });
      var result = yield global.resizeImage('portrait.jpg', 1536);
      (0, _globals.expect)(result.width).toBe(1024);
      (0, _globals.expect)(result.height).toBe(1536);
    }));
    (0, _globals.it)('should handle resize errors', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockRejectedValue(new Error('Resize failed'));
      yield (0, _globals.expect)(global.resizeImage('test.jpg', 1024)).rejects.toThrow('Resize failed');
      (0, _globals.expect)(console.error).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Aspect Ratio Cropping', function () {
    (0, _globals.it)('should crop wide images to target aspect ratio', (0, _asyncToGenerator2.default)(function* () {
      var imageUri = 'wide.jpg';
      var aspectRatio = [4, 3];
      var width = 1600;
      var height = 900;
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'cropped.jpg',
        width: 1200,
        height: 900,
        base64: undefined
      });
      var result = yield global.cropToAspectRatio(imageUri, aspectRatio, width, height);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith(imageUri, [{
        crop: {
          originX: 200,
          originY: 0,
          width: 1200,
          height: 900
        }
      }], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
      (0, _globals.expect)(result.uri).toBe('cropped.jpg');
    }));
    (0, _globals.it)('should crop tall images to target aspect ratio', (0, _asyncToGenerator2.default)(function* () {
      var imageUri = 'tall.jpg';
      var aspectRatio = [4, 3];
      var width = 900;
      var height = 1600;
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'cropped.jpg',
        width: 900,
        height: 675,
        base64: undefined
      });
      var result = yield global.cropToAspectRatio(imageUri, aspectRatio, width, height);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith(imageUri, [{
        crop: {
          originX: 0,
          originY: 462.5,
          width: 900,
          height: 675
        }
      }], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
    }));
    (0, _globals.it)('should not crop images that already match aspect ratio', (0, _asyncToGenerator2.default)(function* () {
      var imageUri = 'perfect.jpg';
      var aspectRatio = [4, 3];
      var width = 1600;
      var height = 1200;
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'uncropped.jpg',
        width: 1600,
        height: 1200,
        base64: undefined
      });
      var result = yield global.cropToAspectRatio(imageUri, aspectRatio, width, height);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith(imageUri, [{
        crop: {
          originX: 0,
          originY: 0,
          width: 1600,
          height: 1200
        }
      }], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
    }));
    (0, _globals.it)('should handle crop errors', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockRejectedValue(new Error('Crop failed'));
      yield (0, _globals.expect)(global.cropToAspectRatio('test.jpg', [4, 3], 1000, 800)).rejects.toThrow('Crop failed');
      (0, _globals.expect)(console.error).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Image Compression', function () {
    (0, _globals.it)('should compress images with specified quality', (0, _asyncToGenerator2.default)(function* () {
      var imageUri = 'input.jpg';
      var quality = 0.85;
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'compressed.jpg',
        width: 1024,
        height: 768,
        base64: undefined
      });
      var result = yield global.compressImage(imageUri, quality);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith(imageUri, [], {
        compress: quality,
        format: ImageManipulator.SaveFormat.JPEG
      });
      (0, _globals.expect)(result.uri).toBe('compressed.jpg');
    }));
    (0, _globals.it)('should handle different quality levels', (0, _asyncToGenerator2.default)(function* () {
      var qualities = [0.5, 0.75, 0.9, 1.0];
      for (var quality of qualities) {
        mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
          uri: `compressed-q${quality}.jpg`,
          width: 1024,
          height: 768,
          base64: undefined
        });
        var result = yield global.compressImage('input.jpg', quality);
        (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith('input.jpg', [], _globals.expect.objectContaining({
          compress: quality
        }));
        (0, _globals.expect)(result.uri).toBe(`compressed-q${quality}.jpg`);
      }
    }));
    (0, _globals.it)('should handle compression errors', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockRejectedValue(new Error('Compression failed'));
      yield (0, _globals.expect)(global.compressImage('test.jpg', 0.8)).rejects.toThrow('Compression failed');
      (0, _globals.expect)(console.error).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('File Information', function () {
    (0, _globals.it)('should get file size and existence', (0, _asyncToGenerator2.default)(function* () {
      var uri = 'test.jpg';
      var expectedSize = 512000;
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: expectedSize,
        uri: uri,
        modificationTime: Date.now()
      });
      var result = yield global.getFileInfo(uri);
      (0, _globals.expect)(result.size).toBe(expectedSize);
      (0, _globals.expect)(result.exists).toBe(true);
    }));
    (0, _globals.it)('should handle non-existent files', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: false,
        isDirectory: false,
        uri: 'missing.jpg',
        modificationTime: undefined
      });
      var result = yield global.getFileInfo('missing.jpg');
      (0, _globals.expect)(result.size).toBe(0);
      (0, _globals.expect)(result.exists).toBe(false);
    }));
    (0, _globals.it)('should handle file system errors', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockRejectedValue(new Error('File system error'));
      var result = yield global.getFileInfo('error.jpg');
      (0, _globals.expect)(result.size).toBe(0);
      (0, _globals.expect)(result.exists).toBe(false);
      (0, _globals.expect)(console.error).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Full Upload Hygiene Pipeline', function () {
    (0, _globals.it)('should process image through complete pipeline', (0, _asyncToGenerator2.default)(function* () {
      var inputUri = 'original.jpg';
      var options = {
        maxDimension: 1024,
        quality: 0.85,
        aspectRatio: [4, 3],
        stripExif: true,
        cropToAspect: true
      };
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1000000,
        uri: inputUri,
        modificationTime: Date.now()
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'oriented.jpg',
        width: 2048,
        height: 1536,
        base64: undefined
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'oriented.jpg',
        width: 2048,
        height: 1536,
        base64: undefined
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'resized.jpg',
        width: 1024,
        height: 768,
        base64: undefined
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'cropped.jpg',
        width: 1024,
        height: 768,
        base64: undefined
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'compressed.jpg',
        width: 1024,
        height: 768,
        base64: undefined
      });
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        isDirectory: false,
        size: 256000,
        uri: 'compressed.jpg',
        modificationTime: Date.now()
      });
      var result = yield (0, _uploadHygiene.processImageForUpload)(inputUri, options);
      (0, _globals.expect)(result.uri).toBe('compressed.jpg');
      (0, _globals.expect)(result.width).toBe(1024);
      (0, _globals.expect)(result.height).toBe(768);
      (0, _globals.expect)(result.fileSize).toBe(256000);
      (0, _globals.expect)(result.mimeType).toBe('image/jpeg');
      (0, _globals.expect)(result.metadata.originalWidth).toBe(2048);
      (0, _globals.expect)(result.metadata.originalHeight).toBe(1536);
      (0, _globals.expect)(result.metadata.orientationFixed).toBe(true);
      (0, _globals.expect)(result.metadata.exifStripped).toBe(true);
      (0, _globals.expect)(console.log).toHaveBeenCalledWith('Starting upload hygiene processing...');
      (0, _globals.expect)(console.log).toHaveBeenCalledWith('✓ MIME type validated:', 'image/jpeg');
      (0, _globals.expect)(console.log).toHaveBeenCalledWith('✓ Orientation fixed');
      (0, _globals.expect)(console.log).toHaveBeenCalledWith('Original dimensions: 2048x1536');
      (0, _globals.expect)(console.log).toHaveBeenCalledWith('✓ Resized to: 1024x768');
      (0, _globals.expect)(console.log).toHaveBeenCalledWith('✓ Cropped to 4:3');
      (0, _globals.expect)(console.log).toHaveBeenCalledWith('✓ Compressed with quality: 0.85');
    }));
    (0, _globals.it)('should use default options when not provided', (0, _asyncToGenerator2.default)(function* () {
      var inputUri = 'test.jpg';
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 500000,
        uri: inputUri,
        modificationTime: Date.now()
      });
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'processed.jpg',
        width: 1024,
        height: 768,
        base64: undefined
      });
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        isDirectory: false,
        size: 200000,
        uri: 'processed.jpg',
        modificationTime: Date.now()
      });
      var result = yield (0, _uploadHygiene.processImageForUpload)(inputUri);
      (0, _globals.expect)(result.metadata.exifStripped).toBe(true);
      (0, _globals.expect)(result.mimeType).toBe('image/jpeg');
    }));
    (0, _globals.it)('should skip cropping when disabled', (0, _asyncToGenerator2.default)(function* () {
      var inputUri = 'test.jpg';
      var options = {
        cropToAspect: false,
        maxDimension: 1024
      };
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 500000,
        uri: inputUri,
        modificationTime: Date.now()
      });
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'processed.jpg',
        width: 1024,
        height: 768,
        base64: undefined
      });
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        isDirectory: false,
        size: 200000,
        uri: 'processed.jpg',
        modificationTime: Date.now()
      });
      yield (0, _uploadHygiene.processImageForUpload)(inputUri, options);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledTimes(4);
    }));
    (0, _globals.it)('should handle invalid MIME types', (0, _asyncToGenerator2.default)(function* () {
      var inputUri = 'invalid.txt';
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1000,
        uri: inputUri,
        modificationTime: Date.now()
      });
      yield (0, _globals.expect)((0, _uploadHygiene.processImageForUpload)(inputUri)).rejects.toThrow('Invalid file type: unknown');
    }));
    (0, _globals.it)('should handle processing errors', (0, _asyncToGenerator2.default)(function* () {
      var inputUri = 'error.jpg';
      mockFileSystem.getInfoAsync.mockRejectedValue(new Error('Processing failed'));
      yield (0, _globals.expect)((0, _uploadHygiene.processImageForUpload)(inputUri)).rejects.toThrow('Processing failed');
      (0, _globals.expect)(console.error).toHaveBeenCalledWith('Upload hygiene processing failed:', _globals.expect.any(Error));
    }));
  });
  (0, _globals.describe)('Image Picker Integration', function () {
    (0, _globals.it)('should pick and process image successfully', (0, _asyncToGenerator2.default)(function* () {
      var options = {
        maxDimension: 1024,
        quality: 0.8
      };
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1000000,
        uri: 'picked-image.jpg',
        modificationTime: Date.now()
      });
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'processed.jpg',
        width: 1024,
        height: 768,
        base64: undefined
      });
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        isDirectory: false,
        size: 300000,
        uri: 'processed.jpg',
        modificationTime: Date.now()
      });
      var result = yield (0, _uploadHygiene.pickAndProcessImage)(true, options);
      (0, _globals.expect)(mockImagePicker.requestMediaLibraryPermissionsAsync).toHaveBeenCalled();
      (0, _globals.expect)(mockImagePicker.launchImageLibraryAsync).toHaveBeenCalledWith({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        quality: 1,
        allowsMultipleSelection: false
      });
      (0, _globals.expect)(result).toBeDefined();
      (0, _globals.expect)(result.uri).toBe('processed.jpg');
      (0, _globals.expect)(result.fileSize).toBe(300000);
    }));
    (0, _globals.it)('should handle permission denial', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: 'denied',
        granted: false,
        canAskAgain: true
      });
      yield (0, _globals.expect)((0, _uploadHygiene.pickAndProcessImage)()).rejects.toThrow('Camera roll permissions not granted');
    }));
    (0, _globals.it)('should handle user cancellation', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: true,
        assets: []
      });
      var result = yield (0, _uploadHygiene.pickAndProcessImage)();
      (0, _globals.expect)(result).toBeNull();
    }));
    (0, _globals.it)('should handle picker errors', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.launchImageLibraryAsync.mockRejectedValue(new Error('Picker failed'));
      yield (0, _globals.expect)((0, _uploadHygiene.pickAndProcessImage)()).rejects.toThrow('Picker failed');
      (0, _globals.expect)(console.error).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Camera Capture Integration', function () {
    (0, _globals.it)('should capture and process image successfully', (0, _asyncToGenerator2.default)(function* () {
      var options = {
        maxDimension: 1536,
        quality: 0.9
      };
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1500000,
        uri: 'captured-image.jpg',
        modificationTime: Date.now()
      });
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'processed.jpg',
        width: 1536,
        height: 1152,
        base64: undefined
      });
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        isDirectory: false,
        size: 400000,
        uri: 'processed.jpg',
        modificationTime: Date.now()
      });
      var result = yield (0, _uploadHygiene.captureAndProcessImage)(options);
      (0, _globals.expect)(mockImagePicker.requestCameraPermissionsAsync).toHaveBeenCalled();
      (0, _globals.expect)(mockImagePicker.launchCameraAsync).toHaveBeenCalledWith({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: false,
        quality: 1
      });
      (0, _globals.expect)(result).toBeDefined();
      (0, _globals.expect)(result.uri).toBe('processed.jpg');
      (0, _globals.expect)(result.width).toBe(1536);
      (0, _globals.expect)(result.height).toBe(1152);
    }));
    (0, _globals.it)('should handle camera permission denial', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.requestCameraPermissionsAsync.mockResolvedValue({
        status: 'denied',
        granted: false,
        canAskAgain: false
      });
      yield (0, _globals.expect)((0, _uploadHygiene.captureAndProcessImage)()).rejects.toThrow('Camera permissions not granted');
    }));
    (0, _globals.it)('should handle camera cancellation', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.launchCameraAsync.mockResolvedValue({
        canceled: true,
        assets: []
      });
      var result = yield (0, _uploadHygiene.captureAndProcessImage)();
      (0, _globals.expect)(result).toBeNull();
    }));
  });
  (0, _globals.describe)('Upload Quota Management', function () {
    (0, _globals.it)('should check upload quota successfully', (0, _asyncToGenerator2.default)(function* () {
      var userId = 'user123';
      var result = yield (0, _uploadHygiene.checkUploadQuota)(userId);
      (0, _globals.expect)(result.allowed).toBe(true);
      (0, _globals.expect)(result.remaining).toBe(10);
      (0, _globals.expect)(result.limit).toBe(10);
      (0, _globals.expect)(result.resetAt).toBeInstanceOf(Date);
    }));
    (0, _globals.it)('should handle quota check errors', (0, _asyncToGenerator2.default)(function* () {
      var originalCheckUploadQuota = _uploadHygiene.checkUploadQuota;
      global.checkUploadQuota = _globals.jest.fn().mockRejectedValue(new Error('Quota check failed'));
      yield (0, _globals.expect)(global.checkUploadQuota('user123')).rejects.toThrow('Quota check failed');
      global.checkUploadQuota = originalCheckUploadQuota;
    }));
  });
  (0, _globals.describe)('Retry Logic with Backoff', function () {
    (0, _globals.it)('should succeed on first attempt', (0, _asyncToGenerator2.default)(function* () {
      var uploadFn = _globals.jest.fn().mockResolvedValue('success');
      var maxRetries = 3;
      var backoffMs = 1000;
      var result = yield (0, _uploadHygiene.uploadWithRetry)(uploadFn, maxRetries, backoffMs);
      (0, _globals.expect)(result).toBe('success');
      (0, _globals.expect)(uploadFn).toHaveBeenCalledTimes(1);
    }));
    (0, _globals.it)('should retry on failure and succeed', (0, _asyncToGenerator2.default)(function* () {
      var uploadFn = _globals.jest.fn().mockRejectedValueOnce(new Error('Attempt 1 failed')).mockRejectedValueOnce(new Error('Attempt 2 failed')).mockResolvedValueOnce('success');
      var maxRetries = 3;
      var backoffMs = 100;
      _globals.jest.useFakeTimers();
      var uploadPromise = (0, _uploadHygiene.uploadWithRetry)(uploadFn, maxRetries, backoffMs);
      _globals.jest.advanceTimersByTime(100);
      _globals.jest.advanceTimersByTime(200);
      var result = yield uploadPromise;
      (0, _globals.expect)(result).toBe('success');
      (0, _globals.expect)(uploadFn).toHaveBeenCalledTimes(3);
      _globals.jest.useRealTimers();
    }));
    (0, _globals.it)('should fail after max retries', (0, _asyncToGenerator2.default)(function* () {
      var uploadFn = _globals.jest.fn().mockRejectedValue(new Error('Persistent failure'));
      var maxRetries = 2;
      var backoffMs = 50;
      _globals.jest.useFakeTimers();
      var uploadPromise = (0, _uploadHygiene.uploadWithRetry)(uploadFn, maxRetries, backoffMs);
      _globals.jest.advanceTimersByTime(50);
      yield (0, _globals.expect)(uploadPromise).rejects.toThrow('Persistent failure');
      (0, _globals.expect)(uploadFn).toHaveBeenCalledTimes(2);
      _globals.jest.useRealTimers();
    }));
    (0, _globals.it)('should use progressive backoff delays', (0, _asyncToGenerator2.default)(function* () {
      var uploadFn = _globals.jest.fn().mockRejectedValue(new Error('Failure'));
      var maxRetries = 3;
      var backoffMs = 100;
      _globals.jest.useFakeTimers();
      var uploadPromise = (0, _uploadHygiene.uploadWithRetry)(uploadFn, maxRetries, backoffMs);
      _globals.jest.advanceTimersByTime(100 + 200);
      yield (0, _globals.expect)(uploadPromise).rejects.toThrow('Failure');
      (0, _globals.expect)(uploadFn).toHaveBeenCalledTimes(3);
      _globals.jest.useRealTimers();
    }));
  });
  (0, _globals.describe)('Edge Cases and Error Handling', function () {
    (0, _globals.it)('should handle very large images', (0, _asyncToGenerator2.default)(function* () {
      var largeUri = 'huge-image.jpg';
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 10000000,
        uri: largeUri,
        modificationTime: Date.now()
      });
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'processed.jpg',
        width: 2048,
        height: 1536,
        base64: undefined
      });
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        isDirectory: false,
        size: 500000,
        uri: 'processed.jpg',
        modificationTime: Date.now()
      });
      var result = yield (0, _uploadHygiene.processImageForUpload)(largeUri, {
        maxDimension: 2048
      });
      (0, _globals.expect)(result.fileSize).toBe(500000);
      (0, _globals.expect)(result.width).toBeLessThanOrEqual(2048);
      (0, _globals.expect)(result.height).toBeLessThanOrEqual(2048);
    }));
    (0, _globals.it)('should handle very small images', (0, _asyncToGenerator2.default)(function* () {
      var smallUri = 'tiny-image.jpg';
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1000,
        uri: smallUri,
        modificationTime: Date.now()
      });
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'processed.jpg',
        width: 100,
        height: 75,
        base64: undefined
      });
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        isDirectory: false,
        size: 800,
        uri: 'processed.jpg',
        modificationTime: Date.now()
      });
      var result = yield (0, _uploadHygiene.processImageForUpload)(smallUri, {
        maxDimension: 2048
      });
      (0, _globals.expect)(result.width).toBe(100);
      (0, _globals.expect)(result.height).toBe(75);
      (0, _globals.expect)(result.fileSize).toBe(800);
    }));
    (0, _globals.it)('should handle square images', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'oriented.jpg',
        width: 1000,
        height: 1000,
        base64: undefined
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'oriented.jpg',
        width: 1000,
        height: 1000,
        base64: undefined
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'resized.jpg',
        width: 1000,
        height: 1000,
        base64: undefined
      });
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'cropped.jpg',
        width: 1000,
        height: 750,
        base64: undefined
      });
      var result = yield global.cropToAspectRatio('square.jpg', [4, 3], 1000, 1000);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith('square.jpg', [{
        crop: {
          originX: 0,
          originY: 125,
          width: 1000,
          height: 750
        }
      }], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
    }));
    (0, _globals.it)('should handle extreme aspect ratios', (0, _asyncToGenerator2.default)(function* () {
      var result1 = yield global.cropToAspectRatio('wide.jpg', [1, 1], 2000, 1000);
      var result2 = yield global.cropToAspectRatio('tall.jpg', [1, 1], 1000, 2000);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledTimes(2);
    }));
    (0, _globals.it)('should handle zero dimensions gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'processed.jpg',
        width: 0,
        height: 0,
        base64: undefined
      });
      var result = yield global.resizeImage('zero.jpg', 1024);
      (0, _globals.expect)(result.width).toBe(0);
      (0, _globals.expect)(result.height).toBe(0);
    }));
    (0, _globals.it)('should handle negative quality values', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'compressed.jpg',
        width: 1024,
        height: 768,
        base64: undefined
      });
      var result = yield global.compressImage('test.jpg', -0.5);
      (0, _globals.expect)(result.uri).toBe('compressed.jpg');
    }));
    (0, _globals.it)('should handle concurrent processing operations', (0, _asyncToGenerator2.default)(function* () {
      var uris = ['image1.jpg', 'image2.jpg', 'image3.jpg'];
      uris.forEach(function () {
        mockFileSystem.getInfoAsync.mockResolvedValueOnce({
          exists: true,
          isDirectory: false,
          size: 500000,
          uri: 'test.jpg',
          modificationTime: Date.now()
        });
        mockImageManipulator.manipulateAsync.mockResolvedValue({
          uri: 'processed.jpg',
          width: 1024,
          height: 768,
          base64: undefined
        });
        mockFileSystem.getInfoAsync.mockResolvedValueOnce({
          exists: true,
          isDirectory: false,
          size: 200000,
          uri: 'processed.jpg',
          modificationTime: Date.now()
        });
      });
      var promises = uris.map(function (uri) {
        return (0, _uploadHygiene.processImageForUpload)(uri);
      });
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toHaveLength(3);
      results.forEach(function (result) {
        (0, _globals.expect)(result.width).toBe(1024);
        (0, _globals.expect)(result.height).toBe(768);
      });
    }));
    (0, _globals.it)('should handle malformed image picker results', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: []
      });
      var result = yield (0, _uploadHygiene.pickAndProcessImage)();
      (0, _globals.expect)(result).toBeNull();
    }));
    (0, _globals.it)('should handle image picker results with missing URI', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: '',
          width: 1000,
          height: 800,
          type: 'image',
          fileName: 'test.jpg'
        }]
      });
      yield (0, _globals.expect)((0, _uploadHygiene.pickAndProcessImage)()).rejects.toThrow();
    }));
    (0, _globals.it)('should handle platform differences', function () {
      var originalOS = _reactNative.Platform.OS;
      _reactNative.Platform.OS = 'android';
      (0, _globals.expect)(_reactNative.Platform.OS).toBe('android');
      _reactNative.Platform.OS = 'ios';
      (0, _globals.expect)(_reactNative.Platform.OS).toBe('ios');
      _reactNative.Platform.OS = originalOS;
    });
    (0, _globals.it)('should handle memory pressure during processing', (0, _asyncToGenerator2.default)(function* () {
      var callCount = 0;
      mockImageManipulator.manipulateAsync.mockImplementation(function () {
        callCount++;
        if (callCount > 2) {
          throw new Error('Out of memory');
        }
        return Promise.resolve({
          uri: 'processed.jpg',
          width: 1024,
          height: 768,
          base64: undefined
        });
      });
      yield (0, _globals.expect)((0, _uploadHygiene.processImageForUpload)('memory-test.jpg')).rejects.toThrow('Out of memory');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,