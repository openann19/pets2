2d2c17c952e38fde121b4f3ac6088f09
"use strict";

_getJestObj().mock("../api");
_getJestObj().mock('expo-file-system', function () {
  return {
    uploadAsync: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _photoUpload = require("../photoUpload");
var _api = require("../api");
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApi = _api.api;
var mockFileSystem = FileSystem;
(0, _globals.describe)('Photo Upload Service', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('Happy Path', function () {
    (0, _globals.it)('should upload photo successfully', (0, _asyncToGenerator2.default)(function* () {
      var presignData = {
        url: 'https://s3.amazonaws.com/bucket/key',
        key: 'photos/user123/photo456.jpg'
      };
      mockApi.post.mockResolvedValueOnce({
        data: presignData
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(result).toBe(presignData.key);
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/uploads/photos/presign', {
        contentType: 'image/jpeg'
      });
      (0, _globals.expect)(mockFileSystem.uploadAsync).toHaveBeenCalledWith(presignData.url, 'file://photo.jpg', {
        httpMethod: 'PUT',
        headers: {
          'Content-Type': 'image/jpeg'
        },
        uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
      });
    }));
    (0, _globals.it)('should handle different content types', (0, _asyncToGenerator2.default)(function* () {
      var _mockFileSystem$uploa, _mockFileSystem$uploa2, _mockFileSystem$uploa3;
      var presignData = {
        url: 'https://s3.amazonaws.com/bucket/key',
        key: 'photos/user123/video.mp4'
      };
      mockApi.post.mockResolvedValueOnce({
        data: presignData
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)('file://video.mp4', 'video/mp4');
      (0, _globals.expect)(result).toBe(presignData.key);
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/uploads/photos/presign', {
        contentType: 'video/mp4'
      });
      (0, _globals.expect)((_mockFileSystem$uploa = mockFileSystem.uploadAsync.mock.calls[0]) == null ? void 0 : (_mockFileSystem$uploa2 = _mockFileSystem$uploa[2]) == null ? void 0 : (_mockFileSystem$uploa3 = _mockFileSystem$uploa2.headers) == null ? void 0 : _mockFileSystem$uploa3['Content-Type']).toBe('video/mp4');
    }));
    (0, _globals.it)('should handle PNG images', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.png'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)('file://photo.png', 'image/png');
      (0, _globals.expect)(result).toBe('photos/user123/photo.png');
    }));
    (0, _globals.it)('should handle JPEG images', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(result).toBe('photos/user123/photo.jpg');
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle presign API errors', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockRejectedValueOnce(new Error('Presign failed'));
      yield (0, _globals.expect)((0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg')).rejects.toThrow('Presign failed');
      (0, _globals.expect)(mockFileSystem.uploadAsync).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle upload errors', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockRejectedValueOnce(new Error('Upload failed'));
      yield (0, _globals.expect)((0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg')).rejects.toThrow('Upload failed');
    }));
    (0, _globals.it)('should handle S3 upload failures', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 403,
        headers: {},
        body: ''
      });
      yield (0, _globals.expect)((0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg')).rejects.toThrow();
    }));
    (0, _globals.it)('should handle network timeouts', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockImplementation(function () {
        return new Promise(function (_, reject) {
          return setTimeout(function () {
            return reject(new Error('Timeout'));
          }, 1);
        });
      });
      yield (0, _globals.expect)((0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg')).rejects.toThrow('Timeout');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty file URI', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      yield (0, _photoUpload.uploadPhoto)('', 'image/jpeg');
      (0, _globals.expect)(mockFileSystem.uploadAsync).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle very long file URIs', (0, _asyncToGenerator2.default)(function* () {
      var longUri = `file://${'x'.repeat(10000)}.jpg`;
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/long.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)(longUri, 'image/jpeg');
      (0, _globals.expect)(result).toBe('photos/user123/long.jpg');
    }));
    (0, _globals.it)('should handle special characters in content type', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/svg+xml');
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/uploads/photos/presign', {
        contentType: 'image/svg+xml'
      });
    }));
    (0, _globals.it)('should handle different file URIs', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var uris = ['content://photo.jpg', 'file:///data/user/0/photo.jpg', 'assets-library://photo.jpg'];
      for (var uri of uris) {
        yield (0, _photoUpload.uploadPhoto)(uri, 'image/jpeg');
      }
      (0, _globals.expect)(mockFileSystem.uploadAsync).toHaveBeenCalledTimes(3);
    }));
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should integrate with API service', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/uploads/photos/presign', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should integrate with FileSystem', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(mockFileSystem.uploadAsync).toHaveBeenCalledWith('https://s3.amazonaws.com/bucket/key', 'file://photo.jpg', _globals.expect.objectContaining({
        httpMethod: 'PUT',
        uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
      }));
    }));
  });
  (0, _globals.describe)('Type Safety', function () {
    (0, _globals.it)('should maintain type safety for return value', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      var result = yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(typeof result).toBe('string');
      (0, _globals.expect)(result).toContain('photos/');
    }));
    (0, _globals.it)('should handle all required parameters', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'https://s3.amazonaws.com/bucket/key',
          key: 'photos/user123/photo.jpg'
        }
      });
      mockFileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        headers: {},
        body: ''
      });
      yield (0, _photoUpload.uploadPhoto)('file://photo.jpg', 'image/jpeg');
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/uploads/photos/presign', {
        contentType: _globals.expect.any(String)
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1cGxvYWRBc3luYyIsImplc3QiLCJmbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX2dsb2JhbHMiLCJfcGhvdG9VcGxvYWQiLCJfYXBpIiwiRmlsZVN5c3RlbSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVxdWlyZSIsIm1vY2tBcGkiLCJhcGkiLCJtb2NrRmlsZVN5c3RlbSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsInByZXNpZ25EYXRhIiwidXJsIiwia2V5IiwicG9zdCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsImRhdGEiLCJzdGF0dXMiLCJoZWFkZXJzIiwiYm9keSIsInJlc3VsdCIsInVwbG9hZFBob3RvIiwiZXhwZWN0IiwidG9CZSIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiY29udGVudFR5cGUiLCJodHRwTWV0aG9kIiwidXBsb2FkVHlwZSIsIkZpbGVTeXN0ZW1VcGxvYWRUeXBlIiwiQklOQVJZX0NPTlRFTlQiLCJfbW9ja0ZpbGVTeXN0ZW0kdXBsb2EiLCJfbW9ja0ZpbGVTeXN0ZW0kdXBsb2EyIiwiX21vY2tGaWxlU3lzdGVtJHVwbG9hMyIsImNhbGxzIiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwiRXJyb3IiLCJyZWplY3RzIiwidG9UaHJvdyIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJQcm9taXNlIiwiXyIsInJlamVjdCIsInNldFRpbWVvdXQiLCJsb25nVXJpIiwicmVwZWF0IiwidXJpcyIsInVyaSIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsImFueSIsIm9iamVjdENvbnRhaW5pbmciLCJ0b0NvbnRhaW4iLCJTdHJpbmciXSwic291cmNlcyI6WyJwaG90b1VwbG9hZC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29tcHJlaGVuc2l2ZSB0ZXN0cyBmb3IgUGhvdG8gVXBsb2FkIFNlcnZpY2VcbiAqIFxuICogQ292ZXJhZ2U6XG4gKiAtIFBob3RvIHVwbG9hZCB0byBTMyB2aWEgcHJlc2lnblxuICogLSBGaWxlU3lzdGVtIGludGVncmF0aW9uXG4gKiAtIEVycm9yIGhhbmRsaW5nXG4gKiAtIFR5cGUgc2FmZXR5XG4gKi9cblxuaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QsIGplc3QsIGJlZm9yZUVhY2ggfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCB7IHVwbG9hZFBob3RvIH0gZnJvbSAnLi4vcGhvdG9VcGxvYWQnO1xuaW1wb3J0IHsgYXBpIH0gZnJvbSAnLi4vYXBpJztcbmltcG9ydCAqIGFzIEZpbGVTeXN0ZW0gZnJvbSAnZXhwby1maWxlLXN5c3RlbSc7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJy4uL2FwaScpO1xuamVzdC5tb2NrKCdleHBvLWZpbGUtc3lzdGVtJywgKCkgPT4gKHtcbiAgdXBsb2FkQXN5bmM6IGplc3QuZm4oKSxcbn0pKTtcblxuY29uc3QgbW9ja0FwaSA9IGFwaSBhcyBqZXN0Lk1vY2tlZDx0eXBlb2YgYXBpPjtcbmNvbnN0IG1vY2tGaWxlU3lzdGVtID0gRmlsZVN5c3RlbSBhcyBqZXN0Lk1vY2tlZDx0eXBlb2YgRmlsZVN5c3RlbT47XG5cbmRlc2NyaWJlKCdQaG90byBVcGxvYWQgU2VydmljZScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdIYXBweSBQYXRoJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdXBsb2FkIHBob3RvIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHByZXNpZ25EYXRhID0ge1xuICAgICAgICB1cmw6ICdodHRwczovL3MzLmFtYXpvbmF3cy5jb20vYnVja2V0L2tleScsXG4gICAgICAgIGtleTogJ3Bob3Rvcy91c2VyMTIzL3Bob3RvNDU2LmpwZycsXG4gICAgICB9O1xuXG4gICAgICBtb2NrQXBpLnBvc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgZGF0YTogcHJlc2lnbkRhdGEgfSk7XG4gICAgICBtb2NrRmlsZVN5c3RlbS51cGxvYWRBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgIGJvZHk6ICcnLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1cGxvYWRQaG90bygnZmlsZTovL3Bob3RvLmpwZycsICdpbWFnZS9qcGVnJyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUocHJlc2lnbkRhdGEua2V5KTtcbiAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvdXBsb2Fkcy9waG90b3MvcHJlc2lnbicsIHtcbiAgICAgICAgY29udGVudFR5cGU6ICdpbWFnZS9qcGVnJyxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KG1vY2tGaWxlU3lzdGVtLnVwbG9hZEFzeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgcHJlc2lnbkRhdGEudXJsLFxuICAgICAgICAnZmlsZTovL3Bob3RvLmpwZycsXG4gICAgICAgIHtcbiAgICAgICAgICBodHRwTWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnaW1hZ2UvanBlZycgfSxcbiAgICAgICAgICB1cGxvYWRUeXBlOiBGaWxlU3lzdGVtLkZpbGVTeXN0ZW1VcGxvYWRUeXBlLkJJTkFSWV9DT05URU5ULFxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZGlmZmVyZW50IGNvbnRlbnQgdHlwZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwcmVzaWduRGF0YSA9IHtcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2J1Y2tldC9rZXknLFxuICAgICAgICBrZXk6ICdwaG90b3MvdXNlcjEyMy92aWRlby5tcDQnLFxuICAgICAgfTtcblxuICAgICAgbW9ja0FwaS5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IGRhdGE6IHByZXNpZ25EYXRhIH0pO1xuICAgICAgbW9ja0ZpbGVTeXN0ZW0udXBsb2FkQXN5bmMubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICBib2R5OiAnJyxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXBsb2FkUGhvdG8oJ2ZpbGU6Ly92aWRlby5tcDQnLCAndmlkZW8vbXA0Jyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUocHJlc2lnbkRhdGEua2V5KTtcbiAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvdXBsb2Fkcy9waG90b3MvcHJlc2lnbicsIHtcbiAgICAgICAgY29udGVudFR5cGU6ICd2aWRlby9tcDQnLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QobW9ja0ZpbGVTeXN0ZW0udXBsb2FkQXN5bmMubW9jay5jYWxsc1swXT8uWzJdPy5oZWFkZXJzPy5bJ0NvbnRlbnQtVHlwZSddKS50b0JlKFxuICAgICAgICAndmlkZW8vbXA0J1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIFBORyBpbWFnZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXBpLnBvc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9idWNrZXQva2V5JyxcbiAgICAgICAgICBrZXk6ICdwaG90b3MvdXNlcjEyMy9waG90by5wbmcnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBtb2NrRmlsZVN5c3RlbS51cGxvYWRBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgIGJvZHk6ICcnLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1cGxvYWRQaG90bygnZmlsZTovL3Bob3RvLnBuZycsICdpbWFnZS9wbmcnKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgncGhvdG9zL3VzZXIxMjMvcGhvdG8ucG5nJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBKUEVHIGltYWdlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBcGkucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2J1Y2tldC9rZXknLFxuICAgICAgICAgIGtleTogJ3Bob3Rvcy91c2VyMTIzL3Bob3RvLmpwZycsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIG1vY2tGaWxlU3lzdGVtLnVwbG9hZEFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgYm9keTogJycsXG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVwbG9hZFBob3RvKCdmaWxlOi8vcGhvdG8uanBnJywgJ2ltYWdlL2pwZWcnKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgncGhvdG9zL3VzZXIxMjMvcGhvdG8uanBnJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFcnJvciBIYW5kbGluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBwcmVzaWduIEFQSSBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXBpLnBvc3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignUHJlc2lnbiBmYWlsZWQnKSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh1cGxvYWRQaG90bygnZmlsZTovL3Bob3RvLmpwZycsICdpbWFnZS9qcGVnJykpLnJlamVjdHMudG9UaHJvdygnUHJlc2lnbiBmYWlsZWQnKTtcbiAgICAgIGV4cGVjdChtb2NrRmlsZVN5c3RlbS51cGxvYWRBc3luYykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHVwbG9hZCBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXBpLnBvc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9idWNrZXQva2V5JyxcbiAgICAgICAgICBrZXk6ICdwaG90b3MvdXNlcjEyMy9waG90by5qcGcnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBtb2NrRmlsZVN5c3RlbS51cGxvYWRBc3luYy5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdVcGxvYWQgZmFpbGVkJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QodXBsb2FkUGhvdG8oJ2ZpbGU6Ly9waG90by5qcGcnLCAnaW1hZ2UvanBlZycpKS5yZWplY3RzLnRvVGhyb3coJ1VwbG9hZCBmYWlsZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIFMzIHVwbG9hZCBmYWlsdXJlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBcGkucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2J1Y2tldC9rZXknLFxuICAgICAgICAgIGtleTogJ3Bob3Rvcy91c2VyMTIzL3Bob3RvLmpwZycsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIG1vY2tGaWxlU3lzdGVtLnVwbG9hZEFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgYm9keTogJycsXG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh1cGxvYWRQaG90bygnZmlsZTovL3Bob3RvLmpwZycsICdpbWFnZS9qcGVnJykpLnJlamVjdHMudG9UaHJvdygpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbmV0d29yayB0aW1lb3V0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBcGkucG9zdC5tb2NrSW1wbGVtZW50YXRpb24oXG4gICAgICAgICgpID0+IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignVGltZW91dCcpKSwgMSkpXG4gICAgICApO1xuXG4gICAgICBhd2FpdCBleHBlY3QodXBsb2FkUGhvdG8oJ2ZpbGU6Ly9waG90by5qcGcnLCAnaW1hZ2UvanBlZycpKS5yZWplY3RzLnRvVGhyb3coJ1RpbWVvdXQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0VkZ2UgQ2FzZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgZmlsZSBVUkknLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXBpLnBvc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9idWNrZXQva2V5JyxcbiAgICAgICAgICBrZXk6ICdwaG90b3MvdXNlcjEyMy9waG90by5qcGcnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBtb2NrRmlsZVN5c3RlbS51cGxvYWRBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgIGJvZHk6ICcnLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBhd2FpdCB1cGxvYWRQaG90bygnJywgJ2ltYWdlL2pwZWcnKTtcblxuICAgICAgZXhwZWN0KG1vY2tGaWxlU3lzdGVtLnVwbG9hZEFzeW5jKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB2ZXJ5IGxvbmcgZmlsZSBVUklzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbG9uZ1VyaSA9IGBmaWxlOi8vJHsneCcucmVwZWF0KDEwMDAwKX0uanBnYDtcbiAgICAgIFxuICAgICAgbW9ja0FwaS5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB1cmw6ICdodHRwczovL3MzLmFtYXpvbmF3cy5jb20vYnVja2V0L2tleScsXG4gICAgICAgICAga2V5OiAncGhvdG9zL3VzZXIxMjMvbG9uZy5qcGcnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBtb2NrRmlsZVN5c3RlbS51cGxvYWRBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgIGJvZHk6ICcnLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1cGxvYWRQaG90byhsb25nVXJpLCAnaW1hZ2UvanBlZycpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKCdwaG90b3MvdXNlcjEyMy9sb25nLmpwZycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIGNvbnRlbnQgdHlwZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBcGkucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2J1Y2tldC9rZXknLFxuICAgICAgICAgIGtleTogJ3Bob3Rvcy91c2VyMTIzL3Bob3RvLmpwZycsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIG1vY2tGaWxlU3lzdGVtLnVwbG9hZEFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgYm9keTogJycsXG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIGF3YWl0IHVwbG9hZFBob3RvKCdmaWxlOi8vcGhvdG8uanBnJywgJ2ltYWdlL3N2Zyt4bWwnKTtcblxuICAgICAgZXhwZWN0KG1vY2tBcGkucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy91cGxvYWRzL3Bob3Rvcy9wcmVzaWduJywge1xuICAgICAgICBjb250ZW50VHlwZTogJ2ltYWdlL3N2Zyt4bWwnLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBkaWZmZXJlbnQgZmlsZSBVUklzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0FwaS5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB1cmw6ICdodHRwczovL3MzLmFtYXpvbmF3cy5jb20vYnVja2V0L2tleScsXG4gICAgICAgICAga2V5OiAncGhvdG9zL3VzZXIxMjMvcGhvdG8uanBnJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgbW9ja0ZpbGVTeXN0ZW0udXBsb2FkQXN5bmMubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICBib2R5OiAnJyxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgY29uc3QgdXJpcyA9IFtcbiAgICAgICAgJ2NvbnRlbnQ6Ly9waG90by5qcGcnLFxuICAgICAgICAnZmlsZTovLy9kYXRhL3VzZXIvMC9waG90by5qcGcnLFxuICAgICAgICAnYXNzZXRzLWxpYnJhcnk6Ly9waG90by5qcGcnLFxuICAgICAgXTtcblxuICAgICAgZm9yIChjb25zdCB1cmkgb2YgdXJpcykge1xuICAgICAgICBhd2FpdCB1cGxvYWRQaG90byh1cmksICdpbWFnZS9qcGVnJyk7XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChtb2NrRmlsZVN5c3RlbS51cGxvYWRBc3luYykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDMpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSW50ZWdyYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBpbnRlZ3JhdGUgd2l0aCBBUEkgc2VydmljZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBcGkucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2J1Y2tldC9rZXknLFxuICAgICAgICAgIGtleTogJ3Bob3Rvcy91c2VyMTIzL3Bob3RvLmpwZycsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIG1vY2tGaWxlU3lzdGVtLnVwbG9hZEFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgYm9keTogJycsXG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIGF3YWl0IHVwbG9hZFBob3RvKCdmaWxlOi8vcGhvdG8uanBnJywgJ2ltYWdlL2pwZWcnKTtcblxuICAgICAgZXhwZWN0KG1vY2tBcGkucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICcvdXBsb2Fkcy9waG90b3MvcHJlc2lnbicsXG4gICAgICAgIGV4cGVjdC5hbnkoT2JqZWN0KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaW50ZWdyYXRlIHdpdGggRmlsZVN5c3RlbScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBcGkucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2J1Y2tldC9rZXknLFxuICAgICAgICAgIGtleTogJ3Bob3Rvcy91c2VyMTIzL3Bob3RvLmpwZycsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIG1vY2tGaWxlU3lzdGVtLnVwbG9hZEFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgYm9keTogJycsXG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIGF3YWl0IHVwbG9hZFBob3RvKCdmaWxlOi8vcGhvdG8uanBnJywgJ2ltYWdlL2pwZWcnKTtcblxuICAgICAgZXhwZWN0KG1vY2tGaWxlU3lzdGVtLnVwbG9hZEFzeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ2h0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9idWNrZXQva2V5JyxcbiAgICAgICAgJ2ZpbGU6Ly9waG90by5qcGcnLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgaHR0cE1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgdXBsb2FkVHlwZTogRmlsZVN5c3RlbS5GaWxlU3lzdGVtVXBsb2FkVHlwZS5CSU5BUllfQ09OVEVOVCxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdUeXBlIFNhZmV0eScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIG1haW50YWluIHR5cGUgc2FmZXR5IGZvciByZXR1cm4gdmFsdWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXBpLnBvc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9idWNrZXQva2V5JyxcbiAgICAgICAgICBrZXk6ICdwaG90b3MvdXNlcjEyMy9waG90by5qcGcnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBtb2NrRmlsZVN5c3RlbS51cGxvYWRBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgIGJvZHk6ICcnLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1cGxvYWRQaG90bygnZmlsZTovL3Bob3RvLmpwZycsICdpbWFnZS9qcGVnJyk7XG5cbiAgICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0KS50b0JlKCdzdHJpbmcnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbigncGhvdG9zLycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYWxsIHJlcXVpcmVkIHBhcmFtZXRlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXBpLnBvc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9idWNrZXQva2V5JyxcbiAgICAgICAgICBrZXk6ICdwaG90b3MvdXNlcjEyMy9waG90by5qcGcnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBtb2NrRmlsZVN5c3RlbS51cGxvYWRBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgIGJvZHk6ICcnLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBhd2FpdCB1cGxvYWRQaG90bygnZmlsZTovL3Bob3RvLmpwZycsICdpbWFnZS9qcGVnJyk7XG5cbiAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnL3VwbG9hZHMvcGhvdG9zL3ByZXNpZ24nLFxuICAgICAgICB7IGNvbnRlbnRUeXBlOiBleHBlY3QuYW55KFN0cmluZykgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFnQkFBLFdBQUEsR0FBS0MsSUFBSSxTQUFTLENBQUM7QUFDbkJELFdBQUEsR0FBS0MsSUFBSSxDQUFDLGtCQUFrQixFQUFFO0VBQUEsT0FBTztJQUNuQ0MsV0FBVyxFQUFFQyxhQUFJLENBQUNDLEVBQUUsQ0FBQztFQUN2QixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFUSixJQUFBRSxRQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxJQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxVQUFBLEdBQUFDLHVCQUFBLENBQUFOLE9BQUE7QUFBK0MsU0FBQU0sd0JBQUFDLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFILHVCQUFBLFlBQUFBLHdCQUFBQyxDQUFBLEVBQUFDLENBQUEsU0FB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