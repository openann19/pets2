f64b262fa3d40f42ff9b010dca738aa0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.offlineService = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _core = require("@pawfectmatch/core");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _api = require("./api");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var OfflineService = function () {
  function OfflineService() {
    (0, _classCallCheck2.default)(this, OfflineService);
    this.isOnline = true;
    this.isSyncing = false;
    this.syncListeners = [];
    this.offlineData = {
      pets: [],
      user: null,
      matches: [],
      messages: [],
      lastSync: new Date().toISOString(),
      pendingActions: []
    };
    void this.initializeOfflineService();
  }
  return (0, _createClass2.default)(OfflineService, [{
    key: "initializeOfflineService",
    value: (function () {
      var _initializeOfflineService = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield this.loadOfflineData();
          this.setupNetworkMonitoring();
          this.startPeriodicSync();
          _core.logger.info("Offline service initialized successfully");
        } catch (error) {
          _core.logger.error("Failed to initialize offline service", {
            error: String(error)
          });
        }
      });
      function initializeOfflineService() {
        return _initializeOfflineService.apply(this, arguments);
      }
      return initializeOfflineService;
    }())
  }, {
    key: "setupNetworkMonitoring",
    value: function setupNetworkMonitoring() {
      var _this = this;
      this.netInfoUnsubscribe = _netinfo.default.addEventListener(function (state) {
        var wasOffline = !_this.isOnline;
        _this.isOnline = state.isConnected === true;
        if (wasOffline && _this.isOnline) {
          void _this.triggerSync();
        }
        _this.notifyListeners();
      });
    }
  }, {
    key: "startPeriodicSync",
    value: function startPeriodicSync() {
      var _this2 = this;
      this.syncInterval = setInterval(function () {
        if (_this2.isOnline && !_this2.isSyncing) {
          void _this2.triggerSync();
        }
      }, 30000);
    }
  }, {
    key: "loadOfflineData",
    value: (function () {
      var _loadOfflineData = (0, _asyncToGenerator2.default)(function* () {
        try {
          var storedData = yield _asyncStorage.default.getItem("offline_data");
          if (storedData !== null && storedData !== "") {
            var parsed = JSON.parse(storedData);
            if (typeof parsed === "object" && parsed !== null) {
              this.offlineData = parsed;
            }
          }
        } catch (error) {
          _core.logger.error("Failed to load offline data", {
            error: String(error)
          });
        }
      });
      function loadOfflineData() {
        return _loadOfflineData.apply(this, arguments);
      }
      return loadOfflineData;
    }())
  }, {
    key: "saveOfflineData",
    value: (function () {
      var _saveOfflineData = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield _asyncStorage.default.setItem("offline_data", JSON.stringify(this.offlineData));
        } catch (error) {
          _core.logger.error("Failed to save offline data", {
            error: String(error)
          });
        }
      });
      function saveOfflineData() {
        return _saveOfflineData.apply(this, arguments);
      }
      return saveOfflineData;
    }())
  }, {
    key: "triggerSync",
    value: (function () {
      var _triggerSync = (0, _asyncToGenerator2.default)(function* () {
        if (this.isSyncing || !this.isOnline) {
          return;
        }
        this.isSyncing = true;
        this.notifyListeners();
        try {
          yield this.syncPendingActions();
          this.syncFromServer();
          this.offlineData.lastSync = new Date().toISOString();
          yield this.saveOfflineData();
          _core.logger.info("Sync completed successfully");
        } catch (error) {
          _core.logger.error("Sync failed", {
            error: String(error)
          });
        } finally {
          this.isSyncing = false;
          this.notifyListeners();
        }
      });
      function triggerSync() {
        return _triggerSync.apply(this, arguments);
      }
      return triggerSync;
    }())
  }, {
    key: "syncPendingActions",
    value: (function () {
      var _syncPendingActions = (0, _asyncToGenerator2.default)(function* () {
        var _this3 = this;
        var actionsToSync = (0, _toConsumableArray2.default)(this.offlineData.pendingActions);
        var _loop = function* _loop(action) {
          try {
            yield _this3.executePendingAction(action);
            _this3.offlineData.pendingActions = _this3.offlineData.pendingActions.filter(function (a) {
              return a.id !== action.id;
            });
          } catch (error) {
            _core.logger.error("Failed to sync action", {
              actionId: action.id,
              error: String(error)
            });
            action.retryCount++;
            if (action.retryCount >= 3) {
              _this3.offlineData.pendingActions = _this3.offlineData.pendingActions.filter(function (a) {
                return a.id !== action.id;
              });
            }
          }
        };
        for (var action of actionsToSync) {
          yield* _loop(action);
        }
        yield this.saveOfflineData();
      });
      function syncPendingActions() {
        return _syncPendingActions.apply(this, arguments);
      }
      return syncPendingActions;
    }())
  }, {
    key: "executePendingAction",
    value: function executePendingAction(_action) {
      switch (_action.type) {
        case "swipe":
          break;
        case "message":
          break;
        case "profile_update":
          break;
        case "match_action":
          break;
        default:
          throw new Error(`Unknown action type: ${String(_action.type)}`);
      }
    }
  }, {
    key: "syncFromServer",
    value: function syncFromServer() {
      try {} catch (error) {
        _core.logger.error("Failed to sync from server", {
          error: String(error)
        });
        throw error;
      }
    }
  }, {
    key: "addPendingAction",
    value: function addPendingAction(type, data) {
      var action = {
        id: `${type}_${String(Date.now())}_${String(Math.random())}`,
        type: type,
        data: data,
        timestamp: new Date().toISOString(),
        retryCount: 0
      };
      this.offlineData.pendingActions.push(action);
      void this.saveOfflineData();
      this.notifyListeners();
    }
  }, {
    key: "getOfflineData",
    value: function getOfflineData() {
      return _objectSpread({}, this.offlineData);
    }
  }, {
    key: "getPets",
    value: (function () {
      var _getPets = (0, _asyncToGenerator2.default)(function* () {
        if (this.isOnline) {
          try {
            var pets = yield _api.api.getPets();
            this.offlineData.pets = pets;
            yield this.saveOfflineData();
            return pets;
          } catch (error) {
            _core.logger.warn("Failed to fetch pets online, using offline data", {
              error: String(error)
            });
          }
        }
        return this.offlineData.pets;
      });
      function getPets() {
        return _getPets.apply(this, arguments);
      }
      return getPets;
    }())
  }, {
    key: "getUser",
    value: function getUser() {
      if (this.isOnline) {
        try {} catch (error) {
          _core.logger.warn("Failed to fetch user online, using offline data", {
            error: String(error)
          });
        }
      }
      return this.offlineData.user;
    }
  }, {
    key: "getMatches",
    value: (function () {
      var _getMatches = (0, _asyncToGenerator2.default)(function* () {
        if (this.isOnline) {
          try {
            var matches = yield _api.api.getMatches();
            this.offlineData.matches = matches;
            yield this.saveOfflineData();
            return matches;
          } catch (error) {
            _core.logger.warn("Failed to fetch matches online, using offline data", {
              error: String(error)
            });
          }
        }
        return this.offlineData.matches;
      });
      function getMatches() {
        return _getMatches.apply(this, arguments);
      }
      return getMatches;
    }())
  }, {
    key: "getMessages",
    value: (function () {
      var _getMessages = (0, _asyncToGenerator2.default)(function* (matchId) {
        if (this.isOnline) {
          try {
            var messages = yield _api.api.getMessages(matchId);
            var otherMessages = this.offlineData.messages.filter(function (m) {
              return m.matchId !== matchId;
            });
            this.offlineData.messages = [].concat((0, _toConsumableArray2.default)(otherMessages), (0, _toConsumableArray2.default)(messages));
            yield this.saveOfflineData();
            return messages;
          } catch (error) {
            _core.logger.warn("Failed to fetch messages online, using offline data", {
              error: String(error)
            });
          }
        }
        return this.offlineData.messages.filter(function (m) {
          return m.matchId === matchId;
        });
      });
      function getMessages(_x) {
        return _getMessages.apply(this, arguments);
      }
      return getMessages;
    }())
  }, {
    key: "swipePet",
    value: function swipePet(petId, direction) {
      if (this.isOnline) {
        try {} catch (error) {
          _core.logger.warn("Failed to swipe online, queuing for offline", {
            error: String(error)
          });
        }
      }
      this.addPendingAction("swipe", {
        petId: petId,
        direction: direction
      });
    }
  }, {
    key: "sendMessage",
    value: (function () {
      var _sendMessage = (0, _asyncToGenerator2.default)(function* (matchId, message) {
        if (this.isOnline) {
          try {
            yield _api.api.sendMessage(matchId, message);
            return;
          } catch (error) {
            _core.logger.warn("Failed to send message online, queuing for offline", {
              error: String(error)
            });
          }
        }
        this.addPendingAction("message", {
          matchId: matchId,
          message: message
        });
      });
      function sendMessage(_x2, _x3) {
        return _sendMessage.apply(this, arguments);
      }
      return sendMessage;
    }())
  }, {
    key: "updateProfile",
    value: (function () {
      var _updateProfile = (0, _asyncToGenerator2.default)(function* (profileData) {
        if (this.isOnline) {
          try {
            yield _api.api.updateUserProfile(profileData);
            return;
          } catch (error) {
            _core.logger.warn("Failed to update profile online, queuing for offline", {
              error: String(error)
            });
          }
        }
        this.addPendingAction("profile_update", profileData);
      });
      function updateProfile(_x4) {
        return _updateProfile.apply(this, arguments);
      }
      return updateProfile;
    }())
  }, {
    key: "performMatchAction",
    value: function performMatchAction(matchId, action) {
      if (this.isOnline) {
        try {} catch (error) {
          _core.logger.warn("Failed to perform match action online, queuing for offline", {
            error: String(error)
          });
        }
      }
      this.addPendingAction("match_action", {
        matchId: matchId,
        action: action
      });
    }
  }, {
    key: "getSyncStatus",
    value: function getSyncStatus() {
      return {
        isOnline: this.isOnline,
        isSyncing: this.isSyncing,
        lastSyncTime: this.offlineData.lastSync,
        pendingActionsCount: this.offlineData.pendingActions.length,
        syncProgress: this.isSyncing ? 0.5 : 1.0
      };
    }
  }, {
    key: "addSyncStatusListener",
    value: function addSyncStatusListener(listener) {
      var _this4 = this;
      this.syncListeners.push(listener);
      return function () {
        _this4.syncListeners = _this4.syncListeners.filter(function (l) {
          return l !== listener;
        });
      };
    }
  }, {
    key: "notifyListeners",
    value: function notifyListeners() {
      var status = this.getSyncStatus();
      this.syncListeners.forEach(function (listener) {
        listener(status);
      });
    }
  }, {
    key: "clearOfflineData",
    value: (function () {
      var _clearOfflineData = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield _asyncStorage.default.removeItem("offline_data");
          this.offlineData = {
            pets: [],
            user: null,
            matches: [],
            messages: [],
            lastSync: new Date().toISOString(),
            pendingActions: []
          };
          _core.logger.info("Offline data cleared");
        } catch (error) {
          _core.logger.error("Failed to clear offline data", {
            error: String(error)
          });
        }
      });
      function clearOfflineData() {
        return _clearOfflineData.apply(this, arguments);
      }
      return clearOfflineData;
    }())
  }, {
    key: "getStorageSize",
    value: (function () {
      var _getStorageSize = (0, _asyncToGenerator2.default)(function* () {
        try {
          var keys = yield _asyncStorage.default.getAllKeys();
          var totalSize = 0;
          for (var key of keys) {
            var value = yield _asyncStorage.default.getItem(key);
            if (value !== null && value !== "") {
              totalSize += value.length;
            }
          }
          return totalSize;
        } catch (error) {
          _core.logger.error("Failed to get storage size", {
            error: String(error)
          });
          return 0;
        }
      });
      function getStorageSize() {
        return _getStorageSize.apply(this, arguments);
      }
      return getStorageSize;
    }())
  }, {
    key: "cleanup",
    value: function cleanup() {
      if (this.netInfoUnsubscribe) {
        this.netInfoUnsubscribe();
        this.netInfoUnsubscribe = undefined;
      }
      if (this.syncInterval) {
        clearInterval(this.syncInterval);
        this.syncInterval = undefined;
      }
      this.syncListeners = [];
    }
  }]);
}();
var offlineService = exports.offlineService = new OfflineService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,