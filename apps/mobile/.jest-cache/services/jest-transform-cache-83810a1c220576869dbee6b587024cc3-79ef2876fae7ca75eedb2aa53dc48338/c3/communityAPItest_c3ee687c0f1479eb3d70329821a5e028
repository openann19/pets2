268d96062615164e8c0b56ec3f2b0ccd
"use strict";

_getJestObj().mock("../apiClient", function () {
  return {
    apiClient: {
      get: _globals.jest.fn(),
      post: _globals.jest.fn(),
      put: _globals.jest.fn(),
      delete: _globals.jest.fn()
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      error: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _communityAPI = require("../communityAPI");
var _apiClient = require("../apiClient");
var _core = require("@pawfectmatch/core");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApiClient = _apiClient.apiClient;
var mockLogger = _core.logger;
(0, _globals.describe)('CommunityAPI', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('getFeed', function () {
    (0, _globals.it)('should fetch community feed without parameters', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        posts: [{
          _id: 'post1',
          author: {
            _id: 'user1',
            name: 'John Doe',
            avatar: 'avatar.jpg'
          },
          content: 'Hello community!',
          images: ['image1.jpg'],
          likes: 5,
          liked: false,
          comments: [],
          createdAt: '2024-01-01T00:00:00Z',
          type: 'post'
        }],
        pagination: {
          page: 1,
          limit: 20,
          total: 1,
          pages: 1
        },
        appliedFilters: {
          packId: null,
          userId: null,
          type: null,
          matchedCount: 1
        }
      };
      mockApiClient.get.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.getFeed();
      (0, _globals.expect)(mockApiClient.get).toHaveBeenCalledWith('/community/posts');
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should fetch community feed with pagination and filters', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        posts: [],
        pagination: {
          page: 2,
          limit: 10,
          total: 25,
          pages: 3
        },
        appliedFilters: {
          packId: 'pack123',
          userId: 'user456',
          type: 'activity',
          matchedCount: 0
        }
      };
      mockApiClient.get.mockResolvedValue(mockResponse);
      var params = {
        page: 2,
        limit: 10,
        packId: 'pack123',
        userId: 'user456',
        type: 'activity'
      };
      var result = yield _communityAPI.communityAPI.getFeed(params);
      (0, _globals.expect)(mockApiClient.get).toHaveBeenCalledWith('/community/posts?page=2&limit=10&packId=pack123&userId=user456&type=activity');
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should handle API errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Network error');
      mockApiClient.get.mockRejectedValue(error);
      yield (0, _globals.expect)(_communityAPI.communityAPI.getFeed()).rejects.toThrow('Network error');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to fetch community feed:', {
        error: 'Network error',
        stack: error.stack
      });
    }));
    (0, _globals.it)('should handle empty feed response', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        posts: [],
        pagination: {
          page: 1,
          limit: 20,
          total: 0,
          pages: 0
        },
        appliedFilters: {
          packId: null,
          userId: null,
          type: null,
          matchedCount: 0
        }
      };
      mockApiClient.get.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.getFeed();
      (0, _globals.expect)(result.posts).toHaveLength(0);
      (0, _globals.expect)(result.pagination.total).toBe(0);
    }));
  });
  (0, _globals.describe)('createPost', function () {
    (0, _globals.it)('should create a new post successfully', (0, _asyncToGenerator2.default)(function* () {
      var postData = {
        content: 'New community post!',
        images: ['image1.jpg', 'image2.jpg'],
        packId: 'pack123'
      };
      var mockResponse = {
        success: true,
        post: {
          _id: 'newpost123',
          author: {
            _id: 'user1',
            name: 'John Doe',
            avatar: 'avatar.jpg'
          },
          content: postData.content,
          images: postData.images,
          likes: 0,
          liked: false,
          comments: [],
          createdAt: '2024-01-01T00:00:00Z',
          packId: postData.packId,
          type: 'post'
        },
        message: 'Post created successfully'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.createPost(postData);
      (0, _globals.expect)(mockApiClient.post).toHaveBeenCalledWith('/community/posts', postData);
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should create an activity post with details', (0, _asyncToGenerator2.default)(function* () {
      var activityData = {
        content: 'Join our pet meetup!',
        type: 'activity',
        activityDetails: {
          date: '2024-01-15',
          location: 'Central Park',
          maxAttendees: 20,
          currentAttendees: 0,
          attending: false
        }
      };
      var mockResponse = {
        success: true,
        post: {
          _id: 'activity123',
          content: activityData.content,
          type: 'activity',
          activityDetails: activityData.activityDetails
        },
        message: 'Activity created successfully'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.createPost(activityData);
      (0, _globals.expect)(mockApiClient.post).toHaveBeenCalledWith('/community/posts', activityData);
      (0, _globals.expect)(result.post.type).toBe('activity');
    }));
    (0, _globals.it)('should validate required content', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _globals.expect)(_communityAPI.communityAPI.createPost({
        content: ''
      })).rejects.toThrow('Post content is required');
      yield (0, _globals.expect)(_communityAPI.communityAPI.createPost({
        content: '   '
      })).rejects.toThrow('Post content is required');
      (0, _globals.expect)(mockApiClient.post).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle API errors during post creation', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('API error');
      mockApiClient.post.mockRejectedValue(error);
      yield (0, _globals.expect)(_communityAPI.communityAPI.createPost({
        content: 'Test post'
      })).rejects.toThrow('API error');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to create community post:', {
        error: 'API error',
        stack: error.stack
      });
    }));
  });
  (0, _globals.describe)('likePost', function () {
    (0, _globals.it)('should like/unlike a post', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        post: {
          _id: 'post123',
          likes: 6,
          liked: true
        },
        message: 'Post liked successfully'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.likePost('post123');
      (0, _globals.expect)(mockApiClient.post).toHaveBeenCalledWith('/community/posts/post123/like');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(result.post.liked).toBe(true);
    }));
    (0, _globals.it)('should handle API errors during like operation', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Like failed');
      mockApiClient.post.mockRejectedValue(error);
      yield (0, _globals.expect)(_communityAPI.communityAPI.likePost('post123')).rejects.toThrow('Like failed');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to like/unlike community post:', {
        error: 'Like failed',
        stack: error.stack
      });
    }));
  });
  (0, _globals.describe)('getComments', function () {
    (0, _globals.it)('should fetch comments for a post', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        comments: [{
          _id: 'comment1',
          author: {
            _id: 'user1',
            name: 'John Doe',
            avatar: 'avatar.jpg'
          },
          content: 'Great post!',
          createdAt: '2024-01-01T00:00:00Z',
          postId: 'post123'
        }],
        pagination: {
          page: 1,
          limit: 10,
          total: 1,
          pages: 1
        },
        postId: 'post123'
      };
      mockApiClient.get.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.getComments('post123');
      (0, _globals.expect)(mockApiClient.get).toHaveBeenCalledWith('/community/posts/post123/comments');
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should fetch comments with pagination', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        comments: [],
        pagination: {
          page: 2,
          limit: 5,
          total: 12,
          pages: 3
        },
        postId: 'post123'
      };
      mockApiClient.get.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.getComments('post123', {
        page: 2,
        limit: 5
      });
      (0, _globals.expect)(mockApiClient.get).toHaveBeenCalledWith('/community/posts/post123/comments?page=2&limit=5');
      (0, _globals.expect)(result.pagination.page).toBe(2);
    }));
    (0, _globals.it)('should handle API errors when fetching comments', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Comments fetch failed');
      mockApiClient.get.mockRejectedValue(error);
      yield (0, _globals.expect)(_communityAPI.communityAPI.getComments('post123')).rejects.toThrow('Comments fetch failed');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to fetch post comments:', {
        error: 'Comments fetch failed',
        stack: error.stack
      });
    }));
  });
  (0, _globals.describe)('addComment', function () {
    (0, _globals.it)('should add a comment to a post', (0, _asyncToGenerator2.default)(function* () {
      var commentData = {
        content: 'This is a great comment!'
      };
      var mockResponse = {
        success: true,
        comment: {
          _id: 'comment123',
          author: {
            _id: 'user1',
            name: 'John Doe',
            avatar: 'avatar.jpg'
          },
          content: commentData.content,
          createdAt: '2024-01-01T00:00:00Z',
          postId: 'post123'
        },
        message: 'Comment added successfully'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.addComment('post123', commentData);
      (0, _globals.expect)(mockApiClient.post).toHaveBeenCalledWith('/community/posts/post123/comments', commentData);
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should validate comment content', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _globals.expect)(_communityAPI.communityAPI.addComment('post123', {
        content: ''
      })).rejects.toThrow('Comment content is required');
      yield (0, _globals.expect)(_communityAPI.communityAPI.addComment('post123', {
        content: '   '
      })).rejects.toThrow('Comment content is required');
      (0, _globals.expect)(mockApiClient.post).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle API errors when adding comments', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Comment creation failed');
      mockApiClient.post.mockRejectedValue(error);
      yield (0, _globals.expect)(_communityAPI.communityAPI.addComment('post123', {
        content: 'Test comment'
      })).rejects.toThrow('Comment creation failed');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to add comment to post:', {
        error: 'Comment creation failed',
        stack: error.stack
      });
    }));
  });
  (0, _globals.describe)('Activity Participation', function () {
    var mockActivityResponse = {
      success: true,
      post: {
        _id: 'activity123',
        type: 'activity',
        activityDetails: {
          date: '2024-01-15',
          location: 'Central Park',
          maxAttendees: 20,
          currentAttendees: 6,
          attending: true
        }
      },
      message: 'Successfully joined activity'
    };
    (0, _globals.it)('should join an activity', (0, _asyncToGenerator2.default)(function* () {
      var _result$post$activity;
      mockApiClient.post.mockResolvedValue(mockActivityResponse);
      var result = yield _communityAPI.communityAPI.joinActivity('activity123');
      (0, _globals.expect)(mockApiClient.post).toHaveBeenCalledWith('/community/posts/activity123/join');
      (0, _globals.expect)(result).toEqual(mockActivityResponse);
      (0, _globals.expect)((_result$post$activity = result.post.activityDetails) == null ? void 0 : _result$post$activity.attending).toBe(true);
    }));
    (0, _globals.it)('should leave an activity', (0, _asyncToGenerator2.default)(function* () {
      var _result$post$activity2;
      var leaveResponse = _objectSpread(_objectSpread({}, mockActivityResponse), {}, {
        post: _objectSpread(_objectSpread({}, mockActivityResponse.post), {}, {
          activityDetails: _objectSpread(_objectSpread({}, mockActivityResponse.post.activityDetails), {}, {
            currentAttendees: 5,
            attending: false
          })
        }),
        message: 'Successfully left activity'
      });
      mockApiClient.post.mockResolvedValue(leaveResponse);
      var result = yield _communityAPI.communityAPI.leaveActivity('activity123');
      (0, _globals.expect)(mockApiClient.post).toHaveBeenCalledWith('/community/posts/activity123/leave');
      (0, _globals.expect)((_result$post$activity2 = result.post.activityDetails) == null ? void 0 : _result$post$activity2.attending).toBe(false);
    }));
    (0, _globals.it)('should handle API errors for activity operations', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Activity operation failed');
      mockApiClient.post.mockRejectedValue(error);
      yield (0, _globals.expect)(_communityAPI.communityAPI.joinActivity('activity123')).rejects.toThrow('Activity operation failed');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to join activity:', {
        error: 'Activity operation failed',
        stack: error.stack
      });
    }));
  });
  (0, _globals.describe)('Post Management', function () {
    (0, _globals.it)('should delete a post', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Post deleted successfully'
      };
      mockApiClient.delete.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.deletePost('post123');
      (0, _globals.expect)(mockApiClient.delete).toHaveBeenCalledWith('/community/posts/post123');
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should update a post', (0, _asyncToGenerator2.default)(function* () {
      var updateData = {
        content: 'Updated post content',
        images: ['new-image.jpg']
      };
      var mockResponse = {
        success: true,
        post: {
          _id: 'post123',
          content: updateData.content,
          images: updateData.images
        },
        message: 'Post updated successfully'
      };
      mockApiClient.put.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.updatePost('post123', updateData);
      (0, _globals.expect)(mockApiClient.put).toHaveBeenCalledWith('/community/posts/post123', updateData);
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should handle API errors for post operations', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Post operation failed');
      mockApiClient.delete.mockRejectedValue(error);
      yield (0, _globals.expect)(_communityAPI.communityAPI.deletePost('post123')).rejects.toThrow('Post operation failed');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to delete post:', {
        error: 'Post operation failed',
        stack: error.stack
      });
    }));
  });
  (0, _globals.describe)('Content Moderation', function () {
    (0, _globals.it)('should report content', (0, _asyncToGenerator2.default)(function* () {
      var reportData = {
        type: 'post',
        targetId: 'post123',
        reason: 'inappropriate_content',
        description: 'Contains offensive language'
      };
      var mockResponse = {
        success: true,
        message: 'Content reported successfully'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.reportContent(reportData);
      (0, _globals.expect)(mockApiClient.post).toHaveBeenCalledWith('/community/report', reportData);
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should report comments', (0, _asyncToGenerator2.default)(function* () {
      var reportData = {
        type: 'comment',
        targetId: 'comment123',
        reason: 'spam'
      };
      var mockResponse = {
        success: true,
        message: 'Comment reported successfully'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.reportContent(reportData);
      (0, _globals.expect)(mockApiClient.post).toHaveBeenCalledWith('/community/report', reportData);
      (0, _globals.expect)(result.message).toContain('Comment reported');
    }));
    (0, _globals.it)('should block a user', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'User blocked successfully'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.blockUser('user123');
      (0, _globals.expect)(mockApiClient.post).toHaveBeenCalledWith('/community/block', {
        userId: 'user123'
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should handle API errors for moderation operations', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Moderation failed');
      mockApiClient.post.mockRejectedValue(error);
      yield (0, _globals.expect)(_communityAPI.communityAPI.reportContent({
        type: 'post',
        targetId: 'post123',
        reason: 'spam'
      })).rejects.toThrow('Moderation failed');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to report content:', {
        error: 'Moderation failed',
        stack: error.stack
      });
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle unknown errors', (0, _asyncToGenerator2.default)(function* () {
      mockApiClient.get.mockRejectedValue('String error');
      yield (0, _globals.expect)(_communityAPI.communityAPI.getFeed()).rejects.toThrow('Unknown error');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to fetch community feed: Unknown error', {
        error: 'String error'
      });
    }));
    (0, _globals.it)('should handle null/undefined errors', (0, _asyncToGenerator2.default)(function* () {
      mockApiClient.get.mockRejectedValue(null);
      yield (0, _globals.expect)(_communityAPI.communityAPI.getFeed()).rejects.toThrow('Unknown error');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to fetch community feed: Unknown error', {
        error: null
      });
    }));
    (0, _globals.it)('should preserve original error when it is an Error instance', (0, _asyncToGenerator2.default)(function* () {
      var originalError = new Error('Original API error');
      mockApiClient.get.mockRejectedValue(originalError);
      yield (0, _globals.expect)(_communityAPI.communityAPI.getFeed()).rejects.toThrow('Original API error');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to fetch community feed:', {
        error: 'Original API error',
        stack: originalError.stack
      });
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle very long content', (0, _asyncToGenerator2.default)(function* () {
      var longContent = 'A'.repeat(10000);
      var mockResponse = {
        success: true,
        post: {
          _id: 'post123',
          content: longContent
        },
        message: 'Post created'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.createPost({
        content: longContent
      });
      (0, _globals.expect)(result.post.content).toBe(longContent);
    }));
    (0, _globals.it)('should handle posts with many images', (0, _asyncToGenerator2.default)(function* () {
      var manyImages = Array.from({
        length: 20
      }, function (_, i) {
        return `image${i}.jpg`;
      });
      var mockResponse = {
        success: true,
        post: {
          _id: 'post123',
          images: manyImages
        },
        message: 'Post created'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.createPost({
        content: 'Post with many images',
        images: manyImages
      });
      (0, _globals.expect)(result.post.images).toHaveLength(20);
    }));
    (0, _globals.it)('should handle empty arrays and objects', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        posts: [],
        pagination: {
          page: 1,
          limit: 20,
          total: 0,
          pages: 0
        },
        appliedFilters: {
          packId: null,
          userId: null,
          type: null,
          matchedCount: 0
        }
      };
      mockApiClient.get.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.getFeed();
      (0, _globals.expect)(result.posts).toEqual([]);
      (0, _globals.expect)(result.appliedFilters.packId).toBeNull();
    }));
    (0, _globals.it)('should handle special characters in content', (0, _asyncToGenerator2.default)(function* () {
      var specialContent = 'Hello world! 🌍🚀 #community @user émojis & spëcial chärs';
      var mockResponse = {
        success: true,
        post: {
          _id: 'post123',
          content: specialContent
        },
        message: 'Post created'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.createPost({
        content: specialContent
      });
      (0, _globals.expect)(result.post.content).toBe(specialContent);
    }));
    (0, _globals.it)('should handle concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Operation successful'
      };
      mockApiClient.post.mockResolvedValue(mockResponse);
      var operations = [_communityAPI.communityAPI.likePost('post1'), _communityAPI.communityAPI.likePost('post2'), _communityAPI.communityAPI.reportContent({
        type: 'post',
        targetId: 'post3',
        reason: 'spam'
      }), _communityAPI.communityAPI.blockUser('user1')];
      var results = yield Promise.all(operations);
      (0, _globals.expect)(results).toHaveLength(4);
      results.forEach(function (result) {
        (0, _globals.expect)(result.success).toBe(true);
      });
      (0, _globals.expect)(mockApiClient.post).toHaveBeenCalledTimes(4);
    }));
    (0, _globals.it)('should handle malformed API responses', (0, _asyncToGenerator2.default)(function* () {
      var malformedResponse = {
        success: true
      };
      mockApiClient.get.mockResolvedValue(malformedResponse);
      var result = yield _communityAPI.communityAPI.getFeed();
      (0, _globals.expect)(result).toEqual(malformedResponse);
    }));
    (0, _globals.it)('should handle very large pagination values', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        posts: [],
        pagination: {
          page: 999999,
          limit: 1000,
          total: 1000000,
          pages: 1000
        },
        appliedFilters: {
          packId: null,
          userId: null,
          type: null,
          matchedCount: 0
        }
      };
      mockApiClient.get.mockResolvedValue(mockResponse);
      var result = yield _communityAPI.communityAPI.getFeed({
        page: 999999,
        limit: 1000
      });
      (0, _globals.expect)(result.pagination.page).toBe(999999);
      (0, _globals.expect)(result.pagination.total).toBe(1000000);
    }));
  });
  (0, _globals.describe)('Integration Scenarios', function () {
    (0, _globals.it)('should handle complete post lifecycle', (0, _asyncToGenerator2.default)(function* () {
      var createResponse = {
        success: true,
        post: {
          _id: 'post123',
          content: 'Test post'
        },
        message: 'Post created'
      };
      mockApiClient.post.mockResolvedValueOnce(createResponse);
      var createdPost = yield _communityAPI.communityAPI.createPost({
        content: 'Test post'
      });
      (0, _globals.expect)(createdPost.post._id).toBe('post123');
      var likeResponse = {
        success: true,
        post: {
          _id: 'post123',
          likes: 1,
          liked: true
        },
        message: 'Post liked'
      };
      mockApiClient.post.mockResolvedValueOnce(likeResponse);
      var likedPost = yield _communityAPI.communityAPI.likePost('post123');
      (0, _globals.expect)(likedPost.post.liked).toBe(true);
      var commentResponse = {
        success: true,
        comment: {
          _id: 'comment123',
          content: 'Great post!'
        },
        message: 'Comment added'
      };
      mockApiClient.post.mockResolvedValueOnce(commentResponse);
      var comment = yield _communityAPI.communityAPI.addComment('post123', {
        content: 'Great post!'
      });
      (0, _globals.expect)(comment.comment._id).toBe('comment123');
      var commentsResponse = {
        success: true,
        comments: [{
          _id: 'comment123',
          content: 'Great post!'
        }],
        pagination: {
          page: 1,
          limit: 10,
          total: 1,
          pages: 1
        },
        postId: 'post123'
      };
      mockApiClient.get.mockResolvedValueOnce(commentsResponse);
      var comments = yield _communityAPI.communityAPI.getComments('post123');
      (0, _globals.expect)(comments.comments).toHaveLength(1);
      var updateResponse = {
        success: true,
        post: {
          _id: 'post123',
          content: 'Updated content'
        },
        message: 'Post updated'
      };
      mockApiClient.put.mockResolvedValueOnce(updateResponse);
      var updatedPost = yield _communityAPI.communityAPI.updatePost('post123', {
        content: 'Updated content'
      });
      (0, _globals.expect)(updatedPost.post.content).toBe('Updated content');
      var deleteResponse = {
        success: true,
        message: 'Post deleted'
      };
      mockApiClient.delete.mockResolvedValueOnce(deleteResponse);
      var deleteResult = yield _communityAPI.communityAPI.deletePost('post123');
      (0, _globals.expect)(deleteResult.message).toBe('Post deleted');
    }));
    (0, _globals.it)('should handle activity participation flow', (0, _asyncToGenerator2.default)(function* () {
      var _joinResult$post$acti, _leaveResult$post$act;
      var joinResponse = {
        success: true,
        post: {
          _id: 'activity123',
          activityDetails: {
            attending: true,
            currentAttendees: 6
          }
        },
        message: 'Joined activity'
      };
      mockApiClient.post.mockResolvedValueOnce(joinResponse);
      var joinResult = yield _communityAPI.communityAPI.joinActivity('activity123');
      (0, _globals.expect)((_joinResult$post$acti = joinResult.post.activityDetails) == null ? void 0 : _joinResult$post$acti.attending).toBe(true);
      var leaveResponse = {
        success: true,
        post: {
          _id: 'activity123',
          activityDetails: {
            attending: false,
            currentAttendees: 5
          }
        },
        message: 'Left activity'
      };
      mockApiClient.post.mockResolvedValueOnce(leaveResponse);
      var leaveResult = yield _communityAPI.communityAPI.leaveActivity('activity123');
      (0, _globals.expect)((_leaveResult$post$act = leaveResult.post.activityDetails) == null ? void 0 : _leaveResult$post$act.attending).toBe(false);
    }));
    (0, _globals.it)('should handle moderation workflow', (0, _asyncToGenerator2.default)(function* () {
      var reportResponse = {
        success: true,
        message: 'Content reported'
      };
      mockApiClient.post.mockResolvedValueOnce(reportResponse);
      var reportResult = yield _communityAPI.communityAPI.reportContent({
        type: 'post',
        targetId: 'post123',
        reason: 'inappropriate',
        description: 'Contains harmful content'
      });
      (0, _globals.expect)(reportResult.message).toBe('Content reported');
      var blockResponse = {
        success: true,
        message: 'User blocked'
      };
      mockApiClient.post.mockResolvedValueOnce(blockResponse);
      var blockResult = yield _communityAPI.communityAPI.blockUser('user123');
      (0, _globals.expect)(blockResult.message).toBe('User blocked');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,