a6054d2ade22e4680c3489944282b350
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.endPetActivity = endPetActivity;
exports.getActivityHistory = getActivityHistory;
exports.startPetActivity = startPetActivity;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var Location = _interopRequireWildcard(require("expo-location"));
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var _socket = require("./socket");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var API_URL = process.env.EXPO_PUBLIC_API_URL || process.env.API_URL || "";
function getCurrentLocation() {
  return _getCurrentLocation.apply(this, arguments);
}
function _getCurrentLocation() {
  _getCurrentLocation = (0, _asyncToGenerator2.default)(function* () {
    var _yield$Location$reque = yield Location.requestForegroundPermissionsAsync(),
      status = _yield$Location$reque.status;
    if (status !== "granted") {
      throw new Error("Location permission not granted");
    }
    var pos = yield Location.getCurrentPositionAsync({
      accuracy: Location.Accuracy.High
    });
    return {
      lat: pos.coords.latitude,
      lng: pos.coords.longitude
    };
  });
  return _getCurrentLocation.apply(this, arguments);
}
function startPetActivity(_x) {
  return _startPetActivity.apply(this, arguments);
}
function _startPetActivity() {
  _startPetActivity = (0, _asyncToGenerator2.default)(function* (data) {
    var _data$shareToMap, _data$radiusMeters;
    var loc = yield getCurrentLocation();
    var body = {
      petId: data.petId,
      activity: data.activity,
      message: data.message || "",
      shareToMap: (_data$shareToMap = data.shareToMap) != null ? _data$shareToMap : true,
      location: loc,
      radius: (_data$radiusMeters = data.radiusMeters) != null ? _data$radiusMeters : 500,
      device: _reactNative.Platform.OS
    };
    var res = yield fetch(`${API_URL}/api/pets/activity/start`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(body)
    });
    if (!res.ok) {
      var t = yield res.text();
      throw new Error(`startPetActivity failed: ${res.status} ${t}`);
    }
    var result = yield res.json();
    var record = result.data;
    _socket.socketClient.emit("activity:start", _objectSpread(_objectSpread({}, body), {}, {
      _id: record._id
    }));
    _core.logger.info("Activity started", {
      record: record
    });
    return record;
  });
  return _startPetActivity.apply(this, arguments);
}
function endPetActivity(_x2) {
  return _endPetActivity.apply(this, arguments);
}
function _endPetActivity() {
  _endPetActivity = (0, _asyncToGenerator2.default)(function* (activityId) {
    var res = yield fetch(`${API_URL}/api/pets/activity/end`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        activityId: activityId
      })
    });
    if (!res.ok) {
      var t = yield res.text();
      throw new Error(`endPetActivity failed: ${res.status} ${t}`);
    }
    var result = yield res.json();
    var record = result.data;
    _socket.socketClient.emit("activity:end", {
      _id: record._id
    });
    _core.logger.info("Activity ended", {
      record: record
    });
    return record;
  });
  return _endPetActivity.apply(this, arguments);
}
function getActivityHistory(_x3) {
  return _getActivityHistory.apply(this, arguments);
}
function _getActivityHistory() {
  _getActivityHistory = (0, _asyncToGenerator2.default)(function* (petId) {
    var res = yield fetch(`${API_URL}/api/pets/activity/history?petId=${encodeURIComponent(petId)}`);
    if (!res.ok) {
      var t = yield res.text();
      throw new Error(`getActivityHistory failed: ${res.status} ${t}`);
    }
    var result = yield res.json();
    return result.data;
  });
  return _getActivityHistory.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,