4e1d034cbe75f611821c326d51a95808
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMatchAnalytics = useMatchAnalytics;
var react_1 = require("react");
var logger_1 = require("../utils/logger");
var env_1 = require("../utils/env");
function useMatchAnalytics() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var userId = options.userId,
    _options$timeframe = options.timeframe,
    timeframe = _options$timeframe === void 0 ? 'weekly' : _options$timeframe;
  var _ref = (0, react_1.useState)(null),
    _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    insights = _ref2[0],
    setInsights = _ref2[1];
  var _ref3 = (0, react_1.useState)(null),
    _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
    trends = _ref4[0],
    setTrends = _ref4[1];
  var _ref5 = (0, react_1.useState)(true),
    _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
    isLoading = _ref6[0],
    setIsLoading = _ref6[1];
  var _ref7 = (0, react_1.useState)(null),
    _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
    error = _ref8[0],
    setError = _ref8[1];
  var fetchAnalytics = (0, react_1.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (!userId) {
      setIsLoading(false);
      return;
    }
    try {
      var _ref0;
      setIsLoading(true);
      setError(null);
      var response = yield fetch(`/api/analytics/matches/${userId}?timeframe=${timeframe}`, {
        headers: {
          'Authorization': `Bearer ${(_ref0 = (0, env_1.getLocalStorageItem)('accessToken')) != null ? _ref0 : ''}`
        }
      });
      if (!response.ok) {
        throw new Error(`Failed to fetch match analytics: ${response.statusText}`);
      }
      var data = yield response.json();
      if (data.success) {
        setInsights(data.data.insights);
        setTrends(data.data.trends);
      } else {
        throw new Error(data.message || 'Failed to fetch match analytics');
      }
    } catch (err) {
      var errorMessage = err instanceof Error ? err.message : 'Unknown error';
      setError(errorMessage);
      logger_1.logger.error('Failed to fetch match analytics', {
        error: errorMessage,
        userId: userId
      });
    } finally {
      setIsLoading(false);
    }
  }), [userId, timeframe]);
  (0, react_1.useEffect)(function () {
    void fetchAnalytics();
  }, [fetchAnalytics]);
  return {
    insights: insights,
    trends: trends,
    isLoading: isLoading,
    error: error,
    refresh: fetchAnalytics
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9zbGljZWRUb0FycmF5MiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXNlTWF0Y2hBbmFseXRpY3MiLCJyZWFjdF8xIiwibG9nZ2VyXzEiLCJlbnZfMSIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJ1c2VySWQiLCJfb3B0aW9ucyR0aW1lZnJhbWUiLCJ0aW1lZnJhbWUiLCJfcmVmIiwidXNlU3RhdGUiLCJfcmVmMiIsImRlZmF1bHQiLCJpbnNpZ2h0cyIsInNldEluc2lnaHRzIiwiX3JlZjMiLCJfcmVmNCIsInRyZW5kcyIsInNldFRyZW5kcyIsIl9yZWY1IiwiX3JlZjYiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJfcmVmNyIsIl9yZWY4IiwiZXJyb3IiLCJzZXRFcnJvciIsImZldGNoQW5hbHl0aWNzIiwidXNlQ2FsbGJhY2siLCJfcmVmMCIsInJlc3BvbnNlIiwiZmV0Y2giLCJoZWFkZXJzIiwiZ2V0TG9jYWxTdG9yYWdlSXRlbSIsIm9rIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsImVyciIsImVycm9yTWVzc2FnZSIsImxvZ2dlciIsInVzZUVmZmVjdCIsInJlZnJlc2giXSwic291cmNlcyI6WyJ1c2VNYXRjaEFuYWx5dGljcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogTWF0Y2ggQW5hbHl0aWNzIEhvb2tcbiAqIFRyYWNrcyBtYXRjaC1yZWxhdGVkIGFuYWx5dGljcyBhbmQgaW5zaWdodHNcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VNYXRjaEFuYWx5dGljcyA9IHVzZU1hdGNoQW5hbHl0aWNzO1xuY29uc3QgcmVhY3RfMSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IGxvZ2dlcl8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2xvZ2dlclwiKTtcbmNvbnN0IGVudl8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2VudlwiKTtcbi8qKlxuICogSG9vayB0byBmZXRjaCBtYXRjaCBhbmFseXRpY3MgYW5kIGluc2lnaHRzXG4gKi9cbmZ1bmN0aW9uIHVzZU1hdGNoQW5hbHl0aWNzKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgdXNlcklkLCB0aW1lZnJhbWUgPSAnd2Vla2x5JyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBbaW5zaWdodHMsIHNldEluc2lnaHRzXSA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKShudWxsKTtcbiAgICBjb25zdCBbdHJlbmRzLCBzZXRUcmVuZHNdID0gKDAsIHJlYWN0XzEudXNlU3RhdGUpKG51bGwpO1xuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkodHJ1ZSk7XG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkobnVsbCk7XG4gICAgY29uc3QgZmV0Y2hBbmFseXRpY3MgPSAoMCwgcmVhY3RfMS51c2VDYWxsYmFjaykoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgICAgICAgc2V0RXJyb3IobnVsbCk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2FuYWx5dGljcy9tYXRjaGVzLyR7dXNlcklkfT90aW1lZnJhbWU9JHt0aW1lZnJhbWV9YCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7KDAsIGVudl8xLmdldExvY2FsU3RvcmFnZUl0ZW0pKCdhY2Nlc3NUb2tlbicpID8/ICcnfWAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIG1hdGNoIGFuYWx5dGljczogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBzZXRJbnNpZ2h0cyhkYXRhLmRhdGEuaW5zaWdodHMpO1xuICAgICAgICAgICAgICAgIHNldFRyZW5kcyhkYXRhLmRhdGEudHJlbmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBmZXRjaCBtYXRjaCBhbmFseXRpY3MnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InO1xuICAgICAgICAgICAgc2V0RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIGxvZ2dlcl8xLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGZldGNoIG1hdGNoIGFuYWx5dGljcycsIHsgZXJyb3I6IGVycm9yTWVzc2FnZSwgdXNlcklkIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0sIFt1c2VySWQsIHRpbWVmcmFtZV0pO1xuICAgICgwLCByZWFjdF8xLnVzZUVmZmVjdCkoKCkgPT4ge1xuICAgICAgICB2b2lkIGZldGNoQW5hbHl0aWNzKCk7XG4gICAgfSwgW2ZldGNoQW5hbHl0aWNzXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5zaWdodHMsXG4gICAgICAgIHRyZW5kcyxcbiAgICAgICAgaXNMb2FkaW5nLFxuICAgICAgICBlcnJvcixcbiAgICAgICAgcmVmcmVzaDogZmV0Y2hBbmFseXRpY3MsXG4gICAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTtBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsZUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBS2JHLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3REQsT0FBTyxDQUFDRSxpQkFBaUIsR0FBR0EsaUJBQWlCO0FBQzdDLElBQU1DLE9BQU8sR0FBR1IsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUNoQyxJQUFNUyxRQUFRLEdBQUdULE9BQU8sa0JBQWtCLENBQUM7QUFDM0MsSUFBTVUsS0FBSyxHQUFHVixPQUFPLGVBQWUsQ0FBQztBQUlyQyxTQUFTTyxpQkFBaUJBLENBQUEsRUFBZTtFQUFBLElBQWRJLE9BQU8sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBQ25DLElBQVFHLE1BQU0sR0FBMkJKLE9BQU8sQ0FBeENJLE1BQU07SUFBQUMsa0JBQUEsR0FBMkJMLE9BQU8sQ0FBaENNLFNBQVM7SUFBVEEsU0FBUyxHQUFBRCxrQkFBQSxj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