751ecc8a09cfd2e2ac6ac41468e57529
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadPhoto = uploadPhoto;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _api = require("./api");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function uploadPhoto(_x, _x2) {
  return _uploadPhoto.apply(this, arguments);
}
function _uploadPhoto() {
  _uploadPhoto = (0, _asyncToGenerator2.default)(function* (fileUri, contentType) {
    var data = yield (0, _api.request)("/uploads/photos/presign", {
      method: 'POST',
      body: {
        contentType: contentType
      }
    });
    yield FileSystem.uploadAsync(data.url, fileUri, {
      httpMethod: "PUT",
      headers: {
        "Content-Type": contentType
      },
      uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
    });
    return data.key;
  });
  return _uploadPhoto.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaWxlU3lzdGVtIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2FwaSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdDIiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInVwbG9hZFBob3RvIiwiX3giLCJfeDIiLCJfdXBsb2FkUGhvdG8iLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImZpbGVVcmkiLCJjb250ZW50VHlwZSIsImRhdGEiLCJyZXF1ZXN0IiwibWV0aG9kIiwiYm9keSIsInVwbG9hZEFzeW5jIiwidXJsIiwiaHR0cE1ldGhvZCIsImhlYWRlcnMiLCJ1cGxvYWRUeXBlIiwiRmlsZVN5c3RlbVVwbG9hZFR5cGUiLCJCSU5BUllfQ09OVEVOVCIsImtleSJdLCJzb3VyY2VzIjpbInBob3RvVXBsb2FkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEZpbGVTeXN0ZW0gZnJvbSBcImV4cG8tZmlsZS1zeXN0ZW1cIjtcbmltcG9ydCB7IHJlcXVlc3QgfSBmcm9tIFwiLi9hcGlcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwbG9hZFBob3RvKGZpbGVVcmk6IHN0cmluZywgY29udGVudFR5cGU6IHN0cmluZykge1xuICBjb25zdCBkYXRhID0gYXdhaXQgcmVxdWVzdDx7IHVybDogc3RyaW5nOyBrZXk6IHN0cmluZyB9PihcIi91cGxvYWRzL3Bob3Rvcy9wcmVzaWduXCIsIHsgbWV0aG9kOiAnUE9TVCcsIGJvZHk6IHsgY29udGVudFR5cGUgfSB9KTtcbiAgYXdhaXQgRmlsZVN5c3RlbS51cGxvYWRBc3luYyhkYXRhLnVybCwgZmlsZVVyaSwge1xuICAgIGh0dHBNZXRob2Q6IFwiUFVUXCIsXG4gICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBjb250ZW50VHlwZSB9LFxuICAgIHVwbG9hZFR5cGU6IEZpbGVTeXN0ZW0uRmlsZVN5c3RlbVVwbG9hZFR5cGUuQklOQVJZX0NPTlRFTlQsXG4gIH0pO1xuICByZXR1cm4gZGF0YS5rZXk7XG59XG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxJQUFBLEdBQUFELE9BQUE7QUFBZ0MsU0FBQUQsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFMLHVCQUFBLFlBQUFBLHdCQUFBRyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEdBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsR0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsR0FBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsR0FBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxHQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxHQUFBLElBQUFkLENBQUEsQ0FBQWMsR0FBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQUFBLFNBRVZtQixXQUFXQSxDQUFBQyxFQUFBLEVBQUFDLEdBQUE7RUFBQSxPQUFBQyxZQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBO0FBQUEsU0FBQUYsYUFBQTtFQUFBQSxZQUFBLE9BQUFHLGtCQUFBLENBQUFoQixPQUFBLEVBQTFCLFdBQTJCaUIsT0FBZSxFQUFFQyxXQUFtQixFQUFFO0lBQ3RFLElBQU1DLElBQUksU0FBUyxJQUFBQyxZQUFPLEVBQStCLHlCQUF5QixFQUFFO01BQUVDLE1BQU0sRUFBRSxNQUFNO01BQUVDLElBQUksRUFBRTtRQUFFSixXQUFXLEVBQVhBO01BQVk7SUFBRSxDQUFDLENBQUM7SUFDOUgsTUFBTWhDLFVBQVUsQ0FBQ3FDLFdBQVcsQ0FBQ0osSUFBSSxDQUFDSyxHQUFHLEVBQUVQLE9BQU8sRUFBRTtNQUM5Q1EsVUFBVSxFQUFFLEtBQUs7TUFDakJDLE9BQU8sRUFBRTtRQUFFLGNBQWMsRUFBRVI7TUFBWSxDQUFDO01BQ3hDUyxVQUFVLEVBQUV6QyxVQUFVLENBQUMwQyxvQkFBb0IsQ0FBQ0M7SUFDOUMsQ0FBQyxDQUFDO0lBQ0YsT0FBT1YsSUFBSSxDQUFDVyxHQUFHO0VBQ2pCLENBQUM7RUFBQSxPQUFBakIsWUFBQSxDQUFBQyxLQUFBLE9BQUFDLFNBQUE7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==