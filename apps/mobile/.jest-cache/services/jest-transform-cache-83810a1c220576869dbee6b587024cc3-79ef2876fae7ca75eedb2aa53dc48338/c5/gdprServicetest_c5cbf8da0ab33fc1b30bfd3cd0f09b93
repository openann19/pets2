0c42a7bccac35f2fd056a2dbb044a1e4
"use strict";

_getJestObj().mock("../api", function () {
  return {
    request: jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _gdprService = require("../gdprService");
var _api = require("../api");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('GDPR Service', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('deleteAccount', function () {
    it('should request account deletion successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Account deletion requested',
        deletionId: 'del-123',
        gracePeriodEndsAt: '2024-02-01T00:00:00Z',
        canCancel: true
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.deleteAccount)({
        password: 'correctpassword',
        reason: 'User request',
        feedback: 'Good app'
      });
      expect(response).toEqual(mockResponse);
      expect(_api.request).toHaveBeenCalledWith('/api/users/delete-account', {
        method: 'DELETE',
        body: {
          password: 'correctpassword',
          reason: 'User request',
          feedback: 'Good app'
        }
      });
    }));
    it('should handle invalid password error', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce({
        message: 'Invalid password',
        code: 'INVALID_PASSWORD'
      });
      var response = yield (0, _gdprService.deleteAccount)({
        password: 'wrongpassword'
      });
      expect(response.success).toBe(false);
      expect(response.error).toBe('INVALID_PASSWORD');
    }));
    it('should handle server errors', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Server error'));
      var response = yield (0, _gdprService.deleteAccount)({
        password: 'correctpassword'
      });
      expect(response.success).toBe(false);
      expect(response.message).toBe('Server error');
    }));
    it('should handle rate limiting', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce({
        message: 'Too many requests',
        code: 'RATE_LIMIT'
      });
      var response = yield (0, _gdprService.deleteAccount)({
        password: 'correctpassword'
      });
      expect(response.success).toBe(false);
      expect(response.error).toBe('RATE_LIMIT');
    }));
    it('should handle already deleting account', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce({
        message: 'Deletion already in progress',
        code: 'ALREADY_DELETING'
      });
      var response = yield (0, _gdprService.deleteAccount)({
        password: 'correctpassword'
      });
      expect(response.success).toBe(false);
      expect(response.error).toBe('ALREADY_DELETING');
    }));
  });
  describe('cancelDeletion', function () {
    it('should cancel account deletion successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Account deletion cancelled'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.cancelDeletion)();
      expect(response).toEqual(mockResponse);
      expect(_api.request).toHaveBeenCalledWith('/api/users/cancel-deletion', {
        method: 'POST'
      });
    }));
    it('should handle cancellation errors', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Network error'));
      var response = yield (0, _gdprService.cancelDeletion)();
      expect(response.success).toBe(false);
      expect(response.message).toBe('Network error');
    }));
    it('should handle errors during cancellation', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce({
        message: 'Cancellation failed'
      });
      var response = yield (0, _gdprService.cancelDeletion)();
      expect(response.success).toBe(false);
      expect(response.message).toBe('Cancellation failed');
    }));
  });
  describe('getAccountStatus', function () {
    it('should get account status successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        status: 'pending',
        scheduledDeletionDate: '2024-02-01T00:00:00Z',
        daysRemaining: 14,
        canCancel: true,
        requestId: 'del-123'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.getAccountStatus)();
      expect(response).toEqual(mockResponse);
      expect(_api.request).toHaveBeenCalledWith('/api/account/status', {
        method: 'GET'
      });
    }));
    it('should return not-found when no deletion request exists', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        status: 'not-found'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.getAccountStatus)();
      expect(response.status).toBe('not-found');
    }));
    it('should handle errors when getting status', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Network error'));
      var response = yield (0, _gdprService.getAccountStatus)();
      expect(response.success).toBe(false);
      expect(response.status).toBe('not-found');
    }));
    it('should handle processing status', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        status: 'processing',
        requestId: 'del-123'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.getAccountStatus)();
      expect(response.status).toBe('processing');
    }));
    it('should handle completed deletion status', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        status: 'completed',
        requestId: 'del-123'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.getAccountStatus)();
      expect(response.status).toBe('completed');
    }));
  });
  describe('exportUserData', function () {
    it('should export user data with defaults', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        exportId: 'export-123',
        estimatedTime: '5 minutes',
        message: 'Export started',
        exportData: {
          profile: {
            name: 'Test User',
            email: 'test@example.com'
          },
          matches: [{
            id: '1'
          }]
        }
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.exportUserData)();
      expect(response).toEqual(mockResponse);
      expect(_api.request).toHaveBeenCalledWith('/api/users/request-export', {
        method: 'POST',
        body: {
          format: 'json',
          includeMessages: true,
          includeMatches: true,
          includeProfileData: true,
          includePreferences: true
        }
      });
    }));
    it('should export specific data types only', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        exportId: 'export-123',
        estimatedTime: '2 minutes',
        message: 'Export started',
        exportData: {
          profile: {
            name: 'Test User'
          }
        }
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.exportUserData)({
        format: 'csv',
        includeMessages: false,
        includeMatches: false,
        includeProfileData: true,
        includePreferences: false
      });
      expect(response).toEqual(mockResponse);
      expect(_api.request).toHaveBeenCalledWith('/api/users/request-export', {
        method: 'POST',
        body: {
          format: 'csv',
          includeMessages: false,
          includeMatches: false,
          includeProfileData: true,
          includePreferences: false
        }
      });
    }));
    it('should handle export errors', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Export failed'));
      var response = yield (0, _gdprService.exportUserData)();
      expect(response.success).toBe(false);
      expect(response.message).toBe('Failed to export data');
      expect(response.error).toBe('SERVER_ERROR');
    }));
    it('should handle large exports', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        exportId: 'export-123',
        estimatedTime: '30 minutes',
        message: 'Large export started'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.exportUserData)({
        includeMessages: true,
        includeMatches: true,
        includeProfileData: true,
        includePreferences: true
      });
      expect(response.estimatedTime).toBe('30 minutes');
    }));
  });
  describe('downloadExport', function () {
    it('should download exported data successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockExportStatus = {
        url: 'https://example.com/export/export-123.json'
      };
      var mockBlob = new Blob(['exported data'], {
        type: 'application/json'
      });
      _api.request.mockResolvedValueOnce(mockExportStatus);
      global.fetch = jest.fn().mockResolvedValueOnce({
        ok: true,
        blob: function blob() {
          return Promise.resolve(mockBlob);
        }
      });
      var response = yield (0, _gdprService.downloadExport)('export-123');
      expect(response).toBe(mockBlob);
      expect(_api.request).toHaveBeenCalledWith('/api/users/export-data?exportId=export-123', {
        method: 'GET'
      });
    }));
    it('should handle download errors', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Download failed'));
      yield expect((0, _gdprService.downloadExport)('export-123')).rejects.toThrow('Download failed');
    }));
    it('should handle missing export ID', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Export not found'));
      yield expect((0, _gdprService.downloadExport)('invalid-export-id')).rejects.toThrow('Export not found');
    }));
  });
  describe('Edge Cases', function () {
    it('should handle network timeouts during deletion', (0, _asyncToGenerator2.default)(function* () {
      var timeoutError = new Error('Request timeout');
      _api.request.mockRejectedValueOnce(timeoutError);
      var response = yield (0, _gdprService.deleteAccount)({
        password: 'correctpassword'
      });
      expect(response.success).toBe(false);
    }));
    it('should handle malformed responses', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: null,
        deletionId: null
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.deleteAccount)({
        password: 'correctpassword'
      });
      expect(response.success).toBe(true);
    }));
    it('should handle concurrent deletion requests', (0, _asyncToGenerator2.default)(function* () {
      var _responses$;
      var mockResponse = {
        success: true,
        message: 'Account deletion requested'
      };
      _api.request.mockResolvedValue(mockResponse);
      var responses = yield Promise.all([(0, _gdprService.deleteAccount)({
        password: 'password'
      }), (0, _gdprService.deleteAccount)({
        password: 'password'
      }), (0, _gdprService.deleteAccount)({
        password: 'password'
      })]);
      expect(responses).toHaveLength(3);
      expect((_responses$ = responses[0]) == null ? void 0 : _responses$.success).toBe(true);
    }));
    it('should handle export with no data', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        exportId: 'export-123',
        estimatedTime: '1 minute',
        message: 'Export completed',
        exportData: {}
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield (0, _gdprService.exportUserData)({
        includeMessages: false,
        includeMatches: false,
        includeProfileData: false,
        includePreferences: false
      });
      expect(response.exportData).toEqual({});
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,