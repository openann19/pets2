748d2199308d091381bf484fe4d5e12d
"use strict";

_getJestObj().mock("../api", function () {
  return {
    request: _globals.jest.fn(),
    api: {
      get: _globals.jest.fn(),
      post: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _verificationService = require("../verificationService");
var _api = require("../api");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRequest = _api.request;
(0, _globals.describe)('VerificationService', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('getStatus', function () {
    (0, _globals.it)('should retrieve verification status successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockStatus = {
        tier: 'tier1',
        verified: true,
        badges: ['identity_verified', 'pet_owner'],
        status: 'approved',
        submittedAt: new Date('2024-01-01'),
        reviewedAt: new Date('2024-01-02'),
        requirements: {
          identity: 'completed',
          petOwnership: 'completed'
        }
      };
      mockRequest.mockResolvedValueOnce(mockStatus);
      var result = yield _verificationService.verificationService.getStatus();
      (0, _globals.expect)(result).toEqual(mockStatus);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/status', {
        method: 'GET'
      });
    }));
    (0, _globals.it)('should handle API errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('API Error'));
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow('API Error');
    }));
    (0, _globals.it)('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Network Error'));
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow('Network Error');
    }));
  });
  (0, _globals.describe)('submitIdentityVerification', function () {
    var mockIdentityData = {
      idDocument: {
        front: 'front-doc-url',
        back: 'back-doc-url'
      },
      selfie: 'selfie-url',
      personalInfo: {
        legalName: 'John Doe',
        dateOfBirth: '1990-01-01',
        address: {
          street: '123 Main St',
          city: 'New York',
          state: 'NY',
          zipCode: '10001',
          country: 'USA'
        },
        phone: '+1234567890'
      },
      consentToDataProcessing: true
    };
    (0, _globals.it)('should submit identity verification successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        tier: 'tier1',
        verified: false,
        badges: [],
        status: 'pending_review',
        submittedAt: new Date()
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitIdentityVerification(mockIdentityData);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/identity', {
        method: 'POST',
        body: mockIdentityData
      });
    }));
    (0, _globals.it)('should handle submission errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Submission failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitIdentityVerification(mockIdentityData)).rejects.toThrow('Submission failed');
    }));
    (0, _globals.it)('should handle validation errors', (0, _asyncToGenerator2.default)(function* () {
      var invalidData = _objectSpread(_objectSpread({}, mockIdentityData), {}, {
        personalInfo: _objectSpread(_objectSpread({}, mockIdentityData.personalInfo), {}, {
          legalName: ''
        })
      });
      mockRequest.mockRejectedValueOnce(new Error('Validation failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitIdentityVerification(invalidData)).rejects.toThrow('Validation failed');
    }));
  });
  (0, _globals.describe)('submitPetOwnershipVerification', function () {
    var mockPetOwnershipData = {
      primaryProof: {
        type: 'registration',
        documentUrl: 'registration-doc-url'
      },
      secondaryProof: {
        type: 'selfie_with_pet',
        documentUrl: 'selfie-url'
      },
      petInfo: {
        petId: 'pet123',
        petName: 'Buddy',
        species: 'Dog',
        breed: 'Golden Retriever'
      }
    };
    (0, _globals.it)('should submit pet ownership verification successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        tier: 'tier2',
        verified: false,
        badges: ['pet_owner'],
        status: 'in_progress',
        submittedAt: new Date()
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitPetOwnershipVerification(mockPetOwnershipData);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/pet-ownership', {
        method: 'POST',
        body: mockPetOwnershipData
      });
    }));
    (0, _globals.it)('should handle different proof types', (0, _asyncToGenerator2.default)(function* () {
      var microchipData = _objectSpread(_objectSpread({}, mockPetOwnershipData), {}, {
        secondaryProof: {
          type: 'microchip_number',
          microchipNumber: '123456789'
        }
      });
      var mockResponse = {
        tier: 'tier2',
        verified: false,
        badges: ['pet_owner'],
        status: 'pending_review'
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitPetOwnershipVerification(microchipData);
      (0, _globals.expect)(result.status).toBe('pending_review');
    }));
    (0, _globals.it)('should handle submission errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Pet verification failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitPetOwnershipVerification(mockPetOwnershipData)).rejects.toThrow('Pet verification failed');
    }));
  });
  (0, _globals.describe)('submitVeterinaryVerification', function () {
    var mockVeterinaryData = {
      veterinaryDocuments: {
        vaccinationRecord: 'vaccination-url',
        spayNeuterProof: 'spay-neuter-url',
        healthCertificate: 'health-cert-url'
      },
      vetClinicInfo: {
        name: 'Happy Paws Veterinary',
        city: 'New York',
        state: 'NY',
        country: 'USA'
      },
      piiRedacted: true
    };
    (0, _globals.it)('should submit veterinary verification successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        tier: 'tier3',
        verified: false,
        badges: ['veterinary_verified'],
        status: 'pending_review',
        submittedAt: new Date()
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitVeterinaryVerification(mockVeterinaryData);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/veterinary', {
        method: 'POST',
        body: mockVeterinaryData
      });
    }));
    (0, _globals.it)('should handle minimal veterinary data', (0, _asyncToGenerator2.default)(function* () {
      var minimalData = {
        veterinaryDocuments: {
          vaccinationRecord: 'vaccination-url'
        },
        vetClinicInfo: {
          name: 'Vet Clinic',
          city: 'City',
          country: 'Country'
        },
        piiRedacted: false
      };
      var mockResponse = {
        tier: 'tier3',
        verified: false,
        status: 'in_progress'
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitVeterinaryVerification(minimalData);
      (0, _globals.expect)(result.tier).toBe('tier3');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/veterinary', {
        method: 'POST',
        body: minimalData
      });
    }));
    (0, _globals.it)('should handle veterinary submission errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Veterinary verification failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitVeterinaryVerification(mockVeterinaryData)).rejects.toThrow('Veterinary verification failed');
    }));
  });
  (0, _globals.describe)('submitOrganizationVerification', function () {
    var mockOrganizationData = {
      organizationType: 'shelter',
      documents: {
        licenseOrRegistration: 'license-url',
        businessRegistration: 'business-reg-url',
        website: 'https://example-shelter.com'
      },
      selfieAtFacility: 'selfie-facility-url',
      publicListingUrl: 'https://shelter-listing.com'
    };
    (0, _globals.it)('should submit organization verification successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        tier: 'tier4',
        verified: false,
        badges: ['organization_verified'],
        status: 'pending_review',
        submittedAt: new Date()
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitOrganizationVerification(mockOrganizationData);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/organization', {
        method: 'POST',
        body: mockOrganizationData
      });
    }));
    (0, _globals.it)('should handle different organization types', (0, _asyncToGenerator2.default)(function* () {
      var breederData = _objectSpread(_objectSpread({}, mockOrganizationData), {}, {
        organizationType: 'breeder'
      });
      var mockResponse = {
        tier: 'tier4',
        verified: false,
        badges: ['breeder_verified'],
        status: 'in_progress'
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitOrganizationVerification(breederData);
      (0, _globals.expect)(result.badges).toContain('breeder_verified');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/organization', {
        method: 'POST',
        body: breederData
      });
    }));
    (0, _globals.it)('should handle minimal organization data', (0, _asyncToGenerator2.default)(function* () {
      var minimalData = {
        organizationType: 'rescue',
        documents: {
          licenseOrRegistration: 'license-url'
        }
      };
      var mockResponse = {
        tier: 'tier4',
        verified: false,
        status: 'pending_review'
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitOrganizationVerification(minimalData);
      (0, _globals.expect)(result.tier).toBe('tier4');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/organization', {
        method: 'POST',
        body: minimalData
      });
    }));
    (0, _globals.it)('should handle organization submission errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Organization verification failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitOrganizationVerification(mockOrganizationData)).rejects.toThrow('Organization verification failed');
    }));
  });
  (0, _globals.describe)('getRequirements', function () {
    (0, _globals.it)('should retrieve tier requirements successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockRequirements = ['Valid government-issued ID', 'Clear selfie photo', 'Address verification'];
      mockRequest.mockResolvedValueOnce({
        requirements: mockRequirements
      });
      var result = yield _verificationService.verificationService.getRequirements('tier1');
      (0, _globals.expect)(result).toEqual(mockRequirements);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/requirements/tier1', {
        method: 'GET'
      });
    }));
    (0, _globals.it)('should handle requirements retrieval errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Requirements not found'));
      yield (0, _globals.expect)(_verificationService.verificationService.getRequirements('tier5')).rejects.toThrow('Requirements not found');
    }));
  });
  (0, _globals.describe)('cancelVerification', function () {
    (0, _globals.it)('should cancel verification successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      yield (0, _globals.expect)(_verificationService.verificationService.cancelVerification('verification-123')).resolves.not.toThrow();
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/verification-123/cancel', {
        method: 'POST'
      });
    }));
    (0, _globals.it)('should handle cancellation errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Cannot cancel completed verification'));
      yield (0, _globals.expect)(_verificationService.verificationService.cancelVerification('verification-123')).rejects.toThrow('Cannot cancel completed verification');
    }));
  });
  (0, _globals.describe)('getBadges', function () {
    (0, _globals.it)('should retrieve user badges successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockBadges = ['identity_verified', 'pet_owner', 'veterinary_verified'];
      mockRequest.mockResolvedValueOnce({
        badges: mockBadges
      });
      var result = yield _verificationService.verificationService.getBadges();
      (0, _globals.expect)(result).toEqual(mockBadges);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/badges', {
        method: 'GET'
      });
    }));
    (0, _globals.it)('should handle empty badges list', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        badges: []
      });
      var result = yield _verificationService.verificationService.getBadges();
      (0, _globals.expect)(result).toEqual([]);
    }));
    (0, _globals.it)('should handle badge retrieval errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Badges not available'));
      yield (0, _globals.expect)(_verificationService.verificationService.getBadges()).rejects.toThrow('Badges not available');
    }));
  });
  (0, _globals.describe)('hasTier', function () {
    (0, _globals.it)('should check tier availability successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        hasTier: true
      });
      var result = yield _verificationService.verificationService.hasTier('tier2');
      (0, _globals.expect)(result).toBe(true);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/has-tier/tier2', {
        method: 'GET'
      });
    }));
    (0, _globals.it)('should return false for unavailable tier', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        hasTier: false
      });
      var result = yield _verificationService.verificationService.hasTier('tier4');
      (0, _globals.expect)(result).toBe(false);
    }));
    (0, _globals.it)('should handle tier checking errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Tier check failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.hasTier('tier3')).rejects.toThrow('Tier check failed');
    }));
  });
  (0, _globals.describe)('uploadDocument', function () {
    (0, _globals.beforeEach)(function () {
      global.FormData = _globals.jest.fn(function () {
        return {
          append: _globals.jest.fn()
        };
      });
    });
    (0, _globals.it)('should upload document successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockFormData = {
        append: _globals.jest.fn()
      };
      global.FormData.mockImplementation(function () {
        return mockFormData;
      });
      mockRequest.mockResolvedValueOnce({
        url: 'uploaded-doc-url'
      });
      var result = yield _verificationService.verificationService.uploadDocument('file://document.jpg', 'identity_document', 'tier1');
      (0, _globals.expect)(result).toBe('uploaded-doc-url');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/upload', {
        method: 'POST',
        body: mockFormData,
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        params: {
          documentType: 'identity_document',
          verificationType: 'tier1'
        }
      });
    }));
    (0, _globals.it)('should upload document without verification type', (0, _asyncToGenerator2.default)(function* () {
      var mockFormData = {
        append: _globals.jest.fn()
      };
      global.FormData.mockImplementation(function () {
        return mockFormData;
      });
      mockRequest.mockResolvedValueOnce({
        url: 'uploaded-doc-url'
      });
      var result = yield _verificationService.verificationService.uploadDocument('file://document.jpg', 'pet_proof');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/upload', {
        method: 'POST',
        body: mockFormData,
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        params: {
          documentType: 'pet_proof',
          verificationType: undefined
        }
      });
    }));
    (0, _globals.it)('should handle upload errors', (0, _asyncToGenerator2.default)(function* () {
      var mockFormData = {
        append: _globals.jest.fn()
      };
      global.FormData.mockImplementation(function () {
        return mockFormData;
      });
      mockRequest.mockRejectedValueOnce(new Error('Upload failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.uploadDocument('file://document.jpg', 'identity_document')).rejects.toThrow('Upload failed');
    }));
    (0, _globals.it)('should handle FormData creation errors', (0, _asyncToGenerator2.default)(function* () {
      global.FormData.mockImplementation(function () {
        throw new Error('FormData not available');
      });
      mockRequest.mockResolvedValueOnce({
        url: 'uploaded-doc-url'
      });
      yield (0, _globals.expect)(_verificationService.verificationService.uploadDocument('file://document.jpg', 'document')).rejects.toThrow('FormData not available');
    }));
  });
  (0, _globals.describe)('requestStatusUpdate', function () {
    (0, _globals.it)('should request status update successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      yield (0, _globals.expect)(_verificationService.verificationService.requestStatusUpdate()).resolves.not.toThrow();
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/request-update', {
        method: 'POST'
      });
    }));
    (0, _globals.it)('should handle status update request errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Status update failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.requestStatusUpdate()).rejects.toThrow('Status update failed');
    }));
  });
  (0, _globals.describe)('Error Handling and Edge Cases', function () {
    (0, _globals.it)('should handle malformed API responses', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(null);
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow();
    }));
    (0, _globals.it)('should handle network timeouts', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Request timeout'));
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow('Request timeout');
    }));
    (0, _globals.it)('should handle unauthorized access', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Unauthorized'));
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow('Unauthorized');
    }));
    (0, _globals.it)('should handle server errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Internal server error'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitIdentityVerification({})).rejects.toThrow('Internal server error');
    }));
    (0, _globals.it)('should handle concurrent requests', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        tier: 'tier0',
        verified: false,
        badges: [],
        status: 'not_started'
      });
      var promises = [_verificationService.verificationService.getStatus(), _verificationService.verificationService.getStatus(), _verificationService.verificationService.getStatus()];
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toHaveLength(3);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(3);
    }));
    (0, _globals.it)('should handle large data payloads', (0, _asyncToGenerator2.default)(function* () {
      var largeIdentityData = {
        idDocument: {
          front: 'A'.repeat(1000),
          back: 'B'.repeat(1000)
        },
        selfie: 'C'.repeat(1000),
        personalInfo: {
          legalName: 'John Doe',
          dateOfBirth: '1990-01-01',
          address: {
            street: '123 Main St',
            city: 'New York',
            state: 'NY',
            zipCode: '10001',
            country: 'USA'
          },
          phone: '+1234567890'
        },
        consentToDataProcessing: true
      };
      mockRequest.mockResolvedValueOnce({
        tier: 'tier1',
        verified: false,
        status: 'pending_review'
      });
      var result = yield _verificationService.verificationService.submitIdentityVerification(largeIdentityData);
      (0, _globals.expect)(result.status).toBe('pending_review');
    }));
  });
  (0, _globals.describe)('Data Validation', function () {
    (0, _globals.it)('should handle invalid tier names', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Invalid tier'));
      yield (0, _globals.expect)(_verificationService.verificationService.getRequirements('invalid-tier')).rejects.toThrow('Invalid tier');
    }));
    (0, _globals.it)('should handle invalid verification IDs', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Invalid verification ID'));
      yield (0, _globals.expect)(_verificationService.verificationService.cancelVerification('invalid-id')).rejects.toThrow('Invalid verification ID');
    }));
    (0, _globals.it)('should handle empty file uploads', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Empty file'));
      yield (0, _globals.expect)(_verificationService.verificationService.uploadDocument('', 'document')).rejects.toThrow('Empty file');
    }));
    (0, _globals.it)('should handle unsupported document types', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Unsupported document type'));
      yield (0, _globals.expect)(_verificationService.verificationService.uploadDocument('file://document.exe', 'executable')).rejects.toThrow('Unsupported document type');
    }));
  });
  (0, _globals.describe)('Status Transitions', function () {
    (0, _globals.it)('should handle tier progression', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        tier: 'tier0',
        verified: false,
        badges: [],
        status: 'not_started'
      });
      var status = yield _verificationService.verificationService.getStatus();
      (0, _globals.expect)(status.tier).toBe('tier0');
      mockRequest.mockResolvedValueOnce({
        tier: 'tier1',
        verified: false,
        badges: ['identity_verified'],
        status: 'approved'
      });
      status = yield _verificationService.verificationService.submitIdentityVerification({});
      (0, _globals.expect)(status.tier).toBe('tier1');
      (0, _globals.expect)(status.badges).toContain('identity_verified');
    }));
    (0, _globals.it)('should handle verification rejection', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        tier: 'tier1',
        verified: false,
        badges: [],
        status: 'rejected',
        rejectionReason: 'Document unclear'
      });
      var status = yield _verificationService.verificationService.submitIdentityVerification({});
      (0, _globals.expect)(status.status).toBe('rejected');
      (0, _globals.expect)(status.rejectionReason).toBe('Document unclear');
    }));
    (0, _globals.it)('should handle pending review status', (0, _asyncToGenerator2.default)(function* () {
      var submittedAt = new Date();
      mockRequest.mockResolvedValueOnce({
        tier: 'tier2',
        verified: false,
        badges: ['pet_owner'],
        status: 'pending_review',
        submittedAt: submittedAt
      });
      var status = yield _verificationService.verificationService.submitPetOwnershipVerification({});
      (0, _globals.expect)(status.status).toBe('pending_review');
      (0, _globals.expect)(status.submittedAt).toBeInstanceOf(Date);
    }));
  });
  (0, _globals.describe)('Integration Scenarios', function () {
    (0, _globals.it)('should handle complete verification workflow', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        tier: 'tier0',
        verified: false,
        badges: [],
        status: 'not_started'
      });
      var status = yield _verificationService.verificationService.getStatus();
      (0, _globals.expect)(status.tier).toBe('tier0');
      mockRequest.mockResolvedValueOnce({
        tier: 'tier1',
        verified: true,
        badges: ['identity_verified'],
        status: 'approved'
      });
      status = yield _verificationService.verificationService.submitIdentityVerification({});
      (0, _globals.expect)(status.tier).toBe('tier1');
      (0, _globals.expect)(status.verified).toBe(true);
      mockRequest.mockResolvedValueOnce({
        badges: ['identity_verified']
      });
      var badges = yield _verificationService.verificationService.getBadges();
      (0, _globals.expect)(badges).toContain('identity_verified');
      mockRequest.mockResolvedValueOnce({
        hasTier: true
      });
      var hasTier = yield _verificationService.verificationService.hasTier('tier1');
      (0, _globals.expect)(hasTier).toBe(true);
    }));
    (0, _globals.it)('should handle document upload workflow', (0, _asyncToGenerator2.default)(function* () {
      var mockFormData = {
        append: _globals.jest.fn()
      };
      global.FormData.mockImplementation(function () {
        return mockFormData;
      });
      mockRequest.mockResolvedValueOnce({
        url: 'uploaded-identity-url'
      });
      var identityUrl = yield _verificationService.verificationService.uploadDocument('file://identity.jpg', 'identity_document', 'tier1');
      (0, _globals.expect)(identityUrl).toBe('uploaded-identity-url');
      mockRequest.mockResolvedValueOnce({
        url: 'uploaded-pet-url'
      });
      var petUrl = yield _verificationService.verificationService.uploadDocument('file://pet-registration.pdf', 'pet_registration', 'tier2');
      (0, _globals.expect)(petUrl).toBe('uploaded-pet-url');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyZXF1ZXN0IiwiamVzdCIsImZuIiwiYXBpIiwiZ2V0IiwicG9zdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2RlZmluZVByb3BlcnR5MiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9nbG9iYWxzIiwiX3ZlcmlmaWNhdGlvblNlcnZpY2UiLCJfYXBpIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiZGVmYXVsdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfcmVxdWlyZSIsIm1vY2tSZXF1ZXN0IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwibW9ja1N0YXR1cyIsInRpZXIiLCJ2ZXJpZmllZCIsImJhZGdlcyIsInN0YXR1cyIsInN1Ym1pdHRlZEF0IiwiRGF0ZSIsInJldmlld2VkQXQiLCJyZXF1aXJlbWVudHMiLCJpZGVudGl0eSIsInBldE93bmVyc2hpcCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsInJlc3VsdCIsInZlcmlmaWNhdGlvblNlcnZpY2UiLCJnZXRTdGF0dXMiLCJleHBlY3QiLCJ0b0VxdWFsIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJtZXRob2QiLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiLCJFcnJvciIsInJlamVjdHMiLCJ0b1Rocm93IiwibW9ja0lkZW50aXR5RGF0YSIsImlkRG9jdW1lbnQiLCJmcm9udCIsImJhY2siLCJzZWxmaWUiLCJwZXJzb25hbEluZm8iLCJsZWdhbE5hbWUiLCJkYXRlT2ZCaXJ0aCIsImFkZHJlc3MiLCJzdHJlZXQiLCJjaXR5Iiwic3RhdGUiLCJ6aXBDb2RlIiwiY291bnRyeSIsInBob25lIiwiY29uc2VudFRvRGF0YVByb2Nlc3NpbmciLCJtb2NrUmVzcG9uc2UiLCJzdWJtaXRJZGVudGl0eVZlcmlmaWNhdGlvbiIsImJvZHkiLCJpbnZhbGlkRGF0YSIsIm1vY2tQZXRPd25lcnNoaXBEYXRhIiwicHJpbWFyeVByb29mIiwidHlwZSIsImRvY3VtZW50VXJsIiwic2Vjb25kYXJ5UHJvb2YiLCJwZXRJbmZvIiwicGV0SWQiLCJwZXROYW1lIiwic3BlY2llcyIsImJyZWVkIiwic3VibWl0UGV0T3duZXJzaGlwVmVyaWZpY2F0aW9uIiwibWljcm9jaGlwRGF0YSIsIm1pY3JvY2hpcE51bWJlciIsInRvQmUiLCJtb2NrVmV0ZXJpbmFyeURhdGEiLCJ2ZXRlcmluYXJ5RG9jdW1lbnRzIiwidmFjY2luYXRpb25SZWNvcmQiLCJzcGF5TmV1dGVyUHJvb2YiLCJoZWFsdGhDZXJ0aWZpY2F0ZSIsInZldENsaW5pY0luZm8iLCJuYW1lIiwicGlpUmVkYWN0ZWQiLCJzdWJtaXRWZXRlcmluYXJ5VmVyaWZpY2F0aW9uIiwibWluaW1hbERhdGEiLCJtb2NrT3JnYW5pemF0aW9uRGF0YSIsIm9yZ2FuaXphdGlvblR5cGUiLCJkb2N1bWVudHMiLCJsaWNlbnNlT3JSZWdpc3RyYXRpb24iLCJidXNpbmVzc1JlZ2lzdHJhdGlvbiIsIndlYnNpdGUiLCJzZWxmaWVBdEZhY2lsaXR5IiwicHVibGljTGlzdGluZ1VybCIsInN1Ym1pdE9yZ2FuaXphdGlvblZlcmlmaWNhdGlvbiIsImJyZWVkZXJEYXRhIiwidG9Db250YWluIiwibW9ja1JlcXVpcmVtZW50cyIsImdldFJlcXVpcmVtZW50cyIsInN1Y2Nlc3MiLCJjYW5jZWxWZXJpZmljYXRpb24iLCJyZXNvbHZlcyIsIm5vdCIsIm1vY2tCYWRnZXMiLCJnZXRCYWRnZXMiLCJoYXNUaWVyIiwiZ2xvYmFsIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJtb2NrRm9ybURhdGEiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJ1cmwiLCJ1cGxvYWREb2N1bWVudCIsImhlYWRlcnMiLCJwYXJhbXMiLCJkb2N1bWVudFR5cGUiLCJ2ZXJpZmljYXRpb25UeXBlIiwidW5kZWZpbmVkIiwicmVxdWVzdFN0YXR1c1VwZGF0ZSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwicHJvbWlzZXMiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsInRvSGF2ZUxlbmd0aCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsImxhcmdlSWRlbnRpdHlEYXRhIiwicmVwZWF0IiwicmVqZWN0aW9uUmVhc29uIiwidG9CZUluc3RhbmNlT2YiLCJpZGVudGl0eVVybCIsInBldFVybCJdLCJzb3VyY2VzIjpbInZlcmlmaWNhdGlvblNlcnZpY2UudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbXByZWhlbnNpdmUgdGVzdHMgZm9yIFZlcmlmaWNhdGlvblNlcnZpY2VcbiAqXG4gKiBDb3ZlcmFnZTpcbiAqIC0gVmVyaWZpY2F0aW9uIHN0YXR1cyByZXRyaWV2YWwgYW5kIG1hbmFnZW1lbnRcbiAqIC0gTXVsdGktdGllciB2ZXJpZmljYXRpb24gc3VibWlzc2lvbiAoSWRlbnRpdHksIFBldCBPd25lcnNoaXAsIFZldGVyaW5hcnksIE9yZ2FuaXphdGlvbilcbiAqIC0gRG9jdW1lbnQgdXBsb2FkIGZ1bmN0aW9uYWxpdHlcbiAqIC0gQmFkZ2UgYW5kIHRpZXIgY2hlY2tpbmdcbiAqIC0gUmVxdWlyZW1lbnRzIGZldGNoaW5nXG4gKiAtIFZlcmlmaWNhdGlvbiBjYW5jZWxsYXRpb25cbiAqIC0gU3RhdHVzIHVwZGF0ZXMgYW5kIGVycm9yIGhhbmRsaW5nXG4gKiAtIERhdGEgdmFsaWRhdGlvbiBhbmQgZWRnZSBjYXNlc1xuICovXG5cbmltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBqZXN0LCBiZWZvcmVFYWNoIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyB2ZXJpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vdmVyaWZpY2F0aW9uU2VydmljZSc7XG5cbi8vIE1vY2sgdGhlIEFQSSBzZXJ2aWNlXG5qZXN0Lm1vY2soJy4uL2FwaScsICgpID0+ICh7XG4gIHJlcXVlc3Q6IGplc3QuZm4oKSxcbiAgYXBpOiB7XG4gICAgZ2V0OiBqZXN0LmZuKCksXG4gICAgcG9zdDogamVzdC5mbigpLFxuICB9LFxufSkpO1xuXG5pbXBvcnQgeyByZXF1ZXN0IH0gZnJvbSAnLi4vYXBpJztcblxuY29uc3QgbW9ja1JlcXVlc3QgPSByZXF1ZXN0IGFzIGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIHJlcXVlc3Q+O1xuXG5kZXNjcmliZSgnVmVyaWZpY2F0aW9uU2VydmljZScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRTdGF0dXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXRyaWV2ZSB2ZXJpZmljYXRpb24gc3RhdHVzIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tTdGF0dXMgPSB7XG4gICAgICAgIHRpZXI6ICd0aWVyMScgYXMgY29uc3QsXG4gICAgICAgIHZlcmlmaWVkOiB0cnVlLFxuICAgICAgICBiYWRnZXM6IFsnaWRlbnRpdHlfdmVyaWZpZWQnLCAncGV0X293bmVyJ10sXG4gICAgICAgIHN0YXR1czogJ2FwcHJvdmVkJyBhcyBjb25zdCxcbiAgICAgICAgc3VibWl0dGVkQXQ6IG5ldyBEYXRlKCcyMDI0LTAxLTAxJyksXG4gICAgICAgIHJldmlld2VkQXQ6IG5ldyBEYXRlKCcyMDI0LTAxLTAyJyksXG4gICAgICAgIHJlcXVpcmVtZW50czoge1xuICAgICAgICAgIGlkZW50aXR5OiAnY29tcGxldGVkJyxcbiAgICAgICAgICBwZXRPd25lcnNoaXA6ICdjb21wbGV0ZWQnLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tTdGF0dXMpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLmdldFN0YXR1cygpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tTdGF0dXMpO1xuICAgICAgZXhwZWN0KG1vY2tSZXF1ZXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3ZlcmlmaWNhdGlvbi9zdGF0dXMnLCB7IG1ldGhvZDogJ0dFVCcgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBBUEkgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignQVBJIEVycm9yJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QodmVyaWZpY2F0aW9uU2VydmljZS5nZXRTdGF0dXMoKSkucmVqZWN0cy50b1Rocm93KCdBUEkgRXJyb3InKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG5ldHdvcmsgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignTmV0d29yayBFcnJvcicpKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHZlcmlmaWNhdGlvblNlcnZpY2UuZ2V0U3RhdHVzKCkpLnJlamVjdHMudG9UaHJvdygnTmV0d29yayBFcnJvcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc3VibWl0SWRlbnRpdHlWZXJpZmljYXRpb24nLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0lkZW50aXR5RGF0YSA9IHtcbiAgICAgIGlkRG9jdW1lbnQ6IHtcbiAgICAgICAgZnJvbnQ6ICdmcm9udC1kb2MtdXJsJyxcbiAgICAgICAgYmFjazogJ2JhY2stZG9jLXVybCcsXG4gICAgICB9LFxuICAgICAgc2VsZmllOiAnc2VsZmllLXVybCcsXG4gICAgICBwZXJzb25hbEluZm86IHtcbiAgICAgICAgbGVnYWxOYW1lOiAnSm9obiBEb2UnLFxuICAgICAgICBkYXRlT2ZCaXJ0aDogJzE5OTAtMDEtMDEnLFxuICAgICAgICBhZGRyZXNzOiB7XG4gICAgICAgICAgc3RyZWV0OiAnMTIzIE1haW4gU3QnLFxuICAgICAgICAgIGNpdHk6ICdOZXcgWW9yaycsXG4gICAgICAgICAgc3RhdGU6ICdOWScsXG4gICAgICAgICAgemlwQ29kZTogJzEwMDAxJyxcbiAgICAgICAgICBjb3VudHJ5OiAnVVNBJyxcbiAgICAgICAgfSxcbiAgICAgICAgcGhvbmU6ICcrMTIzNDU2Nzg5MCcsXG4gICAgICB9LFxuICAgICAgY29uc2VudFRvRGF0YVByb2Nlc3Npbmc6IHRydWUsXG4gICAgfTtcblxuICAgIGl0KCdzaG91bGQgc3VibWl0IGlkZW50aXR5IHZlcmlmaWNhdGlvbiBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIHRpZXI6ICd0aWVyMScgYXMgY29uc3QsXG4gICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgYmFkZ2VzOiBbXSxcbiAgICAgICAgc3RhdHVzOiAncGVuZGluZ19yZXZpZXcnIGFzIGNvbnN0LFxuICAgICAgICBzdWJtaXR0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZShtb2NrUmVzcG9uc2UpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLnN1Ym1pdElkZW50aXR5VmVyaWZpY2F0aW9uKG1vY2tJZGVudGl0eURhdGEpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tSZXNwb25zZSk7XG4gICAgICBleHBlY3QobW9ja1JlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvdmVyaWZpY2F0aW9uL2lkZW50aXR5JywgeyBtZXRob2Q6ICdQT1NUJywgYm9keTogbW9ja0lkZW50aXR5RGF0YSB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHN1Ym1pc3Npb24gZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignU3VibWlzc2lvbiBmYWlsZWQnKSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgdmVyaWZpY2F0aW9uU2VydmljZS5zdWJtaXRJZGVudGl0eVZlcmlmaWNhdGlvbihtb2NrSWRlbnRpdHlEYXRhKVxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coJ1N1Ym1pc3Npb24gZmFpbGVkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB2YWxpZGF0aW9uIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGludmFsaWREYXRhID0ge1xuICAgICAgICAuLi5tb2NrSWRlbnRpdHlEYXRhLFxuICAgICAgICBwZXJzb25hbEluZm86IHtcbiAgICAgICAgICAuLi5tb2NrSWRlbnRpdHlEYXRhLnBlcnNvbmFsSW5mbyxcbiAgICAgICAgICBsZWdhbE5hbWU6ICcnLCAvLyBJbnZhbGlkIGVtcHR5IG5hbWVcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ1ZhbGlkYXRpb24gZmFpbGVkJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHZlcmlmaWNhdGlvblNlcnZpY2Uuc3VibWl0SWRlbnRpdHlWZXJpZmljYXRpb24oaW52YWxpZERhdGEpXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnVmFsaWRhdGlvbiBmYWlsZWQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3N1Ym1pdFBldE93bmVyc2hpcFZlcmlmaWNhdGlvbicsICgpID0+IHtcbiAgICBjb25zdCBtb2NrUGV0T3duZXJzaGlwRGF0YSA9IHtcbiAgICAgIHByaW1hcnlQcm9vZjoge1xuICAgICAgICB0eXBlOiAncmVnaXN0cmF0aW9uJyBhcyBjb25zdCxcbiAgICAgICAgZG9jdW1lbnRVcmw6ICdyZWdpc3RyYXRpb24tZG9jLXVybCcsXG4gICAgICB9LFxuICAgICAgc2Vjb25kYXJ5UHJvb2Y6IHtcbiAgICAgICAgdHlwZTogJ3NlbGZpZV93aXRoX3BldCcgYXMgY29uc3QsXG4gICAgICAgIGRvY3VtZW50VXJsOiAnc2VsZmllLXVybCcsXG4gICAgICB9LFxuICAgICAgcGV0SW5mbzoge1xuICAgICAgICBwZXRJZDogJ3BldDEyMycsXG4gICAgICAgIHBldE5hbWU6ICdCdWRkeScsXG4gICAgICAgIHNwZWNpZXM6ICdEb2cnLFxuICAgICAgICBicmVlZDogJ0dvbGRlbiBSZXRyaWV2ZXInLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgaXQoJ3Nob3VsZCBzdWJtaXQgcGV0IG93bmVyc2hpcCB2ZXJpZmljYXRpb24gc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICB0aWVyOiAndGllcjInIGFzIGNvbnN0LFxuICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgIGJhZGdlczogWydwZXRfb3duZXInXSxcbiAgICAgICAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnIGFzIGNvbnN0LFxuICAgICAgICBzdWJtaXR0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZShtb2NrUmVzcG9uc2UpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLnN1Ym1pdFBldE93bmVyc2hpcFZlcmlmaWNhdGlvbihtb2NrUGV0T3duZXJzaGlwRGF0YSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1Jlc3BvbnNlKTtcbiAgICAgIGV4cGVjdChtb2NrUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy92ZXJpZmljYXRpb24vcGV0LW93bmVyc2hpcCcsIHsgbWV0aG9kOiAnUE9TVCcsIGJvZHk6IG1vY2tQZXRPd25lcnNoaXBEYXRhIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZGlmZmVyZW50IHByb29mIHR5cGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWljcm9jaGlwRGF0YSA9IHtcbiAgICAgICAgLi4ubW9ja1BldE93bmVyc2hpcERhdGEsXG4gICAgICAgIHNlY29uZGFyeVByb29mOiB7XG4gICAgICAgICAgdHlwZTogJ21pY3JvY2hpcF9udW1iZXInIGFzIGNvbnN0LFxuICAgICAgICAgIG1pY3JvY2hpcE51bWJlcjogJzEyMzQ1Njc4OScsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIHRpZXI6ICd0aWVyMicgYXMgY29uc3QsXG4gICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgYmFkZ2VzOiBbJ3BldF9vd25lciddLFxuICAgICAgICBzdGF0dXM6ICdwZW5kaW5nX3JldmlldycgYXMgY29uc3QsXG4gICAgICB9O1xuXG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5zdWJtaXRQZXRPd25lcnNoaXBWZXJpZmljYXRpb24obWljcm9jaGlwRGF0YSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzKS50b0JlKCdwZW5kaW5nX3JldmlldycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc3VibWlzc2lvbiBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdQZXQgdmVyaWZpY2F0aW9uIGZhaWxlZCcpKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICB2ZXJpZmljYXRpb25TZXJ2aWNlLnN1Ym1pdFBldE93bmVyc2hpcFZlcmlmaWNhdGlvbihtb2NrUGV0T3duZXJzaGlwRGF0YSlcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdQZXQgdmVyaWZpY2F0aW9uIGZhaWxlZCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc3VibWl0VmV0ZXJpbmFyeVZlcmlmaWNhdGlvbicsICgpID0+IHtcbiAgICBjb25zdCBtb2NrVmV0ZXJpbmFyeURhdGEgPSB7XG4gICAgICB2ZXRlcmluYXJ5RG9jdW1lbnRzOiB7XG4gICAgICAgIHZhY2NpbmF0aW9uUmVjb3JkOiAndmFjY2luYXRpb24tdXJsJyxcbiAgICAgICAgc3BheU5ldXRlclByb29mOiAnc3BheS1uZXV0ZXItdXJsJyxcbiAgICAgICAgaGVhbHRoQ2VydGlmaWNhdGU6ICdoZWFsdGgtY2VydC11cmwnLFxuICAgICAgfSxcbiAgICAgIHZldENsaW5pY0luZm86IHtcbiAgICAgICAgbmFtZTogJ0hhcHB5IFBhd3MgVmV0ZXJpbmFyeScsXG4gICAgICAgIGNpdHk6ICdOZXcgWW9yaycsXG4gICAgICAgIHN0YXRlOiAnTlknLFxuICAgICAgICBjb3VudHJ5OiAnVVNBJyxcbiAgICAgIH0sXG4gICAgICBwaWlSZWRhY3RlZDogdHJ1ZSxcbiAgICB9O1xuXG4gICAgaXQoJ3Nob3VsZCBzdWJtaXQgdmV0ZXJpbmFyeSB2ZXJpZmljYXRpb24gc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICB0aWVyOiAndGllcjMnIGFzIGNvbnN0LFxuICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgIGJhZGdlczogWyd2ZXRlcmluYXJ5X3ZlcmlmaWVkJ10sXG4gICAgICAgIHN0YXR1czogJ3BlbmRpbmdfcmV2aWV3JyBhcyBjb25zdCxcbiAgICAgICAgc3VibWl0dGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuXG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5zdWJtaXRWZXRlcmluYXJ5VmVyaWZpY2F0aW9uKG1vY2tWZXRlcmluYXJ5RGF0YSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1Jlc3BvbnNlKTtcbiAgICAgIGV4cGVjdChtb2NrUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy92ZXJpZmljYXRpb24vdmV0ZXJpbmFyeScsIHsgbWV0aG9kOiAnUE9TVCcsIGJvZHk6IG1vY2tWZXRlcmluYXJ5RGF0YSB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1pbmltYWwgdmV0ZXJpbmFyeSBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWluaW1hbERhdGEgPSB7XG4gICAgICAgIHZldGVyaW5hcnlEb2N1bWVudHM6IHtcbiAgICAgICAgICB2YWNjaW5hdGlvblJlY29yZDogJ3ZhY2NpbmF0aW9uLXVybCcsXG4gICAgICAgIH0sXG4gICAgICAgIHZldENsaW5pY0luZm86IHtcbiAgICAgICAgICBuYW1lOiAnVmV0IENsaW5pYycsXG4gICAgICAgICAgY2l0eTogJ0NpdHknLFxuICAgICAgICAgIGNvdW50cnk6ICdDb3VudHJ5JyxcbiAgICAgICAgfSxcbiAgICAgICAgcGlpUmVkYWN0ZWQ6IGZhbHNlLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICB0aWVyOiAndGllcjMnIGFzIGNvbnN0LFxuICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgIHN0YXR1czogJ2luX3Byb2dyZXNzJyBhcyBjb25zdCxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZShtb2NrUmVzcG9uc2UpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLnN1Ym1pdFZldGVyaW5hcnlWZXJpZmljYXRpb24obWluaW1hbERhdGEpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnRpZXIpLnRvQmUoJ3RpZXIzJyk7XG4gICAgICBleHBlY3QobW9ja1JlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvdmVyaWZpY2F0aW9uL3ZldGVyaW5hcnknLCB7IG1ldGhvZDogJ1BPU1QnLCBib2R5OiBtaW5pbWFsRGF0YSB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHZldGVyaW5hcnkgc3VibWlzc2lvbiBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdWZXRlcmluYXJ5IHZlcmlmaWNhdGlvbiBmYWlsZWQnKSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgdmVyaWZpY2F0aW9uU2VydmljZS5zdWJtaXRWZXRlcmluYXJ5VmVyaWZpY2F0aW9uKG1vY2tWZXRlcmluYXJ5RGF0YSlcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdWZXRlcmluYXJ5IHZlcmlmaWNhdGlvbiBmYWlsZWQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3N1Ym1pdE9yZ2FuaXphdGlvblZlcmlmaWNhdGlvbicsICgpID0+IHtcbiAgICBjb25zdCBtb2NrT3JnYW5pemF0aW9uRGF0YSA9IHtcbiAgICAgIG9yZ2FuaXphdGlvblR5cGU6ICdzaGVsdGVyJyBhcyBjb25zdCxcbiAgICAgIGRvY3VtZW50czoge1xuICAgICAgICBsaWNlbnNlT3JSZWdpc3RyYXRpb246ICdsaWNlbnNlLXVybCcsXG4gICAgICAgIGJ1c2luZXNzUmVnaXN0cmF0aW9uOiAnYnVzaW5lc3MtcmVnLXVybCcsXG4gICAgICAgIHdlYnNpdGU6ICdodHRwczovL2V4YW1wbGUtc2hlbHRlci5jb20nLFxuICAgICAgfSxcbiAgICAgIHNlbGZpZUF0RmFjaWxpdHk6ICdzZWxmaWUtZmFjaWxpdHktdXJsJyxcbiAgICAgIHB1YmxpY0xpc3RpbmdVcmw6ICdodHRwczovL3NoZWx0ZXItbGlzdGluZy5jb20nLFxuICAgIH07XG5cbiAgICBpdCgnc2hvdWxkIHN1Ym1pdCBvcmdhbml6YXRpb24gdmVyaWZpY2F0aW9uIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgdGllcjogJ3RpZXI0JyBhcyBjb25zdCxcbiAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgICBiYWRnZXM6IFsnb3JnYW5pemF0aW9uX3ZlcmlmaWVkJ10sXG4gICAgICAgIHN0YXR1czogJ3BlbmRpbmdfcmV2aWV3JyBhcyBjb25zdCxcbiAgICAgICAgc3VibWl0dGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuXG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5zdWJtaXRPcmdhbml6YXRpb25WZXJpZmljYXRpb24obW9ja09yZ2FuaXphdGlvbkRhdGEpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tSZXNwb25zZSk7XG4gICAgICBleHBlY3QobW9ja1JlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvdmVyaWZpY2F0aW9uL29yZ2FuaXphdGlvbicsIHsgbWV0aG9kOiAnUE9TVCcsIGJvZHk6IG1vY2tPcmdhbml6YXRpb25EYXRhIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZGlmZmVyZW50IG9yZ2FuaXphdGlvbiB0eXBlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJyZWVkZXJEYXRhID0ge1xuICAgICAgICAuLi5tb2NrT3JnYW5pemF0aW9uRGF0YSxcbiAgICAgICAgb3JnYW5pemF0aW9uVHlwZTogJ2JyZWVkZXInIGFzIGNvbnN0LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICB0aWVyOiAndGllcjQnIGFzIGNvbnN0LFxuICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgIGJhZGdlczogWydicmVlZGVyX3ZlcmlmaWVkJ10sXG4gICAgICAgIHN0YXR1czogJ2luX3Byb2dyZXNzJyBhcyBjb25zdCxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZShtb2NrUmVzcG9uc2UpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZ2FuaXphdGlvblZlcmlmaWNhdGlvbihicmVlZGVyRGF0YSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuYmFkZ2VzKS50b0NvbnRhaW4oJ2JyZWVkZXJfdmVyaWZpZWQnKTtcbiAgICAgIGV4cGVjdChtb2NrUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy92ZXJpZmljYXRpb24vb3JnYW5pemF0aW9uJywgeyBtZXRob2Q6ICdQT1NUJywgYm9keTogYnJlZWRlckRhdGEgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtaW5pbWFsIG9yZ2FuaXphdGlvbiBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWluaW1hbERhdGEgPSB7XG4gICAgICAgIG9yZ2FuaXphdGlvblR5cGU6ICdyZXNjdWUnIGFzIGNvbnN0LFxuICAgICAgICBkb2N1bWVudHM6IHtcbiAgICAgICAgICBsaWNlbnNlT3JSZWdpc3RyYXRpb246ICdsaWNlbnNlLXVybCcsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIHRpZXI6ICd0aWVyNCcgYXMgY29uc3QsXG4gICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiAncGVuZGluZ19yZXZpZXcnIGFzIGNvbnN0LFxuICAgICAgfTtcblxuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZlcmlmaWNhdGlvblNlcnZpY2Uuc3VibWl0T3JnYW5pemF0aW9uVmVyaWZpY2F0aW9uKG1pbmltYWxEYXRhKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC50aWVyKS50b0JlKCd0aWVyNCcpO1xuICAgICAgZXhwZWN0KG1vY2tSZXF1ZXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3ZlcmlmaWNhdGlvbi9vcmdhbml6YXRpb24nLCB7IG1ldGhvZDogJ1BPU1QnLCBib2R5OiBtaW5pbWFsRGF0YSB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG9yZ2FuaXphdGlvbiBzdWJtaXNzaW9uIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ09yZ2FuaXphdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHZlcmlmaWNhdGlvblNlcnZpY2Uuc3VibWl0T3JnYW5pemF0aW9uVmVyaWZpY2F0aW9uKG1vY2tPcmdhbml6YXRpb25EYXRhKVxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coJ09yZ2FuaXphdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRSZXF1aXJlbWVudHMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXRyaWV2ZSB0aWVyIHJlcXVpcmVtZW50cyBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVxdWlyZW1lbnRzID0gW1xuICAgICAgICAnVmFsaWQgZ292ZXJubWVudC1pc3N1ZWQgSUQnLFxuICAgICAgICAnQ2xlYXIgc2VsZmllIHBob3RvJyxcbiAgICAgICAgJ0FkZHJlc3MgdmVyaWZpY2F0aW9uJyxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IHJlcXVpcmVtZW50czogbW9ja1JlcXVpcmVtZW50cyB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5nZXRSZXF1aXJlbWVudHMoJ3RpZXIxJyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1JlcXVpcmVtZW50cyk7XG4gICAgICBleHBlY3QobW9ja1JlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvdmVyaWZpY2F0aW9uL3JlcXVpcmVtZW50cy90aWVyMScsIHsgbWV0aG9kOiAnR0VUJyB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJlcXVpcmVtZW50cyByZXRyaWV2YWwgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignUmVxdWlyZW1lbnRzIG5vdCBmb3VuZCcpKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHZlcmlmaWNhdGlvblNlcnZpY2UuZ2V0UmVxdWlyZW1lbnRzKCd0aWVyNScpKS5yZWplY3RzLnRvVGhyb3coJ1JlcXVpcmVtZW50cyBub3QgZm91bmQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NhbmNlbFZlcmlmaWNhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNhbmNlbCB2ZXJpZmljYXRpb24gc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgc3VjY2VzczogdHJ1ZSB9KTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICB2ZXJpZmljYXRpb25TZXJ2aWNlLmNhbmNlbFZlcmlmaWNhdGlvbigndmVyaWZpY2F0aW9uLTEyMycpXG4gICAgICApLnJlc29sdmVzLm5vdC50b1Rocm93KCk7XG5cbiAgICAgIGV4cGVjdChtb2NrUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy92ZXJpZmljYXRpb24vdmVyaWZpY2F0aW9uLTEyMy9jYW5jZWwnLCB7IG1ldGhvZDogJ1BPU1QnIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2FuY2VsbGF0aW9uIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ0Nhbm5vdCBjYW5jZWwgY29tcGxldGVkIHZlcmlmaWNhdGlvbicpKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICB2ZXJpZmljYXRpb25TZXJ2aWNlLmNhbmNlbFZlcmlmaWNhdGlvbigndmVyaWZpY2F0aW9uLTEyMycpXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnQ2Fubm90IGNhbmNlbCBjb21wbGV0ZWQgdmVyaWZpY2F0aW9uJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRCYWRnZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXRyaWV2ZSB1c2VyIGJhZGdlcyBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrQmFkZ2VzID0gWydpZGVudGl0eV92ZXJpZmllZCcsICdwZXRfb3duZXInLCAndmV0ZXJpbmFyeV92ZXJpZmllZCddO1xuXG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBiYWRnZXM6IG1vY2tCYWRnZXMgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZlcmlmaWNhdGlvblNlcnZpY2UuZ2V0QmFkZ2VzKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja0JhZGdlcyk7XG4gICAgICBleHBlY3QobW9ja1JlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvdmVyaWZpY2F0aW9uL2JhZGdlcycsIHsgbWV0aG9kOiAnR0VUJyB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IGJhZGdlcyBsaXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgYmFkZ2VzOiBbXSB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5nZXRCYWRnZXMoKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbXSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBiYWRnZSByZXRyaWV2YWwgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignQmFkZ2VzIG5vdCBhdmFpbGFibGUnKSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh2ZXJpZmljYXRpb25TZXJ2aWNlLmdldEJhZGdlcygpKS5yZWplY3RzLnRvVGhyb3coJ0JhZGdlcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdoYXNUaWVyJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2hlY2sgdGllciBhdmFpbGFiaWxpdHkgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgaGFzVGllcjogdHJ1ZSB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5oYXNUaWVyKCd0aWVyMicpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KG1vY2tSZXF1ZXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3ZlcmlmaWNhdGlvbi9oYXMtdGllci90aWVyMicsIHsgbWV0aG9kOiAnR0VUJyB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGZhbHNlIGZvciB1bmF2YWlsYWJsZSB0aWVyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgaGFzVGllcjogZmFsc2UgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZlcmlmaWNhdGlvblNlcnZpY2UuaGFzVGllcigndGllcjQnKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB0aWVyIGNoZWNraW5nIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ1RpZXIgY2hlY2sgZmFpbGVkJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QodmVyaWZpY2F0aW9uU2VydmljZS5oYXNUaWVyKCd0aWVyMycpKS5yZWplY3RzLnRvVGhyb3coJ1RpZXIgY2hlY2sgZmFpbGVkJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd1cGxvYWREb2N1bWVudCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIC8vIE1vY2sgRm9ybURhdGFcbiAgICAgIGdsb2JhbC5Gb3JtRGF0YSA9IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgYXBwZW5kOiBqZXN0LmZuKCksXG4gICAgICB9KSkgYXMgYW55O1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1cGxvYWQgZG9jdW1lbnQgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0Zvcm1EYXRhID0ge1xuICAgICAgICBhcHBlbmQ6IGplc3QuZm4oKSxcbiAgICAgIH07XG4gICAgICAoZ2xvYmFsLkZvcm1EYXRhIGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IG1vY2tGb3JtRGF0YSk7XG5cbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IHVybDogJ3VwbG9hZGVkLWRvYy11cmwnIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLnVwbG9hZERvY3VtZW50KFxuICAgICAgICAnZmlsZTovL2RvY3VtZW50LmpwZycsXG4gICAgICAgICdpZGVudGl0eV9kb2N1bWVudCcsXG4gICAgICAgICd0aWVyMSdcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ3VwbG9hZGVkLWRvYy11cmwnKTtcbiAgICAgIGV4cGVjdChtb2NrUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy92ZXJpZmljYXRpb24vdXBsb2FkJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogbW9ja0Zvcm1EYXRhLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJyxcbiAgICAgICAgfSxcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZG9jdW1lbnRUeXBlOiAnaWRlbnRpdHlfZG9jdW1lbnQnLFxuICAgICAgICAgIHZlcmlmaWNhdGlvblR5cGU6ICd0aWVyMScsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXBsb2FkIGRvY3VtZW50IHdpdGhvdXQgdmVyaWZpY2F0aW9uIHR5cGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrRm9ybURhdGEgPSB7XG4gICAgICAgIGFwcGVuZDogamVzdC5mbigpLFxuICAgICAgfTtcbiAgICAgIChnbG9iYWwuRm9ybURhdGEgYXMgamVzdC5Nb2NrKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja0Zvcm1EYXRhKTtcblxuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgdXJsOiAndXBsb2FkZWQtZG9jLXVybCcgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZlcmlmaWNhdGlvblNlcnZpY2UudXBsb2FkRG9jdW1lbnQoJ2ZpbGU6Ly9kb2N1bWVudC5qcGcnLCAncGV0X3Byb29mJyk7XG5cbiAgICAgIGV4cGVjdChtb2NrUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy92ZXJpZmljYXRpb24vdXBsb2FkJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogbW9ja0Zvcm1EYXRhLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJyxcbiAgICAgICAgfSxcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZG9jdW1lbnRUeXBlOiAncGV0X3Byb29mJyxcbiAgICAgICAgICB2ZXJpZmljYXRpb25UeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHVwbG9hZCBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrRm9ybURhdGEgPSB7XG4gICAgICAgIGFwcGVuZDogamVzdC5mbigpLFxuICAgICAgfTtcbiAgICAgIChnbG9iYWwuRm9ybURhdGEgYXMgamVzdC5Nb2NrKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja0Zvcm1EYXRhKTtcblxuICAgICAgbW9ja1JlcXVlc3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignVXBsb2FkIGZhaWxlZCcpKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICB2ZXJpZmljYXRpb25TZXJ2aWNlLnVwbG9hZERvY3VtZW50KCdmaWxlOi8vZG9jdW1lbnQuanBnJywgJ2lkZW50aXR5X2RvY3VtZW50JylcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdVcGxvYWQgZmFpbGVkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBGb3JtRGF0YSBjcmVhdGlvbiBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAoZ2xvYmFsLkZvcm1EYXRhIGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3JtRGF0YSBub3QgYXZhaWxhYmxlJyk7XG4gICAgICB9KTtcblxuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgdXJsOiAndXBsb2FkZWQtZG9jLXVybCcgfSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgdmVyaWZpY2F0aW9uU2VydmljZS51cGxvYWREb2N1bWVudCgnZmlsZTovL2RvY3VtZW50LmpwZycsICdkb2N1bWVudCcpXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnRm9ybURhdGEgbm90IGF2YWlsYWJsZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVxdWVzdFN0YXR1c1VwZGF0ZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlcXVlc3Qgc3RhdHVzIHVwZGF0ZSBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBzdWNjZXNzOiB0cnVlIH0pO1xuXG4gICAgICBhd2FpdCBleHBlY3QodmVyaWZpY2F0aW9uU2VydmljZS5yZXF1ZXN0U3RhdHVzVXBkYXRlKCkpLnJlc29sdmVzLm5vdC50b1Rocm93KCk7XG5cbiAgICAgIGV4cGVjdChtb2NrUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy92ZXJpZmljYXRpb24vcmVxdWVzdC11cGRhdGUnLCB7IG1ldGhvZDogJ1BPU1QnIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc3RhdHVzIHVwZGF0ZSByZXF1ZXN0IGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ1N0YXR1cyB1cGRhdGUgZmFpbGVkJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QodmVyaWZpY2F0aW9uU2VydmljZS5yZXF1ZXN0U3RhdHVzVXBkYXRlKCkpLnJlamVjdHMudG9UaHJvdygnU3RhdHVzIHVwZGF0ZSBmYWlsZWQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Vycm9yIEhhbmRsaW5nIGFuZCBFZGdlIENhc2VzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1hbGZvcm1lZCBBUEkgcmVzcG9uc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG51bGwpO1xuXG4gICAgICBhd2FpdCBleHBlY3QodmVyaWZpY2F0aW9uU2VydmljZS5nZXRTdGF0dXMoKSkucmVqZWN0cy50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBuZXR3b3JrIHRpbWVvdXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignUmVxdWVzdCB0aW1lb3V0JykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QodmVyaWZpY2F0aW9uU2VydmljZS5nZXRTdGF0dXMoKSkucmVqZWN0cy50b1Rocm93KCdSZXF1ZXN0IHRpbWVvdXQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHVuYXV0aG9yaXplZCBhY2Nlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdVbmF1dGhvcml6ZWQnKSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh2ZXJpZmljYXRpb25TZXJ2aWNlLmdldFN0YXR1cygpKS5yZWplY3RzLnRvVGhyb3coJ1VuYXV0aG9yaXplZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc2VydmVyIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ0ludGVybmFsIHNlcnZlciBlcnJvcicpKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICB2ZXJpZmljYXRpb25TZXJ2aWNlLnN1Ym1pdElkZW50aXR5VmVyaWZpY2F0aW9uKHt9IGFzIGFueSlcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNvbmN1cnJlbnQgcmVxdWVzdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHRpZXI6ICd0aWVyMCcgYXMgY29uc3QsXG4gICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgYmFkZ2VzOiBbXSxcbiAgICAgICAgc3RhdHVzOiAnbm90X3N0YXJ0ZWQnIGFzIGNvbnN0XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXG4gICAgICAgIHZlcmlmaWNhdGlvblNlcnZpY2UuZ2V0U3RhdHVzKCksXG4gICAgICAgIHZlcmlmaWNhdGlvblNlcnZpY2UuZ2V0U3RhdHVzKCksXG4gICAgICAgIHZlcmlmaWNhdGlvblNlcnZpY2UuZ2V0U3RhdHVzKCksXG4gICAgICBdO1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXG4gICAgICBleHBlY3QocmVzdWx0cykudG9IYXZlTGVuZ3RoKDMpO1xuICAgICAgZXhwZWN0KG1vY2tSZXF1ZXN0KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBsYXJnZSBkYXRhIHBheWxvYWRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbGFyZ2VJZGVudGl0eURhdGEgPSB7XG4gICAgICAgIGlkRG9jdW1lbnQ6IHtcbiAgICAgICAgICBmcm9udDogJ0EnLnJlcGVhdCgxMDAwKSwgLy8gTGFyZ2UgVVJML2RhdGFcbiAgICAgICAgICBiYWNrOiAnQicucmVwZWF0KDEwMDApLFxuICAgICAgICB9LFxuICAgICAgICBzZWxmaWU6ICdDJy5yZXBlYXQoMTAwMCksXG4gICAgICAgIHBlcnNvbmFsSW5mbzoge1xuICAgICAgICAgIGxlZ2FsTmFtZTogJ0pvaG4gRG9lJyxcbiAgICAgICAgICBkYXRlT2ZCaXJ0aDogJzE5OTAtMDEtMDEnLFxuICAgICAgICAgIGFkZHJlc3M6IHtcbiAgICAgICAgICAgIHN0cmVldDogJzEyMyBNYWluIFN0JyxcbiAgICAgICAgICAgIGNpdHk6ICdOZXcgWW9yaycsXG4gICAgICAgICAgICBzdGF0ZTogJ05ZJyxcbiAgICAgICAgICAgIHppcENvZGU6ICcxMDAwMScsXG4gICAgICAgICAgICBjb3VudHJ5OiAnVVNBJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBob25lOiAnKzEyMzQ1Njc4OTAnLFxuICAgICAgICB9LFxuICAgICAgICBjb25zZW50VG9EYXRhUHJvY2Vzc2luZzogdHJ1ZSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IHRpZXI6ICd0aWVyMScsIHZlcmlmaWVkOiBmYWxzZSwgc3RhdHVzOiAncGVuZGluZ19yZXZpZXcnIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLnN1Ym1pdElkZW50aXR5VmVyaWZpY2F0aW9uKGxhcmdlSWRlbnRpdHlEYXRhKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdGF0dXMpLnRvQmUoJ3BlbmRpbmdfcmV2aWV3Jyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEYXRhIFZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgaW52YWxpZCB0aWVyIG5hbWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignSW52YWxpZCB0aWVyJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QodmVyaWZpY2F0aW9uU2VydmljZS5nZXRSZXF1aXJlbWVudHMoJ2ludmFsaWQtdGllcicpKS5yZWplY3RzLnRvVGhyb3coJ0ludmFsaWQgdGllcicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgaW52YWxpZCB2ZXJpZmljYXRpb24gSURzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignSW52YWxpZCB2ZXJpZmljYXRpb24gSUQnKSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh2ZXJpZmljYXRpb25TZXJ2aWNlLmNhbmNlbFZlcmlmaWNhdGlvbignaW52YWxpZC1pZCcpKS5yZWplY3RzLnRvVGhyb3coJ0ludmFsaWQgdmVyaWZpY2F0aW9uIElEJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBmaWxlIHVwbG9hZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdFbXB0eSBmaWxlJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHZlcmlmaWNhdGlvblNlcnZpY2UudXBsb2FkRG9jdW1lbnQoJycsICdkb2N1bWVudCcpXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnRW1wdHkgZmlsZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgdW5zdXBwb3J0ZWQgZG9jdW1lbnQgdHlwZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdVbnN1cHBvcnRlZCBkb2N1bWVudCB0eXBlJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHZlcmlmaWNhdGlvblNlcnZpY2UudXBsb2FkRG9jdW1lbnQoJ2ZpbGU6Ly9kb2N1bWVudC5leGUnLCAnZXhlY3V0YWJsZScpXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnVW5zdXBwb3J0ZWQgZG9jdW1lbnQgdHlwZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU3RhdHVzIFRyYW5zaXRpb25zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIHRpZXIgcHJvZ3Jlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBTdGFydCB3aXRoIHRpZXIwXG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICB0aWVyOiAndGllcjAnIGFzIGNvbnN0LFxuICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgIGJhZGdlczogW10sXG4gICAgICAgIHN0YXR1czogJ25vdF9zdGFydGVkJyBhcyBjb25zdFxuICAgICAgfSk7XG5cbiAgICAgIGxldCBzdGF0dXMgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLmdldFN0YXR1cygpO1xuICAgICAgZXhwZWN0KHN0YXR1cy50aWVyKS50b0JlKCd0aWVyMCcpO1xuXG4gICAgICAvLyBQcm9ncmVzcyB0byB0aWVyMVxuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgdGllcjogJ3RpZXIxJyBhcyBjb25zdCxcbiAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgICBiYWRnZXM6IFsnaWRlbnRpdHlfdmVyaWZpZWQnXSxcbiAgICAgICAgc3RhdHVzOiAnYXBwcm92ZWQnIGFzIGNvbnN0XG4gICAgICB9KTtcblxuICAgICAgc3RhdHVzID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5zdWJtaXRJZGVudGl0eVZlcmlmaWNhdGlvbih7fSBhcyBhbnkpO1xuICAgICAgZXhwZWN0KHN0YXR1cy50aWVyKS50b0JlKCd0aWVyMScpO1xuICAgICAgZXhwZWN0KHN0YXR1cy5iYWRnZXMpLnRvQ29udGFpbignaWRlbnRpdHlfdmVyaWZpZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHZlcmlmaWNhdGlvbiByZWplY3Rpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUmVxdWVzdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICB0aWVyOiAndGllcjEnIGFzIGNvbnN0LFxuICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgIGJhZGdlczogW10sXG4gICAgICAgIHN0YXR1czogJ3JlamVjdGVkJyBhcyBjb25zdCxcbiAgICAgICAgcmVqZWN0aW9uUmVhc29uOiAnRG9jdW1lbnQgdW5jbGVhcidcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLnN1Ym1pdElkZW50aXR5VmVyaWZpY2F0aW9uKHt9IGFzIGFueSk7XG5cbiAgICAgIGV4cGVjdChzdGF0dXMuc3RhdHVzKS50b0JlKCdyZWplY3RlZCcpO1xuICAgICAgZXhwZWN0KHN0YXR1cy5yZWplY3Rpb25SZWFzb24pLnRvQmUoJ0RvY3VtZW50IHVuY2xlYXInKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHBlbmRpbmcgcmV2aWV3IHN0YXR1cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHN1Ym1pdHRlZEF0ID0gbmV3IERhdGUoKTtcbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIHRpZXI6ICd0aWVyMicgYXMgY29uc3QsXG4gICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgYmFkZ2VzOiBbJ3BldF9vd25lciddLFxuICAgICAgICBzdGF0dXM6ICdwZW5kaW5nX3JldmlldycgYXMgY29uc3QsXG4gICAgICAgIHN1Ym1pdHRlZEF0XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5zdWJtaXRQZXRPd25lcnNoaXBWZXJpZmljYXRpb24oe30gYXMgYW55KTtcblxuICAgICAgZXhwZWN0KHN0YXR1cy5zdGF0dXMpLnRvQmUoJ3BlbmRpbmdfcmV2aWV3Jyk7XG4gICAgICBleHBlY3Qoc3RhdHVzLnN1Ym1pdHRlZEF0KS50b0JlSW5zdGFuY2VPZihEYXRlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0ludGVncmF0aW9uIFNjZW5hcmlvcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjb21wbGV0ZSB2ZXJpZmljYXRpb24gd29ya2Zsb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyAxLiBDaGVjayBpbml0aWFsIHN0YXR1c1xuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgdGllcjogJ3RpZXIwJyBhcyBjb25zdCxcbiAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgICBiYWRnZXM6IFtdLFxuICAgICAgICBzdGF0dXM6ICdub3Rfc3RhcnRlZCcgYXMgY29uc3RcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgc3RhdHVzID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5nZXRTdGF0dXMoKTtcbiAgICAgIGV4cGVjdChzdGF0dXMudGllcikudG9CZSgndGllcjAnKTtcblxuICAgICAgLy8gMi4gU3VibWl0IGlkZW50aXR5IHZlcmlmaWNhdGlvblxuICAgICAgbW9ja1JlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgdGllcjogJ3RpZXIxJyBhcyBjb25zdCxcbiAgICAgICAgdmVyaWZpZWQ6IHRydWUsXG4gICAgICAgIGJhZGdlczogWydpZGVudGl0eV92ZXJpZmllZCddLFxuICAgICAgICBzdGF0dXM6ICdhcHByb3ZlZCcgYXMgY29uc3RcbiAgICAgIH0pO1xuXG4gICAgICBzdGF0dXMgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLnN1Ym1pdElkZW50aXR5VmVyaWZpY2F0aW9uKHt9IGFzIGFueSk7XG4gICAgICBleHBlY3Qoc3RhdHVzLnRpZXIpLnRvQmUoJ3RpZXIxJyk7XG4gICAgICBleHBlY3Qoc3RhdHVzLnZlcmlmaWVkKS50b0JlKHRydWUpO1xuXG4gICAgICAvLyAzLiBDaGVjayBiYWRnZXNcbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIGJhZGdlczogWydpZGVudGl0eV92ZXJpZmllZCddXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYmFkZ2VzID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5nZXRCYWRnZXMoKTtcbiAgICAgIGV4cGVjdChiYWRnZXMpLnRvQ29udGFpbignaWRlbnRpdHlfdmVyaWZpZWQnKTtcblxuICAgICAgLy8gNC4gQ2hlY2sgdGllciBhdmFpbGFiaWxpdHlcbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIGhhc1RpZXI6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBoYXNUaWVyID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS5oYXNUaWVyKCd0aWVyMScpO1xuICAgICAgZXhwZWN0KGhhc1RpZXIpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBkb2N1bWVudCB1cGxvYWQgd29ya2Zsb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIEZvcm1EYXRhIGZvciBkb2N1bWVudCB1cGxvYWRcbiAgICAgIGNvbnN0IG1vY2tGb3JtRGF0YSA9IHtcbiAgICAgICAgYXBwZW5kOiBqZXN0LmZuKCksXG4gICAgICB9O1xuICAgICAgKGdsb2JhbC5Gb3JtRGF0YSBhcyBqZXN0Lk1vY2spLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBtb2NrRm9ybURhdGEpO1xuXG4gICAgICAvLyAxLiBVcGxvYWQgaWRlbnRpdHkgZG9jdW1lbnRcbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IHVybDogJ3VwbG9hZGVkLWlkZW50aXR5LXVybCcgfSk7XG5cbiAgICAgIGNvbnN0IGlkZW50aXR5VXJsID0gYXdhaXQgdmVyaWZpY2F0aW9uU2VydmljZS51cGxvYWREb2N1bWVudChcbiAgICAgICAgJ2ZpbGU6Ly9pZGVudGl0eS5qcGcnLFxuICAgICAgICAnaWRlbnRpdHlfZG9jdW1lbnQnLFxuICAgICAgICAndGllcjEnXG4gICAgICApO1xuICAgICAgZXhwZWN0KGlkZW50aXR5VXJsKS50b0JlKCd1cGxvYWRlZC1pZGVudGl0eS11cmwnKTtcblxuICAgICAgLy8gMi4gVXBsb2FkIHBldCBvd25lcnNoaXAgZG9jdW1lbnRcbiAgICAgIG1vY2tSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IHVybDogJ3VwbG9hZGVkLXBldC11cmwnIH0pO1xuXG4gICAgICBjb25zdCBwZXRVcmwgPSBhd2FpdCB2ZXJpZmljYXRpb25TZXJ2aWNlLnVwbG9hZERvY3VtZW50KFxuICAgICAgICAnZmlsZTovL3BldC1yZWdpc3RyYXRpb24ucGRmJyxcbiAgICAgICAgJ3BldF9yZWdpc3RyYXRpb24nLFxuICAgICAgICAndGllcjInXG4gICAgICApO1xuICAgICAgZXhwZWN0KHBldFVybCkudG9CZSgndXBsb2FkZWQtcGV0LXVybCcpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQWtCQUEsV0FBQSxHQUFLQyxJQUFJLFdBQVc7RUFBQSxPQUFPO0lBQ3pCQyxPQUFPLEVBQUVDLGFBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDbEJDLEdBQUcsRUFBRTtNQUNIQyxHQUFHLEVBQUVILGFBQUksQ0FBQ0MsRUFBRSxDQUFD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