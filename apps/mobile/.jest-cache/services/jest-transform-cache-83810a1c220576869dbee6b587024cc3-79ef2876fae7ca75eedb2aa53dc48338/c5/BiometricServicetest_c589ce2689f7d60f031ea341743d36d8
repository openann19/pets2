162823efd3e7a398da5adefa454e503e
"use strict";

_getJestObj().mock('expo-local-authentication');
_getJestObj().mock('expo-secure-store');
_getJestObj().mock("../logger", function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _BiometricService = require("../BiometricService");
var LocalAuthentication = _interopRequireWildcard(require("expo-local-authentication"));
var SecureStore = _interopRequireWildcard(require("expo-secure-store"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockLocalAuth = LocalAuthentication;
var mockSecureStore = SecureStore;
(0, _globals.describe)('BiometricService', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('Happy Path - Check Biometric Support', function () {
    (0, _globals.it)('should check if device has hardware support', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION]);
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.STRONG);
      var capabilities = yield _BiometricService.biometricService.checkBiometricSupport();
      (0, _globals.expect)(capabilities.hasHardware).toBe(true);
      (0, _globals.expect)(capabilities.isEnrolled).toBe(true);
      (0, _globals.expect)(capabilities.supportedTypes).toContain(LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION);
      (0, _globals.expect)(capabilities.securityLevel).toBe(LocalAuthentication.SecurityLevel.STRONG);
    }));
    (0, _globals.it)('should detect fingerprint support', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([LocalAuthentication.AuthenticationType.FINGERPRINT]);
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.STRONG);
      var capabilities = yield _BiometricService.biometricService.checkBiometricSupport();
      (0, _globals.expect)(capabilities.hasHardware).toBe(true);
      (0, _globals.expect)(capabilities.supportedTypes).toContain(LocalAuthentication.AuthenticationType.FINGERPRINT);
    }));
    (0, _globals.it)('should handle missing hardware gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(false);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(false);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([]);
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.NONE);
      var capabilities = yield _BiometricService.biometricService.checkBiometricSupport();
      (0, _globals.expect)(capabilities.hasHardware).toBe(false);
      (0, _globals.expect)(capabilities.isEnrolled).toBe(false);
      (0, _globals.expect)(capabilities.supportedTypes).toEqual([]);
    }));
  });
  (0, _globals.describe)('Happy Path - Authenticate', function () {
    (0, _globals.it)('should authenticate with Face ID successfully', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION]);
      mockLocalAuth.authenticateAsync.mockResolvedValueOnce({
        success: true,
        error: '',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.STRONG);
      var result = yield _BiometricService.biometricService.authenticate('Authenticate to access your account');
      (0, _globals.expect)(result.success).toBe(true);
      (0, _globals.expect)(result.biometricType).toBe('facial');
      (0, _globals.expect)(mockLocalAuth.authenticateAsync).toHaveBeenCalledWith({
        promptMessage: 'Authenticate to access your account',
        fallbackLabel: 'Use PIN',
        cancelLabel: 'Cancel',
        disableDeviceFallback: false
      });
    }));
    (0, _globals.it)('should authenticate with Touch ID successfully', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([LocalAuthentication.AuthenticationType.FINGERPRINT]);
      mockLocalAuth.authenticateAsync.mockResolvedValueOnce({
        success: true,
        error: '',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.STRONG);
      var result = yield _BiometricService.biometricService.authenticate();
      (0, _globals.expect)(result.success).toBe(true);
      (0, _globals.expect)(result.biometricType).toBe('fingerprint');
    }));
    (0, _globals.it)('should authenticate with iris scan successfully', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([LocalAuthentication.AuthenticationType.IRIS]);
      mockLocalAuth.authenticateAsync.mockResolvedValueOnce({
        success: true,
        error: '',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.STRONG);
      var result = yield _BiometricService.biometricService.authenticate();
      (0, _globals.expect)(result.success).toBe(true);
      (0, _globals.expect)(result.biometricType).toBe('iris');
    }));
  });
  (0, _globals.describe)('Happy Path - Enable Biometric', function () {
    (0, _globals.it)('should enable biometric authentication successfully', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValue(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValue(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValue([LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION]);
      mockLocalAuth.authenticateAsync.mockResolvedValue({
        success: true,
        error: '',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValue(LocalAuthentication.SecurityLevel.STRONG);
      mockSecureStore.setItemAsync.mockResolvedValue();
      var result = yield _BiometricService.biometricService.enableBiometric();
      (0, _globals.expect)(result).toBe(true);
      (0, _globals.expect)(mockSecureStore.setItemAsync).toHaveBeenCalledTimes(2);
      (0, _globals.expect)(mockSecureStore.setItemAsync).toHaveBeenCalledWith('biometric_enabled', 'true');
    }));
  });
  (0, _globals.describe)('Happy Path - Disable Biometric', function () {
    (0, _globals.it)('should disable biometric authentication successfully', (0, _asyncToGenerator2.default)(function* () {
      mockSecureStore.deleteItemAsync.mockResolvedValue();
      yield _BiometricService.biometricService.disableBiometric();
      (0, _globals.expect)(mockSecureStore.deleteItemAsync).toHaveBeenCalledWith('biometric_enabled');
      (0, _globals.expect)(mockSecureStore.deleteItemAsync).toHaveBeenCalledWith('biometric_type');
    }));
  });
  (0, _globals.describe)('Happy Path - Check Biometric Status', function () {
    (0, _globals.it)('should return true when biometric is enabled', (0, _asyncToGenerator2.default)(function* () {
      mockSecureStore.getItemAsync.mockResolvedValueOnce('true');
      var result = yield _BiometricService.biometricService.isBiometricEnabled();
      (0, _globals.expect)(result).toBe(true);
      (0, _globals.expect)(mockSecureStore.getItemAsync).toHaveBeenCalledWith('biometric_enabled');
    }));
    (0, _globals.it)('should return false when biometric is not enabled', (0, _asyncToGenerator2.default)(function* () {
      mockSecureStore.getItemAsync.mockResolvedValueOnce(null);
      var result = yield _BiometricService.biometricService.isBiometricEnabled();
      (0, _globals.expect)(result).toBe(false);
    }));
  });
  (0, _globals.describe)('Happy Path - Get Biometric Type Name', function () {
    (0, _globals.it)('should return correct name for facial recognition', function () {
      var name = _BiometricService.biometricService.getBiometricTypeName('facial');
      (0, _globals.expect)(name).toBe('Face ID');
    });
    (0, _globals.it)('should return correct name for fingerprint', function () {
      var name = _BiometricService.biometricService.getBiometricTypeName('fingerprint');
      (0, _globals.expect)(name).toBe('Touch ID');
    });
    (0, _globals.it)('should return correct name for iris', function () {
      var name = _BiometricService.biometricService.getBiometricTypeName('iris');
      (0, _globals.expect)(name).toBe('Iris Scan');
    });
    (0, _globals.it)('should return default name for unknown type', function () {
      var name = _BiometricService.biometricService.getBiometricTypeName('unknown');
      (0, _globals.expect)(name).toBe('Biometric Authentication');
    });
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle missing hardware error', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(false);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(false);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([]);
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.NONE);
      var result = yield _BiometricService.biometricService.authenticate();
      (0, _globals.expect)(result.success).toBe(false);
      (0, _globals.expect)(result.error).toBe('Biometric authentication not supported on this device');
    }));
    (0, _globals.it)('should handle not enrolled error', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(false);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([]);
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.NONE);
      var result = yield _BiometricService.biometricService.authenticate();
      (0, _globals.expect)(result.success).toBe(false);
      (0, _globals.expect)(result.error).toBe('No biometric authentication methods enrolled');
    }));
    (0, _globals.it)('should handle authentication failure', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION]);
      mockLocalAuth.authenticateAsync.mockResolvedValueOnce({
        success: false,
        error: 'User cancelled',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.STRONG);
      var result = yield _BiometricService.biometricService.authenticate();
      (0, _globals.expect)(result.success).toBe(false);
      (0, _globals.expect)(result.error).toBe('User cancelled');
    }));
    (0, _globals.it)('should handle biometric check errors', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockRejectedValueOnce(new Error('Hardware check failed'));
      var capabilities = yield _BiometricService.biometricService.checkBiometricSupport();
      (0, _globals.expect)(capabilities.hasHardware).toBe(false);
      (0, _globals.expect)(capabilities.isEnrolled).toBe(false);
      (0, _globals.expect)(capabilities.supportedTypes).toEqual([]);
    }));
    (0, _globals.it)('should handle enable biometric when authentication fails', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValue(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValue(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValue([]);
      mockLocalAuth.authenticateAsync.mockResolvedValue({
        success: false,
        error: 'Authentication failed',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValue(LocalAuthentication.SecurityLevel.NONE);
      var result = yield _BiometricService.biometricService.enableBiometric();
      (0, _globals.expect)(result).toBe(false);
    }));
    (0, _globals.it)('should handle errors when disabling biometric', (0, _asyncToGenerator2.default)(function* () {
      mockSecureStore.deleteItemAsync.mockRejectedValueOnce(new Error('Delete failed'));
      yield _BiometricService.biometricService.disableBiometric();
      (0, _globals.expect)(mockSecureStore.deleteItemAsync).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle errors when checking status', (0, _asyncToGenerator2.default)(function* () {
      mockSecureStore.getItemAsync.mockRejectedValueOnce(new Error('Read failed'));
      var result = yield _BiometricService.biometricService.isBiometricEnabled();
      (0, _globals.expect)(result).toBe(false);
    }));
  });
  (0, _globals.describe)('Error Handling - Enable/Disable', function () {
    (0, _globals.it)('should return false when enable fails', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValue(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValue(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValue([LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION]);
      mockLocalAuth.authenticateAsync.mockResolvedValue({
        success: true,
        error: '',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValue(LocalAuthentication.SecurityLevel.STRONG);
      mockSecureStore.setItemAsync.mockRejectedValueOnce(new Error('Storage failed'));
      var result = yield _BiometricService.biometricService.enableBiometric();
      (0, _globals.expect)(result).toBe(false);
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty authentication reason', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION]);
      mockLocalAuth.authenticateAsync.mockResolvedValueOnce({
        success: true,
        error: '',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.STRONG);
      var result = yield _BiometricService.biometricService.authenticate('');
      (0, _globals.expect)(result.success).toBe(true);
      (0, _globals.expect)(mockLocalAuth.authenticateAsync).toHaveBeenCalledWith(_globals.expect.objectContaining({
        promptMessage: 'Authenticate to access PawfectMatch'
      }));
    }));
    (0, _globals.it)('should handle unknown biometric type', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([]);
      mockLocalAuth.authenticateAsync.mockResolvedValueOnce({
        success: true,
        error: '',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.NONE);
      var result = yield _BiometricService.biometricService.authenticate();
      (0, _globals.expect)(result.biometricType).toBe('unknown');
    }));
    (0, _globals.it)('should handle multiple biometric types', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION, LocalAuthentication.AuthenticationType.FINGERPRINT]);
      mockLocalAuth.authenticateAsync.mockResolvedValueOnce({
        success: true,
        error: '',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.STRONG);
      var capabilities = yield _BiometricService.biometricService.checkBiometricSupport();
      (0, _globals.expect)(capabilities.supportedTypes.length).toBeGreaterThan(1);
    }));
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should integrate with SecureStore for persistence', (0, _asyncToGenerator2.default)(function* () {
      mockSecureStore.getItemAsync.mockResolvedValueOnce('true');
      mockSecureStore.getItemAsync.mockResolvedValueOnce('facial');
      var isEnabled = yield _BiometricService.biometricService.isBiometricEnabled();
      (0, _globals.expect)(isEnabled).toBe(true);
      (0, _globals.expect)(mockSecureStore.getItemAsync).toHaveBeenCalledWith('biometric_enabled');
    }));
    (0, _globals.it)('should integrate with LocalAuthentication for security', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValue(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValue(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValue([LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION]);
      mockLocalAuth.authenticateAsync.mockResolvedValue({
        success: true,
        error: '',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValue(LocalAuthentication.SecurityLevel.STRONG);
      mockSecureStore.setItemAsync.mockResolvedValue();
      yield _BiometricService.biometricService.enableBiometric();
      (0, _globals.expect)(mockLocalAuth.authenticateAsync).toHaveBeenCalled();
      (0, _globals.expect)(mockSecureStore.setItemAsync).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Type Safety', function () {
    (0, _globals.it)('should maintain type safety for biometric result', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION]);
      mockLocalAuth.authenticateAsync.mockResolvedValueOnce({
        success: true,
        error: '',
        warning: undefined
      });
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.STRONG);
      var result = yield _BiometricService.biometricService.authenticate();
      (0, _globals.expect)(typeof result.success).toBe('boolean');
      (0, _globals.expect)(result.biometricType).toMatch(/^(fingerprint|facial|iris|unknown)$/);
    }));
    (0, _globals.it)('should maintain type safety for capabilities', (0, _asyncToGenerator2.default)(function* () {
      mockLocalAuth.hasHardwareAsync.mockResolvedValueOnce(true);
      mockLocalAuth.isEnrolledAsync.mockResolvedValueOnce(true);
      mockLocalAuth.supportedAuthenticationTypesAsync.mockResolvedValueOnce([]);
      mockLocalAuth.getEnrolledLevelAsync.mockResolvedValueOnce(LocalAuthentication.SecurityLevel.STRONG);
      var capabilities = yield _BiometricService.biometricService.checkBiometricSupport();
      (0, _globals.expect)(typeof capabilities.hasHardware).toBe('boolean');
      (0, _globals.expect)(typeof capabilities.isEnrolled).toBe('boolean');
      (0, _globals.expect)(Array.isArray(capabilities.supportedTypes)).toBe(true);
      (0, _globals.expect)(typeof capabilities.securityLevel).toBe('string');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,