7875b332f797b3c5ef292d0216265d8a
"use strict";

_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    apiClient: {
      get: jest.fn(),
      post: jest.fn(),
      put: jest.fn(),
      patch: jest.fn(),
      delete: jest.fn()
    }
  };
});
_getJestObj().mock("../../config/environment", function () {
  return {
    API_TIMEOUT: 30000
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _api = require("../api");
var _core = require("@pawfectmatch/core");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('API Service', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('request function', function () {
    it('should make GET request successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          id: '123',
          name: 'Test'
        }
      };
      _core.apiClient.get.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _api.request)('/test/endpoint', {
        method: 'GET'
      });
      expect(_core.apiClient.get).toHaveBeenCalledWith('/test/endpoint', {
        timeout: 30000
      });
      expect(result).toEqual(mockResponse.data);
    }));
    it('should make POST request with body', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          id: '123'
        }
      };
      _core.apiClient.post.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _api.request)('/test/endpoint', {
        method: 'POST',
        body: {
          name: 'Test'
        }
      });
      expect(_core.apiClient.post).toHaveBeenCalledWith('/test/endpoint', {
        name: 'Test'
      }, {
        timeout: 30000,
        headers: {
          'Content-Type': 'application/json'
        }
      });
      expect(result).toEqual(mockResponse.data);
    }));
    it('should make PUT request', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          id: '123',
          updated: true
        }
      };
      _core.apiClient.put.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _api.request)('/test/endpoint', {
        method: 'PUT',
        body: {
          name: 'Updated'
        }
      });
      expect(_core.apiClient.put).toHaveBeenCalledWith('/test/endpoint', {
        name: 'Updated'
      }, {
        timeout: 30000,
        headers: {
          'Content-Type': 'application/json'
        }
      });
      expect(result).toEqual(mockResponse.data);
    }));
    it('should make DELETE request', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          deleted: true
        }
      };
      _core.apiClient.delete.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _api.request)('/test/endpoint', {
        method: 'DELETE'
      });
      expect(_core.apiClient.delete).toHaveBeenCalledWith('/test/endpoint', {
        timeout: 30000
      });
      expect(result).toEqual(mockResponse.data);
    }));
    it('should append query parameters', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {}
      };
      _core.apiClient.get.mockResolvedValueOnce(mockResponse);
      yield (0, _api.request)('/test/endpoint', {
        method: 'GET',
        params: {
          page: 1,
          limit: 10
        }
      });
      expect(_core.apiClient.get).toHaveBeenCalledWith('/test/endpoint?page=1&limit=10', {
        timeout: 30000
      });
    }));
    it('should handle FormData without Content-Type header', (0, _asyncToGenerator2.default)(function* () {
      var formData = new FormData();
      formData.append('file', new Blob(['test'], {
        type: 'text/plain'
      }));
      var mockResponse = {
        success: true,
        data: {
          uploaded: true
        }
      };
      _core.apiClient.post.mockResolvedValueOnce(mockResponse);
      yield (0, _api.request)('/upload', {
        method: 'POST',
        body: formData
      });
      expect(_core.apiClient.post).toHaveBeenCalledWith('/upload', formData, {
        timeout: 30000
      });
    }));
    it('should throw error when request fails', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        error: 'Request failed'
      };
      _core.apiClient.get.mockResolvedValueOnce(mockResponse);
      yield expect((0, _api.request)('/test/endpoint', {
        method: 'GET'
      })).rejects.toThrow('Request failed');
    }));
    it('should throw error when response has no data', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: null
      };
      _core.apiClient.get.mockResolvedValueOnce(mockResponse);
      yield expect((0, _api.request)('/test/endpoint', {
        method: 'GET'
      })).rejects.toThrow('Request to /test/endpoint failed: No data returned');
    }));
  });
  describe('secureRequest function', function () {
    it('should validate endpoint', (0, _asyncToGenerator2.default)(function* () {
      yield expect((0, _api.secureRequest)('../invalid-endpoint', {})).rejects.toThrow('Invalid API endpoint');
    }));
    it('should enforce rate limiting', (0, _asyncToGenerator2.default)(function* () {
      var requests = Array(101).fill(0).map(function () {
        return (0, _api.secureRequest)('/test', {});
      });
      yield expect(Promise.all(requests)).rejects.toThrow('API rate limit exceeded');
    }));
    it('should sanitize request body', (0, _asyncToGenerator2.default)(function* () {
      var maliciousBody = {
        data: '<script>alert("xss")</script>'.repeat(1000)
      };
      var mockResponse = {
        success: true,
        data: {}
      };
      _core.apiClient.post.mockResolvedValueOnce(mockResponse);
      yield (0, _api.secureRequest)('/test', {
        method: 'POST',
        body: maliciousBody
      });
      expect(_core.apiClient.post).toHaveBeenCalled();
    }));
    it('should add security headers', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {}
      };
      _core.apiClient.post.mockResolvedValueOnce(mockResponse);
      yield (0, _api.secureRequest)('/test', {
        method: 'POST',
        body: {
          test: 'data'
        }
      });
      expect(_core.apiClient.post).toHaveBeenCalledWith('/test', expect.any(Object), expect.objectContaining({
        headers: expect.objectContaining({
          'X-Requested-With': 'XMLHttpRequest',
          'Content-Type': 'application/json'
        })
      }));
    }));
  });
  describe('matchesAPI', function () {
    it('should get matches', (0, _asyncToGenerator2.default)(function* () {
      var mockMatches = [{
        id: '1'
      }, {
        id: '2'
      }];
      _core.apiClient.get.mockResolvedValueOnce({
        success: true,
        data: mockMatches
      });
      var matches = yield _api.matchesAPI.getMatches();
      expect(matches).toEqual(mockMatches);
      expect(_core.apiClient.get).toHaveBeenCalledWith('/matches', {
        timeout: 30000
      });
    }));
    it('should get liked you matches', (0, _asyncToGenerator2.default)(function* () {
      var mockMatches = [{
        id: '3'
      }];
      _core.apiClient.get.mockResolvedValueOnce({
        success: true,
        data: mockMatches
      });
      var matches = yield _api.matchesAPI.getLikedYou();
      expect(matches).toEqual(mockMatches);
      expect(_core.apiClient.get).toHaveBeenCalledWith('/matches/liked-you', {
        timeout: 30000
      });
    }));
    it('should create match', (0, _asyncToGenerator2.default)(function* () {
      var mockMatch = {
        id: '1',
        matched: true
      };
      _core.apiClient.post.mockResolvedValueOnce({
        success: true,
        data: mockMatch
      });
      var match = yield _api.matchesAPI.createMatch('pet1', 'pet2');
      expect(match).toEqual(mockMatch);
      expect(_core.apiClient.post).toHaveBeenCalledWith('/matches', {
        petId: 'pet1',
        targetPetId: 'pet2'
      }, {
        timeout: 30000,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }));
    it('should send message', (0, _asyncToGenerator2.default)(function* () {
      var mockMessage = {
        id: '1',
        content: 'Hello'
      };
      _core.apiClient.post.mockResolvedValueOnce({
        success: true,
        data: mockMessage
      });
      var message = yield _api.matchesAPI.sendMessage('match1', 'Hello');
      expect(message).toEqual(mockMessage);
      expect(_core.apiClient.post).toHaveBeenCalledWith('/matches/match1/messages', {
        content: 'Hello',
        replyTo: undefined
      }, {
        timeout: 30000,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }));
    it('should delete message', (0, _asyncToGenerator2.default)(function* () {
      _core.apiClient.delete.mockResolvedValueOnce({
        success: true,
        data: undefined
      });
      yield _api.matchesAPI.deleteMessage('match1', 'message1');
      expect(_core.apiClient.delete).toHaveBeenCalledWith('/matches/match1/messages/message1', {
        timeout: 30000
      });
    }));
    it('should unmatch', (0, _asyncToGenerator2.default)(function* () {
      _core.apiClient.delete.mockResolvedValueOnce({
        success: true,
        data: true
      });
      var result = yield _api.matchesAPI.unmatch('match1');
      expect(result).toBe(true);
      expect(_core.apiClient.delete).toHaveBeenCalledWith('/matches/match1', {
        timeout: 30000
      });
    }));
    it('should get pets with filters', (0, _asyncToGenerator2.default)(function* () {
      var mockPets = [{
        id: '1',
        name: 'Buddy'
      }];
      _core.apiClient.get.mockResolvedValueOnce({
        success: true,
        data: mockPets
      });
      var pets = yield _api.matchesAPI.getPets({
        species: 'dog',
        minAge: 2,
        maxAge: 5
      });
      expect(pets).toEqual(mockPets);
      expect(_core.apiClient.get).toHaveBeenCalledWith('/pets?species=dog&minAge=2&maxAge=5', {
        timeout: 30000
      });
    }));
  });
  describe('Error Handling', function () {
    it('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      _core.apiClient.get.mockRejectedValueOnce(new Error('Network error'));
      yield expect((0, _api.request)('/test', {
        method: 'GET'
      })).rejects.toThrow('Network error');
    }));
    it('should handle timeout errors', (0, _asyncToGenerator2.default)(function* () {
      _core.apiClient.get.mockRejectedValueOnce(new Error('Request timeout'));
      yield expect((0, _api.request)('/test', {
        method: 'GET'
      })).rejects.toThrow('Request timeout');
    }));
    it('should handle 401 unauthorized errors', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Unauthorized');
      error.response = {
        status: 401
      };
      _core.apiClient.get.mockRejectedValueOnce(error);
      yield expect((0, _api.request)('/test', {
        method: 'GET'
      })).rejects.toThrow('Unauthorized');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,