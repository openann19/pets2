25962a78a383fdaafdd563d01659e677
"use strict";

_getJestObj().mock("../api", function () {
  return {
    request: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _verificationService = require("../verificationService");
var _api = require("../api");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRequest = _api.request;
(0, _globals.describe)('VerificationService - Core Tests', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('getStatus', function () {
    (0, _globals.it)('should retrieve verification status successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockStatus = {
        tier: 'tier1',
        verified: true,
        badges: ['identity_verified'],
        status: 'approved',
        submittedAt: new Date('2024-01-01'),
        reviewedAt: new Date('2024-01-02')
      };
      mockRequest.mockResolvedValueOnce(mockStatus);
      var result = yield _verificationService.verificationService.getStatus();
      (0, _globals.expect)(result).toEqual(mockStatus);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/status', {
        method: 'GET'
      });
    }));
    (0, _globals.it)('should handle API errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('API Error'));
      yield (0, _globals.expect)(_verificationService.verificationService.getStatus()).rejects.toThrow('API Error');
    }));
  });
  (0, _globals.describe)('submitIdentityVerification', function () {
    var mockIdentityData = {
      idDocument: {
        front: 'front-doc-url',
        back: 'back-doc-url'
      },
      selfie: 'selfie-url',
      personalInfo: {
        legalName: 'John Doe',
        dateOfBirth: '1990-01-01',
        address: {
          street: '123 Main St',
          city: 'New York',
          state: 'NY',
          zipCode: '10001',
          country: 'USA'
        },
        phone: '+1234567890'
      },
      consentToDataProcessing: true
    };
    (0, _globals.it)('should submit identity verification successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        tier: 'tier1',
        verified: false,
        badges: [],
        status: 'pending_review',
        submittedAt: new Date()
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.submitIdentityVerification(mockIdentityData);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/identity', {
        method: 'POST',
        body: mockIdentityData
      });
    }));
    (0, _globals.it)('should handle submission errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Submission failed'));
      yield (0, _globals.expect)(_verificationService.verificationService.submitIdentityVerification(mockIdentityData)).rejects.toThrow('Submission failed');
    }));
  });
  (0, _globals.describe)('getRequirements', function () {
    (0, _globals.it)('should get requirements for a tier', (0, _asyncToGenerator2.default)(function* () {
      var mockRequirements = ['identity', 'petOwnership'];
      mockRequest.mockResolvedValueOnce({
        requirements: mockRequirements
      });
      var result = yield _verificationService.verificationService.getRequirements('tier2');
      (0, _globals.expect)(result).toEqual(mockRequirements);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/requirements/tier2', {
        method: 'GET'
      });
    }));
  });
  (0, _globals.describe)('hasTier', function () {
    (0, _globals.it)('should check if user has specific tier', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        hasTier: true
      });
      var result = yield _verificationService.verificationService.hasTier('tier1');
      (0, _globals.expect)(result).toBe(true);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/has-tier/tier1', {
        method: 'GET'
      });
    }));
    (0, _globals.it)('should return false if user does not have tier', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        hasTier: false
      });
      var result = yield _verificationService.verificationService.hasTier('tier2');
      (0, _globals.expect)(result).toBe(false);
    }));
  });
  (0, _globals.describe)('uploadDocument', function () {
    (0, _globals.it)('should upload document successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        url: 'uploaded-doc-url'
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield _verificationService.verificationService.uploadDocument('file://document.jpg', 'document');
      (0, _globals.expect)(result).toBe('uploaded-doc-url');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/upload', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should handle empty file uploads', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _globals.expect)(_verificationService.verificationService.uploadDocument('', 'document')).rejects.toThrow('Empty file');
    }));
  });
  (0, _globals.describe)('cancelVerification', function () {
    (0, _globals.it)('should cancel verification successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      yield (0, _globals.expect)(_verificationService.verificationService.cancelVerification('verification-123')).resolves.not.toThrow();
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/verification/verification-123/cancel', {
        method: 'POST'
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,