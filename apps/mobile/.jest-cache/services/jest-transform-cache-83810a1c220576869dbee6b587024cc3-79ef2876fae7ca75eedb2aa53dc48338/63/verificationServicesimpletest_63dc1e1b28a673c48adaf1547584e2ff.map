{"version":3,"names":["_getJestObj","mock","request","jest","fn","_interopRequireDefault","require","_asyncToGenerator2","_globals","_verificationService","_api","_require","mockRequest","describe","beforeEach","clearAllMocks","it","default","mockStatus","tier","verified","badges","status","submittedAt","Date","reviewedAt","mockResolvedValueOnce","result","verificationService","getStatus","expect","toEqual","toHaveBeenCalledWith","method","mockRejectedValueOnce","Error","rejects","toThrow","mockIdentityData","idDocument","front","back","selfie","personalInfo","legalName","dateOfBirth","address","street","city","state","zipCode","country","phone","consentToDataProcessing","mockResponse","submitIdentityVerification","body","mockRequirements","requirements","getRequirements","hasTier","toBe","url","uploadDocument","any","Object","success","cancelVerification","resolves","not"],"sources":["verificationService.simple.test.ts"],"sourcesContent":["/**\n * Simplified VerificationService Tests - Core functionality\n */\n\nimport { describe, it, expect, jest, beforeEach } from '@jest/globals';\nimport { verificationService } from '../verificationService';\n\n// Mock the API service\njest.mock('../api', () => ({\n  request: jest.fn(),\n}));\n\nimport { request } from '../api';\n\nconst mockRequest = request as jest.MockedFunction<typeof request>;\n\ndescribe('VerificationService - Core Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getStatus', () => {\n    it('should retrieve verification status successfully', async () => {\n      const mockStatus = {\n        tier: 'tier1' as const,\n        verified: true,\n        badges: ['identity_verified'],\n        status: 'approved' as const,\n        submittedAt: new Date('2024-01-01'),\n        reviewedAt: new Date('2024-01-02'),\n      };\n\n      mockRequest.mockResolvedValueOnce(mockStatus);\n\n      const result = await verificationService.getStatus();\n\n      expect(result).toEqual(mockStatus);\n      expect(mockRequest).toHaveBeenCalledWith('/verification/status', { method: 'GET' });\n    });\n\n    it('should handle API errors', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('API Error'));\n\n      await expect(verificationService.getStatus()).rejects.toThrow('API Error');\n    });\n  });\n\n  describe('submitIdentityVerification', () => {\n    const mockIdentityData = {\n      idDocument: { front: 'front-doc-url', back: 'back-doc-url' },\n      selfie: 'selfie-url',\n      personalInfo: {\n        legalName: 'John Doe',\n        dateOfBirth: '1990-01-01',\n        address: {\n          street: '123 Main St',\n          city: 'New York',\n          state: 'NY',\n          zipCode: '10001',\n          country: 'USA',\n        },\n        phone: '+1234567890',\n      },\n      consentToDataProcessing: true,\n    };\n\n    it('should submit identity verification successfully', async () => {\n      const mockResponse = {\n        tier: 'tier1' as const,\n        verified: false,\n        badges: [],\n        status: 'pending_review' as const,\n        submittedAt: new Date(),\n      };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await verificationService.submitIdentityVerification(mockIdentityData);\n\n      expect(result).toEqual(mockResponse);\n      expect(mockRequest).toHaveBeenCalledWith('/verification/identity', {\n        method: 'POST',\n        body: mockIdentityData\n      });\n    });\n\n    it('should handle submission errors', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('Submission failed'));\n\n      await expect(\n        verificationService.submitIdentityVerification(mockIdentityData)\n      ).rejects.toThrow('Submission failed');\n    });\n  });\n\n  describe('getRequirements', () => {\n    it('should get requirements for a tier', async () => {\n      const mockRequirements = ['identity', 'petOwnership'];\n\n      mockRequest.mockResolvedValueOnce({ requirements: mockRequirements });\n\n      const result = await verificationService.getRequirements('tier2');\n\n      expect(result).toEqual(mockRequirements);\n      expect(mockRequest).toHaveBeenCalledWith('/verification/requirements/tier2', { method: 'GET' });\n    });\n  });\n\n  describe('hasTier', () => {\n    it('should check if user has specific tier', async () => {\n      mockRequest.mockResolvedValueOnce({ hasTier: true });\n\n      const result = await verificationService.hasTier('tier1');\n\n      expect(result).toBe(true);\n      expect(mockRequest).toHaveBeenCalledWith('/verification/has-tier/tier1', { method: 'GET' });\n    });\n\n    it('should return false if user does not have tier', async () => {\n      mockRequest.mockResolvedValueOnce({ hasTier: false });\n\n      const result = await verificationService.hasTier('tier2');\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('uploadDocument', () => {\n    it('should upload document successfully', async () => {\n      const mockResponse = { url: 'uploaded-doc-url' };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await verificationService.uploadDocument('file://document.jpg', 'document');\n\n      expect(result).toBe('uploaded-doc-url');\n      expect(mockRequest).toHaveBeenCalledWith('/verification/upload', expect.any(Object));\n    });\n\n    it('should handle empty file uploads', async () => {\n      await expect(\n        verificationService.uploadDocument('', 'document')\n      ).rejects.toThrow('Empty file');\n    });\n  });\n\n  describe('cancelVerification', () => {\n    it('should cancel verification successfully', async () => {\n      mockRequest.mockResolvedValueOnce({ success: true });\n\n      await expect(\n        verificationService.cancelVerification('verification-123')\n      ).resolves.not.toThrow();\n\n      expect(mockRequest).toHaveBeenCalledWith('/verification/verification-123/cancel', { method: 'POST' });\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}