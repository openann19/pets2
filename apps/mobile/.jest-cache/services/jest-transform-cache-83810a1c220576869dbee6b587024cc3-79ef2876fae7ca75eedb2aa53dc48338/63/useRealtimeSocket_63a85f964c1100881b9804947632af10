db8751de17e5c9b0748f32ecad0ab3e5
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRealtimeSocket = useRealtimeSocket;
var react_1 = require("react");
var logger_1 = require("../utils/logger");
var env_1 = require("../utils/env");
function useRealtimeSocket() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$url = options.url,
    url = _options$url === void 0 ? process.env['NEXT_PUBLIC_SOCKET_URL'] || 'http://localhost:5000' : _options$url,
    _options$autoConnect = options.autoConnect,
    autoConnect = _options$autoConnect === void 0 ? true : _options$autoConnect;
  var _ref = (0, react_1.useState)(false),
    _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    isConnected = _ref2[0],
    setIsConnected = _ref2[1];
  var _ref3 = (0, react_1.useState)(null),
    _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
    error = _ref4[0],
    setError = _ref4[1];
  var socketRef = (0, react_1.useRef)(null);
  var connect = (0, react_1.useCallback)(function () {
    var _socketRef$current;
    if ((_socketRef$current = socketRef.current) != null && _socketRef$current.connected) {
      logger_1.logger.info('Socket already connected');
      return;
    }
    try {
      if (!(0, env_1.isBrowser)()) return;
      var mockSocket = {
        connected: false,
        on: function on() {},
        off: function off() {},
        emit: function emit() {},
        disconnect: function disconnect() {}
      };
      socketRef.current = mockSocket;
      setIsConnected(true);
      setError(null);
      logger_1.logger.info('Socket connected', {
        url: url
      });
    } catch (err) {
      var errorMessage = err instanceof Error ? err.message : 'Failed to connect';
      setError(errorMessage);
      logger_1.logger.error('Socket connection failed', {
        error: errorMessage
      });
    }
  }, [url]);
  var disconnect = (0, react_1.useCallback)(function () {
    if (socketRef.current) {
      socketRef.current.disconnect();
      socketRef.current = null;
      setIsConnected(false);
      logger_1.logger.info('Socket disconnected');
    }
  }, []);
  var emitTyping = (0, react_1.useCallback)(function (matchId, isTyping) {
    var _socketRef$current2;
    if (!((_socketRef$current2 = socketRef.current) != null && _socketRef$current2.connected)) {
      logger_1.logger.warn('Cannot emit typing - socket not connected');
      return;
    }
    socketRef.current.emit('typing', {
      matchId: matchId,
      isTyping: isTyping
    });
    logger_1.logger.info('Typing indicator emitted', {
      matchId: matchId,
      isTyping: isTyping
    });
  }, []);
  var onTyping = (0, react_1.useCallback)(function (callback) {
    if (!socketRef.current) return function () {};
    var handler = function handler(data) {
      callback(data);
    };
    socketRef.current.on('typing', handler);
    return function () {
      var _socketRef$current3;
      (_socketRef$current3 = socketRef.current) == null ? void 0 : _socketRef$current3.off('typing', handler);
    };
  }, []);
  var onMessage = (0, react_1.useCallback)(function (callback) {
    if (!socketRef.current) return function () {};
    var handler = function handler(data) {
      callback(data);
    };
    socketRef.current.on('message', handler);
    return function () {
      var _socketRef$current4;
      (_socketRef$current4 = socketRef.current) == null ? void 0 : _socketRef$current4.off('message', handler);
    };
  }, []);
  var onOnlineStatus = (0, react_1.useCallback)(function (callback) {
    if (!socketRef.current) return function () {};
    var handler = function handler(data) {
      callback(data);
    };
    socketRef.current.on('onlineStatus', handler);
    return function () {
      var _socketRef$current5;
      (_socketRef$current5 = socketRef.current) == null ? void 0 : _socketRef$current5.off('onlineStatus', handler);
    };
  }, []);
  (0, react_1.useEffect)(function () {
    if (autoConnect) {
      connect();
    }
    return function () {
      disconnect();
    };
  }, [autoConnect, connect, disconnect]);
  return {
    socket: socketRef.current,
    isConnected: isConnected,
    error: error,
    connect: connect,
    disconnect: disconnect,
    emitTyping: emitTyping,
    onTyping: onTyping,
    onMessage: onMessage,
    onOnlineStatus: onOnlineStatus
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,