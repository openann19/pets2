bed3e2c8877d7d3659f15082d451bd7f
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OfflineQueueManager = void 0;
var logger_1 = require("../utils/logger");
var DEFAULT_CONFIG = {
  maxSize: 1000,
  persistence: 'memory',
  syncInterval: 30000,
  maxRetries: 3,
  retryDelay: 1000
};
var OfflineQueueManager = function () {
  function OfflineQueueManager() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, OfflineQueueManager);
    this.queue = [];
    this.processing = new Set();
    this.storage = null;
    this.isOnline = true;
    this.listeners = [];
    this.config = _objectSpread(_objectSpread({}, DEFAULT_CONFIG), config);
    this.initializeStorage();
    this.loadQueue();
    this.startSyncInterval();
  }
  return (0, _createClass2.default)(OfflineQueueManager, [{
    key: "enqueue",
    value: (function () {
      var _enqueue = (0, _asyncToGenerator2.default)(function* (item) {
        var _this = this;
        if (this.queue.length >= this.config.maxSize) {
          this.queue.sort(function (a, b) {
            return _this.comparePriority(a.priority, b.priority);
          });
          var removed = this.queue.pop();
          logger_1.logger.warn('Queue full, removing lowest priority item', {
            removedItem: removed == null ? void 0 : removed.id,
            queueSize: this.queue.length
          });
        }
        var queueItem = _objectSpread(_objectSpread({}, item), {}, {
          id: this.generateId(),
          timestamp: Date.now(),
          retryCount: 0
        });
        this.insertByPriority(queueItem);
        yield this.persistQueue();
        this.notifyListeners();
        logger_1.logger.debug('Item enqueued', {
          id: queueItem.id,
          endpoint: queueItem.endpoint,
          priority: queueItem.priority,
          queueSize: this.queue.length
        });
        if (this.isOnline) {
          void this.processQueue();
        }
        return queueItem.id;
      });
      function enqueue(_x) {
        return _enqueue.apply(this, arguments);
      }
      return enqueue;
    }())
  }, {
    key: "processQueue",
    value: (function () {
      var _processQueue = (0, _asyncToGenerator2.default)(function* () {
        var _this2 = this;
        if (!this.isOnline || this.processing.size > 0) {
          return;
        }
        var processableItems = this.queue.filter(function (item) {
          return !_this2.processing.has(item.id) && item.retryCount < item.maxRetries;
        });
        if (processableItems.length === 0) {
          return;
        }
        for (var item of processableItems) {
          if (!this.isOnline) {
            break;
          }
          this.processing.add(item.id);
          try {
            yield this.processItem(item);
            this.removeItem(item.id);
            logger_1.logger.debug('Item processed successfully', {
              id: item.id
            });
          } catch (error) {
            item.retryCount++;
            if (item.retryCount >= item.maxRetries) {
              logger_1.logger.error('Item failed after max retries', {
                id: item.id,
                endpoint: item.endpoint,
                retries: item.retryCount
              });
              this.removeItem(item.id);
            } else {
              logger_1.logger.debug('Item failed, will retry', {
                id: item.id,
                retries: item.retryCount
              });
              yield this.persistQueue();
            }
          } finally {
            this.processing.delete(item.id);
          }
        }
        this.notifyListeners();
      });
      function processQueue() {
        return _processQueue.apply(this, arguments);
      }
      return processQueue;
    }())
  }, {
    key: "processItem",
    value: (function () {
      var _processItem = (0, _asyncToGenerator2.default)(function* (item) {
        throw new Error('processItem must be implemented by subclass');
      });
      function processItem(_x2) {
        return _processItem.apply(this, arguments);
      }
      return processItem;
    }())
  }, {
    key: "getStats",
    value: function getStats() {
      var criticalItems = this.queue.filter(function (item) {
        return item.priority === 'critical';
      }).length;
      var oldestItem = this.queue.length > 0 ? this.queue[0].timestamp : undefined;
      return {
        totalItems: this.queue.length,
        pendingItems: this.queue.length - this.processing.size,
        processingItems: this.processing.size,
        failedItems: this.queue.filter(function (item) {
          return item.retryCount >= item.maxRetries;
        }).length,
        criticalItems: criticalItems,
        oldestItemTimestamp: oldestItem
      };
    }
  }, {
    key: "clearQueue",
    value: (function () {
      var _clearQueue = (0, _asyncToGenerator2.default)(function* () {
        this.queue = [];
        this.processing.clear();
        yield this.persistQueue();
        this.notifyListeners();
      });
      function clearQueue() {
        return _clearQueue.apply(this, arguments);
      }
      return clearQueue;
    }())
  }, {
    key: "getItemsByPriority",
    value: function getItemsByPriority(priority) {
      return this.queue.filter(function (item) {
        return item.priority === priority;
      });
    }
  }, {
    key: "removeItem",
    value: function removeItem(id) {
      var index = this.queue.findIndex(function (item) {
        return item.id === id;
      });
      if (index !== -1) {
        this.queue.splice(index, 1);
        this.persistQueue();
        this.notifyListeners();
      }
    }
  }, {
    key: "setOnlineStatus",
    value: function setOnlineStatus(isOnline) {
      this.isOnline = isOnline;
      if (isOnline) {
        logger_1.logger.info('Online, starting queue processing');
        void this.processQueue();
      } else {
        logger_1.logger.info('Offline, queueing requests');
      }
    }
  }, {
    key: "subscribe",
    value: function subscribe(listener) {
      var _this3 = this;
      this.listeners.push(listener);
      return function () {
        var index = _this3.listeners.indexOf(listener);
        if (index !== -1) {
          _this3.listeners.splice(index, 1);
        }
      };
    }
  }, {
    key: "insertByPriority",
    value: function insertByPriority(item) {
      var priorityValue = this.getPriorityValue(item.priority);
      var insertIndex = this.queue.length;
      for (var i = 0; i < this.queue.length; i++) {
        var current = this.queue[i];
        if (this.getPriorityValue(current.priority) < priorityValue) {
          insertIndex = i;
          break;
        }
      }
      this.queue.splice(insertIndex, 0, item);
    }
  }, {
    key: "comparePriority",
    value: function comparePriority(a, b) {
      return this.getPriorityValue(a) - this.getPriorityValue(b);
    }
  }, {
    key: "getPriorityValue",
    value: function getPriorityValue(priority) {
      var values = {
        critical: 0,
        high: 1,
        normal: 2,
        low: 3
      };
      return values[priority];
    }
  }, {
    key: "initializeStorage",
    value: function initializeStorage() {
      if (this.config.persistence === 'localStorage' && typeof window !== 'undefined') {
        this.storage = window.localStorage;
      }
    }
  }, {
    key: "persistQueue",
    value: (function () {
      var _persistQueue = (0, _asyncToGenerator2.default)(function* () {
        if (!this.storage) {
          return;
        }
        try {
          var data = JSON.stringify(this.queue);
          this.storage.setItem('offline_queue', data);
        } catch (error) {
          logger_1.logger.error('Failed to persist queue', {
            error: error
          });
        }
      });
      function persistQueue() {
        return _persistQueue.apply(this, arguments);
      }
      return persistQueue;
    }())
  }, {
    key: "loadQueue",
    value: (function () {
      var _loadQueue = (0, _asyncToGenerator2.default)(function* () {
        if (!this.storage) {
          return;
        }
        try {
          var data = this.storage.getItem('offline_queue');
          if (data) {
            this.queue = JSON.parse(data);
            logger_1.logger.info('Queue loaded from storage', {
              itemCount: this.queue.length
            });
          }
        } catch (error) {
          logger_1.logger.error('Failed to load queue', {
            error: error
          });
        }
      });
      function loadQueue() {
        return _loadQueue.apply(this, arguments);
      }
      return loadQueue;
    }())
  }, {
    key: "startSyncInterval",
    value: function startSyncInterval() {
      var _this4 = this;
      this.syncIntervalId = setInterval(function () {
        if (_this4.isOnline) {
          void _this4.processQueue();
        }
      }, this.config.syncInterval);
    }
  }, {
    key: "notifyListeners",
    value: function notifyListeners() {
      var stats = this.getStats();
      this.listeners.forEach(function (listener) {
        try {
          listener(stats);
        } catch (error) {
          logger_1.logger.error('Listener error', {
            error: error
          });
        }
      });
    }
  }, {
    key: "generateId",
    value: function generateId() {
      return `${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.syncIntervalId) {
        clearInterval(this.syncIntervalId);
      }
    }
  }]);
}();
exports.OfflineQueueManager = OfflineQueueManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,