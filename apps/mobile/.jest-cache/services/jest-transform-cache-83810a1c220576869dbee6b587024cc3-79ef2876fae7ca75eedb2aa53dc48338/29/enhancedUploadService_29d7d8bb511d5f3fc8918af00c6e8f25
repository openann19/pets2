4da1fd1b5abe437f91c1229f8ff5d63e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EnhancedUploadService = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _uploadHygiene = require("./uploadHygiene");
var _api = require("./api");
var _logger = require("./logger");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var EnhancedUploadService = exports.EnhancedUploadService = function () {
  function EnhancedUploadService() {
    (0, _classCallCheck2.default)(this, EnhancedUploadService);
  }
  return (0, _createClass2.default)(EnhancedUploadService, [{
    key: "uploadProcessedImage",
    value: (function () {
      var _uploadProcessedImage = (0, _asyncToGenerator2.default)(function* (processedImage) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pet';
        var petId = arguments.length > 2 ? arguments[2] : undefined;
        var onProgress = arguments.length > 3 ? arguments[3] : undefined;
        try {
          if (onProgress) {
            try {
              onProgress({
                phase: 'presign',
                percent: 10,
                message: 'Requesting upload URL...'
              });
            } catch (error) {
              var err = error instanceof Error ? error : new Error(String(error));
              _logger.logger.warn('Progress callback error', {
                error: err
              });
            }
          }
          var presignResponse = yield _api.api.presignPhoto(processedImage.mimeType);
          var key = presignResponse.key,
            url = presignResponse.url;
          var headers = {
            'Content-Type': processedImage.mimeType
          };
          if (onProgress) {
            try {
              onProgress({
                phase: 'upload',
                percent: 30,
                message: 'Uploading to secure storage...'
              });
            } catch (error) {
              var _err = error instanceof Error ? error : new Error(String(error));
              _logger.logger.warn('Progress callback error', {
                error: _err
              });
            }
          }
          var uploadResponse = yield fetch(url, {
            method: 'PUT',
            headers: headers || {
              'Content-Type': processedImage.mimeType
            },
            body: yield this.fileUriToBlob(processedImage.uri)
          });
          if (!uploadResponse.ok) {
            throw new Error('S3 upload failed');
          }
          if (onProgress) {
            try {
              onProgress({
                phase: 'register',
                percent: 60,
                message: 'Registering upload...'
              });
            } catch (error) {
              var _err2 = error instanceof Error ? error : new Error(String(error));
              _logger.logger.warn('Progress callback error', {
                error: _err2
              });
            }
          }
          var idempotencyKey = `upload-${Date.now()}-${Math.random()}`;
          var registerResponse = yield (0, _api.request)('/uploads', {
            method: 'POST',
            body: {
              key: key,
              type: type,
              petId: petId,
              contentType: processedImage.mimeType,
              bytes: processedImage.fileSize,
              idempotencyKey: idempotencyKey
            }
          });
          var upload = registerResponse.data.upload;
          if (onProgress) {
            try {
              onProgress({
                phase: 'analyze',
                percent: 80,
                message: 'Analyzing photo...'
              });
            } catch (error) {
              var _err3 = error instanceof Error ? error : new Error(String(error));
              _logger.logger.warn('Progress callback error', {
                error: _err3
              });
            }
          }
          if (onProgress) {
            try {
              onProgress({
                phase: 'pending',
                percent: 90,
                message: 'Awaiting moderation...'
              });
            } catch (error) {
              var _err4 = error instanceof Error ? error : new Error(String(error));
              _logger.logger.warn('Progress callback error', {
                error: _err4
              });
            }
          }
          return {
            uploadId: upload._id || upload.id || '',
            s3Key: upload.s3Key || key,
            url: upload.url || `https://s3.amazonaws.com/${process.env.AWS_BUCKET}/${key}`,
            status: upload.status || 'pending',
            analysis: undefined
          };
        } catch (error) {
          var _err5 = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Upload failed', {
            error: _err5
          });
          throw _err5;
        }
      });
      function uploadProcessedImage(_x) {
        return _uploadProcessedImage.apply(this, arguments);
      }
      return uploadProcessedImage;
    }())
  }, {
    key: "uploadFromPicker",
    value: (function () {
      var _uploadFromPicker = (0, _asyncToGenerator2.default)(function* (options, onProgress) {
        var _options$allowEditing, _options$useCamera;
        var opts = {
          maxDimension: (options == null ? void 0 : options.maxDimension) || 2048,
          quality: (options == null ? void 0 : options.quality) || 0.9,
          type: (options == null ? void 0 : options.type) || 'pet',
          allowEditing: (_options$allowEditing = options == null ? void 0 : options.allowEditing) != null ? _options$allowEditing : true,
          useCamera: (_options$useCamera = options == null ? void 0 : options.useCamera) != null ? _options$useCamera : false
        };
        try {
          var quota = yield (0, _uploadHygiene.checkUploadQuota)('current-user-id');
          if (!quota.allowed) {
            throw new Error('Upload quota exceeded');
          }
          var _yield$import = yield Promise.resolve().then(function () {
              return _interopRequireWildcard(require("./uploadHygiene"));
            }),
            pickAndProcessImage = _yield$import.pickAndProcessImage,
            captureAndProcessImage = _yield$import.captureAndProcessImage;
          var processed = opts.useCamera ? yield captureAndProcessImage({
            maxDimension: opts.maxDimension,
            quality: opts.quality
          }) : yield pickAndProcessImage(opts.allowEditing, {
            maxDimension: opts.maxDimension,
            quality: opts.quality
          });
          if (!processed) {
            throw new Error('No image selected');
          }
          return yield this.uploadProcessedImage(processed, opts.type, options == null ? void 0 : options.petId, onProgress);
        } catch (error) {
          var err = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Upload from picker failed', {
            error: err
          });
          throw err;
        }
      });
      function uploadFromPicker(_x2, _x3) {
        return _uploadFromPicker.apply(this, arguments);
      }
      return uploadFromPicker;
    }())
  }, {
    key: "pollUploadStatus",
    value: (function () {
      var _pollUploadStatus = (0, _asyncToGenerator2.default)(function* (uploadId) {
        var maxAttempts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
        var intervalMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;
        for (var i = 0; i < maxAttempts; i++) {
          var response = yield (0, _api.request)(`/uploads/${uploadId}`, {
            method: 'GET'
          });
          var _response$data = response.data,
            upload = _response$data.upload,
            analysis = _response$data.analysis;
          if (upload.status === 'approved') {
            return {
              uploadId: uploadId,
              s3Key: upload.s3Key || '',
              url: upload.url || '',
              status: 'approved',
              analysis: analysis
            };
          }
          if (upload.status === 'rejected') {
            throw new Error(`Upload rejected: ${upload.flagReason || 'Unknown reason'}`);
          }
          yield new Promise(function (resolve) {
            return setTimeout(resolve, intervalMs);
          });
        }
        throw new Error('Upload status polling timeout');
      });
      function pollUploadStatus(_x4) {
        return _pollUploadStatus.apply(this, arguments);
      }
      return pollUploadStatus;
    }())
  }, {
    key: "uploadBatch",
    value: (function () {
      var _uploadBatch = (0, _asyncToGenerator2.default)(function* (photos) {
        var _this = this;
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pet';
        var petId = arguments.length > 2 ? arguments[2] : undefined;
        var onProgress = arguments.length > 3 ? arguments[3] : undefined;
        var results = [];
        var _loop = function* _loop(i) {
          var photo = photos[i];
          if (onProgress) {
            onProgress(i, {
              phase: 'presign',
              percent: 0,
              message: `Processing photo ${i + 1}/${photos.length}`
            });
          }
          try {
            var result = yield _this.uploadProcessedImage(photo, type, petId, function (progress) {
              if (onProgress) {
                onProgress(i, progress);
              }
            });
            results.push(result);
          } catch (error) {
            var err = error instanceof Error ? error : new Error(String(error));
            _logger.logger.error('Batch upload failed', {
              error: err,
              photoIndex: i + 1
            });
          }
        };
        for (var i = 0; i < photos.length; i++) {
          yield* _loop(i);
        }
        return results;
      });
      function uploadBatch(_x5) {
        return _uploadBatch.apply(this, arguments);
      }
      return uploadBatch;
    }())
  }, {
    key: "checkDuplicate",
    value: (function () {
      var _checkDuplicate = (0, _asyncToGenerator2.default)(function* (uploadId) {
        try {
          var response = yield (0, _api.request)(`/uploads/${uploadId}/duplicate-check`, {
            method: 'GET'
          });
          if (response.data && typeof response.data === 'object' && 'isDuplicate' in response.data) {
            return response.data;
          }
          _logger.logger.warn('Duplicate check returned malformed response', {
            data: response.data
          });
          return {
            isDuplicate: false
          };
        } catch (error) {
          var err = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Duplicate check failed', {
            error: err
          });
          return {
            isDuplicate: false
          };
        }
      });
      function checkDuplicate(_x6) {
        return _checkDuplicate.apply(this, arguments);
      }
      return checkDuplicate;
    }())
  }, {
    key: "fileUriToBlob",
    value: (function () {
      var _fileUriToBlob = (0, _asyncToGenerator2.default)(function* (uri) {
        try {
          var FileSystem = yield Promise.resolve().then(function () {
            return _interopRequireWildcard(require('expo-file-system'));
          });
          var base64 = yield FileSystem.readAsStringAsync(uri, {
            encoding: FileSystem.EncodingType.Base64
          });
          var byteCharacters = atob(base64);
          var byteNumbers = new Array(byteCharacters.length);
          for (var i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
          }
          var byteArray = new Uint8Array(byteNumbers);
          return new Blob([byteArray], {
            type: 'image/jpeg'
          });
        } catch (error) {
          if (error instanceof Error) {
            throw error;
          }
          throw new Error(error ? String(error) : 'File system error');
        }
      });
      function fileUriToBlob(_x7) {
        return _fileUriToBlob.apply(this, arguments);
      }
      return fileUriToBlob;
    }())
  }, {
    key: "retryUpload",
    value: (function () {
      var _retryUpload = (0, _asyncToGenerator2.default)(function* (processedImage) {
        var _this2 = this;
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pet';
        var petId = arguments.length > 2 ? arguments[2] : undefined;
        var maxRetries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3;
        return (0, _uploadHygiene.uploadWithRetry)(function () {
          return _this2.uploadProcessedImage(processedImage, type, petId);
        }, maxRetries, 1000);
      });
      function retryUpload(_x8) {
        return _retryUpload.apply(this, arguments);
      }
      return retryUpload;
    }())
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (!EnhancedUploadService.instance) {
        EnhancedUploadService.instance = new EnhancedUploadService();
      }
      return EnhancedUploadService.instance;
    }
  }]);
}();
var _default = exports.default = EnhancedUploadService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,