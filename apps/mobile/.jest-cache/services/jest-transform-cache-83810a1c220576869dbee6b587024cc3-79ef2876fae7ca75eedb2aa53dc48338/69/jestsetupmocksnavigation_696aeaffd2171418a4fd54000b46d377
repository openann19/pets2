d0be8e384f7f22e2f9286ca9f6ec9ac8
"use strict";

_getJestObj().mock('@react-navigation/native', function () {
  return _objectSpread(_objectSpread({}, jest.requireActual('@react-navigation/native')), {}, {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        dispatch: jest.fn(),
        setOptions: jest.fn(),
        addListener: jest.fn(function () {
          return jest.fn();
        })
      };
    },
    useRoute: function useRoute() {
      return {
        params: {},
        key: 'test-route',
        name: 'TestScreen'
      };
    },
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    useIsFocused: jest.fn(function () {
      return true;
    }),
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#007AFF',
          background: '#FFFFFF',
          card: '#FFFFFF',
          text: '#000000',
          border: '#E5E5E5',
          notification: '#FF3B30'
        },
        dark: false
      };
    }
  });
});
_getJestObj().mock('@react-native-masked-view/masked-view', function () {
  return {
    __esModule: true,
    default: function _default(_ref) {
      var children = _ref.children;
      return children;
    },
    MaskedViewIOS: function MaskedViewIOS(_ref2) {
      var children = _ref2.children;
      return children;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfb2JqZWN0U3ByZWFkIiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJ1c2VOYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJmbiIsImdvQmFjayIsImRpc3BhdGNoIiwic2V0T3B0aW9ucyIsImFkZExpc3RlbmVyIiwidXNlUm91dGUiLCJwYXJhbXMiLCJrZXkiLCJuYW1lIiwidXNlRm9jdXNFZmZlY3QiLCJjYWxsYmFjayIsInVzZUlzRm9jdXNlZCIsInVzZVRoZW1lIiwiY29sb3JzIiwicHJpbWFyeSIsImJhY2tncm91bmQiLCJjYXJkIiwidGV4dCIsImJvcmRlciIsIm5vdGlmaWNhdGlvbiIsImRhcmsiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9yZWYiLCJjaGlsZHJlbiIsIk1hc2tlZFZpZXdJT1MiLCJfcmVmMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2RlZmluZVByb3BlcnR5MiIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9yZXF1aXJlIl0sInNvdXJjZXMiOlsiamVzdC5zZXR1cC5tb2Nrcy5uYXZpZ2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTmF2aWdhdGlvbi1yZWxhdGVkIG1vY2tzXG4gKiBMb2FkZWQgZm9yIHRlc3RzIGludm9sdmluZyBuYXZpZ2F0aW9uIGFuZCByb3V0aW5nXG4gKi9cblxuLy8gTW9jayBAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKSxcbiAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIGdvQmFjazogamVzdC5mbigpLFxuICAgIGRpc3BhdGNoOiBqZXN0LmZuKCksXG4gICAgc2V0T3B0aW9uczogamVzdC5mbigpLFxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCgpID0+IGplc3QuZm4oKSksXG4gIH0pLFxuICB1c2VSb3V0ZTogKCkgPT4gKHtcbiAgICBwYXJhbXM6IHt9LFxuICAgIGtleTogJ3Rlc3Qtcm91dGUnLFxuICAgIG5hbWU6ICdUZXN0U2NyZWVuJyxcbiAgfSksXG4gIHVzZUZvY3VzRWZmZWN0OiBqZXN0LmZuKChjYWxsYmFjaykgPT4gY2FsbGJhY2soKSksXG4gIHVzZUlzRm9jdXNlZDogamVzdC5mbigoKSA9PiB0cnVlKSxcbiAgdXNlVGhlbWU6ICgpID0+ICh7XG4gICAgY29sb3JzOiB7XG4gICAgICBwcmltYXJ5OiAnIzAwN0FGRicsXG4gICAgICBiYWNrZ3JvdW5kOiAnI0ZGRkZGRicsXG4gICAgICBjYXJkOiAnI0ZGRkZGRicsXG4gICAgICB0ZXh0OiAnIzAwMDAwMCcsXG4gICAgICBib3JkZXI6ICcjRTVFNUU1JyxcbiAgICAgIG5vdGlmaWNhdGlvbjogJyNGRjNCMzAnLFxuICAgIH0sXG4gICAgZGFyazogZmFsc2UsXG4gIH0pLFxufSkpO1xuXG4vLyBNb2NrIEByZWFjdC1uYXRpdmUtbWFza2VkLXZpZXcvbWFza2VkLXZpZXdcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1tYXNrZWQtdmlldy9tYXNrZWQtdmlldycsICgpID0+ICh7XG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIGRlZmF1bHQ6ICh7IGNoaWxkcmVuIH06IGFueSkgPT4gY2hpbGRyZW4sXG4gIE1hc2tlZFZpZXdJT1M6ICh7IGNoaWxkcmVuIH06IGFueSkgPT4g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