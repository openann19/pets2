{"version":3,"names":["_uploadHygiene","require","_api","_logger","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","EnhancedUploadService","exports","_classCallCheck2","_createClass2","key","value","_uploadProcessedImage","_asyncToGenerator2","processedImage","type","arguments","length","undefined","petId","onProgress","phase","percent","message","error","err","Error","String","logger","warn","presignResponse","api","presignPhoto","mimeType","url","headers","uploadResponse","fetch","method","body","fileUriToBlob","uri","ok","idempotencyKey","Date","now","Math","random","registerResponse","request","contentType","bytes","fileSize","upload","data","uploadId","_id","id","s3Key","process","env","AWS_BUCKET","status","analysis","uploadProcessedImage","_x","apply","_uploadFromPicker","options","_options$allowEditing","_options$useCamera","opts","maxDimension","quality","allowEditing","useCamera","quota","checkUploadQuota","allowed","_yield$import","Promise","resolve","then","pickAndProcessImage","captureAndProcessImage","processed","uploadFromPicker","_x2","_x3","_pollUploadStatus","maxAttempts","intervalMs","response","_response$data","flagReason","setTimeout","pollUploadStatus","_x4","_uploadBatch","photos","_this","results","_loop","photo","result","progress","push","photoIndex","uploadBatch","_x5","_checkDuplicate","isDuplicate","checkDuplicate","_x6","_fileUriToBlob","FileSystem","base64","readAsStringAsync","encoding","EncodingType","Base64","byteCharacters","atob","byteNumbers","Array","charCodeAt","byteArray","Uint8Array","Blob","_x7","_retryUpload","_this2","maxRetries","uploadWithRetry","retryUpload","_x8","getInstance","instance","_default"],"sources":["enhancedUploadService.ts"],"sourcesContent":["/**\n * Enhanced Upload Service - Mobile\n * \n * Integrates uploadHygiene with API uploads, providing a complete\n * upload-to-moderation pipeline with progress tracking and error handling.\n */\n\nimport { \n  processImageForUpload, \n  type ProcessedImage,\n  checkUploadQuota,\n  uploadWithRetry \n} from './uploadHygiene';\nimport { api, request } from './api';\nimport { logger } from './logger';\n\nexport interface UploadProgress {\n  phase: 'presign' | 'upload' | 'register' | 'analyze' | 'pending' | 'approved' | 'rejected';\n  percent: number;\n  message?: string;\n}\n\n/**\n * Photo upload analysis result from backend moderation\n */\nexport interface PhotoUploadAnalysis {\n  isPet: boolean;\n  overall: number;\n  labels: Array<{ name: string; confidence: number }>;\n  breedCandidates: Array<{ name: string; confidence: number }>;\n  quality: {\n    dims: { width: number; height: number };\n    exposure: number;\n    contrast: number;\n    sharpness: number;\n  };\n  healthSignals: {\n    coatScore: number;\n    eyesScore: number;\n    postureScore: number;\n    energyScore: number;\n  };\n  safety: {\n    labels: Array<{ label: string; confidence: number }>;\n    safe: boolean;\n    moderationScore: number;\n  };\n  suggestions: string[];\n  analyzedAt?: string;\n}\n\nexport interface UploadResult {\n  uploadId: string;\n  s3Key: string;\n  url: string;\n  status: string;\n  analysis?: PhotoUploadAnalysis;\n}\n\n/**\n * Complete upload flow from image processing to API registration\n */\nexport class EnhancedUploadService {\n  private static instance: EnhancedUploadService;\n\n  private constructor() {}\n\n  static getInstance(): EnhancedUploadService {\n    if (!EnhancedUploadService.instance) {\n      EnhancedUploadService.instance = new EnhancedUploadService();\n    }\n    return EnhancedUploadService.instance;\n  }\n\n  /**\n   * Upload a processed image through the complete pipeline\n   */\n  async uploadProcessedImage(\n    processedImage: ProcessedImage,\n    type: 'profile' | 'pet' | 'verification' = 'pet',\n    petId?: string,\n    onProgress?: (progress: UploadProgress) => void\n  ): Promise<UploadResult> {\n    try {\n      // 1. Presign\n      if (onProgress) {\n        try {\n          onProgress({ phase: 'presign', percent: 10, message: 'Requesting upload URL...' });\n        } catch (error: unknown) {\n          const err = error instanceof Error ? error : new Error(String(error));\n          logger.warn('Progress callback error', { error: err });\n        }\n      }\n\n      const presignResponse = await api.presignPhoto(processedImage.mimeType);\n\n      const { key, url } = presignResponse;\n      const headers = { 'Content-Type': processedImage.mimeType };\n\n      // 2. Upload to S3\n      if (onProgress) {\n        try {\n          onProgress({ phase: 'upload', percent: 30, message: 'Uploading to secure storage...' });\n        } catch (error: unknown) {\n          const err = error instanceof Error ? error : new Error(String(error));\n          logger.warn('Progress callback error', { error: err });\n        }\n      }\n\n      // Upload file to presigned URL\n      const uploadResponse = await fetch(url, {\n        method: 'PUT',\n        headers: headers || {\n          'Content-Type': processedImage.mimeType,\n        },\n        body: await this.fileUriToBlob(processedImage.uri),\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error('S3 upload failed');\n      }\n\n      // 3. Register upload\n      if (onProgress) {\n        try {\n          onProgress({ phase: 'register', percent: 60, message: 'Registering upload...' });\n        } catch (error: unknown) {\n          const err = error instanceof Error ? error : new Error(String(error));\n          logger.warn('Progress callback error', { error: err });\n        }\n      }\n\n      const idempotencyKey = `upload-${Date.now()}-${Math.random()}`;\n\n      const registerResponse = await request<{\n        data: {\n          upload: {\n            _id?: string;\n            id?: string;\n            s3Key?: string;\n            url?: string;\n            status?: string;\n          }\n        }\n      }>('/uploads', {\n        method: 'POST',\n        body: {\n          key,\n          type,\n          petId,\n          contentType: processedImage.mimeType,\n          bytes: processedImage.fileSize,\n          idempotencyKey,\n        },\n      });\n\n      const upload = registerResponse.data.upload;\n\n      if (onProgress) {\n        try {\n          onProgress({ phase: 'analyze', percent: 80, message: 'Analyzing photo...' });\n        } catch (error: unknown) {\n          const err = error instanceof Error ? error : new Error(String(error));\n          logger.warn('Progress callback error', { error: err });\n        }\n      }\n\n      // 4. Trigger analysis (optional, async by default)\n      if (onProgress) {\n        try {\n          onProgress({ phase: 'pending', percent: 90, message: 'Awaiting moderation...' });\n        } catch (error: unknown) {\n          const err = error instanceof Error ? error : new Error(String(error));\n          logger.warn('Progress callback error', { error: err });\n        }\n      }\n\n      return {\n        uploadId: upload._id || upload.id || '',\n        s3Key: upload.s3Key || key,\n        url: upload.url || `https://s3.amazonaws.com/${process.env.AWS_BUCKET}/${key}`,\n        status: upload.status || 'pending',\n        analysis: undefined,\n      };\n    } catch (error: unknown) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      logger.error('Upload failed', { error: err });\n      throw err;\n    }\n  }\n\n  /**\n   * Complete upload flow from image picker\n   */\n  async uploadFromPicker(\n    options?: {\n      maxDimension?: number;\n      quality?: number;\n      type?: 'profile' | 'pet' | 'verification';\n      petId?: string;\n      allowEditing?: boolean;\n      useCamera?: boolean;\n    },\n    onProgress?: (progress: UploadProgress) => void\n  ): Promise<UploadResult> {\n    const opts = {\n      maxDimension: options?.maxDimension || 2048,\n      quality: options?.quality || 0.9,\n      type: options?.type || 'pet',\n      allowEditing: options?.allowEditing ?? true,\n      useCamera: options?.useCamera ?? false,\n    };\n\n    try {\n      // Check quota\n      const quota = await checkUploadQuota('current-user-id'); // TODO: Get from auth\n      if (!quota.allowed) {\n        throw new Error('Upload quota exceeded');\n      }\n\n      // Process image\n      const { pickAndProcessImage, captureAndProcessImage } = await import('./uploadHygiene');\n      \n      const processed = opts.useCamera\n        ? await captureAndProcessImage({ \n            maxDimension: opts.maxDimension,\n            quality: opts.quality,\n          })\n        : await pickAndProcessImage(opts.allowEditing, {\n            maxDimension: opts.maxDimension,\n            quality: opts.quality,\n          });\n\n      if (!processed) {\n        throw new Error('No image selected');\n      }\n\n      // Upload\n      return await this.uploadProcessedImage(\n        processed,\n        opts.type,\n        options?.petId,\n        onProgress\n      );\n    } catch (error: unknown) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      logger.error('Upload from picker failed', { error: err });\n      throw err;\n    }\n  }\n\n  /**\n   * Poll upload status until completion\n   */\n  async pollUploadStatus(\n    uploadId: string,\n    maxAttempts = 10,\n    intervalMs = 1000\n  ): Promise<UploadResult> {\n    for (let i = 0; i < maxAttempts; i++) {\n      const response = await request<{\n        data: {\n          upload: {\n            s3Key?: string;\n            url?: string;\n            status: string;\n            flagReason?: string;\n          };\n          analysis?: PhotoUploadAnalysis;\n        }\n      }>(`/uploads/${uploadId}`, {\n        method: 'GET'\n      });\n      const { upload, analysis } = response.data;\n\n      if (upload.status === 'approved') {\n        return {\n          uploadId,\n          s3Key: upload.s3Key || '',\n          url: upload.url || '',\n          status: 'approved',\n          analysis,\n        };\n      }\n\n      if (upload.status === 'rejected') {\n        throw new Error(`Upload rejected: ${upload.flagReason || 'Unknown reason'}`);\n      }\n\n      // Still processing\n      await new Promise(resolve => setTimeout(resolve, intervalMs));\n    }\n\n    throw new Error('Upload status polling timeout');\n  }\n\n  /**\n   * Batch upload multiple photos\n   */\n  async uploadBatch(\n    photos: ProcessedImage[],\n    type: 'profile' | 'pet' | 'verification' = 'pet',\n    petId?: string,\n    onProgress?: (index: number, progress: UploadProgress) => void\n  ): Promise<UploadResult[]> {\n    const results: UploadResult[] = [];\n\n    for (let i = 0; i < photos.length; i++) {\n      const photo = photos[i];\n      \n      if (onProgress) {\n        onProgress(i, { phase: 'presign', percent: 0, message: `Processing photo ${i + 1}/${photos.length}` });\n      }\n\n      try {\n      const result = await this.uploadProcessedImage(\n        photo!,\n        type,\n        petId,\n        (progress) => {\n          if (onProgress) {\n            onProgress(i, progress);\n          }\n        }\n      );\n        results.push(result);\n      } catch (error: unknown) {\n        const err = error instanceof Error ? error : new Error(String(error));\n        logger.error('Batch upload failed', { error: err, photoIndex: i + 1 });\n        // Continue with other photos\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Check if upload is duplicate\n   */\n  async checkDuplicate(uploadId: string): Promise<{ isDuplicate: boolean; similarImages?: string[] }> {\n    try {\n      const response = await request<{ data: { isDuplicate: boolean; similarImages?: string[] } }>(\n        `/uploads/${uploadId}/duplicate-check`,\n        { method: 'GET' }\n      );\n      \n      // Validate response data is the expected format\n      if (response.data && typeof response.data === 'object' && 'isDuplicate' in response.data) {\n        return response.data;\n      }\n      \n      // Malformed response - return safe default\n      logger.warn('Duplicate check returned malformed response', { data: response.data });\n      return { isDuplicate: false };\n    } catch (error: unknown) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      logger.error('Duplicate check failed', { error: err });\n      return { isDuplicate: false };\n    }\n  }\n\n  /**\n   * Helper: Convert file URI to blob for fetch upload\n   */\n  private async fileUriToBlob(uri: string): Promise<Blob> {\n    try {\n      const FileSystem = await import('expo-file-system');\n      const base64 = await FileSystem.readAsStringAsync(uri, {\n        encoding: FileSystem.EncodingType.Base64,\n      });\n      const byteCharacters = atob(base64);\n      const byteNumbers = new Array(byteCharacters.length);\n      for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      return new Blob([byteArray], { type: 'image/jpeg' });\n    } catch (error: unknown) {\n      // Re-throw with proper error message\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error(error ? String(error) : 'File system error');\n    }\n  }\n\n  /**\n   * Retry failed upload with exponential backoff\n   */\n  async retryUpload(\n    processedImage: ProcessedImage,\n    type: 'profile' | 'pet' | 'verification' = 'pet',\n    petId?: string,\n    maxRetries = 3\n  ): Promise<UploadResult> {\n    return uploadWithRetry(\n      () => this.uploadProcessedImage(processedImage, type, petId),\n      maxRetries,\n      1000\n    );\n  }\n}\n\nexport default EnhancedUploadService.getInstance();\n\n"],"mappings":"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","ignoreList":[]}