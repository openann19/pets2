c9f7ad0e5030548694d5fb6972864964
"use strict";

_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    apiClient: {
      post: jest.fn(),
      get: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _api = require("../api");
function _getJestObj() {
  var _require13 = require("@jest/globals"),
    jest = _require13.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("AI API Service", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe("generateBio", function () {
    it("should call the correct endpoint with proper data", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          bio: "Buddy is a friendly and energetic Golden Retriever who loves to play fetch.",
          keywords: ["friendly", "energetic", "playful"],
          sentiment: {
            score: 0.9,
            label: "positive"
          },
          matchScore: 85
        }
      };
      var _require = require("@pawfectmatch/core"),
        apiClient = _require.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var result = yield _api.aiAPI.generateBio({
        petName: "Buddy",
        keywords: ["friendly", "energetic", "playful"],
        tone: "playful",
        length: "medium",
        petType: "dog",
        age: 3,
        breed: "Golden Retriever"
      });
      expect(apiClient.post).toHaveBeenCalledWith("/ai/generate-bio", {
        petName: "Buddy",
        keywords: ["friendly", "energetic", "playful"],
        tone: "playful",
        length: "medium",
        petType: "dog",
        age: 3,
        breed: "Golden Retriever"
      });
      expect(result).toEqual(mockResponse.data);
    }));
    it("should throw error when API call fails", (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error("API Error");
      var _require2 = require("@pawfectmatch/core"),
        apiClient = _require2.apiClient;
      apiClient.post.mockRejectedValue(mockError);
      yield expect(_api.aiAPI.generateBio({
        petName: "Buddy",
        keywords: ["friendly"],
        tone: "playful",
        length: "medium",
        petType: "dog",
        age: 3,
        breed: "Golden Retriever"
      })).rejects.toThrow("API Error");
    }));
    it("should throw error when response is not successful", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: false,
        error: "Failed to generate bio"
      };
      var _require3 = require("@pawfectmatch/core"),
        apiClient = _require3.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      yield expect(_api.aiAPI.generateBio({
        petName: "Buddy",
        keywords: ["friendly"],
        tone: "playful",
        length: "medium",
        petType: "dog",
        age: 3,
        breed: "Golden Retriever"
      })).rejects.toThrow("Failed to generate bio");
    }));
  });
  describe("analyzePhotos", function () {
    it("should call the correct endpoint with photo URIs", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          breed_analysis: {
            primary_breed: "Golden Retriever",
            confidence: 0.95,
            secondary_breeds: [{
              breed: "Labrador",
              confidence: 0.3
            }]
          },
          health_assessment: {
            age_estimate: 3,
            health_score: 0.9,
            recommendations: ["Regular exercise recommended"]
          },
          photo_quality: {
            overall_score: 0.85,
            lighting_score: 0.9,
            composition_score: 0.8,
            clarity_score: 0.85
          },
          matchability_score: 0.88,
          ai_insights: ["High quality photo", "Good lighting"]
        }
      };
      var _require4 = require("@pawfectmatch/core"),
        apiClient = _require4.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var result = yield _api.aiAPI.analyzePhotos(["photo1-uri", "photo2-uri"]);
      expect(apiClient.post).toHaveBeenCalledWith("/ai/analyze-photos", {
        photos: ["photo1-uri", "photo2-uri"]
      });
      expect(result).toEqual(mockResponse.data);
    }));
    it("should throw error when API call fails", (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error("Analysis failed");
      var _require5 = require("@pawfectmatch/core"),
        apiClient = _require5.apiClient;
      apiClient.post.mockRejectedValue(mockError);
      yield expect(_api.aiAPI.analyzePhotos(["photo1-uri"])).rejects.toThrow("Analysis failed");
    }));
  });
  describe("analyzeCompatibility", function () {
    it("should call the correct endpoint with pet IDs", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          compatibility_score: 0.85,
          ai_analysis: "These pets show excellent compatibility potential.",
          breakdown: {
            personality_compatibility: 0.9,
            lifestyle_compatibility: 0.8,
            activity_compatibility: 0.85,
            social_compatibility: 0.9,
            environment_compatibility: 0.8
          },
          recommendations: {
            meeting_suggestions: ["Neutral territory", "Supervised introduction"],
            activity_recommendations: ["Play fetch together", "Go for walks"],
            supervision_requirements: ["Initial supervision recommended"],
            success_probability: 0.9
          }
        }
      };
      var _require6 = require("@pawfectmatch/core"),
        apiClient = _require6.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var result = yield _api.aiAPI.analyzeCompatibility({
        pet1Id: "pet1-id",
        pet2Id: "pet2-id"
      });
      expect(apiClient.post).toHaveBeenCalledWith("/ai/enhanced-compatibility", {
        pet1Id: "pet1-id",
        pet2Id: "pet2-id"
      });
      expect(result).toEqual(mockResponse.data);
    }));
    it("should throw error when API call fails", (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error("Compatibility analysis failed");
      var _require7 = require("@pawfectmatch/core"),
        apiClient = _require7.apiClient;
      apiClient.post.mockRejectedValue(mockError);
      yield expect(_api.aiAPI.analyzeCompatibility({
        pet1Id: "pet1-id",
        pet2Id: "pet2-id"
      })).rejects.toThrow("Compatibility analysis failed");
    }));
  });
  describe("getCompatibility", function () {
    it("should call the legacy compatibility endpoint", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          score: 75,
          analysis: "Good compatibility potential",
          factors: {
            age_compatibility: true,
            size_compatibility: true,
            breed_compatibility: true,
            personality_match: true
          }
        }
      };
      var _require8 = require("@pawfectmatch/core"),
        apiClient = _require8.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var result = yield _api.aiAPI.getCompatibility({
        pet1Id: "pet1-id",
        pet2Id: "pet2-id"
      });
      expect(apiClient.post).toHaveBeenCalledWith("/ai/compatibility", {
        pet1Id: "pet1-id",
        pet2Id: "pet2-id"
      });
      expect(result).toEqual(mockResponse.data);
    }));
    it("should throw error when API call fails", (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error("Legacy compatibility failed");
      var _require9 = require("@pawfectmatch/core"),
        apiClient = _require9.apiClient;
      apiClient.post.mockRejectedValue(mockError);
      yield expect(_api.aiAPI.getCompatibility({
        pet1Id: "pet1-id",
        pet2Id: "pet2-id"
      })).rejects.toThrow("Legacy compatibility failed");
    }));
  });
  describe("Error Handling", function () {
    it("should handle network timeout errors", (0, _asyncToGenerator2.default)(function* () {
      var timeoutError = new Error("Network timeout");
      timeoutError.name = "TimeoutError";
      var _require0 = require("@pawfectmatch/core"),
        apiClient = _require0.apiClient;
      apiClient.post.mockRejectedValue(timeoutError);
      yield expect(_api.aiAPI.generateBio({
        petName: "Buddy",
        keywords: ["friendly"],
        tone: "playful",
        length: "medium",
        petType: "dog",
        age: 3,
        breed: "Golden Retriever"
      })).rejects.toThrow("Network timeout");
    }));
    it("should handle 503 service unavailable errors", (0, _asyncToGenerator2.default)(function* () {
      var serviceError = new Error("Service Unavailable");
      serviceError.response = {
        status: 503
      };
      var _require1 = require("@pawfectmatch/core"),
        apiClient = _require1.apiClient;
      apiClient.post.mockRejectedValue(serviceError);
      yield expect(_api.aiAPI.analyzePhotos(["photo1-uri"])).rejects.toThrow("Service Unavailable");
    }));
    it("should handle malformed response data", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: null
      };
      var _require10 = require("@pawfectmatch/core"),
        apiClient = _require10.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      yield expect(_api.aiAPI.generateBio({
        petName: "Buddy",
        keywords: ["friendly"],
        tone: "playful",
        length: "medium",
        petType: "dog",
        age: 3,
        breed: "Golden Retriever"
      })).rejects.toThrow("Failed to generate bio");
    }));
  });
  describe("Data Validation", function () {
    it("should handle empty keywords array", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          bio: "Generated bio",
          keywords: [],
          sentiment: {
            score: 0.8,
            label: "positive"
          },
          matchScore: 80
        }
      };
      var _require11 = require("@pawfectmatch/core"),
        apiClient = _require11.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var result = yield _api.aiAPI.generateBio({
        petName: "Buddy",
        keywords: [],
        tone: "playful",
        length: "medium",
        petType: "dog",
        age: 3,
        breed: "Golden Retriever"
      });
      expect(result.keywords).toEqual([]);
    }));
    it("should handle missing optional parameters", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          bio: "Generated bio",
          keywords: ["friendly"],
          sentiment: {
            score: 0.8,
            label: "positive"
          },
          matchScore: 80
        }
      };
      var _require12 = require("@pawfectmatch/core"),
        apiClient = _require12.apiClient;
      apiClient.post.mockResolvedValue(mockResponse);
      var result = yield _api.aiAPI.generateBio({
        petName: "Buddy",
        keywords: ["friendly"]
      });
      expect(apiClient.post).toHaveBeenCalledWith("/ai/generate-bio", {
        petName: "Buddy",
        keywords: ["friendly"]
      });
      expect(result).toEqual(mockResponse.data);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,