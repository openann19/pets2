665b20d3ab942742d210c90c5e925437
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toCorePet = toCorePet;
exports.toCorePets = toCorePets;
exports.toLegacyPet = toLegacyPet;
function toCorePet(legacy) {
  var _sizeMap$legacy$size$, _speciesMap$legacy$sp;
  var now = new Date().toISOString();
  var coordinates = [0, 0];
  if (legacy.location != null) {
    if ('coordinates' in legacy.location && Array.isArray(legacy.location.coordinates)) {
      coordinates = legacy.location.coordinates;
    } else if ('latitude' in legacy.location && 'longitude' in legacy.location) {
      var _legacy$location$long, _legacy$location$lati;
      coordinates = [(_legacy$location$long = legacy.location.longitude) != null ? _legacy$location$long : 0, (_legacy$location$lati = legacy.location.latitude) != null ? _legacy$location$lati : 0];
    } else if ('lon' in legacy.location && 'lat' in legacy.location) {
      var _legacy$location$lon, _legacy$location$lat;
      coordinates = [(_legacy$location$lon = legacy.location.lon) != null ? _legacy$location$lon : 0, (_legacy$location$lat = legacy.location.lat) != null ? _legacy$location$lat : 0];
    }
  }
  var sizeMap = {
    'small': 'small',
    'medium': 'medium',
    'large': 'large',
    'tiny': 'tiny',
    'extra-large': 'extra-large',
    'xl': 'extra-large'
  };
  var size = legacy.size != null && legacy.size.length > 0 ? (_sizeMap$legacy$size$ = sizeMap[legacy.size.toLowerCase()]) != null ? _sizeMap$legacy$size$ : 'medium' : 'medium';
  var speciesMap = {
    'dog': 'dog',
    'cat': 'cat',
    'bird': 'bird',
    'rabbit': 'rabbit'
  };
  var species = legacy.species != null && legacy.species.length > 0 ? (_speciesMap$legacy$sp = speciesMap[legacy.species.toLowerCase()]) != null ? _speciesMap$legacy$sp : 'other' : 'dog';
  var photos = (legacy.photos != null ? legacy.photos : []).map(function (photo, index) {
    return {
      url: typeof photo === 'string' ? photo : photo.url,
      isPrimary: typeof photo === 'object' ? photo.isPrimary != null ? photo.isPrimary : index === 0 : index === 0,
      caption: ''
    };
  });
  var corePet = _objectSpread(_objectSpread({
    _id: legacy.id,
    id: legacy.id,
    owner: legacy.ownerId != null ? legacy.ownerId : '',
    name: legacy.name.length > 0 ? legacy.name : 'Unknown',
    species: species,
    breed: legacy.breed.length > 0 ? legacy.breed : 'Mixed',
    age: !isNaN(legacy.age) ? legacy.age : 0,
    gender: legacy.gender != null ? legacy.gender : 'male',
    size: size
  }, legacy.weight != null && !isNaN(legacy.weight) && {
    weight: legacy.weight
  }), {}, {
    photos: photos,
    videos: [],
    description: legacy.description != null && legacy.description.length > 0 ? legacy.description : '',
    personalityTags: legacy.temperament != null ? legacy.temperament : [],
    intent: 'all',
    availability: {
      isAvailable: true
    },
    healthInfo: {
      vaccinated: false,
      spayedNeutered: false,
      microchipped: false
    },
    location: {
      type: 'Point',
      coordinates: coordinates
    },
    featured: {
      isFeatured: false,
      boostCount: 0
    },
    analytics: {
      views: 0,
      likes: 0,
      matches: 0,
      messages: 0
    },
    isActive: true,
    isVerified: false,
    status: 'active',
    listedAt: now,
    createdAt: now,
    updatedAt: now
  });
  return corePet;
}
function toCorePets(legacyPets) {
  return legacyPets.map(toCorePet);
}
function toLegacyPet(pet) {
  var legacy = {
    id: pet._id,
    name: pet.name,
    breed: pet.breed,
    age: pet.age
  };
  if (typeof pet.owner === 'string') {
    legacy.ownerId = pet.owner;
  } else if (typeof pet.owner === 'object' && '_id' in pet.owner) {
    legacy.ownerId = pet.owner._id;
  }
  legacy.species = pet.species;
  legacy.gender = pet.gender;
  legacy.size = pet.size;
  if (pet.weight != null) legacy.weight = pet.weight;
  if (pet.description != null) legacy.description = pet.description;
  legacy.temperament = pet.personalityTags;
  if (pet.photos.length > 0) {
    legacy.photos = pet.photos.map(function (p) {
      return {
        url: p.url,
        isPrimary: p.isPrimary
      };
    });
  }
  legacy.location = {
    longitude: pet.location.coordinates[0],
    latitude: pet.location.coordinates[1]
  };
  return legacy;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQ29yZVBldCIsInRvQ29yZVBldHMiLCJ0b0xlZ2FjeVBldCIsImxlZ2FjeSIsIl9zaXplTWFwJGxlZ2FjeSRzaXplJCIsIl9zcGVjaWVzTWFwJGxlZ2FjeSRzcCIsIm5vdyIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImNvb3JkaW5hdGVzIiwibG9jYXRpb24iLCJBcnJheSIsImlzQXJyYXkiLCJfbGVnYWN5JGxvY2F0aW9uJGxvbmciLCJfbGVnYWN5JGxvY2F0aW9uJGxhdGkiLCJsb25naXR1ZGUiLCJsYXRpdHVkZSIsIl9sZWdhY3kkbG9jYXRpb24kbG9uIiwiX2xlZ2FjeSRsb2NhdGlvbiRsYXQiLCJsb24iLCJsYXQiLCJzaXplTWFwIiwic2l6ZSIsInRvTG93ZXJDYXNlIiwic3BlY2llc01hcCIsInNwZWNpZXMiLCJwaG90b3MiLCJtYXAiLCJwaG90byIsImluZGV4IiwidXJsIiwiaXNQcmltYXJ5IiwiY2FwdGlvbiIsImNvcmVQZXQiLCJfaWQiLCJpZCIsIm93bmVyIiwib3duZXJJZCIsIm5hbWUiLCJicmVlZCIsImFnZSIsImlzTmFOIiwiZ2VuZGVyIiwid2VpZ2h0IiwidmlkZW9zIiwiZGVzY3JpcHRpb24iLCJwZXJzb25hbGl0eVRhZ3MiLCJ0ZW1wZXJhbWVudCIsImludGVudCIsImF2YWlsYWJpbGl0eSIsImlzQXZhaWxhYmxlIiwiaGVhbHRoSW5mbyIsInZhY2NpbmF0ZWQiLCJzcGF5ZWROZXV0ZXJlZCIsIm1pY3JvY2hpcHBlZCIsInR5cGUiLCJmZWF0dXJlZCIsImlzRmVhdHVyZWQiLCJib29zdENvdW50IiwiYW5hbHl0aWNzIiwidmlld3MiLCJsaWtlcyIsIm1hdGNoZXMiLCJtZXNzYWdlcyIsImlzQWN0aXZlIiwiaXNWZXJpZmllZCIsInN0YXR1cyIsImxpc3RlZEF0IiwiY3JlYXRlZEF0IiwidXBkYXRlZEF0IiwibGVnYWN5UGV0cyIsInBldCIsInAiXSwic291cmNlcyI6WyJwZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBSZW1vdmVkIGVtcHR5IGltcG9ydCBzdGF0ZW1lbnRcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9Db3JlUGV0ID0gdG9Db3JlUGV0O1xuZXhwb3J0cy50b0NvcmVQZXRzID0gdG9Db3JlUGV0cztcbmV4cG9ydHMudG9MZWdhY3lQZXQgPSB0b0xlZ2FjeVBldDtcbmZ1bmN0aW9uIHRvQ29yZVBldChsZWdhY3kpIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgLy8gSGFuZGxlIHZhcmlvdXMgbG9jYXRpb24gZm9ybWF0c1xuICAgIGxldCBjb29yZGluYXRlcyA9IFswLCAwXTtcbiAgICBpZiAobGVnYWN5LmxvY2F0aW9uICE9IG51bGwpIHtcbiAgICAgICAgaWYgKCdjb29yZGluYXRlcycgaW4gbGVnYWN5LmxvY2F0aW9uICYmIEFycmF5LmlzQXJyYXkobGVnYWN5LmxvY2F0aW9uLmNvb3JkaW5hdGVzKSkge1xuICAgICAgICAgICAgY29vcmRpbmF0ZXMgPSBsZWdhY3kubG9jYXRpb24uY29vcmRpbmF0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoJ2xhdGl0dWRlJyBpbiBsZWdhY3kubG9jYXRpb24gJiYgJ2xvbmdpdHVkZScgaW4gbGVnYWN5LmxvY2F0aW9uKSB7XG4gICAgICAgICAgICBjb29yZGluYXRlcyA9IFtsZWdhY3kubG9jYXRpb24ubG9uZ2l0dWRlID8/IDAsIGxlZ2FjeS5sb2NhdGlvbi5sYXRpdHVkZSA/PyAwXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgnbG9uJyBpbiBsZWdhY3kubG9jYXRpb24gJiYgJ2xhdCcgaW4gbGVnYWN5LmxvY2F0aW9uKSB7XG4gICAgICAgICAgICBjb29yZGluYXRlcyA9IFtsZWdhY3kubG9jYXRpb24ubG9uID8/IDAsIGxlZ2FjeS5sb2NhdGlvbi5sYXQgPz8gMF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gTm9ybWFsaXplIHNpemVcbiAgICBjb25zdCBzaXplTWFwID0ge1xuICAgICAgICAnc21hbGwnOiAnc21hbGwnLFxuICAgICAgICAnbWVkaXVtJzogJ21lZGl1bScsXG4gICAgICAgICdsYXJnZSc6ICdsYXJnZScsXG4gICAgICAgICd0aW55JzogJ3RpbnknLFxuICAgICAgICAnZXh0cmEtbGFyZ2UnOiAnZXh0cmEtbGFyZ2UnLFxuICAgICAgICAneGwnOiAnZXh0cmEtbGFyZ2UnLFxuICAgIH07XG4gICAgY29uc3Qgc2l6ZSA9IGxlZ2FjeS5zaXplICE9IG51bGwgJiYgbGVnYWN5LnNpemUubGVuZ3RoID4gMCA/IChzaXplTWFwW2xlZ2FjeS5zaXplLnRvTG93ZXJDYXNlKCldID8/ICdtZWRpdW0nKSA6ICdtZWRpdW0nO1xuICAgIC8vIE5vcm1hbGl6ZSBzcGVjaWVzXG4gICAgY29uc3Qgc3BlY2llc01hcCA9IHtcbiAgICAgICAgJ2RvZyc6ICdkb2cnLFxuICAgICAgICAnY2F0JzogJ2NhdCcsXG4gICAgICAgICdiaXJkJzogJ2JpcmQnLFxuICAgICAgICAncmFiYml0JzogJ3JhYmJpdCcsXG4gICAgfTtcbiAgICBjb25zdCBzcGVjaWVzID0gbGVnYWN5LnNwZWNpZXMgIT0gbnVsbCAmJiBsZWdhY3kuc3BlY2llcy5sZW5ndGggPiAwID8gKHNwZWNpZXNNYXBbbGVnYWN5LnNwZWNpZXMudG9Mb3dlckNhc2UoKV0gPz8gJ290aGVyJykgOiAnZG9nJztcbiAgICAvLyBDb252ZXJ0IHBob3Rvc1xuICAgIGNvbnN0IHBob3RvcyA9IChsZWdhY3kucGhvdG9zICE9IG51bGwgPyBsZWdhY3kucGhvdG9zIDogW10pLm1hcCgocGhvdG8sIGluZGV4KSA9PiAoe1xuICAgICAgICB1cmw6IHR5cGVvZiBwaG90byA9PT0gJ3N0cmluZycgPyBwaG90byA6IHBob3RvLnVybCxcbiAgICAgICAgaXNQcmltYXJ5OiB0eXBlb2YgcGhvdG8gPT09ICdvYmplY3QnID8gKHBob3RvLmlzUHJpbWFyeSAhPSBudWxsID8gcGhvdG8uaXNQcmltYXJ5IDogaW5kZXggPT09IDApIDogaW5kZXggPT09IDAsXG4gICAgICAgIGNhcHRpb246ICcnLFxuICAgIH0pKTtcbiAgICBjb25zdCBjb3JlUGV0ID0ge1xuICAgICAgICBfaWQ6IGxlZ2FjeS5pZCxcbiAgICAgICAgaWQ6IGxlZ2FjeS5pZCxcbiAgICAgICAgb3duZXI6IGxlZ2FjeS5vd25lcklkICE9IG51bGwgPyBsZWdhY3kub3duZXJJZCA6ICcnLFxuICAgICAgICBuYW1lOiBsZWdhY3kubmFtZS5sZW5ndGggPiAwID8gbGVnYWN5Lm5hbWUgOiAnVW5rbm93bicsXG4gICAgICAgIHNwZWNpZXMsXG4gICAgICAgIGJyZWVkOiBsZWdhY3kuYnJlZWQubGVuZ3RoID4gMCA/IGxlZ2FjeS5icmVlZCA6ICdNaXhlZCcsXG4gICAgICAgIGFnZTogIWlzTmFOKGxlZ2FjeS5hZ2UpID8gbGVnYWN5LmFnZSA6IDAsXG4gICAgICAgIGdlbmRlcjogbGVnYWN5LmdlbmRlciAhPSBudWxsID8gbGVnYWN5LmdlbmRlciA6ICdtYWxlJyxcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgLi4uKGxlZ2FjeS53ZWlnaHQgIT0gbnVsbCAmJiAhaXNOYU4obGVnYWN5LndlaWdodCkgJiYgeyB3ZWlnaHQ6IGxlZ2FjeS53ZWlnaHQgfSksXG4gICAgICAgIHBob3RvcyxcbiAgICAgICAgdmlkZW9zOiBbXSxcbiAgICAgICAgZGVzY3JpcHRpb246IGxlZ2FjeS5kZXNjcmlwdGlvbiAhPSBudWxsICYmIGxlZ2FjeS5kZXNjcmlwdGlvbi5sZW5ndGggPiAwID8gbGVnYWN5LmRlc2NyaXB0aW9uIDogJycsXG4gICAgICAgIHBlcnNvbmFsaXR5VGFnczogbGVnYWN5LnRlbXBlcmFtZW50ICE9IG51bGwgPyBsZWdhY3kudGVtcGVyYW1lbnQgOiBbXSxcbiAgICAgICAgaW50ZW50OiAnYWxsJyxcbiAgICAgICAgYXZhaWxhYmlsaXR5OiB7XG4gICAgICAgICAgICBpc0F2YWlsYWJsZTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgaGVhbHRoSW5mbzoge1xuICAgICAgICAgICAgdmFjY2luYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBzcGF5ZWROZXV0ZXJlZDogZmFsc2UsXG4gICAgICAgICAgICBtaWNyb2NoaXBwZWQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgICAgdHlwZTogJ1BvaW50JyxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgICB9LFxuICAgICAgICBmZWF0dXJlZDoge1xuICAgICAgICAgICAgaXNGZWF0dXJlZDogZmFsc2UsXG4gICAgICAgICAgICBib29zdENvdW50OiAwLFxuICAgICAgICB9LFxuICAgICAgICBhbmFseXRpY3M6IHtcbiAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgbGlrZXM6IDAsXG4gICAgICAgICAgICBtYXRjaGVzOiAwLFxuICAgICAgICAgICAgbWVzc2FnZXM6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICBpc1ZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICAgICAgbGlzdGVkQXQ6IG5vdyxcbiAgICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICAgIHVwZGF0ZWRBdDogbm93LFxuICAgIH07XG4gICAgcmV0dXJuIGNvcmVQZXQ7XG59XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgbGVnYWN5IHBldHMgdG8gY29yZSBQZXQgdHlwZXNcbiAqL1xuZnVuY3Rpb24gdG9Db3JlUGV0cyhsZWdhY3lQZXRzKSB7XG4gICAgcmV0dXJuIGxlZ2FjeVBldHMubWFwKHRvQ29yZVBldCk7XG59XG4vKipcbiAqIENvbnZlcnQgY29yZSBQZXQgdG8gbGVnYWN5IGZvcm1hdCAoZm9yIEFQSSByZXF1ZXN0cylcbiAqL1xuZnVuY3Rpb24gdG9MZWdhY3lQZXQocGV0KSB7XG4gICAgY29uc3QgbGVnYWN5ID0ge1xuICAgICAgICBpZDogcGV0Ll9pZCxcbiAgICAgICAgbmFtZTogcGV0Lm5hbWUsXG4gICAgICAgIGJyZWVkOiBwZXQuYnJlZWQsXG4gICAgICAgIGFnZTogcGV0LmFnZSxcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgcGV0Lm93bmVyID09PSAnc3RyaW5nJykge1xuICAgICAgICBsZWdhY3kub3duZXJJZCA9IHBldC5vd25lcjtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHBldC5vd25lciA9PT0gJ29iamVjdCcgJiYgJ19pZCcgaW4gcGV0Lm93bmVyKSB7XG4gICAgICAgIGxlZ2FjeS5vd25lcklkID0gcGV0Lm93bmVyLl9pZDtcbiAgICB9XG4gICAgbGVnYWN5LnNwZWNpZXMgPSBwZXQuc3BlY2llcztcbiAgICBsZWdhY3kuZ2VuZGVyID0gcGV0LmdlbmRlcjtcbiAgICBsZWdhY3kuc2l6ZSA9IHBldC5zaXplO1xuICAgIGlmIChwZXQud2VpZ2h0ICE9IG51bGwpXG4gICAgICAgIGxlZ2FjeS53ZWlnaHQgPSBwZXQud2VpZ2h0O1xuICAgIGlmIChwZXQuZGVzY3JpcHRpb24gIT0gbnVsbClcbiAgICAgICAgbGVnYWN5LmRlc2NyaXB0aW9uID0gcGV0LmRlc2NyaXB0aW9uO1xuICAgIGxlZ2FjeS50ZW1wZXJhbWVudCA9IHBldC5wZXJzb25hbGl0eVRhZ3M7XG4gICAgaWYgKHBldC5waG90b3MubGVuZ3RoID4gMCkge1xuICAgICAgICBsZWdhY3kucGhvdG9zID0gcGV0LnBob3Rvcy5tYXAocCA9PiAoeyB1cmw6IHAudXJsLCBpc1ByaW1hcnk6IHAuaXNQcmltYXJ5IH0pKTtcbiAgICB9XG4gICAgbGVnYWN5LmxvY2F0aW9uID0ge1xuICAgICAgICBsb25naXR1ZGU6IHBldC5sb2NhdGlvbi5jb29yZGluYXRlc1swXSxcbiAgICAgICAgbGF0aXR1ZGU6IHBldC5sb2NhdGlvbi5jb29yZGluYXRlc1sxXSxcbiAgICB9O1xuICAgIHJldHVybiBsZWdhY3k7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLFNBQUFFLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FB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