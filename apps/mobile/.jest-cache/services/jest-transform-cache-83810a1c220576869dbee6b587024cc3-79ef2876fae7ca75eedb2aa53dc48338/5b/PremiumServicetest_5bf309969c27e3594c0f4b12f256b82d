6ba697a93632124bc1399bfeff78ec9d
"use strict";

_getJestObj().mock("../api");
_getJestObj().mock("../logger", function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _PremiumService = require("../PremiumService");
var _api = require("../api");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApi = _api.api;
(0, _globals.describe)('PremiumService', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('Happy Path - Subscription Status', function () {
    (0, _globals.it)('should check if user has active subscription successfully', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: true,
        plan: 'premium',
        features: ['feature1', 'feature2'],
        autoRenew: true,
        currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
      });
      var result = yield _PremiumService.premiumService.hasActiveSubscription();
      (0, _globals.expect)(result).toBe(true);
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/premium/status');
    }));
    (0, _globals.it)('should return false for inactive subscription', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: false,
        plan: 'free',
        features: [],
        autoRenew: false
      });
      var result = yield _PremiumService.premiumService.hasActiveSubscription();
      (0, _globals.expect)(result).toBe(false);
    }));
    (0, _globals.it)('should get detailed subscription status with all fields', (0, _asyncToGenerator2.default)(function* () {
      var mockStatus = {
        isActive: true,
        plan: 'premium',
        features: ['undo_swipes', 'see_who_liked', 'boost'],
        autoRenew: true,
        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        stripeCustomerId: 'cus_123456',
        currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
      };
      mockApi.request.mockResolvedValueOnce(mockStatus);
      var result = yield _PremiumService.premiumService.getSubscriptionStatus();
      (0, _globals.expect)(result).toEqual(mockStatus);
      (0, _globals.expect)(result.isActive).toBe(true);
      (0, _globals.expect)(result.plan).toBe('premium');
      (0, _globals.expect)(result.features).toHaveLength(3);
    }));
  });
  (0, _globals.describe)('Happy Path - Subscription Plans', function () {
    (0, _globals.it)('should return available subscription plans', function () {
      var plans = _PremiumService.premiumService.getAvailablePlans();
      (0, _globals.expect)(plans).toHaveLength(3);
      (0, _globals.expect)(plans.map(function (p) {
        return p.id;
      })).toEqual(['basic', 'premium', 'ultimate']);
      (0, _globals.expect)(plans[0].price).toBe(4.99);
      (0, _globals.expect)(plans[1].price).toBe(9.99);
      (0, _globals.expect)(plans[2].price).toBe(19.99);
    });
    (0, _globals.it)('should have all required plan properties', function () {
      var plans = _PremiumService.premiumService.getAvailablePlans();
      plans.forEach(function (plan) {
        (0, _globals.expect)(plan).toHaveProperty('id');
        (0, _globals.expect)(plan).toHaveProperty('name');
        (0, _globals.expect)(plan).toHaveProperty('price');
        (0, _globals.expect)(plan).toHaveProperty('interval');
        (0, _globals.expect)(plan).toHaveProperty('features');
        (0, _globals.expect)(plan).toHaveProperty('stripePriceId');
        (0, _globals.expect)(plan.interval).toMatch(/^(month|year)$/);
        (0, _globals.expect)(Array.isArray(plan.features)).toBe(true);
      });
    });
  });
  (0, _globals.describe)('Happy Path - Checkout Session', function () {
    (0, _globals.it)('should create Stripe checkout session for valid plan', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        sessionId: 'cs_test_123',
        url: 'https://checkout.stripe.com/c/pay/cs_test_123'
      });
      var result = yield _PremiumService.premiumService.createCheckoutSession('premium');
      (0, _globals.expect)(result.sessionId).toBe('cs_test_123');
      (0, _globals.expect)(result.url).toContain('checkout.stripe.com');
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/premium/create-checkout-session', _globals.expect.objectContaining({
        method: 'POST'
      }));
    }));
    (0, _globals.it)('should create checkout session with custom URLs', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        sessionId: 'cs_test_456',
        url: 'https://checkout.stripe.com/c/pay/cs_test_456'
      });
      var successUrl = 'custom://success';
      var cancelUrl = 'custom://cancel';
      yield _PremiumService.premiumService.createCheckoutSession('premium', successUrl, cancelUrl);
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/premium/create-checkout-session', _globals.expect.objectContaining({
        method: 'POST',
        body: _globals.expect.stringContaining('custom://success')
      }));
    }));
  });
  (0, _globals.describe)('Happy Path - Cancel Subscription', function () {
    (0, _globals.it)('should cancel subscription successfully', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        success: true,
        message: 'Subscription cancelled successfully'
      });
      var result = yield _PremiumService.premiumService.cancelSubscription();
      (0, _globals.expect)(result.success).toBe(true);
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/premium/cancel', _globals.expect.objectContaining({
        method: 'POST'
      }));
    }));
  });
  (0, _globals.describe)('Happy Path - Premium Limits', function () {
    (0, _globals.it)('should return free tier limits for inactive subscription', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: false,
        plan: 'free',
        features: [],
        autoRenew: false
      });
      var limits = yield _PremiumService.premiumService.getPremiumLimits();
      (0, _globals.expect)(limits.swipesPerDay).toBe(50);
      (0, _globals.expect)(limits.likesPerDay).toBe(100);
      (0, _globals.expect)(limits.superLikesPerDay).toBe(3);
      (0, _globals.expect)(limits.canUndoSwipes).toBe(false);
      (0, _globals.expect)(limits.canSeeWhoLiked).toBe(false);
      (0, _globals.expect)(limits.canBoostProfile).toBe(false);
      (0, _globals.expect)(limits.advancedFilters).toBe(false);
      (0, _globals.expect)(limits.priorityMatching).toBe(false);
      (0, _globals.expect)(limits.unlimitedRewind).toBe(false);
    }));
    (0, _globals.it)('should return basic tier limits correctly', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: true,
        plan: 'basic',
        features: ['see_who_liked', 'advanced_filters'],
        autoRenew: true
      });
      var limits = yield _PremiumService.premiumService.getPremiumLimits();
      (0, _globals.expect)(limits.superLikesPerDay).toBe(5);
      (0, _globals.expect)(limits.canSeeWhoLiked).toBe(true);
      (0, _globals.expect)(limits.advancedFilters).toBe(true);
      (0, _globals.expect)(limits.canUndoSwipes).toBe(false);
    }));
    (0, _globals.it)('should return premium tier limits with all features', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: true,
        plan: 'premium',
        features: ['all'],
        autoRenew: true
      });
      var limits = yield _PremiumService.premiumService.getPremiumLimits();
      (0, _globals.expect)(limits.superLikesPerDay).toBe(-1);
      (0, _globals.expect)(limits.canUndoSwipes).toBe(true);
      (0, _globals.expect)(limits.canSeeWhoLiked).toBe(true);
      (0, _globals.expect)(limits.canBoostProfile).toBe(true);
      (0, _globals.expect)(limits.advancedFilters).toBe(true);
      (0, _globals.expect)(limits.priorityMatching).toBe(true);
    }));
    (0, _globals.it)('should return ultimate tier limits with unlimited rewind', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: true,
        plan: 'ultimate',
        features: ['all'],
        autoRenew: true
      });
      var limits = yield _PremiumService.premiumService.getPremiumLimits();
      (0, _globals.expect)(limits.superLikesPerDay).toBe(-1);
      (0, _globals.expect)(limits.unlimitedRewind).toBe(true);
      (0, _globals.expect)(limits.canBoostProfile).toBe(true);
    }));
  });
  (0, _globals.describe)('Happy Path - Feature Access', function () {
    (0, _globals.it)('should check if user can use premium feature', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: true,
        plan: 'premium',
        features: ['undo_swipes'],
        autoRenew: true
      });
      var canUndo = yield _PremiumService.premiumService.canUseFeature('canUndoSwipes');
      (0, _globals.expect)(canUndo).toBe(true);
    }));
    (0, _globals.it)('should return false for unavailable feature', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: false,
        plan: 'free',
        features: [],
        autoRenew: false
      });
      var canBoost = yield _PremiumService.premiumService.canUseFeature('canBoostProfile');
      (0, _globals.expect)(canBoost).toBe(false);
    }));
  });
  (0, _globals.describe)('Happy Path - Usage Tracking', function () {
    (0, _globals.it)('should track premium feature usage', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce(undefined);
      yield _PremiumService.premiumService.trackUsage('super_like');
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/premium/track-usage', _globals.expect.objectContaining({
        method: 'POST'
      }));
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle API errors gracefully when checking subscription', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockRejectedValueOnce(new Error('Network error'));
      var result = yield _PremiumService.premiumService.hasActiveSubscription();
      (0, _globals.expect)(result).toBe(false);
    }));
    (0, _globals.it)('should handle API errors when getting status', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockRejectedValueOnce(new Error('Timeout'));
      var result = yield _PremiumService.premiumService.getSubscriptionStatus();
      (0, _globals.expect)(result.isActive).toBe(false);
      (0, _globals.expect)(result.plan).toBe('free');
      (0, _globals.expect)(result.features).toEqual([]);
    }));
    (0, _globals.it)('should throw error for invalid plan ID', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _globals.expect)(_PremiumService.premiumService.createCheckoutSession('invalid_plan')).rejects.toThrow('Invalid plan ID');
    }));
    (0, _globals.it)('should handle cancel subscription errors', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockRejectedValueOnce(new Error('Cancellation failed'));
      yield (0, _globals.expect)(_PremiumService.premiumService.cancelSubscription()).rejects.toThrow();
    }));
    (0, _globals.it)('should handle errors when getting premium limits', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockRejectedValueOnce(new Error('API error'));
      var limits = yield _PremiumService.premiumService.getPremiumLimits();
      (0, _globals.expect)(limits.swipesPerDay).toBe(50);
      (0, _globals.expect)(limits.canUndoSwipes).toBe(false);
    }));
    (0, _globals.it)('should handle errors when checking feature access', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockRejectedValueOnce(new Error('API error'));
      var canUse = yield _PremiumService.premiumService.canUseFeature('canBoostProfile');
      (0, _globals.expect)(canUse).toBe(false);
    }));
    (0, _globals.it)('should not throw when usage tracking fails', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockRejectedValueOnce(new Error('Tracking failed'));
      yield (0, _globals.expect)(_PremiumService.premiumService.trackUsage('feature')).resolves.not.toThrow();
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty features array', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: true,
        plan: 'premium',
        features: [],
        autoRenew: false
      });
      var status = yield _PremiumService.premiumService.getSubscriptionStatus();
      (0, _globals.expect)(status.features).toEqual([]);
    }));
    (0, _globals.it)('should handle missing optional fields', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: true,
        plan: 'basic',
        features: ['feature1'],
        autoRenew: true
      });
      var status = yield _PremiumService.premiumService.getSubscriptionStatus();
      (0, _globals.expect)(status.isActive).toBe(true);
      (0, _globals.expect)(status.expiresAt).toBeUndefined();
      (0, _globals.expect)(status.stripeCustomerId).toBeUndefined();
    }));
    (0, _globals.it)('should handle all premium feature checks', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValue({
        isActive: true,
        plan: 'premium',
        features: ['all'],
        autoRenew: true
      });
      var checks = yield Promise.all([_PremiumService.premiumService.canUseFeature('swipesPerDay'), _PremiumService.premiumService.canUseFeature('likesPerDay'), _PremiumService.premiumService.canUseFeature('canUndoSwipes'), _PremiumService.premiumService.canUseFeature('canSeeWhoLiked'), _PremiumService.premiumService.canUseFeature('canBoostProfile'), _PremiumService.premiumService.canUseFeature('advancedFilters'), _PremiumService.premiumService.canUseFeature('priorityMatching'), _PremiumService.premiumService.canUseFeature('unlimitedRewind')]);
      (0, _globals.expect)(checks.every(function (check) {
        return typeof check === 'boolean';
      })).toBe(true);
    }));
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should integrate with API service properly', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: true,
        plan: 'premium',
        features: ['feature1'],
        autoRenew: true
      });
      yield _PremiumService.premiumService.getSubscriptionStatus();
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledTimes(1);
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/premium/status');
    }));
    (0, _globals.it)('should cache subscription status between calls', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValue({
        isActive: true,
        plan: 'premium',
        features: ['feature1'],
        autoRenew: true
      });
      yield _PremiumService.premiumService.getSubscriptionStatus();
      yield _PremiumService.premiumService.getSubscriptionStatus();
      yield _PremiumService.premiumService.getSubscriptionStatus();
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledTimes(3);
    }));
  });
  (0, _globals.describe)('Type Safety', function () {
    (0, _globals.it)('should maintain type safety for subscription status', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: true,
        plan: 'premium',
        features: ['feature1'],
        autoRenew: true
      });
      var status = yield _PremiumService.premiumService.getSubscriptionStatus();
      (0, _globals.expect)(typeof status.isActive).toBe('boolean');
      (0, _globals.expect)(typeof status.plan).toBe('string');
      (0, _globals.expect)(Array.isArray(status.features)).toBe(true);
      (0, _globals.expect)(typeof status.autoRenew).toBe('boolean');
    }));
    (0, _globals.it)('should maintain type safety for limits', (0, _asyncToGenerator2.default)(function* () {
      mockApi.request.mockResolvedValueOnce({
        isActive: true,
        plan: 'premium',
        features: [],
        autoRenew: true
      });
      var limits = yield _PremiumService.premiumService.getPremiumLimits();
      (0, _globals.expect)(typeof limits.swipesPerDay).toBe('number');
      (0, _globals.expect)(typeof limits.superLikesPerDay).toBe('number');
      (0, _globals.expect)(typeof limits.canUndoSwipes).toBe('boolean');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,