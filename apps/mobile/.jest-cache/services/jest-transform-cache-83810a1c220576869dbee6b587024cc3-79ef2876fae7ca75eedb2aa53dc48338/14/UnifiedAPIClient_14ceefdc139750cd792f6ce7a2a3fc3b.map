{"version":3,"names":["_interopRequireDefault","require","_wrapNativeSuper2","_defineProperty2","_asyncToGenerator2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get3","_inherits2","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_callSuper","_isNativeReflectConstruct","Reflect","construct","constructor","Boolean","prototype","valueOf","call","_superPropGet","p","exports","value","APIError","UnifiedAPIClient","logger_1","CircuitBreaker_1","RequestRetryStrategy_1","OfflineQueueManager_1","APIErrorClassifier_1","RecoveryStrategies_1","_OfflineQueueManager_","config","_this","queueConfig","token","cache","Map","clientConfig","circuitBreaker","CircuitBreaker","circuitBreakerConfig","retryStrategy","RequestRetryStrategy","retryConfig","errorClassifier","APIErrorClassifier","recoveryStrategies","RecoveryStrategies","key","setToken","setTokenRefreshFn","fn","tokenRefreshFn","_request","endpoint","_config$requireOnline","_this2","undefined","method","requireOnline","isHealthy","error","Error","handleError","isOnline","_this$clientConfig$re","enqueue","data","body","headers","priority","maxRetries","conflictResolution","success","result","execute","makeRequest","request","_x","_get2","get","_x2","_x3","_post","post","_x4","_x5","_x6","_put","put","_x7","_x8","_x9","_patch","patch","_x0","_x1","_x10","_delete2","delete","_x11","_x12","_makeRequest","url","baseURL","timeout","fetchConfig","signal","AbortSignal","JSON","stringify","response","fetch","ok","errorData","json","catch","message","statusText","status","_x13","_x14","_handleError","_this3","classification","classify","logger","type","retryable","_this$clientConfig$re2","recoveryResult","combinedRecovery","retry","refreshToken","useCache","getCache","queue","_queue","_this3$clientConfig$r","_x18","recoveryError","getUserMessage","statusCode","_x15","_x16","_x17","_processItem","item","setCache","processItem","_x19","_getCache","cached","Date","now","timestamp","ttl","_x20","set","getCircuitBreakerMetrics","getMetrics","getQueueStats","getStats","destroy","clear","OfflineQueueManager","_Error","_this4","name"],"sources":["UnifiedAPIClient.js"],"sourcesContent":["\"use strict\";\n/**\n * Unified API Client\n * Production-grade API client with circuit breaker, retry logic, offline queue, and error handling\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.APIError = exports.UnifiedAPIClient = void 0;\nconst logger_1 = require(\"../utils/logger\");\nconst CircuitBreaker_1 = require(\"./CircuitBreaker\");\nconst RequestRetryStrategy_1 = require(\"./RequestRetryStrategy\");\nconst OfflineQueueManager_1 = require(\"./OfflineQueueManager\");\nconst APIErrorClassifier_1 = require(\"./APIErrorClassifier\");\nconst RecoveryStrategies_1 = require(\"./RecoveryStrategies\");\nclass UnifiedAPIClient extends OfflineQueueManager_1.OfflineQueueManager {\n    clientConfig;\n    circuitBreaker;\n    retryStrategy;\n    errorClassifier;\n    recoveryStrategies;\n    token = null;\n    tokenRefreshFn;\n    cache = new Map();\n    constructor(config) {\n        super(config.queueConfig);\n        this.clientConfig = config;\n        this.circuitBreaker = new CircuitBreaker_1.CircuitBreaker(config.circuitBreakerConfig);\n        this.retryStrategy = new RequestRetryStrategy_1.RequestRetryStrategy(config.retryConfig);\n        this.errorClassifier = new APIErrorClassifier_1.APIErrorClassifier();\n        this.recoveryStrategies = new RecoveryStrategies_1.RecoveryStrategies();\n    }\n    /**\n     * Set authentication token\n     */\n    setToken(token) {\n        this.token = token;\n    }\n    /**\n     * Set token refresh function\n     */\n    setTokenRefreshFn(fn) {\n        this.tokenRefreshFn = fn;\n    }\n    /**\n     * Execute API request\n     */\n    async request(endpoint, config = {}) {\n        const method = config.method || 'GET';\n        const requireOnline = config.requireOnline ?? false;\n        // Check if circuit breaker is open\n        if (!this.circuitBreaker.isHealthy()) {\n            const error = new Error('Circuit breaker is OPEN');\n            return this.handleError(error, endpoint, config);\n        }\n        // Check if online is required\n        if (requireOnline && !this.isOnline) {\n            // Queue for offline processing\n            await this.enqueue({\n                endpoint,\n                method,\n                data: config.body,\n                headers: config.headers,\n                priority: config.priority || 'normal',\n                maxRetries: this.clientConfig.retryConfig?.maxRetries || 3,\n                conflictResolution: 'overwrite',\n            });\n            return {\n                success: false,\n                error: 'Request queued for offline processing',\n            };\n        }\n        try {\n            const result = await this.circuitBreaker.execute(async () => {\n                return await this.retryStrategy.execute(async () => {\n                    return await this.makeRequest(endpoint, config);\n                });\n            });\n            return {\n                success: true,\n                data: result,\n            };\n        }\n        catch (error) {\n            return this.handleError(error, endpoint, config);\n        }\n    }\n    /**\n     * GET request\n     */\n    async get(endpoint, config) {\n        return this.request(endpoint, { ...config, method: 'GET' });\n    }\n    /**\n     * POST request\n     */\n    async post(endpoint, data, config) {\n        return this.request(endpoint, { ...config, method: 'POST', body: data });\n    }\n    /**\n     * PUT request\n     */\n    async put(endpoint, data, config) {\n        return this.request(endpoint, { ...config, method: 'PUT', body: data });\n    }\n    /**\n     * PATCH request\n     */\n    async patch(endpoint, data, config) {\n        return this.request(endpoint, { ...config, method: 'PATCH', body: data });\n    }\n    /**\n     * DELETE request\n     */\n    async delete(endpoint, config) {\n        return this.request(endpoint, { ...config, method: 'DELETE' });\n    }\n    /**\n     * Make actual HTTP request\n     */\n    async makeRequest(endpoint, config) {\n        const url = `${this.clientConfig.baseURL}${endpoint}`;\n        const method = config.method || 'GET';\n        const timeout = config.timeout || this.clientConfig.timeout || 30000;\n        const headers = {\n            'Content-Type': 'application/json',\n            ...config.headers,\n        };\n        if (this.token) {\n            headers['Authorization'] = `Bearer ${this.token}`;\n        }\n        const fetchConfig = {\n            method,\n            headers,\n            signal: AbortSignal.timeout(timeout),\n        };\n        if (config.body && method !== 'GET') {\n            fetchConfig.body = JSON.stringify(config.body);\n        }\n        const response = await fetch(url, fetchConfig);\n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({ message: response.statusText }));\n            const error = new APIError(errorData.message || 'Request failed', response.status);\n            throw error;\n        }\n        const data = await response.json().catch(() => null);\n        return data;\n    }\n    /**\n     * Handle error with recovery strategies\n     */\n    async handleError(error, endpoint, config) {\n        const classification = this.errorClassifier.classify(error, {\n            endpoint,\n            method: config.method,\n        });\n        logger_1.logger.error('API request failed', {\n            endpoint,\n            method: config.method,\n            error: classification.type,\n            retryable: classification.retryable,\n        });\n        // Try recovery strategies\n        if (classification.retryable) {\n            try {\n                const recoveryResult = await this.recoveryStrategies.combinedRecovery(() => this.makeRequest(endpoint, config), {\n                    retry: true,\n                    refreshToken: this.tokenRefreshFn,\n                    useCache: () => this.getCache(endpoint),\n                    queue: async (data) => {\n                        await this.enqueue({\n                            endpoint,\n                            method: config.method || 'GET',\n                            data,\n                            headers: config.headers,\n                            priority: config.priority || 'normal',\n                            maxRetries: this.clientConfig.retryConfig?.maxRetries || 3,\n                            conflictResolution: 'overwrite',\n                        });\n                    },\n                }, {\n                    maxRetries: this.clientConfig.retryConfig?.maxRetries || 3,\n                });\n                if (recoveryResult.success) {\n                    return {\n                        success: true,\n                        data: recoveryResult.data,\n                    };\n                }\n            }\n            catch (recoveryError) {\n                logger_1.logger.error('Recovery failed', { error: recoveryError });\n            }\n        }\n        return {\n            success: false,\n            error: this.errorClassifier.getUserMessage(error, { endpoint, method: config.method }),\n            statusCode: classification.statusCode,\n        };\n    }\n    /**\n     * Process queue item\n     */\n    async processItem(item) {\n        const result = await this.makeRequest(item.endpoint, {\n            method: item.method,\n            body: item.data,\n            headers: item.headers,\n        });\n        // Cache successful responses\n        if (item.method === 'GET') {\n            this.setCache(item.endpoint, result);\n        }\n    }\n    /**\n     * Get cached data\n     */\n    async getCache(endpoint) {\n        const cached = this.cache.get(endpoint);\n        if (!cached) {\n            return null;\n        }\n        if (Date.now() - cached.timestamp > cached.ttl) {\n            this.cache.delete(endpoint);\n            return null;\n        }\n        return cached.data;\n    }\n    /**\n     * Set cache\n     */\n    setCache(endpoint, data, ttl = 300000) {\n        this.cache.set(endpoint, {\n            data,\n            timestamp: Date.now(),\n            ttl,\n        });\n    }\n    /**\n     * Get circuit breaker metrics\n     */\n    getCircuitBreakerMetrics() {\n        return this.circuitBreaker.getMetrics();\n    }\n    /**\n     * Get queue statistics\n     */\n    getQueueStats() {\n        return this.getStats();\n    }\n    /**\n     * Cleanup resources\n     */\n    destroy() {\n        super.destroy();\n        this.circuitBreaker.destroy();\n        this.cache.clear();\n    }\n}\nexports.UnifiedAPIClient = UnifiedAPIClient;\nclass APIError extends Error {\n    statusCode;\n    constructor(message, statusCode) {\n        super(message);\n        this.statusCode = statusCode;\n        this.name = 'APIError';\n    }\n}\nexports.APIError = APIError;\n"],"mappings":"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","ignoreList":[]}