b86b611c9521544fbd24176aedb3450b
"use strict";

_getJestObj().mock("../api", function () {
  return {
    api: {
      request: jest.fn()
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _AuthService = require("../AuthService");
var Keychain = _interopRequireWildcard(require("react-native-keychain"));
var SecureStore = _interopRequireWildcard(require("expo-secure-store"));
var LocalAuthentication = _interopRequireWildcard(require("expo-local-authentication"));
var _api = require("../api");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('AuthService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
    jest.useFakeTimers();
    _api.api.request.mockClear();
    Keychain.setGenericPassword.mockClear();
    Keychain.getGenericPassword.mockClear();
    SecureStore.setItemAsync.mockClear();
    LocalAuthentication.authenticateAsync.mockClear();
    Keychain.setGenericPassword.mockResolvedValue(true);
    Keychain.getGenericPassword.mockResolvedValue({
      password: 'test-value'
    });
    Keychain.resetGenericPassword.mockResolvedValue(true);
    SecureStore.setItemAsync.mockResolvedValue(undefined);
    SecureStore.getItemAsync.mockResolvedValue('test-value');
    SecureStore.deleteItemAsync.mockResolvedValue(undefined);
    LocalAuthentication.hasHardwareAsync.mockResolvedValue(true);
    LocalAuthentication.isEnrolledAsync.mockResolvedValue(true);
    LocalAuthentication.supportedAuthenticationTypesAsync.mockResolvedValue([LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION]);
    LocalAuthentication.authenticateAsync.mockResolvedValue({
      success: true
    });
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('Secure Storage', function () {
    it('should store item using Keychain', (0, _asyncToGenerator2.default)(function* () {
      yield _AuthService.authService.login({
        email: 'test@example.com',
        password: 'password123'
      });
      expect(Keychain.setGenericPassword).toHaveBeenCalled();
    }));
    it('should fallback to SecureStore if Keychain fails', (0, _asyncToGenerator2.default)(function* () {
      Keychain.setGenericPassword.mockRejectedValueOnce(new Error('Keychain error'));
      yield _AuthService.authService.login({
        email: 'test@example.com',
        password: 'password123'
      });
      expect(SecureStore.setItemAsync).toHaveBeenCalled();
    }));
    it('should retrieve item from Keychain', (0, _asyncToGenerator2.default)(function* () {
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: JSON.stringify({
          id: 'user123',
          email: 'test@example.com',
          name: 'Test User',
          profileComplete: true,
          subscriptionStatus: 'active',
          createdAt: '2024-01-01T00:00:00Z'
        })
      });
      var user = yield _AuthService.authService.getCurrentUser();
      expect(user).toBeDefined();
      expect(user == null ? void 0 : user.email).toBe('test@example.com');
    }));
    it('should delete item from Keychain', (0, _asyncToGenerator2.default)(function* () {
      yield _AuthService.authService.logout();
      expect(Keychain.resetGenericPassword).toHaveBeenCalled();
    }));
  });
  describe('Login', function () {
    var mockAuthResponse = {
      user: {
        id: 'user123',
        email: 'test@example.com',
        name: 'Test User',
        profileComplete: true,
        subscriptionStatus: 'active',
        createdAt: '2024-01-01T00:00:00Z'
      },
      accessToken: 'access-token-123',
      refreshToken: 'refresh-token-456',
      expiresIn: 3600
    };
    it('should successfully login with valid credentials', (0, _asyncToGenerator2.default)(function* () {
      _api.api.request.mockResolvedValueOnce(mockAuthResponse);
      var response = yield _AuthService.authService.login({
        email: 'test@example.com',
        password: 'password123'
      });
      expect(response).toEqual(mockAuthResponse);
      expect(_api.api.request).toHaveBeenCalledWith('/auth/login', {
        method: 'POST',
        body: JSON.stringify({
          email: 'test@example.com',
          password: 'password123'
        })
      });
    }));
    it('should throw AuthError on login failure', (0, _asyncToGenerator2.default)(function* () {
      _api.api.request.mockRejectedValueOnce(new Error('Login failed'));
      yield expect(_AuthService.authService.login({
        email: 'test@example.com',
        password: 'wrongpassword'
      })).rejects.toThrow(_AuthService.AuthError);
    }));
    it('should store auth data after successful login', (0, _asyncToGenerator2.default)(function* () {
      _api.api.request.mockResolvedValueOnce(mockAuthResponse);
      yield _AuthService.authService.login({
        email: 'test@example.com',
        password: 'password123'
      });
      expect(Keychain.setGenericPassword).toHaveBeenCalledTimes(5);
    }));
  });
  describe('Register', function () {
    var mockAuthResponse = {
      user: {
        id: 'user123',
        email: 'newuser@example.com',
        name: 'New User',
        profileComplete: false,
        subscriptionStatus: 'free',
        createdAt: '2024-01-01T00:00:00Z'
      },
      accessToken: 'access-token-123',
      refreshToken: 'refresh-token-456',
      expiresIn: 3600
    };
    it('should successfully register with valid data', (0, _asyncToGenerator2.default)(function* () {
      _api.api.request.mockResolvedValueOnce(mockAuthResponse);
      var response = yield _AuthService.authService.register({
        email: 'newuser@example.com',
        password: 'password123',
        name: 'New User',
        confirmPassword: 'password123'
      });
      expect(response).toEqual(mockAuthResponse);
      expect(_api.api.request).toHaveBeenCalledWith('/auth/register', {
        method: 'POST',
        body: JSON.stringify({
          email: 'newuser@example.com',
          password: 'password123',
          name: 'New User'
        })
      });
    }));
    it('should throw error when passwords do not match', (0, _asyncToGenerator2.default)(function* () {
      yield expect(_AuthService.authService.register({
        email: 'newuser@example.com',
        password: 'password123',
        name: 'New User',
        confirmPassword: 'differentpassword'
      })).rejects.toThrow(_AuthService.AuthError);
    }));
  });
  describe('Logout', function () {
    it('should successfully logout and clear all data', (0, _asyncToGenerator2.default)(function* () {
      _api.api.request.mockResolvedValueOnce({
        success: true
      });
      yield _AuthService.authService.logout();
      expect(Keychain.resetGenericPassword).toHaveBeenCalled();
      expect(_api.api.request).toHaveBeenCalledWith('/auth/logout', {
        method: 'POST',
        body: JSON.stringify({
          refreshToken: undefined
        })
      });
    }));
    it('should clear local data even if server logout fails', (0, _asyncToGenerator2.default)(function* () {
      _api.api.request.mockRejectedValueOnce(new Error('Network error'));
      yield _AuthService.authService.logout();
      expect(Keychain.resetGenericPassword).toHaveBeenCalled();
    }));
  });
  describe('Token Management', function () {
    it('should refresh access token successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockRefreshResponse = {
        user: {
          id: 'user123',
          email: 'test@example.com',
          name: 'Test User',
          profileComplete: true,
          subscriptionStatus: 'active',
          createdAt: '2024-01-01T00:00:00Z'
        },
        accessToken: 'new-access-token',
        refreshToken: 'new-refresh-token',
        expiresIn: 3600
      };
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: 'refresh-token-456'
      });
      _api.api.request.mockResolvedValueOnce(mockRefreshResponse);
      var response = yield _AuthService.authService.refreshToken();
      expect(response).toEqual(mockRefreshResponse);
      expect(_api.api.request).toHaveBeenCalledWith('/auth/refresh', {
        method: 'POST',
        body: JSON.stringify({
          refreshToken: 'refresh-token-456'
        })
      });
    }));
    it('should return null if no refresh token exists', (0, _asyncToGenerator2.default)(function* () {
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: null
      });
      var response = yield _AuthService.authService.refreshToken();
      expect(response).toBeNull();
    }));
    it('should rotate tokens and clear auth data on failure', (0, _asyncToGenerator2.default)(function* () {
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: 'invalid-refresh-token'
      });
      _api.api.request.mockRejectedValueOnce(new Error('Token expired'));
      var response = yield _AuthService.authService.rotateTokens();
      expect(response).toBe(false);
      expect(Keychain.resetGenericPassword).toHaveBeenCalled();
    }));
  });
  describe('Biometric Authentication', function () {
    it('should check if biometric is available', (0, _asyncToGenerator2.default)(function* () {
      var result = yield _AuthService.authService.isBiometricAvailable();
      expect(result.available).toBe(true);
      expect(result.types).toContain(LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION);
    }));
    it('should enable biometric authentication', (0, _asyncToGenerator2.default)(function* () {
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: JSON.stringify({
          id: 'user123',
          email: 'test@example.com',
          name: 'Test User',
          profileComplete: true,
          subscriptionStatus: 'active',
          createdAt: '2024-01-01T00:00:00Z'
        })
      });
      var result = yield _AuthService.authService.enableBiometricAuthentication();
      expect(result).toBe(true);
      expect(LocalAuthentication.authenticateAsync).toHaveBeenCalled();
      expect(Keychain.setGenericPassword).toHaveBeenCalled();
    }));
    it('should throw error if biometric hardware is not available', (0, _asyncToGenerator2.default)(function* () {
      LocalAuthentication.hasHardwareAsync.mockResolvedValueOnce(false);
      yield expect(_AuthService.authService.enableBiometricAuthentication()).rejects.toThrow(_AuthService.AuthError);
    }));
    it('should login with biometrics', (0, _asyncToGenerator2.default)(function* () {
      var mockAuthResponse = {
        user: {
          id: 'user123',
          email: 'test@example.com',
          name: 'Test User',
          profileComplete: true,
          subscriptionStatus: 'active',
          createdAt: '2024-01-01T00:00:00Z'
        },
        accessToken: 'access-token-123',
        refreshToken: 'refresh-token-456',
        expiresIn: 3600
      };
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: 'true'
      }).mockResolvedValueOnce({
        password: JSON.stringify({
          email: 'test@example.com',
          biometricToken: 'biometric-token-123'
        })
      });
      _api.api.request.mockResolvedValueOnce(mockAuthResponse);
      var response = yield _AuthService.authService.loginWithBiometrics();
      expect(response).toEqual(mockAuthResponse);
      expect(LocalAuthentication.authenticateAsync).toHaveBeenCalled();
      expect(_api.api.request).toHaveBeenCalledWith('/auth/biometric-login', {
        method: 'POST',
        body: JSON.stringify({
          email: 'test@example.com',
          biometricToken: 'biometric-token-123'
        })
      });
    }));
    it('should disable biometric authentication', (0, _asyncToGenerator2.default)(function* () {
      yield _AuthService.authService.disableBiometricAuthentication();
      expect(Keychain.resetGenericPassword).toHaveBeenCalled();
    }));
    it('should check if biometric is enabled', (0, _asyncToGenerator2.default)(function* () {
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: 'true'
      });
      var isEnabled = yield _AuthService.authService.isBiometricEnabled();
      expect(isEnabled).toBe(true);
    }));
  });
  describe('Session Management', function () {
    it('should record user activity', (0, _asyncToGenerator2.default)(function* () {
      yield _AuthService.authService.recordUserActivity();
      expect(Keychain.setGenericPassword).toHaveBeenCalled();
    }));
    it('should logout after session timeout', (0, _asyncToGenerator2.default)(function* () {
      var pastTime = (Date.now() - 25 * 60 * 60 * 1000).toString();
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: pastTime
      });
      var authService2 = _AuthService.authService;
      yield authService2.checkSessionValidity();
      expect(Keychain.resetGenericPassword).toHaveBeenCalled();
    }));
    it('should logout after inactivity timeout', (0, _asyncToGenerator2.default)(function* () {
      var pastTime = (Date.now() - 31 * 60 * 1000).toString();
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: Date.now().toString()
      }).mockResolvedValueOnce({
        password: pastTime
      });
      var authService2 = _AuthService.authService;
      yield authService2.checkSessionValidity();
      expect(Keychain.resetGenericPassword).toHaveBeenCalled();
    }));
  });
  describe('User Management', function () {
    it('should get current user', (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        id: 'user123',
        email: 'test@example.com',
        name: 'Test User',
        profileComplete: true,
        subscriptionStatus: 'active',
        createdAt: '2024-01-01T00:00:00Z'
      };
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: JSON.stringify(mockUser)
      });
      var user = yield _AuthService.authService.getCurrentUser();
      expect(user).toEqual(mockUser);
    }));
    it('should update user data', (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        id: 'user123',
        email: 'test@example.com',
        name: 'Test User',
        profileComplete: true,
        subscriptionStatus: 'active',
        createdAt: '2024-01-01T00:00:00Z'
      };
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: JSON.stringify(mockUser)
      });
      yield _AuthService.authService.updateUser({
        name: 'Updated Name'
      });
      expect(Keychain.setGenericPassword).toHaveBeenCalled();
    }));
    it('should throw error when updating user without authentication', (0, _asyncToGenerator2.default)(function* () {
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: null
      });
      yield expect(_AuthService.authService.updateUser({
        name: 'Updated Name'
      })).rejects.toThrow(_AuthService.AuthError);
    }));
  });
  describe('Password Reset', function () {
    it('should request password reset', (0, _asyncToGenerator2.default)(function* () {
      _api.api.request.mockResolvedValueOnce({
        success: true,
        message: 'Reset email sent'
      });
      var response = yield _AuthService.authService.forgotPassword('test@example.com');
      expect(response.success).toBe(true);
      expect(_api.api.request).toHaveBeenCalledWith('/auth/forgot-password', {
        method: 'POST',
        body: JSON.stringify({
          email: 'test@example.com'
        })
      });
    }));
    it('should reset password with token', (0, _asyncToGenerator2.default)(function* () {
      _api.api.request.mockResolvedValueOnce({
        success: true,
        message: 'Password reset successful'
      });
      var response = yield _AuthService.authService.resetPassword({
        token: 'reset-token-123',
        password: 'newpassword123',
        confirmPassword: 'newpassword123'
      });
      expect(response.success).toBe(true);
      expect(_api.api.request).toHaveBeenCalledWith('/auth/reset-password', {
        method: 'POST',
        body: JSON.stringify({
          token: 'reset-token-123',
          password: 'newpassword123'
        })
      });
    }));
    it('should throw error when passwords do not match during reset', (0, _asyncToGenerator2.default)(function* () {
      yield expect(_AuthService.authService.resetPassword({
        token: 'reset-token-123',
        password: 'newpassword123',
        confirmPassword: 'differentpassword'
      })).rejects.toThrow(_AuthService.AuthError);
    }));
  });
  describe('Authentication Check', function () {
    it('should check if user is authenticated', (0, _asyncToGenerator2.default)(function* () {
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: 'access-token-123'
      }).mockResolvedValueOnce({
        password: JSON.stringify({
          id: 'user123',
          email: 'test@example.com',
          name: 'Test User',
          profileComplete: true,
          subscriptionStatus: 'active',
          createdAt: '2024-01-01T00:00:00Z'
        })
      });
      var isAuthenticated = yield _AuthService.authService.isAuthenticated();
      expect(isAuthenticated).toBe(true);
    }));
    it('should return false when not authenticated', (0, _asyncToGenerator2.default)(function* () {
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: null
      }).mockResolvedValueOnce({
        password: null
      });
      var isAuthenticated = yield _AuthService.authService.isAuthenticated();
      expect(isAuthenticated).toBe(false);
    }));
  });
  describe('Error Handling', function () {
    it('should handle network errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      _api.api.request.mockRejectedValueOnce(new Error('Network error'));
      yield expect(_AuthService.authService.login({
        email: 'test@example.com',
        password: 'password123'
      })).rejects.toThrow(_AuthService.AuthError);
    }));
    it('should handle invalid JSON in stored user data', (0, _asyncToGenerator2.default)(function* () {
      Keychain.getGenericPassword.mockResolvedValueOnce({
        password: 'invalid-json'
      });
      var user = yield _AuthService.authService.getCurrentUser();
      expect(user).toBeNull();
    }));
    it('should handle Keychain errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      Keychain.getGenericPassword.mockRejectedValueOnce(new Error('Keychain error'));
      var user = yield _AuthService.authService.getCurrentUser();
      expect(user).toBeNull();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,