2476abe1786afd460e82c5b03746c117
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.supportedAuthenticationTypesAsync = exports.isEnrolledAsync = exports.hasHardwareAsync = exports.getEnrolledLevelAsync = exports.default = exports.cancelAuthenticate = exports.authenticateAsync = exports.SecurityLevel = exports.AuthenticationType = void 0;
var AuthenticationType = exports.AuthenticationType = {
  FINGERPRINT: 1,
  FACIAL_RECOGNITION: 2,
  IRIS: 3
};
var SecurityLevel = exports.SecurityLevel = {
  NONE: 0,
  SECRET: 1,
  BIOMETRIC_WEAK: 2,
  BIOMETRIC_STRONG: 3
};
var hasHardwareAsync = exports.hasHardwareAsync = jest.fn().mockResolvedValue(true);
var supportedAuthenticationTypesAsync = exports.supportedAuthenticationTypesAsync = jest.fn().mockResolvedValue([AuthenticationType.FINGERPRINT]);
var isEnrolledAsync = exports.isEnrolledAsync = jest.fn().mockResolvedValue(true);
var authenticateAsync = exports.authenticateAsync = jest.fn().mockResolvedValue({
  success: true,
  error: undefined,
  warning: undefined
});
var getEnrolledLevelAsync = exports.getEnrolledLevelAsync = jest.fn().mockResolvedValue(SecurityLevel.BIOMETRIC_STRONG);
var cancelAuthenticate = exports.cancelAuthenticate = jest.fn();
var LocalAuthentication = {
  AuthenticationType: AuthenticationType,
  SecurityLevel: SecurityLevel,
  hasHardwareAsync: hasHardwareAsync,
  supportedAuthenticationTypesAsync: supportedAuthenticationTypesAsync,
  isEnrolledAsync: isEnrolledAsync,
  authenticateAsync: authenticateAsync,
  getEnrolledLevelAsync: getEnrolledLevelAsync,
  cancelAuthenticate: cancelAuthenticate
};
var _default = exports.default = LocalAuthentication;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBdXRoZW50aWNhdGlvblR5cGUiLCJleHBvcnRzIiwiRklOR0VSUFJJTlQiLCJGQUNJQUxfUkVDT0dOSVRJT04iLCJJUklTIiwiU2VjdXJpdHlMZXZlbCIsIk5PTkUiLCJTRUNSRVQiLCJCSU9NRVRSSUNfV0VBSyIsIkJJT01FVFJJQ19TVFJPTkciLCJoYXNIYXJkd2FyZUFzeW5jIiwiamVzdCIsImZuIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJzdXBwb3J0ZWRBdXRoZW50aWNhdGlvblR5cGVzQXN5bmMiLCJpc0Vucm9sbGVkQXN5bmMiLCJhdXRoZW50aWNhdGVBc3luYyIsInN1Y2Nlc3MiLCJlcnJvciIsInVuZGVmaW5lZCIsIndhcm5pbmciLCJnZXRFbnJvbGxlZExldmVsQXN5bmMiLCJjYW5jZWxBdXRoZW50aWNhdGUiLCJMb2NhbEF1dGhlbnRpY2F0aW9uIiwiX2RlZmF1bHQiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiZXhwby1sb2NhbC1hdXRoZW50aWNhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2NrIGZvciBleHBvLWxvY2FsLWF1dGhlbnRpY2F0aW9uXG5leHBvcnQgY29uc3QgQXV0aGVudGljYXRpb25UeXBlID0ge1xuICBGSU5HRVJQUklOVDogMSxcbiAgRkFDSUFMX1JFQ09HTklUSU9OOiAyLFxuICBJUklTOiAzLFxufTtcblxuZXhwb3J0IGNvbnN0IFNlY3VyaXR5TGV2ZWwgPSB7XG4gIE5PTkU6IDAsXG4gIFNFQ1JFVDogMSxcbiAgQklPTUVUUklDX1dFQUs6IDIsXG4gIEJJT01FVFJJQ19TVFJPTkc6IDMsXG59O1xuXG5leHBvcnQgY29uc3QgaGFzSGFyZHdhcmVBc3luYyA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKTtcbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRBdXRoZW50aWNhdGlvblR5cGVzQXN5bmMgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW0F1dGhlbnRpY2F0aW9uVHlwZS5GSU5HRVJQUklOVF0pO1xuZXhwb3J0IGNvbnN0IGlzRW5yb2xsZWRBc3luYyA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKTtcbmV4cG9ydCBjb25zdCBhdXRoZW50aWNhdGVBc3luYyA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gIHN1Y2Nlc3M6IHRydWUsXG4gIGVycm9yOiB1bmRlZmluZWQsXG4gIHdhcm5pbmc6IHVuZGVmaW5lZCxcbn0pO1xuZXhwb3J0IGNvbnN0IGdldEVucm9sbGVkTGV2ZWxBc3luYyA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShTZWN1cml0eUxldmVsLkJJT01FVFJJQ19TVFJPTkcpO1xuZXhwb3J0IGNvbnN0IGNhbmNlbEF1dGhlbnRpY2F0ZSA9IGplc3QuZm4oKTtcblxuLy8gRGVmYXVsdCBleHBvcnRcbmNvbnN0IExvY2FsQXV0aGVudGljYXRpb24gPSB7XG4gIEF1dGhlbnRpY2F0aW9uVHlwZSxcbiAgU2VjdXJpdHlMZXZlbCxcbiAgaGFzSGFyZHdhcmVBc3luYyxcbiAgc3VwcG9ydGVkQXV0aGVudGljYXRpb25UeXBlc0FzeW5jLFxuICBpc0Vucm9sbGVkQXN5bmMsXG4gIGF1dGhlbnRpY2F0ZUFzeW5jLFxuICBnZXRFbnJvbGxlZExldmVsQXN5bmMsXG4gIGNhbmNlbEF1dGhlbnRpY2F0ZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvY2FsQXV0aGVudGljYXRpb247XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNPLElBQU1BLGtCQUFrQixHQUFBQyxPQUFBLENBQUFELGtCQUFBLEdBQUc7RUFDaENFLFdBQVcsRUFBRSxDQUFDO0VBQ2RDLGtCQUFrQixFQUFFLENBQUM7RUFDckJDLElBQUksRUFBRTtBQUNSLENBQUM7QUFFTSxJQUFNQyxhQUFhLEdBQUFKLE9BQUEsQ0FBQUksYUFBQSxHQUFHO0VBQzNCQyxJQUFJLEVBQUUsQ0FBQztFQUNQQyxNQUFNLEVBQUUsQ0FBQztFQUNUQyxjQUFjLEVBQUUsQ0FBQztFQUNqQkMsZ0JBQWdCLEVBQUU7QUFDcEIsQ0FBQztBQUVNLElBQU1DLGdCQUFnQixHQUFBVCxPQUFBLENBQUFTLGdCQUFBLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0FBQzFELElBQU1DLGlDQUFpQyxHQUFBYixPQUFBLENBQUFhLGlDQUFBLEdBQUdILElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQ2Isa0JBQWtCLENBQUNFLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZHLElBQU1hLGVBQWUsR0FBQWQsT0FBQSxDQUFBYyxlQUFBLEdBQUdKLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0FBQ3pELElBQU1HLGlCQUFpQixHQUFBZixPQUFBLENBQUFlLGlCQUFBLEdBQUdMLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUM7RUFDM0RJLE9BQU8sRUFBRSxJQUFJO0VBQ2JDLEtBQUssRUFBRUMsU0FBUztFQUNoQkMsT0FBTyxFQUFFRDtBQUNYLENBQUMsQ0FBQztBQUNLLElBQU1FLHFCQUFxQixHQUFBcEIsT0FBQSxDQUFBb0IscUJBQUEsR0FBR1YsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQ1IsYUFBYSxDQUFDSSxnQkFBZ0IsQ0FBQztBQUN6RixJQUFNYSxrQkFBa0IsR0FBQXJCLE9BQUEsQ0FBQXFCLGtCQUFBLEdBQUdYLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7QUFHM0MsSUFBTVcsbUJBQW1CLEdBQUc7RUFDMUJ2QixrQkFBa0IsRUFBbEJBLGtCQUFrQjtFQUNsQkssYUFBYSxFQUFiQSxhQUFhO0VBQ2JLLGdCQUFnQixFQUFoQkEsZ0JBQWdCO0VBQ2hCSSxpQ0FBaUMsRUFBakNBLGlDQUFpQztFQUNqQ0MsZUFBZSxFQUFmQSxlQUFlO0VBQ2ZDLGlCQUFpQixFQUFqQkEsaUJBQWlCO0VBQ2pCSyxxQkFBcUIsRUFBckJBLHFCQUFxQjtFQUNyQkMsa0JBQWtCLEVBQWxCQTtBQUNGLENBQUM7QUFBQyxJQUFBRSxRQUFBLEdBQUF2QixPQUFBLENBQUF3QixPQUFBLEdBRWFGLG1CQUFtQiIsImlnbm9yZUxpc3QiOltdfQ==