{"version":3,"names":["_getJestObj","mock","getCurrentPositionAsync","jest","fn","mockResolvedValue","coords","latitude","longitude","altitude","accuracy","altitudeAccuracy","heading","speed","timestamp","Date","now","Accuracy","Lowest","Low","Balanced","High","Highest","BestForNavigation","request","_interopRequireDefault","require","_asyncToGenerator2","_globals","_mapActivityService","_api","_require","mockRequest","describe","beforeEach","clearAllMocks","activityParams","petId","activity","message","shareToMap","radiusMeters","it","default","mockResponse","_id","userId","location","type","coordinates","createdAt","toISOString","likes","comments","mockResolvedValueOnce","result","startActivity","expect","toEqual","toHaveBeenCalledWith","method","body","objectContaining","any","Object","mockRejectedValueOnce","Error","rejects","toThrow","mockPins","getNearbyPins","params","likePin","toBe","toBeUndefined","activities"],"sources":["mapActivityService.simple.test.ts"],"sourcesContent":["/**\n * Simplified MapActivityService Tests - Core functionality\n */\n\nimport { describe, it, expect, jest, beforeEach } from '@jest/globals';\nimport {\n  startActivity,\n  getNearbyPins,\n  likePin,\n  type CreateActivityParams,\n  type MapPin,\n} from '../mapActivityService';\n\n// Mock dependencies\njest.mock('expo-location', () => ({\n  getCurrentPositionAsync: jest.fn().mockResolvedValue({\n    coords: {\n      latitude: 40.7128,\n      longitude: -74.0060,\n      altitude: null,\n      accuracy: 5,\n      altitudeAccuracy: null,\n      heading: null,\n      speed: null,\n    },\n    timestamp: Date.now(),\n  }),\n  Accuracy: {\n    Lowest: 1,\n    Low: 2,\n    Balanced: 3,\n    High: 4,\n    Highest: 5,\n    BestForNavigation: 6,\n  },\n}));\n\njest.mock('../api', () => ({\n  request: jest.fn(),\n}));\n\nimport { request } from '../api';\n\nconst mockRequest = request as jest.MockedFunction<typeof request>;\n\ndescribe('MapActivityService - Core Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('startActivity', () => {\n    const activityParams: CreateActivityParams = {\n      petId: 'pet123',\n      activity: 'walking',\n      message: 'Going for a walk!',\n      shareToMap: true,\n      radiusMeters: 1000,\n    };\n\n    it('should start activity successfully', async () => {\n      const mockResponse: MapPin = {\n        _id: 'activity123',\n        userId: 'user123',\n        petId: 'pet123',\n        activity: 'walking',\n        message: 'Going for a walk!',\n        location: {\n          type: 'Point',\n          coordinates: [-74.0060, 40.7128], // [lng, lat]\n        },\n        createdAt: new Date().toISOString(),\n        likes: [],\n        comments: [],\n        radiusMeters: 1000,\n      };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await startActivity(activityParams);\n\n      expect(result).toEqual(mockResponse);\n      expect(mockRequest).toHaveBeenCalledWith('/map/activity/start', {\n        method: 'POST',\n        body: expect.objectContaining({\n          petId: 'pet123',\n          activity: 'walking',\n          message: 'Going for a walk!',\n          shareToMap: true,\n          radiusMeters: 1000,\n          location: expect.any(Object),\n        }),\n      });\n    });\n\n    it('should handle activity start errors', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('Location permission denied'));\n\n      await expect(startActivity(activityParams)).rejects.toThrow('Location permission denied');\n    });\n  });\n\n  describe('getNearbyPins', () => {\n    it('should get nearby pins successfully', async () => {\n      const mockPins: MapPin[] = [\n        {\n          _id: 'pin1',\n          userId: 'user1',\n          petId: 'pet1',\n          activity: 'walking',\n          location: {\n            type: 'Point',\n            coordinates: [-74.0060, 40.7128],\n          },\n          createdAt: new Date().toISOString(),\n          likes: [],\n          comments: [],\n        },\n        {\n          _id: 'pin2',\n          userId: 'user2',\n          petId: 'pet2',\n          activity: 'playing',\n          location: {\n            type: 'Point',\n            coordinates: [-74.0061, 40.7129],\n          },\n          createdAt: new Date().toISOString(),\n          likes: ['user1'],\n          comments: [],\n        },\n      ];\n\n      mockRequest.mockResolvedValueOnce(mockPins);\n\n      const result = await getNearbyPins(40.7128, -74.0060);\n\n      expect(result).toEqual(mockPins);\n      expect(mockRequest).toHaveBeenCalledWith('/map/pins', {\n        method: 'GET',\n        params: {\n          latitude: 40.7128,\n          longitude: -74.0060,\n        },\n      });\n    });\n\n    it('should handle empty results', async () => {\n      mockRequest.mockResolvedValueOnce([]);\n\n      const result = await getNearbyPins(40.7128, -74.0060);\n\n      expect(result).toEqual([]);\n    });\n\n    it('should handle API errors', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('Network error'));\n\n      await expect(getNearbyPins(40.7128, -74.0060)).rejects.toThrow('Network error');\n    });\n  });\n\n  describe('likePin', () => {\n    it('should like pin successfully', async () => {\n      const mockResponse = { likes: 5 };\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await likePin('pin123');\n\n      expect(result).toEqual(mockResponse);\n      expect(mockRequest).toHaveBeenCalledWith('/map/pins/pin123/like', {\n        method: 'POST',\n      });\n    });\n\n    it('should handle like errors', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('Already liked'));\n\n      await expect(likePin('pin123')).rejects.toThrow('Already liked');\n    });\n  });\n\n  describe('Activity Parameters', () => {\n    it('should handle activity without message', async () => {\n      const params: CreateActivityParams = {\n        petId: 'pet123',\n        activity: 'running',\n        shareToMap: false,\n      };\n\n      const mockResponse: MapPin = {\n        _id: 'activity456',\n        userId: 'user123',\n        petId: 'pet123',\n        activity: 'running',\n        location: {\n          type: 'Point',\n          coordinates: [-74.0060, 40.7128],\n        },\n        createdAt: new Date().toISOString(),\n        likes: [],\n        comments: [],\n      };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await startActivity(params);\n\n      expect(result.activity).toBe('running');\n      expect(result.message).toBeUndefined();\n    });\n\n    it('should handle different activity types', async () => {\n      const activities = ['walking', 'running', 'playing', 'eating', 'sleeping'];\n\n      for (const activity of activities) {\n        const params: CreateActivityParams = {\n          petId: 'pet123',\n          activity: activity as any,\n          shareToMap: true,\n        };\n\n        const mockResponse: MapPin = {\n          _id: `activity_${activity}`,\n          userId: 'user123',\n          petId: 'pet123',\n          activity,\n          location: {\n            type: 'Point',\n            coordinates: [-74.0060, 40.7128],\n          },\n          createdAt: new Date().toISOString(),\n          likes: [],\n          comments: [],\n        };\n\n        mockRequest.mockResolvedValueOnce(mockResponse);\n\n        const result = await startActivity(params);\n        expect(result.activity).toBe(activity);\n\n        jest.clearAllMocks();\n      }\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}