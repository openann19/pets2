f6b9b9310d2ddbc4291dfb7785b3d7a2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "_adminAPI", {
  enumerable: true,
  get: function get() {
    return _adminAPI._adminAPI;
  }
});
exports.premiumAPI = exports.matchesAPI = exports.api = exports.aiAPI = exports.adoptionAPI = exports._subscriptionAPI = exports._petAPI = void 0;
exports.presignPhoto = presignPhoto;
exports.presignVoice = presignVoice;
exports.secureRequest = exports.request = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _core = require("@pawfectmatch/core");
var _environment = require("../config/environment");
var _adminAPI = require("./adminAPI");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var buildQueryString = function buildQueryString(params) {
  if (params === undefined) {
    return "";
  }
  var entries = Object.entries(params).filter(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      value = _ref2[1];
    return value !== undefined && value !== null;
  });
  if (entries.length === 0) {
    return "";
  }
  return entries.map(function (_ref3) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
      key = _ref4[0],
      value = _ref4[1];
    return `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`;
  }).join("&");
};
var appendQueryParams = function appendQueryParams(endpoint, params) {
  var query = buildQueryString(params);
  if (query.length === 0) {
    return endpoint;
  }
  var separator = endpoint.includes("?") ? "&" : "?";
  return `${endpoint}${separator}${query}`;
};
var hasContentTypeHeader = function hasContentTypeHeader(headers) {
  if (headers === undefined) {
    return false;
  }
  return Object.keys(headers).some(function (header) {
    return header.toLowerCase() === "content-type";
  });
};
var isFormData = function isFormData(value) {
  return typeof FormData !== "undefined" && value instanceof FormData;
};
var ensureSuccess = function ensureSuccess(response, endpoint) {
  if (!response.success) {
    var _ref5, _response$error;
    throw new Error((_ref5 = (_response$error = response.error) != null ? _response$error : response.message) != null ? _ref5 : `Request to ${endpoint} failed`);
  }
  if (response.data === undefined || response.data === null) {
    throw new Error(`Request to ${endpoint} failed: No data returned`);
  }
  return response.data;
};
var resolveData = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (requestPromise, errorMessage) {
    var response = yield requestPromise;
    if (!response.success) {
      var _response$error2;
      throw new Error((_response$error2 = response.error) != null ? _response$error2 : errorMessage);
    }
    if (response.data === undefined || response.data === null) {
      throw new Error(errorMessage);
    }
    return response.data;
  });
  return function resolveData(_x, _x2) {
    return _ref6.apply(this, arguments);
  };
}();
var resolveBoolean = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (requestPromise, errorMessage) {
    var response = yield requestPromise;
    if (!response.success) {
      var _response$error3;
      throw new Error((_response$error3 = response.error) != null ? _response$error3 : errorMessage);
    }
    if (response.data === undefined) {
      return true;
    }
    return response.data;
  });
  return function resolveBoolean(_x3, _x4) {
    return _ref7.apply(this, arguments);
  };
}();
var buildRequestConfig = function buildRequestConfig(headers) {
  if (headers !== undefined) {
    return {
      headers: headers,
      timeout: _environment.API_TIMEOUT
    };
  }
  return {
    timeout: _environment.API_TIMEOUT
  };
};
var request = exports.request = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (endpoint) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _options$method = options.method,
      method = _options$method === void 0 ? "GET" : _options$method,
      body = options.body,
      headers = options.headers,
      params = options.params;
    var normalizedMethod = method.toUpperCase();
    var url = appendQueryParams(endpoint, params);
    var resolvedHeaders = function () {
      if (isFormData(body)) {
        return headers;
      }
      if (!hasContentTypeHeader(headers) && body !== undefined && body !== null) {
        return _objectSpread(_objectSpread({}, headers), {}, {
          "Content-Type": "application/json"
        });
      }
      return headers;
    }();
    switch (normalizedMethod) {
      case "GET":
        return ensureSuccess(yield _core.apiClient.get(url, buildRequestConfig(resolvedHeaders)), url);
      case "POST":
        return ensureSuccess(yield _core.apiClient.post(url, body, buildRequestConfig(resolvedHeaders)), url);
      case "PUT":
        return ensureSuccess(yield _core.apiClient.put(url, body, buildRequestConfig(resolvedHeaders)), url);
      case "PATCH":
        return ensureSuccess(yield _core.apiClient.patch(url, body, buildRequestConfig(resolvedHeaders)), url);
      case "DELETE":
        return ensureSuccess(yield _core.apiClient.delete(url, buildRequestConfig(resolvedHeaders)), url);
      default:
        throw new Error(`Unsupported HTTP method: ${String(normalizedMethod)}`);
    }
  });
  return function request(_x5) {
    return _ref8.apply(this, arguments);
  };
}();
var matchesAPI = exports.matchesAPI = {
  getLikedYou: function () {
    var _getLikedYou = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/matches/liked-you"), "Failed to fetch liked you");
    });
    function getLikedYou() {
      return _getLikedYou.apply(this, arguments);
    }
    return getLikedYou;
  }(),
  getMatches: function () {
    var _getMatches = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/matches"), "Failed to fetch matches");
    });
    function getMatches() {
      return _getMatches.apply(this, arguments);
    }
    return getMatches;
  }(),
  getMatchesWithFilter: function () {
    var _getMatchesWithFilter = (0, _asyncToGenerator2.default)(function* (queryString) {
      var response = yield resolveData(_core.apiClient.get(`/matches?${queryString}`), "Failed to fetch matches");
      return {
        data: response
      };
    });
    function getMatchesWithFilter(_x6) {
      return _getMatchesWithFilter.apply(this, arguments);
    }
    return getMatchesWithFilter;
  }(),
  getMatch: function () {
    var _getMatch = (0, _asyncToGenerator2.default)(function* (matchId) {
      return resolveData(_core.apiClient.get(`/matches/${matchId}`), "Failed to fetch match");
    });
    function getMatch(_x7) {
      return _getMatch.apply(this, arguments);
    }
    return getMatch;
  }(),
  createMatch: function () {
    var _createMatch = (0, _asyncToGenerator2.default)(function* (petId, targetPetId) {
      return resolveData(_core.apiClient.post("/matches", {
        petId: petId,
        targetPetId: targetPetId
      }), "Failed to create match");
    });
    function createMatch(_x8, _x9) {
      return _createMatch.apply(this, arguments);
    }
    return createMatch;
  }(),
  likeUser: function () {
    var _likeUser = (0, _asyncToGenerator2.default)(function* (userId) {
      var API_URL = process.env.EXPO_PUBLIC_API_URL || process.env.API_URL || "";
      var res = yield fetch(`${API_URL}/api/matches/like-user`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          userId: userId
        })
      });
      if (!res.ok) throw new Error("likeUser failed");
      return res.json();
    });
    function likeUser(_x0) {
      return _likeUser.apply(this, arguments);
    }
    return likeUser;
  }(),
  getMessages: function () {
    var _getMessages = (0, _asyncToGenerator2.default)(function* (matchId) {
      return resolveData(_core.apiClient.get(`/matches/${matchId}/messages`), "Failed to fetch messages");
    });
    function getMessages(_x1) {
      return _getMessages.apply(this, arguments);
    }
    return getMessages;
  }(),
  sendMessage: function () {
    var _sendMessage = (0, _asyncToGenerator2.default)(function* (matchId, content, replyTo) {
      return resolveData(_core.apiClient.post(`/matches/${matchId}/messages`, {
        content: content,
        replyTo: replyTo
      }), "Failed to send message");
    });
    function sendMessage(_x10, _x11, _x12) {
      return _sendMessage.apply(this, arguments);
    }
    return sendMessage;
  }(),
  deleteMessage: function () {
    var _deleteMessage = (0, _asyncToGenerator2.default)(function* (matchId, messageId) {
      return resolveData(_core.apiClient.delete(`/matches/${matchId}/messages/${messageId}`), "Failed to delete message");
    });
    function deleteMessage(_x13, _x14) {
      return _deleteMessage.apply(this, arguments);
    }
    return deleteMessage;
  }(),
  chat: {
    sendTypingIndicator: function () {
      var _sendTypingIndicator = (0, _asyncToGenerator2.default)(function* (matchId, isTyping) {
        return resolveData(_core.apiClient.post(`/matches/${matchId}/typing`, {
          isTyping: isTyping
        }), "Failed to send typing indicator");
      });
      function sendTypingIndicator(_x15, _x16) {
        return _sendTypingIndicator.apply(this, arguments);
      }
      return sendTypingIndicator;
    }(),
    markAsRead: function () {
      var _markAsRead = (0, _asyncToGenerator2.default)(function* (matchId, messageIds) {
        return resolveData(_core.apiClient.put(`/matches/${matchId}/messages/read`, {
          messageIds: messageIds
        }), "Failed to mark messages as read");
      });
      function markAsRead(_x17, _x18) {
        return _markAsRead.apply(this, arguments);
      }
      return markAsRead;
    }()
  },
  unmatch: function () {
    var _unmatch = (0, _asyncToGenerator2.default)(function* (matchId) {
      return resolveBoolean(_core.apiClient.delete(`/matches/${matchId}`), "Failed to unmatch");
    });
    function unmatch(_x19) {
      return _unmatch.apply(this, arguments);
    }
    return unmatch;
  }(),
  block: function () {
    var _block = (0, _asyncToGenerator2.default)(function* (matchId) {
      return resolveBoolean(_core.apiClient.post(`/matches/${matchId}/block`, {}), "Failed to block user");
    });
    function block(_x20) {
      return _block.apply(this, arguments);
    }
    return block;
  }(),
  report: function () {
    var _report = (0, _asyncToGenerator2.default)(function* (matchId, reason) {
      return resolveBoolean(_core.apiClient.post(`/matches/${matchId}/report`, {
        reason: reason
      }), "Failed to report user");
    });
    function report(_x21, _x22) {
      return _report.apply(this, arguments);
    }
    return report;
  }(),
  getPets: function () {
    var _getPets = (0, _asyncToGenerator2.default)(function* (filters) {
      var queryString = filters !== undefined ? `?${new URLSearchParams(filters).toString()}` : "";
      return resolveData(_core.apiClient.get(`/pets${queryString}`), "Failed to fetch pets");
    });
    function getPets(_x23) {
      return _getPets.apply(this, arguments);
    }
    return getPets;
  }(),
  getUserProfile: function () {
    var _getUserProfile = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/users/me"), "Failed to fetch user profile");
    });
    function getUserProfile() {
      return _getUserProfile.apply(this, arguments);
    }
    return getUserProfile;
  }(),
  updateUserProfile: function () {
    var _updateUserProfile = (0, _asyncToGenerator2.default)(function* (profileData) {
      return resolveData(_core.apiClient.put("/users/me", profileData), "Failed to update user profile");
    });
    function updateUserProfile(_x24) {
      return _updateUserProfile.apply(this, arguments);
    }
    return updateUserProfile;
  }(),
  uploadPetPhotos: function () {
    var _uploadPetPhotos = (0, _asyncToGenerator2.default)(function* (petId, photos) {
      return resolveData(_core.apiClient.post(`/pets/${petId}/photos`, photos, {
        headers: {
          "Content-Type": "multipart/form-data"
        }
      }), "Failed to upload photos");
    });
    function uploadPetPhotos(_x25, _x26) {
      return _uploadPetPhotos.apply(this, arguments);
    }
    return uploadPetPhotos;
  }(),
  getUserPets: function () {
    var _getUserPets = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/users/me/pets"), "Failed to fetch user pets");
    });
    function getUserPets() {
      return _getUserPets.apply(this, arguments);
    }
    return getUserPets;
  }(),
  getUserStats: function () {
    var _getUserStats = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/users/me/stats"), "Failed to fetch user statistics");
    });
    function getUserStats() {
      return _getUserStats.apply(this, arguments);
    }
    return getUserStats;
  }(),
  getPet: function () {
    var _getPet = (0, _asyncToGenerator2.default)(function* (petId) {
      return resolveData(_core.apiClient.get(`/pets/${petId}`), "Failed to fetch pet");
    });
    function getPet(_x27) {
      return _getPet.apply(this, arguments);
    }
    return getPet;
  }(),
  createPet: function () {
    var _createPet = (0, _asyncToGenerator2.default)(function* (petData) {
      return resolveData(_core.apiClient.post("/pets", petData), "Failed to create pet");
    });
    function createPet(_x28) {
      return _createPet.apply(this, arguments);
    }
    return createPet;
  }(),
  updatePet: function () {
    var _updatePet = (0, _asyncToGenerator2.default)(function* (petId, petData) {
      return resolveData(_core.apiClient.put(`/pets/${petId}`, petData), "Failed to update pet");
    });
    function updatePet(_x29, _x30) {
      return _updatePet.apply(this, arguments);
    }
    return updatePet;
  }(),
  deletePet: function () {
    var _deletePet = (0, _asyncToGenerator2.default)(function* (petId) {
      return resolveBoolean(_core.apiClient.delete(`/pets/${petId}`), "Failed to delete pet");
    });
    function deletePet(_x31) {
      return _deletePet.apply(this, arguments);
    }
    return deletePet;
  }(),
  getAdoptionApplications: function () {
    var _getAdoptionApplications = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/adoption/applications"), "Failed to fetch adoption applications");
    });
    function getAdoptionApplications() {
      return _getAdoptionApplications.apply(this, arguments);
    }
    return getAdoptionApplications;
  }(),
  submitAdoptionApplication: function () {
    var _submitAdoptionApplication = (0, _asyncToGenerator2.default)(function* (applicationData) {
      return resolveData(_core.apiClient.post("/adoption/applications", applicationData), "Failed to submit adoption application");
    });
    function submitAdoptionApplication(_x32) {
      return _submitAdoptionApplication.apply(this, arguments);
    }
    return submitAdoptionApplication;
  }(),
  getPremiumFeatures: function () {
    var _getPremiumFeatures = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/premium/features"), "Failed to fetch premium features");
    });
    function getPremiumFeatures() {
      return _getPremiumFeatures.apply(this, arguments);
    }
    return getPremiumFeatures;
  }(),
  subscribeToPremium: function () {
    var _subscribeToPremium = (0, _asyncToGenerator2.default)(function* (subscriptionData) {
      return resolveData(_core.apiClient.post("/premium/subscribe", subscriptionData), "Failed to subscribe to premium");
    });
    function subscribeToPremium(_x33) {
      return _subscribeToPremium.apply(this, arguments);
    }
    return subscribeToPremium;
  }(),
  cancelPremiumSubscription: function () {
    var _cancelPremiumSubscription = (0, _asyncToGenerator2.default)(function* () {
      return resolveBoolean(_core.apiClient.post("/premium/cancel"), "Failed to cancel premium subscription");
    });
    function cancelPremiumSubscription() {
      return _cancelPremiumSubscription.apply(this, arguments);
    }
    return cancelPremiumSubscription;
  }(),
  getUserSettings: function () {
    var _getUserSettings = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/users/settings"), "Failed to fetch user settings");
    });
    function getUserSettings() {
      return _getUserSettings.apply(this, arguments);
    }
    return getUserSettings;
  }(),
  updateUserSettings: function () {
    var _updateUserSettings = (0, _asyncToGenerator2.default)(function* (settings) {
      return resolveData(_core.apiClient.put("/users/settings", settings), "Failed to update user settings");
    });
    function updateUserSettings(_x34) {
      return _updateUserSettings.apply(this, arguments);
    }
    return updateUserSettings;
  }(),
  updateUserPreferences: function () {
    var _updateUserPreferences = (0, _asyncToGenerator2.default)(function* (preferences) {
      return resolveData(_core.apiClient.put("/users/preferences", preferences), "Failed to update user preferences");
    });
    function updateUserPreferences(_x35) {
      return _updateUserPreferences.apply(this, arguments);
    }
    return updateUserPreferences;
  }(),
  getNotifications: function () {
    var _getNotifications = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/notifications"), "Failed to fetch notifications");
    });
    function getNotifications() {
      return _getNotifications.apply(this, arguments);
    }
    return getNotifications;
  }(),
  markNotificationAsRead: function () {
    var _markNotificationAsRead = (0, _asyncToGenerator2.default)(function* (notificationId) {
      return resolveBoolean(_core.apiClient.put(`/notifications/${notificationId}/read`), "Failed to mark notification as read");
    });
    function markNotificationAsRead(_x36) {
      return _markNotificationAsRead.apply(this, arguments);
    }
    return markNotificationAsRead;
  }(),
  deleteNotification: function () {
    var _deleteNotification = (0, _asyncToGenerator2.default)(function* (notificationId) {
      return resolveBoolean(_core.apiClient.delete(`/notifications/${notificationId}`), "Failed to delete notification");
    });
    function deleteNotification(_x37) {
      return _deleteNotification.apply(this, arguments);
    }
    return deleteNotification;
  }(),
  getAppStatistics: function () {
    var _getAppStatistics = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/stats"), "Failed to fetch app statistics");
    });
    function getAppStatistics() {
      return _getAppStatistics.apply(this, arguments);
    }
    return getAppStatistics;
  }(),
  reportContent: function () {
    var _reportContent = (0, _asyncToGenerator2.default)(function* (reportData) {
      return resolveBoolean(_core.apiClient.post("/reports", reportData), "Failed to submit report");
    });
    function reportContent(_x38) {
      return _reportContent.apply(this, arguments);
    }
    return reportContent;
  }(),
  blockUser: function () {
    var _blockUser = (0, _asyncToGenerator2.default)(function* (userId) {
      return resolveBoolean(_core.apiClient.post("/users/block", {
        userId: userId
      }), "Failed to block user");
    });
    function blockUser(_x39) {
      return _blockUser.apply(this, arguments);
    }
    return blockUser;
  }(),
  unblockUser: function () {
    var _unblockUser = (0, _asyncToGenerator2.default)(function* (userId) {
      return resolveBoolean(_core.apiClient.post("/users/unblock", {
        userId: userId
      }), "Failed to unblock user");
    });
    function unblockUser(_x40) {
      return _unblockUser.apply(this, arguments);
    }
    return unblockUser;
  }(),
  getBlockedUsers: function () {
    var _getBlockedUsers = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/users/blocked"), "Failed to fetch blocked users");
    });
    function getBlockedUsers() {
      return _getBlockedUsers.apply(this, arguments);
    }
    return getBlockedUsers;
  }(),
  searchPets: function () {
    var _searchPets = (0, _asyncToGenerator2.default)(function* (query, filters) {
      var params = new URLSearchParams(_objectSpread({
        q: query
      }, filters !== undefined ? filters : {}));
      return resolveData(_core.apiClient.get(`/search/pets?${params.toString()}`), "Failed to search pets");
    });
    function searchPets(_x41, _x42) {
      return _searchPets.apply(this, arguments);
    }
    return searchPets;
  }(),
  getNearbyPets: function () {
    var _getNearbyPets = (0, _asyncToGenerator2.default)(function* (latitude, longitude, radius) {
      var params = new URLSearchParams({
        lat: latitude.toString(),
        lng: longitude.toString()
      });
      if (radius !== undefined) {
        params.set("radius", radius.toString());
      }
      return resolveData(_core.apiClient.get(`/pets/nearby?${params.toString()}`), "Failed to fetch nearby pets");
    });
    function getNearbyPets(_x43, _x44, _x45) {
      return _getNearbyPets.apply(this, arguments);
    }
    return getNearbyPets;
  }(),
  getPetCompatibility: function () {
    var _getPetCompatibility = (0, _asyncToGenerator2.default)(function* (pet1Id, pet2Id) {
      return resolveData(_core.apiClient.get(`/compatibility/${pet1Id}/${pet2Id}`), "Failed to fetch pet compatibility");
    });
    function getPetCompatibility(_x46, _x47) {
      return _getPetCompatibility.apply(this, arguments);
    }
    return getPetCompatibility;
  }(),
  getUserActivity: function () {
    var _getUserActivity = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/users/activity"), "Failed to fetch user activity");
    });
    function getUserActivity() {
      return _getUserActivity.apply(this, arguments);
    }
    return getUserActivity;
  }(),
  getAppVersion: function () {
    var _getAppVersion = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/version"), "Failed to fetch app version");
    });
    function getAppVersion() {
      return _getAppVersion.apply(this, arguments);
    }
    return getAppVersion;
  }(),
  requestAccountDeletion: function () {
    var _requestAccountDeletion = (0, _asyncToGenerator2.default)(function* (data) {
      return resolveData(_core.apiClient.post("/account/delete", {
        reason: data.reason
      }), "Failed to request account deletion");
    });
    function requestAccountDeletion(_x48) {
      return _requestAccountDeletion.apply(this, arguments);
    }
    return requestAccountDeletion;
  }(),
  cancelAccountDeletion: function () {
    var _cancelAccountDeletion = (0, _asyncToGenerator2.default)(function* (data) {
      return resolveData(_core.apiClient.post("/account/cancel-deletion", data != null ? data : {}), "Failed to cancel account deletion");
    });
    function cancelAccountDeletion(_x49) {
      return _cancelAccountDeletion.apply(this, arguments);
    }
    return cancelAccountDeletion;
  }(),
  getAccountDeletionStatus: function () {
    var _getAccountDeletionStatus = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/account/status"), "Failed to get account status");
    });
    function getAccountDeletionStatus() {
      return _getAccountDeletionStatus.apply(this, arguments);
    }
    return getAccountDeletionStatus;
  }(),
  exportUserData: function () {
    var _exportUserData = (0, _asyncToGenerator2.default)(function* (options) {
      return resolveData(_core.apiClient.post("/account/export-data", options), "Failed to export user data");
    });
    function exportUserData(_x50) {
      return _exportUserData.apply(this, arguments);
    }
    return exportUserData;
  }()
};
var premiumAPI = exports.premiumAPI = {
  getCurrentSubscription: function () {
    var _getCurrentSubscription = (0, _asyncToGenerator2.default)(function* () {
      try {
        return yield resolveData(_core.apiClient.get("/premium/subscription"), "Failed to get current subscription");
      } catch (_unused) {
        return null;
      }
    });
    function getCurrentSubscription() {
      return _getCurrentSubscription.apply(this, arguments);
    }
    return getCurrentSubscription;
  }(),
  cancelSubscription: function () {
    var _cancelSubscription = (0, _asyncToGenerator2.default)(function* () {
      return resolveBoolean(_core.apiClient.post("/premium/subscription/cancel"), "Failed to cancel subscription");
    });
    function cancelSubscription() {
      return _cancelSubscription.apply(this, arguments);
    }
    return cancelSubscription;
  }()
};
var adoptionAPI = exports.adoptionAPI = {
  getListings: function () {
    var _getListings = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/adoption/listings"), "Failed to get adoption listings");
    });
    function getListings() {
      return _getListings.apply(this, arguments);
    }
    return getListings;
  }(),
  getApplications: function () {
    var _getApplications = (0, _asyncToGenerator2.default)(function* () {
      return resolveData(_core.apiClient.get("/adoption/applications"), "Failed to get adoption applications");
    });
    function getApplications() {
      return _getApplications.apply(this, arguments);
    }
    return getApplications;
  }()
};
var _subscriptionAPI = exports._subscriptionAPI = {
  createCheckoutSession: function () {
    var _createCheckoutSession = (0, _asyncToGenerator2.default)(function* (data) {
      return resolveData(_core.apiClient.post("/subscription/checkout", data), "Failed to create checkout session");
    });
    function createCheckoutSession(_x51) {
      return _createCheckoutSession.apply(this, arguments);
    }
    return createCheckoutSession;
  }()
};
var aiAPI = exports.aiAPI = {
  generateBio: function () {
    var _generateBio = (0, _asyncToGenerator2.default)(function* (data) {
      return request("/ai/generate-bio", {
        method: "POST",
        body: data
      });
    });
    function generateBio(_x52) {
      return _generateBio.apply(this, arguments);
    }
    return generateBio;
  }(),
  analyzePhotos: function () {
    var _analyzePhotos = (0, _asyncToGenerator2.default)(function* (photos) {
      return request("/ai/analyze-photos", {
        method: "POST",
        body: {
          photos: photos
        }
      });
    });
    function analyzePhotos(_x53) {
      return _analyzePhotos.apply(this, arguments);
    }
    return analyzePhotos;
  }(),
  analyzeCompatibility: function () {
    var _analyzeCompatibility = (0, _asyncToGenerator2.default)(function* (data) {
      return request("/ai/enhanced-compatibility", {
        method: "POST",
        body: data
      });
    });
    function analyzeCompatibility(_x54) {
      return _analyzeCompatibility.apply(this, arguments);
    }
    return analyzeCompatibility;
  }(),
  getCompatibility: function () {
    var _getCompatibility = (0, _asyncToGenerator2.default)(function* (data) {
      return request("/ai/compatibility", {
        method: "POST",
        body: data
      });
    });
    function getCompatibility(_x55) {
      return _getCompatibility.apply(this, arguments);
    }
    return getCompatibility;
  }()
};
function presignVoice(_x56) {
  return _presignVoice.apply(this, arguments);
}
function _presignVoice() {
  _presignVoice = (0, _asyncToGenerator2.default)(function* (contentType) {
    return resolveData(_core.apiClient.post("/uploads/voice/presign", {
      contentType: contentType
    }), "Failed to get presign URL");
  });
  return _presignVoice.apply(this, arguments);
}
function presignPhoto(_x57) {
  return _presignPhoto.apply(this, arguments);
}
function _presignPhoto() {
  _presignPhoto = (0, _asyncToGenerator2.default)(function* (contentType) {
    return resolveData(_core.apiClient.post("/uploads/photos/presign", {
      contentType: contentType
    }), "Failed to get presign URL");
  });
  return _presignPhoto.apply(this, arguments);
}
var api = exports._petAPI = exports.api = _objectSpread(_objectSpread({}, matchesAPI), {}, {
  chat: matchesAPI.chat,
  ai: aiAPI,
  request: request,
  presignVoice: presignVoice,
  presignPhoto: presignPhoto,
  get: function get(url, config) {
    return request(url, {
      method: "GET",
      headers: config
    });
  },
  post: function post(url, data, config) {
    return request(url, {
      method: "POST",
      body: data,
      headers: config
    });
  }
});
var requestTimestamps = [];
var RATE_LIMIT_WINDOW_MS = 60000;
var RATE_LIMIT_MAX_REQUESTS = 100;
var checkRateLimit = function checkRateLimit() {
  var now = Date.now();
  while (requestTimestamps.length > 0 && ((_requestTimestamps$ = requestTimestamps[0]) != null ? _requestTimestamps$ : 0) < now - RATE_LIMIT_WINDOW_MS) {
    var _requestTimestamps$;
    requestTimestamps.shift();
  }
  if (requestTimestamps.length >= RATE_LIMIT_MAX_REQUESTS) {
    return false;
  }
  requestTimestamps.push(now);
  return true;
};
var validateEndpoint = function validateEndpoint(endpoint) {
  try {
    return endpoint.startsWith("/") && !endpoint.includes("..") && !endpoint.includes("<") && !endpoint.includes(">") && endpoint.length < 200;
  } catch (_unused2) {
    return false;
  }
};
var sanitizeRequestBody = function sanitizeRequestBody(body) {
  if (typeof body === "string") {
    return body.replace(/[<>"'`]/g, "").substring(0, 10000);
  }
  if (typeof body === "object" && body !== null) {
    var serialized = JSON.stringify(body);
    if (serialized.length > 10000) {
      throw new Error("Request body too large");
    }
    return body;
  }
  return body;
};
var secureRequest = exports.secureRequest = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (endpoint) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!validateEndpoint(endpoint)) {
      throw new Error("Invalid API endpoint");
    }
    if (!checkRateLimit()) {
      throw new Error("API rate limit exceeded");
    }
    var sanitizedOptions = _objectSpread({}, options);
    if (sanitizedOptions.body !== undefined) {
      sanitizedOptions.body = sanitizeRequestBody(sanitizedOptions.body);
    }
    var secureHeaders = _objectSpread(_objectSpread({}, sanitizedOptions.headers), {}, {
      "X-Requested-With": "XMLHttpRequest"
    });
    sanitizedOptions.headers = secureHeaders;
    return request(endpoint, sanitizedOptions);
  });
  return function secureRequest(_x58) {
    return _ref9.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,