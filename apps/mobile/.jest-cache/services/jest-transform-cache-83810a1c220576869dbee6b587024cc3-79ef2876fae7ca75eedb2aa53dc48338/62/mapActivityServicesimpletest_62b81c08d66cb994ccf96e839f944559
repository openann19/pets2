252f6810d3e2f91dd2c83e5776bfcee5
"use strict";

_getJestObj().mock('expo-location', function () {
  return {
    getCurrentPositionAsync: _globals.jest.fn().mockResolvedValue({
      coords: {
        latitude: 40.7128,
        longitude: -74.0060,
        altitude: null,
        accuracy: 5,
        altitudeAccuracy: null,
        heading: null,
        speed: null
      },
      timestamp: Date.now()
    }),
    Accuracy: {
      Lowest: 1,
      Low: 2,
      Balanced: 3,
      High: 4,
      Highest: 5,
      BestForNavigation: 6
    }
  };
});
_getJestObj().mock("../api", function () {
  return {
    request: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _mapActivityService = require("../mapActivityService");
var _api = require("../api");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRequest = _api.request;
(0, _globals.describe)('MapActivityService - Core Tests', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('startActivity', function () {
    var activityParams = {
      petId: 'pet123',
      activity: 'walking',
      message: 'Going for a walk!',
      shareToMap: true,
      radiusMeters: 1000
    };
    (0, _globals.it)('should start activity successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        _id: 'activity123',
        userId: 'user123',
        petId: 'pet123',
        activity: 'walking',
        message: 'Going for a walk!',
        location: {
          type: 'Point',
          coordinates: [-74.0060, 40.7128]
        },
        createdAt: new Date().toISOString(),
        likes: [],
        comments: [],
        radiusMeters: 1000
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _mapActivityService.startActivity)(activityParams);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/activity/start', {
        method: 'POST',
        body: _globals.expect.objectContaining({
          petId: 'pet123',
          activity: 'walking',
          message: 'Going for a walk!',
          shareToMap: true,
          radiusMeters: 1000,
          location: _globals.expect.any(Object)
        })
      });
    }));
    (0, _globals.it)('should handle activity start errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Location permission denied'));
      yield (0, _globals.expect)((0, _mapActivityService.startActivity)(activityParams)).rejects.toThrow('Location permission denied');
    }));
  });
  (0, _globals.describe)('getNearbyPins', function () {
    (0, _globals.it)('should get nearby pins successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockPins = [{
        _id: 'pin1',
        userId: 'user1',
        petId: 'pet1',
        activity: 'walking',
        location: {
          type: 'Point',
          coordinates: [-74.0060, 40.7128]
        },
        createdAt: new Date().toISOString(),
        likes: [],
        comments: []
      }, {
        _id: 'pin2',
        userId: 'user2',
        petId: 'pet2',
        activity: 'playing',
        location: {
          type: 'Point',
          coordinates: [-74.0061, 40.7129]
        },
        createdAt: new Date().toISOString(),
        likes: ['user1'],
        comments: []
      }];
      mockRequest.mockResolvedValueOnce(mockPins);
      var result = yield (0, _mapActivityService.getNearbyPins)(40.7128, -74.0060);
      (0, _globals.expect)(result).toEqual(mockPins);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/pins', {
        method: 'GET',
        params: {
          latitude: 40.7128,
          longitude: -74.0060
        }
      });
    }));
    (0, _globals.it)('should handle empty results', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce([]);
      var result = yield (0, _mapActivityService.getNearbyPins)(40.7128, -74.0060);
      (0, _globals.expect)(result).toEqual([]);
    }));
    (0, _globals.it)('should handle API errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Network error'));
      yield (0, _globals.expect)((0, _mapActivityService.getNearbyPins)(40.7128, -74.0060)).rejects.toThrow('Network error');
    }));
  });
  (0, _globals.describe)('likePin', function () {
    (0, _globals.it)('should like pin successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        likes: 5
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _mapActivityService.likePin)('pin123');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/map/pins/pin123/like', {
        method: 'POST'
      });
    }));
    (0, _globals.it)('should handle like errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Already liked'));
      yield (0, _globals.expect)((0, _mapActivityService.likePin)('pin123')).rejects.toThrow('Already liked');
    }));
  });
  (0, _globals.describe)('Activity Parameters', function () {
    (0, _globals.it)('should handle activity without message', (0, _asyncToGenerator2.default)(function* () {
      var params = {
        petId: 'pet123',
        activity: 'running',
        shareToMap: false
      };
      var mockResponse = {
        _id: 'activity456',
        userId: 'user123',
        petId: 'pet123',
        activity: 'running',
        location: {
          type: 'Point',
          coordinates: [-74.0060, 40.7128]
        },
        createdAt: new Date().toISOString(),
        likes: [],
        comments: []
      };
      mockRequest.mockResolvedValueOnce(mockResponse);
      var result = yield (0, _mapActivityService.startActivity)(params);
      (0, _globals.expect)(result.activity).toBe('running');
      (0, _globals.expect)(result.message).toBeUndefined();
    }));
    (0, _globals.it)('should handle different activity types', (0, _asyncToGenerator2.default)(function* () {
      var activities = ['walking', 'running', 'playing', 'eating', 'sleeping'];
      for (var activity of activities) {
        var params = {
          petId: 'pet123',
          activity: activity,
          shareToMap: true
        };
        var mockResponse = {
          _id: `activity_${activity}`,
          userId: 'user123',
          petId: 'pet123',
          activity: activity,
          location: {
            type: 'Point',
            coordinates: [-74.0060, 40.7128]
          },
          createdAt: new Date().toISOString(),
          likes: [],
          comments: []
        };
        mockRequest.mockResolvedValueOnce(mockResponse);
        var result = yield (0, _mapActivityService.startActivity)(params);
        (0, _globals.expect)(result.activity).toBe(activity);
        _globals.jest.clearAllMocks();
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,