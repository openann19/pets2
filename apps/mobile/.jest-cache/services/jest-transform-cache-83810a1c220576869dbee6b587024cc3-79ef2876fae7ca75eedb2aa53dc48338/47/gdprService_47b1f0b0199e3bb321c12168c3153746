4daa5fb9fd2aaebe53c39386d570dab0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAccountStatus = exports.exportUserData = exports.downloadExport = exports.deleteAccount = exports.default = exports.cancelDeletion = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _api = require("./api");
var _core = require("@pawfectmatch/core");
var deleteAccount = exports.deleteAccount = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (data) {
    try {
      var response = yield (0, _api.request)('/api/account/delete', {
        method: 'POST',
        body: {
          password: data.password,
          reason: data.reason,
          feedback: data.feedback
        }
      });
      return response;
    } catch (error) {
      var errorMessage = error instanceof Error ? error.message : 'SERVER_ERROR';
      _core.logger.error('Delete account error:', error instanceof Error ? error : new Error(String(error)));
      return {
        success: false,
        message: 'Failed to delete account',
        error: errorMessage
      };
    }
  });
  return function deleteAccount(_x) {
    return _ref.apply(this, arguments);
  };
}();
var cancelDeletion = exports.cancelDeletion = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* () {
    try {
      var response = yield (0, _api.request)('/api/account/cancel-deletion', {
        method: 'POST'
      });
      return response;
    } catch (error) {
      var errorMessage = error instanceof Error ? error.message : 'Failed to cancel deletion';
      _core.logger.error('Cancel deletion error:', error instanceof Error ? error : new Error(String(error)));
      return {
        success: false,
        message: errorMessage
      };
    }
  });
  return function cancelDeletion() {
    return _ref2.apply(this, arguments);
  };
}();
var getAccountStatus = exports.getAccountStatus = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* () {
    try {
      var response = yield (0, _api.request)('/api/account/status', {
        method: 'GET'
      });
      return response;
    } catch (error) {
      _core.logger.error('Get account status error:', error instanceof Error ? error : new Error(String(error)));
      return {
        success: false,
        status: 'not-found'
      };
    }
  });
  return function getAccountStatus() {
    return _ref3.apply(this, arguments);
  };
}();
var exportUserData = exports.exportUserData = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* () {
    var dataRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    try {
      var response = yield (0, _api.request)('/api/account/export-data', {
        method: 'POST',
        body: {
          format: dataRequest.format || 'json',
          includeMessages: dataRequest.includeMessages !== false,
          includeMatches: dataRequest.includeMatches !== false,
          includeProfileData: dataRequest.includeProfileData !== false,
          includePreferences: dataRequest.includePreferences !== false
        }
      });
      return response;
    } catch (error) {
      _core.logger.error('Export user data error:', error instanceof Error ? error : new Error(String(error)));
      return {
        success: false,
        message: 'Failed to export data',
        error: 'SERVER_ERROR'
      };
    }
  });
  return function exportUserData() {
    return _ref4.apply(this, arguments);
  };
}();
var downloadExport = exports.downloadExport = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (exportId) {
    try {
      var response = yield (0, _api.request)(`/api/account/export/${exportId}`, {
        method: 'GET'
      });
      return response;
    } catch (error) {
      _core.logger.error('Download export error:', error instanceof Error ? error : new Error(String(error)));
      throw error instanceof Error ? error : new Error(String(error));
    }
  });
  return function downloadExport(_x2) {
    return _ref5.apply(this, arguments);
  };
}();
var _default = exports.default = {
  deleteAccount: deleteAccount,
  cancelDeletion: cancelDeletion,
  getAccountStatus: getAccountStatus,
  exportUserData: exportUserData,
  downloadExport: downloadExport
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,