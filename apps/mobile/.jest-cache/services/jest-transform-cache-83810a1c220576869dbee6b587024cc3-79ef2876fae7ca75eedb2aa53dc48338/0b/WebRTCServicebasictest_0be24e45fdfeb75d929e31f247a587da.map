{"version":3,"names":["_getJestObj","mock","mediaDevices","getUserMedia","jest","fn","mockResolvedValue","getAudioTracks","mockReturnValue","enabled","_switchCamera","getVideoTracks","getTracks","addTrack","removeTrack","enumerateDevices","RTCPeerConnection","mockImplementation","createOffer","type","sdp","createAnswer","setLocalDescription","undefined","setRemoteDescription","addIceCandidate","addStream","removeStream","close","onicecandidate","onaddstream","onremovestream","oniceconnectionstatechange","RTCIceCandidate","RTCSessionDescription","request","_interopRequireDefault","require","_WebRTCService","_reactNativeIncallManager","_api","_require","mockInCallManager","InCallManager","mockRequest","describe","beforeEach","clearAllMocks","setKeepScreenOn","setForceSpeakerphoneOn","start","stop","it","expect","WebRTCService","toBeDefined","toBe","startCall","endCall","getCallState","isCallActive","state","toHaveProperty","isActive","localStream","callState","isMuted","isVideoEnabled","callType","remoteUserId","toggleMute","toggleVideo","switchCamera","handleOffer","handleAnswer","handleIceCandidate"],"sources":["WebRTCService.basic.test.ts"],"sourcesContent":["/**\n * Simplified WebRTC Service Tests - Basic functionality\n */\n\nimport WebRTCService from '../WebRTCService';\n\n// Mock dependencies\njest.mock('react-native-incall-manager');\njest.mock('react-native-webrtc', () => ({\n  mediaDevices: {\n    getUserMedia: jest.fn().mockResolvedValue({\n      getAudioTracks: jest.fn().mockReturnValue([\n        { enabled: true, _switchCamera: jest.fn() }\n      ]),\n      getVideoTracks: jest.fn().mockReturnValue([\n        { enabled: true, _switchCamera: jest.fn() }\n      ]),\n      getTracks: jest.fn().mockReturnValue([]),\n      addTrack: jest.fn(),\n      removeTrack: jest.fn(),\n    }),\n    enumerateDevices: jest.fn().mockResolvedValue([]),\n  },\n  RTCPeerConnection: jest.fn().mockImplementation(() => ({\n    createOffer: jest.fn().mockResolvedValue({ type: 'offer', sdp: 'fake-sdp' }),\n    createAnswer: jest.fn().mockResolvedValue({ type: 'answer', sdp: 'fake-sdp' }),\n    setLocalDescription: jest.fn().mockResolvedValue(undefined),\n    setRemoteDescription: jest.fn().mockResolvedValue(undefined),\n    addIceCandidate: jest.fn().mockResolvedValue(undefined),\n    addStream: jest.fn(),\n    removeStream: jest.fn(),\n    close: jest.fn(),\n    onicecandidate: null,\n    onaddstream: null,\n    onremovestream: null,\n    oniceconnectionstatechange: null,\n  })),\n  RTCIceCandidate: jest.fn(),\n  RTCSessionDescription: jest.fn(),\n}));\n\njest.mock('../api', () => ({\n  request: jest.fn(),\n}));\n\nimport InCallManager from 'react-native-incall-manager';\nimport { request } from '../api';\n\nconst mockInCallManager = InCallManager as jest.Mocked<typeof InCallManager>;\nconst mockRequest = request as jest.MockedFunction<typeof request>;\n\ndescribe('WebRTCService - Basic Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock InCallManager methods\n    mockInCallManager.setKeepScreenOn = jest.fn();\n    mockInCallManager.setForceSpeakerphoneOn = jest.fn();\n    mockInCallManager.start = jest.fn();\n    mockInCallManager.stop = jest.fn();\n  });\n\n  describe('Service Availability', () => {\n    it('should be a singleton instance', () => {\n      expect(WebRTCService).toBeDefined();\n      expect(typeof WebRTCService).toBe('object');\n    });\n\n    it('should have core methods', () => {\n      expect(typeof WebRTCService.startCall).toBe('function');\n      expect(typeof WebRTCService.endCall).toBe('function');\n      expect(typeof WebRTCService.getCallState).toBe('function');\n      expect(typeof WebRTCService.isCallActive).toBe('function');\n    });\n  });\n\n  describe('Call State Management', () => {\n    it('should get call state', () => {\n      const state = WebRTCService.getCallState();\n\n      expect(state).toBeDefined();\n      expect(typeof state).toBe('object');\n      expect(state).toHaveProperty('isActive');\n      expect(state).toHaveProperty('isMuted');\n      expect(state).toHaveProperty('isVideoEnabled');\n    });\n\n    it('should check if call is active', () => {\n      const isActive = WebRTCService.isCallActive();\n\n      expect(typeof isActive).toBe('boolean');\n    });\n\n    it('should indicate call is not active by default', () => {\n      const isActive = WebRTCService.isCallActive();\n      const state = WebRTCService.getCallState();\n\n      expect(isActive).toBe(false);\n      expect(state.isActive).toBe(false);\n    });\n  });\n\n  describe('Call Controls (with mock stream)', () => {\n    beforeEach(() => {\n      // Mock the localStream on the service\n      (WebRTCService as any).localStream = {\n        getAudioTracks: jest.fn().mockReturnValue([\n          { enabled: true, _switchCamera: jest.fn() }\n        ]),\n        getVideoTracks: jest.fn().mockReturnValue([\n          { enabled: true, _switchCamera: jest.fn() }\n        ]),\n        getTracks: jest.fn().mockReturnValue([]),\n      };\n\n      (WebRTCService as any).callState = {\n        isActive: true,\n        isMuted: false,\n        isVideoEnabled: true,\n        callType: 'voice',\n        remoteUserId: 'user123',\n      };\n    });\n\n    it('should toggle mute when stream exists', () => {\n      WebRTCService.toggleMute();\n\n      const state = WebRTCService.getCallState();\n      expect(state.isMuted).toBe(true);\n    });\n\n    it('should toggle video when stream exists', () => {\n      WebRTCService.toggleVideo();\n\n      const state = WebRTCService.getCallState();\n      expect(state.isVideoEnabled).toBe(false);\n    });\n\n    it('should switch camera when stream exists', () => {\n      WebRTCService.switchCamera();\n\n      // Camera switching is handled internally, just verify no errors\n      expect(WebRTCService.getCallState().isActive).toBe(true);\n    });\n  });\n\n  describe('WebRTC Signaling', () => {\n    it('should have WebRTC signaling methods available', () => {\n      // Just verify the methods exist and are functions\n      expect(typeof WebRTCService.handleOffer).toBe('function');\n      expect(typeof WebRTCService.handleAnswer).toBe('function');\n      expect(typeof WebRTCService.handleIceCandidate).toBe('function');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}