2d548c31496376381315dca682233186
"use strict";

_getJestObj().mock('react-native-incall-manager');
_getJestObj().mock('react-native-webrtc', function () {
  return {
    mediaDevices: {
      getUserMedia: jest.fn().mockResolvedValue({
        getAudioTracks: jest.fn().mockReturnValue([{
          enabled: true,
          _switchCamera: jest.fn()
        }]),
        getVideoTracks: jest.fn().mockReturnValue([{
          enabled: true,
          _switchCamera: jest.fn()
        }]),
        getTracks: jest.fn().mockReturnValue([]),
        addTrack: jest.fn(),
        removeTrack: jest.fn()
      }),
      enumerateDevices: jest.fn().mockResolvedValue([])
    },
    RTCPeerConnection: jest.fn().mockImplementation(function () {
      return {
        createOffer: jest.fn().mockResolvedValue({
          type: 'offer',
          sdp: 'fake-sdp'
        }),
        createAnswer: jest.fn().mockResolvedValue({
          type: 'answer',
          sdp: 'fake-sdp'
        }),
        setLocalDescription: jest.fn().mockResolvedValue(undefined),
        setRemoteDescription: jest.fn().mockResolvedValue(undefined),
        addIceCandidate: jest.fn().mockResolvedValue(undefined),
        addStream: jest.fn(),
        removeStream: jest.fn(),
        close: jest.fn(),
        onicecandidate: null,
        onaddstream: null,
        onremovestream: null,
        oniceconnectionstatechange: null
      };
    }),
    RTCIceCandidate: jest.fn(),
    RTCSessionDescription: jest.fn()
  };
});
_getJestObj().mock("../api", function () {
  return {
    request: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _WebRTCService = _interopRequireDefault(require("../WebRTCService"));
var _reactNativeIncallManager = _interopRequireDefault(require("react-native-incall-manager"));
var _api = require("../api");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockInCallManager = _reactNativeIncallManager.default;
var mockRequest = _api.request;
describe('WebRTCService - Basic Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockInCallManager.setKeepScreenOn = jest.fn();
    mockInCallManager.setForceSpeakerphoneOn = jest.fn();
    mockInCallManager.start = jest.fn();
    mockInCallManager.stop = jest.fn();
  });
  describe('Service Availability', function () {
    it('should be a singleton instance', function () {
      expect(_WebRTCService.default).toBeDefined();
      expect(typeof _WebRTCService.default).toBe('object');
    });
    it('should have core methods', function () {
      expect(typeof _WebRTCService.default.startCall).toBe('function');
      expect(typeof _WebRTCService.default.endCall).toBe('function');
      expect(typeof _WebRTCService.default.getCallState).toBe('function');
      expect(typeof _WebRTCService.default.isCallActive).toBe('function');
    });
  });
  describe('Call State Management', function () {
    it('should get call state', function () {
      var state = _WebRTCService.default.getCallState();
      expect(state).toBeDefined();
      expect(typeof state).toBe('object');
      expect(state).toHaveProperty('isActive');
      expect(state).toHaveProperty('isMuted');
      expect(state).toHaveProperty('isVideoEnabled');
    });
    it('should check if call is active', function () {
      var isActive = _WebRTCService.default.isCallActive();
      expect(typeof isActive).toBe('boolean');
    });
    it('should indicate call is not active by default', function () {
      var isActive = _WebRTCService.default.isCallActive();
      var state = _WebRTCService.default.getCallState();
      expect(isActive).toBe(false);
      expect(state.isActive).toBe(false);
    });
  });
  describe('Call Controls (with mock stream)', function () {
    beforeEach(function () {
      _WebRTCService.default.localStream = {
        getAudioTracks: jest.fn().mockReturnValue([{
          enabled: true,
          _switchCamera: jest.fn()
        }]),
        getVideoTracks: jest.fn().mockReturnValue([{
          enabled: true,
          _switchCamera: jest.fn()
        }]),
        getTracks: jest.fn().mockReturnValue([])
      };
      _WebRTCService.default.callState = {
        isActive: true,
        isMuted: false,
        isVideoEnabled: true,
        callType: 'voice',
        remoteUserId: 'user123'
      };
    });
    it('should toggle mute when stream exists', function () {
      _WebRTCService.default.toggleMute();
      var state = _WebRTCService.default.getCallState();
      expect(state.isMuted).toBe(true);
    });
    it('should toggle video when stream exists', function () {
      _WebRTCService.default.toggleVideo();
      var state = _WebRTCService.default.getCallState();
      expect(state.isVideoEnabled).toBe(false);
    });
    it('should switch camera when stream exists', function () {
      _WebRTCService.default.switchCamera();
      expect(_WebRTCService.default.getCallState().isActive).toBe(true);
    });
  });
  describe('WebRTC Signaling', function () {
    it('should have WebRTC signaling methods available', function () {
      expect(typeof _WebRTCService.default.handleOffer).toBe('function');
      expect(typeof _WebRTCService.default.handleAnswer).toBe('function');
      expect(typeof _WebRTCService.default.handleIceCandidate).toBe('function');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,