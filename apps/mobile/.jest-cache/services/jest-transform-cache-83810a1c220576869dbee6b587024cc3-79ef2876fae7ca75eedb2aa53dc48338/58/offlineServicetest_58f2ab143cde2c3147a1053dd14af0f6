93757a6e504035835c991a1e32df34a5
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('@react-native-community/netinfo');
_getJestObj().mock("../api", function () {
  return {
    api: {
      getPets: _globals.jest.fn(),
      getMatches: _globals.jest.fn(),
      getMessages: _globals.jest.fn(),
      sendMessage: _globals.jest.fn(),
      updateUserProfile: _globals.jest.fn()
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _offlineService = require("../offlineService");
var _api = require("../api");
var _core = require("@pawfectmatch/core");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
(0, _globals.beforeEach)(function () {
  _globals.jest.clearAllMocks();
});
(0, _globals.afterEach)(function () {
  _offlineService.offlineService.cleanup();
});
var mockAsyncStorage = _asyncStorage.default;
var mockNetInfo = _netinfo.default;
var mockApi = _api.api;
var mockLogger = _core.logger;
(0, _globals.describe)('OfflineService', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockAsyncStorage.removeItem.mockResolvedValue(undefined);
    mockAsyncStorage.getAllKeys.mockResolvedValue(['offline_data', 'other_key']);
    mockNetInfo.fetch.mockResolvedValue({
      isConnected: true,
      type: 'wifi',
      isInternetReachable: true
    });
    mockApi.getPets.mockResolvedValue([]);
    mockApi.getMatches.mockResolvedValue([]);
    mockApi.getMessages.mockResolvedValue([]);
    mockApi.sendMessage.mockResolvedValue(undefined);
    mockApi.updateUserProfile.mockResolvedValue(undefined);
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with default offline data', function () {
      var offlineData = _offlineService.offlineService.offlineData;
      (0, _globals.expect)(offlineData.pets).toEqual([]);
      (0, _globals.expect)(offlineData.user).toBeNull();
      (0, _globals.expect)(offlineData.matches).toEqual([]);
      (0, _globals.expect)(offlineData.messages).toEqual([]);
      (0, _globals.expect)(offlineData.pendingActions).toEqual([]);
      (0, _globals.expect)(typeof offlineData.lastSync).toBe('string');
    });
    (0, _globals.it)('should load offline data from storage', (0, _asyncToGenerator2.default)(function* () {
      var storedData = {
        pets: [{
          id: 'pet1',
          name: 'Buddy'
        }],
        user: {
          id: 'user1',
          name: 'John'
        },
        matches: [{
          id: 'match1'
        }],
        messages: [{
          id: 'msg1'
        }],
        lastSync: '2024-01-01T00:00:00Z',
        pendingActions: [{
          id: 'action1',
          type: 'swipe',
          data: {},
          timestamp: '2024-01-01T00:00:00Z',
          retryCount: 0
        }]
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(storedData));
      var newService = new _offlineService.OfflineService();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      var offlineData = newService.offlineData;
      (0, _globals.expect)(offlineData.pets).toEqual(storedData.pets);
      (0, _globals.expect)(offlineData.user).toEqual(storedData.user);
      (0, _globals.expect)(offlineData.pendingActions).toEqual(storedData.pendingActions);
    }));
    (0, _globals.it)('should handle corrupted offline data gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('invalid json');
      var newService = new _offlineService.OfflineService();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      var offlineData = newService.offlineData;
      (0, _globals.expect)(offlineData.pets).toEqual([]);
    }));
    (0, _globals.it)('should setup network monitoring', function () {
      (0, _globals.expect)(mockNetInfo.addEventListener).toHaveBeenCalled();
      (0, _globals.expect)(mockNetInfo.fetch).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Network Monitoring', function () {
    (0, _globals.it)('should detect going online and trigger sync', function () {
      var networkListener = mockNetInfo.addEventListener.mock.calls[0][0];
      _offlineService.offlineService.isOnline = false;
      networkListener({
        isConnected: true,
        type: 'wifi',
        isInternetReachable: true
      });
      (0, _globals.expect)(_offlineService.offlineService.isOnline).toBe(true);
    });
    (0, _globals.it)('should detect going offline', function () {
      var networkListener = mockNetInfo.addEventListener.mock.calls[0][0];
      networkListener({
        isConnected: false,
        type: 'none',
        isInternetReachable: false
      });
      (0, _globals.expect)(_offlineService.offlineService.isOnline).toBe(false);
    });
    (0, _globals.it)('should handle network state changes', function () {
      var networkListener = mockNetInfo.addEventListener.mock.calls[0][0];
      var states = [{
        isConnected: true,
        type: 'wifi',
        isInternetReachable: true
      }, {
        isConnected: true,
        type: 'cellular',
        isInternetReachable: true
      }, {
        isConnected: false,
        type: 'none',
        isInternetReachable: false
      }, {
        isConnected: true,
        type: 'wifi',
        isInternetReachable: false
      }];
      states.forEach(function (state) {
        networkListener(state);
        (0, _globals.expect)(_offlineService.offlineService.isOnline).toBe(state.isConnected === true);
      });
    });
  });
  (0, _globals.describe)('Sync Status and Listeners', function () {
    (0, _globals.it)('should provide current sync status', function () {
      var status = _offlineService.offlineService.getSyncStatus();
      (0, _globals.expect)(status).toEqual({
        isOnline: true,
        isSyncing: false,
        lastSyncTime: _globals.expect.any(String),
        pendingActionsCount: 0,
        syncProgress: 1.0
      });
    });
    (0, _globals.it)('should update sync status during sync', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.isSyncing = true;
      _offlineService.offlineService.offlineData.pendingActions = [{
        id: 'action1'
      }, {
        id: 'action2'
      }];
      var status = _offlineService.offlineService.getSyncStatus();
      (0, _globals.expect)(status.isSyncing).toBe(true);
      (0, _globals.expect)(status.pendingActionsCount).toBe(2);
      (0, _globals.expect)(status.syncProgress).toBe(0.5);
    }));
    (0, _globals.it)('should notify listeners when status changes', function () {
      var listener1 = _globals.jest.fn();
      var listener2 = _globals.jest.fn();
      var unsubscribe1 = _offlineService.offlineService.addSyncStatusListener(listener1);
      var unsubscribe2 = _offlineService.offlineService.addSyncStatusListener(listener2);
      _offlineService.offlineService.notifyListeners();
      (0, _globals.expect)(listener1).toHaveBeenCalledWith(_globals.expect.any(Object));
      (0, _globals.expect)(listener2).toHaveBeenCalledWith(_globals.expect.any(Object));
      unsubscribe1();
      _offlineService.offlineService.notifyListeners();
      (0, _globals.expect)(listener1).toHaveBeenCalledTimes(1);
      (0, _globals.expect)(listener2).toHaveBeenCalledTimes(2);
    });
  });
  (0, _globals.describe)('Pending Actions', function () {
    (0, _globals.it)('should add pending actions', function () {
      _offlineService.offlineService.addPendingAction('swipe', {
        petId: 'pet1',
        direction: 'like'
      });
      var offlineData = _offlineService.offlineService.offlineData;
      (0, _globals.expect)(offlineData.pendingActions).toHaveLength(1);
      var action = offlineData.pendingActions[0];
      (0, _globals.expect)(action.type).toBe('swipe');
      (0, _globals.expect)(action.data).toEqual({
        petId: 'pet1',
        direction: 'like'
      });
      (0, _globals.expect)(action.retryCount).toBe(0);
      (0, _globals.expect)(typeof action.id).toBe('string');
      (0, _globals.expect)(typeof action.timestamp).toBe('string');
    });
    (0, _globals.it)('should generate unique action IDs', function () {
      _offlineService.offlineService.addPendingAction('message', {
        matchId: 'match1',
        message: 'Hello'
      });
      _offlineService.offlineService.addPendingAction('message', {
        matchId: 'match2',
        message: 'Hi'
      });
      var offlineData = _offlineService.offlineService.offlineData;
      (0, _globals.expect)(offlineData.pendingActions).toHaveLength(2);
      var _offlineData$pendingA = (0, _slicedToArray2.default)(offlineData.pendingActions, 2),
        action1 = _offlineData$pendingA[0],
        action2 = _offlineData$pendingA[1];
      (0, _globals.expect)(action1.id).not.toBe(action2.id);
    });
    (0, _globals.it)('should sync pending actions successfully', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.addPendingAction('swipe', {
        petId: 'pet1',
        direction: 'like'
      });
      _offlineService.offlineService.addPendingAction('message', {
        matchId: 'match1',
        message: 'Hello'
      });
      var executeActionSpy = _globals.jest.spyOn(_offlineService.offlineService, 'executePendingAction');
      executeActionSpy.mockResolvedValue(undefined);
      yield _offlineService.offlineService.syncPendingActions();
      (0, _globals.expect)(executeActionSpy).toHaveBeenCalledTimes(2);
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pendingActions).toHaveLength(0);
    }));
    (0, _globals.it)('should handle failed pending actions with retry logic', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.addPendingAction('swipe', {
        petId: 'pet1',
        direction: 'like'
      });
      _offlineService.offlineService.addPendingAction('message', {
        matchId: 'match1',
        message: 'Hello'
      });
      var executeActionSpy = _globals.jest.spyOn(_offlineService.offlineService, 'executePendingAction');
      executeActionSpy.mockImplementationOnce(function () {
        throw new Error('Action failed');
      });
      executeActionSpy.mockImplementationOnce(function () {
        return Promise.resolve();
      });
      yield _offlineService.offlineService.syncPendingActions();
      var offlineData = _offlineService.offlineService.offlineData;
      (0, _globals.expect)(offlineData.pendingActions).toHaveLength(1);
      (0, _globals.expect)(offlineData.pendingActions[0].retryCount).toBe(1);
    }));
    (0, _globals.it)('should remove actions after max retries', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.addPendingAction('swipe', {
        petId: 'pet1',
        direction: 'like'
      });
      var executeActionSpy = _globals.jest.spyOn(_offlineService.offlineService, 'executePendingAction');
      executeActionSpy.mockRejectedValue(new Error('Persistent failure'));
      for (var i = 0; i < 3; i++) {
        yield _offlineService.offlineService.syncPendingActions();
      }
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pendingActions).toHaveLength(0);
    }));
  });
  (0, _globals.describe)('Offline-First Data Access', function () {
    (0, _globals.it)('should get pets with online preference', (0, _asyncToGenerator2.default)(function* () {
      var onlinePets = [{
        id: 'pet1',
        name: 'Buddy'
      }, {
        id: 'pet2',
        name: 'Luna'
      }];
      mockApi.getPets.mockResolvedValue(onlinePets);
      var result = yield _offlineService.offlineService.getPets();
      (0, _globals.expect)(result).toEqual(onlinePets);
      (0, _globals.expect)(mockApi.getPets).toHaveBeenCalled();
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pets).toEqual(onlinePets);
    }));
    (0, _globals.it)('should fallback to offline pets when online fetch fails', (0, _asyncToGenerator2.default)(function* () {
      var offlinePets = [{
        id: 'pet1',
        name: 'Buddy'
      }];
      _offlineService.offlineService.offlineData.pets = offlinePets;
      mockApi.getPets.mockRejectedValue(new Error('Network error'));
      var result = yield _offlineService.offlineService.getPets();
      (0, _globals.expect)(result).toEqual(offlinePets);
      (0, _globals.expect)(mockLogger.warn).toHaveBeenCalledWith('Failed to fetch pets online, using offline data', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should return offline pets when offline', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.isOnline = false;
      var offlinePets = [{
        id: 'pet1',
        name: 'Buddy'
      }];
      _offlineService.offlineService.offlineData.pets = offlinePets;
      var result = yield _offlineService.offlineService.getPets();
      (0, _globals.expect)(result).toEqual(offlinePets);
      (0, _globals.expect)(mockApi.getPets).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should get user data', function () {
      var user = {
        id: 'user1',
        name: 'John Doe'
      };
      _offlineService.offlineService.offlineData.user = user;
      var result = _offlineService.offlineService.getUser();
      (0, _globals.expect)(result).toEqual(user);
    });
    (0, _globals.it)('should get matches with caching', (0, _asyncToGenerator2.default)(function* () {
      var onlineMatches = [{
        id: 'match1'
      }, {
        id: 'match2'
      }];
      mockApi.getMatches.mockResolvedValue(onlineMatches);
      var result = yield _offlineService.offlineService.getMatches();
      (0, _globals.expect)(result).toEqual(onlineMatches);
      (0, _globals.expect)(_offlineService.offlineService.offlineData.matches).toEqual(onlineMatches);
    }));
    (0, _globals.it)('should get messages for specific match', (0, _asyncToGenerator2.default)(function* () {
      var messages = [{
        id: 'msg1',
        matchId: 'match1',
        content: 'Hello'
      }, {
        id: 'msg2',
        matchId: 'match2',
        content: 'Hi'
      }, {
        id: 'msg3',
        matchId: 'match1',
        content: 'How are you?'
      }];
      _offlineService.offlineService.offlineData.messages = messages;
      var result = yield _offlineService.offlineService.getMessages('match1');
      (0, _globals.expect)(result).toHaveLength(2);
      (0, _globals.expect)(result.every(function (msg) {
        return msg.matchId === 'match1';
      })).toBe(true);
    }));
    (0, _globals.it)('should cache messages when fetching online', (0, _asyncToGenerator2.default)(function* () {
      var onlineMessages = [{
        id: 'msg1',
        content: 'Hello'
      }, {
        id: 'msg2',
        content: 'Hi there'
      }];
      mockApi.getMessages.mockResolvedValue(onlineMessages);
      var result = yield _offlineService.offlineService.getMessages('match1');
      (0, _globals.expect)(result).toEqual(onlineMessages);
      (0, _globals.expect)(_offlineService.offlineService.offlineData.messages).toEqual(onlineMessages);
    }));
  });
  (0, _globals.describe)('Offline-Aware Actions', function () {
    (0, _globals.it)('should perform swipe actions offline-aware', function () {
      _offlineService.offlineService.swipePet('pet1', 'like');
      var offlineData = _offlineService.offlineService.offlineData;
      (0, _globals.expect)(offlineData.pendingActions).toHaveLength(1);
      (0, _globals.expect)(offlineData.pendingActions[0].type).toBe('swipe');
      (0, _globals.expect)(offlineData.pendingActions[0].data).toEqual({
        petId: 'pet1',
        direction: 'like'
      });
    });
    (0, _globals.it)('should send messages offline-aware', (0, _asyncToGenerator2.default)(function* () {
      yield _offlineService.offlineService.sendMessage('match1', 'Hello there!');
      (0, _globals.expect)(mockApi.sendMessage).toHaveBeenCalledWith('match1', 'Hello there!');
    }));
    (0, _globals.it)('should queue messages when offline', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.isOnline = false;
      yield _offlineService.offlineService.sendMessage('match1', 'Offline message');
      (0, _globals.expect)(mockApi.sendMessage).not.toHaveBeenCalled();
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pendingActions[0].type).toBe('message');
    }));
    (0, _globals.it)('should queue messages when online send fails', (0, _asyncToGenerator2.default)(function* () {
      mockApi.sendMessage.mockRejectedValue(new Error('Send failed'));
      yield _offlineService.offlineService.sendMessage('match1', 'Failed message');
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pendingActions[0].type).toBe('message');
      (0, _globals.expect)(mockLogger.warn).toHaveBeenCalledWith('Failed to send message online, queuing for offline', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should update profile offline-aware', (0, _asyncToGenerator2.default)(function* () {
      var profileData = {
        name: 'John Updated',
        bio: 'New bio'
      };
      yield _offlineService.offlineService.updateProfile(profileData);
      (0, _globals.expect)(mockApi.updateUserProfile).toHaveBeenCalledWith(profileData);
    }));
    (0, _globals.it)('should queue profile updates when offline', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.isOnline = false;
      var profileData = {
        name: 'Offline Update'
      };
      yield _offlineService.offlineService.updateProfile(profileData);
      (0, _globals.expect)(mockApi.updateUserProfile).not.toHaveBeenCalled();
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pendingActions[0].type).toBe('profile_update');
    }));
    (0, _globals.it)('should perform match actions', function () {
      _offlineService.offlineService.performMatchAction('match1', 'unmatch');
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pendingActions[0].type).toBe('match_action');
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pendingActions[0].data).toEqual({
        matchId: 'match1',
        action: 'unmatch'
      });
    });
  });
  (0, _globals.describe)('Data Synchronization', function () {
    (0, _globals.it)('should trigger sync when online', (0, _asyncToGenerator2.default)(function* () {
      var syncPendingActionsSpy = _globals.jest.spyOn(_offlineService.offlineService, 'syncPendingActions');
      var syncFromServerSpy = _globals.jest.spyOn(_offlineService.offlineService, 'syncFromServer');
      syncPendingActionsSpy.mockResolvedValue(undefined);
      syncFromServerSpy.mockImplementation(function () {});
      yield _offlineService.offlineService.triggerSync();
      (0, _globals.expect)(syncPendingActionsSpy).toHaveBeenCalled();
      (0, _globals.expect)(syncFromServerSpy).toHaveBeenCalled();
      (0, _globals.expect)(_offlineService.offlineService.offlineData.lastSync).toBeDefined();
    }));
    (0, _globals.it)('should not sync when offline', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.isOnline = false;
      yield _offlineService.offlineService.triggerSync();
      (0, _globals.expect)(_offlineService.offlineService.isSyncing).toBe(false);
    }));
    (0, _globals.it)('should not start concurrent syncs', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.isSyncing = true;
      yield _offlineService.offlineService.triggerSync();
      (0, _globals.expect)(_offlineService.offlineService.isSyncing).toBe(true);
    }));
    (0, _globals.it)('should handle sync errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var syncPendingActionsSpy = _globals.jest.spyOn(_offlineService.offlineService, 'syncPendingActions');
      syncPendingActionsSpy.mockRejectedValue(new Error('Sync failed'));
      yield _offlineService.offlineService.triggerSync();
      (0, _globals.expect)(_offlineService.offlineService.isSyncing).toBe(false);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Sync failed', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should update sync progress during sync', (0, _asyncToGenerator2.default)(function* () {
      var syncPendingActionsSpy = _globals.jest.spyOn(_offlineService.offlineService, 'syncPendingActions');
      syncPendingActionsSpy.mockImplementation((0, _asyncToGenerator2.default)(function* () {
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 10);
        });
      }));
      var promise = _offlineService.offlineService.triggerSync();
      (0, _globals.expect)(_offlineService.offlineService.getSyncStatus().isSyncing).toBe(true);
      yield promise;
      (0, _globals.expect)(_offlineService.offlineService.getSyncStatus().isSyncing).toBe(false);
    }));
  });
  (0, _globals.describe)('Data Persistence', function () {
    (0, _globals.it)('should save offline data to storage', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.offlineData.pets = [{
        id: 'pet1'
      }];
      _offlineService.offlineService.offlineData.user = {
        id: 'user1'
      };
      yield _offlineService.offlineService.saveOfflineData();
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('offline_data', _globals.expect.any(String));
      var savedData = JSON.parse(mockAsyncStorage.setItem.mock.calls[0][1]);
      (0, _globals.expect)(savedData.pets).toEqual([{
        id: 'pet1'
      }]);
      (0, _globals.expect)(savedData.user).toEqual({
        id: 'user1'
      });
    }));
    (0, _globals.it)('should handle storage save errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockRejectedValue(new Error('Storage error'));
      yield _offlineService.offlineService.saveOfflineData();
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to save offline data', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should clear offline data', (0, _asyncToGenerator2.default)(function* () {
      _offlineService.offlineService.offlineData.pets = [{
        id: 'pet1'
      }];
      _offlineService.offlineService.offlineData.pendingActions = [{
        id: 'action1'
      }];
      yield _offlineService.offlineService.clearOfflineData();
      (0, _globals.expect)(mockAsyncStorage.removeItem).toHaveBeenCalledWith('offline_data');
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pets).toEqual([]);
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pendingActions).toEqual([]);
    }));
    (0, _globals.it)('should handle clear data errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.removeItem.mockRejectedValue(new Error('Clear error'));
      yield _offlineService.offlineService.clearOfflineData();
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to clear offline data', _globals.expect.any(Object));
    }));
  });
  (0, _globals.describe)('Storage Size Management', function () {
    (0, _globals.it)('should calculate total storage size', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getAllKeys.mockResolvedValue(['key1', 'key2', 'key3']);
      mockAsyncStorage.getItem.mockImplementation(function (key) {
        var sizes = {
          key1: 'x'.repeat(100),
          key2: 'y'.repeat(200),
          key3: 'z'.repeat(50)
        };
        return Promise.resolve(sizes[key] || null);
      });
      var size = yield _offlineService.offlineService.getStorageSize();
      (0, _globals.expect)(size).toBe(350);
    }));
    (0, _globals.it)('should handle storage size calculation errors', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getAllKeys.mockRejectedValue(new Error('Keys error'));
      var size = yield _offlineService.offlineService.getStorageSize();
      (0, _globals.expect)(size).toBe(0);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to get storage size', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should handle null/empty values in storage size calculation', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getAllKeys.mockResolvedValue(['key1', 'key2']);
      mockAsyncStorage.getItem.mockImplementation(function (key) {
        if (key === 'key1') return Promise.resolve('data');
        if (key === 'key2') return Promise.resolve(null);
        return Promise.resolve(null);
      });
      var size = yield _offlineService.offlineService.getStorageSize();
      (0, _globals.expect)(size).toBe(4);
    }));
  });
  (0, _globals.describe)('Periodic Sync', function () {
    (0, _globals.beforeEach)(function () {
      _globals.jest.useFakeTimers();
    });
    (0, _globals.afterEach)(function () {
      _globals.jest.useRealTimers();
    });
    (0, _globals.it)('should start periodic sync on initialization', function () {
      var triggerSyncSpy = _globals.jest.spyOn(_offlineService.offlineService, 'triggerSync');
      _globals.jest.advanceTimersByTime(35000);
      (0, _globals.expect)(mockNetInfo.addEventListener).toHaveBeenCalled();
    });
    (0, _globals.it)('should only sync periodically when online', function () {
      (0, _globals.expect)(_offlineService.offlineService.isOnline).toBe(true);
    });
  });
  (0, _globals.describe)('Error Handling and Edge Cases', function () {
    (0, _globals.it)('should handle malformed network state', function () {
      var networkListener = mockNetInfo.addEventListener.mock.calls[0][0];
      networkListener(null);
      networkListener(undefined);
      (0, _globals.expect)(_offlineService.offlineService.isOnline).toBeDefined();
    });
    (0, _globals.it)('should handle very large offline datasets', function () {
      var largePets = Array.from({
        length: 1000
      }, function (_, i) {
        return {
          id: `pet${i}`,
          name: `Pet ${i}`,
          data: 'x'.repeat(1000)
        };
      });
      _offlineService.offlineService.offlineData.pets = largePets;
      var result = _offlineService.offlineService.getOfflineData();
      (0, _globals.expect)(result.pets).toHaveLength(1000);
    });
    (0, _globals.it)('should handle concurrent data access', (0, _asyncToGenerator2.default)(function* () {
      var operations = [_offlineService.offlineService.getPets(), _offlineService.offlineService.getMatches(), _offlineService.offlineService.getMessages('match1'), _offlineService.offlineService.getUser()];
      var results = yield Promise.all(operations);
      (0, _globals.expect)(results).toHaveLength(4);
    }));
    (0, _globals.it)('should handle rapid pending action additions', function () {
      for (var i = 0; i < 100; i++) {
        _offlineService.offlineService.addPendingAction('swipe', {
          petId: `pet${i}`,
          direction: 'like'
        });
      }
      (0, _globals.expect)(_offlineService.offlineService.offlineData.pendingActions).toHaveLength(100);
    });
    (0, _globals.it)('should handle listener cleanup', function () {
      var listener = _globals.jest.fn();
      var unsubscribe = _offlineService.offlineService.addSyncStatusListener(listener);
      (0, _globals.expect)(_offlineService.offlineService.syncListeners).toContain(listener);
      unsubscribe();
      (0, _globals.expect)(_offlineService.offlineService.syncListeners).not.toContain(listener);
    });
    (0, _globals.it)('should handle multiple listeners', function () {
      var listeners = [_globals.jest.fn(), _globals.jest.fn(), _globals.jest.fn()];
      var unsubscribes = listeners.map(function (listener) {
        return _offlineService.offlineService.addSyncStatusListener(listener);
      });
      _offlineService.offlineService.notifyListeners();
      listeners.forEach(function (listener) {
        (0, _globals.expect)(listener).toHaveBeenCalledTimes(1);
      });
      unsubscribes.forEach(function (unsubscribe) {
        return unsubscribe();
      });
      (0, _globals.expect)(_offlineService.offlineService.syncListeners).toHaveLength(0);
    });
    (0, _globals.it)('should handle circular references in offline data', function () {
      var _result$user;
      var data = {
        id: 'test'
      };
      data.self = data;
      _offlineService.offlineService.offlineData.user = data;
      var result = _offlineService.offlineService.getOfflineData();
      (0, _globals.expect)((_result$user = result.user) == null ? void 0 : _result$user.id).toBe('test');
    });
    (0, _globals.it)('should handle extreme retry counts', function () {
      var action = {
        id: 'test-action',
        type: 'swipe',
        data: {
          petId: 'pet1'
        },
        timestamp: new Date().toISOString(),
        retryCount: 100
      };
      _offlineService.offlineService.offlineData.pendingActions = [action];
      (0, _globals.expect)(function () {
        return _offlineService.offlineService.getSyncStatus();
      }).not.toThrow();
    });
    (0, _globals.it)('should handle empty or invalid action data', function () {
      var invalidActions = [null, undefined, {}, {
        type: 'invalid'
      }, {
        type: 'swipe',
        data: null
      }];
      invalidActions.forEach(function (invalidAction) {
        (0, _globals.expect)(function () {
          return _offlineService.offlineService.addPendingAction('swipe', invalidAction);
        }).not.toThrow();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,