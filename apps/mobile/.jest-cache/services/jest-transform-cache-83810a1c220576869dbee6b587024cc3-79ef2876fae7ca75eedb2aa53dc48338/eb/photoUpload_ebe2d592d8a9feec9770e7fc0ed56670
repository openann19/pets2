66633bdcb23b3a1f3a2859f72826bae7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadPhoto = uploadPhoto;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _api = require("./api");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function uploadPhoto(_x, _x2) {
  return _uploadPhoto.apply(this, arguments);
}
function _uploadPhoto() {
  _uploadPhoto = (0, _asyncToGenerator2.default)(function* (fileUri, contentType) {
    var data = yield (0, _api.request)("/uploads/photos/presign", {
      method: 'POST',
      body: {
        contentType: contentType
      }
    });
    yield FileSystem.uploadAsync(data.url, fileUri, {
      httpMethod: "PUT",
      headers: {
        "Content-Type": contentType
      },
      uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
    });
    return data.key;
  });
  return _uploadPhoto.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaWxlU3lzdGVtIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2FwaSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidXBsb2FkUGhvdG8iLCJfeCIsIl94MiIsIl91cGxvYWRQaG90byIsImFwcGx5IiwiYXJndW1lbnRzIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZmlsZVVyaSIsImNvbnRlbnRUeXBlIiwiZGF0YSIsInJlcXVlc3QiLCJtZXRob2QiLCJib2R5IiwidXBsb2FkQXN5bmMiLCJ1cmwiLCJodHRwTWV0aG9kIiwiaGVhZGVycyIsInVwbG9hZFR5cGUiLCJGaWxlU3lzdGVtVXBsb2FkVHlwZSIsIkJJTkFSWV9DT05URU5UIiwia2V5Il0sInNvdXJjZXMiOlsicGhvdG9VcGxvYWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRmlsZVN5c3RlbSBmcm9tIFwiZXhwby1maWxlLXN5c3RlbVwiO1xuaW1wb3J0IHsgcmVxdWVzdCB9IGZyb20gXCIuL2FwaVwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkUGhvdG8oZmlsZVVyaTogc3RyaW5nLCBjb250ZW50VHlwZTogc3RyaW5nKSB7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0PHsgdXJsOiBzdHJpbmc7IGtleTogc3RyaW5nIH0+KFwiL3VwbG9hZHMvcGhvdG9zL3ByZXNpZ25cIiwgeyBtZXRob2Q6ICdQT1NUJywgYm9keTogeyBjb250ZW50VHlwZSB9IH0pO1xuICBhd2FpdCBGaWxlU3lzdGVtLnVwbG9hZEFzeW5jKGRhdGEudXJsLCBmaWxlVXJpLCB7XG4gICAgaHR0cE1ldGhvZDogXCJQVVRcIixcbiAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IGNvbnRlbnRUeXBlIH0sXG4gICAgdXBsb2FkVHlwZTogRmlsZVN5c3RlbS5GaWxlU3lzdGVtVXBsb2FkVHlwZS5CSU5BUllfQ09OVEVOVCxcbiAgfSk7XG4gIHJldHVybiBkYXRhLmtleTtcbn1cblxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLElBQUEsR0FBQUQsT0FBQTtBQUFnQyxTQUFBRCx3QkFBQUcsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUwsdUJBQUEsWUFBQUEsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJQUFBZCxDQUFBLGdCQUFBYyxFQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxNQUFBLENBQUFDLGNBQUEsS0FBQUQsTUFBQSxDQUFBRSx3QkFBQSxDQUFBbkIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsQ0FBQUssR0FBQSxJQUFBTCxDQUFBLENBQUFNLEdBQUEsSUFBQVAsQ0FBQSxDQUFBRSxDQUFBLEVBQUFNLEVBQUEsRUFBQVAsQ0FBQSxJQUFBQyxDQUFBLENBQUFNLEVBQUEsSUFBQWQsQ0FBQSxDQUFBYyxFQUFBLFdBQUFOLENBQUEsS0FBQVIsQ0FBQSxFQUFBQyxDQUFBO0FBQUEsU0FFVm1CLFdBQVdBLENBQUFDLEVBQUEsRUFBQUMsR0FBQTtFQUFBLE9BQUFDLFlBQUEsQ0FBQUMsS0FBQSxPQUFBQyxTQUFBO0FBQUE7QUFBQSxTQUFBRixhQUFBO0VBQUFBLFlBQUEsT0FBQUcsa0JBQUEsQ0FBQWhCLE9BQUEsRUFBMUIsV0FBMkJpQixPQUFlLEVBQUVDLFdBQW1CLEVBQUU7SUFDdEUsSUFBTUMsSUFBSSxTQUFTLElBQUFDLFlBQU8sRUFBK0IseUJBQXlCLEVBQUU7TUFBRUMsTUFBTSxFQUFFLE1BQU07TUFBRUMsSUFBSSxFQUFFO1FBQUVKLFdBQVcsRUFBWEE7TUFBWTtJQUFFLENBQUMsQ0FBQztJQUM5SCxNQUFNaEMsVUFBVSxDQUFDcUMsV0FBVyxDQUFDSixJQUFJLENBQUNLLEdBQUcsRUFBRVAsT0FBTyxFQUFFO01BQzlDUSxVQUFVLEVBQUUsS0FBSztNQUNqQkMsT0FBTyxFQUFFO1FBQUUsY0FBYyxFQUFFUjtNQUFZLENBQUM7TUFDeENTLFVBQVUsRUFBRXpDLFVBQVUsQ0FBQzBDLG9CQUFvQixDQUFDQztJQUM5QyxDQUFDLENBQUM7SUFDRixPQUFPVixJQUFJLENBQUNXLEdBQUc7RUFDakIsQ0FBQztFQUFBLE9BQUFqQixZQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBIiwiaWdub3JlTGlzdCI6W119