{"version":3,"names":["_getJestObj","mock","__esModule","default","setSpeakerphoneOn","jest","fn","setKeepScreenOn","setForceSpeakerphoneOn","start","stop","displayIncomingCall","getSpeakerphoneOn","setMicrophoneMute","turnScreenOn","turnScreenOff","setWiredHeadsetHfpOn","setBluetoothScoOn","setBluetoothScoOff","RTCPeerConnection","RTCIceCandidate","RTCSessionDescription","mediaDevices","getUserMedia","_interopRequireDefault","require","_asyncToGenerator2","_reactNativeWebrtc","_WebRTCService","_require","InCallManager","webRTCService","WebRTCService","mockSocket","on","emit","connected","mockPeerConnection","addTrack","createOffer","createAnswer","setLocalDescription","setRemoteDescription","addIceCandidate","close","onicecandidate","ontrack","onconnectionstatechange","connectionState","mockMediaStream","getTracks","getAudioTracks","getVideoTracks","describe","beforeEach","clearAllMocks","mockImplementation","mockResolvedValue","endCall","it","initialize","expect","toHaveBeenCalledWith","any","Function","console","log","calls","length","mockAudioTrack","enabled","mockReturnValue","result","startCall","toBe","audio","video","toHaveBeenCalled","objectContaining","matchId","callType","media","mockVideoTrack","width","min","ideal","height","frameRate","error","Error","mockRejectedValue","mockListener","isActive","isIncoming","_mockSocket$on$mock$c","callData","callId","callerId","callerName","timestamp","Date","now","incomingCallHandler","find","call","answerCall","toggleMute","toggleVideo","_switchCamera","switchCamera","toggleSpeaker","mockTrack","Object","_mockSocket$on$mock$c2","rejectCall","initialState","getCallState","toEqual","isConnected","isMuted","isVideoEnabled","callDuration","isCallActive","state","_mockSocket$on$mock$c3","mockOffer","type","sdp","offerHandler","offer","_mockSocket$on$mock$c4","mockAnswer","answerHandler","answer","_mockSocket$on$mock$c5","mockCandidate","candidate","candidateHandler"],"sources":["WebRTCService.test.ts"],"sourcesContent":["// Mock InCallManager specifically for this test - MUST be first\njest.mock(\"react-native-incall-manager\", () => ({\n  __esModule: true,\n  default: {\n    setSpeakerphoneOn: jest.fn(),\n    setKeepScreenOn: jest.fn(),\n    setForceSpeakerphoneOn: jest.fn(),\n    start: jest.fn(),\n    stop: jest.fn(),\n    displayIncomingCall: jest.fn(),\n    getSpeakerphoneOn: jest.fn(() => false),\n    setMicrophoneMute: jest.fn(),\n    turnScreenOn: jest.fn(),\n    turnScreenOff: jest.fn(),\n    setWiredHeadsetHfpOn: jest.fn(),\n    setBluetoothScoOn: jest.fn(),\n    setBluetoothScoOff: jest.fn(),\n  },\n}));\n\nimport { mediaDevices, RTCPeerConnection } from \"react-native-webrtc\";\n\n// Get the mocked InCallManager\nconst InCallManager = require(\"react-native-incall-manager\").default;\n\n// Import WebRTCService after mocks are set up\nimport WebRTCService from \"../WebRTCService\";\n\n// Create an instance for testing\nconst webRTCService = new WebRTCService();\n\n// Mock interfaces\ninterface MockMediaStreamTrack {\n  enabled: boolean;\n  stop?: jest.Mock;\n  _switchCamera?: jest.Mock;\n}\n\ninterface MockMediaStream {\n  getTracks: jest.Mock;\n  getAudioTracks: jest.Mock;\n  getVideoTracks: jest.Mock;\n}\n\n// Mock dependencies\njest.mock(\"react-native-webrtc\", () => ({\n  RTCPeerConnection: jest.fn(),\n  RTCIceCandidate: jest.fn(),\n  RTCSessionDescription: jest.fn(),\n  mediaDevices: {\n    getUserMedia: jest.fn(),\n  },\n}));\n\njest.mock(\"react-native-incall-manager\", () => ({\n  default: {\n    setSpeakerphoneOn: jest.fn(),\n    setKeepScreenOn: jest.fn(),\n    setForceSpeakerphoneOn: jest.fn(),\n    start: jest.fn(),\n    stop: jest.fn(),\n    displayIncomingCall: jest.fn(),\n    getSpeakerphoneOn: jest.fn(),\n  },\n}));\n\nconst mockSocket = {\n  on: jest.fn(),\n  emit: jest.fn(),\n  connected: true,\n};\n\nconst mockPeerConnection = {\n  addTrack: jest.fn(),\n  createOffer: jest.fn(),\n  createAnswer: jest.fn(),\n  setLocalDescription: jest.fn(),\n  setRemoteDescription: jest.fn(),\n  addIceCandidate: jest.fn(),\n  close: jest.fn(),\n  onicecandidate: null,\n  ontrack: null,\n  onconnectionstatechange: null,\n  connectionState: \"new\",\n};\n\nconst mockMediaStream: MockMediaStream = {\n  getTracks: jest.fn(() => []),\n  getAudioTracks: jest.fn(() => []),\n  getVideoTracks: jest.fn(() => []),\n};\n\ndescribe(\"webRTCService\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (RTCPeerConnection as jest.Mock).mockImplementation(\n      () => mockPeerConnection,\n    );\n    (mediaDevices.getUserMedia as jest.Mock).mockResolvedValue(mockMediaStream);\n\n    // Reset service state\n    webRTCService.endCall();\n  });\n\n  describe(\"Initialization\", () => {\n    it(\"should initialize with socket\", () => {\n      webRTCService.initialize(mockSocket);\n\n      expect(mockSocket.on).toHaveBeenCalledWith(\n        \"incoming-call\",\n        expect.any(Function),\n      );\n      expect(mockSocket.on).toHaveBeenCalledWith(\n        \"call-answered\",\n        expect.any(Function),\n      );\n      expect(mockSocket.on).toHaveBeenCalledWith(\n        \"call-ended\",\n        expect.any(Function),\n      );\n      expect(mockSocket.on).toHaveBeenCalledWith(\n        \"webrtc-offer\",\n        expect.any(Function),\n      );\n      expect(mockSocket.on).toHaveBeenCalledWith(\n        \"webrtc-answer\",\n        expect.any(Function),\n      );\n      expect(mockSocket.on).toHaveBeenCalledWith(\n        \"webrtc-ice-candidate\",\n        expect.any(Function),\n      );\n    });\n\n    it(\"should setup InCallManager correctly\", () => {\n      // Debug: Check if InCallManager methods were called\n      console.log(\n        \"InCallManager.setKeepScreenOn calls:\",\n        InCallManager.setKeepScreenOn.mock.calls.length,\n      );\n      console.log(\n        \"InCallManager.setForceSpeakerphoneOn calls:\",\n        InCallManager.setForceSpeakerphoneOn.mock.calls.length,\n      );\n\n      expect(InCallManager.setKeepScreenOn).toHaveBeenCalledWith(true);\n      expect(InCallManager.setForceSpeakerphoneOn).toHaveBeenCalledWith(false);\n    });\n  });\n\n  describe(\"Starting Calls\", () => {\n    beforeEach(() => {\n      webRTCService.initialize(mockSocket);\n    });\n\n    it(\"should start voice call successfully\", async () => {\n      const mockAudioTrack: MockMediaStreamTrack = { enabled: true };\n      mockMediaStream.getTracks.mockReturnValue([mockAudioTrack as any]);\n\n      const result = await webRTCService.startCall(\"test-match-id\", \"voice\");\n\n      expect(result).toBe(true);\n      expect(mediaDevices.getUserMedia).toHaveBeenCalledWith({\n        audio: true,\n        video: false,\n      });\n      expect(RTCPeerConnection).toHaveBeenCalled();\n      expect(mockSocket.emit).toHaveBeenCalledWith(\n        \"initiate-call\",\n        expect.objectContaining({\n          matchId: \"test-match-id\",\n          callType: \"voice\",\n        }),\n      );\n      expect(InCallManager.start).toHaveBeenCalledWith({ media: \"audio\" });\n    });\n\n    it(\"should start video call successfully\", async () => {\n      const mockVideoTrack: MockMediaStreamTrack = { enabled: true };\n      const mockAudioTrack: MockMediaStreamTrack = { enabled: true };\n      mockMediaStream.getTracks.mockReturnValue([\n        mockAudioTrack as any,\n        mockVideoTrack as any,\n      ]);\n\n      const result = await webRTCService.startCall(\"test-match-id\", \"video\");\n\n      expect(result).toBe(true);\n      expect(mediaDevices.getUserMedia).toHaveBeenCalledWith({\n        audio: true,\n        video: {\n          width: { min: 640, ideal: 1280 },\n          height: { min: 480, ideal: 720 },\n          frameRate: { min: 16, ideal: 30 },\n        },\n      });\n      expect(InCallManager.start).toHaveBeenCalledWith({ media: \"video\" });\n    });\n\n    it(\"should handle getUserMedia failure\", async () => {\n      const error = new Error(\"Permission denied\");\n      (mediaDevices.getUserMedia as jest.Mock).mockRejectedValue(error);\n\n      const result = await webRTCService.startCall(\"test-match-id\", \"voice\");\n\n      expect(result).toBe(false);\n    });\n\n    it(\"should emit call state changes\", async () => {\n      const mockListener = jest.fn();\n      webRTCService.on(\"callStateChanged\", mockListener);\n\n      await webRTCService.startCall(\"test-match-id\", \"voice\");\n\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          isActive: true,\n          isIncoming: false,\n        }),\n      );\n    });\n  });\n\n  describe(\"Answering Calls\", () => {\n    beforeEach(() => {\n      webRTCService.initialize(mockSocket);\n    });\n\n    it(\"should answer incoming call successfully\", async () => {\n      // Simulate incoming call\n      const callData = {\n        callId: \"test-call-id\",\n        matchId: \"test-match-id\",\n        callerId: \"test-caller-id\",\n        callerName: \"Test Caller\",\n        callType: \"voice\" as const,\n        timestamp: Date.now(),\n      };\n\n      // Set up incoming call state\n      const incomingCallHandler = mockSocket.on.mock.calls.find(\n        (call) => call[0] === \"incoming-call\",\n      )?.[1];\n\n      if (incomingCallHandler) {\n        incomingCallHandler(callData);\n      }\n\n      const result = await webRTCService.answerCall();\n\n      expect(result).toBe(true);\n      expect(mockSocket.emit).toHaveBeenCalledWith(\n        \"answer-call\",\n        expect.objectContaining({\n          matchId: \"test-match-id\",\n        }),\n      );\n      expect(InCallManager.start).toHaveBeenCalled();\n    });\n\n    it(\"should handle answer call without call data\", async () => {\n      const result = await webRTCService.answerCall();\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe(\"Call Controls\", () => {\n    beforeEach(() => {\n      webRTCService.initialize(mockSocket);\n    });\n\n    it(\"should toggle mute\", async () => {\n      const mockAudioTrack: MockMediaStreamTrack = { enabled: true };\n      mockMediaStream.getAudioTracks.mockReturnValue([mockAudioTrack as any]);\n\n      await webRTCService.startCall(\"test-match-id\", \"voice\");\n\n      webRTCService.toggleMute();\n\n      expect(mockAudioTrack.enabled).toBe(false);\n    });\n\n    it(\"should toggle video\", async () => {\n      const mockVideoTrack: MockMediaStreamTrack = { enabled: true };\n      mockMediaStream.getVideoTracks.mockReturnValue([mockVideoTrack as any]);\n\n      await webRTCService.startCall(\"test-match-id\", \"video\");\n\n      webRTCService.toggleVideo();\n\n      expect(mockVideoTrack.enabled).toBe(false);\n    });\n\n    it(\"should switch camera\", async () => {\n      const mockVideoTrack: MockMediaStreamTrack = {\n        enabled: true,\n        _switchCamera: jest.fn(),\n      };\n      mockMediaStream.getVideoTracks.mockReturnValue([mockVideoTrack as any]);\n\n      await webRTCService.startCall(\"test-match-id\", \"video\");\n\n      await webRTCService.switchCamera();\n\n      expect(mockVideoTrack._switchCamera).toHaveBeenCalled();\n    });\n\n    it(\"should toggle speaker\", () => {\n      webRTCService.toggleSpeaker();\n\n      expect(InCallManager.setForceSpeakerphoneOn).toHaveBeenCalledWith(true);\n    });\n  });\n\n  describe(\"Ending Calls\", () => {\n    beforeEach(() => {\n      webRTCService.initialize(mockSocket);\n    });\n\n    it(\"should end call and clean up resources\", async () => {\n      const mockTrack: MockMediaStreamTrack = {\n        enabled: true,\n        stop: jest.fn(),\n      };\n      mockMediaStream.getTracks.mockReturnValue([mockTrack as any]);\n\n      await webRTCService.startCall(\"test-match-id\", \"voice\");\n\n      webRTCService.endCall();\n\n      expect(mockPeerConnection.close).toHaveBeenCalled();\n      expect(mockTrack.stop).toHaveBeenCalled();\n      expect(InCallManager.stop).toHaveBeenCalled();\n      expect(mockSocket.emit).toHaveBeenCalledWith(\n        \"end-call\",\n        expect.any(Object),\n      );\n    });\n\n    it(\"should reject incoming call\", () => {\n      const callData = {\n        callId: \"test-call-id\",\n        matchId: \"test-match-id\",\n        callerId: \"test-caller-id\",\n        callerName: \"Test Caller\",\n        callType: \"voice\" as const,\n        timestamp: Date.now(),\n      };\n\n      // Simulate incoming call\n      const incomingCallHandler = mockSocket.on.mock.calls.find(\n        (call) => call[0] === \"incoming-call\",\n      )?.[1];\n\n      if (incomingCallHandler) {\n        incomingCallHandler(callData);\n      }\n\n      webRTCService.rejectCall();\n\n      expect(mockSocket.emit).toHaveBeenCalledWith(\n        \"reject-call\",\n        expect.objectContaining({\n          callId: \"test-call-id\",\n          matchId: \"test-match-id\",\n        }),\n      );\n    });\n  });\n\n  describe(\"Call State Management\", () => {\n    it(\"should return correct call state\", () => {\n      const initialState = webRTCService.getCallState();\n\n      expect(initialState).toEqual({\n        isActive: false,\n        isConnected: false,\n        isIncoming: false,\n        isMuted: false,\n        isVideoEnabled: true,\n        callDuration: 0,\n      });\n    });\n\n    it(\"should return correct call active status\", () => {\n      expect(webRTCService.isCallActive()).toBe(false);\n    });\n\n    it(\"should update call state during call\", async () => {\n      await webRTCService.startCall(\"test-match-id\", \"voice\");\n\n      expect(webRTCService.isCallActive()).toBe(true);\n\n      const state = webRTCService.getCallState();\n      expect(state.isActive).toBe(true);\n      expect(state.isIncoming).toBe(false);\n    });\n  });\n\n  describe(\"WebRTC Signaling\", () => {\n    beforeEach(() => {\n      webRTCService.initialize(mockSocket);\n    });\n\n    it(\"should handle WebRTC offer\", async () => {\n      const mockOffer = { type: \"offer\", sdp: \"mock-sdp\" };\n      mockPeerConnection.createAnswer.mockResolvedValue(mockOffer);\n\n      await webRTCService.startCall(\"test-match-id\", \"voice\");\n\n      const offerHandler = mockSocket.on.mock.calls.find(\n        (call) => call[0] === \"webrtc-offer\",\n      )?.[1];\n\n      if (offerHandler) {\n        await offerHandler({ offer: mockOffer });\n      }\n\n      expect(mockPeerConnection.setRemoteDescription).toHaveBeenCalled();\n      expect(mockPeerConnection.createAnswer).toHaveBeenCalled();\n      expect(mockSocket.emit).toHaveBeenCalledWith(\n        \"webrtc-answer\",\n        expect.any(Object),\n      );\n    });\n\n    it(\"should handle WebRTC answer\", async () => {\n      const mockAnswer = { type: \"answer\", sdp: \"mock-sdp\" };\n\n      await webRTCService.startCall(\"test-match-id\", \"voice\");\n\n      const answerHandler = mockSocket.on.mock.calls.find(\n        (call) => call[0] === \"webrtc-answer\",\n      )?.[1];\n\n      if (answerHandler) {\n        await answerHandler({ answer: mockAnswer });\n      }\n\n      expect(mockPeerConnection.setRemoteDescription).toHaveBeenCalled();\n    });\n\n    it(\"should handle ICE candidates\", async () => {\n      const mockCandidate = { candidate: \"mock-candidate\" };\n\n      await webRTCService.startCall(\"test-match-id\", \"voice\");\n\n      const candidateHandler = mockSocket.on.mock.calls.find(\n        (call) => call[0] === \"webrtc-ice-candidate\",\n      )?.[1];\n\n      if (candidateHandler) {\n        await candidateHandler({ candidate: mockCandidate });\n      }\n\n      expect(mockPeerConnection.addIceCandidate).toHaveBeenCalled();\n    });\n  });\n});\n"],"mappings":";;AACAA,WAAA,GAAKC,IAAI,CAAC,6BAA6B,EAAE;EAAA,OAAO;IAC9CC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE;MACPC,iBAAiB,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;MAC5BC,eAAe,EAAEF,IAAI,CAACC,EAAE,CAAC,CAAC;MAC1BE,sBAAsB,EAAEH,IAAI,CAACC,EAAE,CAAC,CAAC;MACjCG,KAAK,EAAEJ,IAAI,CAACC,EAAE,CAAC,CAAC;MAChBI,IAAI,EAAEL,IAAI,CAACC,EAAE,CAAC,CAAC;MACfK,mBAAmB,EAAEN,IAAI,CAACC,EAAE,CAAC,CAAC;MAC9BM,iBAAiB,EAAEP,IAAI,CAACC,EAAE,CAAC;QAAA,OAAM,KAAK;MAAA,EAAC;MACvCO,iBAAiB,EAAER,IAAI,CAACC,EAAE,CAAC,CAAC;MAC5BQ,YAAY,EAAET,IAAI,CAACC,EAAE,CAAC,CAAC;MACvBS,aAAa,EAAEV,IAAI,CAACC,EAAE,CAAC,CAAC;MACxBU,oBAAoB,EAAEX,IAAI,CAACC,EAAE,CAAC,CAAC;MAC/BW,iBAAiB,EAAEZ,IAAI,CAACC,EAAE,CAAC,CAAC;MAC5BY,kBAAkB,EAAEb,IAAI,CAACC,EAAE,CAAC;IAC9B;EACF,CAAC;AAAA,CAAC,CAAC;AA2BHN,WAAA,GAAKC,IAAI,CAAC,qBAAqB,EAAE;EAAA,OAAO;IACtCkB,iBAAiB,EAAEd,IAAI,CAACC,EAAE,CAAC,CAAC;IAC5Bc,eAAe,EAAEf,IAAI,CAACC,EAAE,CAAC,CAAC;IAC1Be,qBAAqB,EAAEhB,IAAI,CAACC,EAAE,CAAC,CAAC;IAChCgB,YAAY,EAAE;MACZC,YAAY,EAAElB,IAAI,CAACC,EAAE,CAAC;IACxB;EACF,CAAC;AAAA,CAAC,CAAC;AAEHN,WAAA,GAAKC,IAAI,CAAC,6BAA6B,EAAE;EAAA,OAAO;IAC9CE,OAAO,EAAE;MACPC,iBAAiB,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;MAC5BC,eAAe,EAAEF,IAAI,CAACC,EAAE,CAAC,CAAC;MAC1BE,sBAAsB,EAAEH,IAAI,CAACC,EAAE,CAAC,CAAC;MACjCG,KAAK,EAAEJ,IAAI,CAACC,EAAE,CAAC,CAAC;MAChBI,IAAI,EAAEL,IAAI,CAACC,EAAE,CAAC,CAAC;MACfK,mBAAmB,EAAEN,IAAI,CAACC,EAAE,CAAC,CAAC;MAC9BM,iBAAiB,EAAEP,IAAI,CAACC,EAAE,CAAC;IAC7B;EACF,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAkB,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AA5CJ,IAAAE,kBAAA,GAAAF,OAAA;AAMA,IAAAG,cAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAA6C,SAAAzB,YAAA;EAAA,IAAA6B,QAAA,GAAAJ,OAAA;IAAApB,IAAA,GAAAwB,QAAA,CAAAxB,IAAA;EAAAL,WAAA,YAAAA,YAAA;IAAA,OAAAK,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAH7C,IAAMyB,aAAa,GAAGL,OAAO,CAAC,6BAA6B,CAAC,CAACtB,OAAO;AAMpE,IAAM4B,aAAa,GAAG,IAAIC,sBAAa,CAAC,CAAC;AAqCzC,IAAMC,UAAU,GAAG;EACjBC,EAAE,EAAE7B,IAAI,CAACC,EAAE,CAAC,CAAC;EACb6B,IAAI,EAAE9B,IAAI,CAACC,EAAE,CAAC,CAAC;EACf8B,SAAS,EAAE;AACb,CAAC;AAED,IAAMC,kBAAkB,GAAG;EACzBC,QAAQ,EAAEjC,IAAI,CAACC,EAAE,CAAC,CAAC;EACnBiC,WAAW,EAAElC,IAAI,CAACC,EAAE,CAAC,CAAC;EACtBkC,YAAY,EAAEnC,IAAI,CAACC,EAAE,CAAC,CAAC;EACvBmC,mBAAmB,EAAEpC,IAAI,CAACC,EAAE,CAAC,CAAC;EAC9BoC,oBAAoB,EAAErC,IAAI,CAACC,EAAE,CAAC,CAAC;EAC/BqC,eAAe,EAAEtC,IAAI,CAACC,EAAE,CAAC,CAAC;EAC1BsC,KAAK,EAAEvC,IAAI,CAACC,EAAE,CAAC,CAAC;EAChBuC,cAAc,EAAE,IAAI;EACpBC,OAAO,EAAE,IAAI;EACbC,uBAAuB,EAAE,IAAI;EAC7BC,eAAe,EAAE;AACnB,CAAC;AAED,IAAMC,eAAgC,GAAG;EACvCC,SAAS,EAAE7C,IAAI,CAACC,EAAE,CAAC;IAAA,OAAM,EAAE;EAAA,EAAC;EAC5B6C,cAAc,EAAE9C,IAAI,CAACC,EAAE,CAAC;IAAA,OAAM,EAAE;EAAA,EAAC;EACjC8C,cAAc,EAAE/C,IAAI,CAACC,EAAE,CAAC;IAAA,OAAM,EAAE;EAAA;AAClC,CAAC;AAED+C,QAAQ,CAAC,eAAe,EAAE,YAAM;EAC9BC,UAAU,CAAC,YAAM;IACfjD,IAAI,CAACkD,aAAa,CAAC,CAAC;IACnBpC,oCAAiB,CAAeqC,kBAAkB,CACjD;MAAA,OAAMnB,kBAAkB;IAAA,CAC1B,CAAC;IACAf,+BAAY,CAACC,YAAY,CAAekC,iBAAiB,CAACR,eAAe,CAAC;IAG3ElB,aAAa,CAAC2B,OAAO,CAAC,CAAC;EACzB,CAAC,CAAC;EAEFL,QAAQ,CAAC,gBAAgB,EAAE,YAAM;IAC/BM,EAAE,CAAC,+BAA+B,EAAE,YAAM;MACxC5B,aAAa,CAAC6B,UAAU,CAAC3B,UAAU,CAAC;MAEpC4B,MAAM,CAAC5B,UAAU,CAACC,EAAE,CAAC,CAAC4B,oBAAoB,CACxC,eAAe,EACfD,MAAM,CAACE,GAAG,CAACC,QAAQ,CACrB,CAAC;MACDH,MAAM,CAAC5B,UAAU,CAACC,EAAE,CAAC,CAAC4B,oBAAoB,CACxC,eAAe,EACfD,MAAM,CAACE,GAAG,CAACC,QAAQ,CACrB,CAAC;MACDH,MAAM,CAAC5B,UAAU,CAACC,EAAE,CAAC,CAAC4B,oBAAoB,CACxC,YAAY,EACZD,MAAM,CAACE,GAAG,CAACC,QAAQ,CACrB,CAAC;MACDH,MAAM,CAAC5B,UAAU,CAACC,EAAE,CAAC,CAAC4B,oBAAoB,CACxC,cAAc,EACdD,MAAM,CAACE,GAAG,CAACC,QAAQ,CACrB,CAAC;MACDH,MAAM,CAAC5B,UAAU,CAACC,EAAE,CAAC,CAAC4B,oBAAoB,CACxC,eAAe,EACfD,MAAM,CAACE,GAAG,CAACC,QAAQ,CACrB,CAAC;MACDH,MAAM,CAAC5B,UAAU,CAACC,EAAE,CAAC,CAAC4B,oBAAoB,CACxC,sBAAsB,EACtBD,MAAM,CAACE,GAAG,CAACC,QAAQ,CACrB,CAAC;IACH,CAAC,CAAC;IAEFL,EAAE,CAAC,sCAAsC,EAAE,YAAM;MAE/CM,OAAO,CAACC,GAAG,CACT,sCAAsC,EACtCpC,aAAa,CAACvB,eAAe,CAACN,IAAI,CAACkE,KAAK,CAACC,MAC3C,CAAC;MACDH,OAAO,CAACC,GAAG,CACT,6CAA6C,EAC7CpC,aAAa,CAACtB,sBAAsB,CAACP,IAAI,CAACkE,KAAK,CAACC,MAClD,CAAC;MAEDP,MAAM,CAAC/B,aAAa,CAACvB,eAAe,CAAC,CAACuD,oBAAoB,CAAC,IAAI,CAAC;MAChED,MAAM,CAAC/B,aAAa,CAACtB,sBAAsB,CAAC,CAACsD,oBAAoB,CAAC,KAAK,CAAC;IAC1E,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFT,QAAQ,CAAC,gBAAgB,EAAE,YAAM;IAC/BC,UAAU,CAAC,YAAM;MACfvB,aAAa,CAAC6B,UAAU,CAAC3B,UAAU,CAAC;IACtC,CAAC,CAAC;IAEF0B,EAAE,CAAC,sCAAsC,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MACrD,IAAMkE,cAAoC,GAAG;QAAEC,OAAO,EAAE;MAAK,CAAC;MAC9DrB,eAAe,CAACC,SAAS,CAACqB,eAAe,CAAC,CAACF,cAAc,CAAQ,CAAC;MAElE,IAAMG,MAAM,SAASzC,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEtEZ,MAAM,CAACW,MAAM,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;MACzBb,MAAM,CAACvC,+BAAY,CAACC,YAAY,CAAC,CAACuC,oBAAoB,CAAC;QACrDa,KAAK,EAAE,IAAI;QACXC,KAAK,EAAE;MACT,CAAC,CAAC;MACFf,MAAM,CAAC1C,oCAAiB,CAAC,CAAC0D,gBAAgB,CAAC,CAAC;MAC5ChB,MAAM,CAAC5B,UAAU,CAACE,IAAI,CAAC,CAAC2B,oBAAoB,CAC1C,eAAe,EACfD,MAAM,CAACiB,gBAAgB,CAAC;QACtBC,OAAO,EAAE,eAAe;QACxBC,QAAQ,EAAE;MACZ,CAAC,CACH,CAAC;MACDnB,MAAM,CAAC/B,aAAa,CAACrB,KAAK,CAAC,CAACqD,oBAAoB,CAAC;QAAEmB,KAAK,EAAE;MAAQ,CAAC,CAAC;IACtE,CAAC,EAAC;IAEFtB,EAAE,CAAC,sCAAsC,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MACrD,IAAM+E,cAAoC,GAAG;QAAEZ,OAAO,EAAE;MAAK,CAAC;MAC9D,IAAMD,cAAoC,GAAG;QAAEC,OAAO,EAAE;MAAK,CAAC;MAC9DrB,eAAe,CAACC,SAAS,CAACqB,eAAe,CAAC,CACxCF,cAAc,EACda,cAAc,CACf,CAAC;MAEF,IAAMV,MAAM,SAASzC,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEtEZ,MAAM,CAACW,MAAM,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;MACzBb,MAAM,CAACvC,+BAAY,CAACC,YAAY,CAAC,CAACuC,oBAAoB,CAAC;QACrDa,KAAK,EAAE,IAAI;QACXC,KAAK,EAAE;UACLO,KAAK,EAAE;YAAEC,GAAG,EAAE,GAAG;YAAEC,KAAK,EAAE;UAAK,CAAC;UAChCC,MAAM,EAAE;YAAEF,GAAG,EAAE,GAAG;YAAEC,KAAK,EAAE;UAAI,CAAC;UAChCE,SAAS,EAAE;YAAEH,GAAG,EAAE,EAAE;YAAEC,KAAK,EAAE;UAAG;QAClC;MACF,CAAC,CAAC;MACFxB,MAAM,CAAC/B,aAAa,CAACrB,KAAK,CAAC,CAACqD,oBAAoB,CAAC;QAAEmB,KAAK,EAAE;MAAQ,CAAC,CAAC;IACtE,CAAC,EAAC;IAEFtB,EAAE,CAAC,oCAAoC,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MACnD,IAAMqF,KAAK,GAAG,IAAIC,KAAK,CAAC,mBAAmB,CAAC;MAC3CnE,+BAAY,CAACC,YAAY,CAAemE,iBAAiB,CAACF,KAAK,CAAC;MAEjE,IAAMhB,MAAM,SAASzC,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEtEZ,MAAM,CAACW,MAAM,CAAC,CAACE,IAAI,CAAC,KAAK,CAAC;IAC5B,CAAC,EAAC;IAEFf,EAAE,CAAC,gCAAgC,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MAC/C,IAAMwF,YAAY,GAAGtF,IAAI,CAACC,EAAE,CAAC,CAAC;MAC9ByB,aAAa,CAACG,EAAE,CAAC,kBAAkB,EAAEyD,YAAY,CAAC;MAElD,MAAM5D,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEvDZ,MAAM,CAAC8B,YAAY,CAAC,CAAC7B,oBAAoB,CACvCD,MAAM,CAACiB,gBAAgB,CAAC;QACtBc,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CACH,CAAC;IACH,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFxC,QAAQ,CAAC,iBAAiB,EAAE,YAAM;IAChCC,UAAU,CAAC,YAAM;MACfvB,aAAa,CAAC6B,UAAU,CAAC3B,UAAU,CAAC;IACtC,CAAC,CAAC;IAEF0B,EAAE,CAAC,0CAA0C,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MAAA,IAAA2F,qBAAA;MAEzD,IAAMC,QAAQ,GAAG;QACfC,MAAM,EAAE,cAAc;QACtBjB,OAAO,EAAE,eAAe;QACxBkB,QAAQ,EAAE,gBAAgB;QAC1BC,UAAU,EAAE,aAAa;QACzBlB,QAAQ,EAAE,OAAgB;QAC1BmB,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC;MAGD,IAAMC,mBAAmB,IAAAR,qBAAA,GAAG7D,UAAU,CAACC,EAAE,CAACjC,IAAI,CAACkE,KAAK,CAACoC,IAAI,CACvD,UAACC,IAAI;QAAA,OAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,eAAe;MAAA,CACvC,CAAC,qBAF2BV,qBAAA,CAExB,CAAC,CAAC;MAEN,IAAIQ,mBAAmB,EAAE;QACvBA,mBAAmB,CAACP,QAAQ,CAAC;MAC/B;MAEA,IAAMvB,MAAM,SAASzC,aAAa,CAAC0E,UAAU,CAAC,CAAC;MAE/C5C,MAAM,CAACW,MAAM,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;MACzBb,MAAM,CAAC5B,UAAU,CAACE,IAAI,CAAC,CAAC2B,oBAAoB,CAC1C,aAAa,EACbD,MAAM,CAACiB,gBAAgB,CAAC;QACtBC,OAAO,EAAE;MACX,CAAC,CACH,CAAC;MACDlB,MAAM,CAAC/B,aAAa,CAACrB,KAAK,CAAC,CAACoE,gBAAgB,CAAC,CAAC;IAChD,CAAC,EAAC;IAEFlB,EAAE,CAAC,6CAA6C,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MAC5D,IAAMqE,MAAM,SAASzC,aAAa,CAAC0E,UAAU,CAAC,CAAC;MAE/C5C,MAAM,CAACW,MAAM,CAAC,CAACE,IAAI,CAAC,KAAK,CAAC;IAC5B,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFrB,QAAQ,CAAC,eAAe,EAAE,YAAM;IAC9BC,UAAU,CAAC,YAAM;MACfvB,aAAa,CAAC6B,UAAU,CAAC3B,UAAU,CAAC;IACtC,CAAC,CAAC;IAEF0B,EAAE,CAAC,oBAAoB,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MACnC,IAAMkE,cAAoC,GAAG;QAAEC,OAAO,EAAE;MAAK,CAAC;MAC9DrB,eAAe,CAACE,cAAc,CAACoB,eAAe,CAAC,CAACF,cAAc,CAAQ,CAAC;MAEvE,MAAMtC,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEvD1C,aAAa,CAAC2E,UAAU,CAAC,CAAC;MAE1B7C,MAAM,CAACQ,cAAc,CAACC,OAAO,CAAC,CAACI,IAAI,CAAC,KAAK,CAAC;IAC5C,CAAC,EAAC;IAEFf,EAAE,CAAC,qBAAqB,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MACpC,IAAM+E,cAAoC,GAAG;QAAEZ,OAAO,EAAE;MAAK,CAAC;MAC9DrB,eAAe,CAACG,cAAc,CAACmB,eAAe,CAAC,CAACW,cAAc,CAAQ,CAAC;MAEvE,MAAMnD,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEvD1C,aAAa,CAAC4E,WAAW,CAAC,CAAC;MAE3B9C,MAAM,CAACqB,cAAc,CAACZ,OAAO,CAAC,CAACI,IAAI,CAAC,KAAK,CAAC;IAC5C,CAAC,EAAC;IAEFf,EAAE,CAAC,sBAAsB,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MACrC,IAAM+E,cAAoC,GAAG;QAC3CZ,OAAO,EAAE,IAAI;QACbsC,aAAa,EAAEvG,IAAI,CAACC,EAAE,CAAC;MACzB,CAAC;MACD2C,eAAe,CAACG,cAAc,CAACmB,eAAe,CAAC,CAACW,cAAc,CAAQ,CAAC;MAEvE,MAAMnD,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEvD,MAAM1C,aAAa,CAAC8E,YAAY,CAAC,CAAC;MAElChD,MAAM,CAACqB,cAAc,CAAC0B,aAAa,CAAC,CAAC/B,gBAAgB,CAAC,CAAC;IACzD,CAAC,EAAC;IAEFlB,EAAE,CAAC,uBAAuB,EAAE,YAAM;MAChC5B,aAAa,CAAC+E,aAAa,CAAC,CAAC;MAE7BjD,MAAM,CAAC/B,aAAa,CAACtB,sBAAsB,CAAC,CAACsD,oBAAoB,CAAC,IAAI,CAAC;IACzE,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFT,QAAQ,CAAC,cAAc,EAAE,YAAM;IAC7BC,UAAU,CAAC,YAAM;MACfvB,aAAa,CAAC6B,UAAU,CAAC3B,UAAU,CAAC;IACtC,CAAC,CAAC;IAEF0B,EAAE,CAAC,wCAAwC,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MACvD,IAAM4G,SAA+B,GAAG;QACtCzC,OAAO,EAAE,IAAI;QACb5D,IAAI,EAAEL,IAAI,CAACC,EAAE,CAAC;MAChB,CAAC;MACD2C,eAAe,CAACC,SAAS,CAACqB,eAAe,CAAC,CAACwC,SAAS,CAAQ,CAAC;MAE7D,MAAMhF,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEvD1C,aAAa,CAAC2B,OAAO,CAAC,CAAC;MAEvBG,MAAM,CAACxB,kBAAkB,CAACO,KAAK,CAAC,CAACiC,gBAAgB,CAAC,CAAC;MACnDhB,MAAM,CAACkD,SAAS,CAACrG,IAAI,CAAC,CAACmE,gBAAgB,CAAC,CAAC;MACzChB,MAAM,CAAC/B,aAAa,CAACpB,IAAI,CAAC,CAACmE,gBAAgB,CAAC,CAAC;MAC7ChB,MAAM,CAAC5B,UAAU,CAACE,IAAI,CAAC,CAAC2B,oBAAoB,CAC1C,UAAU,EACVD,MAAM,CAACE,GAAG,CAACiD,MAAM,CACnB,CAAC;IACH,CAAC,EAAC;IAEFrD,EAAE,CAAC,6BAA6B,EAAE,YAAM;MAAA,IAAAsD,sBAAA;MACtC,IAAMlB,QAAQ,GAAG;QACfC,MAAM,EAAE,cAAc;QACtBjB,OAAO,EAAE,eAAe;QACxBkB,QAAQ,EAAE,gBAAgB;QAC1BC,UAAU,EAAE,aAAa;QACzBlB,QAAQ,EAAE,OAAgB;QAC1BmB,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC;MAGD,IAAMC,mBAAmB,IAAAW,sBAAA,GAAGhF,UAAU,CAACC,EAAE,CAACjC,IAAI,CAACkE,KAAK,CAACoC,IAAI,CACvD,UAACC,IAAI;QAAA,OAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,eAAe;MAAA,CACvC,CAAC,qBAF2BS,sBAAA,CAExB,CAAC,CAAC;MAEN,IAAIX,mBAAmB,EAAE;QACvBA,mBAAmB,CAACP,QAAQ,CAAC;MAC/B;MAEAhE,aAAa,CAACmF,UAAU,CAAC,CAAC;MAE1BrD,MAAM,CAAC5B,UAAU,CAACE,IAAI,CAAC,CAAC2B,oBAAoB,CAC1C,aAAa,EACbD,MAAM,CAACiB,gBAAgB,CAAC;QACtBkB,MAAM,EAAE,cAAc;QACtBjB,OAAO,EAAE;MACX,CAAC,CACH,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF1B,QAAQ,CAAC,uBAAuB,EAAE,YAAM;IACtCM,EAAE,CAAC,kCAAkC,EAAE,YAAM;MAC3C,IAAMwD,YAAY,GAAGpF,aAAa,CAACqF,YAAY,CAAC,CAAC;MAEjDvD,MAAM,CAACsD,YAAY,CAAC,CAACE,OAAO,CAAC;QAC3BzB,QAAQ,EAAE,KAAK;QACf0B,WAAW,EAAE,KAAK;QAClBzB,UAAU,EAAE,KAAK;QACjB0B,OAAO,EAAE,KAAK;QACdC,cAAc,EAAE,IAAI;QACpBC,YAAY,EAAE;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF9D,EAAE,CAAC,0CAA0C,EAAE,YAAM;MACnDE,MAAM,CAAC9B,aAAa,CAAC2F,YAAY,CAAC,CAAC,CAAC,CAAChD,IAAI,CAAC,KAAK,CAAC;IAClD,CAAC,CAAC;IAEFf,EAAE,CAAC,sCAAsC,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MACrD,MAAM4B,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEvDZ,MAAM,CAAC9B,aAAa,CAAC2F,YAAY,CAAC,CAAC,CAAC,CAAChD,IAAI,CAAC,IAAI,CAAC;MAE/C,IAAMiD,KAAK,GAAG5F,aAAa,CAACqF,YAAY,CAAC,CAAC;MAC1CvD,MAAM,CAAC8D,KAAK,CAAC/B,QAAQ,CAAC,CAAClB,IAAI,CAAC,IAAI,CAAC;MACjCb,MAAM,CAAC8D,KAAK,CAAC9B,UAAU,CAAC,CAACnB,IAAI,CAAC,KAAK,CAAC;IACtC,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFrB,QAAQ,CAAC,kBAAkB,EAAE,YAAM;IACjCC,UAAU,CAAC,YAAM;MACfvB,aAAa,CAAC6B,UAAU,CAAC3B,UAAU,CAAC;IACtC,CAAC,CAAC;IAEF0B,EAAE,CAAC,4BAA4B,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MAAA,IAAAyH,sBAAA;MAC3C,IAAMC,SAAS,GAAG;QAAEC,IAAI,EAAE,OAAO;QAAEC,GAAG,EAAE;MAAW,CAAC;MACpD1F,kBAAkB,CAACG,YAAY,CAACiB,iBAAiB,CAACoE,SAAS,CAAC;MAE5D,MAAM9F,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEvD,IAAMuD,YAAY,IAAAJ,sBAAA,GAAG3F,UAAU,CAACC,EAAE,CAACjC,IAAI,CAACkE,KAAK,CAACoC,IAAI,CAChD,UAACC,IAAI;QAAA,OAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,cAAc;MAAA,CACtC,CAAC,qBAFoBoB,sBAAA,CAEjB,CAAC,CAAC;MAEN,IAAII,YAAY,EAAE;QAChB,MAAMA,YAAY,CAAC;UAAEC,KAAK,EAAEJ;QAAU,CAAC,CAAC;MAC1C;MAEAhE,MAAM,CAACxB,kBAAkB,CAACK,oBAAoB,CAAC,CAACmC,gBAAgB,CAAC,CAAC;MAClEhB,MAAM,CAACxB,kBAAkB,CAACG,YAAY,CAAC,CAACqC,gBAAgB,CAAC,CAAC;MAC1DhB,MAAM,CAAC5B,UAAU,CAACE,IAAI,CAAC,CAAC2B,oBAAoB,CAC1C,eAAe,EACfD,MAAM,CAACE,GAAG,CAACiD,MAAM,CACnB,CAAC;IACH,CAAC,EAAC;IAEFrD,EAAE,CAAC,6BAA6B,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MAAA,IAAA+H,sBAAA;MAC5C,IAAMC,UAAU,GAAG;QAAEL,IAAI,EAAE,QAAQ;QAAEC,GAAG,EAAE;MAAW,CAAC;MAEtD,MAAMhG,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEvD,IAAM2D,aAAa,IAAAF,sBAAA,GAAGjG,UAAU,CAACC,EAAE,CAACjC,IAAI,CAACkE,KAAK,CAACoC,IAAI,CACjD,UAACC,IAAI;QAAA,OAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,eAAe;MAAA,CACvC,CAAC,qBAFqB0B,sBAAA,CAElB,CAAC,CAAC;MAEN,IAAIE,aAAa,EAAE;QACjB,MAAMA,aAAa,CAAC;UAAEC,MAAM,EAAEF;QAAW,CAAC,CAAC;MAC7C;MAEAtE,MAAM,CAACxB,kBAAkB,CAACK,oBAAoB,CAAC,CAACmC,gBAAgB,CAAC,CAAC;IACpE,CAAC,EAAC;IAEFlB,EAAE,CAAC,8BAA8B,MAAAjC,kBAAA,CAAAvB,OAAA,EAAE,aAAY;MAAA,IAAAmI,sBAAA;MAC7C,IAAMC,aAAa,GAAG;QAAEC,SAAS,EAAE;MAAiB,CAAC;MAErD,MAAMzG,aAAa,CAAC0C,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC;MAEvD,IAAMgE,gBAAgB,IAAAH,sBAAA,GAAGrG,UAAU,CAACC,EAAE,CAACjC,IAAI,CAACkE,KAAK,CAACoC,IAAI,CACpD,UAACC,IAAI;QAAA,OAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,sBAAsB;MAAA,CAC9C,CAAC,qBAFwB8B,sBAAA,CAErB,CAAC,CAAC;MAEN,IAAIG,gBAAgB,EAAE;QACpB,MAAMA,gBAAgB,CAAC;UAAED,SAAS,EAAED;QAAc,CAAC,CAAC;MACtD;MAEA1E,MAAM,CAACxB,kBAAkB,CAACM,eAAe,CAAC,CAACkC,gBAAgB,CAAC,CAAC;IAC/D,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}