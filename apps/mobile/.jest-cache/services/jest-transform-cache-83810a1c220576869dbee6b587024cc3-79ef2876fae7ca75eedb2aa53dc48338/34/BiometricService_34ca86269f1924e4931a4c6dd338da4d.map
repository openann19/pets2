{"version":3,"names":["LocalAuthentication","_interopRequireWildcard","require","SecureStore","_core","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","BiometricService","_classCallCheck2","_createClass2","key","value","_checkBiometricSupport","_asyncToGenerator2","hasHardware","hasHardwareAsync","isEnrolled","isEnrolledAsync","supportedTypes","supportedAuthenticationTypesAsync","capabilities","logger","info","length","error","checkBiometricSupport","apply","arguments","_authenticate","reason","success","result","authenticateAsync","promptMessage","undefined","fallbackLabel","cancelLabel","disableDeviceFallback","biometricType","getBiometricType","warn","Error","message","authenticate","_x","_enableBiometric","authResult","setItemAsync","BIOMETRIC_ENABLED_KEY","BIOMETRIC_TYPE_KEY","type","enableBiometric","_disableBiometric","deleteItemAsync","disableBiometric","_isBiometricEnabled","enabled","getItemAsync","isBiometricEnabled","includes","AuthenticationType","FACIAL_RECOGNITION","FINGERPRINT","IRIS","getBiometricTypeName","_encryptWithBiometric","data","requireAuthentication","authenticationPrompt","showPrompt","encryptWithBiometric","_x2","_x3","_decryptWithBiometric","decryptedData","decryptWithBiometric","_x4","_removeBiometricData","removeBiometricData","_x5","biometricService","exports","_default"],"sources":["BiometricService.ts"],"sourcesContent":["/**\n * Biometric Authentication Service for PawfectMatch Mobile App\n * Handles biometric authentication (FaceID, TouchID, Fingerprint)\n */\nimport * as LocalAuthentication from \"expo-local-authentication\";\nimport * as SecureStore from \"expo-secure-store\";\nimport { logger } from \"@pawfectmatch/core\";\n\nexport interface BiometricAuthResult {\n  success: boolean;\n  error?: string;\n  biometricType?: \"fingerprint\" | \"facial\" | \"iris\" | \"unknown\";\n}\n\nexport interface BiometricCapabilities {\n  hasHardware: boolean;\n  isEnrolled: boolean;\n  supportedTypes: LocalAuthentication.AuthenticationType[];\n}\n\nclass BiometricService {\n  private static readonly BIOMETRIC_ENABLED_KEY = \"biometric_enabled\";\n  private static readonly BIOMETRIC_TYPE_KEY = \"biometric_type\";\n\n  /**\n   * Check if device supports biometric authentication\n   */\n  async checkBiometricSupport(): Promise<BiometricCapabilities> {\n    try {\n      const hasHardware = await LocalAuthentication.hasHardwareAsync();\n      const isEnrolled = await LocalAuthentication.isEnrolledAsync();\n      const supportedTypes =\n        await LocalAuthentication.supportedAuthenticationTypesAsync();\n\n      const capabilities: BiometricCapabilities = {\n        hasHardware,\n        isEnrolled,\n        supportedTypes,\n      };\n\n      logger.info(\"Biometric capabilities checked\", {\n        hasHardware,\n        isEnrolled,\n        supportedTypes: supportedTypes.length,\n      });\n\n      return capabilities;\n    } catch (error) {\n      logger.error(\"Failed to check biometric support\", { error });\n      return {\n        hasHardware: false,\n        isEnrolled: false,\n        supportedTypes: [],\n      };\n    }\n  }\n\n  /**\n   * Authenticate using biometrics\n   */\n  async authenticate(reason?: string): Promise<BiometricAuthResult> {\n    try {\n      const capabilities = await this.checkBiometricSupport();\n\n      if (!capabilities.hasHardware) {\n        return {\n          success: false,\n          error: \"Biometric authentication not supported on this device\",\n        };\n      }\n\n      if (!capabilities.isEnrolled) {\n        return {\n          success: false,\n          error: \"No biometric authentication methods enrolled\",\n        };\n      }\n\n      const result = await LocalAuthentication.authenticateAsync({\n        promptMessage:\n          reason !== undefined && reason !== \"\"\n            ? reason\n            : \"Authenticate to access PawfectMatch\",\n        fallbackLabel: \"Use PIN\",\n        cancelLabel: \"Cancel\",\n        disableDeviceFallback: false,\n      });\n\n      const biometricType = this.getBiometricType(capabilities.supportedTypes);\n\n      if (result.success) {\n        logger.info(\"Biometric authentication successful\", { biometricType });\n        return {\n          success: true,\n          biometricType,\n        };\n      } else {\n        const error =\n          result.error !== \"\" ? result.error : \"Authentication failed\";\n        logger.warn(\"Biometric authentication failed\", {\n          error,\n          biometricType,\n        });\n        return {\n          success: false,\n          error,\n          biometricType,\n        };\n      }\n    } catch (error) {\n      logger.error(\"Biometric authentication error\", { error });\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : \"Unknown error occurred\",\n      };\n    }\n  }\n\n  /**\n   * Enable biometric authentication for the app\n   */\n  async enableBiometric(): Promise<boolean> {\n    try {\n      // First authenticate to verify biometrics work\n      const authResult = await this.authenticate(\n        \"Enable biometric authentication\",\n      );\n\n      if (!authResult.success) {\n        return false;\n      }\n\n      // Store that biometric is enabled\n      await SecureStore.setItemAsync(\n        BiometricService.BIOMETRIC_ENABLED_KEY,\n        \"true\",\n      );\n      await SecureStore.setItemAsync(\n        BiometricService.BIOMETRIC_TYPE_KEY,\n        authResult.biometricType !== undefined\n          ? authResult.biometricType\n          : \"unknown\",\n      );\n\n      logger.info(\"Biometric authentication enabled\", {\n        type: authResult.biometricType,\n      });\n      return true;\n    } catch (error) {\n      logger.error(\"Failed to enable biometric authentication\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Disable biometric authentication for the app\n   */\n  async disableBiometric(): Promise<void> {\n    try {\n      await SecureStore.deleteItemAsync(BiometricService.BIOMETRIC_ENABLED_KEY);\n      await SecureStore.deleteItemAsync(BiometricService.BIOMETRIC_TYPE_KEY);\n      logger.info(\"Biometric authentication disabled\");\n    } catch (error) {\n      logger.error(\"Failed to disable biometric authentication\", { error });\n    }\n  }\n\n  /**\n   * Check if biometric authentication is enabled for the app\n   */\n  async isBiometricEnabled(): Promise<boolean> {\n    try {\n      const enabled = await SecureStore.getItemAsync(\n        BiometricService.BIOMETRIC_ENABLED_KEY,\n      );\n      return enabled === \"true\";\n    } catch (error) {\n      logger.error(\"Failed to check biometric status\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Get the type of biometric authentication available\n   */\n  private getBiometricType(\n    supportedTypes: LocalAuthentication.AuthenticationType[],\n  ): \"fingerprint\" | \"facial\" | \"iris\" | \"unknown\" {\n    if (\n      supportedTypes.includes(\n        LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION,\n      )\n    ) {\n      return \"facial\";\n    }\n    if (\n      supportedTypes.includes(\n        LocalAuthentication.AuthenticationType.FINGERPRINT,\n      )\n    ) {\n      return \"fingerprint\";\n    }\n    if (supportedTypes.includes(LocalAuthentication.AuthenticationType.IRIS)) {\n      return \"iris\";\n    }\n    return \"unknown\";\n  }\n\n  /**\n   * Get user-friendly biometric type name\n   */\n  getBiometricTypeName(type?: string): string {\n    switch (type) {\n      case \"facial\":\n        return \"Face ID\";\n      case \"fingerprint\":\n        return \"Touch ID\";\n      case \"iris\":\n        return \"Iris Scan\";\n      default:\n        return \"Biometric Authentication\";\n    }\n  }\n\n  /**\n   * Encrypt sensitive data with biometric protection\n   * Uses SecureStore with biometric authentication for production-grade encryption\n   */\n  async encryptWithBiometric(data: string, key: string): Promise<void> {\n    try {\n      // Authenticate first\n      const authResult = await this.authenticate(\"Encrypt sensitive data\");\n      if (!authResult.success) {\n        throw new Error(\"Biometric authentication required for encryption\");\n      }\n\n      // Store securely in keychain with biometric protection\n      await SecureStore.setItemAsync(key, data, {\n        requireAuthentication: true,\n        authenticationPrompt: \"Authenticate to access encrypted data\",\n        showPrompt: true,\n      });\n\n      logger.info(\"Data encrypted securely with biometric authentication\", {\n        key,\n        biometricType: authResult.biometricType,\n      });\n    } catch (error) {\n      logger.error(\"Failed to encrypt data with biometric protection\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Decrypt data protected by biometrics\n   */\n  async decryptWithBiometric(key: string): Promise<string | null> {\n    try {\n      // First authenticate\n      const authResult = await this.authenticate(\"Decrypt sensitive data\");\n      if (!authResult.success) {\n        throw new Error(\"Biometric authentication required\");\n      }\n\n      // Retrieve from secure store (triggers biometric prompt)\n      const decryptedData = await SecureStore.getItemAsync(key, {\n        requireAuthentication: true,\n        authenticationPrompt: \"Authenticate to decrypt sensitive data\",\n        showPrompt: true,\n      });\n\n      logger.info(\"Data decrypted successfully with biometric authentication\", {\n        key,\n        biometricType: authResult.biometricType,\n      });\n\n      return decryptedData;\n    } catch (error) {\n      logger.error(\"Failed to decrypt biometric data\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Remove encrypted data from biometric-protected storage\n   */\n  async removeBiometricData(key: string): Promise<void> {\n    try {\n      await SecureStore.deleteItemAsync(key);\n      logger.info(\"Biometric-protected data removed\", { key });\n    } catch (error) {\n      logger.error(\"Failed to remove biometric data\", { error });\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const biometricService = new BiometricService();\nexport default biometricService;\n"],"mappings":"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","ignoreList":[]}