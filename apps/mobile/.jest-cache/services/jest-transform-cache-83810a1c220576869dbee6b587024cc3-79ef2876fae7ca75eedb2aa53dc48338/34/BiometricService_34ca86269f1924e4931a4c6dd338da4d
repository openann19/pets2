9c4fea918713134463f6077e6fa0f880
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.biometricService = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var LocalAuthentication = _interopRequireWildcard(require("expo-local-authentication"));
var SecureStore = _interopRequireWildcard(require("expo-secure-store"));
var _core = require("@pawfectmatch/core");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var BiometricService = function () {
  function BiometricService() {
    (0, _classCallCheck2.default)(this, BiometricService);
  }
  return (0, _createClass2.default)(BiometricService, [{
    key: "checkBiometricSupport",
    value: (function () {
      var _checkBiometricSupport = (0, _asyncToGenerator2.default)(function* () {
        try {
          var hasHardware = yield LocalAuthentication.hasHardwareAsync();
          var isEnrolled = yield LocalAuthentication.isEnrolledAsync();
          var supportedTypes = yield LocalAuthentication.supportedAuthenticationTypesAsync();
          var capabilities = {
            hasHardware: hasHardware,
            isEnrolled: isEnrolled,
            supportedTypes: supportedTypes
          };
          _core.logger.info("Biometric capabilities checked", {
            hasHardware: hasHardware,
            isEnrolled: isEnrolled,
            supportedTypes: supportedTypes.length
          });
          return capabilities;
        } catch (error) {
          _core.logger.error("Failed to check biometric support", {
            error: error
          });
          return {
            hasHardware: false,
            isEnrolled: false,
            supportedTypes: []
          };
        }
      });
      function checkBiometricSupport() {
        return _checkBiometricSupport.apply(this, arguments);
      }
      return checkBiometricSupport;
    }())
  }, {
    key: "authenticate",
    value: (function () {
      var _authenticate = (0, _asyncToGenerator2.default)(function* (reason) {
        try {
          var capabilities = yield this.checkBiometricSupport();
          if (!capabilities.hasHardware) {
            return {
              success: false,
              error: "Biometric authentication not supported on this device"
            };
          }
          if (!capabilities.isEnrolled) {
            return {
              success: false,
              error: "No biometric authentication methods enrolled"
            };
          }
          var result = yield LocalAuthentication.authenticateAsync({
            promptMessage: reason !== undefined && reason !== "" ? reason : "Authenticate to access PawfectMatch",
            fallbackLabel: "Use PIN",
            cancelLabel: "Cancel",
            disableDeviceFallback: false
          });
          var biometricType = this.getBiometricType(capabilities.supportedTypes);
          if (result.success) {
            _core.logger.info("Biometric authentication successful", {
              biometricType: biometricType
            });
            return {
              success: true,
              biometricType: biometricType
            };
          } else {
            var error = result.error !== "" ? result.error : "Authentication failed";
            _core.logger.warn("Biometric authentication failed", {
              error: error,
              biometricType: biometricType
            });
            return {
              success: false,
              error: error,
              biometricType: biometricType
            };
          }
        } catch (error) {
          _core.logger.error("Biometric authentication error", {
            error: error
          });
          return {
            success: false,
            error: error instanceof Error ? error.message : "Unknown error occurred"
          };
        }
      });
      function authenticate(_x) {
        return _authenticate.apply(this, arguments);
      }
      return authenticate;
    }())
  }, {
    key: "enableBiometric",
    value: (function () {
      var _enableBiometric = (0, _asyncToGenerator2.default)(function* () {
        try {
          var authResult = yield this.authenticate("Enable biometric authentication");
          if (!authResult.success) {
            return false;
          }
          yield SecureStore.setItemAsync(BiometricService.BIOMETRIC_ENABLED_KEY, "true");
          yield SecureStore.setItemAsync(BiometricService.BIOMETRIC_TYPE_KEY, authResult.biometricType !== undefined ? authResult.biometricType : "unknown");
          _core.logger.info("Biometric authentication enabled", {
            type: authResult.biometricType
          });
          return true;
        } catch (error) {
          _core.logger.error("Failed to enable biometric authentication", {
            error: error
          });
          return false;
        }
      });
      function enableBiometric() {
        return _enableBiometric.apply(this, arguments);
      }
      return enableBiometric;
    }())
  }, {
    key: "disableBiometric",
    value: (function () {
      var _disableBiometric = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield SecureStore.deleteItemAsync(BiometricService.BIOMETRIC_ENABLED_KEY);
          yield SecureStore.deleteItemAsync(BiometricService.BIOMETRIC_TYPE_KEY);
          _core.logger.info("Biometric authentication disabled");
        } catch (error) {
          _core.logger.error("Failed to disable biometric authentication", {
            error: error
          });
        }
      });
      function disableBiometric() {
        return _disableBiometric.apply(this, arguments);
      }
      return disableBiometric;
    }())
  }, {
    key: "isBiometricEnabled",
    value: (function () {
      var _isBiometricEnabled = (0, _asyncToGenerator2.default)(function* () {
        try {
          var enabled = yield SecureStore.getItemAsync(BiometricService.BIOMETRIC_ENABLED_KEY);
          return enabled === "true";
        } catch (error) {
          _core.logger.error("Failed to check biometric status", {
            error: error
          });
          return false;
        }
      });
      function isBiometricEnabled() {
        return _isBiometricEnabled.apply(this, arguments);
      }
      return isBiometricEnabled;
    }())
  }, {
    key: "getBiometricType",
    value: function getBiometricType(supportedTypes) {
      if (supportedTypes.includes(LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION)) {
        return "facial";
      }
      if (supportedTypes.includes(LocalAuthentication.AuthenticationType.FINGERPRINT)) {
        return "fingerprint";
      }
      if (supportedTypes.includes(LocalAuthentication.AuthenticationType.IRIS)) {
        return "iris";
      }
      return "unknown";
    }
  }, {
    key: "getBiometricTypeName",
    value: function getBiometricTypeName(type) {
      switch (type) {
        case "facial":
          return "Face ID";
        case "fingerprint":
          return "Touch ID";
        case "iris":
          return "Iris Scan";
        default:
          return "Biometric Authentication";
      }
    }
  }, {
    key: "encryptWithBiometric",
    value: (function () {
      var _encryptWithBiometric = (0, _asyncToGenerator2.default)(function* (data, key) {
        try {
          var authResult = yield this.authenticate("Encrypt sensitive data");
          if (!authResult.success) {
            throw new Error("Biometric authentication required for encryption");
          }
          yield SecureStore.setItemAsync(key, data, {
            requireAuthentication: true,
            authenticationPrompt: "Authenticate to access encrypted data",
            showPrompt: true
          });
          _core.logger.info("Data encrypted securely with biometric authentication", {
            key: key,
            biometricType: authResult.biometricType
          });
        } catch (error) {
          _core.logger.error("Failed to encrypt data with biometric protection", {
            error: error
          });
          throw error;
        }
      });
      function encryptWithBiometric(_x2, _x3) {
        return _encryptWithBiometric.apply(this, arguments);
      }
      return encryptWithBiometric;
    }())
  }, {
    key: "decryptWithBiometric",
    value: (function () {
      var _decryptWithBiometric = (0, _asyncToGenerator2.default)(function* (key) {
        try {
          var authResult = yield this.authenticate("Decrypt sensitive data");
          if (!authResult.success) {
            throw new Error("Biometric authentication required");
          }
          var decryptedData = yield SecureStore.getItemAsync(key, {
            requireAuthentication: true,
            authenticationPrompt: "Authenticate to decrypt sensitive data",
            showPrompt: true
          });
          _core.logger.info("Data decrypted successfully with biometric authentication", {
            key: key,
            biometricType: authResult.biometricType
          });
          return decryptedData;
        } catch (error) {
          _core.logger.error("Failed to decrypt biometric data", {
            error: error
          });
          throw error;
        }
      });
      function decryptWithBiometric(_x4) {
        return _decryptWithBiometric.apply(this, arguments);
      }
      return decryptWithBiometric;
    }())
  }, {
    key: "removeBiometricData",
    value: (function () {
      var _removeBiometricData = (0, _asyncToGenerator2.default)(function* (key) {
        try {
          yield SecureStore.deleteItemAsync(key);
          _core.logger.info("Biometric-protected data removed", {
            key: key
          });
        } catch (error) {
          _core.logger.error("Failed to remove biometric data", {
            error: error
          });
          throw error;
        }
      });
      function removeBiometricData(_x5) {
        return _removeBiometricData.apply(this, arguments);
      }
      return removeBiometricData;
    }())
  }]);
}();
BiometricService.BIOMETRIC_ENABLED_KEY = "biometric_enabled";
BiometricService.BIOMETRIC_TYPE_KEY = "biometric_type";
var biometricService = exports.biometricService = new BiometricService();
var _default = exports.default = biometricService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,