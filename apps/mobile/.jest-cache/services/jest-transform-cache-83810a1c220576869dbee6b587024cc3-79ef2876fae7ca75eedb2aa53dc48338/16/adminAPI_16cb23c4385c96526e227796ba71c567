f9b3be1eba2a8333481a8cc2866f4e89
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._adminAPI = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _core = require("@pawfectmatch/core");
var _process$env$EXPO_PUB;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var BASE_URL = (_process$env$EXPO_PUB = process.env["EXPO_PUBLIC_API_URL"]) != null ? _process$env$EXPO_PUB : "http://localhost:3001/api";
var AdminAPIService = function () {
  function AdminAPIService() {
    (0, _classCallCheck2.default)(this, AdminAPIService);
  }
  return (0, _createClass2.default)(AdminAPIService, [{
    key: "request",
    value: function () {
      var _request = (0, _asyncToGenerator2.default)(function* (endpoint) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var url = `${BASE_URL}${endpoint}`;
        try {
          var response = yield fetch(url, _objectSpread({
            headers: _objectSpread({
              "Content-Type": "application/json"
            }, options.headers)
          }, options));
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${String(response.status)}`);
          }
          return yield response.json();
        } catch (error) {
          _core.logger.error("Admin API request failed", {
            endpoint: endpoint,
            error: error
          });
          throw error;
        }
      });
      function request(_x) {
        return _request.apply(this, arguments);
      }
      return request;
    }()
  }, {
    key: "getUsers",
    value: function () {
      var _getUsers = (0, _asyncToGenerator2.default)(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var queryParams = new URLSearchParams();
        if (params.page !== null && params.page !== undefined) queryParams.append("page", String(params.page));
        if (params.limit !== null && params.limit !== undefined) queryParams.append("limit", String(params.limit));
        if (params.search !== null && params.search !== undefined && params.search !== "") queryParams.append("search", params.search);
        if (params.status !== null && params.status !== undefined && params.status !== "") queryParams.append("status", params.status);
        if (params.role !== null && params.role !== undefined && params.role !== "") queryParams.append("role", params.role);
        if (params.verified !== null && params.verified !== undefined && params.verified !== "") queryParams.append("verified", params.verified);
        return yield this.request(`/admin/users?${queryParams.toString()}`);
      });
      function getUsers() {
        return _getUsers.apply(this, arguments);
      }
      return getUsers;
    }()
  }, {
    key: "getUserDetails",
    value: function () {
      var _getUserDetails = (0, _asyncToGenerator2.default)(function* (userId) {
        return yield this.request(`/admin/users/${userId}`);
      });
      function getUserDetails(_x2) {
        return _getUserDetails.apply(this, arguments);
      }
      return getUserDetails;
    }()
  }, {
    key: "suspendUser",
    value: function () {
      var _suspendUser = (0, _asyncToGenerator2.default)(function* (userId, reason, duration) {
        return yield this.request(`/admin/users/${userId}/suspend`, {
          method: "PUT",
          body: JSON.stringify({
            reason: reason,
            duration: duration
          })
        });
      });
      function suspendUser(_x3, _x4, _x5) {
        return _suspendUser.apply(this, arguments);
      }
      return suspendUser;
    }()
  }, {
    key: "banUser",
    value: function () {
      var _banUser = (0, _asyncToGenerator2.default)(function* (userId, reason) {
        return yield this.request(`/admin/users/${userId}/ban`, {
          method: "PUT",
          body: JSON.stringify({
            reason: reason
          })
        });
      });
      function banUser(_x6, _x7) {
        return _banUser.apply(this, arguments);
      }
      return banUser;
    }()
  }, {
    key: "activateUser",
    value: function () {
      var _activateUser = (0, _asyncToGenerator2.default)(function* (userId, reason) {
        return yield this.request(`/admin/users/${userId}/activate`, {
          method: "PUT",
          body: JSON.stringify({
            reason: reason
          })
        });
      });
      function activateUser(_x8, _x9) {
        return _activateUser.apply(this, arguments);
      }
      return activateUser;
    }()
  }, {
    key: "getChats",
    value: function () {
      var _getChats = (0, _asyncToGenerator2.default)(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var queryParams = new URLSearchParams();
        if (params.page !== null && params.page !== undefined) queryParams.append("page", String(params.page));
        if (params.limit !== null && params.limit !== undefined) queryParams.append("limit", String(params.limit));
        if (params.status !== null && params.status !== undefined && params.status !== "") queryParams.append("status", params.status);
        return yield this.request(`/admin/chats?${queryParams.toString()}`);
      });
      function getChats() {
        return _getChats.apply(this, arguments);
      }
      return getChats;
    }()
  }, {
    key: "getChatDetails",
    value: function () {
      var _getChatDetails = (0, _asyncToGenerator2.default)(function* (chatId) {
        return yield this.request(`/admin/chats/${chatId}`);
      });
      function getChatDetails(_x0) {
        return _getChatDetails.apply(this, arguments);
      }
      return getChatDetails;
    }()
  }, {
    key: "blockChat",
    value: function () {
      var _blockChat = (0, _asyncToGenerator2.default)(function* (chatId, reason, duration) {
        return yield this.request(`/admin/chats/${chatId}/block`, {
          method: "PUT",
          body: JSON.stringify({
            reason: reason,
            duration: duration
          })
        });
      });
      function blockChat(_x1, _x10, _x11) {
        return _blockChat.apply(this, arguments);
      }
      return blockChat;
    }()
  }, {
    key: "unblockChat",
    value: function () {
      var _unblockChat = (0, _asyncToGenerator2.default)(function* (chatId, reason) {
        return yield this.request(`/admin/chats/${chatId}/unblock`, {
          method: "PUT",
          body: JSON.stringify({
            reason: reason
          })
        });
      });
      function unblockChat(_x12, _x13) {
        return _unblockChat.apply(this, arguments);
      }
      return unblockChat;
    }()
  }, {
    key: "deleteMessage",
    value: function () {
      var _deleteMessage = (0, _asyncToGenerator2.default)(function* (chatId, messageId, reason) {
        return yield this.request(`/admin/chats/${chatId}/messages/${messageId}`, {
          method: "DELETE",
          body: JSON.stringify({
            reason: reason
          })
        });
      });
      function deleteMessage(_x14, _x15, _x16) {
        return _deleteMessage.apply(this, arguments);
      }
      return deleteMessage;
    }()
  }, {
    key: "getUploads",
    value: function () {
      var _getUploads = (0, _asyncToGenerator2.default)(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var queryParams = new URLSearchParams();
        if (params.page !== null && params.page !== undefined) queryParams.append("page", String(params.page));
        if (params.limit !== null && params.limit !== undefined) queryParams.append("limit", String(params.limit));
        if (params.status !== null && params.status !== undefined && params.status !== "") queryParams.append("status", params.status);
        if (params.filter !== undefined) queryParams.append("filter", params.filter);
        if (params.search !== undefined && params.search !== "") queryParams.append("search", params.search);
        return yield this.request(`/admin/uploads?${queryParams.toString()}`);
      });
      function getUploads() {
        return _getUploads.apply(this, arguments);
      }
      return getUploads;
    }()
  }, {
    key: "getUploadDetails",
    value: function () {
      var _getUploadDetails = (0, _asyncToGenerator2.default)(function* (uploadId) {
        return yield this.request(`/admin/uploads/${uploadId}`);
      });
      function getUploadDetails(_x17) {
        return _getUploadDetails.apply(this, arguments);
      }
      return getUploadDetails;
    }()
  }, {
    key: "approveUpload",
    value: function () {
      var _approveUpload = (0, _asyncToGenerator2.default)(function* (uploadId, notes) {
        return yield this.request(`/admin/uploads/${uploadId}/approve`, {
          method: "PUT",
          body: JSON.stringify({
            notes: notes
          })
        });
      });
      function approveUpload(_x18, _x19) {
        return _approveUpload.apply(this, arguments);
      }
      return approveUpload;
    }()
  }, {
    key: "rejectUpload",
    value: function () {
      var _rejectUpload = (0, _asyncToGenerator2.default)(function* (uploadId, reason, notes) {
        return yield this.request(`/admin/uploads/${uploadId}/reject`, {
          method: "PUT",
          body: JSON.stringify({
            reason: reason,
            notes: notes
          })
        });
      });
      function rejectUpload(_x20, _x21, _x22) {
        return _rejectUpload.apply(this, arguments);
      }
      return rejectUpload;
    }()
  }, {
    key: "deleteUpload",
    value: function () {
      var _deleteUpload = (0, _asyncToGenerator2.default)(function* (uploadId, reason) {
        return yield this.request(`/admin/uploads/${uploadId}`, {
          method: "DELETE",
          body: JSON.stringify({
            reason: reason
          })
        });
      });
      function deleteUpload(_x23, _x24) {
        return _deleteUpload.apply(this, arguments);
      }
      return deleteUpload;
    }()
  }, {
    key: "getVerifications",
    value: function () {
      var _getVerifications = (0, _asyncToGenerator2.default)(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var queryParams = new URLSearchParams();
        if (params.page !== null && params.page !== undefined) queryParams.append("page", String(params.page));
        if (params.limit !== null && params.limit !== undefined) queryParams.append("limit", String(params.limit));
        if (params.status !== null && params.status !== undefined && params.status !== "") queryParams.append("status", params.status);
        return yield this.request(`/admin/verifications/pending?${queryParams.toString()}`);
      });
      function getVerifications() {
        return _getVerifications.apply(this, arguments);
      }
      return getVerifications;
    }()
  }, {
    key: "getVerificationDetails",
    value: function () {
      var _getVerificationDetails = (0, _asyncToGenerator2.default)(function* (verificationId) {
        return yield this.request(`/admin/verifications/${verificationId}`);
      });
      function getVerificationDetails(_x25) {
        return _getVerificationDetails.apply(this, arguments);
      }
      return getVerificationDetails;
    }()
  }, {
    key: "approveVerification",
    value: function () {
      var _approveVerification = (0, _asyncToGenerator2.default)(function* (verificationId, notes) {
        return yield this.request(`/admin/verifications/${verificationId}/approve`, {
          method: "PUT",
          body: JSON.stringify({
            notes: notes
          })
        });
      });
      function approveVerification(_x26, _x27) {
        return _approveVerification.apply(this, arguments);
      }
      return approveVerification;
    }()
  }, {
    key: "rejectVerification",
    value: function () {
      var _rejectVerification = (0, _asyncToGenerator2.default)(function* (verificationId, reason, notes) {
        return yield this.request(`/admin/verifications/${verificationId}/reject`, {
          method: "PUT",
          body: JSON.stringify({
            reason: reason,
            notes: notes
          })
        });
      });
      function rejectVerification(_x28, _x29, _x30) {
        return _rejectVerification.apply(this, arguments);
      }
      return rejectVerification;
    }()
  }, {
    key: "getAnalytics",
    value: function () {
      var _getAnalytics = (0, _asyncToGenerator2.default)(function* (params) {
        var queryParams = (params == null ? void 0 : params.period) !== undefined && params.period !== "" ? `?period=${params.period}` : "";
        return yield this.request(`/admin/analytics${queryParams}`);
      });
      function getAnalytics(_x31) {
        return _getAnalytics.apply(this, arguments);
      }
      return getAnalytics;
    }()
  }, {
    key: "getSystemHealth",
    value: function () {
      var _getSystemHealth = (0, _asyncToGenerator2.default)(function* () {
        return yield this.request("/admin/system/health");
      });
      function getSystemHealth() {
        return _getSystemHealth.apply(this, arguments);
      }
      return getSystemHealth;
    }()
  }, {
    key: "getAuditLogs",
    value: function () {
      var _getAuditLogs = (0, _asyncToGenerator2.default)(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var queryParams = new URLSearchParams();
        if (params.page !== null && params.page !== undefined) queryParams.append("page", String(params.page));
        if (params.limit !== null && params.limit !== undefined) queryParams.append("limit", String(params.limit));
        return yield this.request(`/admin/security/audit-logs?${queryParams.toString()}`);
      });
      function getAuditLogs() {
        return _getAuditLogs.apply(this, arguments);
      }
      return getAuditLogs;
    }()
  }, {
    key: "getSecurityAlerts",
    value: function () {
      var _getSecurityAlerts = (0, _asyncToGenerator2.default)(function* (params) {
        var queryParams = new URLSearchParams();
        if ((params == null ? void 0 : params.page) !== undefined) queryParams.append("page", String(params.page));
        if ((params == null ? void 0 : params.limit) !== undefined) queryParams.append("limit", String(params.limit));
        if ((params == null ? void 0 : params.sort) !== undefined && params.sort !== "") queryParams.append("sort", params.sort);
        if ((params == null ? void 0 : params.order) !== undefined && params.order !== "") queryParams.append("order", params.order);
        var query = queryParams.toString();
        return yield this.request(`/admin/security/alerts${query !== "" ? `?${query}` : ""}`);
      });
      function getSecurityAlerts(_x32) {
        return _getSecurityAlerts.apply(this, arguments);
      }
      return getSecurityAlerts;
    }()
  }, {
    key: "getChatMessages",
    value: function () {
      var _getChatMessages = (0, _asyncToGenerator2.default)(function* (params) {
        var queryParams = new URLSearchParams();
        if (params.page !== undefined) queryParams.append("page", String(params.page));
        if (params.limit !== undefined) queryParams.append("limit", String(params.limit));
        if (params.filter !== undefined) queryParams.append("filter", params.filter);
        if (params.search !== undefined && params.search !== "") queryParams.append("search", params.search);
        return yield this.request(`/admin/chats/messages?${queryParams.toString()}`);
      });
      function getChatMessages(_x33) {
        return _getChatMessages.apply(this, arguments);
      }
      return getChatMessages;
    }()
  }, {
    key: "getSubscriptions",
    value: function () {
      var _getSubscriptions = (0, _asyncToGenerator2.default)(function* (params) {
        var queryParams = new URLSearchParams();
        if ((params == null ? void 0 : params.page) !== undefined) queryParams.append("page", String(params.page));
        if ((params == null ? void 0 : params.limit) !== undefined) queryParams.append("limit", String(params.limit));
        if ((params == null ? void 0 : params.sort) !== undefined && params.sort !== "") queryParams.append("sort", params.sort);
        if ((params == null ? void 0 : params.order) !== undefined && params.order !== "") queryParams.append("order", params.order);
        var query = queryParams.toString();
        return yield this.request(`/admin/subscriptions${query !== "" ? `?${query}` : ""}`);
      });
      function getSubscriptions(_x34) {
        return _getSubscriptions.apply(this, arguments);
      }
      return getSubscriptions;
    }()
  }, {
    key: "getBillingMetrics",
    value: function () {
      var _getBillingMetrics = (0, _asyncToGenerator2.default)(function* () {
        return yield this.request("/admin/billing/metrics");
      });
      function getBillingMetrics() {
        return _getBillingMetrics.apply(this, arguments);
      }
      return getBillingMetrics;
    }()
  }, {
    key: "getSecurityMetrics",
    value: function () {
      var _getSecurityMetrics = (0, _asyncToGenerator2.default)(function* () {
        return yield this.request("/admin/security/metrics");
      });
      function getSecurityMetrics() {
        return _getSecurityMetrics.apply(this, arguments);
      }
      return getSecurityMetrics;
    }()
  }, {
    key: "moderateMessage",
    value: function () {
      var _moderateMessage = (0, _asyncToGenerator2.default)(function* (params) {
        return yield this.request(`/admin/chats/messages/${params.messageId}/moderate`, {
          method: "POST",
          body: JSON.stringify({
            action: params.action
          })
        });
      });
      function moderateMessage(_x35) {
        return _moderateMessage.apply(this, arguments);
      }
      return moderateMessage;
    }()
  }, {
    key: "cancelSubscription",
    value: function () {
      var _cancelSubscription = (0, _asyncToGenerator2.default)(function* (params) {
        return yield this.request(`/admin/users/${params.userId}/cancel-subscription`, {
          method: "PUT",
          body: JSON.stringify({
            reason: params.reason
          })
        });
      });
      function cancelSubscription(_x36) {
        return _cancelSubscription.apply(this, arguments);
      }
      return cancelSubscription;
    }()
  }, {
    key: "reactivateSubscription",
    value: function () {
      var _reactivateSubscription = (0, _asyncToGenerator2.default)(function* (params) {
        return yield this.request(`/admin/users/${params.userId}/reactivate-subscription`, {
          method: "PUT"
        });
      });
      function reactivateSubscription(_x37) {
        return _reactivateSubscription.apply(this, arguments);
      }
      return reactivateSubscription;
    }()
  }, {
    key: "resolveSecurityAlert",
    value: function () {
      var _resolveSecurityAlert = (0, _asyncToGenerator2.default)(function* (params) {
        return yield this.request(`/admin/security/alerts/${params.alertId}/resolve`, {
          method: "PUT",
          body: JSON.stringify({
            action: params.action,
            notes: params.notes
          })
        });
      });
      function resolveSecurityAlert(_x38) {
        return _resolveSecurityAlert.apply(this, arguments);
      }
      return resolveSecurityAlert;
    }()
  }, {
    key: "blockIPAddress",
    value: function () {
      var _blockIPAddress = (0, _asyncToGenerator2.default)(function* (params) {
        return yield this.request("/admin/security/block-ip", {
          method: "POST",
          body: JSON.stringify(params)
        });
      });
      function blockIPAddress(_x39) {
        return _blockIPAddress.apply(this, arguments);
      }
      return blockIPAddress;
    }()
  }, {
    key: "getSafetyModerationQueue",
    value: function () {
      var _getSafetyModerationQueue = (0, _asyncToGenerator2.default)(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var queryParams = new URLSearchParams();
        if (params.status) queryParams.append("status", params.status);
        if (params.page) queryParams.append("page", String(params.page));
        if (params.limit) queryParams.append("limit", String(params.limit));
        return yield this.request(`/admin/safety-moderation/queue?${queryParams.toString()}`);
      });
      function getSafetyModerationQueue() {
        return _getSafetyModerationQueue.apply(this, arguments);
      }
      return getSafetyModerationQueue;
    }()
  }, {
    key: "getSafetyModerationDetails",
    value: function () {
      var _getSafetyModerationDetails = (0, _asyncToGenerator2.default)(function* (uploadId) {
        return yield this.request(`/admin/safety-moderation/uploads/${uploadId}`);
      });
      function getSafetyModerationDetails(_x40) {
        return _getSafetyModerationDetails.apply(this, arguments);
      }
      return getSafetyModerationDetails;
    }()
  }, {
    key: "moderateSafetyUpload",
    value: function () {
      var _moderateSafetyUpload = (0, _asyncToGenerator2.default)(function* (params) {
        return yield this.request(`/admin/safety-moderation/uploads/${params.uploadId}/moderate`, {
          method: "POST",
          body: JSON.stringify({
            decision: params.decision,
            notes: params.notes
          })
        });
      });
      function moderateSafetyUpload(_x41) {
        return _moderateSafetyUpload.apply(this, arguments);
      }
      return moderateSafetyUpload;
    }()
  }, {
    key: "batchModerateSafetyUploads",
    value: function () {
      var _batchModerateSafetyUploads = (0, _asyncToGenerator2.default)(function* (params) {
        return yield this.request(`/admin/safety-moderation/batch-moderate`, {
          method: "POST",
          body: JSON.stringify({
            uploadIds: params.uploadIds,
            decision: params.decision,
            notes: params.notes
          })
        });
      });
      function batchModerateSafetyUploads(_x42) {
        return _batchModerateSafetyUploads.apply(this, arguments);
      }
      return batchModerateSafetyUploads;
    }()
  }, {
    key: "getSafetyModerationStats",
    value: function () {
      var _getSafetyModerationStats = (0, _asyncToGenerator2.default)(function* () {
        return yield this.request(`/admin/safety-moderation/stats`);
      });
      function getSafetyModerationStats() {
        return _getSafetyModerationStats.apply(this, arguments);
      }
      return getSafetyModerationStats;
    }()
  }, {
    key: "getAnalysisDetails",
    value: function () {
      var _getAnalysisDetails = (0, _asyncToGenerator2.default)(function* (analysisId) {
        return yield this.request(`/admin/safety-moderation/analysis/${analysisId}`);
      });
      function getAnalysisDetails(_x43) {
        return _getAnalysisDetails.apply(this, arguments);
      }
      return getAnalysisDetails;
    }()
  }, {
    key: "moderateUpload",
    value: function () {
      var _moderateUpload = (0, _asyncToGenerator2.default)(function* (params) {
        var _params$reason;
        if (params.action === "approve" || params.action === "reject") {
          return yield this.request(`/admin/uploads/${params.uploadId}/moderate`, {
            method: "POST",
            body: JSON.stringify({
              action: params.action,
              reason: params.reason
            })
          });
        }
        var deleteResult = yield this.deleteUpload(params.uploadId, (_params$reason = params.reason) != null ? _params$reason : "Removed by admin");
        return _objectSpread(_objectSpread({}, deleteResult), {}, {
          data: {
            success: true,
            message: "Upload deleted"
          }
        });
      });
      function moderateUpload(_x44) {
        return _moderateUpload.apply(this, arguments);
      }
      return moderateUpload;
    }()
  }, {
    key: "getServicesStatus",
    value: function () {
      var _getServicesStatus = (0, _asyncToGenerator2.default)(function* () {
        return yield this.request("/admin/services/status");
      });
      function getServicesStatus() {
        return _getServicesStatus.apply(this, arguments);
      }
      return getServicesStatus;
    }()
  }, {
    key: "getServicesStats",
    value: function () {
      var _getServicesStats = (0, _asyncToGenerator2.default)(function* (params) {
        var queryParams = params != null && params.period ? `?period=${params.period}` : "";
        return yield this.request(`/admin/services/analytics${queryParams}`);
      });
      function getServicesStats(_x45) {
        return _getServicesStats.apply(this, arguments);
      }
      return getServicesStats;
    }()
  }, {
    key: "getCombinedStats",
    value: function () {
      var _getCombinedStats = (0, _asyncToGenerator2.default)(function* (params) {
        var queryParams = params != null && params.period ? `?period=${params.period}` : "";
        return yield this.request(`/admin/services/combined-stats${queryParams}`);
      });
      function getCombinedStats(_x46) {
        return _getCombinedStats.apply(this, arguments);
      }
      return getCombinedStats;
    }()
  }, {
    key: "toggleService",
    value: function () {
      var _toggleService = (0, _asyncToGenerator2.default)(function* (params) {
        return yield this.request("/admin/services/toggle", {
          method: "POST",
          body: JSON.stringify(params)
        });
      });
      function toggleService(_x47) {
        return _toggleService.apply(this, arguments);
      }
      return toggleService;
    }()
  }, {
    key: "bulkUserAction",
    value: function () {
      var _bulkUserAction = (0, _asyncToGenerator2.default)(function* (params) {
        return yield this.request("/admin/users/bulk-action", {
          method: "POST",
          body: JSON.stringify(params)
        });
      });
      function bulkUserAction(_x48) {
        return _bulkUserAction.apply(this, arguments);
      }
      return bulkUserAction;
    }()
  }]);
}();
var _adminAPI = exports._adminAPI = new AdminAPIService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,