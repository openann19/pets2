775091c4dbb8609fa901df93b3a6b9a7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorHandler = exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactNative = require("react-native");
var _logger = require("./logger");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ErrorHandler = function () {
  function ErrorHandler() {
    (0, _classCallCheck2.default)(this, ErrorHandler);
  }
  return (0, _createClass2.default)(ErrorHandler, [{
    key: "logError",
    value: function logError(error, context) {
      _logger.logger.error("Error occurred", {
        message: error.message,
        stack: error.stack,
        context: context,
        timestamp: new Date().toISOString()
      });
    }
  }, {
    key: "showUserNotification",
    value: function showUserNotification(title, message) {
      _reactNative.Alert.alert(title, message, [{
        text: "OK"
      }]);
    }
  }, {
    key: "getUserFriendlyMessage",
    value: function getUserFriendlyMessage(error) {
      var message = error.message.toLowerCase();
      if (message.includes("network") || message.includes("fetch")) {
        return "Please check your internet connection and try again.";
      }
      if (message.includes("unauthorized") || message.includes("401")) {
        return "Your session has expired. Please log in again.";
      }
      if (message.includes("forbidden") || message.includes("403")) {
        return "You don't have permission to perform this action.";
      }
      if (message.includes("not found") || message.includes("404")) {
        return "The requested resource was not found.";
      }
      if (message.includes("server") || message.includes("500")) {
        return "Server error occurred. Please try again later.";
      }
      if (error.message.length < 100 && !error.message.includes("Error:")) {
        return error.message;
      }
      return "An unexpected error occurred. Please try again.";
    }
  }, {
    key: "handleError",
    value: function handleError(error, context) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var _options$showNotifica = options.showNotification,
        showNotification = _options$showNotifica === void 0 ? true : _options$showNotifica,
        _options$logToService = options.logToService,
        logToService = _options$logToService === void 0 ? true : _options$logToService;
      if (logToService) {
        this.logError(error, context);
      }
      if (showNotification) {
        var userMessage = this.getUserFriendlyMessage(error);
        this.showUserNotification("Error", userMessage);
      }
    }
  }, {
    key: "handleApiError",
    value: function handleApiError(error, context, apiContext) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var enhancedContext = _objectSpread(_objectSpread({}, context), apiContext);
      this.handleError(error, enhancedContext, options);
    }
  }, {
    key: "handleNetworkError",
    value: function handleNetworkError(error, context) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var networkOptions = _objectSpread(_objectSpread({}, options), {}, {
        fallbackMessage: "Network error. Please check your connection and try again."
      });
      this.handleError(error, context, networkOptions);
    }
  }, {
    key: "handleValidationError",
    value: function handleValidationError(error, context) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var validationOptions = _objectSpread(_objectSpread({}, options), {}, {
        fallbackMessage: "Please check your input and try again."
      });
      this.handleError(error, context, validationOptions);
    }
  }, {
    key: "handleAuthError",
    value: function handleAuthError(error, context) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var authOptions = _objectSpread(_objectSpread({}, options), {}, {
        fallbackMessage: "Authentication failed. Please log in again."
      });
      this.handleError(error, context, authOptions);
    }
  }, {
    key: "handlePermissionError",
    value: function handlePermissionError(error, context) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var permissionOptions = _objectSpread(_objectSpread({}, options), {}, {
        fallbackMessage: "You don't have permission to perform this action."
      });
      this.handleError(error, context, permissionOptions);
    }
  }, {
    key: "createError",
    value: function createError(message, code) {
      var error = new Error(message);
      if (code !== undefined && code !== "") {
        error.code = code;
      }
      return error;
    }
  }, {
    key: "wrapAsync",
    value: (function () {
      var _wrapAsync = (0, _asyncToGenerator2.default)(function* (asyncFn, context) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        try {
          return yield asyncFn();
        } catch (error) {
          this.handleError(error instanceof Error ? error : new Error(String(error)), context, options);
          return null;
        }
      });
      function wrapAsync(_x, _x2) {
        return _wrapAsync.apply(this, arguments);
      }
      return wrapAsync;
    }())
  }]);
}();
var errorHandler = exports.errorHandler = new ErrorHandler();
var _default = exports.default = errorHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,