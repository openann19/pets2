04478e9cb0afe54ee3caad461f9999c5
"use strict";

_getJestObj().mock("../api", function () {
  return {
    request: jest.fn()
  };
});
_getJestObj().mock('expo-file-system', function () {
  return {
    uploadAsync: jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _chatService = require("../chatService");
var _api = require("../api");
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Chat Service', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('sendReaction', function () {
    it('should send reaction successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        messageId: 'msg-123',
        reactions: [{
          emoji: 'üòç',
          userId: 'user-1',
          timestamp: '2024-01-01T00:00:00Z'
        }]
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendReaction('match-123', 'msg-123', 'üòç');
      expect(response).toEqual(mockResponse);
      expect(_api.request).toHaveBeenCalledWith('/chat/reactions', {
        method: 'POST',
        body: {
          matchId: 'match-123',
          messageId: 'msg-123',
          reaction: 'üòç'
        }
      });
    }));
    it('should throw error on failed reaction', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Failed to send reaction'));
      yield expect(_chatService.chatService.sendReaction('match-123', 'msg-123', 'üòç')).rejects.toThrow('Failed to send reaction');
    }));
    it('should handle multiple reactions', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        messageId: 'msg-123',
        reactions: [{
          emoji: 'üòç',
          userId: 'user-1',
          timestamp: '2024-01-01T00:00:00Z'
        }, {
          emoji: '‚ù§Ô∏è',
          userId: 'user-2',
          timestamp: '2024-01-01T00:01:00Z'
        }]
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendReaction('match-123', 'msg-123', '‚ù§Ô∏è');
      expect(response.reactions).toHaveLength(2);
    }));
  });
  describe('sendAttachment', function () {
    it('should send image attachment', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['image data'], 'photo.jpg', {
        type: 'image/jpeg'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/photo.jpg',
        type: 'image'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'image',
        file: mockFile,
        name: 'photo.jpg'
      });
      expect(response).toEqual(mockResponse);
      expect(_api.request).toHaveBeenCalledWith('/chat/attachments', {
        method: 'POST',
        body: expect.any(FormData)
      });
    }));
    it('should send video attachment', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['video data'], 'video.mp4', {
        type: 'video/mp4'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/video.mp4',
        type: 'video'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'video',
        file: mockFile,
        name: 'video.mp4'
      });
      expect(response.type).toBe('video');
    }));
    it('should send file attachment', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['file data'], 'document.pdf', {
        type: 'application/pdf'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/document.pdf',
        type: 'file'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'file',
        file: mockFile,
        name: 'document.pdf'
      });
      expect(response.type).toBe('file');
    }));
    it('should handle attachment errors', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['data'], 'file.pdf', {
        type: 'application/pdf'
      });
      _api.request.mockRejectedValueOnce(new Error('Upload failed'));
      yield expect(_chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'file',
        file: mockFile
      })).rejects.toThrow('Upload failed');
    }));
  });
  describe('sendVoiceNote', function () {
    it('should send voice note with FormData (native)', (0, _asyncToGenerator2.default)(function* () {
      var formData = new FormData();
      formData.append('audio', new Blob(['audio data'], {
        type: 'audio/webm'
      }), {
        type: 'audio/webm'
      });
      _api.request.mockResolvedValueOnce(undefined);
      yield _chatService.chatService.sendVoiceNote('match-123', formData, 5);
      expect(_api.request).toHaveBeenCalledWith('/api/chat/voice', {
        method: 'POST',
        body: expect.any(FormData),
        headers: {}
      });
    }));
    it('should send voice note with Blob (web)', (0, _asyncToGenerator2.default)(function* () {
      var audioBlob = new Blob(['audio data'], {
        type: 'audio/webm'
      });
      _api.request.mockResolvedValueOnce(undefined);
      yield _chatService.chatService.sendVoiceNote('match-123', audioBlob, 5);
      expect(_api.request).toHaveBeenCalledWith('/api/chat/voice', {
        method: 'POST',
        body: expect.any(FormData),
        headers: {}
      });
    }));
    it('should send voice note with legacy signature', (0, _asyncToGenerator2.default)(function* () {
      var audioBlob = new Blob(['audio data'], {
        type: 'audio/m4a'
      });
      _api.request.mockResolvedValueOnce({
        success: true,
        url: 'https://example.com/voice.m4a',
        duration: 5
      });
      yield _chatService.chatService.sendVoiceNote({
        matchId: 'match-123',
        audioBlob: audioBlob,
        duration: 5
      });
      expect(_api.request).toHaveBeenCalledWith('/api/chat/voice', {
        method: 'POST',
        body: expect.any(FormData),
        headers: {}
      });
    }));
    it('should throw error for invalid file type', (0, _asyncToGenerator2.default)(function* () {
      yield expect(_chatService.chatService.sendVoiceNote('match-123', {}, 5)).rejects.toThrow('Invalid file type');
    }));
    it('should handle voice note upload errors', (0, _asyncToGenerator2.default)(function* () {
      var formData = new FormData();
      _api.request.mockRejectedValueOnce(new Error('Upload failed'));
      yield expect(_chatService.chatService.sendVoiceNote('match-123', formData, 5)).rejects.toThrow('Upload failed');
    }));
  });
  describe('sendVoiceNoteNative', function () {
    it('should upload voice note to S3 and register message', (0, _asyncToGenerator2.default)(function* () {
      var presignResponse = {
        url: 'https://s3.example.com/upload',
        key: 'voice-notes/abc123.webm'
      };
      _api.request.mockResolvedValueOnce(presignResponse).mockResolvedValueOnce({
        status: 200
      }).mockResolvedValueOnce({
        success: true
      });
      FileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        body: 'Uploaded'
      });
      yield (0, _chatService.sendVoiceNoteNative)('match-123', {
        fileUri: 'file://voice.webm',
        duration: 10
      });
      expect(_api.request).toHaveBeenCalledWith('/uploads/voice/presign', {
        method: 'POST',
        body: {
          contentType: 'audio/webm'
        }
      });
      expect(FileSystem.uploadAsync).toHaveBeenCalledWith(presignResponse.url, 'file://voice.webm', {
        httpMethod: 'PUT',
        headers: {
          'Content-Type': 'audio/webm'
        },
        uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
      });
      expect(_api.request).toHaveBeenCalledWith('/chat/match-123/voice-note', {
        method: 'POST',
        body: {
          key: presignResponse.key,
          duration: 10,
          waveform: []
        }
      });
    }));
    it('should handle S3 upload errors', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockResolvedValueOnce({
        url: 'https://s3.example.com/upload',
        key: 'voice-notes/abc123.webm'
      });
      FileSystem.uploadAsync.mockRejectedValueOnce(new Error('S3 upload failed'));
      yield expect((0, _chatService.sendVoiceNoteNative)('match-123', {
        fileUri: 'file://voice.webm',
        duration: 10
      })).rejects.toThrow('S3 upload failed');
    }));
    it('should handle presign errors', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Presign failed'));
      yield expect((0, _chatService.sendVoiceNoteNative)('match-123', {
        fileUri: 'file://voice.webm',
        duration: 10
      })).rejects.toThrow('Presign failed');
    }));
  });
  describe('Edge Cases', function () {
    it('should handle large file uploads', (0, _asyncToGenerator2.default)(function* () {
      var largeFile = new File(['x'.repeat(10 * 1024 * 1024)], 'large.jpg', {
        type: 'image/jpeg'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/large.jpg',
        type: 'image'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'image',
        file: largeFile
      });
      expect(response.success).toBe(true);
    }));
    it('should handle network errors during reaction', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Network error'));
      yield expect(_chatService.chatService.sendReaction('match-123', 'msg-123', '‚ù§Ô∏è')).rejects.toThrow('Network error');
    }));
    it('should handle invalid match ID', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Match not found'));
      yield expect(_chatService.chatService.sendReaction('invalid-match', 'msg-123', 'üòç')).rejects.toThrow('Match not found');
    }));
    it('should handle concurrent reactions', (0, _asyncToGenerator2.default)(function* () {
      var _reactions$;
      var mockResponse = {
        success: true,
        messageId: 'msg-123',
        reactions: []
      };
      _api.request.mockResolvedValue(mockResponse);
      var reactions = yield Promise.all([_chatService.chatService.sendReaction('match-123', 'msg-123', 'üòç'), _chatService.chatService.sendReaction('match-123', 'msg-123', '‚ù§Ô∏è'), _chatService.chatService.sendReaction('match-123', 'msg-123', 'üëç')]);
      expect(reactions).toHaveLength(3);
      expect((_reactions$ = reactions[0]) == null ? void 0 : _reactions$.success).toBe(true);
    }));
    it('should handle missing attachment name', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['data'], '', {
        type: 'image/jpeg'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/file',
        type: 'image'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'image',
        file: mockFile
      });
      expect(response.success).toBe(true);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyZXF1ZXN0IiwiamVzdCIsImZuIiwidXBsb2FkQXN5bmMiLCJsb2dnZXIiLCJpbmZvIiwid2FybiIsImVycm9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfY2hhdFNlcnZpY2UiLCJfYXBpIiwiRmlsZVN5c3RlbSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIm1vY2tSZXNwb25zZSIsInN1Y2Nlc3MiLCJtZXNzYWdlSWQiLCJyZWFjdGlvbnMiLCJlbW9qaSIsInVzZXJJZCIsInRpbWVzdGFtcCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsInJlc3BvbnNlIiwiY2hhdFNlcnZpY2UiLCJzZW5kUmVhY3Rpb24iLCJleHBlY3QiLCJ0b0VxdWFsIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJtZXRob2QiLCJib2R5IiwibWF0Y2hJZCIsInJlYWN0aW9uIiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwiRXJyb3IiLCJyZWplY3RzIiwidG9UaHJvdyIsInRvSGF2ZUxlbmd0aCIsIm1vY2tGaWxlIiwiRmlsZSIsInR5cGUiLCJ1cmwiLCJzZW5kQXR0YWNobWVudCIsImF0dGFjaG1lbnRUeXBlIiwiZmlsZSIsIm5hbWUiLCJhbnkiLCJGb3JtRGF0YSIsInRvQmUiLCJmb3JtRGF0YSIsImFwcGVuZCIsIkJsb2IiLCJ1bmRlZmluZWQiLCJzZW5kVm9pY2VOb3RlIiwiaGVhZGVycyIsImF1ZGlvQmxvYiIsImR1cmF0aW9uIiwicHJlc2lnblJlc3BvbnNlIiwia2V5Iiwic3RhdHVzIiwic2VuZFZvaWNlTm90ZU5hdGl2ZSIsImZpbGVVcmkiLCJjb250ZW50VHlwZSIsImh0dHBNZXRob2QiLCJ1cGxvYWRUeXBlIiwiRmlsZVN5c3RlbVVwbG9hZFR5cGUiLCJCSU5BUllfQ09OVEVOVCIsIndhdmVmb3JtIiwibGFyZ2VGaWxlIiwicmVwZWF0IiwiX3JlYWN0aW9ucyQiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIlByb21pc2UiLCJhbGwiXSwic291cmNlcyI6WyJjaGF0U2VydmljZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hhdCBTZXJ2aWNlIFRlc3QgU3VpdGVcbiAqIFRlc3RzIHJlYWN0aW9ucywgYXR0YWNobWVudHMsIHZvaWNlIG5vdGVzLCBhbmQgbWVzc2FnaW5nIGZlYXR1cmVzXG4gKi9cblxuaW1wb3J0IHsgY2hhdFNlcnZpY2UsIHNlbmRWb2ljZU5vdGVOYXRpdmUgfSBmcm9tICcuLi9jaGF0U2VydmljZSc7XG5pbXBvcnQgeyByZXF1ZXN0IH0gZnJvbSAnLi4vYXBpJztcbmltcG9ydCAqIGFzIEZpbGVTeXN0ZW0gZnJvbSAnZXhwby1maWxlLXN5c3RlbSc7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJy4uL2FwaScsICgpID0+ICh7XG4gIHJlcXVlc3Q6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCdleHBvLWZpbGUtc3lzdGVtJywgKCkgPT4gKHtcbiAgdXBsb2FkQXN5bmM6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCdAcGF3ZmVjdG1hdGNoL2NvcmUnLCAoKSA9PiAoe1xuICBsb2dnZXI6IHtcbiAgICBpbmZvOiBqZXN0LmZuKCksXG4gICAgd2FybjogamVzdC5mbigpLFxuICAgIGVycm9yOiBqZXN0LmZuKCksXG4gIH0sXG59KSk7XG5cbmRlc2NyaWJlKCdDaGF0IFNlcnZpY2UnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnc2VuZFJlYWN0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2VuZCByZWFjdGlvbiBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2VJZDogJ21zZy0xMjMnLFxuICAgICAgICByZWFjdGlvbnM6IFtcbiAgICAgICAgICB7IGVtb2ppOiAn8J+YjScsIHVzZXJJZDogJ3VzZXItMScsIHRpbWVzdGFtcDogJzIwMjQtMDEtMDFUMDA6MDA6MDBaJyB9LFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgKHJlcXVlc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjaGF0U2VydmljZS5zZW5kUmVhY3Rpb24oJ21hdGNoLTEyMycsICdtc2ctMTIzJywgJ/CfmI0nKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKG1vY2tSZXNwb25zZSk7XG4gICAgICBleHBlY3QocmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9jaGF0L3JlYWN0aW9ucycsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICBtYXRjaElkOiAnbWF0Y2gtMTIzJyxcbiAgICAgICAgICBtZXNzYWdlSWQ6ICdtc2ctMTIzJyxcbiAgICAgICAgICByZWFjdGlvbjogJ/CfmI0nLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIG9uIGZhaWxlZCByZWFjdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIChyZXF1ZXN0IGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignRmFpbGVkIHRvIHNlbmQgcmVhY3Rpb24nKSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgY2hhdFNlcnZpY2Uuc2VuZFJlYWN0aW9uKCdtYXRjaC0xMjMnLCAnbXNnLTEyMycsICfwn5iNJylcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdGYWlsZWQgdG8gc2VuZCByZWFjdGlvbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbXVsdGlwbGUgcmVhY3Rpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlSWQ6ICdtc2ctMTIzJyxcbiAgICAgICAgcmVhY3Rpb25zOiBbXG4gICAgICAgICAgeyBlbW9qaTogJ/CfmI0nLCB1c2VySWQ6ICd1c2VyLTEnLCB0aW1lc3RhbXA6ICcyMDI0LTAxLTAxVDAwOjAwOjAwWicgfSxcbiAgICAgICAgICB7IGVtb2ppOiAn4p2k77iPJywgdXNlcklkOiAndXNlci0yJywgdGltZXN0YW1wOiAnMjAyNC0wMS0wMVQwMDowMTowMFonIH0sXG4gICAgICAgIF0sXG4gICAgICB9O1xuXG4gICAgICAocmVxdWVzdCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlT25jZShtb2NrUmVzcG9uc2UpO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNoYXRTZXJ2aWNlLnNlbmRSZWFjdGlvbignbWF0Y2gtMTIzJywgJ21zZy0xMjMnLCAn4p2k77iPJyk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5yZWFjdGlvbnMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3NlbmRBdHRhY2htZW50JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2VuZCBpbWFnZSBhdHRhY2htZW50JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0ZpbGUgPSBuZXcgRmlsZShbJ2ltYWdlIGRhdGEnXSwgJ3Bob3RvLmpwZycsIHsgdHlwZTogJ2ltYWdlL2pwZWcnIH0pO1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICB1cmw6ICdodHRwczovL2V4YW1wbGUuY29tL3Bob3RvLmpwZycsXG4gICAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICB9O1xuXG4gICAgICAocmVxdWVzdCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlT25jZShtb2NrUmVzcG9uc2UpO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNoYXRTZXJ2aWNlLnNlbmRBdHRhY2htZW50KHtcbiAgICAgICAgbWF0Y2hJZDogJ21hdGNoLTEyMycsXG4gICAgICAgIGF0dGFjaG1lbnRUeXBlOiAnaW1hZ2UnLFxuICAgICAgICBmaWxlOiBtb2NrRmlsZSxcbiAgICAgICAgbmFtZTogJ3Bob3RvLmpwZycsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKG1vY2tSZXNwb25zZSk7XG4gICAgICBleHBlY3QocmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9jaGF0L2F0dGFjaG1lbnRzJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZXhwZWN0LmFueShGb3JtRGF0YSksXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2VuZCB2aWRlbyBhdHRhY2htZW50JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0ZpbGUgPSBuZXcgRmlsZShbJ3ZpZGVvIGRhdGEnXSwgJ3ZpZGVvLm1wNCcsIHsgdHlwZTogJ3ZpZGVvL21wNCcgfSk7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZXhhbXBsZS5jb20vdmlkZW8ubXA0JyxcbiAgICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgIH07XG5cbiAgICAgIChyZXF1ZXN0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2hhdFNlcnZpY2Uuc2VuZEF0dGFjaG1lbnQoe1xuICAgICAgICBtYXRjaElkOiAnbWF0Y2gtMTIzJyxcbiAgICAgICAgYXR0YWNobWVudFR5cGU6ICd2aWRlbycsXG4gICAgICAgIGZpbGU6IG1vY2tGaWxlLFxuICAgICAgICBuYW1lOiAndmlkZW8ubXA0JyxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UudHlwZSkudG9CZSgndmlkZW8nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2VuZCBmaWxlIGF0dGFjaG1lbnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrRmlsZSA9IG5ldyBGaWxlKFsnZmlsZSBkYXRhJ10sICdkb2N1bWVudC5wZGYnLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnIH0pO1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICB1cmw6ICdodHRwczovL2V4YW1wbGUuY29tL2RvY3VtZW50LnBkZicsXG4gICAgICAgIHR5cGU6ICdmaWxlJyxcbiAgICAgIH07XG5cbiAgICAgIChyZXF1ZXN0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2hhdFNlcnZpY2Uuc2VuZEF0dGFjaG1lbnQoe1xuICAgICAgICBtYXRjaElkOiAnbWF0Y2gtMTIzJyxcbiAgICAgICAgYXR0YWNobWVudFR5cGU6ICdmaWxlJyxcbiAgICAgICAgZmlsZTogbW9ja0ZpbGUsXG4gICAgICAgIG5hbWU6ICdkb2N1bWVudC5wZGYnLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS50eXBlKS50b0JlKCdmaWxlJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBhdHRhY2htZW50IGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWydkYXRhJ10sICdmaWxlLnBkZicsIHsgdHlwZTogJ2FwcGxpY2F0aW9uL3BkZicgfSk7XG5cbiAgICAgIChyZXF1ZXN0IGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignVXBsb2FkIGZhaWxlZCcpKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICBjaGF0U2VydmljZS5zZW5kQXR0YWNobWVudCh7XG4gICAgICAgICAgbWF0Y2hJZDogJ21hdGNoLTEyMycsXG4gICAgICAgICAgYXR0YWNobWVudFR5cGU6ICdmaWxlJyxcbiAgICAgICAgICBmaWxlOiBtb2NrRmlsZSxcbiAgICAgICAgfSlcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdVcGxvYWQgZmFpbGVkJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdzZW5kVm9pY2VOb3RlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2VuZCB2b2ljZSBub3RlIHdpdGggRm9ybURhdGEgKG5hdGl2ZSknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCdhdWRpbycsIG5ldyBCbG9iKFsnYXVkaW8gZGF0YSddLCB7IHR5cGU6ICdhdWRpby93ZWJtJyB9KSwge1xuICAgICAgICB0eXBlOiAnYXVkaW8vd2VibScsXG4gICAgICB9KTtcblxuICAgICAgKHJlcXVlc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UodW5kZWZpbmVkKTtcblxuICAgICAgYXdhaXQgY2hhdFNlcnZpY2Uuc2VuZFZvaWNlTm90ZSgnbWF0Y2gtMTIzJywgZm9ybURhdGEsIDUpO1xuXG4gICAgICBleHBlY3QocmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvY2hhdC92b2ljZScsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGV4cGVjdC5hbnkoRm9ybURhdGEpLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzZW5kIHZvaWNlIG5vdGUgd2l0aCBCbG9iICh3ZWIpJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYXVkaW9CbG9iID0gbmV3IEJsb2IoWydhdWRpbyBkYXRhJ10sIHsgdHlwZTogJ2F1ZGlvL3dlYm0nIH0pO1xuXG4gICAgICAocmVxdWVzdCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh1bmRlZmluZWQpO1xuXG4gICAgICBhd2FpdCBjaGF0U2VydmljZS5zZW5kVm9pY2VOb3RlKCdtYXRjaC0xMjMnLCBhdWRpb0Jsb2IsIDUpO1xuXG4gICAgICBleHBlY3QocmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvY2hhdC92b2ljZScsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGV4cGVjdC5hbnkoRm9ybURhdGEpLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzZW5kIHZvaWNlIG5vdGUgd2l0aCBsZWdhY3kgc2lnbmF0dXJlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYXVkaW9CbG9iID0gbmV3IEJsb2IoWydhdWRpbyBkYXRhJ10sIHsgdHlwZTogJ2F1ZGlvL200YScgfSk7XG5cbiAgICAgIChyZXF1ZXN0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS92b2ljZS5tNGEnLFxuICAgICAgICBkdXJhdGlvbjogNSxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBjaGF0U2VydmljZS5zZW5kVm9pY2VOb3RlKHtcbiAgICAgICAgbWF0Y2hJZDogJ21hdGNoLTEyMycsXG4gICAgICAgIGF1ZGlvQmxvYixcbiAgICAgICAgZHVyYXRpb246IDUsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXBpL2NoYXQvdm9pY2UnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBleHBlY3QuYW55KEZvcm1EYXRhKSxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgZm9yIGludmFsaWQgZmlsZSB0eXBlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICBjaGF0U2VydmljZS5zZW5kVm9pY2VOb3RlKCdtYXRjaC0xMjMnLCB7fSBhcyBGb3JtRGF0YSwgNSlcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdJbnZhbGlkIGZpbGUgdHlwZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgdm9pY2Ugbm90ZSB1cGxvYWQgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgKHJlcXVlc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdVcGxvYWQgZmFpbGVkJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIGNoYXRTZXJ2aWNlLnNlbmRWb2ljZU5vdGUoJ21hdGNoLTEyMycsIGZvcm1EYXRhLCA1KVxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coJ1VwbG9hZCBmYWlsZWQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3NlbmRWb2ljZU5vdGVOYXRpdmUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB1cGxvYWQgdm9pY2Ugbm90ZSB0byBTMyBhbmQgcmVnaXN0ZXIgbWVzc2FnZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHByZXNpZ25SZXNwb25zZSA9IHtcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9zMy5leGFtcGxlLmNvbS91cGxvYWQnLFxuICAgICAgICBrZXk6ICd2b2ljZS1ub3Rlcy9hYmMxMjMud2VibScsXG4gICAgICB9O1xuXG4gICAgICAocmVxdWVzdCBhcyBqZXN0Lk1vY2spXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UocHJlc2lnblJlc3BvbnNlKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgc3RhdHVzOiAyMDAgfSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IHN1Y2Nlc3M6IHRydWUgfSk7XG5cbiAgICAgIChGaWxlU3lzdGVtLnVwbG9hZEFzeW5jIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIGJvZHk6ICdVcGxvYWRlZCcsXG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgc2VuZFZvaWNlTm90ZU5hdGl2ZSgnbWF0Y2gtMTIzJywge1xuICAgICAgICBmaWxlVXJpOiAnZmlsZTovL3ZvaWNlLndlYm0nLFxuICAgICAgICBkdXJhdGlvbjogMTAsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvdXBsb2Fkcy92b2ljZS9wcmVzaWduJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogeyBjb250ZW50VHlwZTogJ2F1ZGlvL3dlYm0nIH0sXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KEZpbGVTeXN0ZW0udXBsb2FkQXN5bmMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBwcmVzaWduUmVzcG9uc2UudXJsLFxuICAgICAgICAnZmlsZTovL3ZvaWNlLndlYm0nLFxuICAgICAgICB7XG4gICAgICAgICAgaHR0cE1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2F1ZGlvL3dlYm0nIH0sXG4gICAgICAgICAgdXBsb2FkVHlwZTogRmlsZVN5c3RlbS5GaWxlU3lzdGVtVXBsb2FkVHlwZS5CSU5BUllfQ09OVEVOVCxcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHJlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvY2hhdC9tYXRjaC0xMjMvdm9pY2Utbm90ZScsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICBrZXk6IHByZXNpZ25SZXNwb25zZS5rZXksXG4gICAgICAgICAgZHVyYXRpb246IDEwLFxuICAgICAgICAgIHdhdmVmb3JtOiBbXSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgUzMgdXBsb2FkIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIChyZXF1ZXN0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9zMy5leGFtcGxlLmNvbS91cGxvYWQnLFxuICAgICAgICBrZXk6ICd2b2ljZS1ub3Rlcy9hYmMxMjMud2VibScsXG4gICAgICB9KTtcblxuICAgICAgKEZpbGVTeXN0ZW0udXBsb2FkQXN5bmMgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdTMyB1cGxvYWQgZmFpbGVkJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHNlbmRWb2ljZU5vdGVOYXRpdmUoJ21hdGNoLTEyMycsIHtcbiAgICAgICAgICBmaWxlVXJpOiAnZmlsZTovL3ZvaWNlLndlYm0nLFxuICAgICAgICAgIGR1cmF0aW9uOiAxMCxcbiAgICAgICAgfSlcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdTMyB1cGxvYWQgZmFpbGVkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBwcmVzaWduIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIChyZXF1ZXN0IGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignUHJlc2lnbiBmYWlsZWQnKSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgc2VuZFZvaWNlTm90ZU5hdGl2ZSgnbWF0Y2gtMTIzJywge1xuICAgICAgICAgIGZpbGVVcmk6ICdmaWxlOi8vdm9pY2Uud2VibScsXG4gICAgICAgICAgZHVyYXRpb246IDEwLFxuICAgICAgICB9KVxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coJ1ByZXNpZ24gZmFpbGVkJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFZGdlIENhc2VzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGxhcmdlIGZpbGUgdXBsb2FkcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxhcmdlRmlsZSA9IG5ldyBGaWxlKFsneCcucmVwZWF0KDEwICogMTAyNCAqIDEwMjQpXSwgJ2xhcmdlLmpwZycsIHtcbiAgICAgICAgdHlwZTogJ2ltYWdlL2pwZWcnLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9sYXJnZS5qcGcnLFxuICAgICAgICB0eXBlOiAnaW1hZ2UnLFxuICAgICAgfTtcblxuICAgICAgKHJlcXVlc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjaGF0U2VydmljZS5zZW5kQXR0YWNobWVudCh7XG4gICAgICAgIG1hdGNoSWQ6ICdtYXRjaC0xMjMnLFxuICAgICAgICBhdHRhY2htZW50VHlwZTogJ2ltYWdlJyxcbiAgICAgICAgZmlsZTogbGFyZ2VGaWxlLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbmV0d29yayBlcnJvcnMgZHVyaW5nIHJlYWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgKHJlcXVlc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdOZXR3b3JrIGVycm9yJykpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIGNoYXRTZXJ2aWNlLnNlbmRSZWFjdGlvbignbWF0Y2gtMTIzJywgJ21zZy0xMjMnLCAn4p2k77iPJylcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdOZXR3b3JrIGVycm9yJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIG1hdGNoIElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgKHJlcXVlc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdNYXRjaCBub3QgZm91bmQnKSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgY2hhdFNlcnZpY2Uuc2VuZFJlYWN0aW9uKCdpbnZhbGlkLW1hdGNoJywgJ21zZy0xMjMnLCAn8J+YjScpXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnTWF0Y2ggbm90IGZvdW5kJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjb25jdXJyZW50IHJlYWN0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZUlkOiAnbXNnLTEyMycsXG4gICAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICB9O1xuXG4gICAgICAocmVxdWVzdCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlYWN0aW9ucyA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgY2hhdFNlcnZpY2Uuc2VuZFJlYWN0aW9uKCdtYXRjaC0xMjMnLCAnbXNnLTEyMycsICfwn5iNJyksXG4gICAgICAgIGNoYXRTZXJ2aWNlLnNlbmRSZWFjdGlvbignbWF0Y2gtMTIzJywgJ21zZy0xMjMnLCAn4p2k77iPJyksXG4gICAgICAgIGNoYXRTZXJ2aWNlLnNlbmRSZWFjdGlvbignbWF0Y2gtMTIzJywgJ21zZy0xMjMnLCAn8J+RjScpLFxuICAgICAgXSk7XG5cbiAgICAgIGV4cGVjdChyZWFjdGlvbnMpLnRvSGF2ZUxlbmd0aCgzKTtcbiAgICAgIGV4cGVjdChyZWFjdGlvbnNbMF0/LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtaXNzaW5nIGF0dGFjaG1lbnQgbmFtZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWydkYXRhJ10sICcnLCB7IHR5cGU6ICdpbWFnZS9qcGVnJyB9KTtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9maWxlJyxcbiAgICAgICAgdHlwZTogJ2ltYWdlJyxcbiAgICAgIH07XG5cbiAgICAgIChyZXF1ZXN0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2hhdFNlcnZpY2Uuc2VuZEF0dGFjaG1lbnQoe1xuICAgICAgICBtYXRjaElkOiAnbWF0Y2gtMTIzJyxcbiAgICAgICAgYXR0YWNobWVudFR5cGU6ICdpbWFnZScsXG4gICAgICAgIGZpbGU6IG1vY2tGaWxlLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQVVBQSxXQUFBLEdBQUtDLElBQUksV0FBVztFQUFBLE9BQU87SUFDekJDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDbkIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVISixXQUFBLEdBQUtDLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtFQUFBLE9BQU87SUFDbkNJLFdBQVcsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDdkIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVISixXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtFQUFBLE9BQU87SUFDckNLLE1BQU0sRUFBRTtNQUNOQyxJQUFJLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDZkksSUFBSSxFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2ZLLEtBQUssRUFBRU4sSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDakI7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQU0sc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFuQkosSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsSUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksVUFBQSxHQUFBQyx1QkFBQSxDQUFBTCxPQUFBO0FBQStDLFNBQUFLLHdCQUFBQyxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSCx1QkFBQSxZQUFBQSx3QkFBQUMsQ0FBQSxFQUFBQyxDQUFBLFNBQUFB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