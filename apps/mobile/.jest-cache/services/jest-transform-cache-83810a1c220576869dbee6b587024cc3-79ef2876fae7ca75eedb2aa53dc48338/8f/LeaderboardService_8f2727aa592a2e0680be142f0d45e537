68f6a3fca7bdbd7e262c344cc1365f93
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _core = require("@pawfectmatch/core");
var _AuthService = require("./AuthService");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var LeaderboardService = function () {
  function LeaderboardService() {
    var _process$env$EXPO_PUB;
    (0, _classCallCheck2.default)(this, LeaderboardService);
    this.cache = new Map();
    this.cacheExpiration = 5 * 60 * 1000;
    this.baseUrl = (_process$env$EXPO_PUB = process.env["EXPO_PUBLIC_API_URL"]) != null ? _process$env$EXPO_PUB : "https://api.pawfectmatch.com";
  }
  return (0, _createClass2.default)(LeaderboardService, [{
    key: "getLeaderboard",
    value: (function () {
      var _getLeaderboard = (0, _asyncToGenerator2.default)(function* () {
        var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;
        try {
          var cacheKey = `leaderboard-${JSON.stringify(filter)}-${page.toString()}-${limit.toString()}`;
          var cached = this.getCachedData(cacheKey);
          if (cached !== null) {
            return cached;
          }
          var params = new URLSearchParams(_objectSpread({
            page: page.toString(),
            limit: limit.toString()
          }, filter));
          var response = yield fetch(`${this.baseUrl}/api/leaderboard?${params.toString()}`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${yield this.getAuthToken()}`
            }
          });
          if (!response.ok) {
            throw new Error(`HTTP ${response.status.toString()}: ${response.statusText}`);
          }
          var data = yield response.json();
          this.setCachedData(cacheKey, data);
          return data;
        } catch (error) {
          _core.logger.error("Failed to get leaderboard", {
            error: error
          });
          throw error;
        }
      });
      function getLeaderboard() {
        return _getLeaderboard.apply(this, arguments);
      }
      return getLeaderboard;
    }())
  }, {
    key: "getUserRank",
    value: (function () {
      var _getUserRank = (0, _asyncToGenerator2.default)(function* (category) {
        try {
          var cacheKey = `user-rank-${category != null ? category : "all"}`;
          var cached = this.getCachedData(cacheKey);
          if (cached !== null) {
            return cached;
          }
          var params = category !== undefined ? `?category=${category}` : "";
          var response = yield fetch(`${this.baseUrl}/api/leaderboard/user-rank${params}`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${yield this.getAuthToken()}`
            }
          });
          if (!response.ok) {
            throw new Error(`HTTP ${response.status.toString()}: ${response.statusText}`);
          }
          var data = yield response.json();
          this.setCachedData(cacheKey, data);
          return data;
        } catch (error) {
          _core.logger.error("Failed to get user rank", {
            error: error
          });
          throw error;
        }
      });
      function getUserRank(_x) {
        return _getUserRank.apply(this, arguments);
      }
      return getUserRank;
    }())
  }, {
    key: "getCategories",
    value: (function () {
      var _getCategories = (0, _asyncToGenerator2.default)(function* () {
        try {
          var cacheKey = "leaderboard-categories";
          var cached = this.getCachedData(cacheKey);
          if (cached !== null) {
            return cached;
          }
          var response = yield fetch(`${this.baseUrl}/api/leaderboard/categories`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${yield this.getAuthToken()}`
            }
          });
          if (!response.ok) {
            throw new Error(`HTTP ${response.status.toString()}: ${response.statusText}`);
          }
          var data = yield response.json();
          this.setCachedData(cacheKey, data);
          return data;
        } catch (error) {
          _core.logger.error("Failed to get categories", {
            error: error
          });
          throw error;
        }
      });
      function getCategories() {
        return _getCategories.apply(this, arguments);
      }
      return getCategories;
    }())
  }, {
    key: "getUserBadges",
    value: (function () {
      var _getUserBadges = (0, _asyncToGenerator2.default)(function* () {
        try {
          var cacheKey = "user-badges";
          var cached = this.getCachedData(cacheKey);
          if (cached !== null) {
            return cached;
          }
          var response = yield fetch(`${this.baseUrl}/api/leaderboard/badges`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${yield this.getAuthToken()}`
            }
          });
          if (!response.ok) {
            throw new Error(`HTTP ${response.status.toString()}: ${response.statusText}`);
          }
          var data = yield response.json();
          this.setCachedData(cacheKey, data);
          return data;
        } catch (error) {
          _core.logger.error("Failed to get user badges", {
            error: error
          });
          throw error;
        }
      });
      function getUserBadges() {
        return _getUserBadges.apply(this, arguments);
      }
      return getUserBadges;
    }())
  }, {
    key: "getPetStats",
    value: (function () {
      var _getPetStats = (0, _asyncToGenerator2.default)(function* (petId) {
        try {
          var cacheKey = `pet-stats-${petId}`;
          var cached = this.getCachedData(cacheKey);
          if (cached !== null) {
            return cached;
          }
          var response = yield fetch(`${this.baseUrl}/api/leaderboard/pet/${petId}/stats`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${yield this.getAuthToken()}`
            }
          });
          if (!response.ok) {
            throw new Error(`HTTP ${response.status.toString()}: ${response.statusText}`);
          }
          var data = yield response.json();
          this.setCachedData(cacheKey, data);
          return data;
        } catch (error) {
          _core.logger.error("Failed to get pet stats", {
            error: error
          });
          throw error;
        }
      });
      function getPetStats(_x2) {
        return _getPetStats.apply(this, arguments);
      }
      return getPetStats;
    }())
  }, {
    key: "updateScore",
    value: (function () {
      var _updateScore = (0, _asyncToGenerator2.default)(function* (petId, category, points, reason) {
        try {
          var response = yield fetch(`${this.baseUrl}/api/leaderboard/update-score`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${yield this.getAuthToken()}`
            },
            body: JSON.stringify({
              petId: petId,
              category: category,
              points: points,
              reason: reason
            })
          });
          if (!response.ok) {
            throw new Error(`HTTP ${response.status.toString()}: ${response.statusText}`);
          }
          this.clearCacheByPattern("leaderboard");
          this.clearCacheByPattern("user-rank");
          this.clearCacheByPattern(`pet-stats-${petId}`);
        } catch (error) {
          _core.logger.error("Failed to update score", {
            error: error
          });
          throw error;
        }
      });
      function updateScore(_x3, _x4, _x5, _x6) {
        return _updateScore.apply(this, arguments);
      }
      return updateScore;
    }())
  }, {
    key: "getLeaderboardHistory",
    value: (function () {
      var _getLeaderboardHistory = (0, _asyncToGenerator2.default)(function* (category) {
        var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "weekly";
        var weeks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;
        try {
          var cacheKey = `leaderboard-history-${category}-${period}-${weeks.toString()}`;
          var cached = this.getCachedData(cacheKey);
          if (cached !== null) {
            return cached;
          }
          var params = new URLSearchParams({
            category: category,
            period: period,
            weeks: weeks.toString()
          });
          var response = yield fetch(`${this.baseUrl}/api/leaderboard/history?${params.toString()}`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${yield this.getAuthToken()}`
            }
          });
          if (!response.ok) {
            throw new Error(`HTTP ${response.status.toString()}: ${response.statusText}`);
          }
          var data = yield response.json();
          this.setCachedData(cacheKey, data);
          return data;
        } catch (error) {
          _core.logger.error("Failed to get leaderboard history", {
            error: error
          });
          throw error;
        }
      });
      function getLeaderboardHistory(_x7) {
        return _getLeaderboardHistory.apply(this, arguments);
      }
      return getLeaderboardHistory;
    }())
  }, {
    key: "getNearbyLeaders",
    value: (function () {
      var _getNearbyLeaders = (0, _asyncToGenerator2.default)(function* (latitude, longitude) {
        var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
        try {
          var cacheKey = `nearby-leaders-${latitude.toString()}-${longitude.toString()}-${radius.toString()}`;
          var cached = this.getCachedData(cacheKey);
          if (cached !== null) {
            return cached;
          }
          var params = new URLSearchParams({
            latitude: latitude.toString(),
            longitude: longitude.toString(),
            radius: radius.toString()
          });
          var response = yield fetch(`${this.baseUrl}/api/leaderboard/nearby?${params.toString()}`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${yield this.getAuthToken()}`
            }
          });
          if (!response.ok) {
            throw new Error(`HTTP ${response.status.toString()}: ${response.statusText}`);
          }
          var data = yield response.json();
          this.setCachedData(cacheKey, data);
          return data;
        } catch (error) {
          _core.logger.error("Failed to get nearby leaders", {
            error: error
          });
          throw error;
        }
      });
      function getNearbyLeaders(_x8, _x9) {
        return _getNearbyLeaders.apply(this, arguments);
      }
      return getNearbyLeaders;
    }())
  }, {
    key: "getAchievementProgress",
    value: (function () {
      var _getAchievementProgress = (0, _asyncToGenerator2.default)(function* () {
        try {
          var cacheKey = "achievement-progress";
          var cached = this.getCachedData(cacheKey);
          if (cached !== null) {
            return cached;
          }
          var response = yield fetch(`${this.baseUrl}/api/leaderboard/achievements/progress`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${yield this.getAuthToken()}`
            }
          });
          if (!response.ok) {
            throw new Error(`HTTP ${response.status.toString()}: ${response.statusText}`);
          }
          var data = yield response.json();
          this.setCachedData(cacheKey, data);
          return data;
        } catch (error) {
          _core.logger.error("Failed to get achievement progress", {
            error: error
          });
          throw error;
        }
      });
      function getAchievementProgress() {
        return _getAchievementProgress.apply(this, arguments);
      }
      return getAchievementProgress;
    }())
  }, {
    key: "shareAchievement",
    value: (function () {
      var _shareAchievement = (0, _asyncToGenerator2.default)(function* (badgeId, platform) {
        try {
          var response = yield fetch(`${this.baseUrl}/api/leaderboard/share`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${yield this.getAuthToken()}`
            },
            body: JSON.stringify({
              badgeId: badgeId,
              platform: platform
            })
          });
          if (!response.ok) {
            throw new Error(`HTTP ${response.status.toString()}: ${response.statusText}`);
          }
          var data = yield response.json();
          return data.shareUrl;
        } catch (error) {
          _core.logger.error("Failed to share achievement", {
            error: error
          });
          throw error;
        }
      });
      function shareAchievement(_x0, _x1) {
        return _shareAchievement.apply(this, arguments);
      }
      return shareAchievement;
    }())
  }, {
    key: "getCachedData",
    value: function getCachedData(key) {
      var cached = this.cache.get(key);
      if (cached !== undefined && Date.now() - cached.timestamp < this.cacheExpiration) {
        return cached.data;
      }
      return null;
    }
  }, {
    key: "setCachedData",
    value: function setCachedData(key, data) {
      this.cache.set(key, {
        data: data,
        timestamp: Date.now()
      });
    }
  }, {
    key: "clearCacheByPattern",
    value: function clearCacheByPattern(pattern) {
      for (var key of this.cache.keys()) {
        if (key.includes(pattern)) {
          this.cache.delete(key);
        }
      }
    }
  }, {
    key: "getAuthToken",
    value: (function () {
      var _getAuthToken = (0, _asyncToGenerator2.default)(function* () {
        var token = yield _AuthService.authService.getAccessToken();
        if (token === null) {
          throw new Error("Authentication required for leaderboard access");
        }
        return token;
      });
      function getAuthToken() {
        return _getAuthToken.apply(this, arguments);
      }
      return getAuthToken;
    }())
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.cache.clear();
    }
  }]);
}();
var _default = exports.default = new LeaderboardService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,