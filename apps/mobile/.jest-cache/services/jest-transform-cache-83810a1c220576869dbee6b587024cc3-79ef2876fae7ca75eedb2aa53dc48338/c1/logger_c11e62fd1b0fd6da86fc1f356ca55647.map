{"version":3,"names":["Sentry","_interopRequireWildcard","require","Keychain","Aes","_reactNativeEncryptedStorage","_interopRequireDefault","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","sentry","LogLevel","exports","MobileLogger","_classCallCheck2","isDevelopment","__DEV__","userInfo","logBuffer","offlineBuffer","encryptionKey","encryptionSalt","ENCRYPTION_KEY_SIZE","ENCRYPTION_IV_SIZE","ENCRYPTION_KEY_STORAGE_KEY","ENCRYPTION_SALT_STORAGE_KEY","MAX_LOG_BUFFER_SIZE","MAX_LOG_SIZE","MAX_OFFLINE_BUFFER_SIZE","rateLimitBackoff","rateLimits","DEBUG","points","interval","INFO","WARN","ERROR","SECURITY","PERFORMANCE","rateTracking","count","resetTime","Date","now","lastLogTime","sessionId","generateSessionId","appVersion","setupLogRotation","initializeEncryption","_createClass2","key","value","_initializeEncryption","_asyncToGenerator2","storedKey","getGenericPassword","service","storedSalt","password","generateSecureKey","salt","generateSecureRandomBytes","setGenericPassword","error","errorMessage","Error","message","String","component","action","setUserContext","userId","properties","undefined","id","setUser","_unused","clearUserContext","clearSentryContext","_generateSecureKey","_this$encryptionSalt","randomBytes","pbkdf2","_generateSecureRandomBytes","size","randomKey","_x","_encryptData","data","iv","ciphertext","encrypt","encryptData","_x2","_decryptData","encryptedData","decrypted","decrypt","decryptData","_x3","_this","setInterval","rotateAndPersistLogs","_rotateAndPersistLogs","_this2","logsToRotate","_toConsumableArray2","encryptedLogs","Promise","all","map","_ref","log","shouldEncryptLog","encryptLogEntry","_x4","slice","console","level","metadata","_encryptLogEntry","timestamp","isRedacted","JSON","stringify","sanitizeMetadata","isEncrypted","encryptedAt","toISOString","integrity","hash","generateHMAC","_x5","_generateHMAC","hmac","hmac256","_x6","randomValue","Math","random","toString","substring","_this3","sanitized","sensitiveFields","hashValue","char","charCodeAt","_loop","lowerKey","toLowerCase","some","field","includes","_value$stack$split","_value$stack","_value$message","_value$name","_code","stackLines","stack","split","sensitivePatterns","sanitizedStack","line","pattern","test","join","name","code","_ref2","entries","_ref3","_slicedToArray2","formatLogMessage","parts","toUpperCase","validateLogEntry","totalSize","TextEncoder","encode","warn","limit","truncated","checkRateLimit","tracking","limits","applyRateLimit","timeSinceLastLog","min","_bufferOfflineLog","entry","storageKey","hashIdentifier","EncryptedStorage","setItem","cleanupOldOfflineLogs","bufferOfflineLog","_x7","_cleanupOldOfflineLogs","allKeys","getItem","offlineLogKeys","startsWith","sort","a","b","_a$split","_a$split2","_a$split2$","timestampA","_b$split","_b$split2","_b$split2$","timestampB","localeCompare","logsToRemove","removeItem","info","removedCount","_loadOfflineLogs","_ref4","encrypted","parsedItem","parse","_error","_x8","calculatedHash","decryptError","logsLoaded","loadOfflineLogs","getBufferMetrics","criticalEntries","oldestEntry","latestEntry","firstEntry","lastEntry","totalEntries","_this$userInfo","_enhancedMetadata$tim","rateLimited","originalTimestamp","enhancedMetadata","version","securityContext","environment","sessionHash","logId","formattedMessage","logEntry","fingerprint","generateErrorFingerprint","_metadata$component","_metadata$action","captureException","extra","tags","logLevel","errorType","errorCode","fromEntries","tag","correlationId","transaction","transactionHash","sentryLevel","secureContext","setContext","captureMessage","debug","security","concat","performance","operation","durationMs","duration","startTimer","_this4","startTime","round","user","email","username","addBreadcrumb","category","sanitizedData","_data$component","secureBreadcrumb","truncateString","validateCategory","sourceComponent","securityHash","_exportAuditLogs","_this5","options","startDate","_options$endDate","endDate","_options$levels","levels","values","_options$includeMetri","includeMetrics","filteredLogs","entryDate","isNaN","getTime","matchesDate","matchesLevel","baseFilters","contentHash","exportData","logs","metrics","exportMetadata","exportId","filters","entriesCount","timeRange","start","end","exportAuditLogs","_metadata$component2","_metadata$action2","components","_code2","_unused2","_exportSecureAuditLogs","_this6","_startDate$toISOStrin","_startDate$toISOStrin2","_options$endDate2","_options$levels2","_options$includeMetri2","exportSecureAuditLogs","replace","str","maxLength","trackFeature","feature","trackingId","featureHash","logSecurityEvent","event","details","_details$component","_details$action","safeEvent","sanitizedDetails","enhancedDetails","eventType","securityLevel","eventId","environmentHash","logger"],"sources":["logger.ts"],"sourcesContent":["/**\n * Mobile Logger Service\n * Lightweight logging for React Native with Sentry integration\n */\n\nimport * as Sentry from \"@sentry/react-native\";\nimport * as Keychain from \"react-native-keychain\";\nimport * as Aes from \"react-native-aes-crypto\";\nimport EncryptedStorage from \"react-native-encrypted-storage\";\n\n// Type assertion for Sentry to avoid unsafe call errors\nconst sentry = Sentry as {\n  captureException: (error: Error, context?: Record<string, unknown>) => void;\n  captureMessage: (message: string, level: string) => void;\n  setContext: (key: string, context: Record<string, unknown>) => void;\n  setUser: (user: Record<string, unknown>) => void;\n  addBreadcrumb: (breadcrumb: Record<string, unknown>) => void;\n};\n\nexport enum LogLevel {\n  DEBUG = \"debug\",\n  INFO = \"info\",\n  WARN = \"warn\",\n  ERROR = \"error\",\n  SECURITY = \"security\",\n  PERFORMANCE = \"performance\",\n}\n\nexport type LogLevelType = `${LogLevel}`;\n\nexport interface ErrorDetails {\n  message: string;\n  stack?: string;\n  name: string;\n  code?: string;\n}\n\nexport interface LogMetadata {\n  [key: string]: unknown;\n  error?: Error;\n  userId?: string;\n  sessionId?: string;\n  correlationId?: string;\n  requestId?: string;\n  component?: string;\n  action?: string;\n  duration?: number;\n  tags?: string[];\n  version?: string;\n  timestamp?: string;\n  level?: LogLevel;\n  errorDetails?: ErrorDetails;\n  isEncrypted?: boolean;\n  encryptedAt?: string;\n  encryptedData?: EncryptedData;\n  integrity?: {\n    hash: string;\n    timestamp: string;\n  };\n  isRedacted?: boolean;\n}\n\ninterface AuditLogRequest {\n  startDate?: Date;\n  endDate?: Date;\n  levels?: LogLevel[];\n  includeMetrics?: boolean;\n}\n\nexport interface AuditLogFilters {\n  startDate: string;\n  endDate: string;\n  levels: LogLevel[];\n  includeMetrics: boolean;\n  contentHash: string;\n  totalEntries: number;\n}\n\ninterface ExportMetadata {\n  timestamp: string;\n  exportId: string;\n  filters: AuditLogFilters;\n}\n\ninterface AuditLogExport {\n  logs: StructuredLogEntry[];\n  metrics?: LogBufferMetrics;\n  exportMetadata: ExportMetadata;\n}\n\n/**\n * Type for working with storage keys\n * @private\n */\ntype StorageKey = string & { readonly __storageKey: unique symbol };\n\n/**\n * Interface for encrypted log storage item\n * @private\n */\ninterface EncryptedLogStorageItem {\n  data: EncryptedData;\n  timestamp: string;\n  level: LogLevel;\n  hash: string;\n}\n\n/**\n * Interface for Keychain options\n * @private\n */\ninterface _KeychainOptions {\n  accessible?: Keychain.ACCESSIBLE;\n  accessControl?: Keychain.ACCESS_CONTROL;\n}\n\n/**\n * Core log entry structure\n */\nexport interface StructuredLogEntry {\n  message: string;\n  level: LogLevel;\n  timestamp: string;\n  metadata: LogMetadata;\n}\ninterface RateLimitConfig {\n  points: number;\n  interval: number; // in milliseconds\n}\n\ninterface EncryptedData {\n  ciphertext: string;\n  iv: string;\n  tag?: string;\n}\n\ninterface _EncryptionKeys {\n  key: string;\n  salt: string;\n}\n\ninterface LogBufferMetrics {\n  totalEntries: number;\n  criticalEntries: number;\n  oldestEntry: Date | null;\n  latestEntry: Date | null;\n}\n\nclass MobileLogger {\n  private isDevelopment = __DEV__;\n  private sessionId: string;\n  private appVersion: string;\n  private userInfo: { id?: string; email?: string; username?: string } | null =\n    null;\n  private logBuffer: StructuredLogEntry[] = [];\n  private offlineBuffer: StructuredLogEntry[] = [];\n  private encryptionKey: string | null = null;\n  private encryptionSalt: string | null = null;\n\n  // Encryption constants\n  private readonly ENCRYPTION_KEY_SIZE = 32; // 256 bits\n  private readonly ENCRYPTION_IV_SIZE = 16; // 128 bits\n  private readonly ENCRYPTION_KEY_STORAGE_KEY = \"logger_encryption_key\";\n  private readonly ENCRYPTION_SALT_STORAGE_KEY = \"logger_encryption_salt\";\n\n  // Constants\n  private readonly MAX_LOG_BUFFER_SIZE = 1000;\n  private readonly MAX_LOG_SIZE = 32768; // 32KB per log entry\n  private readonly MAX_OFFLINE_BUFFER_SIZE = 500;\n  private rateLimitBackoff = 100; // Initial backoff in ms\n\n  // Rate limiting configuration per log level\n  private readonly rateLimits: Record<LogLevel, RateLimitConfig> = {\n    [LogLevel.DEBUG]: { points: 1000, interval: 60000 }, // 1000 per minute\n    [LogLevel.INFO]: { points: 500, interval: 60000 }, // 500 per minute\n    [LogLevel.WARN]: { points: 100, interval: 60000 }, // 100 per minute\n    [LogLevel.ERROR]: { points: 50, interval: 60000 }, // 50 per minute\n    [LogLevel.SECURITY]: { points: 20, interval: 60000 }, // 20 per minute\n    [LogLevel.PERFORMANCE]: { points: 200, interval: 60000 }, // 200 per minute\n  };\n\n  // Rate limiting state\n  private rateTracking: Record<LogLevel, { count: number; resetTime: number }> =\n    {\n      [LogLevel.DEBUG]: { count: 0, resetTime: Date.now() },\n      [LogLevel.INFO]: { count: 0, resetTime: Date.now() },\n      [LogLevel.WARN]: { count: 0, resetTime: Date.now() },\n      [LogLevel.ERROR]: { count: 0, resetTime: Date.now() },\n      [LogLevel.SECURITY]: { count: 0, resetTime: Date.now() },\n      [LogLevel.PERFORMANCE]: { count: 0, resetTime: Date.now() },\n    };\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.appVersion = \"1.0.0\"; // Could be from app config\n    this.setupLogRotation();\n    void this.initializeEncryption();\n  }\n\n  /**\n   * Initialize encryption keys and storage\n   */\n  private async initializeEncryption(): Promise<void> {\n    try {\n      // Try to retrieve existing encryption keys\n      const storedKey = await Keychain.getGenericPassword({\n        service: this.ENCRYPTION_KEY_STORAGE_KEY,\n      });\n      const storedSalt = await Keychain.getGenericPassword({\n        service: this.ENCRYPTION_SALT_STORAGE_KEY,\n      });\n\n      if (storedKey && storedSalt) {\n        this.encryptionKey = storedKey.password;\n        this.encryptionSalt = storedSalt.password;\n      } else {\n        // Generate new encryption keys\n        const key = await this.generateSecureKey();\n        const salt = await this.generateSecureRandomBytes(\n          this.ENCRYPTION_KEY_SIZE,\n        );\n\n        // Store keys securely\n        await Keychain.setGenericPassword(\n          this.ENCRYPTION_KEY_STORAGE_KEY,\n          key,\n          { service: this.ENCRYPTION_KEY_STORAGE_KEY },\n        );\n        await Keychain.setGenericPassword(\n          this.ENCRYPTION_SALT_STORAGE_KEY,\n          salt,\n          { service: this.ENCRYPTION_SALT_STORAGE_KEY },\n        );\n\n        this.encryptionKey = key;\n        this.encryptionSalt = salt;\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      this.error(\"Failed to initialize encryption\", {\n        error: new Error(errorMessage),\n        component: \"Logger\",\n        action: \"initializeEncryption\",\n      });\n      // Fall back to unencrypted logging if encryption setup fails\n      this.encryptionKey = null;\n      this.encryptionSalt = null;\n    }\n  }\n\n  /**\n   * Compatibility helpers for observability service\n   */\n  setUserContext(\n    userId: string,\n    properties: Record<string, unknown> = {},\n  ): void {\n    // Update internal user info minimally\n    this.userInfo = { id: userId };\n    try {\n      sentry.setUser({ id: userId, ...properties });\n    } catch {\n      // ignore\n    }\n  }\n\n  clearUserContext(): void {\n    this.userInfo = null;\n    this.clearSentryContext();\n  }\n\n  /**\n   * Generate a secure random key for encryption\n   */\n  private async generateSecureKey(): Promise<string> {\n    try {\n      const randomBytes = await this.generateSecureRandomBytes(\n        this.ENCRYPTION_KEY_SIZE,\n      );\n      return await Aes.pbkdf2(\n        randomBytes,\n        this.encryptionSalt ??\n          (await this.generateSecureRandomBytes(this.ENCRYPTION_KEY_SIZE)),\n        10000, // Iterations\n        this.ENCRYPTION_KEY_SIZE,\n        \"sha256\", // Hash algorithm\n      );\n    } catch (error) {\n      throw new Error(\"Failed to generate secure key: \" + String(error));\n    }\n  }\n\n  /**\n   * Generate secure random bytes\n   */\n  private async generateSecureRandomBytes(size: number): Promise<string> {\n    try {\n      const key = await Aes.randomKey(size);\n      return key;\n    } catch (error) {\n      throw new Error(\"Failed to generate random bytes: \" + String(error));\n    }\n  }\n\n  /**\n   * Encrypt sensitive data\n   */\n  private async encryptData(data: string): Promise<EncryptedData> {\n    try {\n      if (!this.encryptionKey || !this.encryptionSalt) {\n        throw new Error(\"Encryption not initialized\");\n      }\n\n      const iv = await this.generateSecureRandomBytes(this.ENCRYPTION_IV_SIZE);\n      const ciphertext = await Aes.encrypt(\n        data,\n        this.encryptionKey,\n        iv,\n        \"aes-256-cbc\",\n      );\n\n      return {\n        ciphertext,\n        iv,\n      };\n    } catch (error) {\n      throw new Error(\"Encryption failed: \" + String(error));\n    }\n  }\n\n  /**\n   * Decrypt encrypted data\n   */\n  private async decryptData(encryptedData: EncryptedData): Promise<string> {\n    try {\n      if (!this.encryptionKey || !this.encryptionSalt) {\n        throw new Error(\"Encryption not initialized\");\n      }\n\n      const decrypted = await Aes.decrypt(\n        encryptedData.ciphertext,\n        this.encryptionKey,\n        encryptedData.iv,\n        \"aes-128-cbc\",\n      );\n\n      return decrypted;\n    } catch (error) {\n      throw new Error(\"Decryption failed: \" + String(error));\n    }\n  }\n\n  /**\n   * Set up periodic log rotation\n   */\n  private setupLogRotation(): void {\n    setInterval(() => {\n      if (this.logBuffer.length > 0) {\n        void this.rotateAndPersistLogs();\n      }\n    }, 60000); // Rotate every minute if needed\n  }\n\n  /**\n   * Rotate and persist logs securely\n   */\n  private async rotateAndPersistLogs(): Promise<void> {\n    try {\n      const logsToRotate = [...this.logBuffer];\n      this.logBuffer = [];\n\n      // Encrypt sensitive logs before persisting\n      const encryptedLogs = await Promise.all(\n        logsToRotate.map(async (log) =>\n          this.shouldEncryptLog(log) ? await this.encryptLogEntry(log) : log,\n        ),\n      );\n\n      // Here we could persist to secure storage or send to secure logging service\n      // For now, we'll just keep in memory with size limits\n      this.logBuffer = encryptedLogs.slice(-this.MAX_LOG_BUFFER_SIZE);\n    } catch (error) {\n      console.error(\n        \"Failed to rotate logs:\",\n        error instanceof Error ? error.message : String(error),\n      );\n    }\n  }\n\n  /**\n   * Check if log entry contains sensitive data requiring encryption\n   */\n  private shouldEncryptLog(log: StructuredLogEntry): boolean {\n    return (\n      log.level === LogLevel.SECURITY ||\n      log.metadata.userId !== undefined ||\n      log.metadata.sessionId !== undefined\n    );\n  }\n\n  /**\n   * Basic encryption for sensitive log entries\n   */\n  private async encryptLogEntry(\n    log: StructuredLogEntry,\n  ): Promise<StructuredLogEntry> {\n    try {\n      if (!this.encryptionKey) {\n        // Fall back to redaction if encryption is not available\n        return {\n          ...log,\n          message: \"[REDACTED] Encryption unavailable\",\n          metadata: {\n            timestamp: log.timestamp,\n            level: log.level,\n            isRedacted: true,\n          },\n        };\n      }\n\n      // Encrypt the sensitive parts\n      const encryptedData = await this.encryptData(\n        JSON.stringify({\n          message: log.message,\n          metadata: this.sanitizeMetadata(log.metadata),\n        }),\n      );\n\n      return {\n        ...log,\n        message: \"[ENCRYPTED]\",\n        metadata: {\n          ...log.metadata,\n          isEncrypted: true,\n          encryptedAt: new Date().toISOString(),\n          encryptedData: encryptedData,\n          integrity: {\n            hash: await this.generateHMAC(\n              log.message + JSON.stringify(log.metadata),\n            ),\n            timestamp: new Date().toISOString(),\n          },\n        },\n      };\n    } catch (error) {\n      // If encryption fails, redact sensitive data\n      this.error(\"Log encryption failed\", {\n        error: error instanceof Error ? error : new Error(String(error)),\n        component: \"Logger\",\n        action: \"encryptLogEntry\",\n      });\n\n      return {\n        ...log,\n        message: \"[REDACTED] Log encryption failed\",\n        metadata: {\n          timestamp: log.timestamp,\n          level: log.level,\n          isRedacted: true,\n          error: new Error(\"Encryption failed\"),\n        },\n      };\n    }\n  }\n\n  /**\n   * Generate HMAC for log integrity\n   */\n  private async generateHMAC(data: string): Promise<string> {\n    try {\n      if (!this.encryptionKey || !this.encryptionSalt) {\n        throw new Error(\"Encryption not initialized\");\n      }\n\n      const hmac = await Aes.hmac256(data, this.encryptionKey);\n      return hmac;\n    } catch (error) {\n      throw new Error(\"HMAC generation failed: \" + String(error));\n    }\n  }\n\n  private generateSessionId(): string {\n    const timestamp = Date.now();\n    const randomValue = Math.random().toString(36).substring(2, 10);\n    return `mobile_session_${timestamp.toString()}_${randomValue}`;\n  }\n\n  /**\n   * Sanitizes log data to comply with privacy regulations\n   */\n  private sanitizeMetadata(data?: Record<string, unknown>): LogMetadata {\n    if (data === undefined) {\n      return {};\n    }\n\n    const sanitized: LogMetadata = {};\n    const sensitiveFields = [\n      \"password\",\n      \"token\",\n      \"accessToken\",\n      \"refreshToken\",\n      \"secret\",\n      \"apiKey\",\n      \"authorization\",\n      \"auth\",\n      \"credentials\",\n      \"credit\",\n      \"card\",\n      \"ccv\",\n      \"cvv\",\n      \"ssn\",\n      \"social\",\n      \"address\",\n      \"phone\",\n      \"birth\",\n      \"zip\",\n      \"postal\",\n      \"payment\",\n    ];\n\n    const hashValue = (value: string): string => {\n      if (value === undefined || value === null || value === \"\") {\n        return \"empty\";\n      }\n      let hash = 0;\n      for (let i = 0; i < value.length; i++) {\n        const char = value.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash;\n      }\n      return hash.toString(16).substring(0, 8);\n    };\n\n    for (const [key, value] of Object.entries(data)) {\n      const lowerKey = key.toLowerCase();\n\n      if (sensitiveFields.some((field) => lowerKey.includes(field))) {\n        if (typeof value === \"string\" && value !== \"\") {\n          sanitized[key] = `[REDACTED:${hashValue(value)}]`;\n        } else {\n          sanitized[key] = \"[REDACTED]\";\n        }\n      } else if (value instanceof Error) {\n        // Process error safely\n        const stackLines = value.stack?.split(\"\\n\") ?? [];\n        const sensitivePatterns = [\n          /password=/i,\n          /api_?key=/i,\n          /secret=/i,\n          /token=/i,\n          /auth=/i,\n          /bearer /i,\n          /basic /i,\n          /\\/users\\/\\d+/i,\n          /\\b[\\w.%+-]+@[\\w.-]+\\.[A-Za-z]{2,}\\b/,\n          /\\b\\d{4}[- ]?\\d{4}[- ]?\\d{4}[- ]?\\d{4}\\b/,\n        ];\n\n        // Filter sensitive info from stack if in development\n        const sanitizedStack = this.isDevelopment\n          ? stackLines\n              .filter(\n                (line) =>\n                  !sensitivePatterns.some((pattern) => pattern.test(line)),\n              )\n              .join(\"\\n\")\n          : undefined;\n\n        sanitized[key] = {\n          message: value.message ?? \"Unknown error\",\n          stack: sanitizedStack,\n          name: value.name ?? \"Error\",\n          code: (value as Error & { code?: string }).code ?? \"UNKNOWN\",\n        };\n      } else if (value !== null && typeof value === \"object\") {\n        sanitized[key] = this.sanitizeMetadata(\n          value as Record<string, unknown>,\n        );\n      } else {\n        sanitized[key] = value;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private formatLogMessage(\n    level: LogLevel,\n    message: string,\n    metadata?: LogMetadata,\n  ): string {\n    const timestamp = new Date().toISOString();\n    const sanitized = this.sanitizeMetadata(metadata);\n\n    const parts = [`[${timestamp}]`, `[${level.toUpperCase()}]`, message];\n\n    if (Object.keys(sanitized).length > 0) {\n      parts.push(JSON.stringify(sanitized, null, 2));\n    }\n\n    return parts.join(\" \");\n  }\n\n  /**\n   * Core logging function\n   */\n  private validateLogEntry(message: string, metadata?: LogMetadata): boolean {\n    if (message.length === 0) {\n      return false;\n    }\n\n    // Check total log size\n    const totalSize = new TextEncoder().encode(\n      JSON.stringify({ message, metadata }),\n    ).length;\n\n    if (totalSize > this.MAX_LOG_SIZE) {\n      this.warn(\"Log entry exceeded maximum size limit\", {\n        size: totalSize,\n        limit: this.MAX_LOG_SIZE,\n        truncated: true,\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Check and update rate limits for a specific log level\n   */\n  private checkRateLimit(level: LogLevel): boolean {\n    if (this.isDevelopment) {\n      return true; // No rate limiting in development\n    }\n\n    const now = Date.now();\n    const tracking = this.rateTracking[level];\n    const limits = this.rateLimits[level];\n\n    // Reset if interval has passed\n    if (now - tracking.resetTime >= limits.interval) {\n      tracking.count = 0;\n      tracking.resetTime = now;\n    }\n\n    // Check if within limits\n    if (tracking.count >= limits.points) {\n      return false;\n    }\n\n    tracking.count++;\n    return true;\n  }\n\n  /**\n   * Apply general rate limiting with backoff\n   */\n  private applyRateLimit(): boolean {\n    if (this.isDevelopment) {\n      return true;\n    }\n\n    const now = Date.now();\n    const timeSinceLastLog = now - this.lastLogTime;\n\n    if (timeSinceLastLog < this.rateLimitBackoff) {\n      // Increase backoff for frequent logging\n      this.rateLimitBackoff = Math.min(this.rateLimitBackoff * 2, 5000);\n      return false;\n    }\n\n    // Reset backoff if enough time has passed\n    if (timeSinceLastLog > 1000) {\n      this.rateLimitBackoff = 100;\n    }\n\n    this.lastLogTime = now;\n    return true;\n  }\n\n  /**\n   * Add entry to offline buffer\n   */\n  private async bufferOfflineLog(entry: StructuredLogEntry): Promise<void> {\n    // Only buffer important logs\n    if (entry.level === LogLevel.DEBUG || entry.level === LogLevel.INFO) {\n      return;\n    }\n\n    try {\n      // Add to memory buffer\n      this.offlineBuffer.push(entry);\n\n      // Trim buffer if it exceeds size limit\n      if (this.offlineBuffer.length > this.MAX_OFFLINE_BUFFER_SIZE) {\n        // Keep most recent logs, removing oldest\n        this.offlineBuffer = this.offlineBuffer.slice(\n          -this.MAX_OFFLINE_BUFFER_SIZE,\n        );\n      }\n\n      // Persist to secure storage\n      const storageKey = `offline_log_${entry.timestamp}_${this.hashIdentifier(entry.message)}`;\n      const encryptedData = await this.encryptData(JSON.stringify(entry));\n\n      await EncryptedStorage.setItem(\n        storageKey,\n        JSON.stringify({\n          data: encryptedData,\n          timestamp: entry.timestamp,\n          level: entry.level,\n          hash: await this.generateHMAC(JSON.stringify(entry)),\n        }),\n      );\n\n      // Clean up old entries from storage\n      await this.cleanupOldOfflineLogs();\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      this.error(\"Failed to buffer offline log\", {\n        error: new Error(errorMessage),\n        component: \"Logger\",\n        action: \"bufferOfflineLog\",\n      });\n    }\n  }\n\n  /**\n   * Clean up old offline logs from secure storage\n   */\n  private async cleanupOldOfflineLogs(): Promise<void> {\n    try {\n      // Get all storage keys\n      const allKeys = Object.keys(\n        (await EncryptedStorage.getItem(\"__keys__\")) || {},\n      );\n      const offlineLogKeys = allKeys.filter((key): key is string =>\n        key.startsWith(\"offline_log_\"),\n      );\n\n      // Sort by timestamp (embedded in key)\n      offlineLogKeys.sort((a, b) => {\n        const [, , timestampA = \"0\"] = a.split(\"_\");\n        const [, , timestampB = \"0\"] = b.split(\"_\");\n        return timestampA.localeCompare(timestampB);\n      });\n\n      // Remove oldest entries if we exceed the limit\n      const logsToRemove = offlineLogKeys.slice(\n        0,\n        -this.MAX_OFFLINE_BUFFER_SIZE,\n      );\n      await Promise.all(\n        logsToRemove.map((key) => EncryptedStorage.removeItem(key)),\n      );\n\n      // Log cleanup\n      if (logsToRemove.length > 0) {\n        this.info(\"Cleaned up old offline logs\", {\n          component: \"Logger\",\n          action: \"cleanupOldOfflineLogs\",\n          removedCount: logsToRemove.length,\n        });\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      this.error(\"Failed to cleanup old offline logs\", {\n        error: new Error(errorMessage),\n        component: \"Logger\",\n        action: \"cleanupOldOfflineLogs\",\n      });\n    }\n  }\n\n  /**\n   * Load persisted offline logs from secure storage\n   */\n  /**\n   * Load persisted logs from secure storage on initialization\n   * @private\n   */\n  private async loadOfflineLogs(): Promise<void> {\n    try {\n      // Get all stored keys\n      const allKeys = Object.keys(\n        (await EncryptedStorage.getItem(\"__keys__\")) || {},\n      );\n      const offlineLogKeys = allKeys.filter((key: string): key is StorageKey =>\n        key.startsWith(\"offline_log_\"),\n      );\n\n      // Load and decrypt all logs\n      const encryptedLogs = await Promise.all(\n        offlineLogKeys.map(async (key: StorageKey) => {\n          try {\n            const encrypted = await EncryptedStorage.getItem(key);\n            if (!encrypted) return null;\n\n            const parsedItem = JSON.parse(encrypted) as EncryptedLogStorageItem;\n            return { key, ...parsedItem };\n          } catch (_error) {\n            // Clean up corrupted entries\n            await EncryptedStorage.removeItem(key);\n            return null;\n          }\n        }),\n      );\n\n      // Process valid logs\n      for (const log of encryptedLogs) {\n        if (!log) continue;\n\n        try {\n          const decrypted = await this.decryptData(log.data);\n          const entry = JSON.parse(decrypted) as StructuredLogEntry;\n\n          // Verify integrity\n          const calculatedHash = await this.generateHMAC(JSON.stringify(entry));\n          if (calculatedHash !== log.hash) {\n            this.error(\"Offline log integrity check failed\", {\n              error: new Error(\"Log tampering detected\"),\n              component: \"Logger\",\n              action: \"loadOfflineLogs\",\n              key: log.key,\n            });\n            await EncryptedStorage.removeItem(log.key);\n            continue;\n          }\n\n          this.offlineBuffer.push(entry);\n        } catch (decryptError) {\n          // Remove corrupted log\n          await EncryptedStorage.removeItem(log.key);\n          // Log error details\n          const errorMessage =\n            decryptError instanceof Error\n              ? decryptError.message\n              : String(decryptError);\n          this.error(\"Failed to decrypt offline log\", {\n            error: new Error(errorMessage),\n            component: \"Logger\",\n            action: \"loadOfflineLogs\",\n            key: log.key,\n          });\n        }\n      }\n\n      // Sort and trim buffer\n      this.offlineBuffer.sort((a, b) => a.timestamp.localeCompare(b.timestamp));\n      if (this.offlineBuffer.length > this.MAX_OFFLINE_BUFFER_SIZE) {\n        this.offlineBuffer = this.offlineBuffer.slice(\n          -this.MAX_OFFLINE_BUFFER_SIZE,\n        );\n      }\n\n      // Log success\n      this.info(\"Offline logs loaded successfully\", {\n        component: \"Logger\",\n        action: \"loadOfflineLogs\",\n        logsLoaded: this.offlineBuffer.length,\n      });\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      this.error(\"Failed to load offline logs\", {\n        error: new Error(errorMessage),\n        component: \"Logger\",\n        action: \"loadOfflineLogs\",\n      });\n    }\n  }\n\n  /**\n   * Get buffer metrics for monitoring\n   */\n  private getBufferMetrics(): LogBufferMetrics {\n    const criticalEntries = this.offlineBuffer.filter(\n      (entry) =>\n        entry.level === LogLevel.ERROR || entry.level === LogLevel.SECURITY,\n    ).length;\n\n    let oldestEntry: Date | null = null;\n    let latestEntry: Date | null = null;\n\n    if (this.offlineBuffer.length > 0) {\n      const firstEntry = this.offlineBuffer[0];\n      const lastEntry = this.offlineBuffer[this.offlineBuffer.length - 1];\n\n      if (firstEntry && firstEntry.timestamp) {\n        oldestEntry = new Date(firstEntry.timestamp);\n      }\n\n      if (lastEntry && lastEntry.timestamp) {\n        latestEntry = new Date(lastEntry.timestamp);\n      }\n    }\n\n    return {\n      totalEntries: this.offlineBuffer.length,\n      criticalEntries,\n      oldestEntry,\n      latestEntry,\n    };\n  }\n\n  private log(level: LogLevel, message: string, metadata?: LogMetadata): void {\n    // Skip debug logs in production\n    if (!this.isDevelopment && level === LogLevel.DEBUG) {\n      return;\n    }\n\n    // Validate log entry\n    if (!this.validateLogEntry(message, metadata)) {\n      return;\n    }\n\n    // Apply both general and level-specific rate limiting\n    if (!this.applyRateLimit() || !this.checkRateLimit(level)) {\n      // Buffer important logs that were rate limited\n      if (level === LogLevel.ERROR || level === LogLevel.SECURITY) {\n        const timestamp = new Date().toISOString();\n        void this.bufferOfflineLog({\n          message: `[Rate Limited] ${message}`,\n          level,\n          timestamp,\n          metadata: {\n            ...metadata,\n            rateLimited: true,\n            originalTimestamp: timestamp,\n          },\n        });\n      }\n      return;\n    }\n\n    // Add standard metadata\n    const enhancedMetadata: LogMetadata = {\n      timestamp: new Date().toISOString(),\n      sessionId: this.sessionId,\n      version: this.appVersion,\n      userId: this.userInfo?.id !== undefined ? this.userInfo.id : \"anonymous\",\n      ...metadata,\n      // Add security context\n      securityContext: {\n        environment: this.isDevelopment ? \"development\" : \"production\",\n        sessionHash: this.hashIdentifier(this.sessionId),\n        logId: this.hashIdentifier(`${level}_${String(Date.now())}_${message}`),\n      },\n    };\n\n    const formattedMessage = this.formatLogMessage(\n      level,\n      message,\n      enhancedMetadata,\n    );\n    const sanitized = this.sanitizeMetadata(enhancedMetadata);\n\n    // Create structured log entry\n    const logEntry: StructuredLogEntry = {\n      message,\n      level,\n      timestamp: enhancedMetadata.timestamp ?? new Date().toISOString(),\n      metadata: sanitized,\n    };\n\n    // Add to buffer for potential offline persistence\n    void this.bufferOfflineLog(logEntry);\n\n    // Console logging (only in development) - using logger methods instead of console\n    if (this.isDevelopment) {\n      switch (level) {\n        case LogLevel.DEBUG:\n          // Use console.warn for debug in development\n          console.warn(formattedMessage);\n          break;\n        case LogLevel.INFO:\n          // Use console.warn for info in development\n          console.warn(formattedMessage);\n          break;\n        case LogLevel.WARN:\n          console.warn(formattedMessage);\n          break;\n        case LogLevel.ERROR:\n          console.error(formattedMessage);\n          break;\n        case LogLevel.SECURITY:\n          console.warn(`🔒 ${formattedMessage}`);\n          break;\n        case LogLevel.PERFORMANCE:\n          console.warn(`⚡ ${formattedMessage}`);\n          break;\n      }\n    }\n\n    // Send to Sentry for errors and security events with enhanced context\n    if (level === LogLevel.ERROR || level === LogLevel.SECURITY) {\n      try {\n        // Create secure fingerprint for error grouping\n        const fingerprint = this.generateErrorFingerprint(message, metadata);\n\n        if (metadata?.error instanceof Error) {\n          // Enhanced error capture with secure context\n          sentry.captureException(metadata.error, {\n            extra: sanitized,\n            tags: {\n              logLevel: level,\n              errorType: metadata.error.name,\n              errorCode: (metadata.error as Error & { code?: string }).code,\n              ...(metadata.tags !== undefined\n                ? Object.fromEntries(metadata.tags.map((tag) => [tag, true]))\n                : {}),\n            },\n            fingerprint,\n            // Add secure transaction data if available\n            ...(metadata.correlationId\n              ? {\n                  transaction: `${metadata.component ?? \"unknown\"}.${metadata.action ?? \"action\"}`,\n                  transactionHash: this.hashIdentifier(metadata.correlationId),\n                }\n              : {}),\n          });\n        } else {\n          const sentryLevel =\n            String(level) === \"security\" ? \"warning\" : \"error\";\n\n          // Set secure context before capturing message\n          const secureContext = {\n            ...sanitized,\n            timestamp: new Date().toISOString(),\n            sessionHash: this.hashIdentifier(this.sessionId),\n            environment: this.isDevelopment ? \"development\" : \"production\",\n          };\n\n          sentry.setContext(\"metadata\", secureContext);\n          sentry.captureMessage(message, sentryLevel);\n        }\n\n        // Clean up sensitive context after sending\n        this.clearSentryContext();\n      } catch (error) {\n        // Fallback to console if Sentry fails\n        if (this.isDevelopment) {\n          console.error(\n            \"Failed to send to Sentry:\",\n            error instanceof Error ? error.message : String(error),\n          );\n        }\n      }\n    }\n  }\n\n  debug(message: string, metadata?: LogMetadata): void {\n    this.log(LogLevel.DEBUG, message, metadata);\n  }\n\n  info(message: string, metadata?: LogMetadata): void {\n    this.log(LogLevel.INFO, message, metadata);\n  }\n\n  warn(message: string, metadata?: LogMetadata): void {\n    this.log(LogLevel.WARN, message, metadata);\n  }\n\n  error(message: string, metadata?: LogMetadata): void {\n    this.log(LogLevel.ERROR, message, metadata);\n  }\n\n  /**\n   * Log security-related events\n   */\n  security(message: string, metadata?: LogMetadata): void {\n    this.log(LogLevel.SECURITY, message, {\n      ...metadata,\n      tags: [\n        ...(metadata?.tags !== undefined && metadata.tags !== null\n          ? metadata.tags\n          : []),\n        \"security\",\n      ],\n    });\n  }\n\n  /**\n   * Log performance metrics\n   */\n  performance(\n    operation: string,\n    durationMs: number,\n    metadata?: LogMetadata,\n  ): void {\n    this.log(\n      LogLevel.PERFORMANCE,\n      `${operation} completed in ${String(durationMs)}ms`,\n      {\n        ...metadata,\n        duration: durationMs,\n        operation,\n        tags: [\n          ...(metadata?.tags !== undefined && metadata.tags !== null\n            ? metadata.tags\n            : []),\n          \"performance\",\n        ],\n      },\n    );\n  }\n\n  /**\n   * Create a performance timer that logs when stopped\n   */\n  startTimer(operation: string): () => void {\n    const startTime = Date.now();\n    return (metadata?: LogMetadata) => {\n      const duration = Math.round(Date.now() - startTime);\n      this.performance(operation, duration, metadata);\n    };\n  }\n\n  /**\n   * Set user context for logging systems\n   */\n  setUser(user: { id: string; email: string; username: string }): void {\n    if (\n      user === undefined ||\n      user === null ||\n      user.id === undefined ||\n      user.id === null ||\n      user.id === \"\" ||\n      user.email === undefined ||\n      user.email === null ||\n      user.email === \"\" ||\n      user.username === undefined ||\n      user.username === null ||\n      user.username === \"\"\n    ) {\n      throw new Error(\"Invalid user data provided to logger\");\n    }\n\n    this.userInfo = user;\n\n    // Update Sentry user context\n    sentry.setUser({\n      id: user.id,\n      email: user.email,\n      username: user.username,\n    });\n\n    this.info(\"User context set\", {\n      userId: user.id,\n      tags: [\"user-context\"],\n      level: LogLevel.INFO,\n    } as LogMetadata);\n  }\n\n  /**\n   * Add breadcrumb for tracing and debugging\n   */\n  addBreadcrumb(\n    message: string,\n    category: string,\n    data?: Record<string, unknown>,\n  ): void {\n    const sanitizedData = this.sanitizeMetadata(data);\n\n    // Add secure breadcrumb with enhanced context\n    try {\n      const secureBreadcrumb = {\n        message: this.truncateString(message, 1000), // Limit message size\n        category: this.validateCategory(category),\n        data: sanitizedData,\n        level: \"info\",\n        timestamp: Date.now() / 1000,\n        // Add security context\n        sessionHash: this.hashIdentifier(this.sessionId),\n        sourceComponent: data?.[\"component\"] ?? \"unknown\",\n      };\n\n      sentry.addBreadcrumb(secureBreadcrumb);\n\n      // Debug log the breadcrumb in development\n      if (this.isDevelopment) {\n        this.debug(`Breadcrumb: ${message}`, {\n          category,\n          ...sanitizedData,\n          securityHash: this.hashIdentifier(message),\n        });\n      }\n    } catch (error) {\n      // Fail silently but log locally\n      if (this.isDevelopment) {\n        console.warn(\n          \"Failed to add breadcrumb:\",\n          error instanceof Error ? error.message : String(error),\n        );\n      }\n    }\n  }\n\n  // ===== SECURITY CONTROLS =====\n\n  async exportAuditLogs(\n    options: AuditLogRequest = {},\n  ): Promise<AuditLogExport> {\n    try {\n      const {\n        startDate,\n        endDate = new Date(),\n        levels = Object.values(LogLevel),\n        includeMetrics = false,\n      } = options;\n\n      // Validate inputs\n      if (endDate < (startDate ?? new Date(0))) {\n        throw new Error(\"End date must be after start date\");\n      }\n\n      // Filter and sanitize logs with proper type handling\n      const filteredLogs = [...this.logBuffer, ...this.offlineBuffer]\n        .filter((entry) => {\n          if (!entry.timestamp) {\n            return false;\n          }\n          const entryDate = new Date(entry.timestamp);\n          if (isNaN(entryDate.getTime())) {\n            return false;\n          }\n          const matchesDate = startDate\n            ? entryDate >= startDate && entryDate <= endDate\n            : true;\n          const matchesLevel = levels.includes(entry.level);\n          return matchesDate && matchesLevel;\n        })\n        .map((entry) => ({\n          ...entry,\n          metadata: this.sanitizeMetadata(entry.metadata),\n        }));\n\n      const baseFilters: AuditLogFilters = {\n        startDate: (startDate ?? new Date(0)).toISOString(),\n        endDate: endDate.toISOString(),\n        levels,\n        includeMetrics,\n        contentHash: \"\",\n        totalEntries: 0,\n      };\n\n      const exportData: AuditLogExport = {\n        logs: filteredLogs,\n        ...(includeMetrics ? { metrics: this.getBufferMetrics() } : {}),\n        exportMetadata: {\n          timestamp: new Date().toISOString(),\n          exportId: this.hashIdentifier(`audit_${Date.now()}`),\n          filters: baseFilters,\n        },\n      };\n\n      // Add integrity verification\n      const contentHash = this.hashIdentifier(JSON.stringify(exportData.logs));\n      exportData.exportMetadata.filters.contentHash = contentHash;\n      exportData.exportMetadata.filters.totalEntries = filteredLogs.length;\n\n      // Log export attempt for security audit\n      this.security(\"Audit logs exported\", {\n        exportId: exportData.exportMetadata.exportId,\n        entriesCount: filteredLogs.length,\n        timeRange: {\n          start: startDate?.toISOString(),\n          end: endDate.toISOString(),\n        },\n        contentHash,\n      });\n\n      return exportData;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      this.error(\"Failed to export audit logs\", {\n        error: new Error(errorMessage),\n        options,\n      });\n      throw new Error(\"Audit log export failed: \" + errorMessage);\n    }\n  }\n\n  /**\n   * Generate a secure fingerprint for error grouping\n   */\n  private generateErrorFingerprint(\n    message: string,\n    metadata?: LogMetadata,\n  ): string[] {\n    const components = [\n      metadata?.component ?? \"unknown\",\n      metadata?.action ?? \"action\",\n      // Hash message to normalize it for grouping\n      this.hashIdentifier(message),\n    ];\n\n    if (metadata?.error instanceof Error) {\n      components.push(\n        metadata.error.name,\n        (metadata.error as Error & { code?: string }).code ?? \"UNKNOWN\",\n      );\n    }\n\n    if (metadata?.tags !== undefined) {\n      components.push(...metadata.tags);\n    }\n\n    return components;\n  }\n\n  /**\n   * Create a secure hash for identifiers\n   */\n  private hashIdentifier(value: string): string {\n    // Simple but consistent hashing for grouping\n    let hash = 0;\n    for (let i = 0; i < value.length; i++) {\n      const char = value.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash;\n    }\n    return hash.toString(36).substring(0, 8);\n  }\n\n  /**\n   * Clear sensitive context data from Sentry\n   */\n  private clearSentryContext(): void {\n    try {\n      sentry.setContext(\"metadata\", {});\n      sentry.setUser({});\n    } catch {\n      // Ignore cleanup errors\n    }\n  }\n\n  /**\n   * Export logs securely for audit purposes with enhanced security and validation\n   */\n  async exportSecureAuditLogs(\n    options: {\n      startDate?: Date | undefined;\n      endDate?: Date | undefined;\n      levels?: LogLevel[] | undefined;\n      includeMetrics?: boolean | undefined;\n    } = {},\n  ): Promise<{\n    logs: StructuredLogEntry[];\n    metrics: LogBufferMetrics;\n    exportMetadata: {\n      timestamp: string;\n      exportId: string;\n      filters: AuditLogFilters;\n    };\n  }> {\n    try {\n      const {\n        startDate,\n        endDate = new Date(),\n        levels = Object.values(LogLevel),\n        includeMetrics = false,\n      } = options;\n\n      // Validate input dates\n      if (endDate < (startDate ?? new Date(0))) {\n        throw new Error(\"End date must be after start date\");\n      }\n\n      // Create a secure copy of logs with filtering\n      const filteredLogs = [...this.logBuffer, ...this.offlineBuffer]\n        .filter((entry) => {\n          if (!entry.timestamp) {\n            return false;\n          }\n          const entryDate = new Date(entry.timestamp);\n          if (isNaN(entryDate.getTime())) {\n            return false;\n          }\n          const matchesDate = startDate\n            ? entryDate >= startDate && entryDate <= endDate\n            : true;\n          const matchesLevel = levels.includes(entry.level);\n          return matchesDate && matchesLevel;\n        })\n        .map((entry) => ({\n          ...entry,\n          metadata: this.sanitizeMetadata(entry.metadata),\n        }));\n\n      // Get current metrics\n      const metrics = this.getBufferMetrics();\n\n      // Calculate integrity hash\n      const contentHash = this.hashIdentifier(JSON.stringify(filteredLogs));\n\n      const exportData = {\n        logs: filteredLogs,\n        metrics,\n        exportMetadata: {\n          timestamp: new Date().toISOString(),\n          exportId: this.hashIdentifier(`audit_${Date.now()}`),\n          filters: {\n            startDate: startDate?.toISOString() ?? undefined,\n            endDate: endDate.toISOString(),\n            levels,\n            includeMetrics,\n            contentHash,\n            totalEntries: filteredLogs.length,\n          } as AuditLogFilters,\n        },\n      };\n\n      // Log export attempt for security audit\n      this.security(\"Audit logs exported\", {\n        exportId: exportData.exportMetadata.exportId,\n        entriesCount: filteredLogs.length,\n        timeRange: {\n          start: startDate?.toISOString() ?? \"beginning\",\n          end: endDate.toISOString(),\n        },\n        contentHash,\n      });\n\n      return exportData;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      this.error(\"Failed to export audit logs\", {\n        error: new Error(errorMessage),\n        options,\n      });\n      throw new Error(\"Audit log export failed: \" + errorMessage);\n    }\n  }\n\n  /**\n   * Validate and sanitize category strings\n   */\n  private validateCategory(category: string): string {\n    // Only allow alphanumeric and basic punctuation\n    return category.replace(/[^a-zA-Z0-9_.-]/g, \"_\").substring(0, 100); // Limit length\n  }\n\n  /**\n   * Safely truncate strings to prevent oversized logs\n   */\n  private truncateString(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + \"...\";\n  }\n\n  /**\n   * Track feature usage\n   */\n  /**\n   * Track feature usage with security context\n   */\n  trackFeature(feature: string, metadata?: LogMetadata): void {\n    const enhancedMetadata = {\n      ...metadata,\n      feature,\n      tags: [\n        ...(metadata?.tags !== undefined ? metadata.tags : []),\n        \"feature-usage\",\n      ],\n      // Add security tracking\n      trackingId: this.hashIdentifier(`${feature}_${Date.now()}`),\n      featureHash: this.hashIdentifier(feature),\n      // Add execution context\n      timestamp: new Date().toISOString(),\n      sessionHash: this.hashIdentifier(this.sessionId),\n    };\n\n    this.info(`Feature used: ${feature}`, enhancedMetadata);\n  }\n\n  // ===== SECURITY CONTROLS =====\n\n  /**\n   * Rate limiting for log messages\n   */\n  private lastLogTime: number = 0;\n  // Rate limiting now uses dynamic backoff via rateLimitBackoff\n\n  /**\n   * Structured logging for security events\n   */\n  /**\n   * Structured logging for security events with enhanced context and validation\n   */\n  logSecurityEvent(event: string, details: Record<string, unknown>): void {\n    // Validate event name\n    const safeEvent = this.validateCategory(event);\n    const sanitizedDetails = this.sanitizeMetadata(details);\n\n    // Add security-specific context\n    const enhancedDetails = {\n      ...sanitizedDetails,\n      eventType: safeEvent,\n      timestamp: new Date().toISOString(),\n      sessionHash: this.hashIdentifier(this.sessionId),\n      securityLevel: \"standard\",\n      // Add security scanning markers\n      contentHash: this.hashIdentifier(JSON.stringify(sanitizedDetails)),\n      // Add execution context\n      component: String(details[\"component\"] ?? \"unknown\"),\n      action: String(details[\"action\"] ?? \"unknown\"),\n      // Add tracking\n      eventId: this.hashIdentifier(`${safeEvent}_${Date.now()}`),\n      environmentHash: this.hashIdentifier(\n        this.isDevelopment ? \"development\" : \"production\",\n      ),\n    };\n\n    this.security(`Security Event: ${safeEvent}`, enhancedDetails);\n\n    // Clear sensitive context after logging\n    this.clearSentryContext();\n  }\n}\n\nexport const logger = new MobileLogger();\n"],"mappings":"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","ignoreList":[]}