0e47619415a771305619c03aae2d951a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_OPTIONS = void 0;
exports.captureAndProcessImage = captureAndProcessImage;
exports.checkUploadQuota = checkUploadQuota;
exports.pickAndProcessImage = pickAndProcessImage;
exports.processImageForUpload = processImageForUpload;
exports.uploadWithRetry = uploadWithRetry;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _logger = require("./logger");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DEFAULT_OPTIONS = exports.DEFAULT_OPTIONS = {
  maxDimension: 2048,
  quality: 0.9,
  aspectRatio: [4, 3],
  stripExif: true,
  cropToAspect: true
};
function validateMimeType(_x) {
  return _validateMimeType.apply(this, arguments);
}
function _validateMimeType() {
  _validateMimeType = (0, _asyncToGenerator2.default)(function* (uri) {
    try {
      var fileInfo = yield FileSystem.getInfoAsync(uri);
      var isFile = fileInfo.exists && !fileInfo.isDirectory;
      if (isFile) {
        var ext = uri.split('.').pop();
        var validExtensions = ['jpg', 'jpeg', 'png', 'webp'];
        var mimeTypes = {
          jpg: 'image/jpeg',
          jpeg: 'image/jpeg',
          png: 'image/png',
          webp: 'image/webp'
        };
        if (typeof ext === 'string') {
          var normalizedExt = ext.toLowerCase();
          if (validExtensions.includes(normalizedExt)) {
            return {
              valid: true,
              mimeType: mimeTypes[normalizedExt]
            };
          }
        }
      }
      return {
        valid: false,
        mimeType: 'unknown'
      };
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('MIME validation error', {
        error: err
      });
      return {
        valid: false,
        mimeType: 'unknown'
      };
    }
  });
  return _validateMimeType.apply(this, arguments);
}
function fixOrientation(_x2) {
  return _fixOrientation.apply(this, arguments);
}
function _fixOrientation() {
  _fixOrientation = (0, _asyncToGenerator2.default)(function* (imageUri) {
    try {
      var result = yield ImageManipulator.manipulateAsync(imageUri, [], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
      return result.uri;
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Orientation fix error', {
        error: err
      });
      return imageUri;
    }
  });
  return _fixOrientation.apply(this, arguments);
}
function resizeImage(_x3, _x4) {
  return _resizeImage.apply(this, arguments);
}
function _resizeImage() {
  _resizeImage = (0, _asyncToGenerator2.default)(function* (imageUri, maxDimension) {
    try {
      var manipulateResult = yield ImageManipulator.manipulateAsync(imageUri, [], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
      var width = manipulateResult.width,
        height = manipulateResult.height;
      var newWidth = width;
      var newHeight = height;
      if (width > maxDimension || height > maxDimension) {
        if (width > height) {
          newWidth = maxDimension;
          newHeight = Math.round(height / width * maxDimension);
        } else {
          newHeight = maxDimension;
          newWidth = Math.round(width / height * maxDimension);
        }
      }
      if (newWidth < width || newHeight < height) {
        return yield ImageManipulator.manipulateAsync(imageUri, [{
          resize: {
            width: newWidth,
            height: newHeight
          }
        }], {
          compress: 1,
          format: ImageManipulator.SaveFormat.JPEG
        });
      }
      return manipulateResult;
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Resize error', {
        error: err
      });
      throw err;
    }
  });
  return _resizeImage.apply(this, arguments);
}
function cropToAspectRatio(_x5, _x6, _x7, _x8) {
  return _cropToAspectRatio.apply(this, arguments);
}
function _cropToAspectRatio() {
  _cropToAspectRatio = (0, _asyncToGenerator2.default)(function* (imageUri, aspectRatio, width, height) {
    try {
      var _aspectRatio = (0, _slicedToArray2.default)(aspectRatio, 2),
        targetWidth = _aspectRatio[0],
        targetHeight = _aspectRatio[1];
      var targetAspect = targetWidth / targetHeight;
      var imageAspect = width / height;
      var cropRegion = {
        crop: {
          originX: 0,
          originY: 0,
          width: width,
          height: height
        }
      };
      if (Math.abs(imageAspect - targetAspect) > 0.01) {
        if (imageAspect > targetAspect) {
          var newWidth = height * targetAspect;
          var originX = (width - newWidth) / 2;
          cropRegion = {
            crop: {
              originX: originX,
              originY: 0,
              width: newWidth,
              height: height
            }
          };
        } else {
          var newHeight = width / targetAspect;
          var originY = (height - newHeight) / 2;
          cropRegion = {
            crop: {
              originX: 0,
              originY: originY,
              width: width,
              height: newHeight
            }
          };
        }
      }
      return yield ImageManipulator.manipulateAsync(imageUri, [cropRegion], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Crop error', {
        error: err
      });
      throw err;
    }
  });
  return _cropToAspectRatio.apply(this, arguments);
}
function compressImage(_x9, _x0) {
  return _compressImage.apply(this, arguments);
}
function _compressImage() {
  _compressImage = (0, _asyncToGenerator2.default)(function* (imageUri, quality) {
    try {
      return yield ImageManipulator.manipulateAsync(imageUri, [], {
        compress: quality,
        format: ImageManipulator.SaveFormat.JPEG
      });
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Compress error', {
        error: err
      });
      throw err;
    }
  });
  return _compressImage.apply(this, arguments);
}
function getFileInfo(_x1) {
  return _getFileInfo.apply(this, arguments);
}
function _getFileInfo() {
  _getFileInfo = (0, _asyncToGenerator2.default)(function* (uri) {
    try {
      var info = yield FileSystem.getInfoAsync(uri);
      if (info.exists && 'size' in info) {
        return {
          size: info.size,
          exists: info.exists
        };
      }
      return {
        size: 0,
        exists: false
      };
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('File info error', {
        error: err
      });
      return {
        size: 0,
        exists: false
      };
    }
  });
  return _getFileInfo.apply(this, arguments);
}
function processImageForUpload(_x10) {
  return _processImageForUpload.apply(this, arguments);
}
function _processImageForUpload() {
  _processImageForUpload = (0, _asyncToGenerator2.default)(function* (imageUri) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var opts = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);
    try {
      _logger.logger.info('Starting upload hygiene processing', {
        uri: imageUri
      });
      var mimeValidation = yield validateMimeType(imageUri);
      if (!mimeValidation.valid) {
        throw new Error(`Invalid file type: ${mimeValidation.mimeType}`);
      }
      _logger.logger.debug('MIME type validated', {
        mimeType: mimeValidation.mimeType
      });
      var orientationFixed = yield fixOrientation(imageUri);
      _logger.logger.debug('Orientation fixed');
      var initialManipulate = yield ImageManipulator.manipulateAsync(orientationFixed, [], {
        compress: 1,
        format: ImageManipulator.SaveFormat.JPEG
      });
      var originalWidth = initialManipulate.width;
      var originalHeight = initialManipulate.height;
      _logger.logger.debug('Original dimensions', {
        width: originalWidth,
        height: originalHeight
      });
      var resized = yield resizeImage(orientationFixed, opts.maxDimension);
      _logger.logger.debug('Image resized', {
        width: resized.width,
        height: resized.height
      });
      var cropped = resized;
      if (opts.cropToAspect) {
        cropped = yield cropToAspectRatio(resized.uri, opts.aspectRatio, resized.width, resized.height);
        _logger.logger.debug('Image cropped', {
          aspectRatio: opts.aspectRatio
        });
      }
      var compressed = yield compressImage(cropped.uri, opts.quality);
      _logger.logger.debug('Image compressed', {
        quality: opts.quality
      });
      var fileInfo = yield getFileInfo(compressed.uri);
      var result = {
        uri: compressed.uri,
        width: compressed.width,
        height: compressed.height,
        fileSize: fileInfo.size,
        mimeType: 'image/jpeg',
        metadata: {
          originalWidth: originalWidth,
          originalHeight: originalHeight,
          orientationFixed: true,
          exifStripped: opts.stripExif ? true : false
        }
      };
      _logger.logger.info('Upload hygiene complete', {
        finalSize: `${result.width}x${result.height}`,
        fileSize: `${(result.fileSize / 1024).toFixed(2)} KB`,
        mimeType: result.mimeType,
        metadata: result.metadata
      });
      return result;
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Upload hygiene processing failed', {
        error: err
      });
      throw err;
    }
  });
  return _processImageForUpload.apply(this, arguments);
}
function pickAndProcessImage() {
  return _pickAndProcessImage.apply(this, arguments);
}
function _pickAndProcessImage() {
  _pickAndProcessImage = (0, _asyncToGenerator2.default)(function* () {
    var allowEditing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    try {
      var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),
        status = _yield$ImagePicker$re.status;
      if (status !== 'granted') {
        throw new Error('Camera roll permissions not granted');
      }
      var result = yield ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: allowEditing,
        quality: 1,
        allowsMultipleSelection: false
      });
      if (result.canceled || !result.assets[0]) {
        return null;
      }
      var asset = result.assets[0];
      return yield processImageForUpload(asset.uri, options);
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Pick and process error', {
        error: err
      });
      throw err;
    }
  });
  return _pickAndProcessImage.apply(this, arguments);
}
function captureAndProcessImage() {
  return _captureAndProcessImage.apply(this, arguments);
}
function _captureAndProcessImage() {
  _captureAndProcessImage = (0, _asyncToGenerator2.default)(function* () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    try {
      var _yield$ImagePicker$re2 = yield ImagePicker.requestCameraPermissionsAsync(),
        status = _yield$ImagePicker$re2.status;
      if (status !== 'granted') {
        throw new Error('Camera permissions not granted');
      }
      var result = yield ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: false,
        quality: 1
      });
      if (result.canceled || !result.assets[0]) {
        return null;
      }
      var asset = result.assets[0];
      return yield processImageForUpload(asset.uri, options);
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Capture and process error', {
        error: err
      });
      throw err;
    }
  });
  return _captureAndProcessImage.apply(this, arguments);
}
function checkUploadQuota(_x11) {
  return _checkUploadQuota.apply(this, arguments);
}
function _checkUploadQuota() {
  _checkUploadQuota = (0, _asyncToGenerator2.default)(function* (userId) {
    try {
      return {
        allowed: true,
        remaining: 10,
        resetAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
        limit: 10
      };
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Quota check error', {
        error: err,
        userId: userId
      });
      throw err;
    }
  });
  return _checkUploadQuota.apply(this, arguments);
}
function uploadWithRetry(_x12) {
  return _uploadWithRetry.apply(this, arguments);
}
function _uploadWithRetry() {
  _uploadWithRetry = (0, _asyncToGenerator2.default)(function* (uploadFn) {
    var maxRetries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
    var backoffMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;
    var lastError = null;
    var _loop = function* _loop() {
        try {
          return {
            v: yield uploadFn()
          };
        } catch (error) {
          lastError = error instanceof Error ? error : new Error(String(error));
          if (attempt < maxRetries) {
            var delay = backoffMs * Math.pow(2, attempt - 1);
            _logger.logger.warn('Upload failed, retrying', {
              delay: delay,
              attempt: attempt,
              maxRetries: maxRetries,
              error: lastError
            });
            yield new Promise(function (resolve) {
              return setTimeout(resolve, delay);
            });
          }
        }
      },
      _ret;
    for (var attempt = 1; attempt <= maxRetries; attempt++) {
      _ret = yield* _loop();
      if (_ret) return _ret.v;
    }
    throw lastError || new Error('Upload failed after retries');
  });
  return _uploadWithRetry.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbWFnZVBpY2tlciIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIkltYWdlTWFuaXB1bGF0b3IiLCJGaWxlU3lzdGVtIiwiX2xvZ2dlciIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib3duS2V5cyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJERUZBVUxUX09QVElPTlMiLCJleHBvcnRzIiwibWF4RGltZW5zaW9uIiwicXVhbGl0eSIsImFzcGVjdFJhdGlvIiwic3RyaXBFeGlmIiwiY3JvcFRvQXNwZWN0IiwidmFsaWRhdGVNaW1lVHlwZSIsIl94IiwiX3ZhbGlkYXRlTWltZVR5cGUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJ1cmkiLCJmaWxlSW5mbyIsImdldEluZm9Bc3luYyIsImlzRmlsZSIsImV4aXN0cyIsImlzRGlyZWN0b3J5IiwiZXh0Iiwic3BsaXQiLCJwb3AiLCJ2YWxpZEV4dGVuc2lvbnMiLCJtaW1lVHlwZXMiLCJqcGciLCJqcGVnIiwicG5nIiwid2VicCIsIm5vcm1hbGl6ZWRFeHQiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwidmFsaWQiLCJtaW1lVHlwZSIsImVycm9yIiwiZXJyIiwiRXJyb3IiLCJTdHJpbmciLCJsb2dnZXIiLCJmaXhPcmllbnRhdGlvbiIsIl94MiIsIl9maXhPcmllbnRhdGlvbiIsImltYWdlVXJpIiwicmVzdWx0IiwibWFuaXB1bGF0ZUFzeW5jIiwiY29tcHJlc3MiLCJmb3JtYXQiLCJTYXZlRm9ybWF0IiwiSlBFRyIsInJlc2l6ZUltYWdlIiwiX3gzIiwiX3g0IiwiX3Jlc2l6ZUltYWdlIiwibWFuaXB1bGF0ZVJlc3VsdCIsIndpZHRoIiwiaGVpZ2h0IiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJNYXRoIiwicm91bmQiLCJyZXNpemUiLCJjcm9wVG9Bc3BlY3RSYXRpbyIsIl94NSIsIl94NiIsIl94NyIsIl94OCIsIl9jcm9wVG9Bc3BlY3RSYXRpbyIsIl9hc3BlY3RSYXRpbyIsIl9zbGljZWRUb0FycmF5MiIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwidGFyZ2V0QXNwZWN0IiwiaW1hZ2VBc3BlY3QiLCJjcm9wUmVnaW9uIiwiY3JvcCIsIm9yaWdpblgiLCJvcmlnaW5ZIiwiYWJzIiwiY29tcHJlc3NJbWFnZSIsIl94OSIsIl94MCIsIl9jb21wcmVzc0ltYWdlIiwiZ2V0RmlsZUluZm8iLCJfeDEiLCJfZ2V0RmlsZUluZm8iLCJpbmZvIiwic2l6ZSIsInByb2Nlc3NJbWFnZUZvclVwbG9hZCIsIl94MTAiLCJfcHJvY2Vzc0ltYWdlRm9yVXBsb2FkIiwib3B0aW9ucyIsInVuZGVmaW5lZCIsIm9wdHMiLCJtaW1lVmFsaWRhdGlvbiIsImRlYnVnIiwib3JpZW50YXRpb25GaXhlZCIsImluaXRpYWxNYW5pcHVsYXRlIiwib3JpZ2luYWxXaWR0aCIsIm9yaWdpbmFsSGVpZ2h0IiwicmVzaXplZCIsImNyb3BwZWQiLCJjb21wcmVzc2VkIiwiZmlsZVNpemUiLCJtZXRhZGF0YSIsImV4aWZTdHJpcHBlZCIsImZpbmFsU2l6ZSIsInRvRml4ZWQiLCJwaWNrQW5kUHJvY2Vzc0ltYWdlIiwiX3BpY2tBbmRQcm9jZXNzSW1hZ2UiLCJhbGxvd0VkaXRpbmciLCJfeWllbGQkSW1hZ2VQaWNrZXIkcmUiLCJyZXF1ZXN0TWVkaWFMaWJyYXJ5UGVybWlzc2lvbnNBc3luYyIsInN0YXR1cyIsImxhdW5jaEltYWdlTGlicmFyeUFzeW5jIiwibWVkaWFUeXBlcyIsIk1lZGlhVHlwZU9wdGlvbnMiLCJJbWFnZXMiLCJhbGxvd3NFZGl0aW5nIiwiYWxsb3dzTXVsdGlwbGVTZWxlY3Rpb24iLCJjYW5jZWxlZCIsImFzc2V0cyIsImFzc2V0IiwiY2FwdHVyZUFuZFByb2Nlc3NJbWFnZSIsIl9jYXB0dXJlQW5kUHJvY2Vzc0ltYWdlIiwiX3lpZWxkJEltYWdlUGlja2VyJHJlMiIsInJlcXVlc3RDYW1lcmFQZXJtaXNzaW9uc0FzeW5jIiwibGF1bmNoQ2FtZXJhQXN5bmMiLCJjaGVja1VwbG9hZFF1b3RhIiwiX3gxMSIsIl9jaGVja1VwbG9hZFF1b3RhIiwidXNlcklkIiwiYWxsb3dlZCIsInJlbWFpbmluZyIsInJlc2V0QXQiLCJEYXRlIiwibm93IiwibGltaXQiLCJ1cGxvYWRXaXRoUmV0cnkiLCJfeDEyIiwiX3VwbG9hZFdpdGhSZXRyeSIsInVwbG9hZEZuIiwibWF4UmV0cmllcyIsImJhY2tvZmZNcyIsImxhc3RFcnJvciIsIl9sb29wIiwidiIsImF0dGVtcHQiLCJkZWxheSIsInBvdyIsIndhcm4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJfcmV0Il0sInNvdXJjZXMiOlsidXBsb2FkSHlnaWVuZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVwbG9hZCBIeWdpZW5lIFNlcnZpY2UgLSBDbGllbnQtU2lkZSBQcmUtVXBsb2FkIFByb2Nlc3NpbmdcbiAqIFxuICogSW1wbGVtZW50cyBwcm9mZXNzaW9uYWwtZ3JhZGUgdXBsb2FkIGh5Z2llbmUgYXMgcGVyIGJsdWVwcmludDpcbiAqIC0gRmlsZSB0eXBlIHZhbGlkYXRpb24gKE1JTUUgc25pZmZpbmcpXG4gKiAtIEVYSUYgb3JpZW50YXRpb24gZml4XG4gKiAtIE1heCBkaW1lbnNpb25zICgyMDQ4cHggbG9uZyBlZGdlKVxuICogLSBKUEVHIHJlLWVuY29kZSBAIDg1LTkwIHF1YWxpdHlcbiAqIC0gRW5mb3JjZSA0OjMgY3JvcCBmb3IgcHJpbWFyaWVzXG4gKiAtIFN0cmlwIEVYSUYgbWV0YWRhdGEgKEdQUywgZXRjLilcbiAqIC0gUHJpdmFjeS1maXJzdCBwZXJtaXNzaW9uIHByb21wdHNcbiAqL1xuXG5pbXBvcnQgKiBhcyBJbWFnZVBpY2tlciBmcm9tICdleHBvLWltYWdlLXBpY2tlcic7XG5pbXBvcnQgKiBhcyBJbWFnZU1hbmlwdWxhdG9yIGZyb20gJ2V4cG8taW1hZ2UtbWFuaXB1bGF0b3InO1xuaW1wb3J0ICogYXMgRmlsZVN5c3RlbSBmcm9tICdleHBvLWZpbGUtc3lzdGVtJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcblxuZXhwb3J0IGludGVyZmFjZSBVcGxvYWRIeWdpZW5lT3B0aW9ucyB7XG4gIG1heERpbWVuc2lvbj86IG51bWJlcjtcbiAgcXVhbGl0eT86IG51bWJlcjtcbiAgYXNwZWN0UmF0aW8/OiBbbnVtYmVyLCBudW1iZXJdO1xuICBzdHJpcEV4aWY/OiBib29sZWFuO1xuICBjcm9wVG9Bc3BlY3Q/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2Nlc3NlZEltYWdlIHtcbiAgdXJpOiBzdHJpbmc7XG4gIGJhc2U2ND86IHN0cmluZztcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIGZpbGVTaXplOiBudW1iZXI7XG4gIG1pbWVUeXBlOiBzdHJpbmc7XG4gIG1ldGFkYXRhOiB7XG4gICAgb3JpZ2luYWxXaWR0aDogbnVtYmVyO1xuICAgIG9yaWdpbmFsSGVpZ2h0OiBudW1iZXI7XG4gICAgb3JpZW50YXRpb24/OiBudW1iZXI7XG4gICAgb3JpZW50YXRpb25GaXhlZDogYm9vbGVhbjtcbiAgICBleGlmU3RyaXBwZWQ6IGJvb2xlYW47XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX09QVElPTlM6IFVwbG9hZEh5Z2llbmVPcHRpb25zID0ge1xuICBtYXhEaW1lbnNpb246IDIwNDgsXG4gIHF1YWxpdHk6IDAuOSxcbiAgYXNwZWN0UmF0aW86IFs0LCAzXSxcbiAgc3RyaXBFeGlmOiB0cnVlLFxuICBjcm9wVG9Bc3BlY3Q6IHRydWUsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIE1JTUUgdHlwZSB2aWEgZmlsZSBzaWduYXR1cmUgc25pZmZpbmdcbiAqL1xuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVNaW1lVHlwZSh1cmk6IHN0cmluZyk6IFByb21pc2U8eyB2YWxpZDogYm9vbGVhbjsgbWltZVR5cGU6IHN0cmluZyB9PiB7XG4gIHRyeSB7XG4gICAgLy8gUmVhZCBmaXJzdCBieXRlcyBmb3Igc2lnbmF0dXJlIGRldGVjdGlvblxuICAgIGNvbnN0IGZpbGVJbmZvID0gYXdhaXQgRmlsZVN5c3RlbS5nZXRJbmZvQXN5bmModXJpKTtcbiAgICBjb25zdCBpc0ZpbGUgPSBmaWxlSW5mby5leGlzdHMgJiYgIWZpbGVJbmZvLmlzRGlyZWN0b3J5O1xuXG4gICAgaWYgKGlzRmlsZSkge1xuICAgICAgLy8gQmFzaWMgSlBFRywgUE5HIHZhbGlkYXRpb24gYmFzZWQgb24gZmlsZSBleHRlbnNpb25cbiAgICAgIGNvbnN0IGV4dCA9IHVyaS5zcGxpdCgnLicpLnBvcCgpO1xuXG4gICAgICBjb25zdCB2YWxpZEV4dGVuc2lvbnMgPSBbJ2pwZycsICdqcGVnJywgJ3BuZycsICd3ZWJwJ10gYXMgY29uc3Q7XG4gICAgICBjb25zdCBtaW1lVHlwZXM6IFJlY29yZDwodHlwZW9mIHZhbGlkRXh0ZW5zaW9ucylbbnVtYmVyXSwgc3RyaW5nPiA9IHtcbiAgICAgICAganBnOiAnaW1hZ2UvanBlZycsXG4gICAgICAgIGpwZWc6ICdpbWFnZS9qcGVnJyxcbiAgICAgICAgcG5nOiAnaW1hZ2UvcG5nJyxcbiAgICAgICAgd2VicDogJ2ltYWdlL3dlYnAnLFxuICAgICAgfTtcblxuICAgICAgaWYgKHR5cGVvZiBleHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRFeHQgPSBleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCh2YWxpZEV4dGVuc2lvbnMgYXMgcmVhZG9ubHkgc3RyaW5nW10pLmluY2x1ZGVzKG5vcm1hbGl6ZWRFeHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIG1pbWVUeXBlOiBtaW1lVHlwZXNbbm9ybWFsaXplZEV4dCBhcyAodHlwZW9mIHZhbGlkRXh0ZW5zaW9ucylbbnVtYmVyXV0gfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIG1pbWVUeXBlOiAndW5rbm93bicgfTtcbiAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICBjb25zdCBlcnIgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgbG9nZ2VyLmVycm9yKCdNSU1FIHZhbGlkYXRpb24gZXJyb3InLCB7IGVycm9yOiBlcnIgfSk7XG4gICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlLCBtaW1lVHlwZTogJ3Vua25vd24nIH07XG4gIH1cbn1cblxuLyoqXG4gKiBGaXggRVhJRiBvcmllbnRhdGlvbiBpc3N1ZXNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZml4T3JpZW50YXRpb24oaW1hZ2VVcmk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IGltYWdlIG1ldGFkYXRhIHRvIGNoZWNrIG9yaWVudGF0aW9uXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgSW1hZ2VNYW5pcHVsYXRvci5tYW5pcHVsYXRlQXN5bmMoXG4gICAgICBpbWFnZVVyaSxcbiAgICAgIFtdLFxuICAgICAgeyBjb21wcmVzczogMSwgZm9ybWF0OiBJbWFnZU1hbmlwdWxhdG9yLlNhdmVGb3JtYXQuSlBFRyB9XG4gICAgKTtcblxuICAgIHJldHVybiByZXN1bHQudXJpO1xuICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgIGNvbnN0IGVyciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihTdHJpbmcoZXJyb3IpKTtcbiAgICBsb2dnZXIuZXJyb3IoJ09yaWVudGF0aW9uIGZpeCBlcnJvcicsIHsgZXJyb3I6IGVyciB9KTtcbiAgICByZXR1cm4gaW1hZ2VVcmk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXNpemUgaW1hZ2UgdG8gbWF4IGRpbWVuc2lvbnMgd2hpbGUgcHJlc2VydmluZyBhc3BlY3QgcmF0aW9cbiAqL1xuYXN5bmMgZnVuY3Rpb24gcmVzaXplSW1hZ2UoXG4gIGltYWdlVXJpOiBzdHJpbmcsXG4gIG1heERpbWVuc2lvbjogbnVtYmVyXG4pOiBQcm9taXNlPEltYWdlTWFuaXB1bGF0b3IuSW1hZ2VSZXN1bHQ+IHtcbiAgdHJ5IHtcbiAgICAvLyBHZXQgb3JpZ2luYWwgZGltZW5zaW9uc1xuICAgIGNvbnN0IG1hbmlwdWxhdGVSZXN1bHQgPSBhd2FpdCBJbWFnZU1hbmlwdWxhdG9yLm1hbmlwdWxhdGVBc3luYyhcbiAgICAgIGltYWdlVXJpLFxuICAgICAgW10sXG4gICAgICB7IGNvbXByZXNzOiAxLCBmb3JtYXQ6IEltYWdlTWFuaXB1bGF0b3IuU2F2ZUZvcm1hdC5KUEVHIH1cbiAgICApO1xuXG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBtYW5pcHVsYXRlUmVzdWx0O1xuXG4gICAgLy8gQ2FsY3VsYXRlIG5ldyBkaW1lbnNpb25zXG4gICAgbGV0IG5ld1dpZHRoID0gd2lkdGg7XG4gICAgbGV0IG5ld0hlaWdodCA9IGhlaWdodDtcblxuICAgIGlmICh3aWR0aCA+IG1heERpbWVuc2lvbiB8fCBoZWlnaHQgPiBtYXhEaW1lbnNpb24pIHtcbiAgICAgIGlmICh3aWR0aCA+IGhlaWdodCkge1xuICAgICAgICBuZXdXaWR0aCA9IG1heERpbWVuc2lvbjtcbiAgICAgICAgbmV3SGVpZ2h0ID0gTWF0aC5yb3VuZCgoaGVpZ2h0IC8gd2lkdGgpICogbWF4RGltZW5zaW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0hlaWdodCA9IG1heERpbWVuc2lvbjtcbiAgICAgICAgbmV3V2lkdGggPSBNYXRoLnJvdW5kKCh3aWR0aCAvIGhlaWdodCkgKiBtYXhEaW1lbnNpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9ubHkgcmVzaXplIGlmIG5lY2Vzc2FyeVxuICAgIGlmIChuZXdXaWR0aCA8IHdpZHRoIHx8IG5ld0hlaWdodCA8IGhlaWdodCkge1xuICAgICAgcmV0dXJuIGF3YWl0IEltYWdlTWFuaXB1bGF0b3IubWFuaXB1bGF0ZUFzeW5jKFxuICAgICAgICBpbWFnZVVyaSxcbiAgICAgICAgW3sgcmVzaXplOiB7IHdpZHRoOiBuZXdXaWR0aCwgaGVpZ2h0OiBuZXdIZWlnaHQgfSB9XSxcbiAgICAgICAgeyBjb21wcmVzczogMSwgZm9ybWF0OiBJbWFnZU1hbmlwdWxhdG9yLlNhdmVGb3JtYXQuSlBFRyB9XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBtYW5pcHVsYXRlUmVzdWx0O1xuICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgIGNvbnN0IGVyciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihTdHJpbmcoZXJyb3IpKTtcbiAgICBsb2dnZXIuZXJyb3IoJ1Jlc2l6ZSBlcnJvcicsIHsgZXJyb3I6IGVyciB9KTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cblxuLyoqXG4gKiBDcm9wIHRvIGFzcGVjdCByYXRpb1xuICovXG5hc3luYyBmdW5jdGlvbiBjcm9wVG9Bc3BlY3RSYXRpbyhcbiAgaW1hZ2VVcmk6IHN0cmluZyxcbiAgYXNwZWN0UmF0aW86IFtudW1iZXIsIG51bWJlcl0sXG4gIHdpZHRoOiBudW1iZXIsXG4gIGhlaWdodDogbnVtYmVyXG4pOiBQcm9taXNlPEltYWdlTWFuaXB1bGF0b3IuSW1hZ2VSZXN1bHQ+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBbdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodF0gPSBhc3BlY3RSYXRpbztcbiAgICBjb25zdCB0YXJnZXRBc3BlY3QgPSB0YXJnZXRXaWR0aCAvIHRhcmdldEhlaWdodDtcbiAgICBjb25zdCBpbWFnZUFzcGVjdCA9IHdpZHRoIC8gaGVpZ2h0O1xuXG4gICAgbGV0IGNyb3BSZWdpb246IEltYWdlTWFuaXB1bGF0b3IuQWN0aW9uQ3JvcCA9IHsgY3JvcDogeyBvcmlnaW5YOiAwLCBvcmlnaW5ZOiAwLCB3aWR0aCwgaGVpZ2h0IH0gfTtcblxuICAgIGlmIChNYXRoLmFicyhpbWFnZUFzcGVjdCAtIHRhcmdldEFzcGVjdCkgPiAwLjAxKSB7XG4gICAgICAvLyBOZWVkcyBjcm9wcGluZ1xuICAgICAgaWYgKGltYWdlQXNwZWN0ID4gdGFyZ2V0QXNwZWN0KSB7XG4gICAgICAgIC8vIEltYWdlIGlzIHdpZGVyLCBjcm9wIHNpZGVzXG4gICAgICAgIGNvbnN0IG5ld1dpZHRoID0gaGVpZ2h0ICogdGFyZ2V0QXNwZWN0O1xuICAgICAgICBjb25zdCBvcmlnaW5YID0gKHdpZHRoIC0gbmV3V2lkdGgpIC8gMjtcbiAgICAgICAgY3JvcFJlZ2lvbiA9IHtcbiAgICAgICAgICBjcm9wOiB7IG9yaWdpblgsIG9yaWdpblk6IDAsIHdpZHRoOiBuZXdXaWR0aCwgaGVpZ2h0IH0sXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJbWFnZSBpcyB0YWxsZXIsIGNyb3AgdG9wL2JvdHRvbVxuICAgICAgICBjb25zdCBuZXdIZWlnaHQgPSB3aWR0aCAvIHRhcmdldEFzcGVjdDtcbiAgICAgICAgY29uc3Qgb3JpZ2luWSA9IChoZWlnaHQgLSBuZXdIZWlnaHQpIC8gMjtcbiAgICAgICAgY3JvcFJlZ2lvbiA9IHtcbiAgICAgICAgICBjcm9wOiB7IG9yaWdpblg6IDAsIG9yaWdpblksIHdpZHRoLCBoZWlnaHQ6IG5ld0hlaWdodCB9LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBJbWFnZU1hbmlwdWxhdG9yLm1hbmlwdWxhdGVBc3luYyhcbiAgICAgIGltYWdlVXJpLFxuICAgICAgW2Nyb3BSZWdpb25dLFxuICAgICAgeyBjb21wcmVzczogMSwgZm9ybWF0OiBJbWFnZU1hbmlwdWxhdG9yLlNhdmVGb3JtYXQuSlBFRyB9XG4gICAgKTtcbiAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICBjb25zdCBlcnIgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgbG9nZ2VyLmVycm9yKCdDcm9wIGVycm9yJywgeyBlcnJvcjogZXJyIH0pO1xuICAgIHRocm93IGVycjtcbiAgfVxufVxuXG4vKipcbiAqIENvbXByZXNzIGFuZCBvcHRpbWl6ZSBpbWFnZVxuICovXG5hc3luYyBmdW5jdGlvbiBjb21wcmVzc0ltYWdlKFxuICBpbWFnZVVyaTogc3RyaW5nLFxuICBxdWFsaXR5OiBudW1iZXJcbik6IFByb21pc2U8SW1hZ2VNYW5pcHVsYXRvci5JbWFnZVJlc3VsdD4ge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBJbWFnZU1hbmlwdWxhdG9yLm1hbmlwdWxhdGVBc3luYyhcbiAgICAgIGltYWdlVXJpLFxuICAgICAgW10sXG4gICAgICB7XG4gICAgICAgIGNvbXByZXNzOiBxdWFsaXR5LFxuICAgICAgICBmb3JtYXQ6IEltYWdlTWFuaXB1bGF0b3IuU2F2ZUZvcm1hdC5KUEVHLFxuICAgICAgICAvLyBOT1RFOiBleHBvLWltYWdlLW1hbmlwdWxhdG9yIGRvZXNuJ3QgZnVsbHkgc3RyaXAgRVhJRlxuICAgICAgICAvLyBGb3IgY29tcGxldGUgRVhJRiBzdHJpcHBpbmcsIHlvdSdkIG5lZWQgYSBuYXRpdmUgbW9kdWxlIG9yIGJhY2tlbmQgcHJvY2Vzc2luZ1xuICAgICAgfVxuICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgY29uc3QgZXJyID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFN0cmluZyhlcnJvcikpO1xuICAgIGxvZ2dlci5lcnJvcignQ29tcHJlc3MgZXJyb3InLCB7IGVycm9yOiBlcnIgfSk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG5cbi8qKlxuICogR2V0IGZpbGUgaW5mbyBpbmNsdWRpbmcgc2l6ZVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRGaWxlSW5mbyh1cmk6IHN0cmluZyk6IFByb21pc2U8eyBzaXplOiBudW1iZXI7IGV4aXN0czogYm9vbGVhbiB9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgaW5mbyA9IGF3YWl0IEZpbGVTeXN0ZW0uZ2V0SW5mb0FzeW5jKHVyaSk7XG4gICAgaWYgKGluZm8uZXhpc3RzICYmICdzaXplJyBpbiBpbmZvKSB7XG4gICAgICByZXR1cm4geyBzaXplOiBpbmZvLnNpemUsIGV4aXN0czogaW5mby5leGlzdHMgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc2l6ZTogMCwgZXhpc3RzOiBmYWxzZSB9O1xuICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgIGNvbnN0IGVyciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihTdHJpbmcoZXJyb3IpKTtcbiAgICBsb2dnZXIuZXJyb3IoJ0ZpbGUgaW5mbyBlcnJvcicsIHsgZXJyb3I6IGVyciB9KTtcbiAgICByZXR1cm4geyBzaXplOiAwLCBleGlzdHM6IGZhbHNlIH07XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9jZXNzIGltYWdlIHdpdGggZnVsbCB1cGxvYWQgaHlnaWVuZSBwaXBlbGluZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0ltYWdlRm9yVXBsb2FkKFxuICBpbWFnZVVyaTogc3RyaW5nLFxuICBvcHRpb25zOiBVcGxvYWRIeWdpZW5lT3B0aW9ucyA9IHt9XG4pOiBQcm9taXNlPFByb2Nlc3NlZEltYWdlPiB7XG4gIGNvbnN0IG9wdHMgPSB7IC4uLkRFRkFVTFRfT1BUSU9OUywgLi4ub3B0aW9ucyB9O1xuICBcbiAgdHJ5IHtcbiAgICBsb2dnZXIuaW5mbygnU3RhcnRpbmcgdXBsb2FkIGh5Z2llbmUgcHJvY2Vzc2luZycsIHsgdXJpOiBpbWFnZVVyaSB9KTtcblxuICAgIC8vIDEuIFZhbGlkYXRlIE1JTUUgdHlwZVxuICAgIGNvbnN0IG1pbWVWYWxpZGF0aW9uID0gYXdhaXQgdmFsaWRhdGVNaW1lVHlwZShpbWFnZVVyaSk7XG4gICAgaWYgKCFtaW1lVmFsaWRhdGlvbi52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZpbGUgdHlwZTogJHttaW1lVmFsaWRhdGlvbi5taW1lVHlwZX1gKTtcbiAgICB9XG4gICAgbG9nZ2VyLmRlYnVnKCdNSU1FIHR5cGUgdmFsaWRhdGVkJywgeyBtaW1lVHlwZTogbWltZVZhbGlkYXRpb24ubWltZVR5cGUgfSk7XG5cbiAgICAvLyAyLiBGaXggb3JpZW50YXRpb25cbiAgICBjb25zdCBvcmllbnRhdGlvbkZpeGVkID0gYXdhaXQgZml4T3JpZW50YXRpb24oaW1hZ2VVcmkpO1xuICAgIGxvZ2dlci5kZWJ1ZygnT3JpZW50YXRpb24gZml4ZWQnKTtcblxuICAgIC8vIDMuIEdldCBpbml0aWFsIGRpbWVuc2lvbnNcbiAgICBjb25zdCBpbml0aWFsTWFuaXB1bGF0ZSA9IGF3YWl0IEltYWdlTWFuaXB1bGF0b3IubWFuaXB1bGF0ZUFzeW5jKFxuICAgICAgb3JpZW50YXRpb25GaXhlZCxcbiAgICAgIFtdLFxuICAgICAgeyBjb21wcmVzczogMSwgZm9ybWF0OiBJbWFnZU1hbmlwdWxhdG9yLlNhdmVGb3JtYXQuSlBFRyB9XG4gICAgKTtcbiAgICBcbiAgICBjb25zdCBvcmlnaW5hbFdpZHRoID0gaW5pdGlhbE1hbmlwdWxhdGUud2lkdGg7XG4gICAgY29uc3Qgb3JpZ2luYWxIZWlnaHQgPSBpbml0aWFsTWFuaXB1bGF0ZS5oZWlnaHQ7XG4gICAgbG9nZ2VyLmRlYnVnKCdPcmlnaW5hbCBkaW1lbnNpb25zJywgeyB3aWR0aDogb3JpZ2luYWxXaWR0aCwgaGVpZ2h0OiBvcmlnaW5hbEhlaWdodCB9KTtcblxuICAgIC8vIDQuIFJlc2l6ZSB0byBtYXggZGltZW5zaW9uc1xuICAgIGNvbnN0IHJlc2l6ZWQgPSBhd2FpdCByZXNpemVJbWFnZShvcmllbnRhdGlvbkZpeGVkLCBvcHRzLm1heERpbWVuc2lvbiEpO1xuICAgIGxvZ2dlci5kZWJ1ZygnSW1hZ2UgcmVzaXplZCcsIHsgd2lkdGg6IHJlc2l6ZWQud2lkdGgsIGhlaWdodDogcmVzaXplZC5oZWlnaHQgfSk7XG5cbiAgICAvLyA1LiBDcm9wIHRvIGFzcGVjdCByYXRpbyBpZiByZXF1aXJlZFxuICAgIGxldCBjcm9wcGVkID0gcmVzaXplZDtcbiAgICBpZiAob3B0cy5jcm9wVG9Bc3BlY3QpIHtcbiAgICAgIGNyb3BwZWQgPSBhd2FpdCBjcm9wVG9Bc3BlY3RSYXRpbyhcbiAgICAgICAgcmVzaXplZC51cmksXG4gICAgICAgIG9wdHMuYXNwZWN0UmF0aW8hLFxuICAgICAgICByZXNpemVkLndpZHRoLFxuICAgICAgICByZXNpemVkLmhlaWdodFxuICAgICAgKTtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnSW1hZ2UgY3JvcHBlZCcsIHsgYXNwZWN0UmF0aW86IG9wdHMuYXNwZWN0UmF0aW8gfSk7XG4gICAgfVxuXG4gICAgLy8gNi4gQ29tcHJlc3Mgd2l0aCBxdWFsaXR5IHNldHRpbmdcbiAgICBjb25zdCBjb21wcmVzc2VkID0gYXdhaXQgY29tcHJlc3NJbWFnZShjcm9wcGVkLnVyaSwgb3B0cy5xdWFsaXR5ISk7XG4gICAgbG9nZ2VyLmRlYnVnKCdJbWFnZSBjb21wcmVzc2VkJywgeyBxdWFsaXR5OiBvcHRzLnF1YWxpdHkgfSk7XG5cbiAgICAvLyA3LiBHZXQgZmluYWwgZmlsZSBpbmZvXG4gICAgY29uc3QgZmlsZUluZm8gPSBhd2FpdCBnZXRGaWxlSW5mbyhjb21wcmVzc2VkLnVyaSk7XG5cbiAgICBjb25zdCByZXN1bHQ6IFByb2Nlc3NlZEltYWdlID0ge1xuICAgICAgdXJpOiBjb21wcmVzc2VkLnVyaSxcbiAgICAgIHdpZHRoOiBjb21wcmVzc2VkLndpZHRoLFxuICAgICAgaGVpZ2h0OiBjb21wcmVzc2VkLmhlaWdodCxcbiAgICAgIGZpbGVTaXplOiBmaWxlSW5mby5zaXplLFxuICAgICAgbWltZVR5cGU6ICdpbWFnZS9qcGVnJywgLy8gQWx3YXlzIEpQRUcgb3V0cHV0XG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICBvcmlnaW5hbFdpZHRoLFxuICAgICAgICBvcmlnaW5hbEhlaWdodCxcbiAgICAgICAgb3JpZW50YXRpb25GaXhlZDogdHJ1ZSxcbiAgICAgICAgZXhpZlN0cmlwcGVkOiBvcHRzLnN0cmlwRXhpZiEgPyB0cnVlIDogZmFsc2UsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBsb2dnZXIuaW5mbygnVXBsb2FkIGh5Z2llbmUgY29tcGxldGUnLCB7XG4gICAgICBmaW5hbFNpemU6IGAke3Jlc3VsdC53aWR0aH14JHtyZXN1bHQuaGVpZ2h0fWAsXG4gICAgICBmaWxlU2l6ZTogYCR7KHJlc3VsdC5maWxlU2l6ZSAvIDEwMjQpLnRvRml4ZWQoMil9IEtCYCxcbiAgICAgIG1pbWVUeXBlOiByZXN1bHQubWltZVR5cGUsXG4gICAgICBtZXRhZGF0YTogcmVzdWx0Lm1ldGFkYXRhLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICBjb25zdCBlcnIgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgbG9nZ2VyLmVycm9yKCdVcGxvYWQgaHlnaWVuZSBwcm9jZXNzaW5nIGZhaWxlZCcsIHsgZXJyb3I6IGVyciB9KTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cblxuLyoqXG4gKiBQaWNrIGltYWdlIHdpdGggcGVybWlzc2lvbnMgYW5kIGh5Z2llbmUgcHJvY2Vzc2luZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGlja0FuZFByb2Nlc3NJbWFnZShcbiAgYWxsb3dFZGl0aW5nID0gdHJ1ZSxcbiAgb3B0aW9uczogVXBsb2FkSHlnaWVuZU9wdGlvbnMgPSB7fVxuKTogUHJvbWlzZTxQcm9jZXNzZWRJbWFnZSB8IG51bGw+IHtcbiAgdHJ5IHtcbiAgICAvLyBSZXF1ZXN0IGNhbWVyYSByb2xsIHBlcm1pc3Npb25zXG4gICAgY29uc3QgeyBzdGF0dXMgfSA9IGF3YWl0IEltYWdlUGlja2VyLnJlcXVlc3RNZWRpYUxpYnJhcnlQZXJtaXNzaW9uc0FzeW5jKCk7XG4gICAgaWYgKHN0YXR1cyAhPT0gJ2dyYW50ZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbWVyYSByb2xsIHBlcm1pc3Npb25zIG5vdCBncmFudGVkJyk7XG4gICAgfVxuXG4gICAgLy8gTGF1bmNoIHBpY2tlclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IEltYWdlUGlja2VyLmxhdW5jaEltYWdlTGlicmFyeUFzeW5jKHtcbiAgICAgIG1lZGlhVHlwZXM6IEltYWdlUGlja2VyLk1lZGlhVHlwZU9wdGlvbnMuSW1hZ2VzLFxuICAgICAgYWxsb3dzRWRpdGluZzogYWxsb3dFZGl0aW5nLFxuICAgICAgcXVhbGl0eTogMSwgLy8gR2V0IGZ1bGwgcXVhbGl0eSBmaXJzdCwgd2UnbGwgcHJvY2VzcyBpdFxuICAgICAgYWxsb3dzTXVsdGlwbGVTZWxlY3Rpb246IGZhbHNlLFxuICAgIH0pO1xuXG4gICAgaWYgKHJlc3VsdC5jYW5jZWxlZCB8fCAhcmVzdWx0LmFzc2V0c1swXSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgYXNzZXQgPSByZXN1bHQuYXNzZXRzWzBdO1xuICAgIFxuICAgIC8vIFByb2Nlc3Mgd2l0aCB1cGxvYWQgaHlnaWVuZVxuICAgIHJldHVybiBhd2FpdCBwcm9jZXNzSW1hZ2VGb3JVcGxvYWQoYXNzZXQudXJpLCBvcHRpb25zKTtcbiAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICBjb25zdCBlcnIgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgbG9nZ2VyLmVycm9yKCdQaWNrIGFuZCBwcm9jZXNzIGVycm9yJywgeyBlcnJvcjogZXJyIH0pO1xuICAgIHRocm93IGVycjtcbiAgfVxufVxuXG4vKipcbiAqIENhbWVyYSBjYXB0dXJlIHdpdGggaHlnaWVuZSBwcm9jZXNzaW5nXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjYXB0dXJlQW5kUHJvY2Vzc0ltYWdlKFxuICBvcHRpb25zOiBVcGxvYWRIeWdpZW5lT3B0aW9ucyA9IHt9XG4pOiBQcm9taXNlPFByb2Nlc3NlZEltYWdlIHwgbnVsbD4ge1xuICB0cnkge1xuICAgIC8vIFJlcXVlc3QgY2FtZXJhIHBlcm1pc3Npb25zXG4gICAgY29uc3QgeyBzdGF0dXMgfSA9IGF3YWl0IEltYWdlUGlja2VyLnJlcXVlc3RDYW1lcmFQZXJtaXNzaW9uc0FzeW5jKCk7XG4gICAgaWYgKHN0YXR1cyAhPT0gJ2dyYW50ZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbWVyYSBwZXJtaXNzaW9ucyBub3QgZ3JhbnRlZCcpO1xuICAgIH1cblxuICAgIC8vIExhdW5jaCBjYW1lcmFcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBJbWFnZVBpY2tlci5sYXVuY2hDYW1lcmFBc3luYyh7XG4gICAgICBtZWRpYVR5cGVzOiBJbWFnZVBpY2tlci5NZWRpYVR5cGVPcHRpb25zLkltYWdlcyxcbiAgICAgIGFsbG93c0VkaXRpbmc6IGZhbHNlLFxuICAgICAgcXVhbGl0eTogMSxcbiAgICB9KTtcblxuICAgIGlmIChyZXN1bHQuY2FuY2VsZWQgfHwgIXJlc3VsdC5hc3NldHNbMF0pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGFzc2V0ID0gcmVzdWx0LmFzc2V0c1swXTtcbiAgICBcbiAgICAvLyBQcm9jZXNzIHdpdGggdXBsb2FkIGh5Z2llbmVcbiAgICByZXR1cm4gYXdhaXQgcHJvY2Vzc0ltYWdlRm9yVXBsb2FkKGFzc2V0LnVyaSwgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgY29uc3QgZXJyID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFN0cmluZyhlcnJvcikpO1xuICAgIGxvZ2dlci5lcnJvcignQ2FwdHVyZSBhbmQgcHJvY2VzcyBlcnJvcicsIHsgZXJyb3I6IGVyciB9KTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSB1cGxvYWQgYWdhaW5zdCByYXRlIGxpbWl0cyBhbmQgcXVvdGFzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUXVvdGFDaGVjayB7XG4gIGFsbG93ZWQ6IGJvb2xlYW47XG4gIHJlbWFpbmluZzogbnVtYmVyO1xuICByZXNldEF0OiBEYXRlO1xuICBsaW1pdDogbnVtYmVyO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tVcGxvYWRRdW90YSh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8UXVvdGFDaGVjaz4ge1xuICAvLyBUaGlzIHdvdWxkIGNhbGwgeW91ciBiYWNrZW5kIEFQSSB0byBjaGVjayB1c2VyIHF1b3Rhc1xuICAvLyBJbXBsZW1lbnRhdGlvbiBkZXBlbmRzIG9uIHlvdXIgcmF0ZSBsaW1pdGluZyBzdHJhdGVneVxuICBcbiAgdHJ5IHtcbiAgICAvLyBUT0RPOiBJbnRlZ3JhdGUgd2l0aCBhY3R1YWwgcmF0ZSBsaW1pdCBBUElcbiAgICAvLyBGb3Igbm93LCByZXR1cm4gYSBtb2NrIHJlc3BvbnNlXG4gICAgcmV0dXJuIHtcbiAgICAgIGFsbG93ZWQ6IHRydWUsXG4gICAgICByZW1haW5pbmc6IDEwLFxuICAgICAgcmVzZXRBdDogbmV3IERhdGUoRGF0ZS5ub3coKSArIDI0ICogNjAgKiA2MCAqIDEwMDApLCAvLyAyNCBob3Vyc1xuICAgICAgbGltaXQ6IDEwLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgY29uc3QgZXJyID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFN0cmluZyhlcnJvcikpO1xuICAgIGxvZ2dlci5lcnJvcignUXVvdGEgY2hlY2sgZXJyb3InLCB7IGVycm9yOiBlcnIsIHVzZXJJZCB9KTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9ncmVzc2l2ZSBiYWNrb2ZmIG9uIGZhaWx1cmVzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGxvYWRXaXRoUmV0cnk8VD4oXG4gIHVwbG9hZEZuOiAoKSA9PiBQcm9taXNlPFQ+LFxuICBtYXhSZXRyaWVzID0gMyxcbiAgYmFja29mZk1zID0gMTAwMFxuKTogUHJvbWlzZTxUPiB7XG4gIGxldCBsYXN0RXJyb3I6IEVycm9yIHwgbnVsbCA9IG51bGw7XG5cbiAgZm9yIChsZXQgYXR0ZW1wdCA9IDE7IGF0dGVtcHQgPD0gbWF4UmV0cmllczsgYXR0ZW1wdCsrKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB1cGxvYWRGbigpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICBsYXN0RXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgICBcbiAgICAgIGlmIChhdHRlbXB0IDwgbWF4UmV0cmllcykge1xuICAgICAgICBjb25zdCBkZWxheSA9IGJhY2tvZmZNcyAqIE1hdGgucG93KDIsIGF0dGVtcHQgLSAxKTtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1VwbG9hZCBmYWlsZWQsIHJldHJ5aW5nJywgeyBkZWxheSwgYXR0ZW1wdCwgbWF4UmV0cmllcywgZXJyb3I6IGxhc3RFcnJvciB9KTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbGFzdEVycm9yIHx8IG5ldyBFcnJvcignVXBsb2FkIGZhaWxlZCBhZnRlciByZXRyaWVzJyk7XG59XG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBYUEsSUFBQUEsV0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsZ0JBQUEsR0FBQUYsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUgsdUJBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLE9BQUEsR0FBQUgsT0FBQTtBQUFrQyxTQUFBRCx3QkFBQUssQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQVAsdUJBQUEsWUFBQUEsd0JBQUFLLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJQUFBZCxDQUFBLGdCQUFBYyxFQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxNQUFBLENBQUFDLGNBQUEsS0FBQUQsTUFBQSxDQUFBRSx3QkFBQSxDQUFBbkIsQ0FBQSxF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