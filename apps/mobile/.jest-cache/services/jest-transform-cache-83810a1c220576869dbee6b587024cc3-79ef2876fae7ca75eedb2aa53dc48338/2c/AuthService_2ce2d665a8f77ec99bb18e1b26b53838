9f571187763350568150e6bd3b7fb6b3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.authService = exports.AuthError = void 0;
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var SecureStore = _interopRequireWildcard(require("expo-secure-store"));
var LocalAuthentication = _interopRequireWildcard(require("expo-local-authentication"));
var Keychain = _interopRequireWildcard(require("react-native-keychain"));
var _core = require("@pawfectmatch/core");
var _api = require("./api");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var AuthService = function () {
  function AuthService() {
    (0, _classCallCheck2.default)(this, AuthService);
    this.sessionCheckInterval = null;
    this.useKeychain = true;
    this.startSessionMonitoring();
  }
  return (0, _createClass2.default)(AuthService, [{
    key: "startSessionMonitoring",
    value: function startSessionMonitoring() {
      var _this = this;
      if (this.sessionCheckInterval) {
        clearInterval(this.sessionCheckInterval);
      }
      this.sessionCheckInterval = setInterval(function () {
        void _this.checkSessionValidity();
      }, 60000);
    }
  }, {
    key: "checkSessionValidity",
    value: (function () {
      var _checkSessionValidity = (0, _asyncToGenerator2.default)(function* () {
        try {
          var isAuthenticated = yield this.isAuthenticated();
          if (!isAuthenticated) {
            this.stopSessionMonitoring();
            return;
          }
          var sessionStart = yield this.getSessionStartTime();
          var lastActivity = yield this.getLastActivityTime();
          var now = Date.now();
          if (sessionStart && now - sessionStart > AuthService.SESSION_TIMEOUT) {
            _core.logger.info("Session expired due to timeout");
            yield this.logout();
            return;
          }
          if (lastActivity && now - lastActivity > AuthService.ACTIVITY_TIMEOUT) {
            _core.logger.info("Session expired due to inactivity");
            yield this.logout();
            return;
          }
          yield this.updateLastActivityTime();
        } catch (error) {
          _core.logger.error("Session validity check failed", {
            error: error
          });
        }
      });
      function checkSessionValidity() {
        return _checkSessionValidity.apply(this, arguments);
      }
      return checkSessionValidity;
    }())
  }, {
    key: "stopSessionMonitoring",
    value: function stopSessionMonitoring() {
      if (this.sessionCheckInterval) {
        clearInterval(this.sessionCheckInterval);
        this.sessionCheckInterval = null;
      }
    }
  }, {
    key: "getSessionStartTime",
    value: (function () {
      var _getSessionStartTime = (0, _asyncToGenerator2.default)(function* () {
        try {
          var startTime = yield this.secureGetItemAsync(AuthService.SESSION_START_KEY);
          return startTime ? parseInt(startTime) : null;
        } catch (error) {
          _core.logger.error("Failed to get session start time", {
            error: error
          });
          return null;
        }
      });
      function getSessionStartTime() {
        return _getSessionStartTime.apply(this, arguments);
      }
      return getSessionStartTime;
    }())
  }, {
    key: "getLastActivityTime",
    value: (function () {
      var _getLastActivityTime = (0, _asyncToGenerator2.default)(function* () {
        try {
          var lastActivity = yield this.secureGetItemAsync(AuthService.LAST_ACTIVITY_KEY);
          return lastActivity ? parseInt(lastActivity) : null;
        } catch (error) {
          _core.logger.error("Failed to get last activity time", {
            error: error
          });
          return null;
        }
      });
      function getLastActivityTime() {
        return _getLastActivityTime.apply(this, arguments);
      }
      return getLastActivityTime;
    }())
  }, {
    key: "updateLastActivityTime",
    value: (function () {
      var _updateLastActivityTime = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield this.secureSetItemAsync(AuthService.LAST_ACTIVITY_KEY, Date.now().toString());
        } catch (error) {
          _core.logger.error("Failed to update last activity time", {
            error: error
          });
        }
      });
      function updateLastActivityTime() {
        return _updateLastActivityTime.apply(this, arguments);
      }
      return updateLastActivityTime;
    }())
  }, {
    key: "recordUserActivity",
    value: (function () {
      var _recordUserActivity = (0, _asyncToGenerator2.default)(function* () {
        yield this.updateLastActivityTime();
      });
      function recordUserActivity() {
        return _recordUserActivity.apply(this, arguments);
      }
      return recordUserActivity;
    }())
  }, {
    key: "rotateTokens",
    value: (function () {
      var _rotateTokens = (0, _asyncToGenerator2.default)(function* () {
        try {
          var refreshToken = yield this.getRefreshToken();
          if (!refreshToken) {
            return false;
          }
          var response = yield _api.api.request("/auth/refresh-token", {
            method: "POST",
            body: JSON.stringify({
              refreshToken: refreshToken
            })
          });
          yield this.storeAuthData(response);
          yield this.secureSetItemAsync(AuthService.SESSION_START_KEY, Date.now().toString());
          _core.logger.info("Tokens rotated successfully");
          return true;
        } catch (error) {
          _core.logger.error("Token rotation failed", {
            error: error
          });
          yield this.logout();
          return false;
        }
      });
      function rotateTokens() {
        return _rotateTokens.apply(this, arguments);
      }
      return rotateTokens;
    }())
  }, {
    key: "isBiometricAvailable",
    value: (function () {
      var _isBiometricAvailable = (0, _asyncToGenerator2.default)(function* () {
        try {
          var hasHardware = yield LocalAuthentication.hasHardwareAsync();
          var isEnrolled = yield LocalAuthentication.isEnrolledAsync();
          var supportedTypes = yield LocalAuthentication.supportedAuthenticationTypesAsync();
          return {
            available: hasHardware && isEnrolled,
            types: supportedTypes
          };
        } catch (error) {
          _core.logger.error("Failed to check biometric availability", {
            error: error
          });
          return {
            available: false,
            types: []
          };
        }
      });
      function isBiometricAvailable() {
        return _isBiometricAvailable.apply(this, arguments);
      }
      return isBiometricAvailable;
    }())
  }, {
    key: "enableBiometricAuthentication",
    value: (function () {
      var _enableBiometricAuthentication = (0, _asyncToGenerator2.default)(function* () {
        try {
          var _yield$this$isBiometr = yield this.isBiometricAvailable(),
            available = _yield$this$isBiometr.available;
          if (!available) {
            throw new AuthError("Biometric authentication is not available on this device");
          }
          var biometricAuth = yield LocalAuthentication.authenticateAsync({
            promptMessage: "Authenticate to enable biometric login",
            fallbackLabel: "Use PIN",
            cancelLabel: "Cancel",
            disableDeviceFallback: false
          });
          if (!biometricAuth.success) {
            throw new AuthError("Biometric authentication failed");
          }
          yield this.secureSetItemAsync(AuthService.BIOMETRIC_ENABLED_KEY, "true");
          var currentUser = yield this.getCurrentUser();
          if (currentUser) {
            var biometricCredentials = {
              email: currentUser.email,
              biometricToken: Date.now().toString() + Math.random().toString(36)
            };
            yield this.secureSetItemAsync(AuthService.BIOMETRIC_CREDENTIALS_KEY, JSON.stringify(biometricCredentials));
          }
          _core.logger.info("Biometric authentication enabled");
          return true;
        } catch (error) {
          _core.logger.error("Failed to enable biometric authentication", {
            error: error
          });
          throw new AuthError("Failed to enable biometric authentication", error);
        }
      });
      function enableBiometricAuthentication() {
        return _enableBiometricAuthentication.apply(this, arguments);
      }
      return enableBiometricAuthentication;
    }())
  }, {
    key: "disableBiometricAuthentication",
    value: (function () {
      var _disableBiometricAuthentication = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield this.secureDeleteItemAsync(AuthService.BIOMETRIC_ENABLED_KEY);
          yield this.secureDeleteItemAsync(AuthService.BIOMETRIC_CREDENTIALS_KEY);
          _core.logger.info("Biometric authentication disabled");
        } catch (error) {
          _core.logger.error("Failed to disable biometric authentication", {
            error: error
          });
          throw new AuthError("Failed to disable biometric authentication", error);
        }
      });
      function disableBiometricAuthentication() {
        return _disableBiometricAuthentication.apply(this, arguments);
      }
      return disableBiometricAuthentication;
    }())
  }, {
    key: "isBiometricEnabled",
    value: (function () {
      var _isBiometricEnabled = (0, _asyncToGenerator2.default)(function* () {
        try {
          var enabled = yield this.secureGetItemAsync(AuthService.BIOMETRIC_ENABLED_KEY);
          return enabled === "true";
        } catch (error) {
          _core.logger.error("Failed to check biometric status", {
            error: error
          });
          return false;
        }
      });
      function isBiometricEnabled() {
        return _isBiometricEnabled.apply(this, arguments);
      }
      return isBiometricEnabled;
    }())
  }, {
    key: "loginWithBiometrics",
    value: (function () {
      var _loginWithBiometrics = (0, _asyncToGenerator2.default)(function* () {
        try {
          var isEnabled = yield this.isBiometricEnabled();
          if (!isEnabled) {
            throw new AuthError("Biometric authentication is not enabled");
          }
          var _yield$this$isBiometr2 = yield this.isBiometricAvailable(),
            available = _yield$this$isBiometr2.available;
          if (!available) {
            throw new AuthError("Biometric authentication is not available");
          }
          var biometricAuth = yield LocalAuthentication.authenticateAsync({
            promptMessage: "Authenticate to login",
            fallbackLabel: "Use PIN",
            cancelLabel: "Cancel",
            disableDeviceFallback: false
          });
          if (!biometricAuth.success) {
            throw new AuthError("Biometric authentication failed");
          }
          var storedCredentials = yield this.secureGetItemAsync(AuthService.BIOMETRIC_CREDENTIALS_KEY);
          if (!storedCredentials) {
            throw new AuthError("No biometric credentials found");
          }
          var credentials = JSON.parse(storedCredentials);
          var response = yield _api.api.request("/auth/biometric-login", {
            method: "POST",
            body: JSON.stringify({
              email: credentials.email,
              biometricToken: credentials.biometricToken
            })
          });
          yield this.storeAuthData(response);
          _core.logger.info("User logged in with biometrics", {
            userId: response.user.id
          });
          return response;
        } catch (error) {
          _core.logger.error("Biometric login failed", {
            error: error
          });
          throw new AuthError("Biometric login failed. Please use email and password.", error);
        }
      });
      function loginWithBiometrics() {
        return _loginWithBiometrics.apply(this, arguments);
      }
      return loginWithBiometrics;
    }())
  }, {
    key: "login",
    value: (function () {
      var _login = (0, _asyncToGenerator2.default)(function* (credentials) {
        try {
          var response = yield _api.api.request("/auth/login", {
            method: "POST",
            body: JSON.stringify(credentials)
          });
          yield this.storeAuthData(response);
          _core.logger.info("User logged in successfully", {
            userId: response.user.id
          });
          return response;
        } catch (error) {
          _core.logger.error("Login failed", {
            error: error,
            email: credentials.email
          });
          throw new AuthError("Login failed. Please check your credentials and try again.", error);
        }
      });
      function login(_x) {
        return _login.apply(this, arguments);
      }
      return login;
    }())
  }, {
    key: "register",
    value: (function () {
      var _register = (0, _asyncToGenerator2.default)(function* (data) {
        try {
          if (data.password !== data.confirmPassword) {
            throw new AuthError("Passwords do not match");
          }
          var registerData = {
            email: data.email,
            password: data.password,
            name: data.name
          };
          var response = yield _api.api.request("/auth/register", {
            method: "POST",
            body: JSON.stringify(registerData)
          });
          yield this.storeAuthData(response);
          _core.logger.info("User registered successfully", {
            userId: response.user.id
          });
          return response;
        } catch (error) {
          _core.logger.error("Registration failed", {
            error: error,
            email: data.email
          });
          throw new AuthError("Registration failed. Please try again.", error);
        }
      });
      function register(_x2) {
        return _register.apply(this, arguments);
      }
      return register;
    }())
  }, {
    key: "logout",
    value: (function () {
      var _logout = (0, _asyncToGenerator2.default)(function* () {
        try {
          var refreshToken = yield this.getRefreshToken();
          if (refreshToken) {
            try {
              yield _api.api.request("/auth/logout", {
                method: "POST",
                body: JSON.stringify({
                  refreshToken: refreshToken
                })
              });
            } catch (error) {
              _core.logger.warn("Server logout failed, continuing with local logout", {
                error: error
              });
            }
          }
          yield this.clearAuthData();
          _core.logger.info("User logged out successfully");
        } catch (error) {
          _core.logger.error("Logout failed", {
            error: error
          });
          yield this.clearAuthData();
        }
      });
      function logout() {
        return _logout.apply(this, arguments);
      }
      return logout;
    }())
  }, {
    key: "refreshToken",
    value: (function () {
      var _refreshToken = (0, _asyncToGenerator2.default)(function* () {
        try {
          var _refreshToken2 = yield this.getRefreshToken();
          if (!_refreshToken2) {
            return null;
          }
          var response = yield _api.api.request("/auth/refresh", {
            method: "POST",
            body: JSON.stringify({
              refreshToken: _refreshToken2
            })
          });
          yield this.storeAuthData(response);
          return response;
        } catch (error) {
          _core.logger.error("Token refresh failed", {
            error: error
          });
          yield this.clearAuthData();
          return null;
        }
      });
      function refreshToken() {
        return _refreshToken.apply(this, arguments);
      }
      return refreshToken;
    }())
  }, {
    key: "forgotPassword",
    value: (function () {
      var _forgotPassword = (0, _asyncToGenerator2.default)(function* (email) {
        try {
          var response = yield _api.api.request("/auth/forgot-password", {
            method: "POST",
            body: JSON.stringify({
              email: email
            })
          });
          _core.logger.info("Password reset requested", {
            email: email
          });
          return response;
        } catch (error) {
          _core.logger.error("Forgot password failed", {
            error: error,
            email: email
          });
          throw new AuthError("Failed to send password reset email. Please try again.", error);
        }
      });
      function forgotPassword(_x3) {
        return _forgotPassword.apply(this, arguments);
      }
      return forgotPassword;
    }())
  }, {
    key: "resetPassword",
    value: (function () {
      var _resetPassword = (0, _asyncToGenerator2.default)(function* (data) {
        try {
          if (data.password !== data.confirmPassword) {
            throw new AuthError("Passwords do not match");
          }
          var resetData = {
            token: data.token,
            password: data.password
          };
          var response = yield _api.api.request("/auth/reset-password", {
            method: "POST",
            body: JSON.stringify(resetData)
          });
          _core.logger.info("Password reset successful");
          return response;
        } catch (error) {
          _core.logger.error("Password reset failed", {
            error: error
          });
          throw new AuthError("Failed to reset password. Please try again.", error);
        }
      });
      function resetPassword(_x4) {
        return _resetPassword.apply(this, arguments);
      }
      return resetPassword;
    }())
  }, {
    key: "getCurrentUser",
    value: (function () {
      var _getCurrentUser = (0, _asyncToGenerator2.default)(function* () {
        try {
          var userData = yield this.secureGetItemAsync(AuthService.USER_KEY);
          return userData ? JSON.parse(userData) : null;
        } catch (error) {
          _core.logger.error("Failed to get current user", {
            error: error
          });
          return null;
        }
      });
      function getCurrentUser() {
        return _getCurrentUser.apply(this, arguments);
      }
      return getCurrentUser;
    }())
  }, {
    key: "getAccessToken",
    value: (function () {
      var _getAccessToken = (0, _asyncToGenerator2.default)(function* () {
        try {
          return yield this.secureGetItemAsync(AuthService.ACCESS_TOKEN_KEY);
        } catch (error) {
          _core.logger.error("Failed to get access token", {
            error: error
          });
          return null;
        }
      });
      function getAccessToken() {
        return _getAccessToken.apply(this, arguments);
      }
      return getAccessToken;
    }())
  }, {
    key: "isAuthenticated",
    value: (function () {
      var _isAuthenticated = (0, _asyncToGenerator2.default)(function* () {
        try {
          var token = yield this.getAccessToken();
          var user = yield this.getCurrentUser();
          return !!(token && user);
        } catch (error) {
          _core.logger.error("Authentication check failed", {
            error: error
          });
          return false;
        }
      });
      function isAuthenticated() {
        return _isAuthenticated.apply(this, arguments);
      }
      return isAuthenticated;
    }())
  }, {
    key: "updateUser",
    value: (function () {
      var _updateUser = (0, _asyncToGenerator2.default)(function* (userData) {
        try {
          var currentUser = yield this.getCurrentUser();
          if (!currentUser) {
            throw new AuthError("No authenticated user found");
          }
          var updatedUser = _objectSpread(_objectSpread({}, currentUser), userData);
          yield this.secureSetItemAsync(AuthService.USER_KEY, JSON.stringify(updatedUser));
          _core.logger.info("User data updated", {
            userId: updatedUser.id
          });
        } catch (error) {
          _core.logger.error("Failed to update user data", {
            error: error
          });
          throw new AuthError("Failed to update user data", error);
        }
      });
      function updateUser(_x5) {
        return _updateUser.apply(this, arguments);
      }
      return updateUser;
    }())
  }, {
    key: "secureSetItemAsync",
    value: function () {
      var _secureSetItemAsync = (0, _asyncToGenerator2.default)(function* (key, value) {
        try {
          if (key.includes('token') || key.includes('user')) {
            try {
              var result = yield Keychain.setGenericPassword('pawfectmatch', value, {
                service: 'pawfectmatch-auth',
                accessControl: Keychain.ACCESS_CONTROL.BIOMETRY_ANY_OR_DEVICE_PASSCODE,
                accessible: Keychain.ACCESSIBLE.WHEN_UNLOCKED_THIS_DEVICE_ONLY
              });
              if (result === false) {
                throw new Error('Failed to store in Keychain');
              }
              yield SecureStore.setItemAsync(`${key}_ref`, 'keychain', {
                keychainAccessible: SecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY
              });
              return;
            } catch (keychainError) {
              _core.logger.warn(`Keychain failed, falling back to SecureStore for ${key}`, {
                error: keychainError
              });
              yield SecureStore.setItemAsync(key, value, {
                keychainAccessible: SecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY
              });
              yield SecureStore.setItemAsync(`${key}_ref`, 'securestore', {
                keychainAccessible: SecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY
              });
            }
          } else {
            yield SecureStore.setItemAsync(key, value, {
              keychainAccessible: SecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY
            });
          }
        } catch (error) {
          _core.logger.error(`Failed to securely store ${key}`, {
            error: error
          });
          throw new AuthError(`Failed to securely store authentication data`, error);
        }
      });
      function secureSetItemAsync(_x6, _x7) {
        return _secureSetItemAsync.apply(this, arguments);
      }
      return secureSetItemAsync;
    }()
  }, {
    key: "secureGetItemAsync",
    value: function () {
      var _secureGetItemAsync = (0, _asyncToGenerator2.default)(function* (key) {
        try {
          var refKey = `${key}_ref`;
          var storageLocation = yield SecureStore.getItemAsync(refKey);
          if (storageLocation === 'keychain') {
            try {
              var credentials = yield Keychain.getGenericPassword({
                service: 'pawfectmatch-auth'
              });
              if (credentials) {
                return credentials.password;
              }
              return null;
            } catch (keychainError) {
              _core.logger.warn(`Keychain retrieval failed, trying SecureStore fallback for ${key}`, {
                error: keychainError
              });
              return yield SecureStore.getItemAsync(key);
            }
          } else if (storageLocation === 'securestore') {
            return yield SecureStore.getItemAsync(key);
          } else {
            return yield SecureStore.getItemAsync(key);
          }
        } catch (error) {
          _core.logger.error(`Failed to securely retrieve ${key}`, {
            error: error
          });
          return null;
        }
      });
      function secureGetItemAsync(_x8) {
        return _secureGetItemAsync.apply(this, arguments);
      }
      return secureGetItemAsync;
    }()
  }, {
    key: "secureDeleteItemAsync",
    value: function () {
      var _secureDeleteItemAsync = (0, _asyncToGenerator2.default)(function* (key) {
        try {
          var refKey = `${key}_ref`;
          var storageLocation = yield SecureStore.getItemAsync(refKey);
          if (storageLocation === 'keychain') {
            try {
              yield Keychain.resetGenericPassword({
                service: 'pawfectmatch-auth'
              });
            } catch (keychainError) {
              _core.logger.warn(`Keychain deletion failed, continuing with cleanup`, {
                error: keychainError
              });
            }
            yield SecureStore.deleteItemAsync(refKey);
          } else if (storageLocation === 'securestore') {
            yield SecureStore.deleteItemAsync(key);
            yield SecureStore.deleteItemAsync(refKey);
          } else {
            try {
              yield SecureStore.deleteItemAsync(key);
            } catch (error) {}
          }
        } catch (error) {
          _core.logger.error(`Failed to securely delete ${key}`, {
            error: error
          });
        }
      });
      function secureDeleteItemAsync(_x9) {
        return _secureDeleteItemAsync.apply(this, arguments);
      }
      return secureDeleteItemAsync;
    }()
  }, {
    key: "storeAuthData",
    value: function () {
      var _storeAuthData = (0, _asyncToGenerator2.default)(function* (response) {
        try {
          yield Promise.all([this.secureSetItemAsync(AuthService.ACCESS_TOKEN_KEY, response.accessToken), this.secureSetItemAsync(AuthService.REFRESH_TOKEN_KEY, response.refreshToken), this.secureSetItemAsync(AuthService.USER_KEY, JSON.stringify(response.user)), this.secureSetItemAsync(AuthService.SESSION_START_KEY, Date.now().toString()), this.secureSetItemAsync(AuthService.LAST_ACTIVITY_KEY, Date.now().toString())]);
          this.startSessionMonitoring();
        } catch (error) {
          _core.logger.error("Failed to store auth data", {
            error: error
          });
          throw new AuthError("Failed to save authentication data", error);
        }
      });
      function storeAuthData(_x0) {
        return _storeAuthData.apply(this, arguments);
      }
      return storeAuthData;
    }()
  }, {
    key: "clearAuthData",
    value: function () {
      var _clearAuthData = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield Promise.all([this.secureDeleteItemAsync(AuthService.ACCESS_TOKEN_KEY), this.secureDeleteItemAsync(AuthService.REFRESH_TOKEN_KEY), this.secureDeleteItemAsync(AuthService.USER_KEY), this.secureDeleteItemAsync(AuthService.SESSION_START_KEY), this.secureDeleteItemAsync(AuthService.LAST_ACTIVITY_KEY)]);
          this.stopSessionMonitoring();
        } catch (error) {
          _core.logger.error("Failed to clear auth data", {
            error: error
          });
        }
      });
      function clearAuthData() {
        return _clearAuthData.apply(this, arguments);
      }
      return clearAuthData;
    }()
  }, {
    key: "getRefreshToken",
    value: function () {
      var _getRefreshToken = (0, _asyncToGenerator2.default)(function* () {
        try {
          return yield this.secureGetItemAsync(AuthService.REFRESH_TOKEN_KEY);
        } catch (error) {
          _core.logger.error("Failed to get refresh token", {
            error: error
          });
          return null;
        }
      });
      function getRefreshToken() {
        return _getRefreshToken.apply(this, arguments);
      }
      return getRefreshToken;
    }()
  }]);
}();
AuthService.ACCESS_TOKEN_KEY = "auth_access_token";
AuthService.REFRESH_TOKEN_KEY = "auth_refresh_token";
AuthService.USER_KEY = "auth_user";
AuthService.BIOMETRIC_ENABLED_KEY = "biometric_enabled";
AuthService.BIOMETRIC_CREDENTIALS_KEY = "biometric_credentials";
AuthService.SESSION_START_KEY = "session_start_time";
AuthService.LAST_ACTIVITY_KEY = "last_activity_time";
AuthService.SERVICE_NAME = "com.pawfectmatch.mobile";
AuthService.SESSION_TIMEOUT = 24 * 60 * 60 * 1000;
AuthService.ACTIVITY_TIMEOUT = 30 * 60 * 1000;
var AuthError = exports.AuthError = function (_Error) {
  function AuthError(message, originalError) {
    var _this2;
    (0, _classCallCheck2.default)(this, AuthError);
    _this2 = _callSuper(this, AuthError, [message]);
    _this2.originalError = originalError;
    _this2.name = "AuthError";
    return _this2;
  }
  (0, _inherits2.default)(AuthError, _Error);
  return (0, _createClass2.default)(AuthError);
}((0, _wrapNativeSuper2.default)(Error));
var authService = exports.authService = new AuthService();
var _default = exports.default = authService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,