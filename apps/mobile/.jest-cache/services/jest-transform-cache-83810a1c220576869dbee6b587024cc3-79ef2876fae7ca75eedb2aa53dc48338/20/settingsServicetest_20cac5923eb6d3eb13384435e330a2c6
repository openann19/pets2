8bd81ca4363ae54719fd84a59bbc944d
"use strict";

_getJestObj().mock("../api", function () {
  return {
    request: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _settingsService = require("../settingsService");
var _api = require("../api");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRequest = _api.request;
(0, _globals.describe)('SettingsService', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('getSettings', function () {
    (0, _globals.it)('should fetch user settings successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockSettings = {
        notifications: {
          matches: true,
          messages: true,
          likes: false,
          activity: true,
          push: true,
          email: false
        },
        preferences: {
          maxDistance: 50,
          ageRange: {
            min: 2,
            max: 10
          },
          species: ['dog', 'cat'],
          intents: ['playdate', 'friendship']
        },
        settings: {
          theme: 'dark',
          language: 'en',
          privacy: 'friends'
        }
      };
      mockRequest.mockResolvedValue(mockSettings);
      var result = yield (0, _settingsService.getSettings)();
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/settings/me', {
        method: 'GET'
      });
      (0, _globals.expect)(result).toEqual(mockSettings);
    }));
    (0, _globals.it)('should handle empty settings response', (0, _asyncToGenerator2.default)(function* () {
      var emptySettings = {};
      mockRequest.mockResolvedValue(emptySettings);
      var result = yield (0, _settingsService.getSettings)();
      (0, _globals.expect)(result).toEqual({});
    }));
    (0, _globals.it)('should handle partial settings data', (0, _asyncToGenerator2.default)(function* () {
      var _result$notifications, _result$notifications2;
      var partialSettings = {
        notifications: {
          matches: true,
          messages: false
        }
      };
      mockRequest.mockResolvedValue(partialSettings);
      var result = yield (0, _settingsService.getSettings)();
      (0, _globals.expect)((_result$notifications = result.notifications) == null ? void 0 : _result$notifications.matches).toBe(true);
      (0, _globals.expect)((_result$notifications2 = result.notifications) == null ? void 0 : _result$notifications2.messages).toBe(false);
      (0, _globals.expect)(result.preferences).toBeUndefined();
    }));
    (0, _globals.it)('should handle API errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('API Error');
      mockRequest.mockRejectedValue(error);
      yield (0, _globals.expect)((0, _settingsService.getSettings)()).rejects.toThrow('API Error');
    }));
    (0, _globals.it)('should handle network timeouts', (0, _asyncToGenerator2.default)(function* () {
      var timeoutError = new Error('Network timeout');
      mockRequest.mockRejectedValue(timeoutError);
      yield (0, _globals.expect)((0, _settingsService.getSettings)()).rejects.toThrow('Network timeout');
    }));
    (0, _globals.it)('should handle malformed API responses', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue(null);
      var result = yield (0, _settingsService.getSettings)();
      (0, _globals.expect)(result).toBeNull();
    }));
    (0, _globals.it)('should handle very large settings objects', (0, _asyncToGenerator2.default)(function* () {
      var _result$preferences, _result$settings;
      var largeSettings = {
        notifications: {
          matches: true,
          messages: true,
          likes: true,
          activity: true,
          push: true,
          email: true
        },
        preferences: {
          maxDistance: 1000,
          ageRange: {
            min: 0,
            max: 30
          },
          species: Array.from({
            length: 50
          }, function (_, i) {
            return `species${i}`;
          }),
          intents: Array.from({
            length: 20
          }, function (_, i) {
            return `intent${i}`;
          })
        },
        settings: {
          largeObject: Array.from({
            length: 100
          }, function (_, i) {
            return {
              key: `item${i}`,
              value: `value${i}`,
              nested: {
                data: `nested${i}`,
                array: Array.from({
                  length: 10
                }, function () {
                  return Math.random();
                })
              }
            };
          })
        }
      };
      mockRequest.mockResolvedValue(largeSettings);
      var result = yield (0, _settingsService.getSettings)();
      (0, _globals.expect)((_result$preferences = result.preferences) == null ? void 0 : _result$preferences.species).toHaveLength(50);
      (0, _globals.expect)((_result$settings = result.settings) == null ? void 0 : _result$settings.largeObject).toHaveLength(100);
    }));
  });
  (0, _globals.describe)('saveSettings', function () {
    (0, _globals.it)('should save user settings successfully', (0, _asyncToGenerator2.default)(function* () {
      var settingsToSave = {
        notifications: {
          matches: false,
          messages: true,
          likes: true,
          activity: false,
          push: true,
          email: true
        },
        preferences: {
          maxDistance: 25,
          ageRange: {
            min: 1,
            max: 8
          },
          species: ['dog'],
          intents: ['playdate']
        },
        settings: {
          theme: 'light',
          language: 'es'
        }
      };
      var savedSettings = _objectSpread(_objectSpread({}, settingsToSave), {}, {
        updatedAt: '2024-01-01T00:00:00Z'
      });
      mockRequest.mockResolvedValue(savedSettings);
      var result = yield (0, _settingsService.saveSettings)(settingsToSave);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/settings/me', {
        method: 'PATCH',
        body: settingsToSave
      });
      (0, _globals.expect)(result).toEqual(savedSettings);
    }));
    (0, _globals.it)('should save minimal settings', (0, _asyncToGenerator2.default)(function* () {
      var _result$notifications3;
      var minimalSettings = {
        notifications: {
          push: false
        }
      };
      mockRequest.mockResolvedValue(minimalSettings);
      var result = yield (0, _settingsService.saveSettings)(minimalSettings);
      (0, _globals.expect)((_result$notifications3 = result.notifications) == null ? void 0 : _result$notifications3.push).toBe(false);
    }));
    (0, _globals.it)('should save empty settings object', (0, _asyncToGenerator2.default)(function* () {
      var emptySettings = {};
      mockRequest.mockResolvedValue(emptySettings);
      var result = yield (0, _settingsService.saveSettings)(emptySettings);
      (0, _globals.expect)(result).toEqual({});
    }));
    (0, _globals.it)('should handle API errors during save', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Save failed');
      mockRequest.mockRejectedValue(error);
      var settings = {
        notifications: {
          push: true
        }
      };
      yield (0, _globals.expect)((0, _settingsService.saveSettings)(settings)).rejects.toThrow('Save failed');
    }));
    (0, _globals.it)('should handle validation errors from API', (0, _asyncToGenerator2.default)(function* () {
      var validationError = new Error('Invalid settings format');
      mockRequest.mockRejectedValue(validationError);
      var invalidSettings = {
        notifications: {
          matches: 'invalid'
        }
      };
      yield (0, _globals.expect)((0, _settingsService.saveSettings)(invalidSettings)).rejects.toThrow('Invalid settings format');
    }));
    (0, _globals.it)('should handle concurrent save operations', (0, _asyncToGenerator2.default)(function* () {
      var settings1 = {
        notifications: {
          matches: true
        }
      };
      var settings2 = {
        notifications: {
          messages: true
        }
      };
      var settings3 = {
        preferences: {
          maxDistance: 30
        }
      };
      mockRequest.mockResolvedValue(function (settings) {
        return settings;
      });
      var promises = [(0, _settingsService.saveSettings)(settings1), (0, _settingsService.saveSettings)(settings2), (0, _settingsService.saveSettings)(settings3)];
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toHaveLength(3);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(3);
    }));
    (0, _globals.it)('should preserve complex nested structures', (0, _asyncToGenerator2.default)(function* () {
      var _result$preferences2, _result$preferences3, _result$settings2, _result$settings2$pro, _result$settings3, _result$settings3$not, _result$settings3$not2, _result$settings4, _result$settings4$pri;
      var complexSettings = {
        notifications: {
          matches: true,
          messages: true,
          likes: false,
          activity: true,
          push: true,
          email: false
        },
        preferences: {
          maxDistance: 75,
          ageRange: {
            min: 3,
            max: 12
          },
          species: ['dog', 'cat', 'bird', 'fish'],
          intents: ['friendship', 'playdate', 'breeding']
        },
        settings: {
          profile: {
            visibility: 'public',
            showOnlineStatus: true,
            allowMessages: true
          },
          notifications: {
            frequency: 'daily',
            quietHours: {
              start: '22:00',
              end: '08:00'
            }
          },
          privacy: {
            dataSharing: false,
            analytics: true,
            locationTracking: false
          }
        }
      };
      mockRequest.mockResolvedValue(complexSettings);
      var result = yield (0, _settingsService.saveSettings)(complexSettings);
      (0, _globals.expect)((_result$preferences2 = result.preferences) == null ? void 0 : _result$preferences2.species).toContain('dog');
      (0, _globals.expect)((_result$preferences3 = result.preferences) == null ? void 0 : _result$preferences3.species).toContain('cat');
      (0, _globals.expect)((_result$settings2 = result.settings) == null ? void 0 : (_result$settings2$pro = _result$settings2.profile) == null ? void 0 : _result$settings2$pro.visibility).toBe('public');
      (0, _globals.expect)((_result$settings3 = result.settings) == null ? void 0 : (_result$settings3$not = _result$settings3.notifications) == null ? void 0 : (_result$settings3$not2 = _result$settings3$not.quietHours) == null ? void 0 : _result$settings3$not2.start).toBe('22:00');
      (0, _globals.expect)((_result$settings4 = result.settings) == null ? void 0 : (_result$settings4$pri = _result$settings4.privacy) == null ? void 0 : _result$settings4$pri.dataSharing).toBe(false);
    }));
  });
  (0, _globals.describe)('Settings Data Structure', function () {
    (0, _globals.it)('should handle notification settings correctly', function () {
      var _notificationSettings, _notificationSettings2, _notificationSettings3;
      var notificationSettings = {
        notifications: {
          matches: true,
          messages: false,
          likes: true,
          activity: false,
          push: true,
          email: false
        }
      };
      (0, _globals.expect)((_notificationSettings = notificationSettings.notifications) == null ? void 0 : _notificationSettings.matches).toBe(true);
      (0, _globals.expect)((_notificationSettings2 = notificationSettings.notifications) == null ? void 0 : _notificationSettings2.messages).toBe(false);
      (0, _globals.expect)((_notificationSettings3 = notificationSettings.notifications) == null ? void 0 : _notificationSettings3.push).toBe(true);
    });
    (0, _globals.it)('should handle preference settings correctly', function () {
      var _preferenceSettings$p, _preferenceSettings$p2, _preferenceSettings$p3, _preferenceSettings$p4, _preferenceSettings$p5;
      var preferenceSettings = {
        preferences: {
          maxDistance: 100,
          ageRange: {
            min: 1,
            max: 15
          },
          species: ['dog', 'cat', 'rabbit'],
          intents: ['friendship', 'playdate']
        }
      };
      (0, _globals.expect)((_preferenceSettings$p = preferenceSettings.preferences) == null ? void 0 : _preferenceSettings$p.maxDistance).toBe(100);
      (0, _globals.expect)((_preferenceSettings$p2 = preferenceSettings.preferences) == null ? void 0 : _preferenceSettings$p2.ageRange.min).toBe(1);
      (0, _globals.expect)((_preferenceSettings$p3 = preferenceSettings.preferences) == null ? void 0 : _preferenceSettings$p3.ageRange.max).toBe(15);
      (0, _globals.expect)((_preferenceSettings$p4 = preferenceSettings.preferences) == null ? void 0 : _preferenceSettings$p4.species).toHaveLength(3);
      (0, _globals.expect)((_preferenceSettings$p5 = preferenceSettings.preferences) == null ? void 0 : _preferenceSettings$p5.intents).toContain('friendship');
    });
    (0, _globals.it)('should handle generic settings object', function () {
      var _genericSettings$sett, _genericSettings$sett2, _genericSettings$sett3, _genericSettings$sett4;
      var genericSettings = {
        settings: {
          theme: 'dark',
          language: 'fr',
          timezone: 'Europe/Paris',
          units: 'metric',
          customData: {
            featureFlags: ['newUI', 'betaFeatures'],
            experimentGroups: ['groupA', 'groupB']
          }
        }
      };
      (0, _globals.expect)((_genericSettings$sett = genericSettings.settings) == null ? void 0 : _genericSettings$sett.theme).toBe('dark');
      (0, _globals.expect)((_genericSettings$sett2 = genericSettings.settings) == null ? void 0 : _genericSettings$sett2.language).toBe('fr');
      (0, _globals.expect)((_genericSettings$sett3 = genericSettings.settings) == null ? void 0 : (_genericSettings$sett4 = _genericSettings$sett3.customData) == null ? void 0 : _genericSettings$sett4.featureFlags).toContain('newUI');
    });
    (0, _globals.it)('should handle undefined optional fields', function () {
      var minimalSettings = {};
      (0, _globals.expect)(minimalSettings.notifications).toBeUndefined();
      (0, _globals.expect)(minimalSettings.preferences).toBeUndefined();
      (0, _globals.expect)(minimalSettings.settings).toBeUndefined();
    });
  });
  (0, _globals.describe)('Settings Validation and Constraints', function () {
    (0, _globals.it)('should handle extreme values', (0, _asyncToGenerator2.default)(function* () {
      var _result$preferences4, _result$preferences5, _result$preferences6;
      var extremeSettings = {
        preferences: {
          maxDistance: 10000,
          ageRange: {
            min: 0,
            max: 100
          },
          species: Array.from({
            length: 100
          }, function (_, i) {
            return `species${i}`;
          }),
          intents: Array.from({
            length: 50
          }, function (_, i) {
            return `intent${i}`;
          })
        }
      };
      mockRequest.mockResolvedValue(extremeSettings);
      var result = yield (0, _settingsService.saveSettings)(extremeSettings);
      (0, _globals.expect)((_result$preferences4 = result.preferences) == null ? void 0 : _result$preferences4.maxDistance).toBe(10000);
      (0, _globals.expect)((_result$preferences5 = result.preferences) == null ? void 0 : _result$preferences5.species).toHaveLength(100);
      (0, _globals.expect)((_result$preferences6 = result.preferences) == null ? void 0 : _result$preferences6.intents).toHaveLength(50);
    }));
    (0, _globals.it)('should handle zero values', (0, _asyncToGenerator2.default)(function* () {
      var _result$preferences7, _result$preferences8, _result$preferences9;
      var zeroSettings = {
        preferences: {
          maxDistance: 0,
          ageRange: {
            min: 0,
            max: 0
          },
          species: [],
          intents: []
        }
      };
      mockRequest.mockResolvedValue(zeroSettings);
      var result = yield (0, _settingsService.saveSettings)(zeroSettings);
      (0, _globals.expect)((_result$preferences7 = result.preferences) == null ? void 0 : _result$preferences7.maxDistance).toBe(0);
      (0, _globals.expect)((_result$preferences8 = result.preferences) == null ? void 0 : _result$preferences8.ageRange.min).toBe(0);
      (0, _globals.expect)((_result$preferences9 = result.preferences) == null ? void 0 : _result$preferences9.species).toHaveLength(0);
    }));
    (0, _globals.it)('should handle negative values', (0, _asyncToGenerator2.default)(function* () {
      var _result$preferences0;
      var negativeSettings = {
        preferences: {
          maxDistance: -1,
          ageRange: {
            min: -5,
            max: -1
          }
        }
      };
      mockRequest.mockResolvedValue(negativeSettings);
      var result = yield (0, _settingsService.saveSettings)(negativeSettings);
      (0, _globals.expect)((_result$preferences0 = result.preferences) == null ? void 0 : _result$preferences0.maxDistance).toBe(-1);
    }));
    (0, _globals.it)('should handle special characters and unicode', (0, _asyncToGenerator2.default)(function* () {
      var _result$settings5, _result$settings6, _result$settings7;
      var unicodeSettings = {
        settings: {
          language: '中文',
          timezone: 'America/New_York',
          displayName: 'José María ñoño 🚀',
          bio: 'I love pets! 🐶🐱🐭'
        }
      };
      mockRequest.mockResolvedValue(unicodeSettings);
      var result = yield (0, _settingsService.saveSettings)(unicodeSettings);
      (0, _globals.expect)((_result$settings5 = result.settings) == null ? void 0 : _result$settings5.language).toBe('中文');
      (0, _globals.expect)((_result$settings6 = result.settings) == null ? void 0 : _result$settings6.displayName).toBe('José María ñoño 🚀');
      (0, _globals.expect)((_result$settings7 = result.settings) == null ? void 0 : _result$settings7.bio).toContain('🐶🐱🐭');
    }));
  });
  (0, _globals.describe)('Integration Scenarios', function () {
    (0, _globals.it)('should handle get-modify-save workflow', (0, _asyncToGenerator2.default)(function* () {
      var _currentSettings$noti, _savedSettings$notifi, _savedSettings$notifi2, _savedSettings$prefer;
      var initialSettings = {
        notifications: {
          matches: true,
          messages: true,
          push: true
        },
        preferences: {
          maxDistance: 50
        }
      };
      mockRequest.mockResolvedValueOnce(initialSettings);
      var currentSettings = yield (0, _settingsService.getSettings)();
      (0, _globals.expect)((_currentSettings$noti = currentSettings.notifications) == null ? void 0 : _currentSettings$noti.matches).toBe(true);
      var modifiedSettings = _objectSpread(_objectSpread({}, currentSettings), {}, {
        notifications: _objectSpread(_objectSpread({}, currentSettings.notifications), {}, {
          likes: true,
          messages: false
        }),
        preferences: _objectSpread(_objectSpread({}, currentSettings.preferences), {}, {
          maxDistance: 75
        })
      });
      mockRequest.mockResolvedValueOnce(modifiedSettings);
      var savedSettings = yield (0, _settingsService.saveSettings)(modifiedSettings);
      (0, _globals.expect)((_savedSettings$notifi = savedSettings.notifications) == null ? void 0 : _savedSettings$notifi.likes).toBe(true);
      (0, _globals.expect)((_savedSettings$notifi2 = savedSettings.notifications) == null ? void 0 : _savedSettings$notifi2.messages).toBe(false);
      (0, _globals.expect)((_savedSettings$prefer = savedSettings.preferences) == null ? void 0 : _savedSettings$prefer.maxDistance).toBe(75);
    }));
    (0, _globals.it)('should handle settings migration scenarios', (0, _asyncToGenerator2.default)(function* () {
      var _current$notification, _saved$notifications, _saved$preferences, _saved$settings;
      var oldFormatSettings = {
        notifications: {
          matches: true,
          messages: true
        }
      };
      mockRequest.mockResolvedValueOnce(oldFormatSettings);
      var current = yield (0, _settingsService.getSettings)();
      (0, _globals.expect)((_current$notification = current.notifications) == null ? void 0 : _current$notification.matches).toBe(true);
      var migratedSettings = _objectSpread(_objectSpread({}, current), {}, {
        notifications: _objectSpread(_objectSpread({}, current.notifications), {}, {
          likes: false,
          activity: true,
          push: true,
          email: false
        }),
        preferences: {
          maxDistance: 25,
          ageRange: {
            min: 1,
            max: 10
          },
          species: ['dog'],
          intents: ['friendship']
        },
        settings: {
          theme: 'system',
          language: 'en'
        }
      });
      mockRequest.mockResolvedValueOnce(migratedSettings);
      var saved = yield (0, _settingsService.saveSettings)(migratedSettings);
      (0, _globals.expect)((_saved$notifications = saved.notifications) == null ? void 0 : _saved$notifications.likes).toBe(false);
      (0, _globals.expect)((_saved$preferences = saved.preferences) == null ? void 0 : _saved$preferences.maxDistance).toBe(25);
      (0, _globals.expect)((_saved$settings = saved.settings) == null ? void 0 : _saved$settings.theme).toBe('system');
    }));
    (0, _globals.it)('should handle bulk settings updates', (0, _asyncToGenerator2.default)(function* () {
      var _results$0$notificati, _results$1$notificati, _results$2$preference, _results$3$settings;
      var bulkUpdates = [{
        notifications: {
          matches: true
        }
      }, {
        notifications: {
          messages: false
        }
      }, {
        preferences: {
          maxDistance: 30
        }
      }, {
        settings: {
          theme: 'dark'
        }
      }];
      bulkUpdates.forEach(function (update, index) {
        mockRequest.mockResolvedValueOnce(update);
      });
      var results = yield Promise.all(bulkUpdates.map(function (update) {
        return (0, _settingsService.saveSettings)(update);
      }));
      (0, _globals.expect)(results).toHaveLength(4);
      (0, _globals.expect)((_results$0$notificati = results[0].notifications) == null ? void 0 : _results$0$notificati.matches).toBe(true);
      (0, _globals.expect)((_results$1$notificati = results[1].notifications) == null ? void 0 : _results$1$notificati.messages).toBe(false);
      (0, _globals.expect)((_results$2$preference = results[2].preferences) == null ? void 0 : _results$2$preference.maxDistance).toBe(30);
      (0, _globals.expect)((_results$3$settings = results[3].settings) == null ? void 0 : _results$3$settings.theme).toBe('dark');
    }));
  });
  (0, _globals.describe)('Error Recovery and Resilience', function () {
    (0, _globals.it)('should handle temporary network failures', (0, _asyncToGenerator2.default)(function* () {
      var _result$notifications4;
      var callCount = 0;
      mockRequest.mockImplementation(function () {
        callCount++;
        if (callCount === 1) {
          throw new Error('Network temporarily unavailable');
        }
        return Promise.resolve({
          notifications: {
            push: true
          }
        });
      });
      yield (0, _globals.expect)((0, _settingsService.getSettings)()).rejects.toThrow('Network temporarily unavailable');
      var result = yield (0, _settingsService.getSettings)();
      (0, _globals.expect)((_result$notifications4 = result.notifications) == null ? void 0 : _result$notifications4.push).toBe(true);
    }));
    (0, _globals.it)('should handle partial failures in concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      var callCount = 0;
      mockRequest.mockImplementation(function () {
        callCount++;
        if (callCount === 2) {
          throw new Error('Second operation failed');
        }
        return Promise.resolve({
          success: true
        });
      });
      var operations = [(0, _settingsService.saveSettings)({
        notifications: {
          matches: true
        }
      }), (0, _settingsService.saveSettings)({
        notifications: {
          messages: true
        }
      }), (0, _settingsService.saveSettings)({
        preferences: {
          maxDistance: 50
        }
      })];
      var results = yield Promise.allSettled(operations);
      (0, _globals.expect)(results[0].status).toBe('fulfilled');
      (0, _globals.expect)(results[1].status).toBe('rejected');
      (0, _globals.expect)(results[1].reason.message).toBe('Second operation failed');
      (0, _globals.expect)(results[2].status).toBe('fulfilled');
    }));
    (0, _globals.it)('should handle malformed server responses', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue('invalid json string');
      var result = yield (0, _settingsService.getSettings)();
      (0, _globals.expect)(result).toBe('invalid json string');
    }));
    (0, _globals.it)('should handle extremely large responses', (0, _asyncToGenerator2.default)(function* () {
      var _result$settings8, _result$settings9;
      var hugeSettings = {
        settings: {
          massiveData: 'x'.repeat(1000000),
          hugeArray: Array.from({
            length: 10000
          }, function (_, i) {
            return {
              id: i,
              data: 'x'.repeat(1000)
            };
          })
        }
      };
      mockRequest.mockResolvedValue(hugeSettings);
      var result = yield (0, _settingsService.getSettings)();
      (0, _globals.expect)((_result$settings8 = result.settings) == null ? void 0 : _result$settings8.massiveData).toHaveLength(1000000);
      (0, _globals.expect)((_result$settings9 = result.settings) == null ? void 0 : _result$settings9.hugeArray).toHaveLength(10000);
    }));
  });
  (0, _globals.describe)('Type Safety and Interface Compliance', function () {
    (0, _globals.it)('should maintain type safety for notifications', function () {
      var _settings$notificatio, _settings$notificatio2;
      var settings = {
        notifications: {
          matches: true,
          messages: false,
          likes: true,
          activity: false,
          push: true,
          email: false
        }
      };
      (0, _globals.expect)(typeof ((_settings$notificatio = settings.notifications) == null ? void 0 : _settings$notificatio.matches)).toBe('boolean');
      (0, _globals.expect)(typeof ((_settings$notificatio2 = settings.notifications) == null ? void 0 : _settings$notificatio2.messages)).toBe('boolean');
    });
    (0, _globals.it)('should maintain type safety for preferences', function () {
      var _settings$preferences, _settings$preferences2, _settings$preferences3, _settings$preferences4;
      var settings = {
        preferences: {
          maxDistance: 50,
          ageRange: {
            min: 2,
            max: 10
          },
          species: ['dog', 'cat'],
          intents: ['playdate', 'friendship']
        }
      };
      (0, _globals.expect)(typeof ((_settings$preferences = settings.preferences) == null ? void 0 : _settings$preferences.maxDistance)).toBe('number');
      (0, _globals.expect)(typeof ((_settings$preferences2 = settings.preferences) == null ? void 0 : _settings$preferences2.ageRange.min)).toBe('number');
      (0, _globals.expect)(Array.isArray((_settings$preferences3 = settings.preferences) == null ? void 0 : _settings$preferences3.species)).toBe(true);
      (0, _globals.expect)(Array.isArray((_settings$preferences4 = settings.preferences) == null ? void 0 : _settings$preferences4.intents)).toBe(true);
    });
    (0, _globals.it)('should allow flexible settings object', function () {
      var _flexibleSettings$set, _flexibleSettings$set2, _flexibleSettings$set3;
      var flexibleSettings = {
        settings: {
          anyKey: 'anyValue',
          nestedObject: {
            deeply: {
              nested: {
                value: 123,
                array: [1, 2, 3],
                boolean: true
              }
            }
          },
          mixedArray: ['string', 42, true, {
            object: 'in array'
          }, [1, 2, 3]]
        }
      };
      (0, _globals.expect)((_flexibleSettings$set = flexibleSettings.settings) == null ? void 0 : _flexibleSettings$set.anyKey).toBe('anyValue');
      (0, _globals.expect)((_flexibleSettings$set2 = flexibleSettings.settings) == null ? void 0 : _flexibleSettings$set2.nestedObject.deeply.nested.value).toBe(123);
      (0, _globals.expect)((_flexibleSettings$set3 = flexibleSettings.settings) == null ? void 0 : _flexibleSettings$set3.mixedArray).toHaveLength(5);
    });
  });
  (0, _globals.describe)('Performance and Memory', function () {
    (0, _globals.it)('should handle frequent settings operations', (0, _asyncToGenerator2.default)(function* () {
      var operations = Array.from({
        length: 100
      }, function (_, i) {
        return {
          notifications: (0, _defineProperty2.default)({}, `setting${i}`, i % 2 === 0)
        };
      });
      operations.forEach(function (op) {
        mockRequest.mockResolvedValueOnce(op);
      });
      var promises = operations.map(function (op) {
        return (0, _settingsService.saveSettings)(op);
      });
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toHaveLength(100);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(100);
    }));
    (0, _globals.it)('should handle settings with circular references', (0, _asyncToGenerator2.default)(function* () {
      var _result$settings0;
      var circularSettings = {
        settings: {}
      };
      circularSettings.settings.self = circularSettings.settings;
      mockRequest.mockResolvedValue(circularSettings);
      var result = yield (0, _settingsService.saveSettings)(circularSettings);
      (0, _globals.expect)((_result$settings0 = result.settings) == null ? void 0 : _result$settings0.self).toBe(result.settings);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,