56d420489ffe34a3152314c509e079f0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.accessibilityService = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactNative = require("react-native");
var _logger = require("./logger");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var AccessibilityService = function () {
  function AccessibilityService() {
    (0, _classCallCheck2.default)(this, AccessibilityService);
    this.config = {
      isScreenReaderEnabled: false,
      isBoldTextEnabled: false,
      isGrayscaleEnabled: false,
      isInvertColorsEnabled: false,
      isReduceMotionEnabled: false,
      isReduceTransparencyEnabled: false,
      preferredContentSizeCategory: "normal"
    };
    this.listeners = [];
    void this.initializeAccessibility();
  }
  return (0, _createClass2.default)(AccessibilityService, [{
    key: "initializeAccessibility",
    value: (function () {
      var _initializeAccessibility = (0, _asyncToGenerator2.default)(function* () {
        try {
          var _yield$Promise$all = yield Promise.all([_reactNative.AccessibilityInfo.isScreenReaderEnabled(), _reactNative.AccessibilityInfo.isBoldTextEnabled(), _reactNative.AccessibilityInfo.isGrayscaleEnabled(), _reactNative.AccessibilityInfo.isInvertColorsEnabled(), _reactNative.AccessibilityInfo.isReduceMotionEnabled(), _reactNative.AccessibilityInfo.isReduceTransparencyEnabled()]),
            _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 6),
            screenReaderEnabled = _yield$Promise$all2[0],
            boldTextEnabled = _yield$Promise$all2[1],
            grayscaleEnabled = _yield$Promise$all2[2],
            invertColorsEnabled = _yield$Promise$all2[3],
            reduceMotionEnabled = _yield$Promise$all2[4],
            reduceTransparencyEnabled = _yield$Promise$all2[5];
          this.config = {
            isScreenReaderEnabled: screenReaderEnabled,
            isBoldTextEnabled: boldTextEnabled,
            isGrayscaleEnabled: grayscaleEnabled,
            isInvertColorsEnabled: invertColorsEnabled,
            isReduceMotionEnabled: reduceMotionEnabled,
            isReduceTransparencyEnabled: reduceTransparencyEnabled,
            preferredContentSizeCategory: "normal"
          };
          this.setupAccessibilityListeners();
        } catch (error) {
          _logger.logger.warn("Failed to initialize accessibility", {
            error: error instanceof Error ? error : new Error(String(error))
          });
        }
      });
      function initializeAccessibility() {
        return _initializeAccessibility.apply(this, arguments);
      }
      return initializeAccessibility;
    }())
  }, {
    key: "setupAccessibilityListeners",
    value: function setupAccessibilityListeners() {
      var _this = this;
      _reactNative.AccessibilityInfo.addEventListener("screenReaderChanged", function (enabled) {
        _this.config.isScreenReaderEnabled = enabled;
        _this.notifyListeners();
      });
      _reactNative.AccessibilityInfo.addEventListener("boldTextChanged", function (enabled) {
        _this.config.isBoldTextEnabled = enabled;
        _this.notifyListeners();
      });
      _reactNative.AccessibilityInfo.addEventListener("grayscaleChanged", function (enabled) {
        _this.config.isGrayscaleEnabled = enabled;
        _this.notifyListeners();
      });
      _reactNative.AccessibilityInfo.addEventListener("invertColorsChanged", function (enabled) {
        _this.config.isInvertColorsEnabled = enabled;
        _this.notifyListeners();
      });
      _reactNative.AccessibilityInfo.addEventListener("reduceMotionChanged", function (enabled) {
        _this.config.isReduceMotionEnabled = enabled;
        _this.notifyListeners();
      });
      _reactNative.AccessibilityInfo.addEventListener("reduceTransparencyChanged", function (enabled) {
        _this.config.isReduceTransparencyEnabled = enabled;
        _this.notifyListeners();
      });
    }
  }, {
    key: "getAccessibilityConfig",
    value: function getAccessibilityConfig() {
      return _objectSpread({}, this.config);
    }
  }, {
    key: "isScreenReaderEnabled",
    value: function isScreenReaderEnabled() {
      return this.config.isScreenReaderEnabled;
    }
  }, {
    key: "isBoldTextEnabled",
    value: function isBoldTextEnabled() {
      return this.config.isBoldTextEnabled;
    }
  }, {
    key: "isReduceMotionEnabled",
    value: function isReduceMotionEnabled() {
      return this.config.isReduceMotionEnabled;
    }
  }, {
    key: "isHighContrastEnabled",
    value: function isHighContrastEnabled() {
      return this.config.isGrayscaleEnabled || this.config.isInvertColorsEnabled;
    }
  }, {
    key: "getMinimumTouchTargetSize",
    value: function getMinimumTouchTargetSize() {
      return {
        width: 44,
        height: 44
      };
    }
  }, {
    key: "announceForAccessibility",
    value: function announceForAccessibility(message) {
      try {
        _reactNative.AccessibilityInfo.announceForAccessibility(message);
      } catch (error) {
        _logger.logger.warn("Failed to announce for accessibility", {
          error: error instanceof Error ? error : new Error(String(error))
        });
      }
    }
  }, {
    key: "setAccessibilityFocus",
    value: function setAccessibilityFocus(ref) {
      try {
        if (_reactNative.Platform.OS === "ios") {
          if (typeof ref === 'object' && ref !== null) {
            var accessibilityModule = _reactNative.AccessibilityInfo;
            if (accessibilityModule.setAccessibilityFocus) {
              accessibilityModule.setAccessibilityFocus(ref);
            }
          }
        } else {}
      } catch (error) {
        _logger.logger.warn("Failed to set accessibility focus", {
          error: error instanceof Error ? error : new Error(String(error))
        });
      }
    }
  }, {
    key: "getTextSizeMultiplier",
    value: function getTextSizeMultiplier() {
      var _multipliers$this$con;
      var multipliers = {
        extraSmall: 0.8,
        small: 0.9,
        normal: 1.0,
        large: 1.1,
        extraLarge: 1.2,
        extraExtraLarge: 1.3,
        extraExtraExtraLarge: 1.4,
        accessibilityMedium: 1.5,
        accessibilityLarge: 1.6,
        accessibilityExtraLarge: 1.7,
        accessibilityExtraExtraLarge: 1.8,
        accessibilityExtraExtraExtraLarge: 2.0
      };
      return (_multipliers$this$con = multipliers[this.config.preferredContentSizeCategory]) != null ? _multipliers$this$con : 1.0;
    }
  }, {
    key: "meetsContrastRequirement",
    value: function meetsContrastRequirement(_foregroundColor, _backgroundColor) {
      return true;
    }
  }, {
    key: "getAccessibleColorScheme",
    value: function getAccessibleColorScheme() {
      if (this.isHighContrastEnabled()) {
        return {
          primary: "#FFFFFF",
          secondary: "#CCCCCC",
          background: "#000000",
          surface: "#111111",
          text: "#FFFFFF",
          textSecondary: "#CCCCCC",
          error: "#FF4444",
          success: "#44FF44",
          warning: "#FFFF44"
        };
      }
      return {
        primary: "#2563EB",
        secondary: "#64748B",
        background: "#FFFFFF",
        surface: "#F8FAFC",
        text: "#1E293B",
        textSecondary: "#64748B",
        error: "#DC2626",
        success: "#16A34A",
        warning: "#D97706"
      };
    }
  }, {
    key: "addChangeListener",
    value: function addChangeListener(listener) {
      var _this2 = this;
      this.listeners.push(listener);
      return function () {
        var index = _this2.listeners.indexOf(listener);
        if (index > -1) {
          _this2.listeners.splice(index, 1);
        }
      };
    }
  }, {
    key: "notifyListeners",
    value: function notifyListeners() {
      var config = this.getAccessibilityConfig();
      this.listeners.forEach(function (listener) {
        try {
          listener(config);
        } catch (error) {
          _logger.logger.warn("Error notifying accessibility listener", {
            error: error instanceof Error ? error : new Error(String(error))
          });
        }
      });
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (AccessibilityService.instance === undefined) {
        AccessibilityService.instance = new AccessibilityService();
      }
      return AccessibilityService.instance;
    }
  }]);
}();
var accessibilityService = exports.accessibilityService = AccessibilityService.getInstance();
var _default = exports.default = accessibilityService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,