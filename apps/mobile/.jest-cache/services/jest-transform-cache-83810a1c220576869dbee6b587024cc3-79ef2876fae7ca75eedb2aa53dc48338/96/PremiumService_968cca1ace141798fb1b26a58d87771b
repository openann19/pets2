636020ae7079fbd9d17aeeb3fe642f00
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.premiumService = exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _core = require("@pawfectmatch/core");
var _api = require("./api");
var _process$env$EXPO_PUB, _process$env$EXPO_PUB2, _process$env$EXPO_PUB3;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var PremiumService = function () {
  function PremiumService() {
    (0, _classCallCheck2.default)(this, PremiumService);
  }
  return (0, _createClass2.default)(PremiumService, [{
    key: "hasActiveSubscription",
    value: (function () {
      var _hasActiveSubscription = (0, _asyncToGenerator2.default)(function* () {
        try {
          var status = yield this.getSubscriptionStatus();
          return status.isActive;
        } catch (error) {
          _core.logger.error("Failed to check premium status", {
            error: error
          });
          return false;
        }
      });
      function hasActiveSubscription() {
        return _hasActiveSubscription.apply(this, arguments);
      }
      return hasActiveSubscription;
    }())
  }, {
    key: "getSubscriptionStatus",
    value: (function () {
      var _getSubscriptionStatus = (0, _asyncToGenerator2.default)(function* () {
        try {
          var cached = yield this.getCachedStatus();
          if (cached !== null && this.isCacheValid(cached.timestamp)) {
            return cached.status;
          }
          var response = yield _api.api.request("/premium/status");
          var status = _objectSpread(_objectSpread(_objectSpread({
            isActive: response.isActive,
            plan: response.plan,
            features: response.features,
            autoRenew: response.autoRenew
          }, response.expiresAt !== undefined ? {
            expiresAt: response.expiresAt
          } : {}), response.stripeCustomerId !== undefined ? {
            stripeCustomerId: response.stripeCustomerId
          } : {}), response.currentPeriodEnd !== undefined ? {
            currentPeriodEnd: response.currentPeriodEnd
          } : {});
          yield this.setCachedStatus(status);
          _core.logger.info("Fetched subscription status", {
            isActive: status.isActive,
            plan: status.plan,
            featuresCount: status.features.length
          });
          return status;
        } catch (error) {
          _core.logger.error("Failed to get subscription status", {
            error: error
          });
          return {
            isActive: false,
            plan: "free",
            features: [],
            autoRenew: false
          };
        }
      });
      function getSubscriptionStatus() {
        return _getSubscriptionStatus.apply(this, arguments);
      }
      return getSubscriptionStatus;
    }())
  }, {
    key: "getAvailablePlans",
    value: function getAvailablePlans() {
      return PremiumService.PLANS;
    }
  }, {
    key: "createCheckoutSession",
    value: (function () {
      var _createCheckoutSession = (0, _asyncToGenerator2.default)(function* (planId, successUrl, cancelUrl) {
        try {
          var plan = PremiumService.PLANS.find(function (p) {
            return p.id === planId;
          });
          if (plan === undefined) {
            throw new Error(`Invalid plan ID: ${planId}`);
          }
          var response = yield _api.api.request("/premium/create-checkout-session", {
            method: "POST",
            body: JSON.stringify({
              priceId: plan.stripePriceId,
              successUrl: successUrl !== undefined ? successUrl : "pawfectmatch://premium/success",
              cancelUrl: cancelUrl !== undefined ? cancelUrl : "pawfectmatch://premium/cancel"
            })
          });
          _core.logger.info("Created checkout session", {
            planId: planId,
            sessionId: response.sessionId
          });
          return response;
        } catch (error) {
          _core.logger.error("Failed to create checkout session", {
            error: error,
            planId: planId
          });
          throw error;
        }
      });
      function createCheckoutSession(_x, _x2, _x3) {
        return _createCheckoutSession.apply(this, arguments);
      }
      return createCheckoutSession;
    }())
  }, {
    key: "cancelSubscription",
    value: (function () {
      var _cancelSubscription = (0, _asyncToGenerator2.default)(function* () {
        try {
          var response = yield _api.api.request("/premium/cancel", {
            method: "POST"
          });
          yield this.clearCache();
          _core.logger.info("Subscription cancelled", response);
          return response;
        } catch (error) {
          _core.logger.error("Failed to cancel subscription", {
            error: error
          });
          throw error;
        }
      });
      function cancelSubscription() {
        return _cancelSubscription.apply(this, arguments);
      }
      return cancelSubscription;
    }())
  }, {
    key: "getPremiumLimits",
    value: (function () {
      var _getPremiumLimits = (0, _asyncToGenerator2.default)(function* () {
        try {
          var status = yield this.getSubscriptionStatus();
          var limits = {
            swipesPerDay: 50,
            likesPerDay: 100,
            superLikesPerDay: 3,
            canUndoSwipes: false,
            canSeeWhoLiked: false,
            canBoostProfile: false,
            advancedFilters: false,
            priorityMatching: false,
            unlimitedRewind: false
          };
          if (status.isActive) {
            switch (status.plan.toLowerCase()) {
              case "basic":
                limits.superLikesPerDay = 5;
                limits.canSeeWhoLiked = true;
                limits.advancedFilters = true;
                break;
              case "premium":
                limits.superLikesPerDay = -1;
                limits.canUndoSwipes = true;
                limits.canSeeWhoLiked = true;
                limits.canBoostProfile = true;
                limits.advancedFilters = true;
                limits.priorityMatching = true;
                break;
              case "ultimate":
                limits.superLikesPerDay = -1;
                limits.canUndoSwipes = true;
                limits.canSeeWhoLiked = true;
                limits.canBoostProfile = true;
                limits.advancedFilters = true;
                limits.priorityMatching = true;
                limits.unlimitedRewind = true;
                break;
            }
          }
          return limits;
        } catch (error) {
          _core.logger.error("Failed to get premium limits", {
            error: error
          });
          return {
            swipesPerDay: 50,
            likesPerDay: 100,
            superLikesPerDay: 3,
            canUndoSwipes: false,
            canSeeWhoLiked: false,
            canBoostProfile: false,
            advancedFilters: false,
            priorityMatching: false,
            unlimitedRewind: false
          };
        }
      });
      function getPremiumLimits() {
        return _getPremiumLimits.apply(this, arguments);
      }
      return getPremiumLimits;
    }())
  }, {
    key: "canUseFeature",
    value: (function () {
      var _canUseFeature = (0, _asyncToGenerator2.default)(function* (feature) {
        try {
          var limits = yield this.getPremiumLimits();
          return limits[feature];
        } catch (error) {
          _core.logger.error("Failed to check feature access", {
            error: error,
            feature: feature
          });
          return false;
        }
      });
      function canUseFeature(_x4) {
        return _canUseFeature.apply(this, arguments);
      }
      return canUseFeature;
    }())
  }, {
    key: "trackUsage",
    value: (function () {
      var _trackUsage = (0, _asyncToGenerator2.default)(function* (feature) {
        try {
          yield _api.api.request("/premium/track-usage", {
            method: "POST",
            body: JSON.stringify({
              feature: feature,
              timestamp: Date.now()
            })
          });
          _core.logger.info("Premium feature usage tracked", {
            feature: feature
          });
        } catch (error) {
          _core.logger.error("Failed to track premium usage", {
            error: error,
            feature: feature
          });
        }
      });
      function trackUsage(_x5) {
        return _trackUsage.apply(this, arguments);
      }
      return trackUsage;
    }())
  }, {
    key: "getCachedStatus",
    value: function getCachedStatus() {
      return Promise.resolve(null);
    }
  }, {
    key: "setCachedStatus",
    value: function () {
      var _setCachedStatus = (0, _asyncToGenerator2.default)(function* (_status) {});
      function setCachedStatus(_x6) {
        return _setCachedStatus.apply(this, arguments);
      }
      return setCachedStatus;
    }()
  }, {
    key: "isCacheValid",
    value: function isCacheValid(timestamp) {
      return Date.now() - timestamp < PremiumService.CACHE_DURATION;
    }
  }, {
    key: "clearCache",
    value: function () {
      var _clearCache = (0, _asyncToGenerator2.default)(function* () {});
      function clearCache() {
        return _clearCache.apply(this, arguments);
      }
      return clearCache;
    }()
  }]);
}();
PremiumService.CACHE_DURATION = 5 * 60 * 1000;
PremiumService.PLANS = [{
  id: "basic",
  name: "Basic",
  price: 4.99,
  interval: "month",
  features: ["5 Super Likes/day", "See who liked you", "Advanced filters"],
  stripePriceId: (_process$env$EXPO_PUB = process.env["EXPO_PUBLIC_STRIPE_BASIC_PRICE_ID"]) != null ? _process$env$EXPO_PUB : "price_1P1234567890abcdefghijklmn"
}, {
  id: "premium",
  name: "Premium",
  price: 9.99,
  interval: "month",
  features: ["Unlimited Super Likes", "Priority matching", "Profile boost", "Undo swipes"],
  stripePriceId: (_process$env$EXPO_PUB2 = process.env["EXPO_PUBLIC_STRIPE_PREMIUM_PRICE_ID"]) != null ? _process$env$EXPO_PUB2 : "price_1P2345678901bcdefghijklmnop",
  popular: true
}, {
  id: "ultimate",
  name: "Ultimate",
  price: 19.99,
  interval: "month",
  features: ["Everything in Premium", "Video calls", "Advanced analytics", "VIP support"],
  stripePriceId: (_process$env$EXPO_PUB3 = process.env["EXPO_PUBLIC_STRIPE_ULTIMATE_PRICE_ID"]) != null ? _process$env$EXPO_PUB3 : "price_1P3456789012cdefghijklmnopqr"
}];
var premiumService = exports.premiumService = new PremiumService();
var _default = exports.default = premiumService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,