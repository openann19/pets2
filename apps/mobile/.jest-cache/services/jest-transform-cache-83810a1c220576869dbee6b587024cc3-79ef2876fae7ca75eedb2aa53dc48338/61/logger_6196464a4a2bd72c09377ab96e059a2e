a7195473eeacf3c0801dbdfb4d5f317d
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mediaLogger = exports.notificationLogger = exports.analyticsLogger = exports.storageLogger = exports.navigationLogger = exports.uiLogger = exports.authLogger = exports.apiLogger = exports.logger = exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
  LogLevel[LogLevel["INFO"] = 1] = "INFO";
  LogLevel[LogLevel["WARN"] = 2] = "WARN";
  LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
  LogLevel[LogLevel["NONE"] = 100] = "NONE";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
var DEFAULT_CONFIG = {
  minLevel: LogLevel.INFO,
  useTimestamps: true,
  serverReporting: false,
  context: 'App'
};
if (process.env['NODE_ENV'] === 'development') {
  DEFAULT_CONFIG.minLevel = LogLevel.DEBUG;
}
var formatMessage = function formatMessage(level, message, context, useTimestamp) {
  var timestamp = useTimestamp ? `[${new Date().toISOString()}]` : '';
  return `${timestamp}[${level}][${context}] ${message}`;
};
var getContext = function getContext(context) {
  return context != null && context.length > 0 ? context : 'App';
};
var reportErrorToServer = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (error, context, endpoint) {
    if (endpoint == null || endpoint === '') return;
    try {
      var errorObj = error instanceof Error ? {
        message: error.message,
        stack: error.stack
      } : {
        message: error
      };
      yield fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          error: errorObj,
          context: context,
          timestamp: new Date().toISOString()
        })
      });
    } catch (_unused) {}
  });
  return function reportErrorToServer(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var LoggerService = function () {
  function LoggerService() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, LoggerService);
    this.config = _objectSpread(_objectSpread({}, DEFAULT_CONFIG), config);
  }
  return (0, _createClass2.default)(LoggerService, [{
    key: "debug",
    value: function debug(message) {
      if (this.config.minLevel <= LogLevel.DEBUG) {
        var _console;
        var formattedMsg = formatMessage('DEBUG', message, getContext(this.config.context), this.config.useTimestamps);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        (_console = console).warn.apply(_console, [formattedMsg].concat(args));
      }
    }
  }, {
    key: "info",
    value: function info(message) {
      if (this.config.minLevel <= LogLevel.INFO) {
        var _console2;
        var formattedMsg = formatMessage('INFO', message, getContext(this.config.context), this.config.useTimestamps);
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        (_console2 = console).warn.apply(_console2, [formattedMsg].concat(args));
      }
    }
  }, {
    key: "warn",
    value: function warn(message) {
      if (this.config.minLevel <= LogLevel.WARN) {
        var _console3;
        var formattedMsg = formatMessage('WARN', message, getContext(this.config.context), this.config.useTimestamps);
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        (_console3 = console).warn.apply(_console3, [formattedMsg].concat(args));
      }
    }
  }, {
    key: "error",
    value: function error(message) {
      if (this.config.minLevel <= LogLevel.ERROR) {
        var _console4;
        var errorMsg = message instanceof Error ? message.message : message;
        var formattedMsg = formatMessage('ERROR', errorMsg, getContext(this.config.context), this.config.useTimestamps);
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        (_console4 = console).error.apply(_console4, [formattedMsg].concat((0, _toConsumableArray2.default)(message instanceof Error ? [message].concat(args) : args)));
        if (this.config.serverReporting) {
          var endpoint = this.config.serverEndpoint;
          void reportErrorToServer(message, getContext(this.config.context), endpoint);
        }
      }
    }
  }, {
    key: "setContext",
    value: function setContext(context) {
      this.config.context = context;
      return this;
    }
  }, {
    key: "withContext",
    value: function withContext(context) {
      return this.createChildLogger(context);
    }
  }, {
    key: "setConfig",
    value: function setConfig(config) {
      this.config = _objectSpread(_objectSpread({}, this.config), config);
    }
  }, {
    key: "createChildLogger",
    value: function createChildLogger(childContext) {
      var parentContext = getContext(this.config.context);
      return new LoggerService(_objectSpread(_objectSpread({}, this.config), {}, {
        context: `${parentContext}:${childContext}`
      }));
    }
  }]);
}();
exports.logger = new LoggerService();
exports.apiLogger = exports.logger.createChildLogger('API');
exports.authLogger = exports.logger.createChildLogger('Auth');
exports.uiLogger = exports.logger.createChildLogger('UI');
exports.navigationLogger = exports.logger.createChildLogger('Navigation');
exports.storageLogger = exports.logger.createChildLogger('Storage');
exports.analyticsLogger = exports.logger.createChildLogger('Analytics');
exports.notificationLogger = exports.logger.createChildLogger('Notifications');
exports.mediaLogger = exports.logger.createChildLogger('Media');
exports.default = exports.logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJfZGVmaW5lUHJvcGVydHkyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jcmVhdGVDbGFzczIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1lZGlhTG9nZ2VyIiwibm90aWZpY2F0aW9uTG9nZ2VyIiwiYW5hbHl0aWNzTG9nZ2VyIiwic3RvcmFnZUxvZ2dlciIsIm5hdmlnYXRpb25Mb2dnZXIiLCJ1aUxvZ2dlciIsImF1dGhMb2dnZXIiLCJhcGlMb2dnZXIiLCJsb2dnZXIiLCJMb2dMZXZlbCIsIkRFRkFVTFRfQ09ORklHIiwibWluTGV2ZWwiLCJJTkZPIiwidXNlVGltZXN0YW1wcyIsInNlcnZlclJlcG9ydGluZyIsImNvbnRleHQiLCJwcm9jZXNzIiwiZW52IiwiREVCVUciLCJmb3JtYXRNZXNzYWdlIiwibGV2ZWwiLCJtZXNzYWdlIiwidXNlVGltZXN0YW1wIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZ2V0Q29udGV4dCIsInJlcG9ydEVycm9yVG9TZXJ2ZXIiLCJfcmVmIiwiZXJyb3IiLCJlbmRwb2ludCIsImVycm9yT2JqIiwiRXJyb3IiLCJzdGFjayIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiX3VudXNlZCIsIl94IiwiX3gyIiwiX3gzIiwiTG9nZ2VyU2VydmljZSIsImNvbmZpZyIsInVuZGVmaW5lZCIsImtleSIsImRlYnVnIiwiX2NvbnNvbGUiLCJmb3JtYXR0ZWRNc2ciLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNvbnNvbGUiLCJ3YXJuIiwiY29uY2F0IiwiaW5mbyIsIl9jb25zb2xlMiIsIl9sZW4yIiwiX2tleTIiLCJXQVJOIiwiX2NvbnNvbGUzIiwiX2xlbjMiLCJfa2V5MyIsIkVSUk9SIiwiX2NvbnNvbGU0IiwiZXJyb3JNc2ciLCJfbGVuNCIsIl9rZXk0Iiwic2VydmVyRW5kcG9pbnQiLCJzZXRDb250ZXh0Iiwid2l0aENvbnRleHQiLCJjcmVhdGVDaGlsZExvZ2dlciIsInNldENvbmZpZyIsImNoaWxkQ29udGV4dCIsInBhcmVudENvbnRleHQiXSwic291cmNlcyI6WyJsb2dnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIPCfk50gRW5oYW5jZWQgTG9nZ2VyIFNlcnZpY2VcbiAqIEEgY29tcHJlaGVuc2l2ZSBsb2dnaW5nIHV0aWxpdHkgZm9yIHRoZSBlbnRpcmUgYXBwbGljYXRpb25cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZWRpYUxvZ2dlciA9IGV4cG9ydHMubm90aWZpY2F0aW9uTG9nZ2VyID0gZXhwb3J0cy5hbmFseXRpY3NMb2dnZXIgPSBleHBvcnRzLnN0b3JhZ2VMb2dnZXIgPSBleHBvcnRzLm5hdmlnYXRpb25Mb2dnZXIgPSBleHBvcnRzLnVpTG9nZ2VyID0gZXhwb3J0cy5hdXRoTG9nZ2VyID0gZXhwb3J0cy5hcGlMb2dnZXIgPSBleHBvcnRzLmxvZ2dlciA9IGV4cG9ydHMuTG9nTGV2ZWwgPSB2b2lkIDA7XG4vLyBEZWZpbmUgc2V2ZXJpdHkgbGV2ZWxzIGZvciBsb2dnaW5nXG52YXIgTG9nTGV2ZWw7XG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJERUJVR1wiXSA9IDBdID0gXCJERUJVR1wiO1xuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiSU5GT1wiXSA9IDFdID0gXCJJTkZPXCI7XG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJXQVJOXCJdID0gMl0gPSBcIldBUk5cIjtcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkVSUk9SXCJdID0gM10gPSBcIkVSUk9SXCI7XG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJOT05FXCJdID0gMTAwXSA9IFwiTk9ORVwiOyAvLyBVc2VkIHRvIGRpc2FibGUgbG9nZ2luZ1xufSkoTG9nTGV2ZWwgfHwgKGV4cG9ydHMuTG9nTGV2ZWwgPSBMb2dMZXZlbCA9IHt9KSk7XG4vLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb25cbmNvbnN0IERFRkFVTFRfQ09ORklHID0ge1xuICAgIG1pbkxldmVsOiBMb2dMZXZlbC5JTkZPLFxuICAgIHVzZVRpbWVzdGFtcHM6IHRydWUsXG4gICAgc2VydmVyUmVwb3J0aW5nOiBmYWxzZSxcbiAgICBjb250ZXh0OiAnQXBwJ1xufTtcbi8vIEluIGRldmVsb3BtZW50IG1vZGUsIGFsbG93IGEgbG93ZXIgbWluaW11bSBsb2cgbGV2ZWxcbmlmIChwcm9jZXNzLmVudlsnTk9ERV9FTlYnXSA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgIERFRkFVTFRfQ09ORklHLm1pbkxldmVsID0gTG9nTGV2ZWwuREVCVUc7XG59XG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZm9ybWF0IGEgbG9nIG1lc3NhZ2VcbmNvbnN0IGZvcm1hdE1lc3NhZ2UgPSAobGV2ZWwsIG1lc3NhZ2UsIGNvbnRleHQsIHVzZVRpbWVzdGFtcCkgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IHVzZVRpbWVzdGFtcCA/IGBbJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9XWAgOiAnJztcbiAgICByZXR1cm4gYCR7dGltZXN0YW1wfVske2xldmVsfV1bJHtjb250ZXh0fV0gJHttZXNzYWdlfWA7XG59O1xuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBjb250ZXh0IHdpdGggZmFsbGJhY2tcbmNvbnN0IGdldENvbnRleHQgPSAoY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBjb250ZXh0ICE9IG51bGwgJiYgY29udGV4dC5sZW5ndGggPiAwID8gY29udGV4dCA6ICdBcHAnO1xufTtcbi8vIEVycm9yIHJlcG9ydGluZyBzZXJ2aWNlIChjYW4gYmUgZXh0ZW5kZWQgdG8gc2VuZCB0byBTZW50cnksIGV0Yy4pXG5jb25zdCByZXBvcnRFcnJvclRvU2VydmVyID0gYXN5bmMgKGVycm9yLCBjb250ZXh0LCBlbmRwb2ludCkgPT4ge1xuICAgIGlmIChlbmRwb2ludCA9PSBudWxsIHx8IGVuZHBvaW50ID09PSAnJylcbiAgICAgICAgcmV0dXJuO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGVycm9yT2JqID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvclxuICAgICAgICAgICAgPyB7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsIHN0YWNrOiBlcnJvci5zdGFjayB9XG4gICAgICAgICAgICA6IHsgbWVzc2FnZTogZXJyb3IgfTtcbiAgICAgICAgYXdhaXQgZmV0Y2goZW5kcG9pbnQsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yT2JqLFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIC8vIFNpbGVudCBmYWlsIGZvciBlcnJvciByZXBvcnRpbmcgdG8gYXZvaWQgaW5maW5pdGUgbG9vcHNcbiAgICB9XG59O1xuLy8gQ3JlYXRlIGxvZ2dlciBjbGFzc1xuY2xhc3MgTG9nZ2VyU2VydmljZSB7XG4gICAgY29uZmlnO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICAgICAgLi4uREVGQVVMVF9DT05GSUcsXG4gICAgICAgICAgICAuLi5jb25maWdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZGVidWcobWVzc2FnZSwgLi4uYXJncykge1xuICAgICAgICBpZiAodGhpcy5jb25maWcubWluTGV2ZWwgPD0gTG9nTGV2ZWwuREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZE1zZyA9IGZvcm1hdE1lc3NhZ2UoJ0RFQlVHJywgbWVzc2FnZSwgZ2V0Q29udGV4dCh0aGlzLmNvbmZpZy5jb250ZXh0KSwgdGhpcy5jb25maWcudXNlVGltZXN0YW1wcyk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZm9ybWF0dGVkTXNnLCAuLi5hcmdzKTsgLy8gVXNlIGNvbnNvbGUud2FybiBmb3IgZGVidWcgbGV2ZWxcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbmZvKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLm1pbkxldmVsIDw9IExvZ0xldmVsLklORk8pIHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZE1zZyA9IGZvcm1hdE1lc3NhZ2UoJ0lORk8nLCBtZXNzYWdlLCBnZXRDb250ZXh0KHRoaXMuY29uZmlnLmNvbnRleHQpLCB0aGlzLmNvbmZpZy51c2VUaW1lc3RhbXBzKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihmb3JtYXR0ZWRNc2csIC4uLmFyZ3MpOyAvLyBVc2UgY29uc29sZS53YXJuIGZvciBpbmZvIGxldmVsXG4gICAgICAgIH1cbiAgICB9XG4gICAgd2FybihtZXNzYWdlLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5taW5MZXZlbCA8PSBMb2dMZXZlbC5XQVJOKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRNc2cgPSBmb3JtYXRNZXNzYWdlKCdXQVJOJywgbWVzc2FnZSwgZ2V0Q29udGV4dCh0aGlzLmNvbmZpZy5jb250ZXh0KSwgdGhpcy5jb25maWcudXNlVGltZXN0YW1wcyk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZm9ybWF0dGVkTXNnLCAuLi5hcmdzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlcnJvcihtZXNzYWdlLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5taW5MZXZlbCA8PSBMb2dMZXZlbC5FUlJPUikge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNc2cgPSBtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IgPyBtZXNzYWdlLm1lc3NhZ2UgOiBtZXNzYWdlO1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkTXNnID0gZm9ybWF0TWVzc2FnZSgnRVJST1InLCBlcnJvck1zZywgZ2V0Q29udGV4dCh0aGlzLmNvbmZpZy5jb250ZXh0KSwgdGhpcy5jb25maWcudXNlVGltZXN0YW1wcyk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdHRlZE1zZywgLi4uKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvciA/IFttZXNzYWdlLCAuLi5hcmdzXSA6IGFyZ3MpKTtcbiAgICAgICAgICAgIC8vIFJlcG9ydCBlcnJvciB0byBzZXJ2ZXIgaWYgZW5hYmxlZFxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLnNlcnZlclJlcG9ydGluZykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50ID0gdGhpcy5jb25maWcuc2VydmVyRW5kcG9pbnQ7XG4gICAgICAgICAgICAgICAgdm9pZCByZXBvcnRFcnJvclRvU2VydmVyKG1lc3NhZ2UsIGdldENvbnRleHQodGhpcy5jb25maWcuY29udGV4dCksIGVuZHBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRDb250ZXh0KGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb25maWcuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB3aXRoQ29udGV4dChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNoaWxkTG9nZ2VyKGNvbnRleHQpO1xuICAgIH1cbiAgICBzZXRDb25maWcoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICAgICAgICAuLi5jb25maWdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY3JlYXRlQ2hpbGRMb2dnZXIoY2hpbGRDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudENvbnRleHQgPSBnZXRDb250ZXh0KHRoaXMuY29uZmlnLmNvbnRleHQpO1xuICAgICAgICByZXR1cm4gbmV3IExvZ2dlclNlcnZpY2Uoe1xuICAgICAgICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICAgICAgICBjb250ZXh0OiBgJHtwYXJlbnRDb250ZXh0fToke2NoaWxkQ29udGV4dH1gXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIENyZWF0ZSByb290IGxvZ2dlciBpbnN0YW5jZVxuZXhwb3J0cy5sb2dnZXIgPSBuZXcgTG9nZ2VyU2VydmljZSgpO1xuLy8gQ3JlYXRlIHByZS1jb25maWd1cmVkIGxvZ2dlcnMgZm9yIGNvbW1vbiBtb2R1bGVzXG5leHBvcnRzLmFwaUxvZ2dlciA9IGV4cG9ydHMubG9nZ2VyLmNyZWF0ZUNoaWxkTG9nZ2VyKCdBUEknKTtcbmV4cG9ydHMuYXV0aExvZ2dlciA9IGV4cG9ydHMubG9nZ2VyLmNyZWF0ZUNoaWxkTG9nZ2VyKCdBdXRoJyk7XG5leHBvcnRzLnVpTG9nZ2VyID0gZXhwb3J0cy5sb2dnZXIuY3JlYXRlQ2hpbGRMb2dnZXIoJ1VJJyk7XG5leHBvcnRzLm5hdmlnYXRpb25Mb2dnZXIgPSBleHBvcnRzLmxvZ2dlci5jcmVhdGVDaGlsZExvZ2dlcignTmF2aWdhdGlvbicpO1xuZXhwb3J0cy5zdG9yYWdlTG9nZ2VyID0gZXhwb3J0cy5sb2dnZXIuY3JlYXRlQ2hpbGRMb2dnZXIoJ1N0b3JhZ2UnKTtcbmV4cG9ydHMuYW5hbHl0aWNzTG9nZ2VyID0gZXhwb3J0cy5sb2dnZXIuY3JlYXRlQ2hpbGRMb2dnZXIoJ0FuYWx5dGljcycpO1xuZXhwb3J0cy5ub3RpZmljYXRpb25Mb2dnZXIgPSBleHBvcnRzLmxvZ2dlci5jcmVhdGVDaGlsZExvZ2dlcignTm90aWZpY2F0aW9ucycpO1xuZXhwb3J0cy5tZWRpYUxvZ2dlciA9IGV4cG9ydHMubG9nZ2VyLmNyZWF0ZUNoaWxkTG9nZ2VyKCdNZWRpYScpO1xuLy8gRXhwb3J0IGRlZmF1bHQgbG9nZ2VyXG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmxvZ2dlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTtBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxtQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsZ0JBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFHLGdCQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSSxhQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSyxrQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQU0sUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFB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