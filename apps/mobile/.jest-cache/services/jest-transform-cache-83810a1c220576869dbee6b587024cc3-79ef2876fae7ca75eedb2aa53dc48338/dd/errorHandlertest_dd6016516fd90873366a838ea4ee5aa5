32ba9737fc25de12a3e29cdf37aa26f4
"use strict";

_getJestObj().mock('react-native', function () {
  return {
    Alert: {
      alert: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../logger", function () {
  return {
    logger: {
      error: _globals.jest.fn(),
      info: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _globals = require("@jest/globals");
var _reactNative = require("react-native");
var _errorHandler = require("../errorHandler");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAlert = _reactNative.Alert.alert;
var mockLogger = require("../logger").logger;
(0, _globals.describe)('ErrorHandler', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('General Error Handling', function () {
    (0, _globals.it)('should handle errors with default options', function () {
      var error = new Error('Test error');
      var context = {
        component: 'TestComponent',
        action: 'testAction',
        userId: 'user123',
        metadata: {
          extra: 'data'
        }
      };
      _errorHandler.errorHandler.handleError(error, context);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'Test error',
        stack: error.stack,
        context: context,
        timestamp: _globals.expect.any(String)
      });
      (0, _globals.expect)(mockAlert).toHaveBeenCalledWith('Error', 'An unexpected error occurred. Please try again.');
    });
    (0, _globals.it)('should skip notification when disabled', function () {
      var error = new Error('Silent error');
      var context = {
        component: 'TestComponent',
        action: 'testAction'
      };
      _errorHandler.errorHandler.handleError(error, context, {
        showNotification: false
      });
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalled();
      (0, _globals.expect)(mockAlert).not.toHaveBeenCalled();
    });
    (0, _globals.it)('should skip logging when disabled', function () {
      var error = new Error('Unlogged error');
      var context = {
        component: 'TestComponent',
        action: 'testAction'
      };
      _errorHandler.errorHandler.handleError(error, context, {
        logToService: false
      });
      (0, _globals.expect)(mockLogger.error).not.toHaveBeenCalled();
      (0, _globals.expect)(mockAlert).toHaveBeenCalled();
    });
    (0, _globals.it)('should use custom fallback message', function () {
      var error = new Error('Custom error');
      var context = {
        component: 'TestComponent',
        action: 'testAction'
      };
      _errorHandler.errorHandler.handleError(error, context, {
        fallbackMessage: 'Custom fallback message'
      });
      (0, _globals.expect)(mockAlert).toHaveBeenCalledWith('Error', 'Custom fallback message');
    });
  });
  (0, _globals.describe)('API Error Handling', function () {
    (0, _globals.it)('should handle API errors with enhanced context', function () {
      var error = new Error('API Error');
      var context = {
        component: 'APIService',
        action: 'fetchData',
        userId: 'user123'
      };
      var apiContext = {
        endpoint: '/api/test',
        method: 'GET',
        statusCode: 500
      };
      _errorHandler.errorHandler.handleApiError(error, context, apiContext);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'API Error',
        stack: error.stack,
        context: _objectSpread(_objectSpread({}, context), apiContext),
        timestamp: _globals.expect.any(String)
      });
    });
    (0, _globals.it)('should handle API errors without optional fields', function () {
      var error = new Error('Partial API Error');
      var context = {
        component: 'APIService',
        action: 'fetchData'
      };
      var apiContext = {};
      _errorHandler.errorHandler.handleApiError(error, context, apiContext);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'Partial API Error',
        stack: error.stack,
        context: _objectSpread(_objectSpread({}, context), apiContext),
        timestamp: _globals.expect.any(String)
      });
    });
  });
  (0, _globals.describe)('Specialized Error Handlers', function () {
    var testContext = {
      component: 'TestComponent',
      action: 'testAction',
      userId: 'user123'
    };
    (0, _globals.it)('should handle network errors with specific message', function () {
      var error = new Error('Network timeout');
      _errorHandler.errorHandler.handleNetworkError(error, testContext);
      (0, _globals.expect)(mockAlert).toHaveBeenCalledWith('Error', 'Network error. Please check your connection and try again.');
    });
    (0, _globals.it)('should handle validation errors with specific message', function () {
      var error = new Error('Invalid input');
      _errorHandler.errorHandler.handleValidationError(error, testContext);
      (0, _globals.expect)(mockAlert).toHaveBeenCalledWith('Error', 'Please check your input and try again.');
    });
    (0, _globals.it)('should handle authentication errors with specific message', function () {
      var error = new Error('Session expired');
      _errorHandler.errorHandler.handleAuthError(error, testContext);
      (0, _globals.expect)(mockAlert).toHaveBeenCalledWith('Error', 'Authentication failed. Please log in again.');
    });
    (0, _globals.it)('should handle permission errors with specific message', function () {
      var error = new Error('Access denied');
      _errorHandler.errorHandler.handlePermissionError(error, testContext);
      (0, _globals.expect)(mockAlert).toHaveBeenCalledWith('Error', "You don't have permission to perform this action.");
    });
    (0, _globals.it)('should respect custom options in specialized handlers', function () {
      var error = new Error('Network error');
      _errorHandler.errorHandler.handleNetworkError(error, testContext, {
        showNotification: false,
        logToService: false
      });
      (0, _globals.expect)(mockLogger.error).not.toHaveBeenCalled();
      (0, _globals.expect)(mockAlert).not.toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('User-Friendly Message Translation', function () {
    (0, _globals.it)('should translate network errors', function () {
      var networkErrors = [new Error('Network request failed'), new Error('Fetch failed'), new Error('Connection timeout')];
      networkErrors.forEach(function (error) {
        var message = _errorHandler.errorHandler.getUserFriendlyMessage(error);
        (0, _globals.expect)(message).toBe('Please check your internet connection and try again.');
      });
    });
    (0, _globals.it)('should translate authentication errors', function () {
      var authErrors = [new Error('Unauthorized access'), new Error('401 Unauthorized'), new Error('Session expired')];
      authErrors.forEach(function (error) {
        var message = _errorHandler.errorHandler.getUserFriendlyMessage(error);
        (0, _globals.expect)(message).toBe('Your session has expired. Please log in again.');
      });
    });
    (0, _globals.it)('should translate permission errors', function () {
      var permissionErrors = [new Error('Forbidden action'), new Error('403 Forbidden'), new Error('Access denied')];
      permissionErrors.forEach(function (error) {
        var message = _errorHandler.errorHandler.getUserFriendlyMessage(error);
        (0, _globals.expect)(message).toBe("You don't have permission to perform this action.");
      });
    });
    (0, _globals.it)('should translate server errors', function () {
      var serverErrors = [new Error('Internal server error'), new Error('500 Server Error'), new Error('Service unavailable')];
      serverErrors.forEach(function (error) {
        var message = _errorHandler.errorHandler.getUserFriendlyMessage(error);
        (0, _globals.expect)(message).toBe('Server error occurred. Please try again later.');
      });
    });
    (0, _globals.it)('should translate not found errors', function () {
      var notFoundErrors = [new Error('Resource not found'), new Error('404 Not Found'), new Error('Item does not exist')];
      notFoundErrors.forEach(function (error) {
        var message = _errorHandler.errorHandler.getUserFriendlyMessage(error);
        (0, _globals.expect)(message).toBe('The requested resource was not found.');
      });
    });
    (0, _globals.it)('should return original message for user-friendly errors', function () {
      var userFriendlyError = new Error('Please enter a valid email address');
      var message = _errorHandler.errorHandler.getUserFriendlyMessage(userFriendlyError);
      (0, _globals.expect)(message).toBe('Please enter a valid email address');
    });
    (0, _globals.it)('should return generic message for unknown errors', function () {
      var unknownError = new Error('Some random error that is very long and contains Error: prefix');
      var message = _errorHandler.errorHandler.getUserFriendlyMessage(unknownError);
      (0, _globals.expect)(message).toBe('An unexpected error occurred. Please try again.');
    });
    (0, _globals.it)('should handle very long error messages', function () {
      var longError = new Error('A'.repeat(200));
      var message = _errorHandler.errorHandler.getUserFriendlyMessage(longError);
      (0, _globals.expect)(message).toBe('An unexpected error occurred. Please try again.');
    });
    (0, _globals.it)('should handle error objects without messages', function () {
      var errorWithoutMessage = new Error();
      var message = _errorHandler.errorHandler.getUserFriendlyMessage(errorWithoutMessage);
      (0, _globals.expect)(message).toBe('An unexpected error occurred. Please try again.');
    });
  });
  (0, _globals.describe)('Error Creation', function () {
    (0, _globals.it)('should create error with message only', function () {
      var error = _errorHandler.errorHandler.createError('Test error message');
      (0, _globals.expect)(error).toBeInstanceOf(Error);
      (0, _globals.expect)(error.message).toBe('Test error message');
    });
    (0, _globals.it)('should create error with message and code', function () {
      var error = _errorHandler.errorHandler.createError('Test error', 'VALIDATION_ERROR');
      (0, _globals.expect)(error.message).toBe('Test error');
      (0, _globals.expect)(error.code).toBe('VALIDATION_ERROR');
    });
    (0, _globals.it)('should handle empty code', function () {
      var error = _errorHandler.errorHandler.createError('Test error', '');
      (0, _globals.expect)(error.message).toBe('Test error');
      (0, _globals.expect)(error.code).toBeUndefined();
    });
  });
  (0, _globals.describe)('Async Function Wrapping', function () {
    (0, _globals.it)('should wrap successful async functions', (0, _asyncToGenerator2.default)(function* () {
      var asyncFn = _globals.jest.fn().mockResolvedValue('success');
      var context = {
        component: 'TestComponent',
        action: 'testAction'
      };
      var result = yield _errorHandler.errorHandler.wrapAsync(asyncFn, context);
      (0, _globals.expect)(result).toBe('success');
      (0, _globals.expect)(asyncFn).toHaveBeenCalled();
    }));
    (0, _globals.it)('should wrap failed async functions and handle errors', (0, _asyncToGenerator2.default)(function* () {
      var asyncFn = _globals.jest.fn().mockRejectedValue(new Error('Async error'));
      var context = {
        component: 'TestComponent',
        action: 'testAction'
      };
      var result = yield _errorHandler.errorHandler.wrapAsync(asyncFn, context);
      (0, _globals.expect)(result).toBeNull();
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalled();
      (0, _globals.expect)(mockAlert).toHaveBeenCalled();
    }));
    (0, _globals.it)('should wrap functions that throw non-Error objects', (0, _asyncToGenerator2.default)(function* () {
      var asyncFn = _globals.jest.fn().mockRejectedValue('String error');
      var context = {
        component: 'TestComponent',
        action: 'testAction'
      };
      var result = yield _errorHandler.errorHandler.wrapAsync(asyncFn, context);
      (0, _globals.expect)(result).toBeNull();
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'String error',
        stack: undefined,
        context: context,
        timestamp: _globals.expect.any(String)
      });
    }));
    (0, _globals.it)('should respect error handling options in wrapAsync', (0, _asyncToGenerator2.default)(function* () {
      var asyncFn = _globals.jest.fn().mockRejectedValue(new Error('Test error'));
      var context = {
        component: 'TestComponent',
        action: 'testAction'
      };
      var result = yield _errorHandler.errorHandler.wrapAsync(asyncFn, context, {
        showNotification: false,
        logToService: false
      });
      (0, _globals.expect)(result).toBeNull();
      (0, _globals.expect)(mockLogger.error).not.toHaveBeenCalled();
      (0, _globals.expect)(mockAlert).not.toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Alert Notifications', function () {
    (0, _globals.it)('should show user notifications with default OK button', function () {
      _errorHandler.errorHandler.showUserNotification('Test Title', 'Test Message');
      (0, _globals.expect)(mockAlert).toHaveBeenCalledWith('Test Title', 'Test Message', [{
        text: 'OK'
      }]);
    });
    (0, _globals.it)('should handle very long messages', function () {
      var longMessage = 'A'.repeat(1000);
      var longTitle = 'B'.repeat(200);
      _errorHandler.errorHandler.showUserNotification(longTitle, longMessage);
      (0, _globals.expect)(mockAlert).toHaveBeenCalledWith(longTitle, longMessage, [{
        text: 'OK'
      }]);
    });
    (0, _globals.it)('should handle empty title and message', function () {
      _errorHandler.errorHandler.showUserNotification('', '');
      (0, _globals.expect)(mockAlert).toHaveBeenCalledWith('', '', [{
        text: 'OK'
      }]);
    });
  });
  (0, _globals.describe)('Logging', function () {
    (0, _globals.it)('should log errors with full context', function () {
      var error = new Error('Test logging error');
      var context = {
        component: 'LoggerTest',
        action: 'logTest',
        userId: 'user123',
        metadata: {
          testData: 'value'
        }
      };
      _errorHandler.errorHandler.logError(error, context);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'Test logging error',
        stack: error.stack,
        context: context,
        timestamp: _globals.expect.any(String)
      });
    });
    (0, _globals.it)('should handle errors without stack traces', function () {
      var error = new Error('No stack error');
      error.stack = undefined;
      var context = {
        component: 'StackTest',
        action: 'noStack'
      };
      _errorHandler.errorHandler.logError(error, context);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'No stack error',
        stack: undefined,
        context: context,
        timestamp: _globals.expect.any(String)
      });
    });
    (0, _globals.it)('should handle complex metadata objects', function () {
      var error = new Error('Complex metadata error');
      var context = {
        component: 'ComplexTest',
        action: 'complexMetadata',
        metadata: {
          nested: {
            object: {
              with: 'deep properties',
              array: [1, 2, {
                complex: 'item'
              }],
              function: function _function() {
                return 'should be logged';
              }
            }
          },
          circular: {}
        }
      };
      context.metadata.circular = context.metadata;
      _errorHandler.errorHandler.logError(error, context);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'Complex metadata error',
        stack: error.stack,
        context: context,
        timestamp: _globals.expect.any(String)
      });
    });
  });
  (0, _globals.describe)('Error Context Handling', function () {
    (0, _globals.it)('should handle missing optional context fields', function () {
      var error = new Error('Minimal context error');
      var minimalContext = {
        component: 'MinimalTest',
        action: 'minimalAction'
      };
      _errorHandler.errorHandler.handleError(error, minimalContext);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'Minimal context error',
        stack: error.stack,
        context: minimalContext,
        timestamp: _globals.expect.any(String)
      });
    });
    (0, _globals.it)('should handle null and undefined metadata', function () {
      var error = new Error('Null metadata error');
      var context = {
        component: 'NullTest',
        action: 'nullMetadata',
        userId: undefined,
        metadata: null
      };
      _errorHandler.errorHandler.handleError(error, context);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle very large context objects', function () {
      var error = new Error('Large context error');
      var largeContext = {
        component: 'LargeTest',
        action: 'largeContext',
        metadata: {
          largeArray: Array.from({
            length: 1000
          }, function (_, i) {
            return `item${i}`;
          }),
          largeString: 'A'.repeat(10000),
          nestedObjects: Array.from({
            length: 100
          }, function () {
            return {
              property1: 'value1',
              property2: 'value2',
              array: Array.from({
                length: 50
              }, function () {
                return Math.random();
              })
            };
          })
        }
      };
      _errorHandler.errorHandler.handleError(error, largeContext);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Integration Scenarios', function () {
    (0, _globals.it)('should handle complete API error flow', function () {
      var apiError = new Error('API request failed');
      var context = {
        component: 'APIService',
        action: 'fetchData',
        userId: 'user123'
      };
      var apiContext = {
        endpoint: '/api/data',
        method: 'GET',
        statusCode: 404
      };
      _errorHandler.errorHandler.handleApiError(apiError, context, apiContext, {
        showNotification: true,
        logToService: true,
        fallbackMessage: 'Custom API error'
      });
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'API request failed',
        stack: apiError.stack,
        context: _objectSpread(_objectSpread({}, context), apiContext),
        timestamp: _globals.expect.any(String)
      });
      (0, _globals.expect)(mockAlert).toHaveBeenCalledWith('Error', 'The requested resource was not found.');
    });
    (0, _globals.it)('should handle async error wrapping in complex scenarios', (0, _asyncToGenerator2.default)(function* () {
      var callCount = 0;
      var complexAsyncFn = function () {
        var _ref6 = (0, _asyncToGenerator2.default)(function* () {
          callCount++;
          if (callCount === 1) {
            throw new Error('First attempt fails');
          }
          if (callCount === 2) {
            throw 'String error';
          }
          return 'success';
        });
        return function complexAsyncFn() {
          return _ref6.apply(this, arguments);
        };
      }();
      var context = {
        component: 'ComplexAsync',
        action: 'complexOperation'
      };
      var result1 = yield _errorHandler.errorHandler.wrapAsync(function () {
        return complexAsyncFn();
      }, context, {
        showNotification: false
      });
      (0, _globals.expect)(result1).toBeNull();
      var result2 = yield _errorHandler.errorHandler.wrapAsync(function () {
        return complexAsyncFn();
      }, context, {
        showNotification: false
      });
      (0, _globals.expect)(result2).toBeNull();
      var result3 = yield _errorHandler.errorHandler.wrapAsync(function () {
        return complexAsyncFn();
      }, context, {
        showNotification: false
      });
      (0, _globals.expect)(result3).toBe('success');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle errors with circular references', function () {
      var error = new Error('Circular reference error');
      var circularContext = {
        component: 'CircularTest',
        action: 'circularReference',
        metadata: {}
      };
      circularContext.metadata.self = circularContext.metadata;
      _errorHandler.errorHandler.handleError(error, circularContext);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle extremely long error messages', function () {
      var longError = new Error('A'.repeat(10000));
      var context = {
        component: 'LongErrorTest',
        action: 'longMessage'
      };
      _errorHandler.errorHandler.handleError(longError, context, {
        showNotification: false
      });
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'A'.repeat(10000),
        stack: longError.stack,
        context: context,
        timestamp: _globals.expect.any(String)
      });
    });
    (0, _globals.it)('should handle errors with special characters', function () {
      var specialError = new Error('Error with émojis 🚀 and spëcial chärs');
      var context = {
        component: 'SpecialCharsTest',
        action: 'unicodeError',
        metadata: {
          emojis: '😀🎉🔥',
          accents: 'café naïve résumé',
          symbols: '!@#$%^&*()'
        }
      };
      _errorHandler.errorHandler.handleError(specialError, context, {
        showNotification: false
      });
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Error occurred', {
        message: 'Error with émojis 🚀 and spëcial chärs',
        stack: specialError.stack,
        context: context,
        timestamp: _globals.expect.any(String)
      });
    });
    (0, _globals.it)('should handle rapid consecutive errors', function () {
      var context = {
        component: 'RapidErrorTest',
        action: 'rapidErrors'
      };
      for (var i = 0; i < 10; i++) {
        var error = new Error(`Error ${i}`);
        _errorHandler.errorHandler.handleError(error, _objectSpread(_objectSpread({}, context), {}, {
          metadata: {
            index: i
          }
        }), {
          showNotification: false
        });
      }
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledTimes(10);
    });
    (0, _globals.it)('should handle errors during error handling', function () {
      mockAlert.mockImplementation(function () {
        throw new Error('Alert failed');
      });
      var error = new Error('Original error');
      var context = {
        component: 'ErrorInErrorTest',
        action: 'errorHandlingFailure'
      };
      (0, _globals.expect)(function () {
        _errorHandler.errorHandler.handleError(error, context);
      }).not.toThrow();
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle null and undefined errors', function () {
      var context = {
        component: 'NullErrorTest',
        action: 'nullError'
      };
      (0, _globals.expect)(function () {
        _errorHandler.errorHandler.handleError(null, context);
        _errorHandler.errorHandler.handleError(undefined, context);
      }).not.toThrow();
    });
    (0, _globals.it)('should handle errors with prototype manipulation', function () {
      var error = new Error('Prototype error');
      Object.setPrototypeOf(error, null);
      var context = {
        component: 'PrototypeTest',
        action: 'prototypeError'
      };
      _errorHandler.errorHandler.handleError(error, context, {
        showNotification: false
      });
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,