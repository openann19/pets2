9f85956feafeb037eb55d5189a57bed4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
require("../api");
global.fetch = jest.fn();
describe("Subscription API", function () {
  beforeEach(function () {
    jest.resetAllMocks();
    fetch.mockImplementation(function () {
      return Promise.resolve({
        ok: true,
        json: function json() {
          return Promise.resolve({});
        }
      });
    });
  });
  describe("getCurrentSubscription", function () {
    it("should return subscription data when request succeeds", (0, _asyncToGenerator2.default)(function* () {
      var mockSubscription = {
        id: "sub_123",
        status: "active",
        plan: {
          id: "plan_premium",
          name: "Premium",
          interval: "month"
        },
        currentPeriodStart: "2025-09-10T00:00:00.000Z",
        currentPeriodEnd: "2025-10-10T00:00:00.000Z"
      };
      fetch.mockImplementationOnce(function () {
        return Promise.resolve({
          ok: true,
          json: function json() {
            return Promise.resolve(mockSubscription);
          }
        });
      });
      var result = yield subscriptionAPI.getCurrentSubscription();
      expect(result).toEqual(mockSubscription);
      expect(fetch).toHaveBeenCalledWith(expect.stringMatching(/\/subscription\/current$/), expect.objectContaining({
        headers: expect.objectContaining({
          "Content-Type": "application/json"
        })
      }));
    }));
    it("should return null when request fails", (0, _asyncToGenerator2.default)(function* () {
      fetch.mockImplementationOnce(function () {
        return Promise.reject(new Error("Network error"));
      });
      var result = yield subscriptionAPI.getCurrentSubscription();
      expect(result).toBeNull();
    }));
  });
  describe("getUsageStats", function () {
    it("should return usage stats when request succeeds", (0, _asyncToGenerator2.default)(function* () {
      var mockUsageStats = {
        swipesRemaining: 50,
        totalSwipes: 100,
        superLikesRemaining: 5,
        totalSuperLikes: 5,
        resetDate: "2025-10-15T00:00:00.000Z"
      };
      fetch.mockImplementationOnce(function () {
        return Promise.resolve({
          ok: true,
          json: function json() {
            return Promise.resolve(mockUsageStats);
          }
        });
      });
      var result = yield subscriptionAPI.getUsageStats();
      expect(result).toEqual(mockUsageStats);
      expect(fetch).toHaveBeenCalledWith(expect.stringMatching(/\/subscription\/usage$/), expect.any(Object));
    }));
    it("should return null when request fails", (0, _asyncToGenerator2.default)(function* () {
      fetch.mockImplementationOnce(function () {
        return Promise.reject(new Error("Network error"));
      });
      var result = yield subscriptionAPI.getUsageStats();
      expect(result).toBeNull();
    }));
  });
  describe("createCheckoutSession", function () {
    it("should create a checkout session with the correct parameters", (0, _asyncToGenerator2.default)(function* () {
      var mockSession = {
        id: "cs_test_123",
        url: "https://checkout.stripe.com/pay/cs_test_123",
        status: "open"
      };
      fetch.mockImplementationOnce(function () {
        return Promise.resolve({
          ok: true,
          json: function json() {
            return Promise.resolve(mockSession);
          }
        });
      });
      var params = {
        priceId: "price_premium_monthly",
        successUrl: "pawfectmatch://subscription/success",
        cancelUrl: "pawfectmatch://subscription/cancel",
        metadata: {
          tier: "premium"
        }
      };
      var result = yield subscriptionAPI.createCheckoutSession(params);
      expect(result).toEqual(mockSession);
      expect(fetch).toHaveBeenCalledWith(expect.stringMatching(/\/subscription\/create-checkout$/), expect.objectContaining({
        method: "POST",
        body: JSON.stringify(params)
      }));
    }));
    it("should handle errors when creating a checkout session", (0, _asyncToGenerator2.default)(function* () {
      fetch.mockImplementationOnce(function () {
        return Promise.resolve({
          ok: false,
          status: 400,
          json: function json() {
            return Promise.resolve({
              error: "Invalid price ID"
            });
          }
        });
      });
      var params = {
        priceId: "invalid_price_id",
        successUrl: "pawfectmatch://subscription/success",
        cancelUrl: "pawfectmatch://subscription/cancel"
      };
      yield expect(subscriptionAPI.createCheckoutSession(params)).rejects.toThrow();
    }));
  });
  describe("cancelSubscription", function () {
    it("should cancel a subscription successfully", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        id: "sub_123",
        status: "canceled",
        cancel_at_period_end: true
      };
      fetch.mockImplementationOnce(function () {
        return Promise.resolve({
          ok: true,
          json: function json() {
            return Promise.resolve(mockResponse);
          }
        });
      });
      var result = yield subscriptionAPI.cancelSubscription("sub_123");
      expect(result).toEqual(mockResponse);
      expect(fetch).toHaveBeenCalledWith(expect.stringMatching(/\/subscription\/sub_123\/cancel$/), expect.objectContaining({
        method: "POST"
      }));
    }));
  });
  describe("reactivateSubscription", function () {
    it("should reactivate a canceled subscription", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        id: "sub_123",
        status: "active",
        cancel_at_period_end: false
      };
      fetch.mockImplementationOnce(function () {
        return Promise.resolve({
          ok: true,
          json: function json() {
            return Promise.resolve(mockResponse);
          }
        });
      });
      var result = yield subscriptionAPI.reactivateSubscription("sub_123");
      expect(result).toEqual(mockResponse);
      expect(fetch).toHaveBeenCalledWith(expect.stringMatching(/\/subscription\/sub_123\/reactivate$/), expect.objectContaining({
        method: "POST"
      }));
    }));
  });
  describe("getPlans", function () {
    it("should return available subscription plans", (0, _asyncToGenerator2.default)(function* () {
      var mockPlans = [{
        id: "price_basic_monthly",
        name: "Basic",
        interval: "month",
        amount: 999,
        currency: "USD"
      }, {
        id: "price_premium_monthly",
        name: "Premium",
        interval: "month",
        amount: 1999,
        currency: "USD"
      }];
      fetch.mockImplementationOnce(function () {
        return Promise.resolve({
          ok: true,
          json: function json() {
            return Promise.resolve(mockPlans);
          }
        });
      });
      var result = yield subscriptionAPI.getPlans();
      expect(result).toEqual(mockPlans);
      expect(fetch).toHaveBeenCalledWith(expect.stringMatching(/\/subscription\/plans$/), expect.any(Object));
    }));
    it("should return empty array when request fails", (0, _asyncToGenerator2.default)(function* () {
      fetch.mockImplementationOnce(function () {
        return Promise.reject(new Error("Network error"));
      });
      var result = yield subscriptionAPI.getPlans();
      expect(result).toEqual([]);
    }));
  });
  describe("updatePaymentMethod", function () {
    it("should update the payment method successfully", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        subscription: {
          id: "sub_123",
          default_payment_method: "pm_123"
        }
      };
      fetch.mockImplementationOnce(function () {
        return Promise.resolve({
          ok: true,
          json: function json() {
            return Promise.resolve(mockResponse);
          }
        });
      });
      var result = yield subscriptionAPI.updatePaymentMethod("pm_123");
      expect(result).toEqual(mockResponse);
      expect(fetch).toHaveBeenCalledWith(expect.stringMatching(/\/subscription\/payment-method$/), expect.objectContaining({
        method: "PUT",
        body: JSON.stringify({
          paymentMethodId: "pm_123"
        })
      }));
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,