309ded7dde0214d0f92ce77e64337468
"use strict";

_getJestObj().mock('expo-image-manipulator', function () {
  return {
    manipulateAsync: _globals.jest.fn(),
    SaveFormat: {
      JPEG: 'jpeg',
      PNG: 'png'
    }
  };
});
_getJestObj().mock('expo-file-system', function () {
  return {
    getInfoAsync: _globals.jest.fn(),
    deleteAsync: _globals.jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _ImageCompressionService = require("../ImageCompressionService");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockImageManipulator = ImageManipulator;
var mockFileSystem = FileSystem;
(0, _globals.describe)('ImageCompressionService', function () {
  var service;
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    service = new _ImageCompressionService.ImageCompressionService();
    mockFileSystem.getInfoAsync.mockResolvedValue({
      exists: true,
      size: 2048000,
      uri: 'file://test.jpg',
      isDirectory: false
    });
    mockImageManipulator.manipulateAsync.mockResolvedValue({
      uri: 'file://compressed.jpg',
      width: 1920,
      height: 1080
    });
  });
  (0, _globals.describe)('Single Image Compression', function () {
    (0, _globals.it)('should compress image with default options', (0, _asyncToGenerator2.default)(function* () {
      var result = yield service.compressImage('file://input.jpg');
      (0, _globals.expect)(mockFileSystem.getInfoAsync).toHaveBeenCalledWith('file://input.jpg');
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith('file://input.jpg', [{
        resize: {
          width: 1920,
          height: 1920
        }
      }], {
        compress: 0.8,
        format: 'jpeg'
      });
      (0, _globals.expect)(mockFileSystem.getInfoAsync).toHaveBeenCalledWith('file://compressed.jpg');
      (0, _globals.expect)(result).toEqual({
        uri: 'file://compressed.jpg',
        width: 1920,
        height: 1080,
        size: 2048000,
        originalSize: 2048000,
        compressionRatio: 0
      });
    }));
    (0, _globals.it)('should compress image with custom options', (0, _asyncToGenerator2.default)(function* () {
      var customOptions = {
        maxWidth: 1024,
        maxHeight: 768,
        quality: 0.6,
        format: 'png',
        maintainAspectRatio: false
      };
      yield service.compressImage('file://input.png', customOptions);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith('file://input.png', [{
        resize: {
          width: 1024,
          height: 768
        }
      }], {
        compress: 0.6,
        format: 'png'
      });
    }));
    (0, _globals.it)('should calculate compression ratio correctly', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        size: 2097152,
        uri: '',
        isDirectory: false
      }).mockResolvedValueOnce({
        exists: true,
        size: 524288,
        uri: '',
        isDirectory: false
      });
      var result = yield service.compressImage('file://input.jpg');
      (0, _globals.expect)(result.compressionRatio).toBe(0.75);
    }));
    (0, _globals.it)('should handle compression errors', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockRejectedValue(new Error('Compression failed'));
      yield (0, _globals.expect)(service.compressImage('file://input.jpg')).rejects.toThrow('Failed to compress image');
    }));
    (0, _globals.it)('should handle file info errors', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockRejectedValue(new Error('File not found'));
      yield (0, _globals.expect)(service.compressImage('file://input.jpg')).rejects.toThrow('Failed to compress image');
    }));
  });
  (0, _globals.describe)('Batch Image Compression', function () {
    (0, _globals.it)('should compress multiple images successfully', (0, _asyncToGenerator2.default)(function* () {
      var uris = ['file://img1.jpg', 'file://img2.jpg', 'file://img3.jpg'];
      var results = yield service.compressImages(uris);
      (0, _globals.expect)(results).toHaveLength(3);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledTimes(3);
    }));
    (0, _globals.it)('should continue processing when one image fails', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'file://compressed1.jpg',
        width: 1920,
        height: 1080
      }).mockRejectedValueOnce(new Error('Failed to compress')).mockResolvedValueOnce({
        uri: 'file://compressed3.jpg',
        width: 1920,
        height: 1080
      });
      var uris = ['file://img1.jpg', 'file://img2.jpg', 'file://img3.jpg'];
      var results = yield service.compressImages(uris);
      (0, _globals.expect)(results).toHaveLength(2);
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledTimes(3);
    }));
    (0, _globals.it)('should handle empty batch', (0, _asyncToGenerator2.default)(function* () {
      var results = yield service.compressImages([]);
      (0, _globals.expect)(results).toEqual([]);
    }));
  });
  (0, _globals.describe)('Optimal Compression Settings', function () {
    (0, _globals.it)('should return JPEG optimization settings', function () {
      var settings = service.getOptimalCompressionSettings('file://photo.jpg');
      (0, _globals.expect)(settings).toEqual({
        maxWidth: 1920,
        maxHeight: 1920,
        quality: 0.75,
        format: 'jpeg'
      });
    });
    (0, _globals.it)('should return PNG optimization settings', function () {
      var settings = service.getOptimalCompressionSettings('file://image.png');
      (0, _globals.expect)(settings).toEqual({
        maxWidth: 1920,
        maxHeight: 1920,
        quality: 0.9,
        format: 'png'
      });
    });
    (0, _globals.it)('should return default settings for unknown formats', function () {
      var settings = service.getOptimalCompressionSettings('file://image.webp');
      (0, _globals.expect)(settings).toEqual({
        maxWidth: 1920,
        maxHeight: 1920,
        quality: 0.8,
        format: 'jpeg',
        maintainAspectRatio: true
      });
    });
    (0, _globals.it)('should handle uppercase extensions', function () {
      var settings = service.getOptimalCompressionSettings('file://PHOTO.JPG');
      (0, _globals.expect)(settings.quality).toBe(0.75);
    });
  });
  (0, _globals.describe)('Specialized Compression Methods', function () {
    (0, _globals.it)('should compress avatar images with correct settings', (0, _asyncToGenerator2.default)(function* () {
      yield service.compressAvatarImage('file://avatar.jpg');
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith('file://avatar.jpg', [{
        resize: {
          width: 512,
          height: 512
        }
      }], {
        compress: 0.8,
        format: 'jpeg'
      });
    }));
    (0, _globals.it)('should compress pet images with optimal settings', (0, _asyncToGenerator2.default)(function* () {
      yield service.compressPetImage('file://pet.jpg');
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith('file://pet.jpg', [{
        resize: {
          width: 1920,
          height: 1920
        }
      }], {
        compress: 0.75,
        format: 'jpeg'
      });
    }));
    (0, _globals.it)('should compress chat images with smaller dimensions', (0, _asyncToGenerator2.default)(function* () {
      yield service.compressChatImage('file://chat.jpg');
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith('file://chat.jpg', [{
        resize: {
          width: 1024,
          height: 1024
        }
      }], {
        compress: 0.7,
        format: 'jpeg'
      });
    }));
  });
  (0, _globals.describe)('Image Validation', function () {
    (0, _globals.it)('should validate existing image file', (0, _asyncToGenerator2.default)(function* () {
      var result = yield service.validateImage('file://valid.jpg');
      (0, _globals.expect)(result).toEqual({
        isValid: true
      });
    }));
    (0, _globals.it)('should reject non-existent files', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: false,
        size: 0,
        uri: '',
        isDirectory: false
      });
      var result = yield service.validateImage('file://missing.jpg');
      (0, _globals.expect)(result).toEqual({
        isValid: false,
        error: 'Image file does not exist'
      });
    }));
    (0, _globals.it)('should reject files that are too large', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        size: 25 * 1024 * 1024,
        uri: '',
        isDirectory: false
      });
      var result = yield service.validateImage('file://toolarge.jpg');
      (0, _globals.expect)(result).toEqual({
        isValid: false,
        error: 'Image file is too large (max 20MB)'
      });
    }));
    (0, _globals.it)('should reject unsupported file formats', (0, _asyncToGenerator2.default)(function* () {
      var result = yield service.validateImage('file://image.bmp');
      (0, _globals.expect)(result).toEqual({
        isValid: false,
        error: 'Unsupported image format'
      });
    }));
    (0, _globals.it)('should accept all supported formats', (0, _asyncToGenerator2.default)(function* () {
      var supportedFormats = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
      for (var format of supportedFormats) {
        var result = yield service.validateImage(`file://image${format}`);
        (0, _globals.expect)(result.isValid).toBe(true);
      }
    }));
    (0, _globals.it)('should handle validation errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockRejectedValue(new Error('Permission denied'));
      var result = yield service.validateImage('file://invalid.jpg');
      (0, _globals.expect)(result).toEqual({
        isValid: false,
        error: 'Failed to validate image'
      });
    }));
  });
  (0, _globals.describe)('Temp File Cleanup', function () {
    (0, _globals.it)('should cleanup temp images in cache/temp directories', (0, _asyncToGenerator2.default)(function* () {
      var tempUris = ['file://cache/compressed1.jpg', 'file://temp/image2.png', 'file://ImageManipulator/result3.jpeg'];
      yield service.cleanupTempImages(tempUris);
      (0, _globals.expect)(mockFileSystem.deleteAsync).toHaveBeenCalledTimes(3);
      (0, _globals.expect)(mockFileSystem.deleteAsync).toHaveBeenCalledWith('file://cache/compressed1.jpg', {
        idempotent: true
      });
    }));
    (0, _globals.it)('should not delete files outside temp/cache directories', (0, _asyncToGenerator2.default)(function* () {
      var safeUris = ['file://documents/photo.jpg', 'file://downloads/image.png'];
      yield service.cleanupTempImages(safeUris);
      (0, _globals.expect)(mockFileSystem.deleteAsync).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle cleanup errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.deleteAsync.mockRejectedValue(new Error('Delete failed'));
      var tempUri = ['file://cache/temp.jpg'];
      yield (0, _globals.expect)(service.cleanupTempImages(tempUri)).resolves.not.toThrow();
    }));
  });
  (0, _globals.describe)('Image Dimensions', function () {
    (0, _globals.it)('should get image dimensions successfully', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockResolvedValue({
        uri: 'file://original.jpg',
        width: 4000,
        height: 3000
      });
      var dimensions = yield service.getImageDimensions('file://input.jpg');
      (0, _globals.expect)(dimensions).toEqual({
        width: 4000,
        height: 3000
      });
      (0, _globals.expect)(mockImageManipulator.manipulateAsync).toHaveBeenCalledWith('file://input.jpg', [], {
        format: 'jpeg'
      });
    }));
    (0, _globals.it)('should return null when dimensions cannot be retrieved', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockRejectedValue(new Error('Invalid image'));
      var dimensions = yield service.getImageDimensions('file://invalid.jpg');
      (0, _globals.expect)(dimensions).toBeNull();
    }));
  });
  (0, _globals.describe)('File Size Formatting', function () {
    (0, _globals.it)('should format file sizes correctly', function () {
      var formatMethod = service.formatFileSize.bind(service);
      (0, _globals.expect)(formatMethod(0)).toBe('0 B');
      (0, _globals.expect)(formatMethod(512)).toBe('512 B');
      (0, _globals.expect)(formatMethod(1024)).toBe('1 KB');
      (0, _globals.expect)(formatMethod(1536)).toBe('1.5 KB');
      (0, _globals.expect)(formatMethod(1048576)).toBe('1 MB');
      (0, _globals.expect)(formatMethod(2147483648)).toBe('2 GB');
    });
  });
  (0, _globals.describe)('Edge Cases and Error Handling', function () {
    (0, _globals.it)('should handle compression with zero original size', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        size: 0,
        uri: '',
        isDirectory: false
      });
      var result = yield service.compressImage('file://empty.jpg');
      (0, _globals.expect)(result.compressionRatio).toBe(0);
    }));
    (0, _globals.it)('should handle compression with non-existent compressed file', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        size: 1000000,
        uri: '',
        isDirectory: false
      }).mockResolvedValueOnce({
        exists: false,
        size: 0,
        uri: '',
        isDirectory: false
      });
      var result = yield service.compressImage('file://input.jpg');
      (0, _globals.expect)(result.size).toBe(0);
      (0, _globals.expect)(result.compressionRatio).toBe(0);
    }));
    (0, _globals.it)('should handle batch compression with mixed results', (0, _asyncToGenerator2.default)(function* () {
      mockImageManipulator.manipulateAsync.mockResolvedValueOnce({
        uri: 'file://comp1.jpg',
        width: 100,
        height: 100
      }).mockRejectedValueOnce(new Error('Compression failed')).mockResolvedValueOnce({
        uri: 'file://comp3.jpg',
        width: 100,
        height: 100
      }).mockRejectedValueOnce(new Error('Compression failed'));
      var uris = ['img1.jpg', 'img2.jpg', 'img3.jpg', 'img4.jpg'];
      var results = yield service.compressImages(uris);
      (0, _globals.expect)(results).toHaveLength(2);
    }));
    (0, _globals.it)('should validate image with edge case file sizes', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValueOnce({
        exists: true,
        size: 20 * 1024 * 1024,
        uri: '',
        isDirectory: false
      });
      var result = yield service.validateImage('file://exactly20mb.jpg');
      (0, _globals.expect)(result.isValid).toBe(true);
    }));
  });
  (0, _globals.describe)('Logging', function () {
    (0, _globals.it)('should log compression start and completion', (0, _asyncToGenerator2.default)(function* () {
      var _require = require('@pawfectmatch/core'),
        logger = _require.logger;
      yield service.compressImage('file://input.jpg');
      (0, _globals.expect)(logger.info).toHaveBeenCalledWith('Starting image compression', _globals.expect.objectContaining({
        uri: _globals.expect.any(String),
        options: _globals.expect.any(Object)
      }));
      (0, _globals.expect)(logger.info).toHaveBeenCalledWith('Image compression completed', _globals.expect.objectContaining({
        originalSize: _globals.expect.any(String),
        compressedSize: _globals.expect.any(String),
        compressionRatio: _globals.expect.any(String),
        dimensions: _globals.expect.any(String)
      }));
    }));
    (0, _globals.it)('should log compression errors', (0, _asyncToGenerator2.default)(function* () {
      var _require2 = require('@pawfectmatch/core'),
        logger = _require2.logger;
      mockImageManipulator.manipulateAsync.mockRejectedValue(new Error('Test error'));
      yield (0, _globals.expect)(service.compressImage('file://input.jpg')).rejects.toThrow();
      (0, _globals.expect)(logger.error).toHaveBeenCalledWith('Image compression failed', _globals.expect.objectContaining({
        error: _globals.expect.any(Error),
        imageUri: 'file://input.jpg'
      }));
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,