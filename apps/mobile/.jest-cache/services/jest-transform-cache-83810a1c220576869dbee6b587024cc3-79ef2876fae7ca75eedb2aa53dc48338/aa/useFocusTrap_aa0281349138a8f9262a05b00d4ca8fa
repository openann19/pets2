b09b2ab50394c2d115f260fe45caaae5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFocusTrap = useFocusTrap;
var react_1 = require("react");
var environment_1 = require("../utils/environment");
function useFocusTrap() {
  var containerRef = (0, react_1.useRef)(null);
  var firstFocusableElement = (0, react_1.useRef)(null);
  var lastFocusableElement = (0, react_1.useRef)(null);
  var handleTabKey = (0, react_1.useCallback)(function (e) {
    if (containerRef.current == null) return;
    var focusableElements = containerRef.current.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
    if (focusableElements.length === 0) return;
    var firstElement = focusableElements[0];
    var lastElement = focusableElements[focusableElements.length - 1];
    firstFocusableElement.current = firstElement;
    lastFocusableElement.current = lastElement;
    var activeDocument = (0, environment_1.getDocumentObject)();
    if (activeDocument == null) {
      return;
    }
    if (e.key === 'Tab' && !e.shiftKey && activeDocument.activeElement === lastElement) {
      e.preventDefault();
      firstElement.focus();
    }
    if (e.key === 'Tab' && e.shiftKey && activeDocument.activeElement === firstElement) {
      e.preventDefault();
      lastElement.focus();
    }
  }, []);
  var handleKeyDown = (0, react_1.useCallback)(function (event) {
    if (event.key === 'Tab') {
      handleTabKey(event);
    }
  }, [handleTabKey]);
  (0, react_1.useEffect)(function () {
    var container = containerRef.current;
    if (container == null) return;
    container.addEventListener('keydown', handleKeyDown);
    var focusableElements = container.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
    if (focusableElements.length > 0) {
      var initialElement = focusableElements[0];
      if (initialElement != null) {
        initialElement.focus();
      }
    }
    return function () {
      container.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleKeyDown]);
  return containerRef;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVzZUZvY3VzVHJhcCIsInJlYWN0XzEiLCJyZXF1aXJlIiwiZW52aXJvbm1lbnRfMSIsImNvbnRhaW5lclJlZiIsInVzZVJlZiIsImZpcnN0Rm9jdXNhYmxlRWxlbWVudCIsImxhc3RGb2N1c2FibGVFbGVtZW50IiwiaGFuZGxlVGFiS2V5IiwidXNlQ2FsbGJhY2siLCJlIiwiY3VycmVudCIsImZvY3VzYWJsZUVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImZpcnN0RWxlbWVudCIsImxhc3RFbGVtZW50IiwiYWN0aXZlRG9jdW1lbnQiLCJnZXREb2N1bWVudE9iamVjdCIsImtleSIsInNoaWZ0S2V5IiwiYWN0aXZlRWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwiZm9jdXMiLCJoYW5kbGVLZXlEb3duIiwiZXZlbnQiLCJ1c2VFZmZlY3QiLCJjb250YWluZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5pdGlhbEVsZW1lbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sInNvdXJjZXMiOlsidXNlRm9jdXNUcmFwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VGb2N1c1RyYXAgPSB1c2VGb2N1c1RyYXA7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgZW52aXJvbm1lbnRfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9lbnZpcm9ubWVudFwiKTtcbmZ1bmN0aW9uIHVzZUZvY3VzVHJhcCgpIHtcbiAgICBjb25zdCBjb250YWluZXJSZWYgPSAoMCwgcmVhY3RfMS51c2VSZWYpKG51bGwpO1xuICAgIGNvbnN0IGZpcnN0Rm9jdXNhYmxlRWxlbWVudCA9ICgwLCByZWFjdF8xLnVzZVJlZikobnVsbCk7XG4gICAgY29uc3QgbGFzdEZvY3VzYWJsZUVsZW1lbnQgPSAoMCwgcmVhY3RfMS51c2VSZWYpKG51bGwpO1xuICAgIGNvbnN0IGhhbmRsZVRhYktleSA9ICgwLCByZWFjdF8xLnVzZUNhbGxiYWNrKSgoZSkgPT4ge1xuICAgICAgICBpZiAoY29udGFpbmVyUmVmLmN1cnJlbnQgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgZm9jdXNhYmxlRWxlbWVudHMgPSBjb250YWluZXJSZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24sIFtocmVmXSwgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIFt0YWJpbmRleF06bm90KFt0YWJpbmRleD1cIi0xXCJdKScpO1xuICAgICAgICBpZiAoZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBmaXJzdEVsZW1lbnQgPSBmb2N1c2FibGVFbGVtZW50c1swXTtcbiAgICAgICAgY29uc3QgbGFzdEVsZW1lbnQgPSBmb2N1c2FibGVFbGVtZW50c1tmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgZmlyc3RGb2N1c2FibGVFbGVtZW50LmN1cnJlbnQgPSBmaXJzdEVsZW1lbnQ7XG4gICAgICAgIGxhc3RGb2N1c2FibGVFbGVtZW50LmN1cnJlbnQgPSBsYXN0RWxlbWVudDtcbiAgICAgICAgY29uc3QgYWN0aXZlRG9jdW1lbnQgPSAoMCwgZW52aXJvbm1lbnRfMS5nZXREb2N1bWVudE9iamVjdCkoKTtcbiAgICAgICAgaWYgKGFjdGl2ZURvY3VtZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5rZXkgPT09ICdUYWInICYmICFlLnNoaWZ0S2V5ICYmIGFjdGl2ZURvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGxhc3RFbGVtZW50KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBmaXJzdEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5rZXkgPT09ICdUYWInICYmIGUuc2hpZnRLZXkgJiYgYWN0aXZlRG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZmlyc3RFbGVtZW50KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBsYXN0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuICAgIGNvbnN0IGhhbmRsZUtleURvd24gPSAoMCwgcmVhY3RfMS51c2VDYWxsYmFjaykoKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5rZXkgPT09ICdUYWInKSB7XG4gICAgICAgICAgICBoYW5kbGVUYWJLZXkoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSwgW2hhbmRsZVRhYktleV0pO1xuICAgICgwLCByZWFjdF8xLnVzZUVmZmVjdCkoKCkgPT4ge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBjb250YWluZXJSZWYuY3VycmVudDtcbiAgICAgICAgaWYgKGNvbnRhaW5lciA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pO1xuICAgICAgICAvLyBGb2N1cyBmaXJzdCBlbGVtZW50IHdoZW4gdHJhcCBpcyBhY3RpdmF0ZWRcbiAgICAgICAgY29uc3QgZm9jdXNhYmxlRWxlbWVudHMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uLCBbaHJlZl0sIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXg9XCItMVwiXSknKTtcbiAgICAgICAgaWYgKGZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGluaXRpYWxFbGVtZW50ID0gZm9jdXNhYmxlRWxlbWVudHNbMF07XG4gICAgICAgICAgICBpZiAoaW5pdGlhbEVsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGluaXRpYWxFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gICAgICAgIH07XG4gICAgfSwgW2hhbmRsZUtleURvd25dKTtcbiAgICByZXR1cm4gY29udGFpbmVyUmVmO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFDN0RELE9BQU8sQ0FBQ0UsWUFBWSxHQUFHQSxZQUFZO0FBQ25DLElBQU1DLE9BQU8sR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUNoQyxJQUFNQyxhQUFhLEdBQUdELE9BQU8sdUJBQXVCLENBQUM7QUFDckQsU0FBU0YsWUFBWUEsQ0FBQSxFQUFHO0VBQ3BCLElBQU1JLFlBQVksR0FBRyxDQUFDLENBQUMsRUFBRUgsT0FBTyxDQUFDSSxNQUFNLEVBQUUsSUFBSSxDQUFDO0VBQzlDLElBQU1DLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxFQUFFTCxPQUFPLENBQUNJLE1BQU0sRUFBRSxJQUFJLENBQUM7RUFDdkQsSUFBTUUsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDLEVBQUVOLE9BQU8sQ0FBQ0ksTUFBTSxFQUFFLElBQUksQ0FBQztFQUN0RCxJQUFNRyxZQUFZLEdBQUcsQ0FBQyxDQUFDLEVBQUVQLE9BQU8sQ0FBQ1EsV0FBVyxFQUFFLFVBQUNDLENBQUMsRUFBSztJQUNqRCxJQUFJTixZQUFZLENBQUNPLE9BQU8sSUFBSSxJQUFJLEVBQzVCO0lBQ0osSUFBTUMsaUJBQWlCLEdBQUdSLFlBQVksQ0FBQ08sT0FBTyxDQUFDRSxnQkFBZ0IsQ0FBQywwRUFBMEUsQ0FBQztJQUMzSSxJQUFJRCxpQkFBaUIsQ0FBQ0UsTUFBTSxLQUFLLENBQUMsRUFDOUI7SUFDSixJQUFNQyxZQUFZLEdBQUdILGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUN6QyxJQUFNSSxXQUFXLEdBQUdKLGlCQUFpQixDQUFDQSxpQkFBaUIsQ0FBQ0UsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNuRVIscUJBQXFCLENBQUNLLE9BQU8sR0FBR0ksWUFBWTtJQUM1Q1Isb0JBQW9CLENBQUNJLE9BQU8sR0FBR0ssV0FBVztJQUMxQyxJQUFNQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLEVBQUVkLGFBQWEsQ0FBQ2UsaUJBQWlCLEVBQUUsQ0FBQztJQUM3RCxJQUFJRCxjQUFjLElBQUksSUFBSSxFQUFFO01BQ3hCO0lBQ0o7SUFDQSxJQUFJUCxDQUFDLENBQUNTLEdBQUcsS0FBSyxLQUFLLElBQUksQ0FBQ1QsQ0FBQyxDQUFDVSxRQUFRLElBQUlILGNBQWMsQ0FBQ0ksYUFBYSxLQUFLTCxXQUFXLEVBQUU7TUFDaEZOLENBQUMsQ0FBQ1ksY0FBYyxDQUFDLENBQUM7TUFDbEJQLFlBQVksQ0FBQ1EsS0FBSyxDQUFDLENBQUM7SUFDeEI7SUFDQSxJQUFJYixDQUFDLENBQUNTLEdBQUcsS0FBSyxLQUFLLElBQUlULENBQUMsQ0FBQ1UsUUFBUSxJQUFJSCxjQUFjLENBQUNJLGFBQWEsS0FBS04sWUFBWSxFQUFFO01BQ2hGTCxDQUFDLENBQUNZLGNBQWMsQ0FBQyxDQUFDO01BQ2xCTixXQUFXLENBQUNPLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCO0VBQ0osQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUNOLElBQU1DLGFBQWEsR0FBRyxDQUFDLENBQUMsRUFBRXZCLE9BQU8sQ0FBQ1EsV0FBVyxFQUFFLFVBQUNnQixLQUFLLEVBQUs7SUFDdEQsSUFBSUEsS0FBSyxDQUFDTixHQUFHLEtBQUssS0FBSyxFQUFFO01BQ3JCWCxZQUFZLENBQUNpQixLQUFLLENBQUM7SUFDdkI7RUFDSixDQUFDLEVBQUUsQ0FBQ2pCLFlBQVksQ0FBQyxDQUFDO0VBQ2xCLENBQUMsQ0FBQyxFQUFFUCxPQUFPLENBQUN5QixTQUFTLEVBQUUsWUFBTTtJQUN6QixJQUFNQyxTQUFTLEdBQUd2QixZQUFZLENBQUNPLE9BQU87SUFDdEMsSUFBSWdCLFNBQVMsSUFBSSxJQUFJLEVBQ2pCO0lBQ0pBLFNBQVMsQ0FBQ0MsZ0JBQWdCLENBQUMsU0FBUyxFQUFFSixhQUFhLENBQUM7SUFFcEQsSUFBTVosaUJBQWlCLEdBQUdlLFNBQVMsQ0FBQ2QsZ0JBQWdCLENBQUMsMEVBQTBFLENBQUM7SUFDaEksSUFBSUQsaUJBQWlCLENBQUNFLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDOUIsSUFBTWUsY0FBYyxHQUFHakIsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO01BQzNDLElBQUlpQixjQUFjLElBQUksSUFBSSxFQUFFO1FBQ3hCQSxjQUFjLENBQUNOLEtBQUssQ0FBQyxDQUFDO01BQzFCO0lBQ0o7SUFDQSxPQUFPLFlBQU07TUFDVEksU0FBUyxDQUFDRyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUVOLGFBQWEsQ0FBQztJQUMzRCxDQUFDO0VBQ0wsQ0FBQyxFQUFFLENBQUNBLGFBQWEsQ0FBQyxDQUFDO0VBQ25CLE9BQU9wQixZQUFZO0FBQ3ZCIiwiaWdub3JlTGlzdCI6W119