e512398ef6064608a66521970f33f324
"use strict";

_getJestObj().mock('expo-location');
_getJestObj().mock('react-native', function () {
  return {
    Platform: {
      OS: 'ios'
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../socket", function () {
  return {
    socketClient: {
      emit: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var Location = _interopRequireWildcard(require("expo-location"));
var _reactNative = require("react-native");
var _petActivityService = require("../petActivityService");
var _core = require("@pawfectmatch/core");
var _socket = require("../socket");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
var mockLocation = Location;
var mockLogger = _core.logger;
var mockSocketClient = _socket.socketClient;
(0, _globals.describe)('PetActivityService', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockLocation.requestForegroundPermissionsAsync.mockResolvedValue({
      status: 'granted',
      granted: true,
      canAskAgain: true
    });
    mockLocation.getCurrentPositionAsync.mockResolvedValue({
      coords: {
        latitude: 40.7128,
        longitude: -74.0060,
        altitude: 10,
        accuracy: 5,
        altitudeAccuracy: 1,
        heading: 90,
        speed: 1.5
      },
      timestamp: Date.now()
    });
    mockSocketClient.emit.mockImplementation(function () {});
  });
  (0, _globals.describe)('getCurrentLocation', function () {
    (0, _globals.it)('should get current location with permissions', (0, _asyncToGenerator2.default)(function* () {
      var location = yield global.getCurrentLocation();
      (0, _globals.expect)(mockLocation.requestForegroundPermissionsAsync).toHaveBeenCalled();
      (0, _globals.expect)(mockLocation.getCurrentPositionAsync).toHaveBeenCalledWith({
        accuracy: Location.Accuracy.High
      });
      (0, _globals.expect)(location).toEqual({
        lat: 40.7128,
        lng: -74.0060
      });
    }));
    (0, _globals.it)('should handle permission denied', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.requestForegroundPermissionsAsync.mockResolvedValue({
        status: 'denied',
        granted: false,
        canAskAgain: false
      });
      yield (0, _globals.expect)(global.getCurrentLocation()).rejects.toThrow('Location permission not granted');
    }));
    (0, _globals.it)('should handle location services unavailable', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.getCurrentPositionAsync.mockRejectedValue(new Error('Location services are disabled'));
      yield (0, _globals.expect)(global.getCurrentLocation()).rejects.toThrow('Location services are disabled');
    }));
    (0, _globals.it)('should handle undetermined permission status', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.requestForegroundPermissionsAsync.mockResolvedValue({
        status: 'undetermined',
        granted: false,
        canAskAgain: true
      });
      yield (0, _globals.expect)(global.getCurrentLocation()).rejects.toThrow('Location permission not granted');
    }));
  });
  (0, _globals.describe)('startPetActivity', function () {
    var mockActivityRecord = {
      _id: 'activity123',
      petId: 'pet456',
      activity: 'walk',
      message: 'Enjoying a walk!',
      lat: 40.7128,
      lng: -74.0060,
      radius: 500,
      createdAt: '2024-01-01T12:00:00Z',
      updatedAt: '2024-01-01T12:00:00Z',
      active: true
    };
    (0, _globals.it)('should start a pet activity successfully', (0, _asyncToGenerator2.default)(function* () {
      var payload = {
        petId: 'pet456',
        activity: 'walk',
        message: 'Enjoying a walk!',
        shareToMap: true,
        radiusMeters: 500
      };
      var mockResponse = {
        data: mockActivityRecord
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/pets/activity/start', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          petId: 'pet456',
          activity: 'walk',
          message: 'Enjoying a walk!',
          shareToMap: true,
          location: {
            lat: 40.7128,
            lng: -74.0060
          },
          radius: 500,
          device: 'ios'
        })
      });
      (0, _globals.expect)(mockSocketClient.emit).toHaveBeenCalledWith('activity:start', {
        petId: 'pet456',
        activity: 'walk',
        message: 'Enjoying a walk!',
        shareToMap: true,
        location: {
          lat: 40.7128,
          lng: -74.0060
        },
        radius: 500,
        device: 'ios',
        _id: 'activity123'
      });
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Activity started', {
        record: mockActivityRecord
      });
      (0, _globals.expect)(result).toEqual(mockActivityRecord);
    }));
    (0, _globals.it)('should start activity with default values', (0, _asyncToGenerator2.default)(function* () {
      var payload = {
        petId: 'pet789',
        activity: 'play'
      };
      var mockResponse = {
        data: {
          _id: 'activity789',
          petId: 'pet789',
          activity: 'play',
          message: '',
          lat: 40.7128,
          lng: -74.0060,
          radius: 500,
          createdAt: '2024-01-01T13:00:00Z',
          updatedAt: '2024-01-01T13:00:00Z',
          active: true
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/pets/activity/start', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          petId: 'pet789',
          activity: 'play',
          message: '',
          shareToMap: true,
          location: {
            lat: 40.7128,
            lng: -74.0060
          },
          radius: 500,
          device: 'ios'
        })
      });
      (0, _globals.expect)(result.message).toBe('');
    }));
    (0, _globals.it)('should handle all activity types', (0, _asyncToGenerator2.default)(function* () {
      var activityTypes = ['walk', 'play', 'feeding', 'rest', 'training', 'lost_pet'];
      for (var activityType of activityTypes) {
        var payload = {
          petId: 'pet123',
          activity: activityType
        };
        var mockResponse = {
          data: {
            _id: `activity-${activityType}`,
            petId: 'pet123',
            activity: activityType,
            lat: 40.7128,
            lng: -74.0060,
            createdAt: '2024-01-01T14:00:00Z',
            updatedAt: '2024-01-01T14:00:00Z',
            active: true
          }
        };
        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: _globals.jest.fn().mockResolvedValue(mockResponse)
        });
        var result = yield (0, _petActivityService.startPetActivity)(payload);
        (0, _globals.expect)(result.activity).toBe(activityType);
        (0, _globals.expect)(mockSocketClient.emit).toHaveBeenCalledWith('activity:start', _globals.expect.objectContaining({
          activity: activityType
        }));
      }
    }));
    (0, _globals.it)('should handle API errors during activity start', (0, _asyncToGenerator2.default)(function* () {
      var payload = {
        petId: 'pet123',
        activity: 'walk'
      };
      mockFetch.mockResolvedValue({
        ok: false,
        status: 400,
        text: _globals.jest.fn().mockResolvedValue('Invalid pet ID')
      });
      yield (0, _globals.expect)((0, _petActivityService.startPetActivity)(payload)).rejects.toThrow('startPetActivity failed: 400 Invalid pet ID');
      (0, _globals.expect)(mockSocketClient.emit).not.toHaveBeenCalled();
      (0, _globals.expect)(mockLogger.info).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      var payload = {
        petId: 'pet123',
        activity: 'walk'
      };
      mockFetch.mockRejectedValue(new Error('Network error'));
      yield (0, _globals.expect)((0, _petActivityService.startPetActivity)(payload)).rejects.toThrow('Network error');
    }));
    (0, _globals.it)('should handle malformed API responses', (0, _asyncToGenerator2.default)(function* () {
      var payload = {
        petId: 'pet123',
        activity: 'walk'
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({})
      });
      var result = yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(result).toBeUndefined();
    }));
    (0, _globals.it)('should handle extreme location coordinates', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.getCurrentPositionAsync.mockResolvedValue({
        coords: {
          latitude: 89.9999,
          longitude: 179.9999,
          altitude: 8848,
          accuracy: 1,
          altitudeAccuracy: 0.5,
          heading: 359,
          speed: 0
        },
        timestamp: Date.now()
      });
      var payload = {
        petId: 'pet123',
        activity: 'exploring'
      };
      var mockResponse = {
        data: {
          _id: 'extreme-activity',
          petId: 'pet123',
          activity: 'exploring',
          lat: 89.9999,
          lng: 179.9999,
          createdAt: '2024-01-01T15:00:00Z',
          updatedAt: '2024-01-01T15:00:00Z',
          active: true
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(result.lat).toBe(89.9999);
      (0, _globals.expect)(result.lng).toBe(179.9999);
    }));
  });
  (0, _globals.describe)('endPetActivity', function () {
    var mockActivityRecord = {
      _id: 'activity123',
      petId: 'pet456',
      activity: 'walk',
      lat: 40.7128,
      lng: -74.0060,
      createdAt: '2024-01-01T12:00:00Z',
      updatedAt: '2024-01-01T13:00:00Z',
      active: false
    };
    (0, _globals.it)('should end a pet activity successfully', (0, _asyncToGenerator2.default)(function* () {
      var activityId = 'activity123';
      var mockResponse = {
        data: mockActivityRecord
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.endPetActivity)(activityId);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/pets/activity/end', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          activityId: activityId
        })
      });
      (0, _globals.expect)(mockSocketClient.emit).toHaveBeenCalledWith('activity:end', {
        _id: 'activity123'
      });
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Activity ended', {
        record: mockActivityRecord
      });
      (0, _globals.expect)(result).toEqual(mockActivityRecord);
      (0, _globals.expect)(result.active).toBe(false);
    }));
    (0, _globals.it)('should handle API errors during activity end', (0, _asyncToGenerator2.default)(function* () {
      var activityId = 'invalid-activity';
      mockFetch.mockResolvedValue({
        ok: false,
        status: 404,
        text: _globals.jest.fn().mockResolvedValue('Activity not found')
      });
      yield (0, _globals.expect)((0, _petActivityService.endPetActivity)(activityId)).rejects.toThrow('endPetActivity failed: 404 Activity not found');
      (0, _globals.expect)(mockSocketClient.emit).not.toHaveBeenCalled();
      (0, _globals.expect)(mockLogger.info).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle activity already ended', (0, _asyncToGenerator2.default)(function* () {
      var activityId = 'ended-activity';
      mockFetch.mockResolvedValue({
        ok: false,
        status: 400,
        text: _globals.jest.fn().mockResolvedValue('Activity already ended')
      });
      yield (0, _globals.expect)((0, _petActivityService.endPetActivity)(activityId)).rejects.toThrow('endPetActivity failed: 400 Activity already ended');
    }));
    (0, _globals.it)('should handle network errors during end', (0, _asyncToGenerator2.default)(function* () {
      var activityId = 'network-error-activity';
      mockFetch.mockRejectedValue(new Error('Network timeout'));
      yield (0, _globals.expect)((0, _petActivityService.endPetActivity)(activityId)).rejects.toThrow('Network timeout');
    }));
  });
  (0, _globals.describe)('getActivityHistory', function () {
    var mockActivityHistory = [{
      _id: 'activity1',
      petId: 'pet123',
      activity: 'walk',
      message: 'Morning walk',
      lat: 40.7128,
      lng: -74.0060,
      radius: 500,
      createdAt: '2024-01-01T08:00:00Z',
      updatedAt: '2024-01-01T09:00:00Z',
      active: false
    }, {
      _id: 'activity2',
      petId: 'pet123',
      activity: 'play',
      message: 'Park playtime',
      lat: 40.7130,
      lng: -74.0050,
      radius: 300,
      createdAt: '2024-01-01T14:00:00Z',
      updatedAt: '2024-01-01T15:30:00Z',
      active: false
    }, {
      _id: 'activity3',
      petId: 'pet123',
      activity: 'feeding',
      lat: 40.7125,
      lng: -74.0065,
      createdAt: '2024-01-01T18:00:00Z',
      updatedAt: '2024-01-01T18:05:00Z',
      active: false
    }];
    (0, _globals.it)('should get activity history for a pet', (0, _asyncToGenerator2.default)(function* () {
      var petId = 'pet123';
      var mockResponse = {
        data: mockActivityHistory
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.getActivityHistory)(petId);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(`http://localhost:3001/api/pets/activity/history?petId=${encodeURIComponent(petId)}`);
      (0, _globals.expect)(result).toEqual(mockActivityHistory);
      (0, _globals.expect)(result).toHaveLength(3);
    }));
    (0, _globals.it)('should handle empty activity history', (0, _asyncToGenerator2.default)(function* () {
      var petId = 'pet-with-no-history';
      var mockResponse = {
        data: []
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.getActivityHistory)(petId);
      (0, _globals.expect)(result).toEqual([]);
      (0, _globals.expect)(result).toHaveLength(0);
    }));
    (0, _globals.it)('should handle pets with many activities', (0, _asyncToGenerator2.default)(function* () {
      var petId = 'active-pet';
      var manyActivities = Array.from({
        length: 100
      }, function (_, i) {
        return {
          _id: `activity${i}`,
          petId: petId,
          activity: 'walk',
          lat: 40.7128 + i * 0.001,
          lng: -74.0060 + i * 0.001,
          createdAt: new Date(Date.now() - i * 3600000).toISOString(),
          updatedAt: new Date(Date.now() - i * 3600000 + 1800000).toISOString(),
          active: false
        };
      });
      var mockResponse = {
        data: manyActivities
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.getActivityHistory)(petId);
      (0, _globals.expect)(result).toHaveLength(100);
      (0, _globals.expect)(result[0]._id).toBe('activity0');
      (0, _globals.expect)(result[99]._id).toBe('activity99');
    }));
    (0, _globals.it)('should handle API errors when fetching history', (0, _asyncToGenerator2.default)(function* () {
      var petId = 'invalid-pet';
      mockFetch.mockResolvedValue({
        ok: false,
        status: 404,
        text: _globals.jest.fn().mockResolvedValue('Pet not found')
      });
      yield (0, _globals.expect)((0, _petActivityService.getActivityHistory)(petId)).rejects.toThrow('getActivityHistory failed: 404 Pet not found');
    }));
    (0, _globals.it)('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      var petId = 'network-error-pet';
      mockFetch.mockRejectedValue(new Error('Connection failed'));
      yield (0, _globals.expect)((0, _petActivityService.getActivityHistory)(petId)).rejects.toThrow('Connection failed');
    }));
    (0, _globals.it)('should handle malformed API responses', (0, _asyncToGenerator2.default)(function* () {
      var petId = 'malformed-response-pet';
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({})
      });
      var result = yield (0, _petActivityService.getActivityHistory)(petId);
      (0, _globals.expect)(result).toBeUndefined();
    }));
    (0, _globals.it)('should handle special characters in pet IDs', (0, _asyncToGenerator2.default)(function* () {
      var specialPetId = 'pet@123_special.test';
      var mockResponse = {
        data: [{
          _id: 'activity1',
          petId: specialPetId,
          activity: 'walk',
          createdAt: '2024-01-01T10:00:00Z',
          updatedAt: '2024-01-01T11:00:00Z',
          active: false
        }]
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.getActivityHistory)(specialPetId);
      (0, _globals.expect)(result[0].petId).toBe(specialPetId);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(`http://localhost:3001/api/pets/activity/history?petId=${encodeURIComponent(specialPetId)}`);
    }));
  });
  (0, _globals.describe)('Socket Communication', function () {
    (0, _globals.it)('should emit socket events for activity start', (0, _asyncToGenerator2.default)(function* () {
      var payload = {
        petId: 'pet123',
        activity: 'walk',
        message: 'Socket test'
      };
      var mockResponse = {
        data: {
          _id: 'socket-activity',
          petId: 'pet123',
          activity: 'walk',
          message: 'Socket test',
          lat: 40.7128,
          lng: -74.0060,
          createdAt: '2024-01-01T16:00:00Z',
          updatedAt: '2024-01-01T16:00:00Z',
          active: true
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(mockSocketClient.emit).toHaveBeenCalledWith('activity:start', {
        petId: 'pet123',
        activity: 'walk',
        message: 'Socket test',
        shareToMap: true,
        location: {
          lat: 40.7128,
          lng: -74.0060
        },
        radius: 500,
        device: 'ios',
        _id: 'socket-activity'
      });
    }));
    (0, _globals.it)('should emit socket events for activity end', (0, _asyncToGenerator2.default)(function* () {
      var activityId = 'end-activity-123';
      var mockResponse = {
        data: {
          _id: activityId,
          petId: 'pet123',
          activity: 'walk',
          active: false
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      yield (0, _petActivityService.endPetActivity)(activityId);
      (0, _globals.expect)(mockSocketClient.emit).toHaveBeenCalledWith('activity:end', {
        _id: activityId
      });
    }));
    (0, _globals.it)('should not emit socket events on API failure', (0, _asyncToGenerator2.default)(function* () {
      var payload = {
        petId: 'pet123',
        activity: 'walk'
      };
      mockFetch.mockResolvedValue({
        ok: false,
        status: 500,
        text: _globals.jest.fn().mockResolvedValue('Server error')
      });
      yield (0, _globals.expect)((0, _petActivityService.startPetActivity)(payload)).rejects.toThrow();
      (0, _globals.expect)(mockSocketClient.emit).not.toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Platform Handling', function () {
    (0, _globals.it)('should include platform information in activity start', (0, _asyncToGenerator2.default)(function* () {
      var payload = {
        petId: 'pet123',
        activity: 'play'
      };
      var mockResponse = {
        data: {
          _id: 'platform-activity',
          petId: 'pet123',
          activity: 'play'
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
        body: _globals.expect.stringContaining('"device":"ios"')
      }));
    }));
    (0, _globals.it)('should handle Android platform', (0, _asyncToGenerator2.default)(function* () {
      _reactNative.Platform.OS = 'android';
      var payload = {
        petId: 'pet123',
        activity: 'rest'
      };
      var mockResponse = {
        data: {
          _id: 'android-activity',
          petId: 'pet123',
          activity: 'rest'
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
        body: _globals.expect.stringContaining('"device":"android"')
      }));
      _reactNative.Platform.OS = 'ios';
    }));
  });
  (0, _globals.describe)('Concurrent Operations', function () {
    (0, _globals.it)('should handle multiple concurrent activity starts', (0, _asyncToGenerator2.default)(function* () {
      var payloads = [{
        petId: 'pet1',
        activity: 'walk'
      }, {
        petId: 'pet2',
        activity: 'play'
      }, {
        petId: 'pet3',
        activity: 'feeding'
      }];
      payloads.forEach(function (_, index) {
        var mockResponse = {
          data: {
            _id: `activity${index + 1}`,
            petId: `pet${index + 1}`,
            activity: _.activity,
            lat: 40.7128,
            lng: -74.0060,
            createdAt: '2024-01-01T17:00:00Z',
            updatedAt: '2024-01-01T17:00:00Z',
            active: true
          }
        };
        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: _globals.jest.fn().mockResolvedValue(mockResponse)
        });
      });
      var results = yield Promise.all(payloads.map(function (payload) {
        return (0, _petActivityService.startPetActivity)(payload);
      }));
      (0, _globals.expect)(results).toHaveLength(3);
      results.forEach(function (result, index) {
        (0, _globals.expect)(result.petId).toBe(`pet${index + 1}`);
        (0, _globals.expect)(result.activity).toBe(payloads[index].activity);
      });
      (0, _globals.expect)(mockSocketClient.emit).toHaveBeenCalledTimes(3);
    }));
    (0, _globals.it)('should handle mixed concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      var operations = [(0, _petActivityService.startPetActivity)({
        petId: 'pet1',
        activity: 'walk'
      }), (0, _petActivityService.endPetActivity)('activity123'), (0, _petActivityService.getActivityHistory)('pet2'), (0, _petActivityService.startPetActivity)({
        petId: 'pet3',
        activity: 'play'
      })];
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({
          data: {
            _id: 'mock-activity',
            petId: 'mock-pet',
            activity: 'mock',
            active: false,
            lat: 40.7128,
            lng: -74.0060,
            createdAt: '2024-01-01T18:00:00Z',
            updatedAt: '2024-01-01T18:00:00Z'
          }
        })
      });
      var results = yield Promise.all(operations);
      (0, _globals.expect)(results).toHaveLength(4);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(4);
    }));
    (0, _globals.it)('should handle partial failures in concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      var operations = [(0, _petActivityService.startPetActivity)({
        petId: 'success-pet',
        activity: 'walk'
      }), (0, _petActivityService.startPetActivity)({
        petId: 'fail-pet',
        activity: 'play'
      }), (0, _petActivityService.getActivityHistory)('history-pet')];
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({
          data: {
            _id: 'success-activity',
            petId: 'success-pet',
            activity: 'walk'
          }
        })
      });
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 400,
        text: _globals.jest.fn().mockResolvedValue('Invalid pet')
      });
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({
          data: []
        })
      });
      var results = yield Promise.allSettled(operations);
      (0, _globals.expect)(results[0].status).toBe('fulfilled');
      (0, _globals.expect)(results[1].status).toBe('rejected');
      (0, _globals.expect)(results[2].status).toBe('fulfilled');
      (0, _globals.expect)(results[0].value.petId).toBe('success-pet');
      (0, _globals.expect)(results[1].reason.message).toContain('startPetActivity failed: 400');
    }));
  });
  (0, _globals.describe)('Edge Cases and Boundary Conditions', function () {
    (0, _globals.it)('should handle very long messages', (0, _asyncToGenerator2.default)(function* () {
      var _result$message;
      var longMessage = 'A'.repeat(2000);
      var payload = {
        petId: 'pet123',
        activity: 'walk',
        message: longMessage
      };
      var mockResponse = {
        data: {
          _id: 'long-message-activity',
          petId: 'pet123',
          activity: 'walk',
          message: longMessage
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(result.message).toBe(longMessage);
      (0, _globals.expect)((_result$message = result.message) == null ? void 0 : _result$message.length).toBe(2000);
    }));
    (0, _globals.it)('should handle zero coordinates', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.getCurrentPositionAsync.mockResolvedValue({
        coords: {
          latitude: 0,
          longitude: 0,
          altitude: 0,
          accuracy: 1,
          altitudeAccuracy: 1,
          heading: 0,
          speed: 0
        },
        timestamp: Date.now()
      });
      var payload = {
        petId: 'pet123',
        activity: 'rest'
      };
      var mockResponse = {
        data: {
          _id: 'zero-coords-activity',
          petId: 'pet123',
          activity: 'rest',
          lat: 0,
          lng: 0
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(result.lat).toBe(0);
      (0, _globals.expect)(result.lng).toBe(0);
    }));
    (0, _globals.it)('should handle very large radius values', (0, _asyncToGenerator2.default)(function* () {
      var payload = {
        petId: 'pet123',
        activity: 'exploring',
        radiusMeters: 50000
      };
      var mockResponse = {
        data: {
          _id: 'large-radius-activity',
          petId: 'pet123',
          activity: 'exploring',
          radius: 50000
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(result.radius).toBe(50000);
    }));
    (0, _globals.it)('should handle activities with special characters', (0, _asyncToGenerator2.default)(function* () {
      var specialMessage = 'Activity with émojis 🚶‍♂️🐕 and spëcial chärs! @pet_lover #walk';
      var payload = {
        petId: 'pet123',
        activity: 'walk',
        message: specialMessage
      };
      var mockResponse = {
        data: {
          _id: 'special-chars-activity',
          petId: 'pet123',
          activity: 'walk',
          message: specialMessage
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(result.message).toBe(specialMessage);
    }));
    (0, _globals.it)('should handle malformed location data', (0, _asyncToGenerator2.default)(function* () {
      mockLocation.getCurrentPositionAsync.mockResolvedValue({
        coords: {
          latitude: NaN,
          longitude: Infinity,
          altitude: -99999,
          accuracy: -1,
          altitudeAccuracy: NaN,
          heading: NaN,
          speed: -5
        },
        timestamp: Date.now()
      });
      var payload = {
        petId: 'pet123',
        activity: 'training'
      };
      var mockResponse = {
        data: {
          _id: 'invalid-location-activity',
          petId: 'pet123',
          activity: 'training',
          lat: NaN,
          lng: Infinity
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)(payload);
      (0, _globals.expect)(result.lat).toBeNaN();
      (0, _globals.expect)(result.lng).toBe(Infinity);
    }));
    (0, _globals.it)('should handle extreme activity history sizes', (0, _asyncToGenerator2.default)(function* () {
      var petId = 'history-pet';
      var hugeHistory = Array.from({
        length: 10000
      }, function (_, i) {
        return {
          _id: `activity${i}`,
          petId: petId,
          activity: 'walk',
          lat: 40.7128 + i * 0.0001,
          lng: -74.0060 + i * 0.0001,
          createdAt: new Date(Date.now() - i * 60000).toISOString(),
          updatedAt: new Date(Date.now() - i * 60000 + 1800000).toISOString(),
          active: false
        };
      });
      var mockResponse = {
        data: hugeHistory
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.getActivityHistory)(petId);
      (0, _globals.expect)(result).toHaveLength(10000);
      (0, _globals.expect)(result[0]._id).toBe('activity0');
      (0, _globals.expect)(result[9999]._id).toBe('activity9999');
    }));
    (0, _globals.it)('should handle rapid successive operations', (0, _asyncToGenerator2.default)(function* () {
      var operations = Array.from({
        length: 50
      }, function (_, i) {
        return (0, _petActivityService.startPetActivity)({
          petId: `pet${i}`,
          activity: 'walk',
          message: `Activity ${i}`
        });
      });
      operations.forEach(function (_, i) {
        var mockResponse = {
          data: {
            _id: `activity${i}`,
            petId: `pet${i}`,
            activity: 'walk',
            message: `Activity ${i}`,
            lat: 40.7128,
            lng: -74.0060
          }
        };
        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: _globals.jest.fn().mockResolvedValue(mockResponse)
        });
      });
      var results = yield Promise.all(operations);
      (0, _globals.expect)(results).toHaveLength(50);
      (0, _globals.expect)(mockSocketClient.emit).toHaveBeenCalledTimes(50);
    }));
    (0, _globals.it)('should handle memory pressure with large payloads', (0, _asyncToGenerator2.default)(function* () {
      var _result$message2;
      var hugePayload = {
        petId: 'pet123',
        activity: 'walk',
        message: 'A'.repeat(50000),
        shareToMap: true,
        radiusMeters: 1000
      };
      var mockResponse = {
        data: {
          _id: 'huge-payload-activity',
          petId: 'pet123',
          activity: 'walk',
          message: hugePayload.message
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)(hugePayload);
      (0, _globals.expect)(result.message).toBe(hugePayload.message);
      (0, _globals.expect)((_result$message2 = result.message) == null ? void 0 : _result$message2.length).toBe(50000);
    }));
  });
  (0, _globals.describe)('Type Safety and Interface Compliance', function () {
    (0, _globals.it)('should maintain type safety for ActivityRecord', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        data: {
          _id: 'typed-activity',
          petId: 'pet123',
          activity: 'walk',
          message: 'Typed message',
          lat: 40.7128,
          lng: -74.0060,
          radius: 500,
          createdAt: '2024-01-01T19:00:00Z',
          updatedAt: '2024-01-01T20:00:00Z',
          active: true
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)({
        petId: 'pet123',
        activity: 'walk',
        message: 'Typed message'
      });
      (0, _globals.expect)(typeof result._id).toBe('string');
      (0, _globals.expect)(typeof result.petId).toBe('string');
      (0, _globals.expect)(['walk', 'play', 'feeding', 'rest', 'training', 'lost_pet']).toContain(result.activity);
      (0, _globals.expect)(typeof result.lat).toBe('number');
      (0, _globals.expect)(typeof result.lng).toBe('number');
      (0, _globals.expect)(typeof result.active).toBe('boolean');
      (0, _globals.expect)(typeof result.createdAt).toBe('string');
      (0, _globals.expect)(typeof result.updatedAt).toBe('string');
    }));
    (0, _globals.it)('should handle optional fields correctly', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        data: {
          _id: 'minimal-activity',
          petId: 'pet123',
          activity: 'rest',
          lat: 40.7128,
          lng: -74.0060,
          createdAt: '2024-01-01T21:00:00Z',
          updatedAt: '2024-01-01T21:00:00Z',
          active: true
        }
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield (0, _petActivityService.startPetActivity)({
        petId: 'pet123',
        activity: 'rest'
      });
      (0, _globals.expect)(result.message).toBeUndefined();
      (0, _globals.expect)(result.radius).toBeUndefined();
    }));
    (0, _globals.it)('should enforce ActivityKind type constraints', function () {
      var validActivities = ['walk', 'play', 'feeding', 'rest', 'training', 'lost_pet'];
      validActivities.forEach(function (activity) {
        (0, _globals.expect)(['walk', 'play', 'feeding', 'rest', 'training', 'lost_pet']).toContain(activity);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,