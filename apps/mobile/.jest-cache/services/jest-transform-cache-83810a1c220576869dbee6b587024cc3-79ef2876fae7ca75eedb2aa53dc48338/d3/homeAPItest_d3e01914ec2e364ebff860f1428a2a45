a658bff3375457edfd96a9fa50ebb986
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _homeAPI = require("../homeAPI");
global.fetch = _globals.jest.fn();
var mockFetch = fetch;
(0, _globals.describe)('Home API Service', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    process.env.EXPO_PUBLIC_API_URL = 'https://api.test.com';
    process.env.API_URL = 'https://api.test.com';
  });
  (0, _globals.describe)('Happy Path - Get Home Stats', function () {
    (0, _globals.it)('should fetch home stats successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockStats = {
        totalLikes: 150,
        totalMatches: 12,
        totalSwipes: 450,
        streakDays: 5
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json = (0, _asyncToGenerator2.default)(function* () {
            return mockStats;
          });
          function json() {
            return _json.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(result).toEqual(mockStats);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.test.com/api/home/stats');
    }));
    (0, _globals.it)('should handle empty stats', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json2 = (0, _asyncToGenerator2.default)(function* () {
            return {};
          });
          function json() {
            return _json2.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(result).toEqual({});
    }));
    (0, _globals.it)('should handle numeric stats', (0, _asyncToGenerator2.default)(function* () {
      var numericStats = {
        totalLikes: 100,
        totalMatches: 5,
        totalSwipes: 300,
        streakDays: 3
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json3 = (0, _asyncToGenerator2.default)(function* () {
            return numericStats;
          });
          function json() {
            return _json3.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(result.totalLikes).toBe(100);
      (0, _globals.expect)(result.totalMatches).toBe(5);
    }));
  });
  (0, _globals.describe)('Happy Path - Get Activity Feed', function () {
    (0, _globals.it)('should fetch activity feed successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockFeed = {
        activities: [{
          id: '1',
          type: 'like',
          pet: {
            name: 'Max'
          },
          timestamp: '2024-01-01'
        }, {
          id: '2',
          type: 'match',
          pet: {
            name: 'Buddy'
          },
          timestamp: '2024-01-02'
        }],
        hasMore: true,
        nextCursor: 'cursor123'
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json4 = (0, _asyncToGenerator2.default)(function* () {
            return mockFeed;
          });
          function json() {
            return _json4.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getActivityFeed)();
      (0, _globals.expect)(result).toEqual(mockFeed);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.test.com/api/home/feed');
    }));
    (0, _globals.it)('should handle empty activity feed', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json5 = (0, _asyncToGenerator2.default)(function* () {
            return {
              activities: [],
              hasMore: false
            };
          });
          function json() {
            return _json5.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getActivityFeed)();
      (0, _globals.expect)(result.activities).toEqual([]);
      (0, _globals.expect)(result.hasMore).toBe(false);
    }));
    (0, _globals.it)('should handle feed with pagination', (0, _asyncToGenerator2.default)(function* () {
      var paginatedFeed = {
        activities: [{
          id: '1',
          type: 'like'
        }],
        hasMore: true,
        nextCursor: 'abc123'
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json6 = (0, _asyncToGenerator2.default)(function* () {
            return paginatedFeed;
          });
          function json() {
            return _json6.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getActivityFeed)();
      (0, _globals.expect)(result.hasMore).toBe(true);
      (0, _globals.expect)(result.nextCursor).toBe('abc123');
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle network errors for stats', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockRejectedValueOnce(new Error('Network error'));
      yield (0, _globals.expect)((0, _homeAPI.getHomeStats)()).rejects.toThrow();
    }));
    (0, _globals.it)('should handle network errors for feed', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockRejectedValueOnce(new Error('Network error'));
      yield (0, _globals.expect)((0, _homeAPI.getActivityFeed)()).rejects.toThrow();
    }));
    (0, _globals.it)('should handle HTTP errors for stats', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 404,
        statusText: 'Not Found'
      });
      yield (0, _globals.expect)((0, _homeAPI.getHomeStats)()).rejects.toThrow('home stats failed');
    }));
    (0, _globals.it)('should handle HTTP errors for feed', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 500,
        statusText: 'Internal Server Error'
      });
      yield (0, _globals.expect)((0, _homeAPI.getActivityFeed)()).rejects.toThrow('home feed failed');
    }));
    (0, _globals.it)('should handle JSON parse errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json7 = (0, _asyncToGenerator2.default)(function* () {
            throw new Error('JSON parse error');
          });
          function json() {
            return _json7.apply(this, arguments);
          }
          return json;
        }()
      });
      yield (0, _globals.expect)((0, _homeAPI.getHomeStats)()).rejects.toThrow('JSON parse error');
    }));
    (0, _globals.it)('should handle timeout errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockImplementation(function () {
        return new Promise(function (_, reject) {
          return setTimeout(function () {
            return reject(new Error('Timeout'));
          }, 1);
        });
      });
      yield (0, _globals.expect)((0, _homeAPI.getHomeStats)()).rejects.toThrow('Timeout');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle missing environment URL', (0, _asyncToGenerator2.default)(function* () {
      process.env.EXPO_PUBLIC_API_URL = '';
      process.env.API_URL = '';
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json8 = (0, _asyncToGenerator2.default)(function* () {
            return {
              totalLikes: 0
            };
          });
          function json() {
            return _json8.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(result).toBeDefined();
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/home/stats');
    }));
    (0, _globals.it)('should handle very large stats responses', (0, _asyncToGenerator2.default)(function* () {
      var largeStats = {
        totalLikes: Number.MAX_SAFE_INTEGER,
        totalMatches: Number.MAX_SAFE_INTEGER
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json9 = (0, _asyncToGenerator2.default)(function* () {
            return largeStats;
          });
          function json() {
            return _json9.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(result.totalLikes).toBe(Number.MAX_SAFE_INTEGER);
    }));
    (0, _globals.it)('should handle feed with many activities', (0, _asyncToGenerator2.default)(function* () {
      var manyActivities = Array.from({
        length: 1000
      }, function (_, i) {
        return {
          id: String(i),
          type: 'like',
          timestamp: new Date().toISOString()
        };
      });
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json0 = (0, _asyncToGenerator2.default)(function* () {
            return {
              activities: manyActivities,
              hasMore: false
            };
          });
          function json() {
            return _json0.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getActivityFeed)();
      (0, _globals.expect)(result.activities).toHaveLength(1000);
    }));
    (0, _globals.it)('should handle concurrent requests', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: true,
        json: function () {
          var _json1 = (0, _asyncToGenerator2.default)(function* () {
            return {
              totalLikes: Math.random()
            };
          });
          function json() {
            return _json1.apply(this, arguments);
          }
          return json;
        }()
      });
      var promises = Array.from({
        length: 10
      }, function () {
        return (0, _homeAPI.getHomeStats)();
      });
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toHaveLength(10);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(10);
    }));
    (0, _globals.it)('should handle special characters in stats', (0, _asyncToGenerator2.default)(function* () {
      var statsWithSpecialChars = {
        message: 'Hello & "world"',
        data: {
          value: '<script>alert("xss")</script>'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json10 = (0, _asyncToGenerator2.default)(function* () {
            return statsWithSpecialChars;
          });
          function json() {
            return _json10.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(result.message).toBe('Hello & "world"');
    }));
    (0, _globals.it)('should handle empty string environment URL', (0, _asyncToGenerator2.default)(function* () {
      process.env.EXPO_PUBLIC_API_URL = '';
      process.env.API_URL = '';
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json11 = (0, _asyncToGenerator2.default)(function* () {
            return {};
          });
          function json() {
            return _json11.apply(this, arguments);
          }
          return json;
        }()
      });
      yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(mockFetch).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should integrate with fetch API', (0, _asyncToGenerator2.default)(function* () {
      var stats = {
        totalLikes: 100
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json12 = (0, _asyncToGenerator2.default)(function* () {
            return stats;
          });
          function json() {
            return _json12.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('/api/home/stats'));
      (0, _globals.expect)(result).toEqual(stats);
    }));
    (0, _globals.it)('should handle multiple sequential calls', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json13 = (0, _asyncToGenerator2.default)(function* () {
            return {
              totalLikes: 100
            };
          });
          function json() {
            return _json13.apply(this, arguments);
          }
          return json;
        }()
      });
      yield (0, _homeAPI.getHomeStats)();
      yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(2);
    }));
    (0, _globals.it)('should integrate stats and feed together', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json14 = (0, _asyncToGenerator2.default)(function* () {
            return {
              totalLikes: 100
            };
          });
          function json() {
            return _json14.apply(this, arguments);
          }
          return json;
        }()
      }).mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json15 = (0, _asyncToGenerator2.default)(function* () {
            return {
              activities: []
            };
          });
          function json() {
            return _json15.apply(this, arguments);
          }
          return json;
        }()
      });
      var stats = yield (0, _homeAPI.getHomeStats)();
      var feed = yield (0, _homeAPI.getActivityFeed)();
      (0, _globals.expect)(stats.totalLikes).toBe(100);
      (0, _globals.expect)(feed.activities).toEqual([]);
    }));
  });
  (0, _globals.describe)('Type Safety', function () {
    (0, _globals.it)('should maintain type safety for stats response', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json16 = (0, _asyncToGenerator2.default)(function* () {
            return {
              totalLikes: 100,
              totalMatches: 5
            };
          });
          function json() {
            return _json16.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(typeof result.totalLikes).toBe('number');
      (0, _globals.expect)(typeof result.totalMatches).toBe('number');
    }));
    (0, _globals.it)('should maintain type safety for feed response', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json17 = (0, _asyncToGenerator2.default)(function* () {
            return {
              activities: [{
                id: '1',
                type: 'like'
              }],
              hasMore: false
            };
          });
          function json() {
            return _json17.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getActivityFeed)();
      (0, _globals.expect)(Array.isArray(result.activities)).toBe(true);
      (0, _globals.expect)(typeof result.hasMore).toBe('boolean');
    }));
    (0, _globals.it)('should handle unknown properties gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: function () {
          var _json18 = (0, _asyncToGenerator2.default)(function* () {
            return {
              totalLikes: 100,
              unknownProperty: 'test'
            };
          });
          function json() {
            return _json18.apply(this, arguments);
          }
          return json;
        }()
      });
      var result = yield (0, _homeAPI.getHomeStats)();
      (0, _globals.expect)(result).toHaveProperty('totalLikes');
      (0, _globals.expect)(result).toHaveProperty('unknownProperty');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,