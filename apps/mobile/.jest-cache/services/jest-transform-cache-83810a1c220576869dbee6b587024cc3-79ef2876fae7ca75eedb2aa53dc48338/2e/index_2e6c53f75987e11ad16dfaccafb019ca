e711458a4bbd293e1976c8442a0a2e19
"use strict";
var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __exportStar = void 0 && (void 0).__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateAge = calculateAge;
exports.calculateDistance = calculateDistance;
exports.calculateCompatibilityScore = calculateCompatibilityScore;
exports.formatDisplayName = formatDisplayName;
exports.formatPetAge = formatPetAge;
exports.isValidEmail = isValidEmail;
exports.generateId = generateId;
exports.formatRelativeTime = formatRelativeTime;
__exportStar(require("./logger"), exports);
function calculateAge(dateOfBirth) {
  var birth = new Date(dateOfBirth);
  var today = new Date();
  var age = today.getFullYear() - birth.getFullYear();
  var monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birth.getDate()) {
    return age - 1;
  }
  return age;
}
function calculateDistance(lat1, lon1, lat2, lon2) {
  var R = 6371;
  var dLat = deg2rad(lat2 - lat1);
  var dLon = deg2rad(lon2 - lon1);
  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  var distance = R * c;
  return Math.round(distance * 100) / 100;
}
function deg2rad(deg) {
  return deg * (Math.PI / 180);
}
function calculateCompatibilityScore(pet1, pet2) {
  var score = 0;
  if (pet1.species === pet2.species) {
    score += 40;
  }
  var sizeCompatibility = getSizeCompatibility(pet1.size, pet2.size);
  score += sizeCompatibility;
  var ageDiff = Math.abs(pet1.age - pet2.age);
  if (ageDiff <= 1) score += 20;else if (ageDiff <= 2) score += 15;else if (ageDiff <= 3) score += 10;else if (ageDiff <= 5) score += 5;
  var personalityOverlap = pet1.personalityTags.filter(function (tag) {
    return pet2.personalityTags.includes(tag);
  }).length;
  score += Math.min(personalityOverlap * 5, 20);
  return Math.min(score, 100);
}
function getSizeCompatibility(size1, size2) {
  var sizeOrder = ['small', 'medium', 'large', 'extra-large'];
  var index1 = sizeOrder.indexOf(size1.toLowerCase());
  var index2 = sizeOrder.indexOf(size2.toLowerCase());
  if (index1 === -1 || index2 === -1) return 10;
  var diff = Math.abs(index1 - index2);
  if (diff === 0) return 20;
  if (diff === 1) return 15;
  if (diff === 2) return 10;
  return 5;
}
function formatDisplayName(user) {
  return `${user.firstName} ${user.lastName.charAt(0)}.`;
}
function formatPetAge(age) {
  if (age < 1) return 'Puppy/Kitten';
  if (age === 1) return '1 year old';
  return `${String(age)} years old`;
}
function isValidEmail(email) {
  var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}
function generateId() {
  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  var result = '';
  for (var i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}
function formatRelativeTime(date) {
  var now = new Date();
  var messageDate = new Date(date);
  var diffInSeconds = Math.floor((now.getTime() - messageDate.getTime()) / 1000);
  if (diffInSeconds < 60) return 'Just now';
  if (diffInSeconds < 3600) return `${String(Math.floor(diffInSeconds / 60))}m ago`;
  if (diffInSeconds < 86400) return `${String(Math.floor(diffInSeconds / 3600))}h ago`;
  if (diffInSeconds < 604800) return `${String(Math.floor(diffInSeconds / 86400))}d ago`;
  return messageDate.toLocaleDateString();
}
__exportStar(require("./contentFilter"), exports);
__exportStar(require("./storage"), exports);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,