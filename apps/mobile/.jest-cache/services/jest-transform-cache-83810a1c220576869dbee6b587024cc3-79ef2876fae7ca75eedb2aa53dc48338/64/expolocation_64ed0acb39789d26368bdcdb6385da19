557b5718f266008c5e3253b3ee17d966
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.watchPositionAsync = exports.requestForegroundPermissionsAsync = exports.getForegroundPermissionsAsync = exports.getCurrentPositionAsync = exports.default = exports.GeofencingRegionState = exports.GeofencingEventType = exports.Accuracy = void 0;
var Accuracy = exports.Accuracy = {
  Lowest: 1,
  Low: 2,
  Balanced: 3,
  High: 4,
  Highest: 5,
  BestForNavigation: 6
};
var getCurrentPositionAsync = exports.getCurrentPositionAsync = jest.fn().mockResolvedValue({
  coords: {
    latitude: 40.7128,
    longitude: -74.0060,
    altitude: null,
    accuracy: 5,
    altitudeAccuracy: null,
    heading: null,
    speed: null
  },
  timestamp: Date.now()
});
var requestForegroundPermissionsAsync = exports.requestForegroundPermissionsAsync = jest.fn().mockResolvedValue({
  status: 'granted',
  granted: true,
  canAskAgain: true
});
var getForegroundPermissionsAsync = exports.getForegroundPermissionsAsync = jest.fn().mockResolvedValue({
  status: 'granted',
  granted: true,
  canAskAgain: true
});
var watchPositionAsync = exports.watchPositionAsync = jest.fn().mockReturnValue({
  remove: jest.fn()
});
var GeofencingEventType = exports.GeofencingEventType = {
  Enter: 'enter',
  Exit: 'exit'
};
var GeofencingRegionState = exports.GeofencingRegionState = {
  Unknown: 'unknown',
  Inside: 'inside',
  Outside: 'outside'
};
var Location = {
  Accuracy: Accuracy,
  getCurrentPositionAsync: getCurrentPositionAsync,
  requestForegroundPermissionsAsync: requestForegroundPermissionsAsync,
  getForegroundPermissionsAsync: getForegroundPermissionsAsync,
  watchPositionAsync: watchPositionAsync,
  GeofencingEventType: GeofencingEventType,
  GeofencingRegionState: GeofencingRegionState
};
var _default = exports.default = Location;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBY2N1cmFjeSIsImV4cG9ydHMiLCJMb3dlc3QiLCJMb3ciLCJCYWxhbmNlZCIsIkhpZ2giLCJIaWdoZXN0IiwiQmVzdEZvck5hdmlnYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb25Bc3luYyIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiY29vcmRzIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJhbHRpdHVkZSIsImFjY3VyYWN5IiwiYWx0aXR1ZGVBY2N1cmFjeSIsImhlYWRpbmciLCJzcGVlZCIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJyZXF1ZXN0Rm9yZWdyb3VuZFBlcm1pc3Npb25zQXN5bmMiLCJzdGF0dXMiLCJncmFudGVkIiwiY2FuQXNrQWdhaW4iLCJnZXRGb3JlZ3JvdW5kUGVybWlzc2lvbnNBc3luYyIsIndhdGNoUG9zaXRpb25Bc3luYyIsIm1vY2tSZXR1cm5WYWx1ZSIsInJlbW92ZSIsIkdlb2ZlbmNpbmdFdmVudFR5cGUiLCJFbnRlciIsIkV4aXQiLCJHZW9mZW5jaW5nUmVnaW9uU3RhdGUiLCJVbmtub3duIiwiSW5zaWRlIiwiT3V0c2lkZSIsIkxvY2F0aW9uIiwiX2RlZmF1bHQiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiZXhwby1sb2NhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2NrIGZvciBleHBvLWxvY2F0aW9uXG5jb25zdCBBY2N1cmFjeSA9IHtcbiAgTG93ZXN0OiAxLFxuICBMb3c6IDIsXG4gIEJhbGFuY2VkOiAzLFxuICBIaWdoOiA0LFxuICBIaWdoZXN0OiA1LFxuICBCZXN0Rm9yTmF2aWdhdGlvbjogNixcbn07XG5cbmNvbnN0IGdldEN1cnJlbnRQb3NpdGlvbkFzeW5jID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgY29vcmRzOiB7XG4gICAgbGF0aXR1ZGU6IDQwLjcxMjgsXG4gICAgbG9uZ2l0dWRlOiAtNzQuMDA2MCxcbiAgICBhbHRpdHVkZTogbnVsbCxcbiAgICBhY2N1cmFjeTogNSxcbiAgICBhbHRpdHVkZUFjY3VyYWN5OiBudWxsLFxuICAgIGhlYWRpbmc6IG51bGwsXG4gICAgc3BlZWQ6IG51bGwsXG4gIH0sXG4gIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbn0pO1xuXG5jb25zdCByZXF1ZXN0Rm9yZWdyb3VuZFBlcm1pc3Npb25zQXN5bmMgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICBzdGF0dXM6ICdncmFudGVkJyxcbiAgZ3JhbnRlZDogdHJ1ZSxcbiAgY2FuQXNrQWdhaW46IHRydWUsXG59KTtcblxuY29uc3QgZ2V0Rm9yZWdyb3VuZFBlcm1pc3Npb25zQXN5bmMgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICBzdGF0dXM6ICdncmFudGVkJyxcbiAgZ3JhbnRlZDogdHJ1ZSxcbiAgY2FuQXNrQWdhaW46IHRydWUsXG59KTtcblxuY29uc3Qgd2F0Y2hQb3NpdGlvbkFzeW5jID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gIHJlbW92ZTogamVzdC5mbigpLFxufSk7XG5cbmNvbnN0IEdlb2ZlbmNpbmdFdmVudFR5cGUgPSB7XG4gIEVudGVyOiAnZW50ZXInLFxuICBFeGl0OiAnZXhpdCcsXG59O1xuXG5jb25zdCBHZW9mZW5jaW5nUmVnaW9uU3RhdGUgPSB7XG4gIFVua25vd246ICd1bmtub3duJyxcbiAgSW5zaWRlOiAnaW5zaWRlJyxcbiAgT3V0c2lkZTogJ291dHNpZGUnLFxufTtcblxuLy8gRXhwb3J0IGJvdGggYXMgZGVmYXVsdCBhbmQgYXMgbmFtZWQgZXhwb3J0c1xuY29uc3QgTG9jYXRpb24gPSB7XG4gIEFjY3VyYWN5LFxuICBnZXRDdXJyZW50UG9zaXRpb25Bc3luYyxcbiAgcmVxdWVzdEZvcmVncm91bmRQZXJtaXNzaW9uc0FzeW5jLFxuICBnZXRGb3JlZ3JvdW5kUGVybWlzc2lvbnNBc3luYyxcbiAgd2F0Y2hQb3NpdGlvbkFzeW5jLFxuICBHZW9mZW5jaW5nRXZlbnRUeXBlLFxuICBHZW9mZW5jaW5nUmVnaW9uU3RhdGUsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2NhdGlvbjtcblxuLy8gQWxzbyBleHBvcnQgYXMgbmFtZWQgZXhwb3J0cyBmb3IgbmFtZXNwYWNlIGltcG9ydHNcbmV4cG9ydCB7XG4gIEFjY3VyYWN5LFxuICBnZXRDdXJyZW50UG9zaXRpb25Bc3luYyxcbiAgcmVxdWVzdEZvcmVncm91bmRQZXJtaXNzaW9uc0FzeW5jLFxuICBnZXRGb3JlZ3JvdW5kUGVybWlzc2lvbnNBc3luYyxcbiAgd2F0Y2hQb3NpdGlvbkFzeW5jLFxuICBHZW9mZW5jaW5nRXZlbnRUeXBlLFxuICBHZW9mZW5jaW5nUmVnaW9uU3RhdGUsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFNQSxRQUFRLEdBQUFDLE9BQUEsQ0FBQUQsUUFBQSxHQUFHO0VBQ2ZFLE1BQU0sRUFBRSxDQUFDO0VBQ1RDLEdBQUcsRUFBRSxDQUFDO0VBQ05DLFFBQVEsRUFBRSxDQUFDO0VBQ1hDLElBQUksRUFBRSxDQUFDO0VBQ1BDLE9BQU8sRUFBRSxDQUFDO0VBQ1ZDLGlCQUFpQixFQUFFO0FBQ3JCLENBQUM7QUFFRCxJQUFNQyx1QkFBdUIsR0FBQVAsT0FBQSxDQUFBTyx1QkFBQSxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDO0VBQzFEQyxNQUFNLEVBQUU7SUFDTkMsUUFBUSxFQUFFLE9BQU87SUFDakJDLFNBQVMsRUFBRSxDQUFDLE9BQU87SUFDbkJDLFFBQVEsRUFBRSxJQUFJO0lBQ2RDLFFBQVEsRUFBRSxDQUFDO0lBQ1hDLGdCQUFnQixFQUFFLElBQUk7SUFDdEJDLE9BQU8sRUFBRSxJQUFJO0lBQ2JDLEtBQUssRUFBRTtFQUNULENBQUM7RUFDREMsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBQztBQUN0QixDQUFDLENBQUM7QUFFRixJQUFNQyxpQ0FBaUMsR0FBQXRCLE9BQUEsQ0FBQXNCLGlDQUFBLEdBQUdkLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUM7RUFDcEVhLE1BQU0sRUFBRSxTQUFTO0VBQ2pCQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxXQUFXLEVBQUU7QUFDZixDQUFDLENBQUM7QUFFRixJQUFNQyw2QkFBNkIsR0FBQTFCLE9BQUEsQ0FBQTBCLDZCQUFBLEdBQUdsQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDO0VBQ2hFYSxNQUFNLEVBQUUsU0FBUztFQUNqQkMsT0FBTyxFQUFFLElBQUk7RUFDYkMsV0FBVyxFQUFFO0FBQ2YsQ0FBQyxDQUFDO0FBRUYsSUFBTUUsa0JBQWtCLEdBQUEzQixPQUFBLENBQUEyQixrQkFBQSxHQUFHbkIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDbUIsZUFBZSxDQUFDO0VBQ25EQyxNQUFNLEVBQUVyQixJQUFJLENBQUNDLEVBQUUsQ0FBQztBQUNsQixDQUFDLENBQUM7QUFFRixJQUFNcUIsbUJBQW1CLEdBQUE5QixPQUFBLENBQUE4QixtQkFBQSxHQUFHO0VBQzFCQyxLQUFLLEVBQUUsT0FBTztFQUNkQyxJQUFJLEVBQUU7QUFDUixDQUFDO0FBRUQsSUFBTUMscUJBQXFCLEdBQUFqQyxPQUFBLENBQUFpQyxxQkFBQSxHQUFHO0VBQzVCQyxPQUFPLEVBQUUsU0FBUztFQUNsQkMsTUFBTSxFQUFFLFFBQVE7RUFDaEJDLE9BQU8sRUFBRTtBQUNYLENBQUM7QUFHRCxJQUFNQyxRQUFRLEdBQUc7RUFDZnRDLFFBQVEsRUFBUkEsUUFBUTtFQUNSUSx1QkFBdUIsRUFBdkJBLHVCQUF1QjtFQUN2QmUsaUNBQWlDLEVBQWpDQSxpQ0FBaUM7RUFDakNJLDZCQUE2QixFQUE3QkEsNkJBQTZCO0VBQzdCQyxrQkFBa0IsRUFBbEJBLGtCQUFrQjtFQUNsQkcsbUJBQW1CLEVBQW5CQSxtQkFBbUI7RUFDbkJHLHFCQUFxQixFQUFyQkE7QUFDRixDQUFDO0FBQUMsSUFBQUssUUFBQSxHQUFBdEMsT0FBQSxDQUFBdUMsT0FBQSxHQUVhRixRQUFRIiwiaWdub3JlTGlzdCI6W119