5630f2b3f2df5dd1d0da2876b06d955e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.performAdminUserAction = exports.invalidateAdminUsersCache = exports.fetchAdminUsers = exports.default = exports.adminUsersService = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _core = require("@pawfectmatch/core");
var _adminAPI = require("./adminAPI");
var CACHE_TTL_MS = 30000;
var cache = new Map();
var createCacheKey = function createCacheKey() {
  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var normalized = {};
  if (query.page !== undefined) normalized["page"] = query.page.toString();
  if (query.limit !== undefined) normalized["limit"] = query.limit.toString();
  if (query.search !== undefined && query.search !== "") normalized["search"] = query.search.toLowerCase();
  if (query.status !== undefined && query.status !== "all") normalized["status"] = query.status;
  if (query.role !== undefined && query.role !== "") normalized["role"] = query.role;
  if (query.verified !== undefined) normalized["verified"] = query.verified ? "true" : "false";
  return JSON.stringify(normalized);
};
var mapUser = function mapUser(user) {
  var _user$isVerified, _user$petsCount, _user$matchesCount, _user$messagesCount;
  return {
    id: typeof user["_id"] === "string" ? user["_id"] : "",
    firstName: typeof user["firstName"] === "string" ? user["firstName"] : "Unknown",
    lastName: typeof user["lastName"] === "string" ? user["lastName"] : "User",
    email: typeof user["email"] === "string" ? user["email"] : "unknown@example.com",
    role: typeof user["role"] === "string" ? user["role"] : "user",
    status: ["active", "suspended", "banned", "pending"].includes(user["status"]) ? user["status"] : "pending",
    verified: Boolean((_user$isVerified = user["isVerified"]) != null ? _user$isVerified : user["verified"]),
    createdAt: typeof user["createdAt"] === "string" ? user["createdAt"] : new Date().toISOString(),
    lastLoginAt: typeof user["lastLoginAt"] === "string" ? user["lastLoginAt"] : undefined,
    petsCount: Array.isArray(user["pets"]) ? user["pets"].length : Number((_user$petsCount = user["petsCount"]) != null ? _user$petsCount : 0),
    matchesCount: Number((_user$matchesCount = user["matchesCount"]) != null ? _user$matchesCount : 0),
    messagesCount: Number((_user$messagesCount = user["messagesCount"]) != null ? _user$messagesCount : 0)
  };
};
var mapResponse = function mapResponse(response) {
  var _paginationData$page, _paginationData$limit, _paginationData$total, _paginationData$pages;
  var data = response["data"];
  var users = Array.isArray(data == null ? void 0 : data["users"]) ? data["users"].map(mapUser) : [];
  var pagination = data == null ? void 0 : data["pagination"];
  var paginationData = pagination != null ? pagination : {};
  return {
    users: users,
    pagination: {
      page: Number((_paginationData$page = paginationData["page"]) != null ? _paginationData$page : 1),
      limit: Number((_paginationData$limit = paginationData["limit"]) != null ? _paginationData$limit : users.length),
      total: Number((_paginationData$total = paginationData["total"]) != null ? _paginationData$total : users.length),
      pages: Number((_paginationData$pages = paginationData["pages"]) != null ? _paginationData$pages : 1)
    }
  };
};
var isCacheValid = function isCacheValid(entry) {
  if (entry === undefined) return false;
  return Date.now() - entry.timestamp < CACHE_TTL_MS;
};
var invalidateAdminUsersCache = exports.invalidateAdminUsersCache = function invalidateAdminUsersCache() {
  cache.clear();
};
var fetchAdminUsers = exports.fetchAdminUsers = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* () {
    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var cacheKey = createCacheKey(query);
    var cached = cache.get(cacheKey);
    if (isCacheValid(cached) && cached !== undefined) {
      return cached.data;
    }
    try {
      var params = {};
      if (query.page !== undefined) params.page = query.page;
      if (query.limit !== undefined) params.limit = query.limit;
      if (query.search !== undefined && query.search !== "") params.search = query.search;
      if (query.status !== undefined && query.status !== "all") params.status = query.status;
      if (query.role !== undefined && query.role !== "") params.role = query.role;
      if (query.verified !== undefined) params.verified = query.verified ? "true" : "false";
      var response = yield _adminAPI._adminAPI.getUsers(params);
      var mapped = mapResponse(response);
      cache.set(cacheKey, {
        timestamp: Date.now(),
        data: mapped
      });
      return mapped;
    } catch (error) {
      cache.delete(cacheKey);
      var err = error instanceof Error ? error : new Error("Failed to fetch admin users");
      _core.logger.error("Failed to fetch admin users", {
        error: err
      });
      throw err;
    }
  });
  return function fetchAdminUsers() {
    return _ref.apply(this, arguments);
  };
}();
var getDefaultReason = function getDefaultReason(action) {
  switch (action) {
    case "suspend":
      return "User suspended via mobile admin controls";
    case "activate":
      return "User reactivated via mobile admin controls";
    case "ban":
      return "User banned via mobile admin controls";
    case "unban":
      return "User reinstated via mobile admin controls";
  }
};
var performAdminUserAction = exports.performAdminUserAction = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (userId, action, options) {
    var _options$reason;
    var payloadReason = (_options$reason = options == null ? void 0 : options.reason) != null ? _options$reason : getDefaultReason(action);
    try {
      if (action === "suspend") {
        yield _adminAPI._adminAPI.suspendUser(userId, payloadReason, options == null ? void 0 : options.durationDays);
      } else if (action === "activate" || action === "unban") {
        yield _adminAPI._adminAPI.activateUser(userId, payloadReason);
      } else {
        yield _adminAPI._adminAPI.banUser(userId, payloadReason);
      }
      invalidateAdminUsersCache();
    } catch (error) {
      var err = error instanceof Error ? error : new Error(`Failed to ${action} user`);
      _core.logger.error("Admin user action failed", {
        action: action,
        userId: userId,
        error: err
      });
      throw err;
    }
  });
  return function performAdminUserAction(_x, _x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();
var adminUsersService = exports.adminUsersService = {
  fetchAdminUsers: fetchAdminUsers,
  performAdminUserAction: performAdminUserAction,
  invalidate: invalidateAdminUsersCache
};
var _default = exports.default = adminUsersService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,