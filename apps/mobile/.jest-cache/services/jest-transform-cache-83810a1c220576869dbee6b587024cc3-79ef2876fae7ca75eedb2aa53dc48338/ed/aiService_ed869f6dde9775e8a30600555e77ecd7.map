{"version":3,"names":["generateBio","_x","_generateBio","apply","arguments","_asyncToGenerator2","default","params","cov_2emmuz67ty","f","s","b","petName","trim","length","Error","keywords","some","keyword","_ref","Promise","resolve","then","_interopRequireWildcard","require","request","response","method","body","bio","analyzePhoto","_x2","_analyzePhoto","url","_ref2","computeCompatibility","_x3","_x4","_computeCompatibility","petA","petB","_ref3","a"],"sources":["aiService.ts"],"sourcesContent":["import { api } from './api';\nimport type { Pet } from '@pawfectmatch/core';\n\nexport interface BioGenerationParams {\n  petName: string;\n  keywords: string[];\n  tone?: 'playful' | 'professional' | 'casual' | 'romantic' | 'funny';\n  length?: 'short' | 'medium' | 'long';\n  petType?: string;\n  age?: number;\n  breed?: string;\n}\n\nexport interface BioGenerationResult {\n  bio: string;\n  keywords: string[];\n  sentiment: { score: number; label: string };\n  matchScore: number;\n}\n\nexport interface PhotoAnalysisResult {\n  labels: string[];\n  lighting: number;\n  sharpness: number;\n  score: number;\n}\n\nexport interface CompatibilityResult {\n  score: number;\n  breakdown: {\n    breed: number;\n    size: number;\n    energy: number;\n    age: number;\n    traits: number;\n  };\n}\n\nexport interface PetCompatibilityData {\n  id: string;\n  name: string;\n  breed: string;\n  age: number;\n  size: string;\n  species: string;\n  gender: string;\n  personality?: string[];\n  energyLevel?: number;\n}\n\nexport async function generateBio(params: BioGenerationParams): Promise<string> {\n  // Validate required parameters\n  if (!params.petName || params.petName.trim().length === 0) {\n    throw new Error('Pet name is required and cannot be empty');\n  }\n  \n  if (!params.keywords || params.keywords.length === 0) {\n    throw new Error('At least one keyword is required');\n  }\n  \n  if (params.keywords.some(keyword => !keyword || keyword.trim().length === 0)) {\n    throw new Error('All keywords must be non-empty strings');\n  }\n  \n  const { request } = await import('./api');\n  const response = await request<BioGenerationResult>('/ai/generate-bio', {\n    method: 'POST',\n    body: params,\n  });\n  return response.bio;\n}\n\nexport async function analyzePhoto(url: string): Promise<PhotoAnalysisResult> {\n  const { request } = await import('./api');\n  const response = await request('/ai/analyze-photo', {\n    method: 'POST',\n    body: { url },\n  });\n  return response as PhotoAnalysisResult;\n}\n\nexport async function computeCompatibility(\n  petA: Pet | PetCompatibilityData,\n  petB: Pet | PetCompatibilityData,\n): Promise<CompatibilityResult> {\n  const { request } = await import('./api');\n  const response = await request<CompatibilityResult>('/ai/compatibility', {\n    method: 'POST',\n    body: { a: petA, b: petB },\n  });\n  return response;\n}\n"],"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","ignoreList":[]}