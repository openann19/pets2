3f7b1d1c0d32ed574db48764ead391ae
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.analyzePhoto = analyzePhoto;
exports.computeCompatibility = computeCompatibility;
exports.generateBio = generateBio;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function cov_2emmuz67ty() {
  var path = "/home/ben/Downloads/pets-fresh/apps/mobile/src/services/aiService.ts";
  var hash = "42a918747f37f815f6df74b0f1217a0fa787b5a6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ben/Downloads/pets-fresh/apps/mobile/src/services/aiService.ts",
    statementMap: {
      "0": {
        start: {
          line: 53,
          column: 2
        },
        end: {
          line: 55,
          column: 3
        }
      },
      "1": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 64
        }
      },
      "2": {
        start: {
          line: 57,
          column: 2
        },
        end: {
          line: 59,
          column: 3
        }
      },
      "3": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 56
        }
      },
      "4": {
        start: {
          line: 61,
          column: 2
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "5": {
        start: {
          line: 61,
          column: 38
        },
        end: {
          line: 61,
          column: 77
        }
      },
      "6": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 62
        }
      },
      "7": {
        start: {
          line: 65,
          column: 22
        },
        end: {
          line: 65,
          column: 43
        }
      },
      "8": {
        start: {
          line: 66,
          column: 19
        },
        end: {
          line: 69,
          column: 4
        }
      },
      "9": {
        start: {
          line: 70,
          column: 2
        },
        end: {
          line: 70,
          column: 22
        }
      },
      "10": {
        start: {
          line: 74,
          column: 22
        },
        end: {
          line: 74,
          column: 43
        }
      },
      "11": {
        start: {
          line: 75,
          column: 19
        },
        end: {
          line: 78,
          column: 4
        }
      },
      "12": {
        start: {
          line: 79,
          column: 2
        },
        end: {
          line: 79,
          column: 41
        }
      },
      "13": {
        start: {
          line: 86,
          column: 22
        },
        end: {
          line: 86,
          column: 43
        }
      },
      "14": {
        start: {
          line: 87,
          column: 19
        },
        end: {
          line: 90,
          column: 4
        }
      },
      "15": {
        start: {
          line: 91,
          column: 2
        },
        end: {
          line: 91,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "generateBio",
        decl: {
          start: {
            line: 51,
            column: 22
          },
          end: {
            line: 51,
            column: 33
          }
        },
        loc: {
          start: {
            line: 51,
            column: 80
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 51
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 61,
            column: 27
          },
          end: {
            line: 61,
            column: 28
          }
        },
        loc: {
          start: {
            line: 61,
            column: 38
          },
          end: {
            line: 61,
            column: 77
          }
        },
        line: 61
      },
      "2": {
        name: "analyzePhoto",
        decl: {
          start: {
            line: 73,
            column: 22
          },
          end: {
            line: 73,
            column: 34
          }
        },
        loc: {
          start: {
            line: 73,
            column: 78
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 73
      },
      "3": {
        name: "computeCompatibility",
        decl: {
          start: {
            line: 82,
            column: 22
          },
          end: {
            line: 82,
            column: 42
          }
        },
        loc: {
          start: {
            line: 85,
            column: 32
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 85
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 53,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "1": {
        loc: {
          start: {
            line: 53,
            column: 6
          },
          end: {
            line: 53,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 6
          },
          end: {
            line: 53,
            column: 21
          }
        }, {
          start: {
            line: 53,
            column: 25
          },
          end: {
            line: 53,
            column: 59
          }
        }],
        line: 53
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 2
          },
          end: {
            line: 59,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 2
          },
          end: {
            line: 59,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 6
          },
          end: {
            line: 57,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 6
          },
          end: {
            line: 57,
            column: 22
          }
        }, {
          start: {
            line: 57,
            column: 26
          },
          end: {
            line: 57,
            column: 54
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 61,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "5": {
        loc: {
          start: {
            line: 61,
            column: 38
          },
          end: {
            line: 61,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 38
          },
          end: {
            line: 61,
            column: 46
          }
        }, {
          start: {
            line: 61,
            column: 50
          },
          end: {
            line: 61,
            column: 77
          }
        }],
        line: 61
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "42a918747f37f815f6df74b0f1217a0fa787b5a6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_2emmuz67ty = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2emmuz67ty();
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function generateBio(_x) {
  return _generateBio.apply(this, arguments);
}
function _generateBio() {
  _generateBio = (0, _asyncToGenerator2.default)(function* (params) {
    cov_2emmuz67ty().f[0]++;
    cov_2emmuz67ty().s[0]++;
    if ((cov_2emmuz67ty().b[1][0]++, !params.petName) || (cov_2emmuz67ty().b[1][1]++, params.petName.trim().length === 0)) {
      cov_2emmuz67ty().b[0][0]++;
      cov_2emmuz67ty().s[1]++;
      throw new Error('Pet name is required and cannot be empty');
    } else {
      cov_2emmuz67ty().b[0][1]++;
    }
    cov_2emmuz67ty().s[2]++;
    if ((cov_2emmuz67ty().b[3][0]++, !params.keywords) || (cov_2emmuz67ty().b[3][1]++, params.keywords.length === 0)) {
      cov_2emmuz67ty().b[2][0]++;
      cov_2emmuz67ty().s[3]++;
      throw new Error('At least one keyword is required');
    } else {
      cov_2emmuz67ty().b[2][1]++;
    }
    cov_2emmuz67ty().s[4]++;
    if (params.keywords.some(function (keyword) {
      cov_2emmuz67ty().f[1]++;
      cov_2emmuz67ty().s[5]++;
      return (cov_2emmuz67ty().b[5][0]++, !keyword) || (cov_2emmuz67ty().b[5][1]++, keyword.trim().length === 0);
    })) {
      cov_2emmuz67ty().b[4][0]++;
      cov_2emmuz67ty().s[6]++;
      throw new Error('All keywords must be non-empty strings');
    } else {
      cov_2emmuz67ty().b[4][1]++;
    }
    var _ref = (cov_2emmuz67ty().s[7]++, yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      })),
      request = _ref.request;
    var response = (cov_2emmuz67ty().s[8]++, yield request('/ai/generate-bio', {
      method: 'POST',
      body: params
    }));
    cov_2emmuz67ty().s[9]++;
    return response.bio;
  });
  return _generateBio.apply(this, arguments);
}
function analyzePhoto(_x2) {
  return _analyzePhoto.apply(this, arguments);
}
function _analyzePhoto() {
  _analyzePhoto = (0, _asyncToGenerator2.default)(function* (url) {
    cov_2emmuz67ty().f[2]++;
    var _ref2 = (cov_2emmuz67ty().s[10]++, yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      })),
      request = _ref2.request;
    var response = (cov_2emmuz67ty().s[11]++, yield request('/ai/analyze-photo', {
      method: 'POST',
      body: {
        url: url
      }
    }));
    cov_2emmuz67ty().s[12]++;
    return response;
  });
  return _analyzePhoto.apply(this, arguments);
}
function computeCompatibility(_x3, _x4) {
  return _computeCompatibility.apply(this, arguments);
}
function _computeCompatibility() {
  _computeCompatibility = (0, _asyncToGenerator2.default)(function* (petA, petB) {
    cov_2emmuz67ty().f[3]++;
    var _ref3 = (cov_2emmuz67ty().s[13]++, yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      })),
      request = _ref3.request;
    var response = (cov_2emmuz67ty().s[14]++, yield request('/ai/compatibility', {
      method: 'POST',
      body: {
        a: petA,
        b: petB
      }
    }));
    cov_2emmuz67ty().s[15]++;
    return response;
  });
  return _computeCompatibility.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,