f591605617bd85596f75aa89375f0333
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('axios');
_getJestObj().mock('@react-native-community/netinfo');
_getJestObj().mock('@pawfectmatch/core/api/UnifiedAPIClient');
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _axios = _interopRequireWildcard(require("axios"));
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _UnifiedAPIClient = require("@pawfectmatch/core/api/UnifiedAPIClient");
var _apiClient = require("../apiClient");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockAxios = _axios.default;
var mockNetInfo = _netinfo.default;
var mockUnifiedAPIClient = _UnifiedAPIClient.UnifiedAPIClient;
var mockAxiosInstance = {
  get: _globals.jest.fn(),
  post: _globals.jest.fn(),
  put: _globals.jest.fn(),
  patch: _globals.jest.fn(),
  delete: _globals.jest.fn(),
  interceptors: {
    request: {
      use: _globals.jest.fn()
    },
    response: {
      use: _globals.jest.fn()
    }
  }
};
mockAxios.create.mockReturnValue(mockAxiosInstance);
(0, _globals.describe)('ApiClient', function () {
  var client;
  var mockUnifiedClientInstance;
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockAsyncStorage.removeItem.mockResolvedValue(undefined);
    mockNetInfo.addEventListener.mockReturnValue({
      remove: _globals.jest.fn()
    });
    mockNetInfo.fetch.mockResolvedValue({
      isConnected: true,
      type: 'wifi',
      isInternetReachable: true
    });
    mockUnifiedClientInstance = {
      setOnlineStatus: _globals.jest.fn(),
      getCircuitBreakerMetrics: _globals.jest.fn().mockReturnValue({}),
      getQueueStats: _globals.jest.fn().mockReturnValue({}),
      destroy: _globals.jest.fn()
    };
    mockUnifiedAPIClient.mockImplementation(function () {
      return mockUnifiedClientInstance;
    });
    client = new _apiClient.ApiClient({
      baseURL: 'https://api.test.com',
      timeout: 10000
    });
  });
  (0, _globals.afterEach)(function () {
    _globals.jest.clearAllTimers();
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should create axios instance with correct configuration', function () {
      (0, _globals.expect)(mockAxios.create).toHaveBeenCalledWith({
        baseURL: 'https://api.test.com',
        timeout: 10000,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    });
    (0, _globals.it)('should use default timeout when not specified', function () {
      new _apiClient.ApiClient({
        baseURL: 'https://api.test.com'
      });
      (0, _globals.expect)(mockAxios.create).toHaveBeenCalledWith(_globals.expect.objectContaining({
        timeout: 30000
      }));
    });
    (0, _globals.it)('should initialize UnifiedAPIClient with correct config', function () {
      (0, _globals.expect)(mockUnifiedAPIClient).toHaveBeenCalledWith({
        baseURL: 'https://api.test.com',
        timeout: 10000,
        retryConfig: {
          maxRetries: 3,
          baseDelay: 1000,
          maxDelay: 30000
        },
        circuitBreakerConfig: {
          failureThreshold: 5,
          successThreshold: 2,
          resetTimeout: 60000
        },
        queueConfig: {
          maxSize: 1000,
          persistence: 'memory'
        }
      });
    });
    (0, _globals.it)('should setup network monitoring', function () {
      (0, _globals.expect)(mockNetInfo.addEventListener).toHaveBeenCalled();
      (0, _globals.expect)(mockNetInfo.fetch).toHaveBeenCalled();
    });
    (0, _globals.it)('should load token on initialization', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('stored-token');
      var newClient = new _apiClient.ApiClient({
        baseURL: 'https://api.test.com'
      });
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      (0, _globals.expect)(mockAsyncStorage.getItem).toHaveBeenCalledWith('authToken');
    }));
  });
  (0, _globals.describe)('Token Management', function () {
    (0, _globals.it)('should set and store authentication token', (0, _asyncToGenerator2.default)(function* () {
      var token = 'new-auth-token';
      yield client.setToken(token);
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('authToken', token);
      (0, _globals.expect)(client.token).toBe(token);
    }));
    (0, _globals.it)('should handle token storage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockRejectedValue(new Error('Storage error'));
      yield (0, _globals.expect)(client.setToken('token')).resolves.not.toThrow();
      (0, _globals.expect)(client.token).toBe('token');
    }));
    (0, _globals.it)('should clear authentication token', (0, _asyncToGenerator2.default)(function* () {
      yield client.setToken('test-token');
      (0, _globals.expect)(client.token).toBe('test-token');
      yield client.clearToken();
      (0, _globals.expect)(client.token).toBeNull();
      (0, _globals.expect)(mockAsyncStorage.removeItem).toHaveBeenCalledWith('authToken');
    }));
    (0, _globals.it)('should handle token clearing errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.removeItem.mockRejectedValue(new Error('Storage error'));
      yield (0, _globals.expect)(client.clearToken()).resolves.not.toThrow();
      (0, _globals.expect)(client.token).toBeNull();
    }));
  });
  (0, _globals.describe)('HTTP Methods', function () {
    var mockResponse = {
      data: {
        success: true,
        id: 123
      }
    };
    (0, _globals.beforeEach)(function () {
      mockAxiosInstance.get.mockResolvedValue(mockResponse);
      mockAxiosInstance.post.mockResolvedValue(mockResponse);
      mockAxiosInstance.put.mockResolvedValue(mockResponse);
      mockAxiosInstance.patch.mockResolvedValue(mockResponse);
      mockAxiosInstance.delete.mockResolvedValue(mockResponse);
    });
    (0, _globals.it)('should make GET requests', (0, _asyncToGenerator2.default)(function* () {
      var result = yield client.get('/test');
      (0, _globals.expect)(mockAxiosInstance.get).toHaveBeenCalledWith('/test', undefined);
      (0, _globals.expect)(result).toEqual(mockResponse.data);
    }));
    (0, _globals.it)('should make POST requests with data', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        name: 'test'
      };
      var result = yield client.post('/test', data);
      (0, _globals.expect)(mockAxiosInstance.post).toHaveBeenCalledWith('/test', data, undefined);
      (0, _globals.expect)(result).toEqual(mockResponse.data);
    }));
    (0, _globals.it)('should make PUT requests with data', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        name: 'updated'
      };
      var result = yield client.put('/test', data);
      (0, _globals.expect)(mockAxiosInstance.put).toHaveBeenCalledWith('/test', data, undefined);
      (0, _globals.expect)(result).toEqual(mockResponse.data);
    }));
    (0, _globals.it)('should make PATCH requests with data', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        name: 'patched'
      };
      var result = yield client.patch('/test', data);
      (0, _globals.expect)(mockAxiosInstance.patch).toHaveBeenCalledWith('/test', data, undefined);
      (0, _globals.expect)(result).toEqual(mockResponse.data);
    }));
    (0, _globals.it)('should make DELETE requests', (0, _asyncToGenerator2.default)(function* () {
      var result = yield client.delete('/test');
      (0, _globals.expect)(mockAxiosInstance.delete).toHaveBeenCalledWith('/test', undefined);
      (0, _globals.expect)(result).toEqual(mockResponse.data);
    }));
    (0, _globals.it)('should pass config to HTTP methods', (0, _asyncToGenerator2.default)(function* () {
      var config = {
        timeout: 5000,
        headers: {
          'X-Custom': 'value'
        }
      };
      yield client.get('/test', config);
      (0, _globals.expect)(mockAxiosInstance.get).toHaveBeenCalledWith('/test', config);
    }));
  });
  (0, _globals.describe)('Request Interceptors', function () {
    (0, _globals.it)('should add authorization header when token is available', (0, _asyncToGenerator2.default)(function* () {
      yield client.setToken('test-token');
      var requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];
      var config = {
        headers: new _axios.AxiosHeaders()
      };
      var result = yield requestInterceptor(config);
      (0, _globals.expect)(result.headers.get('Authorization')).toBe('Bearer test-token');
    }));
    (0, _globals.it)('should not add authorization header when no token', (0, _asyncToGenerator2.default)(function* () {
      var requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];
      var config = {
        headers: new _axios.AxiosHeaders()
      };
      var result = yield requestInterceptor(config);
      (0, _globals.expect)(result.headers.get('Authorization')).toBeNull();
    }));
    (0, _globals.it)('should handle interceptor errors', (0, _asyncToGenerator2.default)(function* () {
      var requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];
      yield (0, _globals.expect)(requestInterceptor(null)).rejects.toThrow('Request interceptor rejected');
    }));
  });
  (0, _globals.describe)('Response Interceptors', function () {
    var responseInterceptor;
    (0, _globals.beforeEach)(function () {
      responseInterceptor = mockAxiosInstance.interceptors.response.use.mock.calls[0][1];
    });
    (0, _globals.it)('should pass through successful responses', (0, _asyncToGenerator2.default)(function* () {
      var response = {
        data: 'success'
      };
      var result = yield responseInterceptor(response);
      (0, _globals.expect)(result).toBe(response);
    }));
    (0, _globals.it)('should handle 401 unauthorized errors', (0, _asyncToGenerator2.default)(function* () {
      var error = {
        response: {
          status: 401,
          data: {
            message: 'Unauthorized'
          }
        }
      };
      yield (0, _globals.expect)(responseInterceptor(error)).rejects.toThrow();
      (0, _globals.expect)(client.token).toBeNull();
      (0, _globals.expect)(mockAsyncStorage.removeItem).toHaveBeenCalledWith('authToken');
    }));
    (0, _globals.it)('should handle 403 forbidden errors', (0, _asyncToGenerator2.default)(function* () {
      var error = {
        response: {
          status: 403,
          data: {
            message: 'Forbidden'
          }
        }
      };
      yield (0, _globals.expect)(responseInterceptor(error)).rejects.toThrow();
    }));
    (0, _globals.it)('should handle 500 server errors', (0, _asyncToGenerator2.default)(function* () {
      var error = {
        response: {
          status: 500,
          data: {
            message: 'Server Error'
          }
        }
      };
      yield (0, _globals.expect)(responseInterceptor(error)).rejects.toThrow();
    }));
    (0, _globals.it)('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      var error = {
        request: {},
        message: 'Network Error'
      };
      yield (0, _globals.expect)(responseInterceptor(error)).rejects.toThrow();
    }));
    (0, _globals.it)('should handle request setup errors', (0, _asyncToGenerator2.default)(function* () {
      var error = {
        message: 'Request setup error'
      };
      yield (0, _globals.expect)(responseInterceptor(error)).rejects.toThrow();
    }));
  });
  (0, _globals.describe)('Network Monitoring', function () {
    (0, _globals.it)('should update unified client when network comes online', function () {
      var networkListener = mockNetInfo.addEventListener.mock.calls[0][0];
      networkListener({
        isConnected: true,
        type: 'wifi',
        isInternetReachable: true
      });
      (0, _globals.expect)(mockUnifiedClientInstance.setOnlineStatus).toHaveBeenCalledWith(true);
    });
    (0, _globals.it)('should update unified client when network goes offline', function () {
      var networkListener = mockNetInfo.addEventListener.mock.calls[0][0];
      networkListener({
        isConnected: false,
        type: 'none',
        isInternetReachable: false
      });
      (0, _globals.expect)(mockUnifiedClientInstance.setOnlineStatus).toHaveBeenCalledWith(false);
    });
    (0, _globals.it)('should handle initial network state', (0, _asyncToGenerator2.default)(function* () {
      mockNetInfo.fetch.mockResolvedValue({
        isConnected: false,
        type: 'none',
        isInternetReachable: false
      });
      new _apiClient.ApiClient({
        baseURL: 'https://api.test.com'
      });
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      (0, _globals.expect)(mockUnifiedClientInstance.setOnlineStatus).toHaveBeenCalledWith(false);
    }));
  });
  (0, _globals.describe)('UnifiedAPIClient Integration', function () {
    (0, _globals.it)('should provide access to unified client', function () {
      var unifiedClient = client.getUnifiedClient();
      (0, _globals.expect)(unifiedClient).toBe(mockUnifiedClientInstance);
    });
    (0, _globals.it)('should provide circuit breaker metrics', function () {
      var metrics = {
        failures: 3,
        successes: 1,
        state: 'closed'
      };
      mockUnifiedClientInstance.getCircuitBreakerMetrics.mockReturnValue(metrics);
      var result = client.getCircuitBreakerMetrics();
      (0, _globals.expect)(result).toEqual(metrics);
    });
    (0, _globals.it)('should provide queue statistics', function () {
      var stats = {
        size: 5,
        processed: 10,
        failed: 2
      };
      mockUnifiedClientInstance.getQueueStats.mockReturnValue(stats);
      var result = client.getQueueStats();
      (0, _globals.expect)(result).toEqual(stats);
    });
  });
  (0, _globals.describe)('Resource Management', function () {
    (0, _globals.it)('should provide access to axios instance', function () {
      var axiosInstance = client.getAxiosInstance();
      (0, _globals.expect)(axiosInstance).toBe(mockAxiosInstance);
    });
    (0, _globals.it)('should cleanup resources on destroy', function () {
      var mockUnsubscribe = _globals.jest.fn();
      client.networkUnsubscribe = mockUnsubscribe;
      client.destroy();
      (0, _globals.expect)(mockUnsubscribe).toHaveBeenCalled();
      (0, _globals.expect)(mockUnifiedClientInstance.destroy).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle destroy when network unsubscribe is not set', function () {
      client.networkUnsubscribe = undefined;
      (0, _globals.expect)(function () {
        return client.destroy();
      }).not.toThrow();
    });
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle HTTP method errors', (0, _asyncToGenerator2.default)(function* () {
      mockAxiosInstance.get.mockRejectedValue(new Error('Network error'));
      yield (0, _globals.expect)(client.get('/test')).rejects.toThrow('Network error');
    }));
    (0, _globals.it)('should handle malformed responses', (0, _asyncToGenerator2.default)(function* () {
      mockAxiosInstance.get.mockResolvedValue({});
      yield (0, _globals.expect)(client.get('/test')).rejects.toThrow();
    }));
    (0, _globals.it)('should handle token loading errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));
      var newClient = new _apiClient.ApiClient({
        baseURL: 'https://api.test.com'
      });
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      (0, _globals.expect)(newClient).toBeDefined();
    }));
    (0, _globals.it)('should handle network monitoring setup errors', function () {
      mockNetInfo.addEventListener.mockImplementation(function () {
        throw new Error('Network monitoring error');
      });
      (0, _globals.expect)(function () {
        return new _apiClient.ApiClient({
          baseURL: 'https://api.test.com'
        });
      }).not.toThrow();
    });
  });
  (0, _globals.describe)('Singleton Instance', function () {
    (0, _globals.it)('should export singleton instance', function () {
      (0, _globals.expect)(_apiClient.apiClient).toBeInstanceOf(_apiClient.ApiClient);
      (0, _globals.expect)(_apiClient.apiClient).toBeDefined();
    });
    (0, _globals.it)('should use correct default configuration for singleton', function () {
      (0, _globals.expect)(mockAxios.create).toHaveBeenCalledWith(_globals.expect.objectContaining({
        baseURL: _globals.expect.stringContaining('localhost:3001/api'),
        timeout: 30000
      }));
    });
  });
  (0, _globals.describe)('Environment Configuration', function () {
    (0, _globals.it)('should use environment variable for API URL', function () {
      var originalEnv = process.env.EXPO_PUBLIC_API_URL;
      process.env.EXPO_PUBLIC_API_URL = 'https://custom-api.com';
      (0, _globals.expect)(process.env.EXPO_PUBLIC_API_URL).toBe('https://custom-api.com');
      process.env.EXPO_PUBLIC_API_URL = originalEnv;
    });
    (0, _globals.it)('should fallback to localhost when env var is empty', function () {
      var originalEnv = process.env.EXPO_PUBLIC_API_URL;
      process.env.EXPO_PUBLIC_API_URL = '';
      (0, _globals.expect)(process.env.EXPO_PUBLIC_API_URL).toBe('');
      process.env.EXPO_PUBLIC_API_URL = originalEnv;
    });
  });
  (0, _globals.describe)('Concurrent Requests', function () {
    (0, _globals.it)('should handle multiple concurrent requests', (0, _asyncToGenerator2.default)(function* () {
      var promises = [client.get('/endpoint1'), client.post('/endpoint2', {
        data: 1
      }), client.put('/endpoint3', {
        data: 2
      }), client.delete('/endpoint4')];
      mockAxiosInstance.get.mockResolvedValue({
        data: 'response1'
      });
      mockAxiosInstance.post.mockResolvedValue({
        data: 'response2'
      });
      mockAxiosInstance.put.mockResolvedValue({
        data: 'response3'
      });
      mockAxiosInstance.delete.mockResolvedValue({
        data: 'response4'
      });
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toEqual(['response1', 'response2', 'response3', 'response4']);
      (0, _globals.expect)(mockAxiosInstance.get).toHaveBeenCalledWith('/endpoint1', undefined);
      (0, _globals.expect)(mockAxiosInstance.post).toHaveBeenCalledWith('/endpoint2', {
        data: 1
      }, undefined);
      (0, _globals.expect)(mockAxiosInstance.put).toHaveBeenCalledWith('/endpoint3', {
        data: 2
      }, undefined);
      (0, _globals.expect)(mockAxiosInstance.delete).toHaveBeenCalledWith('/endpoint4', undefined);
    }));
    (0, _globals.it)('should maintain authentication across concurrent requests', (0, _asyncToGenerator2.default)(function* () {
      yield client.setToken('shared-token');
      var promises = [client.get('/protected1'), client.get('/protected2')];
      var requestInterceptor = mockAxiosInstance.interceptors.request.use.mock.calls[0][0];
      var config1 = {
        headers: new _axios.AxiosHeaders()
      };
      var config2 = {
        headers: new _axios.AxiosHeaders()
      };
      yield requestInterceptor(config1);
      yield requestInterceptor(config2);
      (0, _globals.expect)(config1.headers.get('Authorization')).toBe('Bearer shared-token');
      (0, _globals.expect)(config2.headers.get('Authorization')).toBe('Bearer shared-token');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle very long URLs', (0, _asyncToGenerator2.default)(function* () {
      var longUrl = '/api/' + 'a'.repeat(2000);
      mockAxiosInstance.get.mockResolvedValue({
        data: 'response'
      });
      var result = yield client.get(longUrl);
      (0, _globals.expect)(result).toBe('response');
      (0, _globals.expect)(mockAxiosInstance.get).toHaveBeenCalledWith(longUrl, undefined);
    }));
    (0, _globals.it)('should handle large request payloads', (0, _asyncToGenerator2.default)(function* () {
      var largeData = {
        array: Array.from({
          length: 1000
        }, function (_, i) {
          return {
            id: i,
            data: 'x'.repeat(100)
          };
        }),
        nested: {
          level1: {
            level2: {
              level3: 'deep data'
            }
          }
        }
      };
      mockAxiosInstance.post.mockResolvedValue({
        data: 'success'
      });
      var result = yield client.post('/large-endpoint', largeData);
      (0, _globals.expect)(result).toBe('success');
      (0, _globals.expect)(mockAxiosInstance.post).toHaveBeenCalledWith('/large-endpoint', largeData, undefined);
    }));
    (0, _globals.it)('should handle special characters in URLs', (0, _asyncToGenerator2.default)(function* () {
      var specialUrl = '/api/search?q=café&filter=naïve';
      mockAxiosInstance.get.mockResolvedValue({
        data: 'results'
      });
      var result = yield client.get(specialUrl);
      (0, _globals.expect)(result).toBe('results');
      (0, _globals.expect)(mockAxiosInstance.get).toHaveBeenCalledWith(specialUrl, undefined);
    }));
    (0, _globals.it)('should handle empty response data', (0, _asyncToGenerator2.default)(function* () {
      mockAxiosInstance.get.mockResolvedValue({
        data: null
      });
      var result = yield client.get('/empty-endpoint');
      (0, _globals.expect)(result).toBeNull();
    }));
    (0, _globals.it)('should handle undefined response data', (0, _asyncToGenerator2.default)(function* () {
      mockAxiosInstance.get.mockResolvedValue({
        data: undefined
      });
      var result = yield client.get('/undefined-endpoint');
      (0, _globals.expect)(result).toBeUndefined();
    }));
    (0, _globals.it)('should handle zero timeout configuration', function () {
      var zeroTimeoutClient = new _apiClient.ApiClient({
        baseURL: 'https://api.test.com',
        timeout: 0
      });
      (0, _globals.expect)(mockAxios.create).toHaveBeenCalledWith(_globals.expect.objectContaining({
        timeout: 0
      }));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,