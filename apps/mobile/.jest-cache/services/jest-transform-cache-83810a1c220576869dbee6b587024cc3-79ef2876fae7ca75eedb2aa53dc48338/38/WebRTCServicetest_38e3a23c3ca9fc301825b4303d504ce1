c9a5a5b01e533116d3210d9767caebf5
"use strict";

_getJestObj().mock("react-native-incall-manager", function () {
  return {
    __esModule: true,
    default: {
      setSpeakerphoneOn: jest.fn(),
      setKeepScreenOn: jest.fn(),
      setForceSpeakerphoneOn: jest.fn(),
      start: jest.fn(),
      stop: jest.fn(),
      displayIncomingCall: jest.fn(),
      getSpeakerphoneOn: jest.fn(function () {
        return false;
      }),
      setMicrophoneMute: jest.fn(),
      turnScreenOn: jest.fn(),
      turnScreenOff: jest.fn(),
      setWiredHeadsetHfpOn: jest.fn(),
      setBluetoothScoOn: jest.fn(),
      setBluetoothScoOff: jest.fn()
    }
  };
});
_getJestObj().mock("react-native-webrtc", function () {
  return {
    RTCPeerConnection: jest.fn(),
    RTCIceCandidate: jest.fn(),
    RTCSessionDescription: jest.fn(),
    mediaDevices: {
      getUserMedia: jest.fn()
    }
  };
});
_getJestObj().mock("react-native-incall-manager", function () {
  return {
    default: {
      setSpeakerphoneOn: jest.fn(),
      setKeepScreenOn: jest.fn(),
      setForceSpeakerphoneOn: jest.fn(),
      start: jest.fn(),
      stop: jest.fn(),
      displayIncomingCall: jest.fn(),
      getSpeakerphoneOn: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNativeWebrtc = require("react-native-webrtc");
var _WebRTCService = _interopRequireDefault(require("../WebRTCService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var InCallManager = require("react-native-incall-manager").default;
var webRTCService = _WebRTCService.default;
var mockSocket = {
  on: jest.fn(),
  emit: jest.fn(),
  connected: true
};
var mockPeerConnection = {
  addTrack: jest.fn(),
  createOffer: jest.fn(),
  createAnswer: jest.fn(),
  setLocalDescription: jest.fn(),
  setRemoteDescription: jest.fn(),
  addIceCandidate: jest.fn(),
  close: jest.fn(),
  onicecandidate: null,
  ontrack: null,
  onconnectionstatechange: null,
  connectionState: "new"
};
var mockMediaStream = {
  getTracks: jest.fn(function () {
    return [];
  }),
  getAudioTracks: jest.fn(function () {
    return [];
  }),
  getVideoTracks: jest.fn(function () {
    return [];
  })
};
describe("webRTCService", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _reactNativeWebrtc.RTCPeerConnection.mockImplementation(function () {
      return mockPeerConnection;
    });
    _reactNativeWebrtc.mediaDevices.getUserMedia.mockResolvedValue(mockMediaStream);
    webRTCService.endCall();
  });
  describe("Initialization", function () {
    it("should initialize with socket", function () {
      webRTCService.initialize(mockSocket);
      expect(mockSocket.on).toHaveBeenCalledWith("incoming-call", expect.any(Function));
      expect(mockSocket.on).toHaveBeenCalledWith("call-answered", expect.any(Function));
      expect(mockSocket.on).toHaveBeenCalledWith("call-ended", expect.any(Function));
      expect(mockSocket.on).toHaveBeenCalledWith("webrtc-offer", expect.any(Function));
      expect(mockSocket.on).toHaveBeenCalledWith("webrtc-answer", expect.any(Function));
      expect(mockSocket.on).toHaveBeenCalledWith("webrtc-ice-candidate", expect.any(Function));
    });
    it("should setup InCallManager correctly", function () {
      webRTCService.initialize(mockSocket);
      expect(InCallManager.setKeepScreenOn).toHaveBeenCalledWith(true);
      expect(InCallManager.setForceSpeakerphoneOn).toHaveBeenCalledWith(false);
    });
  });
  describe("Starting Calls", function () {
    beforeEach(function () {
      webRTCService.initialize(mockSocket);
    });
    it("should start voice call successfully", (0, _asyncToGenerator2.default)(function* () {
      var mockAudioTrack = {
        enabled: true
      };
      mockMediaStream.getTracks.mockReturnValue([mockAudioTrack]);
      var result = yield webRTCService.startCall("test-match-id", "voice");
      expect(result).toBe(true);
      expect(_reactNativeWebrtc.mediaDevices.getUserMedia).toHaveBeenCalledWith({
        audio: true,
        video: false
      });
      expect(_reactNativeWebrtc.RTCPeerConnection).toHaveBeenCalled();
      expect(mockSocket.emit).toHaveBeenCalledWith("initiate-call", expect.objectContaining({
        matchId: "test-match-id",
        callType: "voice"
      }));
      expect(InCallManager.start).toHaveBeenCalledWith({
        media: "audio"
      });
    }));
    it("should start video call successfully", (0, _asyncToGenerator2.default)(function* () {
      var mockVideoTrack = {
        enabled: true
      };
      var mockAudioTrack = {
        enabled: true
      };
      mockMediaStream.getTracks.mockReturnValue([mockAudioTrack, mockVideoTrack]);
      var result = yield webRTCService.startCall("test-match-id", "video");
      expect(result).toBe(true);
      expect(_reactNativeWebrtc.mediaDevices.getUserMedia).toHaveBeenCalledWith({
        audio: true,
        video: {
          width: {
            min: 640,
            ideal: 1280
          },
          height: {
            min: 480,
            ideal: 720
          },
          frameRate: {
            min: 16,
            ideal: 30
          }
        }
      });
      expect(InCallManager.start).toHaveBeenCalledWith({
        media: "video"
      });
    }));
    it("should handle getUserMedia failure", (0, _asyncToGenerator2.default)(function* () {
      var error = new Error("Permission denied");
      _reactNativeWebrtc.mediaDevices.getUserMedia.mockRejectedValue(error);
      var result = yield webRTCService.startCall("test-match-id", "voice");
      expect(result).toBe(false);
    }));
    it("should emit call state changes", (0, _asyncToGenerator2.default)(function* () {
      var mockListener = jest.fn();
      webRTCService.on("callStateChanged", mockListener);
      yield webRTCService.startCall("test-match-id", "voice");
      expect(mockListener).toHaveBeenCalledWith(expect.objectContaining({
        isActive: true,
        isIncoming: false
      }));
    }));
  });
  describe("Answering Calls", function () {
    beforeEach(function () {
      webRTCService.initialize(mockSocket);
    });
    it("should answer incoming call successfully", (0, _asyncToGenerator2.default)(function* () {
      var _mockSocket$on$mock$c;
      var callData = {
        callId: "test-call-id",
        matchId: "test-match-id",
        callerId: "test-caller-id",
        callerName: "Test Caller",
        callType: "voice",
        timestamp: Date.now()
      };
      var incomingCallHandler = (_mockSocket$on$mock$c = mockSocket.on.mock.calls.find(function (call) {
        return call[0] === "incoming-call";
      })) == null ? void 0 : _mockSocket$on$mock$c[1];
      if (incomingCallHandler) {
        incomingCallHandler(callData);
      }
      var result = yield webRTCService.answerCall();
      expect(result).toBe(true);
      expect(mockSocket.emit).toHaveBeenCalledWith("answer-call", expect.objectContaining({
        matchId: "test-match-id"
      }));
      expect(InCallManager.start).toHaveBeenCalled();
    }));
    it("should handle answer call without call data", (0, _asyncToGenerator2.default)(function* () {
      var result = yield webRTCService.answerCall();
      expect(result).toBe(false);
    }));
  });
  describe("Call Controls", function () {
    beforeEach(function () {
      webRTCService.initialize(mockSocket);
    });
    it("should toggle mute", (0, _asyncToGenerator2.default)(function* () {
      var mockAudioTrack = {
        enabled: true
      };
      mockMediaStream.getAudioTracks.mockReturnValue([mockAudioTrack]);
      yield webRTCService.startCall("test-match-id", "voice");
      webRTCService.toggleMute();
      expect(mockAudioTrack.enabled).toBe(false);
    }));
    it("should toggle video", (0, _asyncToGenerator2.default)(function* () {
      var mockVideoTrack = {
        enabled: true
      };
      mockMediaStream.getVideoTracks.mockReturnValue([mockVideoTrack]);
      yield webRTCService.startCall("test-match-id", "video");
      webRTCService.toggleVideo();
      expect(mockVideoTrack.enabled).toBe(false);
    }));
    it("should switch camera", (0, _asyncToGenerator2.default)(function* () {
      var mockVideoTrack = {
        enabled: true,
        _switchCamera: jest.fn()
      };
      mockMediaStream.getVideoTracks.mockReturnValue([mockVideoTrack]);
      yield webRTCService.startCall("test-match-id", "video");
      yield webRTCService.switchCamera();
      expect(mockVideoTrack._switchCamera).toHaveBeenCalled();
    }));
    it("should toggle speaker", function () {
      webRTCService.toggleSpeaker();
      expect(InCallManager.setForceSpeakerphoneOn).toHaveBeenCalledWith(true);
    });
  });
  describe("Ending Calls", function () {
    beforeEach(function () {
      webRTCService.initialize(mockSocket);
    });
    it("should end call and clean up resources", (0, _asyncToGenerator2.default)(function* () {
      var mockTrack = {
        enabled: true,
        stop: jest.fn()
      };
      mockMediaStream.getTracks.mockReturnValue([mockTrack]);
      yield webRTCService.startCall("test-match-id", "voice");
      webRTCService.endCall();
      expect(mockPeerConnection.close).toHaveBeenCalled();
      expect(mockTrack.stop).toHaveBeenCalled();
      expect(InCallManager.stop).toHaveBeenCalled();
      expect(mockSocket.emit).toHaveBeenCalledWith("end-call", expect.any(Object));
    }));
    it("should reject incoming call", function () {
      var _mockSocket$on$mock$c2;
      var callData = {
        callId: "test-call-id",
        matchId: "test-match-id",
        callerId: "test-caller-id",
        callerName: "Test Caller",
        callType: "voice",
        timestamp: Date.now()
      };
      var incomingCallHandler = (_mockSocket$on$mock$c2 = mockSocket.on.mock.calls.find(function (call) {
        return call[0] === "incoming-call";
      })) == null ? void 0 : _mockSocket$on$mock$c2[1];
      if (incomingCallHandler) {
        incomingCallHandler(callData);
      }
      webRTCService.rejectCall();
      expect(mockSocket.emit).toHaveBeenCalledWith("reject-call", expect.objectContaining({
        callId: "test-call-id",
        matchId: "test-match-id"
      }));
    });
  });
  describe("Call State Management", function () {
    it("should return correct call state", function () {
      var initialState = webRTCService.getCallState();
      expect(initialState).toEqual({
        isActive: false,
        isConnected: false,
        isIncoming: false,
        isMuted: false,
        isVideoEnabled: true,
        callDuration: 0
      });
    });
    it("should return correct call active status", function () {
      expect(webRTCService.isCallActive()).toBe(false);
    });
    it("should update call state during call", (0, _asyncToGenerator2.default)(function* () {
      yield webRTCService.startCall("test-match-id", "voice");
      expect(webRTCService.isCallActive()).toBe(true);
      var state = webRTCService.getCallState();
      expect(state.isActive).toBe(true);
      expect(state.isIncoming).toBe(false);
    }));
  });
  describe("WebRTC Signaling", function () {
    beforeEach(function () {
      webRTCService.initialize(mockSocket);
    });
    it("should handle WebRTC offer", (0, _asyncToGenerator2.default)(function* () {
      var _mockSocket$on$mock$c3;
      var mockOffer = {
        type: "offer",
        sdp: "mock-sdp"
      };
      mockPeerConnection.createAnswer.mockResolvedValue(mockOffer);
      yield webRTCService.startCall("test-match-id", "voice");
      var offerHandler = (_mockSocket$on$mock$c3 = mockSocket.on.mock.calls.find(function (call) {
        return call[0] === "webrtc-offer";
      })) == null ? void 0 : _mockSocket$on$mock$c3[1];
      if (offerHandler) {
        yield offerHandler({
          offer: mockOffer
        });
      }
      expect(mockPeerConnection.setRemoteDescription).toHaveBeenCalled();
      expect(mockPeerConnection.createAnswer).toHaveBeenCalled();
      expect(mockSocket.emit).toHaveBeenCalledWith("webrtc-answer", expect.any(Object));
    }));
    it("should handle WebRTC answer", (0, _asyncToGenerator2.default)(function* () {
      var _mockSocket$on$mock$c4;
      var mockAnswer = {
        type: "answer",
        sdp: "mock-sdp"
      };
      yield webRTCService.startCall("test-match-id", "voice");
      var answerHandler = (_mockSocket$on$mock$c4 = mockSocket.on.mock.calls.find(function (call) {
        return call[0] === "webrtc-answer";
      })) == null ? void 0 : _mockSocket$on$mock$c4[1];
      if (answerHandler) {
        yield answerHandler({
          answer: mockAnswer
        });
      }
      expect(mockPeerConnection.setRemoteDescription).toHaveBeenCalled();
    }));
    it("should handle ICE candidates", (0, _asyncToGenerator2.default)(function* () {
      var _mockSocket$on$mock$c5;
      var mockCandidate = {
        candidate: "mock-candidate"
      };
      yield webRTCService.startCall("test-match-id", "voice");
      var candidateHandler = (_mockSocket$on$mock$c5 = mockSocket.on.mock.calls.find(function (call) {
        return call[0] === "webrtc-ice-candidate";
      })) == null ? void 0 : _mockSocket$on$mock$c5[1];
      if (candidateHandler) {
        yield candidateHandler({
          candidate: mockCandidate
        });
      }
      expect(mockPeerConnection.addIceCandidate).toHaveBeenCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,