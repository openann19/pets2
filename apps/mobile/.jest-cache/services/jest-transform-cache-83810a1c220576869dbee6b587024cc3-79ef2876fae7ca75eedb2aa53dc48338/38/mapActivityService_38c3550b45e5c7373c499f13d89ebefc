76e994b4fc28a2f785ebe890bbcd7d27
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commentOnPin = commentOnPin;
exports.endActivity = endActivity;
exports.getNearbyPins = getNearbyPins;
exports.likePin = likePin;
exports.startActivity = startActivity;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var Location = _interopRequireWildcard(require("expo-location"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function startActivity(_x) {
  return _startActivity.apply(this, arguments);
}
function _startActivity() {
  _startActivity = (0, _asyncToGenerator2.default)(function* (params) {
    var location = yield Location.getCurrentPositionAsync({
      accuracy: Location.Accuracy.Balanced
    });
    var _yield$import = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      }),
      request = _yield$import.request;
    var response = yield request('/map/activity/start', {
      method: 'POST',
      body: _objectSpread(_objectSpread({}, params), {}, {
        location: {
          latitude: location.coords.latitude,
          longitude: location.coords.longitude
        }
      })
    });
    return response;
  });
  return _startActivity.apply(this, arguments);
}
function endActivity(_x2) {
  return _endActivity.apply(this, arguments);
}
function _endActivity() {
  _endActivity = (0, _asyncToGenerator2.default)(function* (activityId) {
    var _yield$import2 = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      }),
      request = _yield$import2.request;
    yield request('/map/activity/end', {
      method: 'POST',
      body: {
        activityId: activityId
      }
    });
  });
  return _endActivity.apply(this, arguments);
}
function getNearbyPins(_x3, _x4, _x5) {
  return _getNearbyPins.apply(this, arguments);
}
function _getNearbyPins() {
  _getNearbyPins = (0, _asyncToGenerator2.default)(function* (latitude, longitude, maxDistance) {
    var _yield$import3 = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      }),
      request = _yield$import3.request;
    var params = {
      latitude: latitude,
      longitude: longitude
    };
    if (maxDistance) params.maxDistance = maxDistance;
    var response = yield request('/map/pins', {
      method: 'GET',
      params: params
    });
    return response;
  });
  return _getNearbyPins.apply(this, arguments);
}
function likePin(_x6) {
  return _likePin.apply(this, arguments);
}
function _likePin() {
  _likePin = (0, _asyncToGenerator2.default)(function* (pinId) {
    var _yield$import4 = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      }),
      request = _yield$import4.request;
    var response = yield request(`/map/pins/${pinId}/like`, {
      method: 'POST'
    });
    return response;
  });
  return _likePin.apply(this, arguments);
}
function commentOnPin(_x7, _x8) {
  return _commentOnPin.apply(this, arguments);
}
function _commentOnPin() {
  _commentOnPin = (0, _asyncToGenerator2.default)(function* (pinId, text) {
    var _yield$import5 = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      }),
      request = _yield$import5.request;
    var response = yield request(`/map/pins/${pinId}/comment`, {
      method: 'POST',
      body: {
        text: text
      }
    });
    return response;
  });
  return _commentOnPin.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,