9b409d7c1676e8d972d2c03452b946bb
"use strict";

_getJestObj().mock("../AuthService", function () {
  return {
    authService: {
      getAccessToken: _globals.jest.fn()
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      error: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _LeaderboardService = require("../LeaderboardService");
var _AuthService = require("../AuthService");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAuthService = _AuthService.authService;
var mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
(0, _globals.describe)('LeaderboardService', function () {
  var service;
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    service = new _LeaderboardService.LeaderboardService();
    mockAuthService.getAccessToken.mockResolvedValue('test-token');
    mockFetch.mockResolvedValue({
      ok: true,
      json: _globals.jest.fn().mockResolvedValue({})
    });
  });
  (0, _globals.afterEach)(function () {
    service.clearCache();
  });
  (0, _globals.describe)('Constructor and Initialization', function () {
    (0, _globals.it)('should initialize with correct base URL from environment', function () {
      var originalEnv = process.env.EXPO_PUBLIC_API_URL;
      process.env.EXPO_PUBLIC_API_URL = 'https://test-api.com';
      var testService = new _LeaderboardService.LeaderboardService();
      (0, _globals.expect)(testService.baseUrl).toBe('https://test-api.com');
      process.env.EXPO_PUBLIC_API_URL = originalEnv;
    });
    (0, _globals.it)('should use default base URL when environment variable is not set', function () {
      var originalEnv = process.env.EXPO_PUBLIC_API_URL;
      delete process.env.EXPO_PUBLIC_API_URL;
      var testService = new _LeaderboardService.LeaderboardService();
      (0, _globals.expect)(testService.baseUrl).toBe('https://api.pawfectmatch.com');
      process.env.EXPO_PUBLIC_API_URL = originalEnv;
    });
  });
  (0, _globals.describe)('getLeaderboard', function () {
    var mockLeaderboardResponse = {
      entries: [{
        id: 'entry1',
        userId: 'user1',
        petId: 'pet1',
        petName: 'Buddy',
        petImage: 'buddy.jpg',
        ownerName: 'John',
        score: 1500,
        rank: 1,
        category: {
          id: 'matches',
          name: 'Matches',
          period: 'weekly'
        },
        badges: [],
        stats: {
          matches: 50,
          likes: 30,
          superLikes: 5
        },
        lastUpdated: Date.now()
      }],
      total: 100,
      page: 1,
      limit: 20,
      hasMore: true,
      userRank: 5,
      userEntry: null
    };
    (0, _globals.it)('should fetch leaderboard data successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockLeaderboardResponse)
      });
      var result = yield service.getLeaderboard();
      (0, _globals.expect)(result).toEqual(mockLeaderboardResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard?page=1&limit=20', _globals.expect.objectContaining({
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer test-token'
        }
      }));
    }));
    (0, _globals.it)('should apply filters correctly', (0, _asyncToGenerator2.default)(function* () {
      var filters = {
        category: 'matches',
        period: 'weekly',
        location: {
          latitude: 40.7128,
          longitude: -74.0060,
          radius: 10
        },
        ageRange: {
          min: 1,
          max: 5
        },
        breed: 'Golden Retriever',
        gender: 'male'
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockLeaderboardResponse)
      });
      yield service.getLeaderboard(filters, 2, 10);
      var expectedUrl = _globals.expect.stringContaining('page=2&limit=10&category=matches&period=weekly');
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(expectedUrl, _globals.expect.any(Object));
    }));
    (0, _globals.it)('should return cached data when available and not expired', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockLeaderboardResponse)
      });
      yield service.getLeaderboard({
        category: 'test'
      });
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
      yield service.getLeaderboard({
        category: 'test'
      });
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
    }));
    (0, _globals.it)('should refetch when cache expires', (0, _asyncToGenerator2.default)(function* () {
      service.cacheExpiration = 1;
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockLeaderboardResponse)
      });
      yield service.getLeaderboard();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 2);
      });
      yield service.getLeaderboard();
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(2);
    }));
    (0, _globals.it)('should handle API errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 500,
        statusText: 'Internal Server Error'
      });
      yield (0, _globals.expect)(service.getLeaderboard()).rejects.toThrow('HTTP 500: Internal Server Error');
    }));
    (0, _globals.it)('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockRejectedValueOnce(new Error('Network error'));
      yield (0, _globals.expect)(service.getLeaderboard()).rejects.toThrow('Network error');
    }));
  });
  (0, _globals.describe)('getUserRank', function () {
    var mockUserRankResponse = {
      rank: 15,
      entry: {
        id: 'user-entry',
        userId: 'current-user',
        petId: 'pet1',
        petName: 'Fluffy',
        petImage: 'fluffy.jpg',
        ownerName: 'Current User',
        score: 1200,
        rank: 15,
        category: {
          id: 'likes',
          name: 'Likes',
          period: 'monthly'
        },
        badges: [],
        stats: {
          likes: 45
        },
        lastUpdated: Date.now()
      }
    };
    (0, _globals.it)('should fetch user rank successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockUserRankResponse)
      });
      var result = yield service.getUserRank('matches');
      (0, _globals.expect)(result).toEqual(mockUserRankResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard/user-rank?category=matches', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should fetch user rank without category', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({
          rank: 10,
          entry: null
        })
      });
      var result = yield service.getUserRank();
      (0, _globals.expect)(result.rank).toBe(10);
      (0, _globals.expect)(result.entry).toBeNull();
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard/user-rank', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should use cached user rank data', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockUserRankResponse)
      });
      yield service.getUserRank('test');
      yield service.getUserRank('test');
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
    }));
  });
  (0, _globals.describe)('getCategories', function () {
    var mockCategories = [{
      id: 'matches',
      name: 'Matches',
      description: 'Most matches this period',
      icon: 'heart',
      color: '#FF6B6B',
      period: 'weekly',
      isActive: true
    }, {
      id: 'likes',
      name: 'Likes',
      description: 'Most likes received',
      icon: 'thumbs-up',
      color: '#4ECDC4',
      period: 'monthly',
      isActive: true
    }];
    (0, _globals.it)('should fetch categories successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockCategories)
      });
      var result = yield service.getCategories();
      (0, _globals.expect)(result).toEqual(mockCategories);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard/categories', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should cache categories data', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockCategories)
      });
      yield service.getCategories();
      yield service.getCategories();
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
    }));
  });
  (0, _globals.describe)('getUserBadges', function () {
    var mockBadges = [{
      id: 'first-match',
      name: 'First Match',
      description: 'Got your first match!',
      icon: 'trophy',
      color: '#FFD700',
      earnedAt: Date.now(),
      rarity: 'common'
    }, {
      id: 'speed-dater',
      name: 'Speed Dater',
      description: '50 matches in one week',
      icon: 'zap',
      color: '#FF6B6B',
      earnedAt: Date.now() - 86400000,
      rarity: 'rare'
    }];
    (0, _globals.it)('should fetch user badges successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockBadges)
      });
      var result = yield service.getUserBadges();
      (0, _globals.expect)(result).toEqual(mockBadges);
    }));
    (0, _globals.it)('should cache user badges', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockBadges)
      });
      yield service.getUserBadges();
      yield service.getUserBadges();
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
    }));
  });
  (0, _globals.describe)('getPetStats', function () {
    var mockStats = {
      matches: 25,
      likes: 40,
      superLikes: 8,
      messages: 15,
      profileViews: 120,
      daysActive: 30,
      streak: 7,
      achievements: 3
    };
    (0, _globals.it)('should fetch pet statistics successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockStats)
      });
      var result = yield service.getPetStats('pet123');
      (0, _globals.expect)(result).toEqual(mockStats);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard/pet/pet123/stats', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should cache pet stats', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockStats)
      });
      yield service.getPetStats('pet123');
      yield service.getPetStats('pet123');
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
    }));
  });
  (0, _globals.describe)('updateScore', function () {
    (0, _globals.it)('should update score successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({})
      });
      yield (0, _globals.expect)(service.updateScore('pet123', 'matches', 10, 'Got a new match')).resolves.not.toThrow();
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard/update-score', _globals.expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          petId: 'pet123',
          category: 'matches',
          points: 10,
          reason: 'Got a new match'
        })
      }));
    }));
    (0, _globals.it)('should clear relevant cache after score update', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({})
      });
      service.setCachedData('leaderboard-test-1-20', {});
      service.setCachedData('user-rank-matches', {});
      service.setCachedData('pet-stats-pet123', {});
      yield service.updateScore('pet123', 'matches', 5, 'test');
      (0, _globals.expect)(service.getCachedData('leaderboard-test-1-20')).toBeNull();
      (0, _globals.expect)(service.getCachedData('user-rank-matches')).toBeNull();
      (0, _globals.expect)(service.getCachedData('pet-stats-pet123')).toBeNull();
    }));
    (0, _globals.it)('should handle update score errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 400,
        statusText: 'Bad Request'
      });
      yield (0, _globals.expect)(service.updateScore('pet123', 'matches', 10, 'test')).rejects.toThrow('HTTP 400: Bad Request');
    }));
  });
  (0, _globals.describe)('getLeaderboardHistory', function () {
    var mockHistory = [{
      date: '2024-01-01',
      rank: 10,
      score: 1000
    }, {
      date: '2024-01-08',
      rank: 8,
      score: 1200
    }, {
      date: '2024-01-15',
      rank: 5,
      score: 1400
    }];
    (0, _globals.it)('should fetch leaderboard history successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockHistory)
      });
      var result = yield service.getLeaderboardHistory('matches', 'weekly', 3);
      (0, _globals.expect)(result).toEqual(mockHistory);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard/history?category=matches&period=weekly&weeks=3', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should use default period when not specified', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockHistory)
      });
      yield service.getLeaderboardHistory('likes');
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('period=weekly'), _globals.expect.any(Object));
    }));
    (0, _globals.it)('should cache history data', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockHistory)
      });
      yield service.getLeaderboardHistory('matches', 'weekly', 4);
      yield service.getLeaderboardHistory('matches', 'weekly', 4);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
    }));
  });
  (0, _globals.describe)('getNearbyLeaders', function () {
    var mockNearbyLeaders = [{
      id: 'nearby1',
      userId: 'user1',
      petId: 'pet1',
      petName: 'Nearby Pet',
      petImage: 'nearby.jpg',
      ownerName: 'Nearby Owner',
      score: 800,
      rank: 25,
      category: {
        id: 'local',
        name: 'Local',
        period: 'monthly'
      },
      badges: [],
      stats: {
        matches: 20
      },
      lastUpdated: Date.now()
    }];
    (0, _globals.it)('should fetch nearby leaders successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockNearbyLeaders)
      });
      var result = yield service.getNearbyLeaders(40.7128, -74.0060, 5);
      (0, _globals.expect)(result).toEqual(mockNearbyLeaders);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard/nearby?latitude=40.7128&longitude=-74.006&radius=5', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should use default radius when not specified', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockNearbyLeaders)
      });
      yield service.getNearbyLeaders(40.7128, -74.0060);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('radius=10'), _globals.expect.any(Object));
    }));
    (0, _globals.it)('should cache nearby leaders data', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockNearbyLeaders)
      });
      yield service.getNearbyLeaders(40.7128, -74.0060, 10);
      yield service.getNearbyLeaders(40.7128, -74.0060, 10);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
    }));
  });
  (0, _globals.describe)('getAchievementProgress', function () {
    var mockProgress = {
      completed: [{
        id: 'first-match',
        name: 'First Match',
        description: 'Got your first match!',
        icon: 'trophy',
        color: '#FFD700',
        earnedAt: Date.now(),
        rarity: 'common'
      }],
      inProgress: [{
        badge: {
          id: 'super-liker',
          name: 'Super Liker',
          description: 'Send 100 super likes',
          icon: 'star',
          color: '#FF6B6B',
          earnedAt: 0,
          rarity: 'epic'
        },
        progress: 75,
        target: 100
      }]
    };
    (0, _globals.it)('should fetch achievement progress successfully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockProgress)
      });
      var result = yield service.getAchievementProgress();
      (0, _globals.expect)(result).toEqual(mockProgress);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard/achievements/progress', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should cache achievement progress', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockProgress)
      });
      yield service.getAchievementProgress();
      yield service.getAchievementProgress();
      (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
    }));
  });
  (0, _globals.describe)('shareAchievement', function () {
    (0, _globals.it)('should share achievement successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockShareUrl = 'https://pawfectmatch.com/share/badge123';
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({
          shareUrl: mockShareUrl
        })
      });
      var result = yield service.shareAchievement('badge123', 'twitter');
      (0, _globals.expect)(result).toBe(mockShareUrl);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard/share', _globals.expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          badgeId: 'badge123',
          platform: 'twitter'
        })
      }));
    }));
    (0, _globals.it)('should handle share errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 403,
        statusText: 'Forbidden'
      });
      yield (0, _globals.expect)(service.shareAchievement('badge123', 'facebook')).rejects.toThrow('HTTP 403: Forbidden');
    }));
  });
  (0, _globals.describe)('Authentication', function () {
    (0, _globals.it)('should throw error when no auth token available', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.getAccessToken.mockResolvedValue(null);
      yield (0, _globals.expect)(service.getLeaderboard()).rejects.toThrow('Authentication required for leaderboard access');
    }));
    (0, _globals.it)('should include auth token in all API requests', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.getAccessToken.mockResolvedValue('custom-token');
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({
          entries: [],
          total: 0
        })
      });
      yield service.getLeaderboard();
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
        headers: _globals.expect.objectContaining({
          Authorization: 'Bearer custom-token'
        })
      }));
    }));
  });
  (0, _globals.describe)('Cache Management', function () {
    (0, _globals.it)('should clear cache completely', function () {
      service.setCachedData('test-key', 'test-data');
      (0, _globals.expect)(service.getCachedData('test-key')).not.toBeNull();
      service.clearCache();
      (0, _globals.expect)(service.cache.size).toBe(0);
    });
    (0, _globals.it)('should clear cache by pattern', function () {
      service.setCachedData('leaderboard-weekly', 'data1');
      service.setCachedData('user-rank-weekly', 'data2');
      service.setCachedData('other-data', 'data3');
      service.clearCacheByPattern('weekly');
      (0, _globals.expect)(service.getCachedData('leaderboard-weekly')).toBeNull();
      (0, _globals.expect)(service.getCachedData('user-rank-weekly')).toBeNull();
      (0, _globals.expect)(service.getCachedData('other-data')).not.toBeNull();
    });
    (0, _globals.it)('should return null for expired cache', function () {
      service.cacheExpiration = 1;
      service.setCachedData('test-key', 'test-data');
      (0, _globals.expect)(service.getCachedData('test-key')).not.toBeNull();
      setTimeout(function () {
        (0, _globals.expect)(service.getCachedData('test-key')).toBeNull();
      }, 2);
    });
  });
  (0, _globals.describe)('Error Handling and Logging', function () {
    (0, _globals.it)('should log errors for failed requests', (0, _asyncToGenerator2.default)(function* () {
      var _require = require('@pawfectmatch/core'),
        logger = _require.logger;
      mockFetch.mockRejectedValueOnce(new Error('Network failure'));
      yield (0, _globals.expect)(service.getLeaderboard()).rejects.toThrow();
      (0, _globals.expect)(logger.error).toHaveBeenCalledWith('Failed to get leaderboard', _globals.expect.objectContaining({
        error: _globals.expect.any(Error)
      }));
    }));
    (0, _globals.it)('should handle malformed JSON responses', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockRejectedValue(new Error('Invalid JSON'))
      });
      yield (0, _globals.expect)(service.getLeaderboard()).rejects.toThrow();
    }));
    (0, _globals.it)('should handle non-200 HTTP responses', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 404,
        statusText: 'Not Found'
      });
      yield (0, _globals.expect)(service.getCategories()).rejects.toThrow('HTTP 404: Not Found');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty leaderboard responses', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({
          entries: [],
          total: 0,
          page: 1,
          limit: 20,
          hasMore: false
        })
      });
      var result = yield service.getLeaderboard();
      (0, _globals.expect)(result.entries).toEqual([]);
      (0, _globals.expect)(result.total).toBe(0);
      (0, _globals.expect)(result.hasMore).toBe(false);
    }));
    (0, _globals.it)('should handle large page numbers and limits', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({
          entries: [],
          total: 1000,
          page: 50,
          limit: 100,
          hasMore: false
        })
      });
      yield service.getLeaderboard({}, 50, 100);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('page=50&limit=100'), _globals.expect.any(Object));
    }));
    (0, _globals.it)('should handle special characters in category names', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({
          rank: 1,
          entry: null
        })
      });
      yield service.getUserRank('special-category_with+chars');
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('https://api.pawfectmatch.com/api/leaderboard/user-rank?category=special-category_with+chars', _globals.expect.any(Object));
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,