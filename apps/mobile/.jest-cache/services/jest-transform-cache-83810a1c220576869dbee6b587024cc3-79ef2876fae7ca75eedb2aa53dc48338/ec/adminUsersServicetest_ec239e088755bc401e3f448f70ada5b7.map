{"version":3,"names":["_getJestObj","mock","_adminAPI","getUsers","jest","fn","suspendUser","activateUser","banUser","logger","error","_interopRequireDefault","require","_asyncToGenerator2","_globals","_adminUsersService","_core","_require","mockAdminAPI","adminAPI","mockLogger","describe","beforeEach","clearAllMocks","invalidateAdminUsersCache","it","query1","page","limit","query2","query3","createCacheKey","global","expect","toBe","not","query","search","status","role","verified","key","toContain","undefined","isCacheValid","validEntry","timestamp","Date","now","expiredEntry","cache","set","data","size","rawUser","_id","firstName","lastName","email","isVerified","createdAt","lastLoginAt","pets","id","matchesCount","messagesCount","mapUser","mapped","toEqual","petsCount","incompleteUser","any","String","altUser","rawResponse","success","users","pagination","total","pages","mapResponse","toHaveLength","emptyResponse","mockApiResponse","default","mockResolvedValue","result","fetchAdminUsers","toHaveBeenCalledWith","cachedData","toHaveBeenCalled","expiredData","queries","toHaveBeenCalledTimes","toHaveBeenNthCalledWith","Error","mockRejectedValue","rejects","toThrow","performAdminUserAction","reason","durationDays","action","userId","adminUsersService","invalidate","promises","results","Promise","all","cacheKey","callCount","originalSet","bind","value","largeUsers","Array","from","length","_","i","Math","floor","random","longSearch","repeat","specialQueries","extremeQueries","malformedResponses","response","mockResolvedValueOnce","toHaveProperty","isArray","cacheOperations","_ref23","resolve","setTimeout","_x","_x2","apply","arguments"],"sources":["adminUsersService.test.ts"],"sourcesContent":["/**\n * Comprehensive tests for AdminUsersService\n *\n * Coverage:\n * - User fetching with caching and pagination\n * - Admin user actions (suspend, activate, ban, unban)\n * - Cache management and invalidation\n * - Data mapping and transformation\n * - Error handling and recovery\n * - Query parameter handling\n * - Cache expiration and validation\n */\n\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport {\n  fetchAdminUsers,\n  performAdminUserAction,\n  invalidateAdminUsersCache,\n  adminUsersService,\n  type AdminUsersQuery,\n  type AdminUsersResult,\n  type AdminUserAction,\n} from '../adminUsersService';\n\n// Mock dependencies\njest.mock('../adminAPI', () => ({\n  _adminAPI: {\n    getUsers: jest.fn(),\n    suspendUser: jest.fn(),\n    activateUser: jest.fn(),\n    banUser: jest.fn(),\n  },\n}));\n\njest.mock('@pawfectmatch/core', () => ({\n  logger: {\n    error: jest.fn(),\n  },\n}));\n\nimport { _adminAPI as adminAPI } from '../adminAPI';\nimport { logger } from '@pawfectmatch/core';\n\nconst mockAdminAPI = adminAPI as jest.Mocked<typeof adminAPI>;\nconst mockLogger = logger as jest.Mocked<typeof logger>;\n\ndescribe('AdminUsersService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Clear cache before each test\n    invalidateAdminUsersCache();\n  });\n\n  describe('Cache Management', () => {\n    it('should create consistent cache keys', () => {\n      const query1: AdminUsersQuery = { page: 1, limit: 20 };\n      const query2: AdminUsersQuery = { page: 1, limit: 20 };\n      const query3: AdminUsersQuery = { page: 2, limit: 20 };\n\n      // Access private function for testing\n      const createCacheKey = (global as any).createCacheKey;\n\n      expect(createCacheKey(query1)).toBe(createCacheKey(query2));\n      expect(createCacheKey(query1)).not.toBe(createCacheKey(query3));\n    });\n\n    it('should handle complex query normalization', () => {\n      const query: AdminUsersQuery = {\n        page: 1,\n        limit: 50,\n        search: 'John DOE',\n        status: 'active',\n        role: 'admin',\n        verified: true,\n      };\n\n      const createCacheKey = (global as any).createCacheKey;\n      const key = createCacheKey(query);\n\n      // Should normalize search to lowercase\n      expect(key).toContain('\"search\":\"john doe\"');\n      expect(key).toContain('\"status\":\"active\"');\n      expect(key).toContain('\"role\":\"admin\"');\n      expect(key).toContain('\"verified\":\"true\"');\n    });\n\n    it('should exclude undefined and empty values from cache key', () => {\n      const query: AdminUsersQuery = {\n        page: 1,\n        limit: undefined,\n        search: '',\n        status: undefined,\n        role: 'user',\n        verified: undefined,\n      };\n\n      const createCacheKey = (global as any).createCacheKey;\n      const key = createCacheKey(query);\n\n      // Should not include undefined or empty values\n      expect(key).not.toContain('limit');\n      expect(key).not.toContain('search');\n      expect(key).not.toContain('status');\n      expect(key).not.toContain('verified');\n      expect(key).toContain('\"role\":\"user\"');\n      expect(key).toContain('\"page\":\"1\"');\n    });\n\n    it('should validate cache expiration', () => {\n      const isCacheValid = (global as any).isCacheValid;\n\n      const validEntry = { timestamp: Date.now() - 10000 }; // 10 seconds ago\n      const expiredEntry = { timestamp: Date.now() - 40000 }; // 40 seconds ago\n\n      expect(isCacheValid(validEntry)).toBe(true);\n      expect(isCacheValid(expiredEntry)).toBe(false);\n      expect(isCacheValid()).toBe(false);\n      expect(isCacheValid({})).toBe(false);\n    });\n\n    it('should invalidate cache', () => {\n      // Add something to cache first\n      const cache = (global as any).cache;\n      cache.set('test', { timestamp: Date.now(), data: {} });\n\n      expect(cache.size).toBe(1);\n\n      invalidateAdminUsersCache();\n\n      expect(cache.size).toBe(0);\n    });\n  });\n\n  describe('Data Mapping', () => {\n    it('should map user data correctly', () => {\n      const rawUser = {\n        _id: 'user123',\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john@example.com',\n        role: 'admin',\n        status: 'active',\n        isVerified: true,\n        createdAt: '2024-01-01T00:00:00Z',\n        lastLoginAt: '2024-01-15T00:00:00Z',\n        pets: [{ id: 'pet1' }, { id: 'pet2' }],\n        matchesCount: 25,\n        messagesCount: 150,\n      };\n\n      const mapUser = (global as any).mapUser;\n      const mapped = mapUser(rawUser);\n\n      expect(mapped).toEqual({\n        id: 'user123',\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john@example.com',\n        role: 'admin',\n        status: 'active',\n        verified: true,\n        createdAt: '2024-01-01T00:00:00Z',\n        lastLoginAt: '2024-01-15T00:00:00Z',\n        petsCount: 2,\n        matchesCount: 25,\n        messagesCount: 150,\n      });\n    });\n\n    it('should handle missing or invalid user data gracefully', () => {\n      const incompleteUser = {\n        // Missing most fields\n        _id: undefined,\n        firstName: null,\n        lastName: undefined,\n        email: '',\n        role: null,\n        status: 'invalid_status',\n        isVerified: undefined,\n        createdAt: null,\n        pets: null,\n        matchesCount: 'invalid',\n        messagesCount: undefined,\n      };\n\n      const mapUser = (global as any).mapUser;\n      const mapped = mapUser(incompleteUser);\n\n      expect(mapped).toEqual({\n        id: '',\n        firstName: 'Unknown',\n        lastName: 'User',\n        email: 'unknown@example.com',\n        role: 'user',\n        status: 'pending',\n        verified: false,\n        createdAt: expect.any(String), // Current timestamp fallback\n        lastLoginAt: undefined,\n        petsCount: 0,\n        matchesCount: 0,\n        messagesCount: 0,\n      });\n    });\n\n    it('should handle alternative field names', () => {\n      const altUser = {\n        _id: 'user456',\n        firstName: 'Jane',\n        lastName: 'Smith',\n        email: 'jane@example.com',\n        role: 'user',\n        status: 'active',\n        verified: true, // Alternative to isVerified\n        createdAt: '2024-01-01T00:00:00Z',\n        pets: ['pet1', 'pet2', 'pet3'], // Array of strings\n        petsCount: 5, // Alternative to pets array\n        matchesCount: 10,\n        messagesCount: 50,\n      };\n\n      const mapUser = (global as any).mapUser;\n      const mapped = mapUser(altUser);\n\n      expect(mapped.petsCount).toBe(3); // Uses array length over petsCount\n      expect(mapped.verified).toBe(true);\n    });\n\n    it('should map response data correctly', () => {\n      const rawResponse = {\n        success: true,\n        data: {\n          users: [\n            {\n              _id: 'user1',\n              firstName: 'John',\n              lastName: 'Doe',\n              email: 'john@example.com',\n              role: 'user',\n              status: 'active',\n              isVerified: true,\n              createdAt: '2024-01-01T00:00:00Z',\n              pets: [{ id: 'pet1' }],\n              matchesCount: 5,\n              messagesCount: 10,\n            },\n          ],\n          pagination: {\n            page: 1,\n            limit: 20,\n            total: 100,\n            pages: 5,\n          },\n        },\n      };\n\n      const mapResponse = (global as any).mapResponse;\n      const mapped = mapResponse(rawResponse);\n\n      expect(mapped.users).toHaveLength(1);\n      expect(mapped.users[0].id).toBe('user1');\n      expect(mapped.pagination).toEqual({\n        page: 1,\n        limit: 20,\n        total: 100,\n        pages: 5,\n      });\n    });\n\n    it('should handle missing response data', () => {\n      const emptyResponse = {\n        success: false,\n        data: undefined,\n      };\n\n      const mapResponse = (global as any).mapResponse;\n      const mapped = mapResponse(emptyResponse);\n\n      expect(mapped.users).toEqual([]);\n      expect(mapped.pagination).toEqual({\n        page: 1,\n        limit: 0,\n        total: 0,\n        pages: 1,\n      });\n    });\n  });\n\n  describe('fetchAdminUsers', () => {\n    const mockApiResponse = {\n      success: true,\n      data: {\n        users: [\n          {\n            _id: 'user1',\n            firstName: 'John',\n            lastName: 'Doe',\n            email: 'john@example.com',\n            role: 'user',\n            status: 'active',\n            isVerified: true,\n            createdAt: '2024-01-01T00:00:00Z',\n            pets: [{ id: 'pet1' }],\n            matchesCount: 5,\n            messagesCount: 10,\n          },\n        ],\n        pagination: {\n          page: 1,\n          limit: 20,\n          total: 1,\n          pages: 1,\n        },\n      },\n    };\n\n    it('should fetch users from API and cache result', async () => {\n      mockAdminAPI.getUsers.mockResolvedValue(mockApiResponse);\n\n      const result = await fetchAdminUsers({ page: 1, limit: 20 });\n\n      expect(mockAdminAPI.getUsers).toHaveBeenCalledWith({\n        page: 1,\n        limit: 20,\n      });\n\n      expect(result.users).toHaveLength(1);\n      expect(result.users[0].id).toBe('user1');\n      expect(result.pagination.total).toBe(1);\n\n      // Check caching\n      const cache = (global as any).cache;\n      expect(cache.size).toBe(1);\n    });\n\n    it('should return cached data when available and valid', async () => {\n      // Pre-populate cache\n      const cache = (global as any).cache;\n      const cachedData: AdminUsersResult = {\n        users: [{\n          id: 'cached-user',\n          firstName: 'Cached',\n          lastName: 'User',\n          email: 'cached@example.com',\n          role: 'user',\n          status: 'active',\n          verified: true,\n          createdAt: '2024-01-01T00:00:00Z',\n          petsCount: 1,\n          matchesCount: 2,\n          messagesCount: 3,\n        }],\n        pagination: { page: 1, limit: 20, total: 1, pages: 1 },\n      };\n      cache.set('{\"page\":\"1\",\"limit\":\"20\"}', {\n        timestamp: Date.now(),\n        data: cachedData,\n      });\n\n      const result = await fetchAdminUsers({ page: 1, limit: 20 });\n\n      // Should not call API\n      expect(mockAdminAPI.getUsers).not.toHaveBeenCalled();\n      expect(result).toBe(cachedData);\n    });\n\n    it('should refetch when cache is expired', async () => {\n      // Pre-populate with expired cache\n      const cache = (global as any).cache;\n      const expiredData: AdminUsersResult = {\n        users: [],\n        pagination: { page: 1, limit: 20, total: 0, pages: 0 },\n      };\n      cache.set('{\"page\":\"1\",\"limit\":\"20\"}', {\n        timestamp: Date.now() - 40000, // 40 seconds ago (expired)\n        data: expiredData,\n      });\n\n      mockAdminAPI.getUsers.mockResolvedValue(mockApiResponse);\n\n      const result = await fetchAdminUsers({ page: 1, limit: 20 });\n\n      // Should call API despite cache\n      expect(mockAdminAPI.getUsers).toHaveBeenCalled();\n      expect(result.users).toHaveLength(1);\n    });\n\n    it('should handle various query parameters', async () => {\n      mockAdminAPI.getUsers.mockResolvedValue(mockApiResponse);\n\n      const queries: AdminUsersQuery[] = [\n        { search: 'john', status: 'active', role: 'user', verified: true },\n        { page: 2, limit: 50 },\n        { status: 'all' }, // Should be excluded\n        { role: '' }, // Should be excluded\n        { verified: undefined }, // Should be excluded\n      ];\n\n      for (const query of queries) {\n        await fetchAdminUsers(query);\n      }\n\n      expect(mockAdminAPI.getUsers).toHaveBeenCalledTimes(5);\n\n      // Check specific parameter handling\n      expect(mockAdminAPI.getUsers).toHaveBeenNthCalledWith(1, {\n        search: 'john',\n        status: 'active',\n        role: 'user',\n        verified: 'true',\n      });\n\n      expect(mockAdminAPI.getUsers).toHaveBeenNthCalledWith(2, {\n        page: 2,\n        limit: 50,\n      });\n\n      expect(mockAdminAPI.getUsers).toHaveBeenNthCalledWith(3, {});\n      expect(mockAdminAPI.getUsers).toHaveBeenNthCalledWith(4, {});\n      expect(mockAdminAPI.getUsers).toHaveBeenNthCalledWith(5, {});\n    });\n\n    it('should handle API errors and clear cache', async () => {\n      const cache = (global as any).cache;\n      cache.set('test-key', { timestamp: Date.now(), data: {} }); // Pre-populate\n\n      const error = new Error('API failed');\n      mockAdminAPI.getUsers.mockRejectedValue(error);\n\n      await expect(fetchAdminUsers()).rejects.toThrow('API failed');\n\n      expect(mockLogger.error).toHaveBeenCalledWith('Failed to fetch admin users', {\n        error,\n      });\n\n      // Should clear cache on error\n      expect(cache.size).toBe(0);\n    });\n\n    it('should handle non-Error exceptions', async () => {\n      mockAdminAPI.getUsers.mockRejectedValue('String error');\n\n      await expect(fetchAdminUsers()).rejects.toThrow('Failed to fetch admin users');\n\n      expect(mockLogger.error).toHaveBeenCalledWith('Failed to fetch admin users', {\n        error: expect.any(Error),\n      });\n    });\n  });\n\n  describe('performAdminUserAction', () => {\n    beforeEach(() => {\n      // Setup cache with some data\n      const cache = (global as any).cache;\n      cache.set('test-key', { timestamp: Date.now(), data: { users: [], pagination: {} } });\n    });\n\n    it('should suspend user successfully', async () => {\n      mockAdminAPI.suspendUser.mockResolvedValue({ success: true });\n\n      await performAdminUserAction('user123', 'suspend', {\n        reason: 'Violation of terms',\n        durationDays: 7,\n      });\n\n      expect(mockAdminAPI.suspendUser).toHaveBeenCalledWith(\n        'user123',\n        'Violation of terms',\n        7\n      );\n\n      // Should invalidate cache\n      const cache = (global as any).cache;\n      expect(cache.size).toBe(0);\n    });\n\n    it('should activate user successfully', async () => {\n      mockAdminAPI.activateUser.mockResolvedValue({ success: true });\n\n      await performAdminUserAction('user123', 'activate', {\n        reason: 'Appeal approved',\n      });\n\n      expect(mockAdminAPI.activateUser).toHaveBeenCalledWith(\n        'user123',\n        'Appeal approved'\n      );\n    });\n\n    it('should ban user successfully', async () => {\n      mockAdminAPI.banUser.mockResolvedValue({ success: true });\n\n      await performAdminUserAction('user123', 'ban', {\n        reason: 'Severe violation',\n      });\n\n      expect(mockAdminAPI.banUser).toHaveBeenCalledWith(\n        'user123',\n        'Severe violation'\n      );\n    });\n\n    it('should handle unban action (same as activate)', async () => {\n      mockAdminAPI.activateUser.mockResolvedValue({ success: true });\n\n      await performAdminUserAction('user123', 'unban', {\n        reason: 'Reinstated',\n      });\n\n      expect(mockAdminAPI.activateUser).toHaveBeenCalledWith(\n        'user123',\n        'Reinstated'\n      );\n    });\n\n    it('should use default reasons when not provided', async () => {\n      mockAdminAPI.suspendUser.mockResolvedValue({ success: true });\n      mockAdminAPI.activateUser.mockResolvedValue({ success: true });\n      mockAdminAPI.banUser.mockResolvedValue({ success: true });\n\n      await performAdminUserAction('user123', 'suspend');\n      await performAdminUserAction('user456', 'activate');\n      await performAdminUserAction('user789', 'ban');\n\n      expect(mockAdminAPI.suspendUser).toHaveBeenCalledWith(\n        'user123',\n        'User suspended via mobile admin controls',\n        undefined\n      );\n\n      expect(mockAdminAPI.activateUser).toHaveBeenCalledWith(\n        'user456',\n        'User reactivated via mobile admin controls'\n      );\n\n      expect(mockAdminAPI.banUser).toHaveBeenCalledWith(\n        'user789',\n        'User banned via mobile admin controls'\n      );\n    });\n\n    it('should handle API errors and log appropriately', async () => {\n      const error = new Error('Action failed');\n      mockAdminAPI.suspendUser.mockRejectedValue(error);\n\n      await expect(performAdminUserAction('user123', 'suspend')).rejects.toThrow('Action failed');\n\n      expect(mockLogger.error).toHaveBeenCalledWith('Admin user action failed', {\n        action: 'suspend',\n        userId: 'user123',\n        error,\n      });\n    });\n\n    it('should handle non-Error exceptions', async () => {\n      mockAdminAPI.banUser.mockRejectedValue('String error');\n\n      await expect(performAdminUserAction('user123', 'ban')).rejects.toThrow('Failed to ban user');\n\n      expect(mockLogger.error).toHaveBeenCalledWith('Admin user action failed', {\n        action: 'ban',\n        userId: 'user123',\n        error: expect.any(Error),\n      });\n    });\n\n    it('should invalidate cache on successful actions', async () => {\n      const cache = (global as any).cache;\n      cache.set('test-key', { timestamp: Date.now(), data: {} });\n\n      mockAdminAPI.activateUser.mockResolvedValue({ success: true });\n\n      await performAdminUserAction('user123', 'activate');\n\n      expect(cache.size).toBe(0);\n    });\n\n    it('should not invalidate cache on failed actions', async () => {\n      const cache = (global as any).cache;\n      cache.set('test-key', { timestamp: Date.now(), data: {} });\n\n      mockAdminAPI.suspendUser.mockRejectedValue(new Error('Failed'));\n\n      await expect(performAdminUserAction('user123', 'suspend')).rejects.toThrow();\n\n      // Cache should still exist\n      expect(cache.size).toBe(1);\n    });\n  });\n\n  describe('Service Interface', () => {\n    it('should export service methods correctly', () => {\n      expect(adminUsersService.fetchAdminUsers).toBe(fetchAdminUsers);\n      expect(adminUsersService.performAdminUserAction).toBe(performAdminUserAction);\n      expect(adminUsersService.invalidate).toBe(invalidateAdminUsersCache);\n    });\n\n    it('should handle concurrent operations', async () => {\n      mockAdminAPI.getUsers.mockResolvedValue({\n        success: true,\n        data: {\n          users: [],\n          pagination: { page: 1, limit: 20, total: 0, pages: 0 },\n        },\n      });\n\n      const promises = [\n        fetchAdminUsers({ page: 1 }),\n        fetchAdminUsers({ page: 2 }),\n        fetchAdminUsers({ page: 3 }),\n      ];\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(3);\n      expect(mockAdminAPI.getUsers).toHaveBeenCalledTimes(3);\n    });\n\n    it('should handle cache race conditions', async () => {\n      const cache = (global as any).cache;\n      const cacheKey = '{\"page\":\"1\"}';\n\n      // Simulate race condition where cache is set between check and set\n      let callCount = 0;\n      const originalSet = cache.set.bind(cache);\n      cache.set = jest.fn((key, value) => {\n        if (callCount++ === 0) {\n          // First call succeeds\n          return originalSet(key, value);\n        } else {\n          // Second call simulates race condition\n          return originalSet(key, value);\n        }\n      });\n\n      mockAdminAPI.getUsers.mockResolvedValue({\n        success: true,\n        data: {\n          users: [{ _id: 'user1', firstName: 'Test' }],\n          pagination: { page: 1, limit: 20, total: 1, pages: 1 },\n        },\n      });\n\n      // Make concurrent calls\n      const results = await Promise.all([\n        fetchAdminUsers({ page: 1 }),\n        fetchAdminUsers({ page: 1 }),\n      ]);\n\n      expect(results).toHaveLength(2);\n      expect(results[0]).toEqual(results[1]);\n\n      // Restore original method\n      cache.set = originalSet;\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    it('should handle very large result sets', async () => {\n      const largeUsers = Array.from({ length: 1000 }, (_, i) => ({\n        _id: `user${i}`,\n        firstName: `User${i}`,\n        lastName: 'Test',\n        email: `user${i}@example.com`,\n        role: 'user',\n        status: 'active',\n        isVerified: true,\n        createdAt: '2024-01-01T00:00:00Z',\n        pets: Array.from({ length: Math.floor(Math.random() * 5) }, () => ({ id: 'pet' })),\n        matchesCount: Math.floor(Math.random() * 100),\n        messagesCount: Math.floor(Math.random() * 500),\n      }));\n\n      mockAdminAPI.getUsers.mockResolvedValue({\n        success: true,\n        data: {\n          users: largeUsers,\n          pagination: { page: 1, limit: 1000, total: 1000, pages: 1 },\n        },\n      });\n\n      const result = await fetchAdminUsers({ page: 1, limit: 1000 });\n\n      expect(result.users).toHaveLength(1000);\n      expect(result.pagination.total).toBe(1000);\n    });\n\n    it('should handle empty user arrays', async () => {\n      mockAdminAPI.getUsers.mockResolvedValue({\n        success: true,\n        data: {\n          users: [],\n          pagination: { page: 1, limit: 20, total: 0, pages: 0 },\n        },\n      });\n\n      const result = await fetchAdminUsers();\n\n      expect(result.users).toEqual([]);\n      expect(result.pagination.total).toBe(0);\n    });\n\n    it('should handle very long search queries', async () => {\n      const longSearch = 'A'.repeat(1000);\n      mockAdminAPI.getUsers.mockResolvedValue({\n        success: true,\n        data: {\n          users: [],\n          pagination: { page: 1, limit: 20, total: 0, pages: 0 },\n        },\n      });\n\n      await fetchAdminUsers({ search: longSearch });\n\n      expect(mockAdminAPI.getUsers).toHaveBeenCalledWith({\n        search: longSearch,\n      });\n    });\n\n    it('should handle special characters in queries', async () => {\n      const specialQueries = [\n        { search: 'José María ñoño' },\n        { search: 'café & naïve résumé 🚀' },\n        { role: 'admin@#$%^&*()' },\n        { search: 'user@example.com' },\n      ];\n\n      mockAdminAPI.getUsers.mockResolvedValue({\n        success: true,\n        data: {\n          users: [],\n          pagination: { page: 1, limit: 20, total: 0, pages: 0 },\n        },\n      });\n\n      for (const query of specialQueries) {\n        await fetchAdminUsers(query);\n      }\n\n      expect(mockAdminAPI.getUsers).toHaveBeenCalledTimes(4);\n    });\n\n    it('should handle extreme pagination values', async () => {\n      mockAdminAPI.getUsers.mockResolvedValue({\n        success: true,\n        data: {\n          users: [],\n          pagination: { page: 1, limit: 20, total: 0, pages: 0 },\n        },\n      });\n\n      const extremeQueries = [\n        { page: 999999, limit: 10000 },\n        { page: 0, limit: 0 },\n        { page: -1, limit: -10 },\n      ];\n\n      for (const query of extremeQueries) {\n        await fetchAdminUsers(query);\n      }\n\n      // Should handle gracefully without crashing\n      expect(mockAdminAPI.getUsers).toHaveBeenCalledTimes(3);\n    });\n\n    it('should handle malformed API responses', async () => {\n      const malformedResponses = [\n        { success: true, data: null },\n        { success: true, data: { users: null, pagination: null } },\n        { success: true, data: { users: 'not an array', pagination: {} } },\n        { success: false },\n        null,\n        undefined,\n        'string response',\n      ];\n\n      for (const response of malformedResponses) {\n        mockAdminAPI.getUsers.mockResolvedValueOnce(response as any);\n\n        const result = await fetchAdminUsers();\n\n        // Should handle gracefully and return mapped result\n        expect(result).toHaveProperty('users');\n        expect(result).toHaveProperty('pagination');\n        expect(Array.isArray(result.users)).toBe(true);\n      }\n    });\n\n    it('should handle cache corruption', () => {\n      const cache = (global as any).cache;\n\n      // Add corrupted cache entries\n      cache.set('corrupted1', null);\n      cache.set('corrupted2', undefined);\n      cache.set('corrupted3', { timestamp: 'invalid' });\n      cache.set('corrupted4', { data: null });\n\n      // Should not crash when accessing cache\n      expect(() => {\n        const isCacheValid = (global as any).isCacheValid;\n        expect(isCacheValid(null)).toBe(false);\n        expect(isCacheValid(undefined)).toBe(false);\n        expect(isCacheValid({ timestamp: 'invalid' })).toBe(false);\n        expect(isCacheValid({ data: null })).toBe(false);\n      }).not.toThrow();\n    });\n\n    it('should handle memory pressure with large caches', () => {\n      const cache = (global as any).cache;\n\n      // Add many cache entries\n      for (let i = 0; i < 1000; i++) {\n        cache.set(`key${i}`, {\n          timestamp: Date.now(),\n          data: {\n            users: Array.from({ length: 100 }, () => ({\n              id: `user${Math.random()}`,\n              firstName: 'Test',\n              lastName: 'User',\n              email: 'test@example.com',\n              role: 'user',\n              status: 'active',\n              verified: true,\n              createdAt: '2024-01-01T00:00:00Z',\n              petsCount: 1,\n              matchesCount: 5,\n              messagesCount: 10,\n            })),\n            pagination: { page: 1, limit: 100, total: 100, pages: 1 },\n          },\n        });\n      }\n\n      expect(cache.size).toBe(1000);\n\n      // Clearing should work efficiently\n      invalidateAdminUsersCache();\n      expect(cache.size).toBe(0);\n    });\n\n    it('should handle rapid cache invalidations', () => {\n      const cache = (global as any).cache;\n\n      // Rapid add/invalidate cycles\n      for (let i = 0; i < 100; i++) {\n        cache.set(`temp${i}`, { timestamp: Date.now(), data: {} });\n        invalidateAdminUsersCache();\n        expect(cache.size).toBe(0);\n      }\n    });\n\n    it('should handle concurrent cache operations', async () => {\n      const cacheOperations = Array.from({ length: 50 }, async (_, i) => {\n        const cache = (global as any).cache;\n        cache.set(`concurrent${i}`, { timestamp: Date.now(), data: { users: [], pagination: {} } });\n        await new Promise(resolve => setTimeout(resolve, 1)); // Small delay\n        invalidateAdminUsersCache();\n      });\n\n      await Promise.all(cacheOperations);\n\n      expect((global as any).cache.size).toBe(0);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}