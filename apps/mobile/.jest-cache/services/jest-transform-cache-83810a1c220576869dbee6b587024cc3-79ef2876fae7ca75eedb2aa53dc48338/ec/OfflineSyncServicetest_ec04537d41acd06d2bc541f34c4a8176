b7c400fe7d812a2e0dcd0d478041b645
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn()
  };
});
_getJestObj().mock('@react-native-community/netinfo', function () {
  return {
    addEventListener: _globals.jest.fn(),
    fetch: _globals.jest.fn()
  };
});
_getJestObj().mock("../api", function () {
  return {
    api: {
      request: _globals.jest.fn()
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _OfflineSyncService = require("../OfflineSyncService");
var _api = require("../api");
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockNetInfo = _netinfo.default;
var mockApi = _api.api;
_globals.jest.useFakeTimers();
var mockSetInterval = _globals.jest.spyOn(global, 'setInterval');
var mockClearInterval = _globals.jest.spyOn(global, 'clearInterval');
(0, _globals.describe)('OfflineSyncService', function () {
  var service;
  var mockNetInfoListener;
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    _OfflineSyncService.OfflineSyncService.instance = undefined;
    mockNetInfoListener = _globals.jest.fn();
    mockNetInfo.addEventListener.mockImplementation(function (listener) {
      mockNetInfoListener = listener;
      return {
        remove: _globals.jest.fn()
      };
    });
    mockNetInfo.fetch.mockResolvedValue({
      isConnected: true,
      type: 'wifi',
      isInternetReachable: true
    });
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    service = _OfflineSyncService.OfflineSyncService.getInstance();
  });
  (0, _globals.afterEach)(function () {
    _globals.jest.clearAllTimers();
    mockSetInterval.mockClear();
    mockClearInterval.mockClear();
  });
  (0, _globals.describe)('Singleton Pattern', function () {
    (0, _globals.it)('should return the same instance', function () {
      var instance1 = _OfflineSyncService.OfflineSyncService.getInstance();
      var instance2 = _OfflineSyncService.OfflineSyncService.getInstance();
      (0, _globals.expect)(instance1).toBe(instance2);
      (0, _globals.expect)(instance1).toBe(_OfflineSyncService.offlineSync);
    });
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize successfully', (0, _asyncToGenerator2.default)(function* () {
      var storedQueue = JSON.stringify([{
        id: 'test-item',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }]);
      mockAsyncStorage.getItem.mockImplementation(function (key) {
        if (key === '@pawfectmatch_offline_queue') {
          return Promise.resolve(storedQueue);
        }
        return Promise.resolve(null);
      });
      yield service.initialize();
      (0, _globals.expect)(mockNetInfo.addEventListener).toHaveBeenCalled();
      (0, _globals.expect)(mockNetInfo.fetch).toHaveBeenCalled();
      (0, _globals.expect)(mockAsyncStorage.getItem).toHaveBeenCalledWith('@pawfectmatch_offline_queue');
      (0, _globals.expect)(service.queue).toHaveLength(1);
      (0, _globals.expect)(service.isInitialized).toBe(true);
    }));
    (0, _globals.it)('should handle initialization errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));
      yield service.initialize();
      (0, _globals.expect)(service.isInitialized).toBe(true);
      (0, _globals.expect)(service.queue).toEqual([]);
    }));
    (0, _globals.it)('should not initialize twice', (0, _asyncToGenerator2.default)(function* () {
      service.isInitialized = true;
      yield service.initialize();
      (0, _globals.expect)(mockNetInfo.addEventListener).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should start background sync on initialization', (0, _asyncToGenerator2.default)(function* () {
      yield service.initialize();
      (0, _globals.expect)(mockSetInterval).toHaveBeenCalledWith(_globals.expect.any(Function), 30000);
    }));
  });
  (0, _globals.describe)('Queue Management - API Calls', function () {
    (0, _globals.beforeEach)((0, _asyncToGenerator2.default)(function* () {
      yield service.initialize();
    }));
    (0, _globals.it)('should queue API call with default parameters', (0, _asyncToGenerator2.default)(function* () {
      var id = yield service.queueApiCall('/test-endpoint');
      (0, _globals.expect)(id).toMatch(/^[\d_]+$/);
      (0, _globals.expect)(service.queue).toHaveLength(1);
      var queuedItem = service.queue[0];
      (0, _globals.expect)(queuedItem).toEqual({
        id: id,
        type: 'api',
        endpoint: '/test-endpoint',
        method: 'GET',
        data: {},
        timestamp: _globals.expect.any(Number),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      });
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('@pawfectmatch_offline_queue', _globals.expect.any(String));
    }));
    (0, _globals.it)('should queue API call with custom parameters', (0, _asyncToGenerator2.default)(function* () {
      var testData = {
        key: 'value'
      };
      var id = yield service.queueApiCall('/test-endpoint', 'POST', testData, 'high', 'merge');
      var queuedItem = service.queue[0];
      (0, _globals.expect)(queuedItem.method).toBe('POST');
      (0, _globals.expect)(queuedItem.data).toBe(testData);
      (0, _globals.expect)(queuedItem.priority).toBe('high');
      (0, _globals.expect)(queuedItem.onConflict).toBe('merge');
    }));
    (0, _globals.it)('should process queue immediately when online', (0, _asyncToGenerator2.default)(function* () {
      service.isOnline = true;
      mockApi.request.mockResolvedValue({
        success: true
      });
      yield service.queueApiCall('/test-endpoint');
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/test-endpoint');
      (0, _globals.expect)(service.queue).toHaveLength(0);
    }));
    (0, _globals.it)('should not process queue when offline', (0, _asyncToGenerator2.default)(function* () {
      service.isOnline = false;
      yield service.queueApiCall('/test-endpoint');
      (0, _globals.expect)(mockApi.request).not.toHaveBeenCalled();
      (0, _globals.expect)(service.queue).toHaveLength(1);
    }));
  });
  (0, _globals.describe)('Queue Management - User Actions', function () {
    (0, _globals.beforeEach)((0, _asyncToGenerator2.default)(function* () {
      yield service.initialize();
    }));
    (0, _globals.it)('should queue user action', (0, _asyncToGenerator2.default)(function* () {
      var actionData = {
        action: 'swipe',
        direction: 'right',
        petId: 'pet123'
      };
      var id = yield service.queueUserAction('swipe', actionData, 'high');
      (0, _globals.expect)(service.queue).toHaveLength(1);
      var queuedItem = service.queue[0];
      (0, _globals.expect)(queuedItem.type).toBe('user_action');
      (0, _globals.expect)(queuedItem.endpoint).toBe('/actions/swipe');
      (0, _globals.expect)(queuedItem.method).toBe('POST');
      (0, _globals.expect)(queuedItem.data).toBe(actionData);
      (0, _globals.expect)(queuedItem.priority).toBe('high');
    }));
  });
  (0, _globals.describe)('Sync Status', function () {
    (0, _globals.beforeEach)((0, _asyncToGenerator2.default)(function* () {
      yield service.initialize();
    }));
    (0, _globals.it)('should return correct sync status', function () {
      service.isOnline = true;
      service.syncInProgress = false;
      service.queue = [{
        retryCount: 0
      }, {
        retryCount: 0
      }, {
        retryCount: 3
      }];
      var status = service.getSyncStatus();
      (0, _globals.expect)(status).toEqual({
        isOnline: true,
        lastSyncTime: _globals.expect.any(Number),
        pendingItems: 3,
        failedItems: 1,
        isSyncing: false
      });
    });
  });
  (0, _globals.describe)('Manual Sync', function () {
    (0, _globals.beforeEach)((0, _asyncToGenerator2.default)(function* () {
      yield service.initialize();
    }));
    (0, _globals.it)('should sync when online', (0, _asyncToGenerator2.default)(function* () {
      service.isOnline = true;
      service.queue = [{
        id: 'test-item',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      mockApi.request.mockResolvedValue({
        success: true
      });
      yield service.syncNow();
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/test');
      (0, _globals.expect)(service.queue).toHaveLength(0);
    }));
    (0, _globals.it)('should throw error when offline', (0, _asyncToGenerator2.default)(function* () {
      service.isOnline = false;
      yield (0, _globals.expect)(service.syncNow()).rejects.toThrow('Cannot sync while offline');
    }));
  });
  (0, _globals.describe)('Failed Items Management', function () {
    (0, _globals.beforeEach)((0, _asyncToGenerator2.default)(function* () {
      yield service.initialize();
    }));
    (0, _globals.it)('should clear failed items from queue', (0, _asyncToGenerator2.default)(function* () {
      service.queue = [{
        id: 'item1',
        retryCount: 0
      }, {
        id: 'item2',
        retryCount: 3
      }, {
        id: 'item3',
        retryCount: 4
      }];
      yield service.clearFailedItems();
      (0, _globals.expect)(service.queue).toHaveLength(1);
      (0, _globals.expect)(service.queue[0].id).toBe('item1');
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Network Monitoring', function () {
    (0, _globals.beforeEach)((0, _asyncToGenerator2.default)(function* () {
      yield service.initialize();
    }));
    (0, _globals.it)('should handle coming online', function () {
      service.isOnline = false;
      mockApi.request.mockResolvedValue({
        success: true
      });
      mockNetInfoListener({
        isConnected: true,
        type: 'wifi',
        isInternetReachable: true
      });
      (0, _globals.expect)(service.isOnline).toBe(true);
    });
    (0, _globals.it)('should handle going offline', function () {
      service.isOnline = true;
      mockNetInfoListener({
        isConnected: false,
        type: 'none',
        isInternetReachable: false
      });
      (0, _globals.expect)(service.isOnline).toBe(false);
    });
    (0, _globals.it)('should start queue processing when coming online', function () {
      service.isOnline = false;
      service.queue = [{
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      mockApi.request.mockResolvedValue({
        success: true
      });
      mockNetInfoListener({
        isConnected: true,
        type: 'wifi',
        isInternetReachable: true
      });
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/test');
    });
  });
  (0, _globals.describe)('Queue Processing', function () {
    (0, _globals.beforeEach)((0, _asyncToGenerator2.default)(function* () {
      yield service.initialize();
      service.isOnline = true;
    }));
    (0, _globals.it)('should not process queue when offline', (0, _asyncToGenerator2.default)(function* () {
      service.isOnline = false;
      service.queue = [{
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      yield service.processQueue();
      (0, _globals.expect)(mockApi.request).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should not process queue when already syncing', (0, _asyncToGenerator2.default)(function* () {
      service.syncInProgress = true;
      service.queue = [{
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      yield service.processQueue();
      (0, _globals.expect)(mockApi.request).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should not process empty queue', (0, _asyncToGenerator2.default)(function* () {
      service.queue = [];
      yield service.processQueue();
      (0, _globals.expect)(mockApi.request).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should process queue items by priority', (0, _asyncToGenerator2.default)(function* () {
      service.queue = [{
        id: 'low',
        type: 'api',
        endpoint: '/low',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'low',
        onConflict: 'overwrite'
      }, {
        id: 'critical',
        type: 'api',
        endpoint: '/critical',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'critical',
        onConflict: 'overwrite'
      }, {
        id: 'normal',
        type: 'api',
        endpoint: '/normal',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      mockApi.request.mockResolvedValue({
        success: true
      });
      yield service.processQueue();
      (0, _globals.expect)(mockApi.request).toHaveBeenNthCalledWith(1, '/critical');
      (0, _globals.expect)(mockApi.request).toHaveBeenNthCalledWith(2, '/normal');
      (0, _globals.expect)(mockApi.request).toHaveBeenNthCalledWith(3, '/low');
    }));
    (0, _globals.it)('should handle successful item processing', (0, _asyncToGenerator2.default)(function* () {
      service.queue = [{
        id: 'success',
        type: 'api',
        endpoint: '/success',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      mockApi.request.mockResolvedValue({
        success: true
      });
      yield service.processQueue();
      (0, _globals.expect)(service.queue).toHaveLength(0);
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('@pawfectmatch_sync_status', _globals.expect.any(String));
    }));
    (0, _globals.it)('should handle failed items with retry', (0, _asyncToGenerator2.default)(function* () {
      service.queue = [{
        id: 'fail',
        type: 'api',
        endpoint: '/fail',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      mockApi.request.mockRejectedValue(new Error('API Error'));
      yield service.processQueue();
      (0, _globals.expect)(service.queue).toHaveLength(1);
      (0, _globals.expect)(service.queue[0].retryCount).toBe(1);
    }));
    (0, _globals.it)('should remove items that exceed max retry count', (0, _asyncToGenerator2.default)(function* () {
      service.queue = [{
        id: 'max-retries',
        type: 'api',
        endpoint: '/fail',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 2,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      mockApi.request.mockRejectedValue(new Error('API Error'));
      yield service.processQueue();
      (0, _globals.expect)(service.queue).toHaveLength(0);
    }));
  });
  (0, _globals.describe)('Queue Item Processing', function () {
    (0, _globals.it)('should handle GET requests', (0, _asyncToGenerator2.default)(function* () {
      var item = {
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      };
      mockApi.request.mockResolvedValue({
        success: true
      });
      yield service.processQueueItem(item);
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/test');
    }));
    (0, _globals.it)('should handle POST requests with data', (0, _asyncToGenerator2.default)(function* () {
      var item = {
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'POST',
        data: {
          key: 'value'
        },
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      };
      mockApi.request.mockResolvedValue({
        success: true
      });
      yield service.processQueueItem(item);
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/test', {
        method: 'POST',
        body: JSON.stringify({
          key: 'value'
        })
      });
    }));
    (0, _globals.it)('should handle PUT and DELETE requests', (0, _asyncToGenerator2.default)(function* () {
      var putItem = {
        id: 'put',
        type: 'api',
        endpoint: '/test',
        method: 'PUT',
        data: {
          update: true
        },
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      };
      var deleteItem = {
        id: 'delete',
        type: 'api',
        endpoint: '/test',
        method: 'DELETE',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      };
      mockApi.request.mockResolvedValue({
        success: true
      });
      yield service.processQueueItem(putItem);
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/test', {
        method: 'PUT',
        body: JSON.stringify({
          update: true
        })
      });
      yield service.processQueueItem(deleteItem);
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/test', {
        method: 'DELETE'
      });
    }));
    (0, _globals.it)('should throw error for unsupported HTTP methods', (0, _asyncToGenerator2.default)(function* () {
      var item = {
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'PATCH',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      };
      yield (0, _globals.expect)(service.processQueueItem(item)).rejects.toThrow('Unsupported HTTP method: PATCH');
    }));
  });
  (0, _globals.describe)('Event Listeners', function () {
    (0, _globals.beforeEach)((0, _asyncToGenerator2.default)(function* () {
      yield service.initialize();
    }));
    (0, _globals.it)('should add and remove sync listeners', function () {
      var listener = _globals.jest.fn();
      var unsubscribe = service.addSyncListener(listener);
      (0, _globals.expect)(service.syncListeners).toContain(listener);
      unsubscribe();
      (0, _globals.expect)(service.syncListeners).not.toContain(listener);
    });
    (0, _globals.it)('should notify listeners of status changes', function () {
      var listener = _globals.jest.fn();
      service.addSyncListener(listener);
      service.notifyListeners();
      (0, _globals.expect)(listener).toHaveBeenCalledWith(service.getSyncStatus());
    });
    (0, _globals.it)('should handle listener errors gracefully', function () {
      var errorListener = _globals.jest.fn(function () {
        throw new Error('Listener error');
      });
      var goodListener = _globals.jest.fn();
      service.addSyncListener(errorListener);
      service.addSyncListener(goodListener);
      service.notifyListeners();
      (0, _globals.expect)(goodListener).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Background Sync', function () {
    (0, _globals.beforeEach)((0, _asyncToGenerator2.default)(function* () {
      yield service.initialize();
    }));
    (0, _globals.it)('should trigger sync when online and queue not empty', function () {
      service.isOnline = true;
      service.syncInProgress = false;
      service.queue = [{
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      mockApi.request.mockResolvedValue({
        success: true
      });
      _globals.jest.runOnlyPendingTimers();
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledWith('/test');
    });
    (0, _globals.it)('should not trigger sync when offline', function () {
      service.isOnline = false;
      service.queue = [{
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      _globals.jest.runOnlyPendingTimers();
      (0, _globals.expect)(mockApi.request).not.toHaveBeenCalled();
    });
    (0, _globals.it)('should not trigger sync when already syncing', function () {
      service.isOnline = true;
      service.syncInProgress = true;
      service.queue = [{
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      _globals.jest.runOnlyPendingTimers();
      (0, _globals.expect)(mockApi.request).not.toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Persistence', function () {
    (0, _globals.it)('should load queue from storage', (0, _asyncToGenerator2.default)(function* () {
      var storedQueue = JSON.stringify([{
        id: 'stored-item',
        type: 'api',
        endpoint: '/stored',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }]);
      mockAsyncStorage.getItem.mockResolvedValue(storedQueue);
      yield service.loadQueue();
      (0, _globals.expect)(service.queue).toHaveLength(1);
      (0, _globals.expect)(service.queue[0].id).toBe('stored-item');
    }));
    (0, _globals.it)('should handle corrupted queue data', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('invalid json');
      yield service.loadQueue();
      (0, _globals.expect)(service.queue).toEqual([]);
    }));
    (0, _globals.it)('should persist queue to storage', (0, _asyncToGenerator2.default)(function* () {
      service.queue = [{
        id: 'persist-test',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      yield service.persistQueue();
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('@pawfectmatch_offline_queue', _globals.expect.any(String));
    }));
    (0, _globals.it)('should handle persistence errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockRejectedValue(new Error('Storage full'));
      yield service.persistQueue();
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Error Handling and Logging', function () {
    (0, _globals.it)('should log queue operations', (0, _asyncToGenerator2.default)(function* () {
      var _require = require('@pawfectmatch/core'),
        logger = _require.logger;
      yield service.queueApiCall('/test-endpoint');
      (0, _globals.expect)(logger.info).toHaveBeenCalledWith('API call queued for offline sync', _globals.expect.objectContaining({
        endpoint: '/test-endpoint',
        method: 'GET',
        priority: 'normal'
      }));
    }));
    (0, _globals.it)('should log sync completion', (0, _asyncToGenerator2.default)(function* () {
      var _require2 = require('@pawfectmatch/core'),
        logger = _require2.logger;
      service.isOnline = true;
      service.queue = [{
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      mockApi.request.mockResolvedValue({
        success: true
      });
      yield service.processQueue();
      (0, _globals.expect)(logger.info).toHaveBeenCalledWith('Queue processing completed', _globals.expect.objectContaining({
        processed: 1,
        failed: 0,
        remaining: 0
      }));
    }));
    (0, _globals.it)('should log failed operations', (0, _asyncToGenerator2.default)(function* () {
      var _require3 = require('@pawfectmatch/core'),
        logger = _require3.logger;
      mockApi.request.mockRejectedValue(new Error('API Error'));
      var item = {
        id: 'fail-test',
        type: 'api',
        endpoint: '/fail',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      };
      yield (0, _globals.expect)(service.processQueueItem(item)).rejects.toThrow();
      (0, _globals.expect)(logger.error).toHaveBeenCalledWith('Failed to process queue item', _globals.expect.objectContaining({
        itemId: 'fail-test',
        endpoint: '/fail',
        error: _globals.expect.any(Error)
      }));
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty queue processing', (0, _asyncToGenerator2.default)(function* () {
      service.isOnline = true;
      service.queue = [];
      yield service.processQueue();
      (0, _globals.expect)(service.syncInProgress).toBe(false);
    }));
    (0, _globals.it)('should handle network state changes during processing', (0, _asyncToGenerator2.default)(function* () {
      service.isOnline = true;
      service.queue = [{
        id: 'test',
        type: 'api',
        endpoint: '/test',
        method: 'GET',
        data: {},
        timestamp: Date.now(),
        retryCount: 0,
        priority: 'normal',
        onConflict: 'overwrite'
      }];
      mockApi.request.mockImplementation((0, _asyncToGenerator2.default)(function* () {
        service.isOnline = false;
        return {
          success: true
        };
      }));
      yield service.processQueue();
      (0, _globals.expect)(service.syncInProgress).toBe(false);
    }));
    (0, _globals.it)('should handle large queues efficiently', (0, _asyncToGenerator2.default)(function* () {
      service.isOnline = true;
      var largeQueue = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `item-${i}`,
          type: 'api',
          endpoint: `/test/${i}`,
          method: 'GET',
          data: {},
          timestamp: Date.now(),
          retryCount: 0,
          priority: 'normal',
          onConflict: 'overwrite'
        };
      });
      service.queue = largeQueue;
      mockApi.request.mockResolvedValue({
        success: true
      });
      yield service.processQueue();
      (0, _globals.expect)(mockApi.request).toHaveBeenCalledTimes(100);
      (0, _globals.expect)(service.queue).toHaveLength(0);
    }));
    (0, _globals.it)('should handle malformed stored queue data', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('{"invalid": json}');
      yield service.loadQueue();
      (0, _globals.expect)(service.queue).toEqual([]);
    }));
    (0, _globals.it)('should handle concurrent queue operations', (0, _asyncToGenerator2.default)(function* () {
      service.isOnline = true;
      var promises = [service.queueApiCall('/test1'), service.queueApiCall('/test2'), service.queueUserAction('action1', {
        data: 1
      }), service.queueUserAction('action2', {
        data: 2
      })];
      yield Promise.all(promises);
      (0, _globals.expect)(service.queue).toHaveLength(4);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,