087749906099585791c98292015d2998
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _storage = require("../storage");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
(0, _globals.describe)('Storage Service', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('Happy Path - readJSON', function () {
    (0, _globals.it)('should read and parse valid JSON', (0, _asyncToGenerator2.default)(function* () {
      var mockData = {
        name: 'test',
        count: 42
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(mockData));
      var result = yield (0, _storage.readJSON)('test_key', {});
      (0, _globals.expect)(result).toEqual(mockData);
      (0, _globals.expect)(mockAsyncStorage.getItem).toHaveBeenCalledWith('test_key');
    }));
    (0, _globals.it)('should return fallback for missing key', (0, _asyncToGenerator2.default)(function* () {
      var fallback = {
        default: true
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce(null);
      var result = yield (0, _storage.readJSON)('missing_key', fallback);
      (0, _globals.expect)(result).toEqual(fallback);
    }));
    (0, _globals.it)('should return fallback for null value', (0, _asyncToGenerator2.default)(function* () {
      var fallback = {
        default: true
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce(null);
      var result = yield (0, _storage.readJSON)('null_key', fallback);
      (0, _globals.expect)(result).toEqual(fallback);
    }));
    (0, _globals.it)('should handle complex nested objects', (0, _asyncToGenerator2.default)(function* () {
      var complexData = {
        user: {
          id: '123',
          profile: {
            name: 'John',
            age: 30
          }
        },
        pets: [{
          id: '1',
          name: 'Fluffy'
        }, {
          id: '2',
          name: 'Max'
        }],
        settings: {
          notifications: true,
          theme: 'dark'
        }
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(complexData));
      var result = yield (0, _storage.readJSON)('complex_key', {});
      (0, _globals.expect)(result).toEqual(complexData);
      (0, _globals.expect)(result.user.profile.name).toBe('John');
      (0, _globals.expect)(result.pets).toHaveLength(2);
    }));
    (0, _globals.it)('should handle arrays correctly', (0, _asyncToGenerator2.default)(function* () {
      var arrayData = [1, 2, 3, {
        nested: 'value'
      }];
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(arrayData));
      var result = yield (0, _storage.readJSON)('array_key', []);
      (0, _globals.expect)(Array.isArray(result)).toBe(true);
      (0, _globals.expect)(result).toHaveLength(4);
      (0, _globals.expect)(result[3].nested).toBe('value');
    }));
    (0, _globals.it)('should handle primitive types', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(123));
      var result = yield (0, _storage.readJSON)('number_key', 0);
      (0, _globals.expect)(result).toBe(123);
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify('string'));
      var strResult = yield (0, _storage.readJSON)('string_key', '');
      (0, _globals.expect)(strResult).toBe('string');
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(true));
      var boolResult = yield (0, _storage.readJSON)('bool_key', false);
      (0, _globals.expect)(boolResult).toBe(true);
    }));
  });
  (0, _globals.describe)('Happy Path - writeJSON', function () {
    (0, _globals.it)('should write simple object to storage', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockResolvedValueOnce();
      var data = {
        name: 'test',
        count: 42
      };
      yield (0, _storage.writeJSON)('test_key', data);
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('test_key', JSON.stringify(data));
    }));
    (0, _globals.it)('should write complex nested object', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockResolvedValueOnce();
      var complexData = {
        user: {
          id: '123',
          profile: {
            name: 'John'
          }
        },
        pets: [{
          id: '1',
          name: 'Fluffy'
        }]
      };
      yield (0, _storage.writeJSON)('complex_key', complexData);
      var callArgs = mockAsyncStorage.setItem.mock.calls[0];
      (0, _globals.expect)(callArgs[0]).toBe('complex_key');
      (0, _globals.expect)(JSON.parse(callArgs[1])).toEqual(complexData);
    }));
    (0, _globals.it)('should write arrays to storage', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockResolvedValueOnce();
      var arrayData = [1, 2, 3, 'test'];
      yield (0, _storage.writeJSON)('array_key', arrayData);
      var callArgs = mockAsyncStorage.setItem.mock.calls[0];
      (0, _globals.expect)(JSON.parse(callArgs[1])).toEqual(arrayData);
    }));
    (0, _globals.it)('should handle null and undefined values', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockResolvedValueOnce();
      yield (0, _storage.writeJSON)('null_key', null);
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('null_key', 'null');
    }));
    (0, _globals.it)('should handle primitive types', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockResolvedValueOnce();
      yield (0, _storage.writeJSON)('number_key', 123);
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('number_key', '123');
      mockAsyncStorage.setItem.mockResolvedValueOnce();
      yield (0, _storage.writeJSON)('string_key', 'test');
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('string_key', '"test"');
      mockAsyncStorage.setItem.mockResolvedValueOnce();
      yield (0, _storage.writeJSON)('bool_key', true);
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('bool_key', 'true');
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should return fallback on JSON parse error', (0, _asyncToGenerator2.default)(function* () {
      var fallback = {
        default: true
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce('invalid json {');
      var result = yield (0, _storage.readJSON)('invalid_key', fallback);
      (0, _globals.expect)(result).toEqual(fallback);
    }));
    (0, _globals.it)('should return fallback on storage read error', (0, _asyncToGenerator2.default)(function* () {
      var fallback = {
        default: true
      };
      mockAsyncStorage.getItem.mockRejectedValueOnce(new Error('Read failed'));
      var result = yield (0, _storage.readJSON)('error_key', fallback);
      (0, _globals.expect)(result).toEqual(fallback);
    }));
    (0, _globals.it)('should handle write errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockRejectedValueOnce(new Error('Write failed'));
      yield (0, _globals.expect)((0, _storage.writeJSON)('error_key', {
        data: 'test'
      })).rejects.toThrow('Write failed');
    }));
    (0, _globals.it)('should handle circular references in writeJSON', (0, _asyncToGenerator2.default)(function* () {
      var circularData = {
        name: 'test'
      };
      circularData.self = circularData;
      yield (0, _globals.expect)((0, _storage.writeJSON)('circular_key', circularData)).rejects.toThrow();
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty strings', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValueOnce('');
      var result = yield (0, _storage.readJSON)('empty_key', {
        default: true
      });
      (0, _globals.expect)(result).toEqual({
        default: true
      });
    }));
    (0, _globals.it)('should handle very large objects', (0, _asyncToGenerator2.default)(function* () {
      var largeData = {
        data: 'x'.repeat(10000)
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(largeData));
      var result = yield (0, _storage.readJSON)('large_key', {});
      (0, _globals.expect)(result.data.length).toBe(10000);
    }));
    (0, _globals.it)('should handle empty objects', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify({}));
      var result = yield (0, _storage.readJSON)('empty_obj_key', {
        default: true
      });
      (0, _globals.expect)(result).toEqual({});
    }));
    (0, _globals.it)('should handle special characters in keys', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        special: 'value with "quotes" and \n newlines'
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(data));
      var result = yield (0, _storage.readJSON)('special_chars_key', {});
      (0, _globals.expect)(result.special).toBe('value with "quotes" and \n newlines');
    }));
    (0, _globals.it)('should handle unicode characters', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        unicode: 'Hello ‰∏ñÁïå üåç'
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(data));
      var result = yield (0, _storage.readJSON)('unicode_key', {});
      (0, _globals.expect)(result.unicode).toBe('Hello ‰∏ñÁïå üåç');
    }));
    (0, _globals.it)('should handle dates', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        date: new Date().toISOString(),
        timestamp: Date.now()
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(data));
      var result = yield (0, _storage.readJSON)('date_key', {});
      (0, _globals.expect)(result.date).toBeDefined();
      (0, _globals.expect)(typeof result.timestamp).toBe('number');
    }));
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should read and write data correctly', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        name: 'test',
        version: '1.0'
      };
      mockAsyncStorage.setItem.mockResolvedValueOnce();
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(data));
      yield (0, _storage.writeJSON)('integration_key', data);
      var result = yield (0, _storage.readJSON)('integration_key', {});
      (0, _globals.expect)(result).toEqual(data);
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('integration_key', JSON.stringify(data));
      (0, _globals.expect)(mockAsyncStorage.getItem).toHaveBeenCalledWith('integration_key');
    }));
    (0, _globals.it)('should handle multiple keys correctly', (0, _asyncToGenerator2.default)(function* () {
      var data1 = {
        key1: 'value1'
      };
      var data2 = {
        key2: 'value2'
      };
      mockAsyncStorage.setItem.mockResolvedValue();
      mockAsyncStorage.getItem.mockImplementation(function (key) {
        if (key === 'multi_key1') return Promise.resolve(JSON.stringify(data1));
        if (key === 'multi_key2') return Promise.resolve(JSON.stringify(data2));
        return Promise.resolve(null);
      });
      yield (0, _storage.writeJSON)('multi_key1', data1);
      yield (0, _storage.writeJSON)('multi_key2', data2);
      var result1 = yield (0, _storage.readJSON)('multi_key1', {});
      var result2 = yield (0, _storage.readJSON)('multi_key2', {});
      (0, _globals.expect)(result1).toEqual(data1);
      (0, _globals.expect)(result2).toEqual(data2);
    }));
  });
  (0, _globals.describe)('Type Safety', function () {
    (0, _globals.it)('should maintain type safety for readJSON', (0, _asyncToGenerator2.default)(function* () {
      var mockData = {
        name: 'John',
        age: 30
      };
      mockAsyncStorage.getItem.mockResolvedValueOnce(JSON.stringify(mockData));
      var result = yield (0, _storage.readJSON)('typed_key', {
        name: '',
        age: 0
      });
      (0, _globals.expect)(typeof result.name).toBe('string');
      (0, _globals.expect)(typeof result.age).toBe('number');
    }));
    (0, _globals.it)('should maintain type safety for writeJSON', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        id: '123',
        value: 42
      };
      mockAsyncStorage.setItem.mockResolvedValueOnce();
      yield (0, _storage.writeJSON)('typed_write_key', data);
      var callArgs = mockAsyncStorage.setItem.mock.calls[0];
      var written = JSON.parse(callArgs[1]);
      (0, _globals.expect)(typeof written.id).toBe('string');
      (0, _globals.expect)(typeof written.value).toBe('number');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,