b113a22eb979d11e7ec320389ff815e8
"use strict";

_getJestObj().mock("../api", function () {
  return {
    request: _globals.jest.fn(),
    api: {
      post: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../logger", function () {
  return {
    logger: {
      warn: _globals.jest.fn(),
      error: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _analyticsService = require("../analyticsService");
var _api = require("../api");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRequest = _api.request;
(0, _globals.describe)('Analytics Service', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('Happy Path - Basic Tracking', function () {
    (0, _globals.it)('should track event successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      yield (0, _analyticsService.track)('test_event', {
        property: 'value'
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/admin/analytics/track', {
        method: 'POST',
        body: {
          event: 'test_event',
          props: {
            property: 'value'
          }
        }
      });
    }));
    (0, _globals.it)('should track event without properties', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      yield (0, _analyticsService.track)('simple_event');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/admin/analytics/track', {
        method: 'POST',
        body: {
          event: 'simple_event',
          props: undefined
        }
      });
    }));
    (0, _globals.it)('should track screen views', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      (0, _analyticsService.trackScreenView)('HomeScreen', {
        tab: 'main'
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/admin/analytics/track', {
        method: 'POST',
        body: {
          event: 'screen_view',
          props: {
            screen: 'HomeScreen',
            tab: 'main'
          }
        }
      });
    }));
    (0, _globals.it)('should track user actions', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      (0, _analyticsService.trackUserAction)('button_click', {
        buttonId: 'submit'
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/admin/analytics/track', {
        method: 'POST',
        body: {
          event: 'user_action',
          props: {
            action: 'button_click',
            buttonId: 'submit'
          }
        }
      });
    }));
  });
  (0, _globals.describe)('Happy Path - Event Constants', function () {
    (0, _globals.it)('should have auth event constants', function () {
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.USER_SIGNED_UP).toBe('user.signed_up');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.USER_LOGGED_IN).toBe('user.logged_in');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.USER_LOGGED_OUT).toBe('user.logged_out');
    });
    (0, _globals.it)('should have premium event constants', function () {
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.PREMIUM_SUBSCRIBED).toBe('premium.subscribed');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.PREMIUM_CANCELLED).toBe('premium.cancelled');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.PREMIUM_FEATURE_USED).toBe('premium.feature_used');
    });
    (0, _globals.it)('should have swipe event constants', function () {
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.SWIPE_RIGHT).toBe('swipe.right');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.SWIPE_LEFT).toBe('swipe.left');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.SWIPE_SUPERLIKE).toBe('swipe.superlike');
    });
    (0, _globals.it)('should have match event constants', function () {
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.MATCH_CREATED).toBe('match.created');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.MATCH_OPENED).toBe('match.opened');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.MATCH_BLOCKED).toBe('match.blocked');
    });
    (0, _globals.it)('should have chat event constants', function () {
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.MESSAGE_SENT).toBe('message.sent');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.MESSAGE_RECEIVED).toBe('message.received');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.VOICE_NOTE_SENT).toBe('voice_note.sent');
    });
    (0, _globals.it)('should have profile event constants', function () {
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.PROFILE_VIEWED).toBe('profile.viewed');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.PROFILE_EDITED).toBe('profile.edited');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.PHOTO_UPLOADED).toBe('photo.uploaded');
    });
    (0, _globals.it)('should have map event constants', function () {
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.ACTIVITY_STARTED).toBe('activity.started');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.ACTIVITY_ENDED).toBe('activity.ended');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.PIN_LIKED).toBe('pin.liked');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.PIN_COMMENTED).toBe('pin.commented');
    });
    (0, _globals.it)('should have settings event constants', function () {
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.SETTINGS_UPDATED).toBe('settings.updated');
      (0, _globals.expect)(_analyticsService.AnalyticsEvents.NOTIFICATION_PREFERENCE_CHANGED).toBe('notification.preference_changed');
    });
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle tracking errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Network error'));
      yield (0, _globals.expect)((0, _analyticsService.track)('error_event')).resolves.not.toThrow();
    }));
    (0, _globals.it)('should handle screen view errors gracefully', function () {
      mockRequest.mockRejectedValueOnce(new Error('Network error'));
      (0, _globals.expect)(function () {
        return (0, _analyticsService.trackScreenView)('ErrorScreen');
      }).not.toThrow();
    });
    (0, _globals.it)('should handle user action errors gracefully', function () {
      mockRequest.mockRejectedValueOnce(new Error('Network error'));
      (0, _globals.expect)(function () {
        return (0, _analyticsService.trackUserAction)('error_action');
      }).not.toThrow();
    });
    (0, _globals.it)('should handle null properties', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      yield (0, _analyticsService.track)('null_event', null);
      (0, _globals.expect)(mockRequest).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty string events', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      yield (0, _analyticsService.track)('');
      (0, _globals.expect)(mockRequest).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle very long property names', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      var longProps = (0, _defineProperty2.default)({}, `property_${'x'.repeat(1000)}`, 'value');
      yield (0, _analyticsService.track)('long_event', longProps);
      (0, _globals.expect)(mockRequest).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle nested objects in properties', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      var nestedProps = {
        user: {
          profile: {
            name: 'John',
            age: 30
          }
        },
        pets: ['Fluffy', 'Max']
      };
      yield (0, _analyticsService.track)('nested_event', nestedProps);
      (0, _globals.expect)(mockRequest).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle array properties', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      yield (0, _analyticsService.track)('array_event', {
        items: [1, 2, 3],
        tags: ['tag1', 'tag2']
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle undefined screen name gracefully', function () {
      mockRequest.mockResolvedValueOnce(undefined);
      (0, _analyticsService.trackScreenView)(undefined);
      (0, _globals.expect)(mockRequest).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should integrate with API service', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      yield (0, _analyticsService.track)('integration_event', {
        test: true
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/admin/analytics/track', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should allow chaining multiple track calls', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue(undefined);
      yield Promise.all([(0, _analyticsService.track)('event1', {
        id: 1
      }), (0, _analyticsService.track)('event2', {
        id: 2
      }), (0, _analyticsService.track)('event3', {
        id: 3
      })]);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(3);
    }));
  });
  (0, _globals.describe)('Type Safety', function () {
    (0, _globals.it)('should maintain type safety for event names', function () {
      var events = [_analyticsService.AnalyticsEvents.USER_SIGNED_UP, _analyticsService.AnalyticsEvents.PREMIUM_SUBSCRIBED, _analyticsService.AnalyticsEvents.SWIPE_RIGHT];
      (0, _globals.expect)(events.every(function (e) {
        return typeof e === 'string';
      })).toBe(true);
    });
    (0, _globals.it)('should maintain type safety for properties', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce(undefined);
      yield (0, _analyticsService.track)('typed_event', {
        userId: '123',
        timestamp: Date.now()
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,