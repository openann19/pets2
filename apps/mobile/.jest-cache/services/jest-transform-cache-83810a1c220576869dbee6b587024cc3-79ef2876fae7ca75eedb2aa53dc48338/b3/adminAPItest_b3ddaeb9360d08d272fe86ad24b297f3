fdec70be38e836c8cdf7c4254e042c4b
"use strict";

_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      error: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _adminAPI = require("../adminAPI");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
(0, _globals.describe)('AdminAPIService', function () {
  var adminAPI;
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    adminAPI = new _adminAPI.AdminAPIService();
    mockFetch.mockResolvedValue({
      ok: true,
      json: _globals.jest.fn().mockResolvedValue({
        success: true,
        data: {}
      })
    });
  });
  (0, _globals.describe)('Core Request Method', function () {
    (0, _globals.it)('should make successful API requests', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          test: 'data'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI['request']('/test-endpoint');
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/test-endpoint', {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
    }));
    (0, _globals.it)('should handle custom headers and options', (0, _asyncToGenerator2.default)(function* () {
      var customHeaders = {
        'X-API-Key': 'test-key'
      };
      var options = {
        method: 'POST',
        headers: customHeaders,
        body: JSON.stringify({
          test: 'data'
        })
      };
      yield adminAPI['request']('/test-endpoint', options);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/test-endpoint', {
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, customHeaders),
        method: 'POST',
        body: JSON.stringify({
          test: 'data'
        })
      });
    }));
    (0, _globals.it)('should handle HTTP errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 404,
        statusText: 'Not Found'
      });
      yield (0, _globals.expect)(adminAPI['request']('/not-found')).rejects.toThrow('HTTP error! status: 404');
    }));
    (0, _globals.it)('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockRejectedValueOnce(new Error('Network error'));
      yield (0, _globals.expect)(adminAPI['request']('/network-error')).rejects.toThrow('Network error');
    }));
  });
  (0, _globals.describe)('User Management', function () {
    var mockUsersResponse = {
      success: true,
      data: {
        users: [{
          _id: 'user1',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          role: 'user',
          status: 'active',
          isVerified: true,
          createdAt: '2024-01-01T00:00:00Z',
          pets: [{
            _id: 'pet1',
            name: 'Buddy',
            species: 'dog'
          }]
        }],
        pagination: {
          page: 1,
          limit: 20,
          total: 1,
          pages: 1
        }
      }
    };
    (0, _globals.it)('should get users with pagination', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockUsersResponse)
      });
      var result = yield adminAPI.getUsers({
        page: 1,
        limit: 20
      });
      (0, _globals.expect)(result).toEqual(mockUsersResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/users?page=1&limit=20', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should get users with filters', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockUsersResponse)
      });
      yield adminAPI.getUsers({
        search: 'john',
        status: 'active',
        role: 'user',
        verified: 'true'
      });
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('search=john&status=active&role=user&verified=true'), _globals.expect.any(Object));
    }));
    (0, _globals.it)('should get user details', (0, _asyncToGenerator2.default)(function* () {
      var mockUserDetails = {
        success: true,
        data: {
          user: mockUsersResponse.data.users[0],
          stats: {
            petCount: 1,
            matchCount: 5,
            messageCount: 25
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockUserDetails)
      });
      var result = yield adminAPI.getUserDetails('user1');
      (0, _globals.expect)(result).toEqual(mockUserDetails);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/users/user1', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should suspend user', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'User suspended successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.suspendUser('user1', 'Violation of terms', 7);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/users/user1/suspend', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          reason: 'Violation of terms',
          duration: 7
        })
      }));
    }));
    (0, _globals.it)('should ban user', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'User banned successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.banUser('user1', 'Severe violation');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/users/user1/ban', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          reason: 'Severe violation'
        })
      }));
    }));
    (0, _globals.it)('should activate user', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'User activated successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.activateUser('user1', 'Appeal approved');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/users/user1/activate', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          reason: 'Appeal approved'
        })
      }));
    }));
    (0, _globals.it)('should perform bulk user actions', (0, _asyncToGenerator2.default)(function* () {
      var mockBulkResponse = {
        success: true,
        data: {
          total: 3,
          successful: 2,
          failed: 1,
          results: [{
            userId: 'user1',
            success: true
          }, {
            userId: 'user2',
            success: true
          }, {
            userId: 'user3',
            success: false,
            error: 'User not found'
          }]
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockBulkResponse)
      });
      var result = yield adminAPI.bulkUserAction({
        userIds: ['user1', 'user2', 'user3'],
        action: 'suspend',
        reason: 'Bulk moderation'
      });
      (0, _globals.expect)(result).toEqual(mockBulkResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/users/bulk-action', _globals.expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          userIds: ['user1', 'user2', 'user3'],
          action: 'suspend',
          reason: 'Bulk moderation'
        })
      }));
    }));
  });
  (0, _globals.describe)('Chat Management', function () {
    var mockChatsResponse = {
      success: true,
      data: {
        chats: [{
          _id: 'chat1',
          user1: {
            _id: 'user1',
            firstName: 'John',
            lastName: 'Doe',
            email: 'john@example.com'
          },
          user2: {
            _id: 'user2',
            firstName: 'Jane',
            lastName: 'Smith',
            email: 'jane@example.com'
          },
          pet1: {
            _id: 'pet1',
            name: 'Buddy',
            species: 'dog'
          },
          pet2: {
            _id: 'pet2',
            name: 'Luna',
            species: 'cat'
          },
          status: 'active',
          isBlocked: false,
          createdAt: '2024-01-01T00:00:00Z',
          messageCount: 15
        }],
        pagination: {
          page: 1,
          limit: 20,
          total: 1,
          pages: 1
        }
      }
    };
    (0, _globals.it)('should get chats with pagination and filters', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockChatsResponse)
      });
      var result = yield adminAPI.getChats({
        page: 1,
        limit: 20,
        status: 'active'
      });
      (0, _globals.expect)(result).toEqual(mockChatsResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/chats?page=1&limit=20&status=active', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should get chat details with messages', (0, _asyncToGenerator2.default)(function* () {
      var mockChatDetails = {
        success: true,
        data: {
          chat: mockChatsResponse.data.chats[0],
          messages: [{
            _id: 'msg1',
            sender: {
              _id: 'user1',
              firstName: 'John',
              lastName: 'Doe'
            },
            content: 'Hello!',
            type: 'text',
            createdAt: '2024-01-01T00:00:00Z',
            isDeleted: false
          }]
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockChatDetails)
      });
      var result = yield adminAPI.getChatDetails('chat1');
      (0, _globals.expect)(result).toEqual(mockChatDetails);
    }));
    (0, _globals.it)('should block chat', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'Chat blocked successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.blockChat('chat1', 'Inappropriate content', 7);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/chats/chat1/block', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          reason: 'Inappropriate content',
          duration: 7
        })
      }));
    }));
    (0, _globals.it)('should unblock chat', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'Chat unblocked successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.unblockChat('chat1', 'Appeal approved');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/chats/chat1/unblock', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          reason: 'Appeal approved'
        })
      }));
    }));
    (0, _globals.it)('should delete message', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'Message deleted successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.deleteMessage('chat1', 'msg1', 'Violation of terms');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/chats/chat1/messages/msg1', _globals.expect.objectContaining({
        method: 'DELETE',
        body: JSON.stringify({
          reason: 'Violation of terms'
        })
      }));
    }));
    (0, _globals.it)('should get chat messages with moderation filters', (0, _asyncToGenerator2.default)(function* () {
      var mockMessagesResponse = {
        success: true,
        data: {
          messages: [{
            id: 'msg1',
            chatId: 'chat1',
            senderId: 'user1',
            senderName: 'John Doe',
            receiverId: 'user2',
            receiverName: 'Jane Smith',
            message: 'Hello there!',
            timestamp: '2024-01-01T00:00:00Z',
            flagged: false,
            reviewed: true
          }],
          pagination: {
            page: 1,
            limit: 20,
            total: 1,
            pages: 1
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockMessagesResponse)
      });
      var result = yield adminAPI.getChatMessages({
        filter: 'flagged',
        search: 'inappropriate',
        page: 1,
        limit: 20
      });
      (0, _globals.expect)(result).toEqual(mockMessagesResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/chats/messages?filter=flagged&search=inappropriate&page=1&limit=20', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should moderate message', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          success: true,
          message: 'Message approved',
          moderatedMessage: {
            id: 'msg1',
            action: 'approved',
            moderatedAt: '2024-01-01T00:00:00Z',
            moderatedBy: 'admin1'
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.moderateMessage({
        messageId: 'msg1',
        action: 'approve'
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/chats/messages/msg1/moderate', _globals.expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          action: 'approve'
        })
      }));
    }));
  });
  (0, _globals.describe)('Upload Management', function () {
    var mockUploadsResponse = {
      success: true,
      data: {
        uploads: [{
          _id: 'upload1',
          userId: {
            _id: 'user1',
            firstName: 'John',
            lastName: 'Doe',
            email: 'john@example.com'
          },
          type: 'profile_photo',
          originalName: 'profile.jpg',
          url: 'https://cdn.example.com/profile.jpg',
          mimeType: 'image/jpeg',
          size: 1024000,
          status: 'pending',
          uploadedAt: '2024-01-01T00:00:00Z'
        }],
        pagination: {
          page: 1,
          limit: 20,
          total: 1,
          pages: 1
        }
      }
    };
    (0, _globals.it)('should get uploads with filters', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockUploadsResponse)
      });
      var result = yield adminAPI.getUploads({
        filter: 'pending',
        status: 'pending',
        search: 'profile',
        page: 1,
        limit: 20
      });
      (0, _globals.expect)(result).toEqual(mockUploadsResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/uploads?filter=pending&status=pending&search=profile&page=1&limit=20', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should get upload details', (0, _asyncToGenerator2.default)(function* () {
      var mockUploadDetails = {
        success: true,
        data: {
          upload: mockUploadsResponse.data.uploads[0]
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockUploadDetails)
      });
      var result = yield adminAPI.getUploadDetails('upload1');
      (0, _globals.expect)(result).toEqual(mockUploadDetails);
    }));
    (0, _globals.it)('should approve upload', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'Upload approved successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.approveUpload('upload1', 'Looks good');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/uploads/upload1/approve', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          notes: 'Looks good'
        })
      }));
    }));
    (0, _globals.it)('should reject upload', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'Upload rejected successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.rejectUpload('upload1', 'Inappropriate content', 'Please upload a different photo');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/uploads/upload1/reject', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          reason: 'Inappropriate content',
          notes: 'Please upload a different photo'
        })
      }));
    }));
    (0, _globals.it)('should delete upload', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'Upload deleted successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.deleteUpload('upload1', 'Content violation');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/uploads/upload1', _globals.expect.objectContaining({
        method: 'DELETE',
        body: JSON.stringify({
          reason: 'Content violation'
        })
      }));
    }));
    (0, _globals.it)('should moderate upload with approve action', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          success: true,
          message: 'Upload approved'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.moderateUpload({
        uploadId: 'upload1',
        action: 'approve',
        reason: 'Good content'
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/uploads/upload1/moderate', _globals.expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          action: 'approve',
          reason: 'Good content'
        })
      }));
    }));
    (0, _globals.it)('should moderate upload with remove action', (0, _asyncToGenerator2.default)(function* () {
      var mockDeleteResponse = {
        success: true,
        data: {
          message: 'Upload deleted'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockDeleteResponse)
      });
      var result = yield adminAPI.moderateUpload({
        uploadId: 'upload1',
        action: 'remove',
        reason: 'Violation'
      });
      (0, _globals.expect)(result.data).toEqual({
        success: true,
        message: 'Upload deleted'
      });
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/uploads/upload1', _globals.expect.objectContaining({
        method: 'DELETE',
        body: JSON.stringify({
          reason: 'Violation'
        })
      }));
    }));
  });
  (0, _globals.describe)('Verification Management', function () {
    var mockVerificationsResponse = {
      success: true,
      data: {
        verifications: [{
          _id: 'verification1',
          userId: {
            _id: 'user1',
            firstName: 'John',
            lastName: 'Doe',
            email: 'john@example.com'
          },
          type: 'identity',
          status: 'pending',
          documents: [{
            type: 'id_front',
            url: 'id-front.jpg',
            publicId: 'id1',
            uploadedAt: '2024-01-01T00:00:00Z'
          }],
          submittedAt: '2024-01-01T00:00:00Z'
        }],
        pagination: {
          page: 1,
          limit: 20,
          total: 1,
          pages: 1
        }
      }
    };
    (0, _globals.it)('should get pending verifications', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockVerificationsResponse)
      });
      var result = yield adminAPI.getVerifications({
        page: 1,
        limit: 20,
        status: 'pending'
      });
      (0, _globals.expect)(result).toEqual(mockVerificationsResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/verifications/pending?page=1&limit=20&status=pending', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should get verification details', (0, _asyncToGenerator2.default)(function* () {
      var mockVerificationDetails = {
        success: true,
        data: {
          verification: mockVerificationsResponse.data.verifications[0]
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockVerificationDetails)
      });
      var result = yield adminAPI.getVerificationDetails('verification1');
      (0, _globals.expect)(result).toEqual(mockVerificationDetails);
    }));
    (0, _globals.it)('should approve verification', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'Verification approved successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.approveVerification('verification1', 'All documents verified');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/verifications/verification1/approve', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          notes: 'All documents verified'
        })
      }));
    }));
    (0, _globals.it)('should reject verification', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'Verification rejected successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.rejectVerification('verification1', 'Documents unclear', 'Please resubmit clearer images');
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/verifications/verification1/reject', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          reason: 'Documents unclear',
          notes: 'Please resubmit clearer images'
        })
      }));
    }));
  });
  (0, _globals.describe)('Analytics and System Health', function () {
    (0, _globals.it)('should get analytics data', (0, _asyncToGenerator2.default)(function* () {
      var mockAnalytics = {
        success: true,
        data: {
          users: {
            total: 1250,
            active: 890,
            suspended: 15,
            banned: 5,
            verified: 750,
            recent24h: 45
          },
          pets: {
            total: 980,
            active: 920,
            recent24h: 23
          },
          matches: {
            total: 5420,
            active: 4890,
            blocked: 45,
            recent24h: 156
          },
          messages: {
            total: 12850,
            deleted: 234,
            recent24h: 890
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockAnalytics)
      });
      var result = yield adminAPI.getAnalytics({
        period: '24h'
      });
      (0, _globals.expect)(result).toEqual(mockAnalytics);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/analytics?period=24h', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should get system health status', (0, _asyncToGenerator2.default)(function* () {
      var mockHealth = {
        success: true,
        data: {
          status: 'healthy',
          uptime: 345600,
          database: {
            status: 'connected',
            connected: true
          },
          memory: {
            used: 512,
            total: 1024,
            external: 256
          },
          environment: 'production'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockHealth)
      });
      var result = yield adminAPI.getSystemHealth();
      (0, _globals.expect)(result).toEqual(mockHealth);
    }));
    (0, _globals.it)('should get audit logs', (0, _asyncToGenerator2.default)(function* () {
      var mockAuditLogs = {
        success: true,
        data: {
          logs: [{
            id: 'log1',
            action: 'user_suspended',
            userId: 'admin1',
            targetUserId: 'user123',
            details: {
              reason: 'Violation'
            },
            timestamp: '2024-01-01T00:00:00Z'
          }],
          pagination: {
            page: 1,
            limit: 20,
            total: 1,
            pages: 1
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockAuditLogs)
      });
      var result = yield adminAPI.getAuditLogs({
        page: 1,
        limit: 20
      });
      (0, _globals.expect)(result).toEqual(mockAuditLogs);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/security/audit-logs?page=1&limit=20', _globals.expect.any(Object));
    }));
  });
  (0, _globals.describe)('Security and Safety Moderation', function () {
    (0, _globals.it)('should get security alerts', (0, _asyncToGenerator2.default)(function* () {
      var mockAlerts = {
        success: true,
        data: {
          alerts: [{
            id: 'alert1',
            type: 'suspicious_login',
            severity: 'medium',
            userId: 'user123',
            details: {
              ip: '192.168.1.1',
              location: 'Unknown'
            },
            timestamp: '2024-01-01T00:00:00Z'
          }]
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockAlerts)
      });
      var result = yield adminAPI.getSecurityAlerts({
        page: 1,
        limit: 20,
        sort: 'timestamp',
        order: 'desc'
      });
      (0, _globals.expect)(result).toEqual(mockAlerts);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/security/alerts?page=1&limit=20&sort=timestamp&order=desc', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should resolve security alert', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          success: true,
          message: 'Alert resolved'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.resolveSecurityAlert({
        alertId: 'alert1',
        action: 'resolved',
        notes: 'False positive'
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/security/alerts/alert1/resolve', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          action: 'resolved',
          notes: 'False positive'
        })
      }));
    }));
    (0, _globals.it)('should block IP address', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          success: true,
          message: 'IP blocked successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.blockIPAddress({
        ipAddress: '192.168.1.100',
        reason: 'Suspicious activity',
        duration: 3600
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/security/block-ip', _globals.expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          ipAddress: '192.168.1.100',
          reason: 'Suspicious activity',
          duration: 3600
        })
      }));
    }));
    (0, _globals.it)('should get safety moderation queue', (0, _asyncToGenerator2.default)(function* () {
      var mockSafetyQueue = {
        success: true,
        data: {
          uploads: [{
            id: 'upload1',
            userId: 'user1',
            petId: 'pet1',
            type: 'profile_photo',
            status: 'pending',
            flagged: true,
            flagReason: 'Potential inappropriate content',
            uploadedAt: '2024-01-01T00:00:00Z',
            analysis: {
              isPet: true,
              labels: [{
                label: 'dog',
                confidence: 0.95
              }],
              safety: {
                safe: false,
                moderationScore: 0.3,
                labels: [{
                  label: 'inappropriate',
                  confidence: 0.8
                }]
              }
            }
          }],
          pagination: {
            page: 1,
            limit: 20,
            total: 1,
            pages: 1
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockSafetyQueue)
      });
      var result = yield adminAPI.getSafetyModerationQueue({
        status: 'pending',
        page: 1,
        limit: 20
      });
      (0, _globals.expect)(result).toEqual(mockSafetyQueue);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/safety-moderation/queue?status=pending&page=1&limit=20', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should get safety moderation details', (0, _asyncToGenerator2.default)(function* () {
      var mockDetails = {
        success: true,
        data: {
          upload: {
            id: 'upload1',
            type: 'profile_photo'
          },
          analysis: {
            isPet: true,
            labels: [{
              label: 'dog',
              confidence: 0.95
            }],
            safety: {
              safe: false,
              moderationScore: 0.3
            }
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockDetails)
      });
      var result = yield adminAPI.getSafetyModerationDetails('upload1');
      (0, _globals.expect)(result).toEqual(mockDetails);
    }));
    (0, _globals.it)('should moderate safety upload', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          upload: {
            id: 'upload1',
            status: 'approved'
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.moderateSafetyUpload({
        uploadId: 'upload1',
        decision: 'approve',
        notes: 'Safe content'
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/safety-moderation/uploads/upload1/moderate', _globals.expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          decision: 'approve',
          notes: 'Safe content'
        })
      }));
    }));
    (0, _globals.it)('should batch moderate safety uploads', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          results: [{
            id: 'upload1',
            success: true
          }, {
            id: 'upload2',
            success: true
          }, {
            id: 'upload3',
            success: false,
            error: 'Upload not found'
          }]
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.batchModerateSafetyUploads({
        uploadIds: ['upload1', 'upload2', 'upload3'],
        decision: 'approve',
        notes: 'Batch approval'
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/safety-moderation/batch-moderate', _globals.expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          uploadIds: ['upload1', 'upload2', 'upload3'],
          decision: 'approve',
          notes: 'Batch approval'
        })
      }));
    }));
    (0, _globals.it)('should get safety moderation statistics', (0, _asyncToGenerator2.default)(function* () {
      var mockStats = {
        success: true,
        data: {
          stats: {
            pending: 25,
            approved: 150,
            rejected: 12,
            flagged: 8,
            total: 195
          },
          thresholds: {
            autoApprove: 0.9,
            requireReview: 0.7,
            autoReject: 0.3
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockStats)
      });
      var result = yield adminAPI.getSafetyModerationStats();
      (0, _globals.expect)(result).toEqual(mockStats);
    }));
  });
  (0, _globals.describe)('Billing and Subscription Management', function () {
    (0, _globals.it)('should get subscriptions with pagination', (0, _asyncToGenerator2.default)(function* () {
      var mockSubscriptions = {
        success: true,
        data: {
          subscriptions: [{
            id: 'sub1',
            userId: 'user1',
            status: 'active',
            plan: 'premium',
            amount: 999,
            currency: 'usd'
          }],
          pagination: {
            page: 1,
            limit: 20,
            total: 1,
            pages: 1
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockSubscriptions)
      });
      var result = yield adminAPI.getSubscriptions({
        page: 1,
        limit: 20,
        sort: 'created',
        order: 'desc'
      });
      (0, _globals.expect)(result).toEqual(mockSubscriptions);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/subscriptions?page=1&limit=20&sort=created&order=desc', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should get billing metrics', (0, _asyncToGenerator2.default)(function* () {
      var mockMetrics = {
        success: true,
        data: {
          totalRevenue: 15000,
          monthlyRecurringRevenue: 12000,
          churnRate: 0.05,
          averageRevenuePerUser: 12.50,
          paymentSuccessRate: 0.98
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockMetrics)
      });
      var result = yield adminAPI.getBillingMetrics();
      (0, _globals.expect)(result).toEqual(mockMetrics);
    }));
    (0, _globals.it)('should cancel user subscription', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          success: true,
          message: 'Subscription cancelled successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.cancelSubscription({
        userId: 'user1',
        reason: 'User requested cancellation'
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/users/user1/cancel-subscription', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({
          reason: 'User requested cancellation'
        })
      }));
    }));
    (0, _globals.it)('should reactivate user subscription', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          success: true,
          message: 'Subscription reactivated successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.reactivateSubscription({
        userId: 'user1'
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/users/user1/reactivate-subscription', _globals.expect.objectContaining({
        method: 'PUT',
        body: JSON.stringify({})
      }));
    }));
  });
  (0, _globals.describe)('Services Management', function () {
    (0, _globals.it)('should get services status', (0, _asyncToGenerator2.default)(function* () {
      var mockServicesStatus = {
        success: true,
        data: {
          database: {
            status: 'healthy',
            uptime: 86400
          },
          cache: {
            status: 'healthy',
            hitRate: 0.95
          },
          api: {
            status: 'healthy',
            responseTime: 125
          },
          backgroundJobs: {
            status: 'healthy',
            queuedJobs: 5
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockServicesStatus)
      });
      var result = yield adminAPI.getServicesStatus();
      (0, _globals.expect)(result).toEqual(mockServicesStatus);
    }));
    (0, _globals.it)('should get services analytics', (0, _asyncToGenerator2.default)(function* () {
      var mockServicesAnalytics = {
        success: true,
        data: {
          period: '24h',
          api: {
            totalRequests: 12500,
            averageResponseTime: 145,
            errorRate: 0.02
          },
          database: {
            totalQueries: 45000,
            slowQueries: 125,
            connectionPoolUsage: 0.75
          },
          cache: {
            hitRate: 0.92,
            totalRequests: 38000,
            evictionRate: 0.05
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockServicesAnalytics)
      });
      var result = yield adminAPI.getServicesStats({
        period: '24h'
      });
      (0, _globals.expect)(result).toEqual(mockServicesAnalytics);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/services/analytics?period=24h', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should get combined statistics', (0, _asyncToGenerator2.default)(function* () {
      var mockCombinedStats = {
        success: true,
        data: {
          period: '7d',
          overview: {
            totalUsers: 1250,
            activeUsers: 890,
            totalRevenue: 15000,
            systemHealth: 'healthy'
          },
          performance: {
            apiResponseTime: 145,
            databaseQueryTime: 12,
            cacheHitRate: 0.92
          },
          security: {
            failedLogins: 12,
            blockedIPs: 3,
            securityAlerts: 2
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockCombinedStats)
      });
      var result = yield adminAPI.getCombinedStats({
        period: '7d'
      });
      (0, _globals.expect)(result).toEqual(mockCombinedStats);
    }));
    (0, _globals.it)('should toggle service status', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          message: 'Service status updated successfully'
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.toggleService({
        service: 'background-jobs',
        enabled: false
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/services/toggle', _globals.expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          service: 'background-jobs',
          enabled: false
        })
      }));
    }));
  });
  (0, _globals.describe)('Error Handling and Edge Cases', function () {
    (0, _globals.it)('should handle API errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockRejectedValueOnce(new Error('Network error'));
      yield (0, _globals.expect)(adminAPI.getUsers()).rejects.toThrow('Network error');
    }));
    (0, _globals.it)('should handle HTTP errors with proper messages', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: false,
        status: 403,
        statusText: 'Forbidden'
      });
      yield (0, _globals.expect)(adminAPI.getUsers()).rejects.toThrow('HTTP error! status: 403');
    }));
    (0, _globals.it)('should handle malformed response data', (0, _asyncToGenerator2.default)(function* () {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue({
          invalid: 'response'
        })
      });
      var result = yield adminAPI.getUsers();
      (0, _globals.expect)(result).toEqual({
        invalid: 'response'
      });
    }));
    (0, _globals.it)('should handle empty pagination parameters', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: {
          users: [],
          pagination: {
            page: 1,
            limit: 20,
            total: 0,
            pages: 0
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.getUsers({});
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/users', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should handle very large datasets', (0, _asyncToGenerator2.default)(function* () {
      var largeResponse = {
        success: true,
        data: {
          users: Array.from({
            length: 1000
          }, function (_, i) {
            return {
              _id: `user${i}`,
              firstName: `User${i}`,
              lastName: 'Test',
              email: `user${i}@example.com`,
              role: 'user',
              status: 'active',
              isVerified: true,
              createdAt: '2024-01-01T00:00:00Z',
              pets: []
            };
          }),
          pagination: {
            page: 1,
            limit: 1000,
            total: 1000,
            pages: 1
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(largeResponse)
      });
      var result = yield adminAPI.getUsers({
        page: 1,
        limit: 1000
      });
      (0, _globals.expect)(result.data.users).toHaveLength(1000);
    }));
    (0, _globals.it)('should handle special characters in parameters', (0, _asyncToGenerator2.default)(function* () {
      var searchTerm = 'café & naïve résumé';
      var mockResponse = {
        success: true,
        data: {
          users: [{
            _id: 'user1',
            firstName: 'Café',
            lastName: 'User',
            email: 'cafe@example.com',
            role: 'user',
            status: 'active',
            isVerified: true,
            createdAt: '2024-01-01T00:00:00Z',
            pets: []
          }],
          pagination: {
            page: 1,
            limit: 20,
            total: 1,
            pages: 1
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.getUsers({
        search: searchTerm
      });
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('search=caf%C3%A9%20%26%20na%C3%AFve%20r%C3%A9sum%C3%A9'), _globals.expect.any(Object));
    }));
    (0, _globals.it)('should handle null and undefined parameter values', (0, _asyncToGenerator2.default)(function* () {
      var params = {
        page: null,
        limit: undefined,
        search: '',
        status: null
      };
      var mockResponse = {
        success: true,
        data: {
          users: [],
          pagination: {
            page: 1,
            limit: 20,
            total: 0,
            pages: 0
          }
        }
      };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var result = yield adminAPI.getUsers(params);
      (0, _globals.expect)(result).toEqual(mockResponse);
      (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/admin/users', _globals.expect.any(Object));
    }));
    (0, _globals.it)('should handle concurrent API calls', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        data: []
      };
      mockFetch.mockResolvedValue({
        ok: true,
        json: _globals.jest.fn().mockResolvedValue(mockResponse)
      });
      var promises = [adminAPI.getUsers({
        page: 1
      }), adminAPI.getChats({
        page: 1
      }), adminAPI.getUploads({
        page: 1
      }), adminAPI.getVerifications({
        page: 1
      })];
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toHaveLength(4);
      results.forEach(function (result) {
        (0, _globals.expect)(result.success).toBe(true);
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,