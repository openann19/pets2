{"version":3,"names":["_getJestObj","mock","request","jest","fn","_interopRequireDefault","require","_asyncToGenerator2","_globals","_aiService","_api","_require","mockRequest","describe","beforeEach","clearAllMocks","bioParams","petName","keywords","tone","length","petType","age","breed","it","default","mockResponse","bio","sentiment","score","label","matchScore","mockResolvedValueOnce","result","generateBio","expect","toBe","toHaveBeenCalledWith","method","body","mockRejectedValueOnce","Error","rejects","toThrow","minimalParams","photoUrl","labels","lighting","sharpness","analyzePhoto","toEqual","toContain","toBeGreaterThan","url","toBeLessThan","breakdown","size","energy","traits","computeCompatibility","pet1Id","pet2Id"],"sources":["aiService.simple.test.ts"],"sourcesContent":["/**\n * Simplified AIService Tests - Core functionality\n */\n\nimport { describe, it, expect, jest, beforeEach } from '@jest/globals';\nimport {\n  generateBio,\n  analyzePhoto,\n  computeCompatibility,\n  type BioGenerationParams,\n  type PhotoAnalysisResult,\n  type CompatibilityResult,\n} from '../aiService';\n\n// Mock dependencies\njest.mock('../api', () => ({\n  request: jest.fn(),\n}));\n\nimport { request } from '../api';\n\nconst mockRequest = request as jest.MockedFunction<typeof request>;\n\ndescribe('AIService - Core Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('generateBio', () => {\n    const bioParams: BioGenerationParams = {\n      petName: 'Luna',\n      keywords: ['friendly', 'playful', 'cuddly'],\n      tone: 'professional',\n      length: 'medium',\n      petType: 'cat',\n      age: 3,\n      breed: 'Persian',\n    };\n\n    it('should generate a bio successfully', async () => {\n      const mockResponse = {\n        bio: 'Luna is a three-year-old Persian cat who embodies gentleness and affection.',\n        keywords: ['friendly', 'gentle', 'affectionate'],\n        sentiment: { score: 0.8, label: 'positive' },\n        matchScore: 85,\n      };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await generateBio(bioParams);\n\n      expect(result).toBe(mockResponse.bio);\n      expect(typeof result).toBe('string');\n      expect(mockRequest).toHaveBeenCalledWith('/ai/generate-bio', {\n        method: 'POST',\n        body: bioParams,\n      });\n    });\n\n    it('should handle API errors', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('AI service unavailable'));\n\n      await expect(generateBio(bioParams)).rejects.toThrow('AI service unavailable');\n    });\n\n    it('should handle different parameter combinations', async () => {\n      const minimalParams: BioGenerationParams = {\n        petName: 'Buddy',\n        keywords: ['energetic'],\n      };\n\n      const mockResponse = {\n        bio: 'Buddy is an energetic dog full of life.',\n        keywords: ['energetic', 'playful'],\n        sentiment: { score: 0.9, label: 'very positive' },\n        matchScore: 90,\n      };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await generateBio(minimalParams);\n\n      expect(result).toBe(mockResponse.bio);\n      expect(mockRequest).toHaveBeenCalledWith('/ai/generate-bio', {\n        method: 'POST',\n        body: minimalParams,\n      });\n    });\n  });\n\n  describe('analyzePhoto', () => {\n    const photoUrl = 'https://example.com/photo.jpg';\n\n    it('should analyze a photo successfully', async () => {\n      const mockResponse: PhotoAnalysisResult = {\n        labels: ['dog', 'golden retriever', 'outdoor'],\n        lighting: 0.85,\n        sharpness: 0.92,\n        score: 0.88,\n      };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await analyzePhoto(photoUrl);\n\n      expect(result).toEqual(mockResponse);\n      expect(result.labels).toContain('dog');\n      expect(result.score).toBeGreaterThan(0.8);\n      expect(mockRequest).toHaveBeenCalledWith('/ai/analyze-photo', {\n        method: 'POST',\n        body: { url: photoUrl },\n      });\n    });\n\n    it('should handle photo analysis errors', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('Invalid image format'));\n\n      await expect(analyzePhoto(photoUrl)).rejects.toThrow('Invalid image format');\n    });\n\n    it('should handle empty labels', async () => {\n      const mockResponse: PhotoAnalysisResult = {\n        labels: [],\n        lighting: 0.5,\n        sharpness: 0.6,\n        score: 0.4,\n      };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await analyzePhoto(photoUrl);\n\n      expect(result.labels).toEqual([]);\n      expect(result.score).toBeLessThan(0.5);\n    });\n  });\n\n  describe('computeCompatibility', () => {\n    it('should compute compatibility between two pets', async () => {\n      const mockResponse: CompatibilityResult = {\n        score: 85,\n        breakdown: {\n          breed: 90,\n          size: 80,\n          energy: 85,\n          age: 80,\n          traits: 90,\n        },\n      };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await computeCompatibility('pet1', 'pet2');\n\n      expect(result).toEqual(mockResponse);\n      expect(result.score).toBe(85);\n      expect(result.breakdown.breed).toBe(90);\n      expect(typeof result.breakdown).toBe('object');\n      expect(mockRequest).toHaveBeenCalledWith('/ai/compatibility', {\n        method: 'POST',\n        body: { pet1Id: 'pet1', pet2Id: 'pet2' },\n      });\n    });\n\n    it('should handle perfect compatibility', async () => {\n      const mockResponse: CompatibilityResult = {\n        score: 100,\n        breakdown: {\n          breed: 100,\n          size: 100,\n          energy: 100,\n          age: 100,\n          traits: 100,\n        },\n      };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await computeCompatibility('pet1', 'pet2');\n\n      expect(result.score).toBe(100);\n      expect(result.breakdown.breed).toBe(100);\n    });\n\n    it('should handle zero compatibility', async () => {\n      const mockResponse: CompatibilityResult = {\n        score: 0,\n        breakdown: {\n          breed: 0,\n          size: 0,\n          energy: 0,\n          age: 0,\n          traits: 0,\n        },\n      };\n\n      mockRequest.mockResolvedValueOnce(mockResponse);\n\n      const result = await computeCompatibility('pet1', 'pet2');\n\n      expect(result.score).toBe(0);\n      expect(result.breakdown.energy).toBe(0);\n    });\n\n    it('should handle API errors during compatibility computation', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('Compatibility calculation failed'));\n\n      await expect(computeCompatibility('pet1', 'pet2')).rejects.toThrow('Compatibility calculation failed');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle network timeouts', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('Network timeout'));\n\n      await expect(generateBio({ petName: 'Test', keywords: ['test'] })).rejects.toThrow('Network timeout');\n    });\n\n    it('should handle service unavailability', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('AI service is temporarily unavailable'));\n\n      await expect(analyzePhoto('test.jpg')).rejects.toThrow('AI service is temporarily unavailable');\n    });\n\n    it('should handle malformed API responses', async () => {\n      mockRequest.mockResolvedValueOnce(null);\n\n      await expect(generateBio({ petName: 'Test', keywords: ['test'] })).rejects.toThrow();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}