d193ecb104e314f4e648ba51a6b49491
"use strict";

_getJestObj().mock("../api", function () {
  return {
    request: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _swipeService = require("../swipeService");
var _api = require("../api");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRequest = _api.request;
(0, _globals.describe)('Swipe Service', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('Happy Path - Like Pet', function () {
    (0, _globals.it)('should like a pet successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      var result = yield (0, _swipeService.likePet)('pet123');
      (0, _globals.expect)(result).toEqual({
        petId: 'pet123'
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/api/pets/like', _globals.expect.objectContaining({
        method: 'POST',
        body: _globals.expect.objectContaining({
          petId: 'pet123'
        })
      }));
    }));
    (0, _globals.it)('should handle multiple pets', (0, _asyncToGenerator2.default)(function* () {
      var _calls$, _calls$$, _calls$$$body, _calls$2, _calls$2$, _calls$2$$body, _calls$3, _calls$3$, _calls$3$$body;
      mockRequest.mockResolvedValue({
        success: true
      });
      yield (0, _swipeService.likePet)('pet1');
      yield (0, _swipeService.likePet)('pet2');
      yield (0, _swipeService.likePet)('pet3');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(3);
      var calls = mockRequest.mock.calls;
      (0, _globals.expect)((_calls$ = calls[0]) == null ? void 0 : (_calls$$ = _calls$[1]) == null ? void 0 : (_calls$$$body = _calls$$.body) == null ? void 0 : _calls$$$body.petId).toBe('pet1');
      (0, _globals.expect)((_calls$2 = calls[1]) == null ? void 0 : (_calls$2$ = _calls$2[1]) == null ? void 0 : (_calls$2$$body = _calls$2$.body) == null ? void 0 : _calls$2$$body.petId).toBe('pet2');
      (0, _globals.expect)((_calls$3 = calls[2]) == null ? void 0 : (_calls$3$ = _calls$3[1]) == null ? void 0 : (_calls$3$$body = _calls$3$.body) == null ? void 0 : _calls$3$$body.petId).toBe('pet3');
    }));
  });
  (0, _globals.describe)('Happy Path - Pass Pet', function () {
    (0, _globals.it)('should pass a pet successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      var result = yield (0, _swipeService.passPet)('pet456');
      (0, _globals.expect)(result).toEqual({
        petId: 'pet456'
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/api/pets/pass', _globals.expect.objectContaining({
        method: 'POST',
        body: _globals.expect.objectContaining({
          petId: 'pet456'
        })
      }));
    }));
    (0, _globals.it)('should differentiate pass from like', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        success: true
      });
      yield (0, _swipeService.likePet)('pet1');
      yield (0, _swipeService.passPet)('pet2');
      var likeCall = mockRequest.mock.calls[0];
      var passCall = mockRequest.mock.calls[1];
      (0, _globals.expect)(likeCall == null ? void 0 : likeCall[0]).toBe('/api/pets/like');
      (0, _globals.expect)(passCall == null ? void 0 : passCall[0]).toBe('/api/pets/pass');
    }));
  });
  (0, _globals.describe)('Happy Path - Super Like Pet', function () {
    (0, _globals.it)('should super like a pet successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      var result = yield (0, _swipeService.superLikePet)('pet789');
      (0, _globals.expect)(result).toEqual({
        petId: 'pet789'
      });
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/api/pets/super-like', _globals.expect.objectContaining({
        method: 'POST',
        body: _globals.expect.objectContaining({
          petId: 'pet789'
        })
      }));
    }));
    (0, _globals.it)('should differentiate super like from regular like', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        success: true
      });
      yield (0, _swipeService.likePet)('pet1');
      yield (0, _swipeService.superLikePet)('pet2');
      var likeCall = mockRequest.mock.calls[0];
      var superLikeCall = mockRequest.mock.calls[1];
      (0, _globals.expect)(likeCall == null ? void 0 : likeCall[0]).toBe('/api/pets/like');
      (0, _globals.expect)(superLikeCall == null ? void 0 : superLikeCall[0]).toBe('/api/pets/super-like');
    }));
  });
  (0, _globals.describe)('Happy Path - Rewind Last', function () {
    (0, _globals.it)('should rewind last swipe successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockPet = {
        _id: 'pet123',
        id: 'pet123',
        name: 'Max',
        species: 'Dog',
        breed: 'Golden Retriever',
        age: 3,
        bio: 'A friendly dog',
        photos: ['photo1.jpg'],
        location: 'New York',
        distance: 5,
        compatibility: 95
      };
      mockRequest.mockResolvedValueOnce({
        restoredPet: mockPet
      });
      var result = yield (0, _swipeService.rewindLast)();
      (0, _globals.expect)(result).toEqual(mockPet);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/api/swipe/rewind', _globals.expect.objectContaining({
        method: 'POST'
      }));
    }));
    (0, _globals.it)('should return null when no pet to restore', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        restoredPet: undefined
      });
      var result = yield (0, _swipeService.rewindLast)();
      (0, _globals.expect)(result).toBeNull();
    }));
    (0, _globals.it)('should return null on rewind error', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Rewind failed'));
      var result = yield (0, _swipeService.rewindLast)();
      (0, _globals.expect)(result).toBeNull();
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle API errors for like', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Like failed'));
      yield (0, _globals.expect)((0, _swipeService.likePet)('pet123')).rejects.toThrow('Like failed');
    }));
    (0, _globals.it)('should handle API errors for pass', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Pass failed'));
      yield (0, _globals.expect)((0, _swipeService.passPet)('pet123')).rejects.toThrow('Pass failed');
    }));
    (0, _globals.it)('should handle API errors for super like', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Super like failed'));
      yield (0, _globals.expect)((0, _swipeService.superLikePet)('pet123')).rejects.toThrow('Super like failed');
    }));
    (0, _globals.it)('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Network error'));
      yield (0, _globals.expect)((0, _swipeService.likePet)('pet123')).rejects.toThrow('Network error');
      yield (0, _globals.expect)((0, _swipeService.passPet)('pet123')).rejects.toThrow('Network error');
      yield (0, _globals.expect)((0, _swipeService.superLikePet)('pet123')).rejects.toThrow('Network error');
    }));
    (0, _globals.it)('should handle timeout errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValue(new Error('Timeout'));
      yield (0, _globals.expect)((0, _swipeService.likePet)('pet123')).rejects.toThrow('Timeout');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty pet ID', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      yield (0, _swipeService.likePet)('');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledWith('/api/pets/like', _globals.expect.objectContaining({
        body: _globals.expect.objectContaining({
          petId: ''
        })
      }));
    }));
    (0, _globals.it)('should handle very long pet IDs', (0, _asyncToGenerator2.default)(function* () {
      var longId = 'pet'.repeat(100);
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      yield (0, _swipeService.likePet)(longId);
      (0, _globals.expect)(mockRequest).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle concurrent likes', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockImplementation(function () {
        return new Promise(function (resolve) {
          return setTimeout(function () {
            return resolve({
              success: true
            });
          }, 10);
        });
      });
      var promises = ['pet1', 'pet2', 'pet3'].map(function (id) {
        return (0, _swipeService.likePet)(id);
      });
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toHaveLength(3);
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(3);
    }));
    (0, _globals.it)('should handle rapid rewind requests', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        restoredPet: null
      });
      var results = yield Promise.all([(0, _swipeService.rewindLast)(), (0, _swipeService.rewindLast)(), (0, _swipeService.rewindLast)()]);
      (0, _globals.expect)(results.every(function (r) {
        return r === null;
      })).toBe(true);
    }));
    (0, _globals.it)('should handle pet with missing fields', (0, _asyncToGenerator2.default)(function* () {
      var partialPet = {
        _id: 'pet123',
        id: 'pet123',
        name: 'Max'
      };
      mockRequest.mockResolvedValueOnce({
        restoredPet: partialPet
      });
      var result = yield (0, _swipeService.rewindLast)();
      (0, _globals.expect)(result).toEqual(partialPet);
    }));
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should work with API request service', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValue({
        success: true
      });
      yield (0, _swipeService.likePet)('pet123');
      yield (0, _swipeService.passPet)('pet456');
      yield (0, _swipeService.superLikePet)('pet789');
      (0, _globals.expect)(mockRequest).toHaveBeenCalledTimes(3);
      (0, _globals.expect)(mockRequest).toHaveBeenNthCalledWith(1, '/api/pets/like', _globals.expect.objectContaining({
        method: 'POST'
      }));
      (0, _globals.expect)(mockRequest).toHaveBeenNthCalledWith(2, '/api/pets/pass', _globals.expect.objectContaining({
        method: 'POST'
      }));
      (0, _globals.expect)(mockRequest).toHaveBeenNthCalledWith(3, '/api/pets/super-like', _globals.expect.objectContaining({
        method: 'POST'
      }));
    }));
    (0, _globals.it)('should maintain state across multiple operations', (0, _asyncToGenerator2.default)(function* () {
      var _calls$4, _calls$5, _calls$6;
      mockRequest.mockResolvedValue({
        success: true
      });
      yield (0, _swipeService.likePet)('pet1');
      yield (0, _swipeService.passPet)('pet1');
      yield (0, _swipeService.superLikePet)('pet2');
      var calls = mockRequest.mock.calls;
      (0, _globals.expect)((_calls$4 = calls[0]) == null ? void 0 : _calls$4[0]).toBe('/api/pets/like');
      (0, _globals.expect)((_calls$5 = calls[1]) == null ? void 0 : _calls$5[0]).toBe('/api/pets/pass');
      (0, _globals.expect)((_calls$6 = calls[2]) == null ? void 0 : _calls$6[0]).toBe('/api/pets/super-like');
    }));
  });
  (0, _globals.describe)('Type Safety', function () {
    (0, _globals.it)('should maintain type safety for like result', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      var result = yield (0, _swipeService.likePet)('pet123');
      (0, _globals.expect)(typeof result.petId).toBe('string');
    }));
    (0, _globals.it)('should maintain type safety for rewind result', (0, _asyncToGenerator2.default)(function* () {
      var mockPet = {
        _id: 'pet123',
        id: 'pet123',
        name: 'Max',
        species: 'Dog',
        breed: 'Golden Retriever',
        age: 3,
        bio: 'A friendly dog',
        photos: ['photo1.jpg'],
        location: 'New York',
        distance: 5,
        compatibility: 95
      };
      mockRequest.mockResolvedValueOnce({
        restoredPet: mockPet
      });
      var result = yield (0, _swipeService.rewindLast)();
      if (result) {
        (0, _globals.expect)(typeof result._id).toBe('string');
        (0, _globals.expect)(typeof result.name).toBe('string');
        (0, _globals.expect)(Array.isArray(result.photos)).toBe(true);
      }
    }));
    (0, _globals.it)('should handle Pet type correctly', (0, _asyncToGenerator2.default)(function* () {
      var completePet = {
        _id: 'pet123',
        id: 'pet123',
        name: 'Max',
        species: 'Dog',
        breed: 'Golden Retriever',
        age: 3,
        bio: 'A friendly dog',
        photos: ['photo1.jpg'],
        location: 'New York',
        distance: 5,
        compatibility: 95,
        isVerified: true,
        owner: {
          name: 'John',
          verified: true
        },
        tags: ['friendly', 'playful']
      };
      mockRequest.mockResolvedValueOnce({
        restoredPet: completePet
      });
      var result = yield (0, _swipeService.rewindLast)();
      if (result) {
        (0, _globals.expect)(result.isVerified).toBe(true);
        (0, _globals.expect)(result.owner).toBeDefined();
        (0, _globals.expect)(Array.isArray(result.tags)).toBe(true);
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,