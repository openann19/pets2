6b4c4123675aefd65c1ece2ec5aa1204
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.imageCompression = exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _core = require("@pawfectmatch/core");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ImageCompressionService = function () {
  function ImageCompressionService() {
    (0, _classCallCheck2.default)(this, ImageCompressionService);
  }
  return (0, _createClass2.default)(ImageCompressionService, [{
    key: "compressImage",
    value: (function () {
      var _compressImage = (0, _asyncToGenerator2.default)(function* (imageUri) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        try {
          var opts = _objectSpread(_objectSpread({}, ImageCompressionService.DEFAULT_OPTIONS), options);
          _core.logger.info("Starting image compression", {
            uri: imageUri.substring(0, 50) + "...",
            options: opts
          });
          var originalInfo = yield FileSystem.getInfoAsync(imageUri);
          var originalSize = originalInfo.exists ? originalInfo.size : 0;
          var manipulatedImage = yield ImageManipulator.manipulateAsync(imageUri, [{
            resize: {
              width: opts.maxWidth,
              height: opts.maxHeight
            }
          }], {
            compress: opts.quality,
            format: opts.format === "png" ? ImageManipulator.SaveFormat.PNG : ImageManipulator.SaveFormat.JPEG
          });
          var compressedInfo = yield FileSystem.getInfoAsync(manipulatedImage.uri);
          var compressedSize = compressedInfo.exists ? compressedInfo.size : 0;
          var compressionRatio = originalSize > 0 ? (originalSize - compressedSize) / originalSize : 0;
          var result = {
            uri: manipulatedImage.uri,
            width: manipulatedImage.width,
            height: manipulatedImage.height,
            size: compressedSize,
            originalSize: originalSize,
            compressionRatio: compressionRatio
          };
          _core.logger.info("Image compression completed", {
            originalSize: this.formatFileSize(originalSize),
            compressedSize: this.formatFileSize(compressedSize),
            compressionRatio: `${(compressionRatio * 100).toFixed(1)}%`,
            dimensions: `${String(manipulatedImage.width)}x${String(manipulatedImage.height)}`
          });
          return result;
        } catch (error) {
          _core.logger.error("Image compression failed", {
            error: error,
            imageUri: imageUri
          });
          throw new Error("Failed to compress image");
        }
      });
      function compressImage(_x) {
        return _compressImage.apply(this, arguments);
      }
      return compressImage;
    }())
  }, {
    key: "compressImages",
    value: (function () {
      var _compressImages = (0, _asyncToGenerator2.default)(function* (imageUris) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var results = [];
        for (var uri of imageUris) {
          try {
            var result = yield this.compressImage(uri, options);
            results.push(result);
          } catch (error) {
            _core.logger.error("Failed to compress image in batch", {
              error: error,
              uri: uri
            });
          }
        }
        return results;
      });
      function compressImages(_x2) {
        return _compressImages.apply(this, arguments);
      }
      return compressImages;
    }())
  }, {
    key: "getOptimalCompressionSettings",
    value: function getOptimalCompressionSettings(imageUri) {
      var isJpeg = imageUri.toLowerCase().includes(".jpg") || imageUri.toLowerCase().includes(".jpeg");
      var isPng = imageUri.toLowerCase().includes(".png");
      if (isJpeg) {
        return {
          maxWidth: 1920,
          maxHeight: 1920,
          quality: 0.75,
          format: "jpeg"
        };
      } else if (isPng) {
        return {
          maxWidth: 1920,
          maxHeight: 1920,
          quality: 0.9,
          format: "png"
        };
      }
      return ImageCompressionService.DEFAULT_OPTIONS;
    }
  }, {
    key: "compressAvatarImage",
    value: (function () {
      var _compressAvatarImage = (0, _asyncToGenerator2.default)(function* (imageUri) {
        return this.compressImage(imageUri, {
          maxWidth: 512,
          maxHeight: 512,
          quality: 0.8,
          format: "jpeg"
        });
      });
      function compressAvatarImage(_x3) {
        return _compressAvatarImage.apply(this, arguments);
      }
      return compressAvatarImage;
    }())
  }, {
    key: "compressPetImage",
    value: (function () {
      var _compressPetImage = (0, _asyncToGenerator2.default)(function* (imageUri) {
        return this.compressImage(imageUri, this.getOptimalCompressionSettings(imageUri));
      });
      function compressPetImage(_x4) {
        return _compressPetImage.apply(this, arguments);
      }
      return compressPetImage;
    }())
  }, {
    key: "compressChatImage",
    value: (function () {
      var _compressChatImage = (0, _asyncToGenerator2.default)(function* (imageUri) {
        return this.compressImage(imageUri, {
          maxWidth: 1024,
          maxHeight: 1024,
          quality: 0.7,
          format: "jpeg"
        });
      });
      function compressChatImage(_x5) {
        return _compressChatImage.apply(this, arguments);
      }
      return compressChatImage;
    }())
  }, {
    key: "validateImage",
    value: (function () {
      var _validateImage = (0, _asyncToGenerator2.default)(function* (imageUri) {
        try {
          var info = yield FileSystem.getInfoAsync(imageUri);
          if (!info.exists) {
            return {
              isValid: false,
              error: "Image file does not exist"
            };
          }
          var maxSize = 20 * 1024 * 1024;
          if (info.size > maxSize) {
            return {
              isValid: false,
              error: "Image file is too large (max 20MB)"
            };
          }
          var supportedExtensions = [".jpg", ".jpeg", ".png", ".gif", ".webp"];
          var hasValidExtension = supportedExtensions.some(function (ext) {
            return imageUri.toLowerCase().endsWith(ext);
          });
          if (!hasValidExtension) {
            return {
              isValid: false,
              error: "Unsupported image format"
            };
          }
          return {
            isValid: true
          };
        } catch (error) {
          _core.logger.error("Image validation failed", {
            error: error,
            imageUri: imageUri
          });
          return {
            isValid: false,
            error: "Failed to validate image"
          };
        }
      });
      function validateImage(_x6) {
        return _validateImage.apply(this, arguments);
      }
      return validateImage;
    }())
  }, {
    key: "cleanupTempImages",
    value: (function () {
      var _cleanupTempImages = (0, _asyncToGenerator2.default)(function* (imageUris) {
        for (var uri of imageUris) {
          try {
            if (uri.includes("ImageManipulator") || uri.includes("temp") || uri.includes("cache")) {
              yield FileSystem.deleteAsync(uri, {
                idempotent: true
              });
            }
          } catch (error) {
            _core.logger.warn("Failed to cleanup temp image", {
              error: error,
              uri: uri
            });
          }
        }
      });
      function cleanupTempImages(_x7) {
        return _cleanupTempImages.apply(this, arguments);
      }
      return cleanupTempImages;
    }())
  }, {
    key: "formatFileSize",
    value: function formatFileSize(bytes) {
      var _sizes$Math$min;
      if (bytes === 0) return "0 B";
      var k = 1024;
      var sizes = ["B", "KB", "MB", "GB"];
      var i = Math.floor(Math.log(bytes) / Math.log(k));
      var sizeUnit = (_sizes$Math$min = sizes[Math.min(i, sizes.length - 1)]) != null ? _sizes$Math$min : "B";
      return `${(bytes / Math.pow(k, i)).toFixed(1)} ${sizeUnit}`;
    }
  }, {
    key: "getImageDimensions",
    value: (function () {
      var _getImageDimensions = (0, _asyncToGenerator2.default)(function* (imageUri) {
        try {
          var result = yield ImageManipulator.manipulateAsync(imageUri, [], {
            format: ImageManipulator.SaveFormat.JPEG
          });
          return {
            width: result.width,
            height: result.height
          };
        } catch (error) {
          _core.logger.error("Failed to get image dimensions", {
            error: error,
            imageUri: imageUri
          });
          return null;
        }
      });
      function getImageDimensions(_x8) {
        return _getImageDimensions.apply(this, arguments);
      }
      return getImageDimensions;
    }())
  }]);
}();
ImageCompressionService.DEFAULT_OPTIONS = {
  maxWidth: 1920,
  maxHeight: 1920,
  quality: 0.8,
  format: "jpeg",
  maintainAspectRatio: true
};
var imageCompression = exports.imageCompression = new ImageCompressionService();
var _default = exports.default = imageCompression;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,