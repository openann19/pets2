{"version":3,"names":["generateBio","_x","_generateBio","apply","arguments","_asyncToGenerator2","default","params","_yield$import","Promise","resolve","then","_interopRequireWildcard","require","request","response","method","body","bio","analyzePhoto","_x2","_analyzePhoto","url","_yield$import2","computeCompatibility","_x3","_x4","_computeCompatibility","pet1Id","pet2Id","_yield$import3"],"sources":["aiService.ts"],"sourcesContent":["import { api } from './api';\n\nexport interface BioGenerationParams {\n  petName: string;\n  keywords: string[];\n  tone?: 'playful' | 'professional' | 'casual' | 'romantic' | 'funny';\n  length?: 'short' | 'medium' | 'long';\n  petType?: string;\n  age?: number;\n  breed?: string;\n}\n\nexport interface BioGenerationResult {\n  bio: string;\n  keywords: string[];\n  sentiment: { score: number; label: string };\n  matchScore: number;\n}\n\nexport interface PhotoAnalysisResult {\n  labels: string[];\n  lighting: number;\n  sharpness: number;\n  score: number;\n}\n\nexport interface CompatibilityResult {\n  score: number;\n  breakdown: {\n    breed: number;\n    size: number;\n    energy: number;\n    age: number;\n    traits: number;\n  };\n}\n\nexport async function generateBio(params: BioGenerationParams): Promise<string> {\n  const { request } = await import('./api');\n  const response = await request<BioGenerationResult>('/ai/generate-bio', {\n    method: 'POST',\n    body: params,\n  });\n  return response.bio;\n}\n\nexport async function analyzePhoto(url: string): Promise<PhotoAnalysisResult> {\n  const { request } = await import('./api');\n  const response = await request('/ai/analyze-photo', {\n    method: 'POST',\n    body: { url },\n  });\n  return response as PhotoAnalysisResult;\n}\n\nexport async function computeCompatibility(\n  pet1Id: string,\n  pet2Id: string,\n): Promise<CompatibilityResult> {\n  const { request } = await import('./api');\n  const response = await request<CompatibilityResult>('/ai/compatibility', {\n    method: 'POST',\n    body: { pet1Id, pet2Id },\n  });\n  return response;\n}\n"],"mappings":";;;;;;;;;;;SAqCsBA,WAAWA,CAAAC,EAAA;EAAA,OAAAC,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,aAAA;EAAAA,YAAA,OAAAG,kBAAA,CAAAC,OAAA,EAA1B,WAA2BC,MAA2B,EAAmB;IAC9E,IAAAC,aAAA,SAAAC,OAAA,CAAAC,OAAA,GAAAC,IAAA;QAAA,OAAAC,uBAAA,CAAAC,OAAA;MAAA;MAAQC,OAAO,GAAAN,aAAA,CAAPM,OAAO;IACf,IAAMC,QAAQ,SAASD,OAAO,CAAsB,kBAAkB,EAAE;MACtEE,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEV;IACR,CAAC,CAAC;IACF,OAAOQ,QAAQ,CAACG,GAAG;EACrB,CAAC;EAAA,OAAAhB,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEqBe,YAAYA,CAAAC,GAAA;EAAA,OAAAC,aAAA,CAAAlB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAiB,cAAA;EAAAA,aAAA,OAAAhB,kBAAA,CAAAC,OAAA,EAA3B,WAA4BgB,GAAW,EAAgC;IAC5E,IAAAC,cAAA,SAAAd,OAAA,CAAAC,OAAA,GAAAC,IAAA;QAAA,OAAAC,uBAAA,CAAAC,OAAA;MAAA;MAAQC,OAAO,GAAAS,cAAA,CAAPT,OAAO;IACf,IAAMC,QAAQ,SAASD,OAAO,CAAC,mBAAmB,EAAE;MAClDE,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE;QAAEK,GAAG,EAAHA;MAAI;IACd,CAAC,CAAC;IACF,OAAOP,QAAQ;EACjB,CAAC;EAAA,OAAAM,aAAA,CAAAlB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEqBoB,oBAAoBA,CAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,qBAAA,CAAAxB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAuB,sBAAA;EAAAA,qBAAA,OAAAtB,kBAAA,CAAAC,OAAA,EAAnC,WACLsB,MAAc,EACdC,MAAc,EACgB;IAC9B,IAAAC,cAAA,SAAArB,OAAA,CAAAC,OAAA,GAAAC,IAAA;QAAA,OAAAC,uBAAA,CAAAC,OAAA;MAAA;MAAQC,OAAO,GAAAgB,cAAA,CAAPhB,OAAO;IACf,IAAMC,QAAQ,SAASD,OAAO,CAAsB,mBAAmB,EAAE;MACvEE,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE;QAAEW,MAAM,EAANA,MAAM;QAAEC,MAAM,EAANA;MAAO;IACzB,CAAC,CAAC;IACF,OAAOd,QAAQ;EACjB,CAAC;EAAA,OAAAY,qBAAA,CAAAxB,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]}