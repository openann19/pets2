503fcab5489fc8a670dee488be042818
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.analyzePhoto = analyzePhoto;
exports.computeCompatibility = computeCompatibility;
exports.generateBio = generateBio;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function generateBio(_x) {
  return _generateBio.apply(this, arguments);
}
function _generateBio() {
  _generateBio = (0, _asyncToGenerator2.default)(function* (params) {
    if (!params.petName || params.petName.trim().length === 0) {
      throw new Error('Pet name is required and cannot be empty');
    }
    if (!params.keywords || params.keywords.length === 0) {
      throw new Error('At least one keyword is required');
    }
    if (params.keywords.some(function (keyword) {
      return !keyword || keyword.trim().length === 0;
    })) {
      throw new Error('All keywords must be non-empty strings');
    }
    var _yield$import = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      }),
      request = _yield$import.request;
    var response = yield request('/ai/generate-bio', {
      method: 'POST',
      body: params
    });
    return response.bio;
  });
  return _generateBio.apply(this, arguments);
}
function analyzePhoto(_x2) {
  return _analyzePhoto.apply(this, arguments);
}
function _analyzePhoto() {
  _analyzePhoto = (0, _asyncToGenerator2.default)(function* (url) {
    var _yield$import2 = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      }),
      request = _yield$import2.request;
    var response = yield request('/ai/analyze-photo', {
      method: 'POST',
      body: {
        url: url
      }
    });
    return response;
  });
  return _analyzePhoto.apply(this, arguments);
}
function computeCompatibility(_x3, _x4) {
  return _computeCompatibility.apply(this, arguments);
}
function _computeCompatibility() {
  _computeCompatibility = (0, _asyncToGenerator2.default)(function* (petA, petB) {
    var _yield$import3 = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("./api"));
      }),
      request = _yield$import3.request;
    var response = yield request('/ai/compatibility', {
      method: 'POST',
      body: {
        a: petA,
        b: petB
      }
    });
    return response;
  });
  return _computeCompatibility.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lcmF0ZUJpbyIsIl94IiwiX2dlbmVyYXRlQmlvIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwicGFyYW1zIiwicGV0TmFtZSIsInRyaW0iLCJsZW5ndGgiLCJFcnJvciIsImtleXdvcmRzIiwic29tZSIsImtleXdvcmQiLCJfeWllbGQkaW1wb3J0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwicmVxdWVzdCIsInJlc3BvbnNlIiwibWV0aG9kIiwiYm9keSIsImJpbyIsImFuYWx5emVQaG90byIsIl94MiIsIl9hbmFseXplUGhvdG8iLCJ1cmwiLCJfeWllbGQkaW1wb3J0MiIsImNvbXB1dGVDb21wYXRpYmlsaXR5IiwiX3gzIiwiX3g0IiwiX2NvbXB1dGVDb21wYXRpYmlsaXR5IiwicGV0QSIsInBldEIiLCJfeWllbGQkaW1wb3J0MyIsImEiLCJiIl0sInNvdXJjZXMiOlsiYWlTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwaSB9IGZyb20gJy4vYXBpJztcbmltcG9ydCB0eXBlIHsgUGV0IH0gZnJvbSAnQHBhd2ZlY3RtYXRjaC9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBCaW9HZW5lcmF0aW9uUGFyYW1zIHtcbiAgcGV0TmFtZTogc3RyaW5nO1xuICBrZXl3b3Jkczogc3RyaW5nW107XG4gIHRvbmU/OiAncGxheWZ1bCcgfCAncHJvZmVzc2lvbmFsJyB8ICdjYXN1YWwnIHwgJ3JvbWFudGljJyB8ICdmdW5ueSc7XG4gIGxlbmd0aD86ICdzaG9ydCcgfCAnbWVkaXVtJyB8ICdsb25nJztcbiAgcGV0VHlwZT86IHN0cmluZztcbiAgYWdlPzogbnVtYmVyO1xuICBicmVlZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCaW9HZW5lcmF0aW9uUmVzdWx0IHtcbiAgYmlvOiBzdHJpbmc7XG4gIGtleXdvcmRzOiBzdHJpbmdbXTtcbiAgc2VudGltZW50OiB7IHNjb3JlOiBudW1iZXI7IGxhYmVsOiBzdHJpbmcgfTtcbiAgbWF0Y2hTY29yZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBob3RvQW5hbHlzaXNSZXN1bHQge1xuICBsYWJlbHM6IHN0cmluZ1tdO1xuICBsaWdodGluZzogbnVtYmVyO1xuICBzaGFycG5lc3M6IG51bWJlcjtcbiAgc2NvcmU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wYXRpYmlsaXR5UmVzdWx0IHtcbiAgc2NvcmU6IG51bWJlcjtcbiAgYnJlYWtkb3duOiB7XG4gICAgYnJlZWQ6IG51bWJlcjtcbiAgICBzaXplOiBudW1iZXI7XG4gICAgZW5lcmd5OiBudW1iZXI7XG4gICAgYWdlOiBudW1iZXI7XG4gICAgdHJhaXRzOiBudW1iZXI7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGV0Q29tcGF0aWJpbGl0eURhdGEge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGJyZWVkOiBzdHJpbmc7XG4gIGFnZTogbnVtYmVyO1xuICBzaXplOiBzdHJpbmc7XG4gIHNwZWNpZXM6IHN0cmluZztcbiAgZ2VuZGVyOiBzdHJpbmc7XG4gIHBlcnNvbmFsaXR5Pzogc3RyaW5nW107XG4gIGVuZXJneUxldmVsPzogbnVtYmVyO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVCaW8ocGFyYW1zOiBCaW9HZW5lcmF0aW9uUGFyYW1zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgcGFyYW1ldGVyc1xuICBpZiAoIXBhcmFtcy5wZXROYW1lIHx8IHBhcmFtcy5wZXROYW1lLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BldCBuYW1lIGlzIHJlcXVpcmVkIGFuZCBjYW5ub3QgYmUgZW1wdHknKTtcbiAgfVxuICBcbiAgaWYgKCFwYXJhbXMua2V5d29yZHMgfHwgcGFyYW1zLmtleXdvcmRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQXQgbGVhc3Qgb25lIGtleXdvcmQgaXMgcmVxdWlyZWQnKTtcbiAgfVxuICBcbiAgaWYgKHBhcmFtcy5rZXl3b3Jkcy5zb21lKGtleXdvcmQgPT4gIWtleXdvcmQgfHwga2V5d29yZC50cmltKCkubGVuZ3RoID09PSAwKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQWxsIGtleXdvcmRzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MnKTtcbiAgfVxuICBcbiAgY29uc3QgeyByZXF1ZXN0IH0gPSBhd2FpdCBpbXBvcnQoJy4vYXBpJyk7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdDxCaW9HZW5lcmF0aW9uUmVzdWx0PignL2FpL2dlbmVyYXRlLWJpbycsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBib2R5OiBwYXJhbXMsXG4gIH0pO1xuICByZXR1cm4gcmVzcG9uc2UuYmlvO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYW5hbHl6ZVBob3RvKHVybDogc3RyaW5nKTogUHJvbWlzZTxQaG90b0FuYWx5c2lzUmVzdWx0PiB7XG4gIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXdhaXQgaW1wb3J0KCcuL2FwaScpO1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoJy9haS9hbmFseXplLXBob3RvJywge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGJvZHk6IHsgdXJsIH0sXG4gIH0pO1xuICByZXR1cm4gcmVzcG9uc2UgYXMgUGhvdG9BbmFseXNpc1Jlc3VsdDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbXB1dGVDb21wYXRpYmlsaXR5KFxuICBwZXRBOiBQZXQgfCBQZXRDb21wYXRpYmlsaXR5RGF0YSxcbiAgcGV0QjogUGV0IHwgUGV0Q29tcGF0aWJpbGl0eURhdGEsXG4pOiBQcm9taXNlPENvbXBhdGliaWxpdHlSZXN1bHQ+IHtcbiAgY29uc3QgeyByZXF1ZXN0IH0gPSBhd2FpdCBpbXBvcnQoJy4vYXBpJyk7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdDxDb21wYXRpYmlsaXR5UmVzdWx0PignL2FpL2NvbXBhdGliaWxpdHknLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgYm9keTogeyBhOiBwZXRBLCBiOiBwZXRCIH0sXG4gIH0pO1xuICByZXR1cm4gcmVzcG9uc2U7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O1NBa0RzQkEsV0FBV0EsQ0FBQUMsRUFBQTtFQUFBLE9BQUFDLFlBQUEsQ0FBQUMsS0FBQSxPQUFBQyxTQUFBO0FBQUE7QUFBQSxTQUFBRixhQUFBO0VBQUFBLFlBQUEsT0FBQUcsa0JBQUEsQ0FBQUMsT0FBQSxFQUExQixXQUEyQkMsTUFBMkIsRUFBbUI7SUFFOUUsSUFBSSxDQUFDQSxNQUFNLENBQUNDLE9BQU8sSUFBSUQsTUFBTSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUNDLE1BQU0sS0FBSyxDQUFDLEVBQUU7TUFDekQsTUFBTSxJQUFJQyxLQUFLLENBQUMsMENBQTBDLENBQUM7SUFDN0Q7SUFFQSxJQUFJLENBQUNKLE1BQU0sQ0FBQ0ssUUFBUSxJQUFJTCxNQUFNLENBQUNLLFFBQVEsQ0FBQ0YsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUNwRCxNQUFNLElBQUlDLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQztJQUNyRDtJQUVBLElBQUlKLE1BQU0sQ0FBQ0ssUUFBUSxDQUFDQyxJQUFJLENBQUMsVUFBQUMsT0FBTztNQUFBLE9BQUksQ0FBQ0EsT0FBTyxJQUFJQSxPQUFPLENBQUNMLElBQUksQ0FBQyxDQUFDLENBQUNDLE1BQU0sS0FBSyxDQUFDO0lBQUEsRUFBQyxFQUFFO01BQzVFLE1BQU0sSUFBSUMsS0FBSyxDQUFDLHdDQUF3QyxDQUFDO0lBQzNEO0lBRUEsSUFBQUksYUFBQSxTQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FBQUMsSUFBQTtRQUFBLE9BQUFDLHVCQUFBLENBQUFDLE9BQUE7TUFBQTtNQUFRQyxPQUFPLEdBQUFOLGFBQUEsQ0FBUE0sT0FBTztJQUNmLElBQU1DLFFBQVEsU0FBU0QsT0FBTyxDQUFzQixrQkFBa0IsRUFBRTtNQUN0RUUsTUFBTSxFQUFFLE1BQU07TUFDZEMsSUFBSSxFQUFFakI7SUFDUixDQUFDLENBQUM7SUFDRixPQUFPZSxRQUFRLENBQUNHLEdBQUc7RUFDckIsQ0FBQztFQUFBLE9BQUF2QixZQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBO0FBQUEsU0FFcUJzQixZQUFZQSxDQUFBQyxHQUFBO0VBQUEsT0FBQUMsYUFBQSxDQUFBekIsS0FBQSxPQUFBQyxTQUFBO0FBQUE7QUFBQSxTQUFBd0IsY0FBQTtFQUFBQSxhQUFBLE9BQUF2QixrQkFBQSxDQUFBQyxPQUFBLEVBQTNCLFdBQTRCdUIsR0FBVyxFQUFnQztJQUM1RSxJQUFBQyxjQUFBLFNBQUFkLE9BQUEsQ0FBQUMsT0FBQSxHQUFBQyxJQUFBO1FBQUEsT0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtNQUFBO01BQVFDLE9BQU8sR0FBQVMsY0FBQSxDQUFQVCxPQUFPO0lBQ2YsSUFBTUMsUUFBUSxTQUFTRCxPQUFPLENBQUMsbUJBQW1CLEVBQUU7TUFDbERFLE1BQU0sRUFBRSxNQUFNO01BQ2RDLElBQUksRUFBRTtRQUFFSyxHQUFHLEVBQUhBO01BQUk7SUFDZCxDQUFDLENBQUM7SUFDRixPQUFPUCxRQUFRO0VBQ2pCLENBQUM7RUFBQSxPQUFBTSxhQUFBLENBQUF6QixLQUFBLE9BQUFDLFNBQUE7QUFBQTtBQUFBLFNBRXFCMkIsb0JBQW9CQSxDQUFBQyxHQUFBLEVBQUFDLEdBQUE7RUFBQSxPQUFBQyxxQkFBQSxDQUFBL0IsS0FBQSxPQUFBQyxTQUFBO0FBQUE7QUFBQSxTQUFBOEIsc0JBQUE7RUFBQUEscUJBQUEsT0FBQTdCLGtCQUFBLENBQUFDLE9BQUEsRUFBbkMsV0FDTDZCLElBQWdDLEVBQ2hDQyxJQUFnQyxFQUNGO0lBQzlCLElBQUFDLGNBQUEsU0FBQXJCLE9BQUEsQ0FBQUMsT0FBQSxHQUFBQyxJQUFBO1FBQUEsT0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtNQUFBO01BQVFDLE9BQU8sR0FBQWdCLGNBQUEsQ0FBUGhCLE9BQU87SUFDZixJQUFNQyxRQUFRLFNBQVNELE9BQU8sQ0FBc0IsbUJBQW1CLEVBQUU7TUFDdkVFLE1BQU0sRUFBRSxNQUFNO01BQ2RDLElBQUksRUFBRTtRQUFFYyxDQUFDLEVBQUVILElBQUk7UUFBRUksQ0FBQyxFQUFFSDtNQUFLO0lBQzNCLENBQUMsQ0FBQztJQUNGLE9BQU9kLFFBQVE7RUFDakIsQ0FBQztFQUFBLE9BQUFZLHFCQUFBLENBQUEvQixLQUFBLE9BQUFDLFNBQUE7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==