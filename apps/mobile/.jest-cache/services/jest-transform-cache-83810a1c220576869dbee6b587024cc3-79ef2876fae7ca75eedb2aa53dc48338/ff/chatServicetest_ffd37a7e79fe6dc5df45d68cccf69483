cd9c052c61d1967c91229d185526a3f8
"use strict";

_getJestObj().mock("../api", function () {
  return {
    request: jest.fn()
  };
});
_getJestObj().mock('expo-file-system', function () {
  return {
    uploadAsync: jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _chatService = require("../chatService");
var _api = require("../api");
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Chat Service', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('sendReaction', function () {
    it('should send reaction successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        messageId: 'msg-123',
        reactions: [{
          emoji: 'üòç',
          userId: 'user-1',
          timestamp: '2024-01-01T00:00:00Z'
        }]
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendReaction('match-123', 'msg-123', 'üòç');
      expect(response).toEqual(mockResponse);
      expect(_api.request).toHaveBeenCalledWith('/chat/reactions', {
        method: 'POST',
        body: {
          matchId: 'match-123',
          messageId: 'msg-123',
          reaction: 'üòç'
        }
      });
    }));
    it('should throw error on failed reaction', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Failed to send reaction'));
      yield expect(_chatService.chatService.sendReaction('match-123', 'msg-123', 'üòç')).rejects.toThrow('Failed to send reaction');
    }));
    it('should handle multiple reactions', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        messageId: 'msg-123',
        reactions: [{
          emoji: 'üòç',
          userId: 'user-1',
          timestamp: '2024-01-01T00:00:00Z'
        }, {
          emoji: '‚ù§Ô∏è',
          userId: 'user-2',
          timestamp: '2024-01-01T00:01:00Z'
        }]
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendReaction('match-123', 'msg-123', '‚ù§Ô∏è');
      expect(response.reactions).toHaveLength(2);
    }));
  });
  describe('sendAttachment', function () {
    it('should send image attachment', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['image data'], 'photo.jpg', {
        type: 'image/jpeg'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/photo.jpg',
        type: 'image'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'image',
        file: mockFile,
        name: 'photo.jpg'
      });
      expect(response).toEqual(mockResponse);
      expect(_api.request).toHaveBeenCalledWith('/chat/attachments', {
        method: 'POST',
        body: expect.any(FormData)
      });
    }));
    it('should send video attachment', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['video data'], 'video.mp4', {
        type: 'video/mp4'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/video.mp4',
        type: 'video'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'video',
        file: mockFile,
        name: 'video.mp4'
      });
      expect(response.type).toBe('video');
    }));
    it('should send file attachment', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['file data'], 'document.pdf', {
        type: 'application/pdf'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/document.pdf',
        type: 'file'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'file',
        file: mockFile,
        name: 'document.pdf'
      });
      expect(response.type).toBe('file');
    }));
    it('should handle attachment errors', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['data'], 'file.pdf', {
        type: 'application/pdf'
      });
      _api.request.mockRejectedValueOnce(new Error('Upload failed'));
      yield expect(_chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'file',
        file: mockFile
      })).rejects.toThrow('Upload failed');
    }));
  });
  describe('sendVoiceNote', function () {
    it('should send voice note with FormData (native)', (0, _asyncToGenerator2.default)(function* () {
      var formData = new FormData();
      formData.append('audio', new Blob(['audio data'], {
        type: 'audio/webm'
      }), {
        type: 'audio/webm'
      });
      _api.request.mockResolvedValueOnce(undefined);
      yield _chatService.chatService.sendVoiceNote('match-123', formData, 5);
      expect(_api.request).toHaveBeenCalledWith('/api/chat/voice', {
        method: 'POST',
        body: expect.any(FormData),
        headers: {}
      });
    }));
    it('should send voice note with Blob (web)', (0, _asyncToGenerator2.default)(function* () {
      var audioBlob = new Blob(['audio data'], {
        type: 'audio/webm'
      });
      _api.request.mockResolvedValueOnce(undefined);
      yield _chatService.chatService.sendVoiceNote('match-123', audioBlob, 5);
      expect(_api.request).toHaveBeenCalledWith('/api/chat/voice', {
        method: 'POST',
        body: expect.any(FormData),
        headers: {}
      });
    }));
    it('should send voice note with legacy signature', (0, _asyncToGenerator2.default)(function* () {
      var audioBlob = new Blob(['audio data'], {
        type: 'audio/m4a'
      });
      _api.request.mockResolvedValueOnce({
        success: true,
        url: 'https://example.com/voice.m4a',
        duration: 5
      });
      yield _chatService.chatService.sendVoiceNote({
        matchId: 'match-123',
        audioBlob: audioBlob,
        duration: 5
      });
      expect(_api.request).toHaveBeenCalledWith('/api/chat/voice', {
        method: 'POST',
        body: expect.any(FormData),
        headers: {}
      });
    }));
    it('should throw error for invalid file type', (0, _asyncToGenerator2.default)(function* () {
      yield expect(_chatService.chatService.sendVoiceNote('match-123', {}, 5)).rejects.toThrow('Invalid file type');
    }));
    it('should handle voice note upload errors', (0, _asyncToGenerator2.default)(function* () {
      var formData = new FormData();
      _api.request.mockRejectedValueOnce(new Error('Upload failed'));
      yield expect(_chatService.chatService.sendVoiceNote('match-123', formData, 5)).rejects.toThrow('Upload failed');
    }));
  });
  describe('sendVoiceNoteNative', function () {
    it('should upload voice note to S3 and register message', (0, _asyncToGenerator2.default)(function* () {
      var presignResponse = {
        url: 'https://s3.example.com/upload',
        key: 'voice-notes/abc123.webm'
      };
      _api.request.mockResolvedValueOnce(presignResponse).mockResolvedValueOnce({
        status: 200
      }).mockResolvedValueOnce({
        success: true
      });
      FileSystem.uploadAsync.mockResolvedValueOnce({
        status: 200,
        body: 'Uploaded'
      });
      yield (0, _chatService.sendVoiceNoteNative)('match-123', {
        fileUri: 'file://voice.webm',
        duration: 10
      });
      expect(_api.request).toHaveBeenCalledWith('/uploads/voice/presign', {
        method: 'POST',
        body: {
          contentType: 'audio/webm'
        }
      });
      expect(FileSystem.uploadAsync).toHaveBeenCalledWith(presignResponse.url, 'file://voice.webm', {
        httpMethod: 'PUT',
        headers: {
          'Content-Type': 'audio/webm'
        },
        uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
      });
      expect(_api.request).toHaveBeenCalledWith('/chat/match-123/voice-note', {
        method: 'POST',
        body: {
          key: presignResponse.key,
          duration: 10,
          waveform: []
        }
      });
    }));
    it('should handle S3 upload errors', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockResolvedValueOnce({
        url: 'https://s3.example.com/upload',
        key: 'voice-notes/abc123.webm'
      });
      FileSystem.uploadAsync.mockRejectedValueOnce(new Error('S3 upload failed'));
      yield expect((0, _chatService.sendVoiceNoteNative)('match-123', {
        fileUri: 'file://voice.webm',
        duration: 10
      })).rejects.toThrow('S3 upload failed');
    }));
    it('should handle presign errors', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Presign failed'));
      yield expect((0, _chatService.sendVoiceNoteNative)('match-123', {
        fileUri: 'file://voice.webm',
        duration: 10
      })).rejects.toThrow('Presign failed');
    }));
  });
  describe('Edge Cases', function () {
    it('should handle large file uploads', (0, _asyncToGenerator2.default)(function* () {
      var largeFile = new File(['x'.repeat(10 * 1024 * 1024)], 'large.jpg', {
        type: 'image/jpeg'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/large.jpg',
        type: 'image'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'image',
        file: largeFile
      });
      expect(response.success).toBe(true);
    }));
    it('should handle network errors during reaction', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Network error'));
      yield expect(_chatService.chatService.sendReaction('match-123', 'msg-123', '‚ù§Ô∏è')).rejects.toThrow('Network error');
    }));
    it('should handle invalid match ID', (0, _asyncToGenerator2.default)(function* () {
      _api.request.mockRejectedValueOnce(new Error('Match not found'));
      yield expect(_chatService.chatService.sendReaction('invalid-match', 'msg-123', 'üòç')).rejects.toThrow('Match not found');
    }));
    it('should handle concurrent reactions', (0, _asyncToGenerator2.default)(function* () {
      var _reactions$;
      var mockResponse = {
        success: true,
        messageId: 'msg-123',
        reactions: []
      };
      _api.request.mockResolvedValue(mockResponse);
      var reactions = yield Promise.all([_chatService.chatService.sendReaction('match-123', 'msg-123', 'üòç'), _chatService.chatService.sendReaction('match-123', 'msg-123', '‚ù§Ô∏è'), _chatService.chatService.sendReaction('match-123', 'msg-123', 'üëç')]);
      expect(reactions).toHaveLength(3);
      expect((_reactions$ = reactions[0]) == null ? void 0 : _reactions$.success).toBe(true);
    }));
    it('should handle missing attachment name', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['data'], '', {
        type: 'image/jpeg'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/file',
        type: 'image'
      };
      _api.request.mockResolvedValueOnce(mockResponse);
      var response = yield _chatService.chatService.sendAttachment({
        matchId: 'match-123',
        attachmentType: 'image',
        file: mockFile
      });
      expect(response.success).toBe(true);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,