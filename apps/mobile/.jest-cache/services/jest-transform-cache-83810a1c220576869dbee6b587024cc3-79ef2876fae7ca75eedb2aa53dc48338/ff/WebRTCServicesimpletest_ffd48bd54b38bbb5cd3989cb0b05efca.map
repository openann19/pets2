{"version":3,"names":["_getJestObj","mock","request","jest","fn","_interopRequireDefault","require","_asyncToGenerator2","_WebRTCService","_reactNativeIncallManager","_api","_require","mockInCallManager","InCallManager","mockRequest","describe","beforeEach","clearAllMocks","it","expect","WebRTCService","toBeDefined","toBe","startCall","endCall","toggleMute","toggleVideo","getCallState","default","mockResolvedValueOnce","callId","result","toHaveBeenCalledWith","objectContaining","method","body","targetUserId","callType","mockRejectedValueOnce","Error","rejects","toThrow","success","muted","videoEnabled","camera","switchCamera","state","isActive","isCallActive","offer","type","sdp","answer","handleOffer","handleAnswer","candidate","handleIceCandidate"],"sources":["WebRTCService.simple.test.ts"],"sourcesContent":["/**\n * Simplified WebRTC Service Tests - Core functionality\n */\n\nimport WebRTCService from '../WebRTCService';\n\n// Mock dependencies\njest.mock('react-native-incall-manager');\njest.mock('../api', () => ({\n  request: jest.fn(),\n}));\n\nimport InCallManager from 'react-native-incall-manager';\nimport { request } from '../api';\n\nconst mockInCallManager = InCallManager as jest.Mocked<typeof InCallManager>;\nconst mockRequest = request as jest.MockedFunction<typeof request>;\n\ndescribe('WebRTCService - Core Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Service Initialization', () => {\n    it('should be a singleton instance', () => {\n      expect(WebRTCService).toBeDefined();\n      expect(typeof WebRTCService).toBe('object');\n    });\n\n    it('should have expected methods', () => {\n      expect(typeof WebRTCService.startCall).toBe('function');\n      expect(typeof WebRTCService.endCall).toBe('function');\n      expect(typeof WebRTCService.toggleMute).toBe('function');\n      expect(typeof WebRTCService.toggleVideo).toBe('function');\n      expect(typeof WebRTCService.getCallState).toBe('function');\n    });\n  });\n\n  describe('Call Management', () => {\n    it('should start voice call successfully', async () => {\n      mockRequest.mockResolvedValueOnce({ callId: 'call123' });\n\n      const result = await WebRTCService.startCall('user123', 'voice');\n\n      expect(result).toBeDefined();\n      expect(mockRequest).toHaveBeenCalledWith('/calls/start', expect.objectContaining({\n        method: 'POST',\n        body: expect.objectContaining({\n          targetUserId: 'user123',\n          callType: 'voice',\n        }),\n      }));\n    });\n\n    it('should start video call successfully', async () => {\n      mockRequest.mockResolvedValueOnce({ callId: 'call456' });\n\n      const result = await WebRTCService.startCall('user456', 'video');\n\n      expect(result).toBeDefined();\n      expect(mockRequest).toHaveBeenCalledWith('/calls/start', expect.objectContaining({\n        method: 'POST',\n        body: expect.objectContaining({\n          targetUserId: 'user456',\n          callType: 'video',\n        }),\n      }));\n    });\n\n    it('should handle call start errors', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('User not available'));\n\n      await expect(WebRTCService.startCall('user123', 'voice')).rejects.toThrow('User not available');\n    });\n\n    it('should end call successfully', async () => {\n      mockRequest.mockResolvedValueOnce({ success: true });\n\n      const result = await WebRTCService.endCall();\n\n      expect(result).toBe(true);\n      expect(mockRequest).toHaveBeenCalledWith('/calls/end', {\n        method: 'POST',\n      });\n    });\n  });\n\n  describe('Call Controls', () => {\n    it('should toggle mute', async () => {\n      mockRequest.mockResolvedValueOnce({ muted: true });\n\n      const result = await WebRTCService.toggleMute();\n\n      expect(result).toBeDefined();\n      expect(mockRequest).toHaveBeenCalledWith('/calls/mute', {\n        method: 'POST',\n      });\n    });\n\n    it('should toggle video', async () => {\n      mockRequest.mockResolvedValueOnce({ videoEnabled: false });\n\n      const result = await WebRTCService.toggleVideo();\n\n      expect(result).toBeDefined();\n      expect(mockRequest).toHaveBeenCalledWith('/calls/video', {\n        method: 'POST',\n      });\n    });\n\n    it('should switch camera', async () => {\n      mockRequest.mockResolvedValueOnce({ camera: 'front' });\n\n      const result = await WebRTCService.switchCamera();\n\n      expect(result).toBeDefined();\n      expect(mockRequest).toHaveBeenCalledWith('/calls/camera', {\n        method: 'POST',\n      });\n    });\n  });\n\n  describe('Call State', () => {\n    it('should get call state', () => {\n      const state = WebRTCService.getCallState();\n\n      expect(state).toBeDefined();\n      expect(typeof state).toBe('string');\n    });\n\n    it('should check if call is active', () => {\n      const isActive = WebRTCService.isCallActive();\n\n      expect(typeof isActive).toBe('boolean');\n    });\n  });\n\n  describe('WebRTC Signaling', () => {\n    it('should handle WebRTC offer', async () => {\n      const offer = { type: 'offer', sdp: 'fake-sdp' };\n      mockRequest.mockResolvedValueOnce({ answer: 'fake-answer' });\n\n      const result = await WebRTCService.handleOffer('call123', offer);\n\n      expect(result).toBeDefined();\n      expect(mockRequest).toHaveBeenCalledWith('/calls/offer', {\n        method: 'POST',\n        body: { callId: 'call123', offer },\n      });\n    });\n\n    it('should handle WebRTC answer', async () => {\n      const answer = { type: 'answer', sdp: 'fake-sdp' };\n      mockRequest.mockResolvedValueOnce({ success: true });\n\n      const result = await WebRTCService.handleAnswer('call123', answer);\n\n      expect(result).toBeDefined();\n      expect(mockRequest).toHaveBeenCalledWith('/calls/answer', {\n        method: 'POST',\n        body: { callId: 'call123', answer },\n      });\n    });\n\n    it('should handle ICE candidates', async () => {\n      const candidate = { candidate: 'fake-candidate' };\n      mockRequest.mockResolvedValueOnce({ success: true });\n\n      const result = await WebRTCService.handleIceCandidate('call123', candidate);\n\n      expect(result).toBeDefined();\n      expect(mockRequest).toHaveBeenCalledWith('/calls/ice', {\n        method: 'POST',\n        body: { callId: 'call123', candidate },\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle network errors during call start', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('Network error'));\n\n      await expect(WebRTCService.startCall('user123', 'voice')).rejects.toThrow('Network error');\n    });\n\n    it('should handle API errors during call controls', async () => {\n      mockRequest.mockRejectedValueOnce(new Error('Call not active'));\n\n      await expect(WebRTCService.toggleMute()).rejects.toThrow('Call not active');\n    });\n  });\n});\n"],"mappings":";;AAOAA,WAAA,GAAKC,IAAI,CAAC,6BAA6B,CAAC;AACxCD,WAAA,GAAKC,IAAI,WAAW;EAAA,OAAO;IACzBC,OAAO,EAAEC,IAAI,CAACC,EAAE,CAAC;EACnB,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AANJ,IAAAE,cAAA,GAAAH,sBAAA,CAAAC,OAAA;AAQA,IAAAG,yBAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,IAAA,GAAAJ,OAAA;AAAiC,SAAAN,YAAA;EAAA,IAAAW,QAAA,GAAAL,OAAA;IAAAH,IAAA,GAAAQ,QAAA,CAAAR,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEjC,IAAMS,iBAAiB,GAAGC,iCAAkD;AAC5E,IAAMC,WAAW,GAAGZ,YAA8C;AAElEa,QAAQ,CAAC,4BAA4B,EAAE,YAAM;EAC3CC,UAAU,CAAC,YAAM;IACfb,IAAI,CAACc,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFF,QAAQ,CAAC,wBAAwB,EAAE,YAAM;IACvCG,EAAE,CAAC,gCAAgC,EAAE,YAAM;MACzCC,MAAM,CAACC,sBAAa,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCF,MAAM,CAAC,OAAOC,sBAAa,CAAC,CAACE,IAAI,CAAC,QAAQ,CAAC;IAC7C,CAAC,CAAC;IAEFJ,EAAE,CAAC,8BAA8B,EAAE,YAAM;MACvCC,MAAM,CAAC,OAAOC,sBAAa,CAACG,SAAS,CAAC,CAACD,IAAI,CAAC,UAAU,CAAC;MACvDH,MAAM,CAAC,OAAOC,sBAAa,CAACI,OAAO,CAAC,CAACF,IAAI,CAAC,UAAU,CAAC;MACrDH,MAAM,CAAC,OAAOC,sBAAa,CAACK,UAAU,CAAC,CAACH,IAAI,CAAC,UAAU,CAAC;MACxDH,MAAM,CAAC,OAAOC,sBAAa,CAACM,WAAW,CAAC,CAACJ,IAAI,CAAC,UAAU,CAAC;MACzDH,MAAM,CAAC,OAAOC,sBAAa,CAACO,YAAY,CAAC,CAACL,IAAI,CAAC,UAAU,CAAC;IAC5D,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFP,QAAQ,CAAC,iBAAiB,EAAE,YAAM;IAChCG,EAAE,CAAC,sCAAsC,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MACrDd,WAAW,CAACe,qBAAqB,CAAC;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC;MAExD,IAAMC,MAAM,SAASX,sBAAa,CAACG,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC;MAEhEJ,MAAM,CAACY,MAAM,CAAC,CAACV,WAAW,CAAC,CAAC;MAC5BF,MAAM,CAACL,WAAW,CAAC,CAACkB,oBAAoB,CAAC,cAAc,EAAEb,MAAM,CAACc,gBAAgB,CAAC;QAC/EC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEhB,MAAM,CAACc,gBAAgB,CAAC;UAC5BG,YAAY,EAAE,SAAS;UACvBC,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,CAAC,CAAC;IACL,CAAC,EAAC;IAEFnB,EAAE,CAAC,sCAAsC,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MACrDd,WAAW,CAACe,qBAAqB,CAAC;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC;MAExD,IAAMC,MAAM,SAASX,sBAAa,CAACG,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC;MAEhEJ,MAAM,CAACY,MAAM,CAAC,CAACV,WAAW,CAAC,CAAC;MAC5BF,MAAM,CAACL,WAAW,CAAC,CAACkB,oBAAoB,CAAC,cAAc,EAAEb,MAAM,CAACc,gBAAgB,CAAC;QAC/EC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEhB,MAAM,CAACc,gBAAgB,CAAC;UAC5BG,YAAY,EAAE,SAAS;UACvBC,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,CAAC,CAAC;IACL,CAAC,EAAC;IAEFnB,EAAE,CAAC,iCAAiC,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MAChDd,WAAW,CAACwB,qBAAqB,CAAC,IAAIC,KAAK,CAAC,oBAAoB,CAAC,CAAC;MAElE,MAAMpB,MAAM,CAACC,sBAAa,CAACG,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAACiB,OAAO,CAACC,OAAO,CAAC,oBAAoB,CAAC;IACjG,CAAC,EAAC;IAEFvB,EAAE,CAAC,8BAA8B,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MAC7Cd,WAAW,CAACe,qBAAqB,CAAC;QAAEa,OAAO,EAAE;MAAK,CAAC,CAAC;MAEpD,IAAMX,MAAM,SAASX,sBAAa,CAACI,OAAO,CAAC,CAAC;MAE5CL,MAAM,CAACY,MAAM,CAAC,CAACT,IAAI,CAAC,IAAI,CAAC;MACzBH,MAAM,CAACL,WAAW,CAAC,CAACkB,oBAAoB,CAAC,YAAY,EAAE;QACrDE,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFnB,QAAQ,CAAC,eAAe,EAAE,YAAM;IAC9BG,EAAE,CAAC,oBAAoB,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MACnCd,WAAW,CAACe,qBAAqB,CAAC;QAAEc,KAAK,EAAE;MAAK,CAAC,CAAC;MAElD,IAAMZ,MAAM,SAASX,sBAAa,CAACK,UAAU,CAAC,CAAC;MAE/CN,MAAM,CAACY,MAAM,CAAC,CAACV,WAAW,CAAC,CAAC;MAC5BF,MAAM,CAACL,WAAW,CAAC,CAACkB,oBAAoB,CAAC,aAAa,EAAE;QACtDE,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFhB,EAAE,CAAC,qBAAqB,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MACpCd,WAAW,CAACe,qBAAqB,CAAC;QAAEe,YAAY,EAAE;MAAM,CAAC,CAAC;MAE1D,IAAMb,MAAM,SAASX,sBAAa,CAACM,WAAW,CAAC,CAAC;MAEhDP,MAAM,CAACY,MAAM,CAAC,CAACV,WAAW,CAAC,CAAC;MAC5BF,MAAM,CAACL,WAAW,CAAC,CAACkB,oBAAoB,CAAC,cAAc,EAAE;QACvDE,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFhB,EAAE,CAAC,sBAAsB,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MACrCd,WAAW,CAACe,qBAAqB,CAAC;QAAEgB,MAAM,EAAE;MAAQ,CAAC,CAAC;MAEtD,IAAMd,MAAM,SAASX,sBAAa,CAAC0B,YAAY,CAAC,CAAC;MAEjD3B,MAAM,CAACY,MAAM,CAAC,CAACV,WAAW,CAAC,CAAC;MAC5BF,MAAM,CAACL,WAAW,CAAC,CAACkB,oBAAoB,CAAC,eAAe,EAAE;QACxDE,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFnB,QAAQ,CAAC,YAAY,EAAE,YAAM;IAC3BG,EAAE,CAAC,uBAAuB,EAAE,YAAM;MAChC,IAAM6B,KAAK,GAAG3B,sBAAa,CAACO,YAAY,CAAC,CAAC;MAE1CR,MAAM,CAAC4B,KAAK,CAAC,CAAC1B,WAAW,CAAC,CAAC;MAC3BF,MAAM,CAAC,OAAO4B,KAAK,CAAC,CAACzB,IAAI,CAAC,QAAQ,CAAC;IACrC,CAAC,CAAC;IAEFJ,EAAE,CAAC,gCAAgC,EAAE,YAAM;MACzC,IAAM8B,QAAQ,GAAG5B,sBAAa,CAAC6B,YAAY,CAAC,CAAC;MAE7C9B,MAAM,CAAC,OAAO6B,QAAQ,CAAC,CAAC1B,IAAI,CAAC,SAAS,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFP,QAAQ,CAAC,kBAAkB,EAAE,YAAM;IACjCG,EAAE,CAAC,4BAA4B,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MAC3C,IAAMsB,KAAK,GAAG;QAAEC,IAAI,EAAE,OAAO;QAAEC,GAAG,EAAE;MAAW,CAAC;MAChDtC,WAAW,CAACe,qBAAqB,CAAC;QAAEwB,MAAM,EAAE;MAAc,CAAC,CAAC;MAE5D,IAAMtB,MAAM,SAASX,sBAAa,CAACkC,WAAW,CAAC,SAAS,EAAEJ,KAAK,CAAC;MAEhE/B,MAAM,CAACY,MAAM,CAAC,CAACV,WAAW,CAAC,CAAC;MAC5BF,MAAM,CAACL,WAAW,CAAC,CAACkB,oBAAoB,CAAC,cAAc,EAAE;QACvDE,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAEL,MAAM,EAAE,SAAS;UAAEoB,KAAK,EAALA;QAAM;MACnC,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFhC,EAAE,CAAC,6BAA6B,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MAC5C,IAAMyB,MAAM,GAAG;QAAEF,IAAI,EAAE,QAAQ;QAAEC,GAAG,EAAE;MAAW,CAAC;MAClDtC,WAAW,CAACe,qBAAqB,CAAC;QAAEa,OAAO,EAAE;MAAK,CAAC,CAAC;MAEpD,IAAMX,MAAM,SAASX,sBAAa,CAACmC,YAAY,CAAC,SAAS,EAAEF,MAAM,CAAC;MAElElC,MAAM,CAACY,MAAM,CAAC,CAACV,WAAW,CAAC,CAAC;MAC5BF,MAAM,CAACL,WAAW,CAAC,CAACkB,oBAAoB,CAAC,eAAe,EAAE;QACxDE,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAEL,MAAM,EAAE,SAAS;UAAEuB,MAAM,EAANA;QAAO;MACpC,CAAC,CAAC;IACJ,CAAC,EAAC;IAEFnC,EAAE,CAAC,8BAA8B,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MAC7C,IAAM4B,SAAS,GAAG;QAAEA,SAAS,EAAE;MAAiB,CAAC;MACjD1C,WAAW,CAACe,qBAAqB,CAAC;QAAEa,OAAO,EAAE;MAAK,CAAC,CAAC;MAEpD,IAAMX,MAAM,SAASX,sBAAa,CAACqC,kBAAkB,CAAC,SAAS,EAAED,SAAS,CAAC;MAE3ErC,MAAM,CAACY,MAAM,CAAC,CAACV,WAAW,CAAC,CAAC;MAC5BF,MAAM,CAACL,WAAW,CAAC,CAACkB,oBAAoB,CAAC,YAAY,EAAE;QACrDE,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAEL,MAAM,EAAE,SAAS;UAAE0B,SAAS,EAATA;QAAU;MACvC,CAAC,CAAC;IACJ,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFzC,QAAQ,CAAC,gBAAgB,EAAE,YAAM;IAC/BG,EAAE,CAAC,gDAAgD,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MAC/Dd,WAAW,CAACwB,qBAAqB,CAAC,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAC;MAE7D,MAAMpB,MAAM,CAACC,sBAAa,CAACG,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAACiB,OAAO,CAACC,OAAO,CAAC,eAAe,CAAC;IAC5F,CAAC,EAAC;IAEFvB,EAAE,CAAC,+CAA+C,MAAAX,kBAAA,CAAAqB,OAAA,EAAE,aAAY;MAC9Dd,WAAW,CAACwB,qBAAqB,CAAC,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC;MAE/D,MAAMpB,MAAM,CAACC,sBAAa,CAACK,UAAU,CAAC,CAAC,CAAC,CAACe,OAAO,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC7E,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}