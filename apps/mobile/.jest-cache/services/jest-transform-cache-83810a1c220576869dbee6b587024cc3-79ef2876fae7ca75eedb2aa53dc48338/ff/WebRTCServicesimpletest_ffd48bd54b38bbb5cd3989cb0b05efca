164b710efb94aed44ea2f99cf68d2187
"use strict";

_getJestObj().mock('react-native-incall-manager');
_getJestObj().mock("../api", function () {
  return {
    request: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _WebRTCService = _interopRequireDefault(require("../WebRTCService"));
var _reactNativeIncallManager = _interopRequireDefault(require("react-native-incall-manager"));
var _api = require("../api");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockInCallManager = _reactNativeIncallManager.default;
var mockRequest = _api.request;
describe('WebRTCService - Core Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Service Initialization', function () {
    it('should be a singleton instance', function () {
      expect(_WebRTCService.default).toBeDefined();
      expect(typeof _WebRTCService.default).toBe('object');
    });
    it('should have expected methods', function () {
      expect(typeof _WebRTCService.default.startCall).toBe('function');
      expect(typeof _WebRTCService.default.endCall).toBe('function');
      expect(typeof _WebRTCService.default.toggleMute).toBe('function');
      expect(typeof _WebRTCService.default.toggleVideo).toBe('function');
      expect(typeof _WebRTCService.default.getCallState).toBe('function');
    });
  });
  describe('Call Management', function () {
    it('should start voice call successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        callId: 'call123'
      });
      var result = yield _WebRTCService.default.startCall('user123', 'voice');
      expect(result).toBeDefined();
      expect(mockRequest).toHaveBeenCalledWith('/calls/start', expect.objectContaining({
        method: 'POST',
        body: expect.objectContaining({
          targetUserId: 'user123',
          callType: 'voice'
        })
      }));
    }));
    it('should start video call successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        callId: 'call456'
      });
      var result = yield _WebRTCService.default.startCall('user456', 'video');
      expect(result).toBeDefined();
      expect(mockRequest).toHaveBeenCalledWith('/calls/start', expect.objectContaining({
        method: 'POST',
        body: expect.objectContaining({
          targetUserId: 'user456',
          callType: 'video'
        })
      }));
    }));
    it('should handle call start errors', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('User not available'));
      yield expect(_WebRTCService.default.startCall('user123', 'voice')).rejects.toThrow('User not available');
    }));
    it('should end call successfully', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      var result = yield _WebRTCService.default.endCall();
      expect(result).toBe(true);
      expect(mockRequest).toHaveBeenCalledWith('/calls/end', {
        method: 'POST'
      });
    }));
  });
  describe('Call Controls', function () {
    it('should toggle mute', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        muted: true
      });
      var result = yield _WebRTCService.default.toggleMute();
      expect(result).toBeDefined();
      expect(mockRequest).toHaveBeenCalledWith('/calls/mute', {
        method: 'POST'
      });
    }));
    it('should toggle video', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        videoEnabled: false
      });
      var result = yield _WebRTCService.default.toggleVideo();
      expect(result).toBeDefined();
      expect(mockRequest).toHaveBeenCalledWith('/calls/video', {
        method: 'POST'
      });
    }));
    it('should switch camera', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockResolvedValueOnce({
        camera: 'front'
      });
      var result = yield _WebRTCService.default.switchCamera();
      expect(result).toBeDefined();
      expect(mockRequest).toHaveBeenCalledWith('/calls/camera', {
        method: 'POST'
      });
    }));
  });
  describe('Call State', function () {
    it('should get call state', function () {
      var state = _WebRTCService.default.getCallState();
      expect(state).toBeDefined();
      expect(typeof state).toBe('string');
    });
    it('should check if call is active', function () {
      var isActive = _WebRTCService.default.isCallActive();
      expect(typeof isActive).toBe('boolean');
    });
  });
  describe('WebRTC Signaling', function () {
    it('should handle WebRTC offer', (0, _asyncToGenerator2.default)(function* () {
      var offer = {
        type: 'offer',
        sdp: 'fake-sdp'
      };
      mockRequest.mockResolvedValueOnce({
        answer: 'fake-answer'
      });
      var result = yield _WebRTCService.default.handleOffer('call123', offer);
      expect(result).toBeDefined();
      expect(mockRequest).toHaveBeenCalledWith('/calls/offer', {
        method: 'POST',
        body: {
          callId: 'call123',
          offer: offer
        }
      });
    }));
    it('should handle WebRTC answer', (0, _asyncToGenerator2.default)(function* () {
      var answer = {
        type: 'answer',
        sdp: 'fake-sdp'
      };
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      var result = yield _WebRTCService.default.handleAnswer('call123', answer);
      expect(result).toBeDefined();
      expect(mockRequest).toHaveBeenCalledWith('/calls/answer', {
        method: 'POST',
        body: {
          callId: 'call123',
          answer: answer
        }
      });
    }));
    it('should handle ICE candidates', (0, _asyncToGenerator2.default)(function* () {
      var candidate = {
        candidate: 'fake-candidate'
      };
      mockRequest.mockResolvedValueOnce({
        success: true
      });
      var result = yield _WebRTCService.default.handleIceCandidate('call123', candidate);
      expect(result).toBeDefined();
      expect(mockRequest).toHaveBeenCalledWith('/calls/ice', {
        method: 'POST',
        body: {
          callId: 'call123',
          candidate: candidate
        }
      });
    }));
  });
  describe('Error Handling', function () {
    it('should handle network errors during call start', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Network error'));
      yield expect(_WebRTCService.default.startCall('user123', 'voice')).rejects.toThrow('Network error');
    }));
    it('should handle API errors during call controls', (0, _asyncToGenerator2.default)(function* () {
      mockRequest.mockRejectedValueOnce(new Error('Call not active'));
      yield expect(_WebRTCService.default.toggleMute()).rejects.toThrow('Call not active');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,