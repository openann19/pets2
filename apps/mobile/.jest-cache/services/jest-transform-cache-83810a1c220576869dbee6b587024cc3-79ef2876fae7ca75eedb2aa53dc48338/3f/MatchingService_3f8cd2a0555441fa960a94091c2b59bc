b44c29d99b830e7373b1b87c684ebdec
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matchingService = exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _core = require("@pawfectmatch/core");
var _api = require("./api");
var MatchingService = function () {
  function MatchingService() {
    (0, _classCallCheck2.default)(this, MatchingService);
  }
  return (0, _createClass2.default)(MatchingService, [{
    key: "getRecommendations",
    value: (function () {
      var _getRecommendations = (0, _asyncToGenerator2.default)(function* (filters) {
        var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
        try {
          var queryParams = new URLSearchParams();
          if ((filters == null ? void 0 : filters.species) !== undefined && filters.species !== "") queryParams.set("species", filters.species);
          if ((filters == null ? void 0 : filters.minAge) !== undefined) queryParams.set("minAge", filters.minAge.toString());
          if ((filters == null ? void 0 : filters.maxAge) !== undefined) queryParams.set("maxAge", filters.maxAge.toString());
          if ((filters == null ? void 0 : filters.size) !== undefined && filters.size !== "") queryParams.set("size", filters.size);
          if ((filters == null ? void 0 : filters.intent) !== undefined && filters.intent !== "") queryParams.set("intent", filters.intent);
          if ((filters == null ? void 0 : filters.distance) !== undefined) queryParams.set("distance", filters.distance.toString());
          if ((filters == null ? void 0 : filters.breed) !== undefined && filters.breed !== "") queryParams.set("breed", filters.breed);
          queryParams.set("limit", limit.toString());
          var endpoint = `/matches/recommendations?${queryParams.toString()}`;
          var response = yield _api.api.request(endpoint);
          _core.logger.info("Fetched pet recommendations", {
            count: response.length,
            filters: filters !== undefined ? Object.keys(filters).length : 0
          });
          return response;
        } catch (error) {
          _core.logger.error("Failed to get recommendations", {
            error: error,
            filters: filters
          });
          return [];
        }
      });
      function getRecommendations(_x) {
        return _getRecommendations.apply(this, arguments);
      }
      return getRecommendations;
    }())
  }, {
    key: "calculateCompatibilityScore",
    value: function calculateCompatibilityScore(pet1, pet2) {
      var score = 0;
      var reasons = [];
      if (pet1.species === pet2.species) {
        score += 30;
        reasons.push("Same species preference");
      }
      if (pet1.intent === pet2.intent || pet1.intent === "all" || pet2.intent === "all") {
        score += 25;
        reasons.push("Compatible intentions");
      }
      var sizeCompatibility = this.calculateSizeCompatibility(pet1.size, pet2.size);
      score += sizeCompatibility * 15;
      if (sizeCompatibility > 0.7) {
        reasons.push("Size compatible");
      }
      var ageDiff = Math.abs(pet1.age - pet2.age);
      var ageScore = Math.max(0, 1 - ageDiff / 10);
      score += ageScore * 15;
      if (ageScore > 0.7) {
        reasons.push("Age compatible");
      }
      var commonTags = pet1.personalityTags.filter(function (tag) {
        return pet2.personalityTags.includes(tag);
      });
      var personalityScore = commonTags.length / Math.max(pet1.personalityTags.length, pet2.personalityTags.length, 1);
      score += personalityScore * 15;
      if (commonTags.length > 0) {
        reasons.push(`Shared personality traits: ${commonTags.slice(0, 3).join(", ")}`);
      }
      return Math.round(Math.min(100, Math.max(0, score)));
    }
  }, {
    key: "calculateSizeCompatibility",
    value: function calculateSizeCompatibility(size1, size2) {
      var sizeOrder = ["tiny", "small", "medium", "large", "extra-large"];
      var index1 = sizeOrder.indexOf(size1);
      var index2 = sizeOrder.indexOf(size2);
      if (index1 === -1 || index2 === -1) return 0.5;
      var diff = Math.abs(index1 - index2);
      return Math.max(0, 1 - diff * 0.25);
    }
  }, {
    key: "recordSwipe",
    value: (function () {
      var _recordSwipe = (0, _asyncToGenerator2.default)(function* (action) {
        try {
          var response = yield _api.api.request("/matching/swipe", {
            method: "POST",
            body: JSON.stringify(action)
          });
          _core.logger.info("Swipe recorded", {
            petId: action.petId,
            action: action.action,
            timestamp: action.timestamp
          });
          return response.success;
        } catch (error) {
          _core.logger.error("Failed to record swipe", {
            error: error,
            action: action
          });
          return false;
        }
      });
      function recordSwipe(_x2) {
        return _recordSwipe.apply(this, arguments);
      }
      return recordSwipe;
    }())
  }, {
    key: "getMatches",
    value: (function () {
      var _getMatches = (0, _asyncToGenerator2.default)(function* () {
        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;
        try {
          var response = yield _api.api.request(`/matching/matches?limit=${String(limit)}`);
          _core.logger.info("Fetched user matches", {
            count: response.length
          });
          return response;
        } catch (error) {
          _core.logger.error("Failed to get matches", {
            error: error
          });
          return [];
        }
      });
      function getMatches() {
        return _getMatches.apply(this, arguments);
      }
      return getMatches;
    }())
  }, {
    key: "getCompatibilityAnalysis",
    value: (function () {
      var _getCompatibilityAnalysis = (0, _asyncToGenerator2.default)(function* (petId1, petId2) {
        try {
          var response = yield _api.api.request("/matching/compatibility", {
            method: "POST",
            body: JSON.stringify({
              petId1: petId1,
              petId2: petId2
            })
          });
          _core.logger.info("Fetched compatibility analysis", {
            petId1: petId1,
            petId2: petId2,
            score: response.score
          });
          return response;
        } catch (error) {
          _core.logger.error("Failed to get compatibility analysis", {
            error: error,
            petId1: petId1,
            petId2: petId2
          });
          return null;
        }
      });
      function getCompatibilityAnalysis(_x3, _x4) {
        return _getCompatibilityAnalysis.apply(this, arguments);
      }
      return getCompatibilityAnalysis;
    }())
  }, {
    key: "applyFilters",
    value: function applyFilters(pets, filters) {
      return pets.filter(function (match) {
        var pet = match.pet;
        if (filters.species !== undefined && filters.species !== "" && pet.species !== filters.species) return false;
        if (filters.minAge !== undefined && pet.age < filters.minAge) return false;
        if (filters.maxAge !== undefined && pet.age > filters.maxAge) return false;
        if (filters.size !== undefined && filters.size !== "" && pet.size !== filters.size) return false;
        if (filters.intent !== undefined && filters.intent !== "" && pet.intent !== filters.intent && pet.intent !== "all") return false;
        if (filters.breed !== undefined && filters.breed !== "" && pet.breed !== filters.breed) return false;
        if (filters.distance !== undefined && match.distance !== undefined && match.distance > filters.distance) return false;
        return true;
      });
    }
  }, {
    key: "sortRecommendations",
    value: function sortRecommendations(recommendations) {
      return (0, _toConsumableArray2.default)(recommendations).sort(function (a, b) {
        if (a.compatibilityScore !== b.compatibilityScore) {
          return b.compatibilityScore - a.compatibilityScore;
        }
        if (a.distance !== undefined && b.distance !== undefined) {
          return a.distance - b.distance;
        }
        return a.pet.name.localeCompare(b.pet.name);
      });
    }
  }, {
    key: "getSwipeStats",
    value: (function () {
      var _getSwipeStats = (0, _asyncToGenerator2.default)(function* () {
        try {
          var response = yield _api.api.request("/matching/stats");
          _core.logger.info("Fetched swipe statistics", response);
          return response;
        } catch (error) {
          _core.logger.error("Failed to get swipe stats", {
            error: error
          });
          return {
            totalSwipes: 0,
            likes: 0,
            passes: 0,
            superlikes: 0,
            matches: 0,
            todaySwipes: 0
          };
        }
      });
      function getSwipeStats() {
        return _getSwipeStats.apply(this, arguments);
      }
      return getSwipeStats;
    }())
  }, {
    key: "undoLastSwipe",
    value: (function () {
      var _undoLastSwipe = (0, _asyncToGenerator2.default)(function* () {
        try {
          var response = yield _api.api.request("/matching/undo", {
            method: "POST"
          });
          _core.logger.info("Last swipe undone", {
            success: response.success
          });
          return response.success;
        } catch (error) {
          _core.logger.error("Failed to undo last swipe", {
            error: error
          });
          return false;
        }
      });
      function undoLastSwipe() {
        return _undoLastSwipe.apply(this, arguments);
      }
      return undoLastSwipe;
    }())
  }, {
    key: "canUndoSwipe",
    value: (function () {
      var _canUndoSwipe = (0, _asyncToGenerator2.default)(function* () {
        try {
          var response = yield _api.api.request("/matching/can-undo");
          return response.canUndo;
        } catch (error) {
          _core.logger.error("Failed to check undo availability", {
            error: error
          });
          return false;
        }
      });
      function canUndoSwipe() {
        return _canUndoSwipe.apply(this, arguments);
      }
      return canUndoSwipe;
    }())
  }, {
    key: "getPetDetails",
    value: (function () {
      var _getPetDetails = (0, _asyncToGenerator2.default)(function* (petId) {
        try {
          var response = yield _api.api.request(`/pets/${petId}`);
          _core.logger.info("Fetched pet details", {
            petId: petId,
            petName: response.name
          });
          return response;
        } catch (error) {
          _core.logger.error("Failed to get pet details", {
            error: error,
            petId: petId
          });
          return null;
        }
      });
      function getPetDetails(_x5) {
        return _getPetDetails.apply(this, arguments);
      }
      return getPetDetails;
    }())
  }]);
}();
var matchingService = exports.matchingService = new MatchingService();
var _default = exports.default = matchingService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,