2252a786a0d7462cedb7bfe86e63dd85
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAuthStore = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _zustand = require("zustand");
var _middleware = require("zustand/middleware");
var _immer = require("zustand/middleware/immer");
var _secureStorage = require("../utils/secureStorage");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var useAuthStore = exports.useAuthStore = (0, _zustand.create)()((0, _middleware.persist)((0, _immer.immer)(function (set) {
  return {
    user: null,
    accessToken: null,
    refreshToken: null,
    isLoading: false,
    error: null,
    isAuthenticated: false,
    setUser: function setUser(user) {
      return set(function (state) {
        state.user = user;
        state.isAuthenticated = user !== null;
        return state;
      });
    },
    updateUser: function updateUser(user) {
      return set(function (state) {
        if (state.user) {
          state.user = _objectSpread(_objectSpread({}, state.user), user);
        }
        return state;
      });
    },
    setTokens: function setTokens(accessToken, refreshToken) {
      return set(function (state) {
        state.accessToken = accessToken;
        state.refreshToken = refreshToken;
        state.isAuthenticated = true;
        return state;
      });
    },
    clearTokens: function clearTokens() {
      return set(function (state) {
        state.accessToken = null;
        state.refreshToken = null;
        state.isAuthenticated = false;
        return state;
      });
    },
    logout: function logout() {
      return set(function (state) {
        state.user = null;
        state.accessToken = null;
        state.refreshToken = null;
        state.isAuthenticated = false;
        return state;
      });
    },
    setIsLoading: function setIsLoading(isLoading) {
      return set(function (state) {
        state.isLoading = isLoading;
        return state;
      });
    },
    setError: function setError(error) {
      return set(function (state) {
        state.error = error;
        return state;
      });
    }
  };
}), {
  name: "auth-storage-secure",
  storage: (0, _secureStorage.createSecureStorage)(),
  partialize: function partialize(state) {
    return {
      accessToken: state.accessToken,
      refreshToken: state.refreshToken,
      user: state.user,
      isAuthenticated: state.isAuthenticated
    };
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,