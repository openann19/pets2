{"version":3,"names":["_getJestObj","mock","request","jest","fn","logger","info","warn","error","_interopRequireDefault","require","_asyncToGenerator2","_gdprService","_api","_require","describe","beforeEach","clearAllMocks","it","default","mockResponse","success","message","deletionId","gracePeriodEndsAt","canCancel","mockResolvedValueOnce","response","deleteAccount","password","reason","feedback","expect","toEqual","toHaveBeenCalledWith","method","body","mockRejectedValueOnce","code","toBe","Error","cancelDeletion","status","scheduledDeletionDate","daysRemaining","requestId","getAccountStatus","exportId","estimatedTime","exportData","profile","name","email","matches","id","exportUserData","format","includeMessages","includeMatches","includeProfileData","includePreferences","mockBlob","Blob","type","downloadExport","rejects","toThrow","timeoutError","_responses$","mockResolvedValue","responses","Promise","all","toHaveLength"],"sources":["gdprService.test.ts"],"sourcesContent":["/**\n * GDPR Service Test Suite\n * Tests account deletion, data export, and grace period management\n */\n\nimport {\n  deleteAccount,\n  cancelDeletion,\n  getAccountStatus,\n  exportUserData,\n  downloadExport,\n} from '../gdprService';\nimport { request } from '../api';\n\n// Mock the api service\njest.mock('../api', () => ({\n  request: jest.fn(),\n}));\n\n// Mock logger\njest.mock('@pawfectmatch/core', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n}));\n\ndescribe('GDPR Service', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('deleteAccount', () => {\n    it('should request account deletion successfully', async () => {\n      const mockResponse = {\n        success: true,\n        message: 'Account deletion requested',\n        deletionId: 'del-123',\n        gracePeriodEndsAt: '2024-02-01T00:00:00Z',\n        canCancel: true,\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await deleteAccount({\n        password: 'correctpassword',\n        reason: 'User request',\n        feedback: 'Good app',\n      });\n\n      expect(response).toEqual(mockResponse);\n      expect(request).toHaveBeenCalledWith('/api/account/delete', {\n        method: 'POST',\n        body: {\n          password: 'correctpassword',\n          reason: 'User request',\n          feedback: 'Good app',\n        },\n      });\n    });\n\n    it('should handle invalid password error', async () => {\n      (request as jest.Mock).mockRejectedValueOnce({\n        message: 'Invalid password',\n        code: 'INVALID_PASSWORD',\n      });\n\n      const response = await deleteAccount({\n        password: 'wrongpassword',\n      });\n\n      expect(response.success).toBe(false);\n      expect(response.error).toBe('INVALID_PASSWORD');\n    });\n\n    it('should handle server errors', async () => {\n      (request as jest.Mock).mockRejectedValueOnce(new Error('Server error'));\n\n      const response = await deleteAccount({\n        password: 'correctpassword',\n      });\n\n      expect(response.success).toBe(false);\n      expect(response.message).toBe('Failed to delete account');\n    });\n\n    it('should handle rate limiting', async () => {\n      (request as jest.Mock).mockRejectedValueOnce({\n        message: 'Too many requests',\n        code: 'RATE_LIMIT',\n      });\n\n      const response = await deleteAccount({\n        password: 'correctpassword',\n      });\n\n      expect(response.success).toBe(false);\n      expect(response.error).toBe('RATE_LIMIT');\n    });\n\n    it('should handle already deleting account', async () => {\n      (request as jest.Mock).mockRejectedValueOnce({\n        message: 'Deletion already in progress',\n        code: 'ALREADY_DELETING',\n      });\n\n      const response = await deleteAccount({\n        password: 'correctpassword',\n      });\n\n      expect(response.success).toBe(false);\n      expect(response.error).toBe('ALREADY_DELETING');\n    });\n  });\n\n  describe('cancelDeletion', () => {\n    it('should cancel account deletion successfully', async () => {\n      const mockResponse = {\n        success: true,\n        message: 'Account deletion cancelled',\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await cancelDeletion();\n\n      expect(response).toEqual(mockResponse);\n      expect(request).toHaveBeenCalledWith('/api/account/cancel-deletion', {\n        method: 'POST',\n      });\n    });\n\n    it('should handle cancellation errors', async () => {\n      (request as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n\n      const response = await cancelDeletion();\n\n      expect(response.success).toBe(false);\n      expect(response.message).toBe('Failed to cancel deletion');\n    });\n\n    it('should handle errors during cancellation', async () => {\n      (request as jest.Mock).mockRejectedValueOnce({\n        message: 'Cancellation failed',\n      });\n\n      const response = await cancelDeletion();\n\n      expect(response.success).toBe(false);\n      expect(response.message).toBe('Cancellation failed');\n    });\n  });\n\n  describe('getAccountStatus', () => {\n    it('should get account status successfully', async () => {\n      const mockResponse = {\n        success: true,\n        status: 'pending',\n        scheduledDeletionDate: '2024-02-01T00:00:00Z',\n        daysRemaining: 14,\n        canCancel: true,\n        requestId: 'del-123',\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await getAccountStatus();\n\n      expect(response).toEqual(mockResponse);\n      expect(request).toHaveBeenCalledWith('/api/account/status', {\n        method: 'GET',\n      });\n    });\n\n    it('should return not-found when no deletion request exists', async () => {\n      const mockResponse = {\n        success: true,\n        status: 'not-found',\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await getAccountStatus();\n\n      expect(response.status).toBe('not-found');\n    });\n\n    it('should handle errors when getting status', async () => {\n      (request as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n\n      const response = await getAccountStatus();\n\n      expect(response.success).toBe(false);\n      expect(response.status).toBe('not-found');\n    });\n\n    it('should handle processing status', async () => {\n      const mockResponse = {\n        success: true,\n        status: 'processing',\n        requestId: 'del-123',\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await getAccountStatus();\n\n      expect(response.status).toBe('processing');\n    });\n\n    it('should handle completed deletion status', async () => {\n      const mockResponse = {\n        success: true,\n        status: 'completed',\n        requestId: 'del-123',\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await getAccountStatus();\n\n      expect(response.status).toBe('completed');\n    });\n  });\n\n  describe('exportUserData', () => {\n    it('should export user data with defaults', async () => {\n      const mockResponse = {\n        success: true,\n        exportId: 'export-123',\n        estimatedTime: '5 minutes',\n        message: 'Export started',\n        exportData: {\n          profile: { name: 'Test User', email: 'test@example.com' },\n          matches: [{ id: '1' }],\n        },\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await exportUserData();\n\n      expect(response).toEqual(mockResponse);\n      expect(request).toHaveBeenCalledWith('/api/account/export-data', {\n        method: 'POST',\n        body: {\n          format: 'json',\n          includeMessages: true,\n          includeMatches: true,\n          includeProfileData: true,\n          includePreferences: true,\n        },\n      });\n    });\n\n    it('should export specific data types only', async () => {\n      const mockResponse = {\n        success: true,\n        exportId: 'export-123',\n        estimatedTime: '2 minutes',\n        message: 'Export started',\n        exportData: {\n          profile: { name: 'Test User' },\n        },\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await exportUserData({\n        format: 'csv',\n        includeMessages: false,\n        includeMatches: false,\n        includeProfileData: true,\n        includePreferences: false,\n      });\n\n      expect(response).toEqual(mockResponse);\n      expect(request).toHaveBeenCalledWith('/api/account/export-data', {\n        method: 'POST',\n        body: {\n          format: 'csv',\n          includeMessages: false,\n          includeMatches: false,\n          includeProfileData: true,\n          includePreferences: false,\n        },\n      });\n    });\n\n    it('should handle export errors', async () => {\n      (request as jest.Mock).mockRejectedValueOnce(new Error('Export failed'));\n\n      const response = await exportUserData();\n\n      expect(response.success).toBe(false);\n      expect(response.message).toBe('Failed to export data');\n      expect(response.error).toBe('SERVER_ERROR');\n    });\n\n    it('should handle large exports', async () => {\n      const mockResponse = {\n        success: true,\n        exportId: 'export-123',\n        estimatedTime: '30 minutes',\n        message: 'Large export started',\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await exportUserData({\n        includeMessages: true,\n        includeMatches: true,\n        includeProfileData: true,\n        includePreferences: true,\n      });\n\n      expect(response.estimatedTime).toBe('30 minutes');\n    });\n  });\n\n  describe('downloadExport', () => {\n    it('should download exported data successfully', async () => {\n      const mockBlob = new Blob(['exported data'], { type: 'application/json' });\n\n      (request as jest.Mock).mockResolvedValueOnce(mockBlob);\n\n      const response = await downloadExport('export-123');\n\n      expect(response).toBe(mockBlob);\n      expect(request).toHaveBeenCalledWith('/api/account/export/export-123', {\n        method: 'GET',\n      });\n    });\n\n    it('should handle download errors', async () => {\n      (request as jest.Mock).mockRejectedValueOnce(new Error('Download failed'));\n\n      await expect(downloadExport('export-123')).rejects.toThrow('Download failed');\n    });\n\n    it('should handle missing export ID', async () => {\n      (request as jest.Mock).mockRejectedValueOnce(new Error('Export not found'));\n\n      await expect(downloadExport('invalid-export-id')).rejects.toThrow(\n        'Export not found'\n      );\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle network timeouts during deletion', async () => {\n      const timeoutError = new Error('Request timeout');\n      (request as jest.Mock).mockRejectedValueOnce(timeoutError);\n\n      const response = await deleteAccount({\n        password: 'correctpassword',\n      });\n\n      expect(response.success).toBe(false);\n    });\n\n    it('should handle malformed responses', async () => {\n      const mockResponse = {\n        success: true,\n        message: null,\n        deletionId: null,\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await deleteAccount({\n        password: 'correctpassword',\n      });\n\n      expect(response.success).toBe(true);\n    });\n\n    it('should handle concurrent deletion requests', async () => {\n      const mockResponse = {\n        success: true,\n        message: 'Account deletion requested',\n      };\n\n      (request as jest.Mock).mockResolvedValue(mockResponse);\n\n      const responses = await Promise.all([\n        deleteAccount({ password: 'password' }),\n        deleteAccount({ password: 'password' }),\n        deleteAccount({ password: 'password' }),\n      ]);\n\n      expect(responses).toHaveLength(3);\n      expect(responses[0]?.success).toBe(true);\n    });\n\n    it('should handle export with no data', async () => {\n      const mockResponse = {\n        success: true,\n        exportId: 'export-123',\n        estimatedTime: '1 minute',\n        message: 'Export completed',\n        exportData: {},\n      };\n\n      (request as jest.Mock).mockResolvedValueOnce(mockResponse);\n\n      const response = await exportUserData({\n        includeMessages: false,\n        includeMatches: false,\n        includeProfileData: false,\n        includePreferences: false,\n      });\n\n      expect(response.exportData).toEqual({});\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}