{"version":3,"names":["_core","require","_api","MatchingService","_classCallCheck2","default","_createClass2","key","value","_getRecommendations","_asyncToGenerator2","filters","limit","arguments","length","undefined","queryParams","URLSearchParams","species","set","minAge","toString","maxAge","size","intent","distance","breed","endpoint","response","api","request","logger","info","count","Object","keys","error","getRecommendations","_x","apply","calculateCompatibilityScore","pet1","pet2","score","reasons","push","sizeCompatibility","calculateSizeCompatibility","ageDiff","Math","abs","age","ageScore","max","commonTags","personalityTags","filter","tag","includes","personalityScore","slice","join","round","min","size1","size2","sizeOrder","index1","indexOf","index2","diff","_recordSwipe","action","method","body","JSON","stringify","petId","timestamp","success","recordSwipe","_x2","_getMatches","String","getMatches","_getCompatibilityAnalysis","petId1","petId2","getCompatibilityAnalysis","_x3","_x4","applyFilters","pets","match","pet","sortRecommendations","recommendations","_toConsumableArray2","sort","a","b","compatibilityScore","name","localeCompare","_getSwipeStats","totalSwipes","likes","passes","superlikes","matches","todaySwipes","getSwipeStats","_undoLastSwipe","undoLastSwipe","_canUndoSwipe","canUndo","canUndoSwipe","_getPetDetails","petName","getPetDetails","_x5","matchingService","exports","_default"],"sources":["MatchingService.ts"],"sourcesContent":["/**\n * Matching Service for PawfectMatch Mobile App\n * Handles pet matching logic, compatibility calculations, and recommendations\n */\nimport { logger } from \"@pawfectmatch/core\";\nimport { api } from \"./api\";\n\n// Local interfaces for this service\nexport interface Pet {\n  id: string;\n  name: string;\n  species: string;\n  breed: string;\n  age: number;\n  size: string;\n  personalityTags: string[];\n  intent: string;\n  photos: string[];\n  ownerId: string;\n}\n\nexport interface PetFilters {\n  species?: string;\n  minAge?: number;\n  maxAge?: number;\n  size?: string;\n  intent?: string;\n  distance?: number;\n  breed?: string;\n}\n\nexport interface MatchResult {\n  pet: Pet;\n  compatibilityScore: number;\n  reasons: string[];\n  distance?: number;\n}\n\nexport interface SwipeAction {\n  petId: string;\n  action: \"like\" | \"pass\" | \"superlike\";\n  timestamp: number;\n}\n\nclass MatchingService {\n  /**\n   * Get pet recommendations for the current user\n   */\n  async getRecommendations(\n    filters?: PetFilters,\n    limit: number = 20,\n  ): Promise<MatchResult[]> {\n    try {\n      const queryParams = new URLSearchParams();\n      if (filters?.species !== undefined && filters.species !== \"\")\n        queryParams.set(\"species\", filters.species);\n      if (filters?.minAge !== undefined)\n        queryParams.set(\"minAge\", filters.minAge.toString());\n      if (filters?.maxAge !== undefined)\n        queryParams.set(\"maxAge\", filters.maxAge.toString());\n      if (filters?.size !== undefined && filters.size !== \"\")\n        queryParams.set(\"size\", filters.size);\n      if (filters?.intent !== undefined && filters.intent !== \"\")\n        queryParams.set(\"intent\", filters.intent);\n      if (filters?.distance !== undefined)\n        queryParams.set(\"distance\", filters.distance.toString());\n      if (filters?.breed !== undefined && filters.breed !== \"\")\n        queryParams.set(\"breed\", filters.breed);\n      queryParams.set(\"limit\", limit.toString());\n\n      const endpoint = `/matches/recommendations?${queryParams.toString()}`;\n\n      const response = await api.request<MatchResult[]>(endpoint);\n\n      logger.info(\"Fetched pet recommendations\", {\n        count: response.length,\n        filters: filters !== undefined ? Object.keys(filters).length : 0,\n      });\n\n      return response;\n    } catch (error) {\n      logger.error(\"Failed to get recommendations\", { error, filters });\n      // Return empty array as fallback\n      return [];\n    }\n  }\n\n  /**\n   * Calculate compatibility score between two pets\n   */\n  calculateCompatibilityScore(pet1: Pet, pet2: Pet): number {\n    let score = 0;\n    let reasons: string[] = [];\n\n    // Species preference (30 points)\n    if (pet1.species === pet2.species) {\n      score += 30;\n      reasons.push(\"Same species preference\");\n    }\n\n    // Intent compatibility (25 points)\n    if (\n      pet1.intent === pet2.intent ||\n      pet1.intent === \"all\" ||\n      pet2.intent === \"all\"\n    ) {\n      score += 25;\n      reasons.push(\"Compatible intentions\");\n    }\n\n    // Size compatibility (15 points)\n    const sizeCompatibility = this.calculateSizeCompatibility(\n      pet1.size,\n      pet2.size,\n    );\n    score += sizeCompatibility * 15;\n    if (sizeCompatibility > 0.7) {\n      reasons.push(\"Size compatible\");\n    }\n\n    // Age compatibility (15 points)\n    const ageDiff = Math.abs(pet1.age - pet2.age);\n    const ageScore = Math.max(0, 1 - ageDiff / 10);\n    score += ageScore * 15;\n    if (ageScore > 0.7) {\n      reasons.push(\"Age compatible\");\n    }\n\n    // Personality tags overlap (15 points)\n    const commonTags = pet1.personalityTags.filter((tag: string) =>\n      pet2.personalityTags.includes(tag),\n    );\n    const personalityScore =\n      commonTags.length /\n      Math.max(pet1.personalityTags.length, pet2.personalityTags.length, 1);\n    score += personalityScore * 15;\n\n    if (commonTags.length > 0) {\n      reasons.push(\n        `Shared personality traits: ${commonTags.slice(0, 3).join(\", \")}`,\n      );\n    }\n\n    return Math.round(Math.min(100, Math.max(0, score)));\n  }\n\n  /**\n   * Calculate size compatibility\n   */\n  private calculateSizeCompatibility(size1: string, size2: string): number {\n    const sizeOrder = [\"tiny\", \"small\", \"medium\", \"large\", \"extra-large\"];\n    const index1 = sizeOrder.indexOf(size1);\n    const index2 = sizeOrder.indexOf(size2);\n\n    if (index1 === -1 || index2 === -1) return 0.5;\n\n    const diff = Math.abs(index1 - index2);\n    return Math.max(0, 1 - diff * 0.25);\n  }\n\n  /**\n   * Record a swipe action (like, pass, superlike)\n   */\n  async recordSwipe(action: SwipeAction): Promise<boolean> {\n    try {\n      const response = await api.request<{ success: boolean }>(\n        \"/matching/swipe\",\n        {\n          method: \"POST\",\n          body: JSON.stringify(action),\n        },\n      );\n\n      logger.info(\"Swipe recorded\", {\n        petId: action.petId,\n        action: action.action,\n        timestamp: action.timestamp,\n      });\n\n      return response.success;\n    } catch (error) {\n      logger.error(\"Failed to record swipe\", { error, action });\n      return false;\n    }\n  }\n\n  /**\n   * Get user's matches\n   */\n  async getMatches(limit: number = 50): Promise<MatchResult[]> {\n    try {\n      const response = await api.request<MatchResult[]>(\n        `/matching/matches?limit=${String(limit)}`,\n      );\n\n      logger.info(\"Fetched user matches\", { count: response.length });\n\n      return response;\n    } catch (error) {\n      logger.error(\"Failed to get matches\", { error });\n      return [];\n    }\n  }\n\n  /**\n   * Get detailed compatibility analysis between two pets\n   */\n  async getCompatibilityAnalysis(\n    petId1: string,\n    petId2: string,\n  ): Promise<{\n    score: number;\n    reasons: string[];\n    details: Record<string, unknown>;\n  } | null> {\n    try {\n      const response = await api.request<{\n        score: number;\n        reasons: string[];\n        details: Record<string, unknown>;\n      }>(\"/matching/compatibility\", {\n        method: \"POST\",\n        body: JSON.stringify({ petId1, petId2 }),\n      });\n\n      logger.info(\"Fetched compatibility analysis\", {\n        petId1,\n        petId2,\n        score: response.score,\n      });\n\n      return response;\n    } catch (error) {\n      logger.error(\"Failed to get compatibility analysis\", {\n        error,\n        petId1,\n        petId2,\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Apply filters to pet results locally\n   */\n  applyFilters(pets: MatchResult[], filters: PetFilters): MatchResult[] {\n    return pets.filter((match: MatchResult) => {\n      const pet = match.pet;\n\n      if (\n        filters.species !== undefined &&\n        filters.species !== \"\" &&\n        pet.species !== filters.species\n      )\n        return false;\n      if (filters.minAge !== undefined && pet.age < filters.minAge)\n        return false;\n      if (filters.maxAge !== undefined && pet.age > filters.maxAge)\n        return false;\n      if (\n        filters.size !== undefined &&\n        filters.size !== \"\" &&\n        pet.size !== filters.size\n      )\n        return false;\n      if (\n        filters.intent !== undefined &&\n        filters.intent !== \"\" &&\n        pet.intent !== filters.intent &&\n        pet.intent !== \"all\"\n      )\n        return false;\n      if (\n        filters.breed !== undefined &&\n        filters.breed !== \"\" &&\n        pet.breed !== filters.breed\n      )\n        return false;\n      if (\n        filters.distance !== undefined &&\n        match.distance !== undefined &&\n        match.distance > filters.distance\n      )\n        return false;\n\n      return true;\n    });\n  }\n\n  /**\n   * Sort recommendations by compatibility score and other factors\n   */\n  sortRecommendations(recommendations: MatchResult[]): MatchResult[] {\n    return [...recommendations].sort((a, b) => {\n      // Primary sort: compatibility score (descending)\n      if (a.compatibilityScore !== b.compatibilityScore) {\n        return b.compatibilityScore - a.compatibilityScore;\n      }\n\n      // Secondary sort: distance (ascending, if available)\n      if (a.distance !== undefined && b.distance !== undefined) {\n        return a.distance - b.distance;\n      }\n\n      // Tertiary sort: pet name (alphabetical)\n      return a.pet.name.localeCompare(b.pet.name);\n    });\n  }\n\n  /**\n   * Get swipe statistics for the current user\n   */\n  async getSwipeStats(): Promise<{\n    totalSwipes: number;\n    likes: number;\n    passes: number;\n    superlikes: number;\n    matches: number;\n    todaySwipes: number;\n  }> {\n    try {\n      const response = await api.request<{\n        totalSwipes: number;\n        likes: number;\n        passes: number;\n        superlikes: number;\n        matches: number;\n        todaySwipes: number;\n      }>(\"/matching/stats\");\n\n      logger.info(\"Fetched swipe statistics\", response);\n\n      return response;\n    } catch (error) {\n      logger.error(\"Failed to get swipe stats\", { error });\n      // Return default stats\n      return {\n        totalSwipes: 0,\n        likes: 0,\n        passes: 0,\n        superlikes: 0,\n        matches: 0,\n        todaySwipes: 0,\n      };\n    }\n  }\n\n  /**\n   * Undo the last swipe action (premium feature)\n   */\n  async undoLastSwipe(): Promise<boolean> {\n    try {\n      const response = await api.request<{ success: boolean }>(\n        \"/matching/undo\",\n        {\n          method: \"POST\",\n        },\n      );\n\n      logger.info(\"Last swipe undone\", { success: response.success });\n\n      return response.success;\n    } catch (error) {\n      logger.error(\"Failed to undo last swipe\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Check if user can undo (has premium or remaining undos)\n   */\n  async canUndoSwipe(): Promise<boolean> {\n    try {\n      const response = await api.request<{ canUndo: boolean }>(\n        \"/matching/can-undo\",\n      );\n      return response.canUndo;\n    } catch (error) {\n      logger.error(\"Failed to check undo availability\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Get pet details by ID\n   */\n  async getPetDetails(petId: string): Promise<Pet | null> {\n    try {\n      const response = await api.request<Pet>(`/pets/${petId}`);\n\n      logger.info(\"Fetched pet details\", { petId, petName: response.name });\n\n      return response;\n    } catch (error) {\n      logger.error(\"Failed to get pet details\", { error, petId });\n      return null;\n    }\n  }\n}\n\n// Export singleton instance\nexport const matchingService = new MatchingService();\nexport default matchingService;\n"],"mappings":"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","ignoreList":[]}