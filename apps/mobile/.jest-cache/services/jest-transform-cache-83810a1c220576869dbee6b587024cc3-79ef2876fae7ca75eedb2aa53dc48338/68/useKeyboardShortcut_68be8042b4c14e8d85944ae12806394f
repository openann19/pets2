6954e435d00295f79fb0d677314379b3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useKeyboardShortcut = useKeyboardShortcut;
var react_1 = require("react");
var environment_1 = require("../utils/environment");
function useKeyboardShortcut(keyCombo, handler) {
  var handlerRef = (0, react_1.useRef)(handler);
  (0, react_1.useEffect)(function () {
    handlerRef.current = handler;
  }, [handler]);
  (0, react_1.useEffect)(function () {
    var handleKeyDown = function handleKeyDown(event) {
      if (!isKeyboardEvent(event)) {
        return;
      }
      var pressedCombo = formatPressedKeys(event);
      var formattedCombo = formatKeyCombo(keyCombo);
      if (pressedCombo === formattedCombo) {
        event.preventDefault();
        handlerRef.current();
      }
    };
    var documentObject = (0, environment_1.getDocumentObject)();
    if (documentObject == null) {
      return undefined;
    }
    (0, environment_1.addEventListenerSafely)(documentObject, 'keydown', handleKeyDown);
    return function () {
      (0, environment_1.removeEventListenerSafely)(documentObject, 'keydown', handleKeyDown);
    };
  }, [keyCombo, handler]);
  return formatKeyCombo(keyCombo);
}
function formatKeyCombo(combo) {
  var modifiers = [];
  if (combo.ctrl === true) modifiers.push('Ctrl');
  if (combo.shift === true) modifiers.push('Shift');
  if (combo.alt === true) modifiers.push('Alt');
  if (combo.meta === true) modifiers.push('Meta');
  return [].concat(modifiers, [combo.key]).join('+');
}
function formatPressedKeys(event) {
  var modifiers = [];
  if (event.ctrlKey) modifiers.push('Ctrl');
  if (event.shiftKey) modifiers.push('Shift');
  if (event.altKey) modifiers.push('Alt');
  if (event.metaKey) modifiers.push('Meta');
  return [].concat(modifiers, [event.key]).join('+');
}
var isKeyboardEvent = function isKeyboardEvent(event) {
  return 'key' in event;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVzZUtleWJvYXJkU2hvcnRjdXQiLCJyZWFjdF8xIiwicmVxdWlyZSIsImVudmlyb25tZW50XzEiLCJrZXlDb21ibyIsImhhbmRsZXIiLCJoYW5kbGVyUmVmIiwidXNlUmVmIiwidXNlRWZmZWN0IiwiY3VycmVudCIsImhhbmRsZUtleURvd24iLCJldmVudCIsImlzS2V5Ym9hcmRFdmVudCIsInByZXNzZWRDb21ibyIsImZvcm1hdFByZXNzZWRLZXlzIiwiZm9ybWF0dGVkQ29tYm8iLCJmb3JtYXRLZXlDb21ibyIsInByZXZlbnREZWZhdWx0IiwiZG9jdW1lbnRPYmplY3QiLCJnZXREb2N1bWVudE9iamVjdCIsInVuZGVmaW5lZCIsImFkZEV2ZW50TGlzdGVuZXJTYWZlbHkiLCJyZW1vdmVFdmVudExpc3RlbmVyU2FmZWx5IiwiY29tYm8iLCJtb2RpZmllcnMiLCJjdHJsIiwicHVzaCIsInNoaWZ0IiwiYWx0IiwibWV0YSIsImNvbmNhdCIsImtleSIsImpvaW4iLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5Il0sInNvdXJjZXMiOlsidXNlS2V5Ym9hcmRTaG9ydGN1dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlS2V5Ym9hcmRTaG9ydGN1dCA9IHVzZUtleWJvYXJkU2hvcnRjdXQ7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgZW52aXJvbm1lbnRfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9lbnZpcm9ubWVudFwiKTtcbmZ1bmN0aW9uIHVzZUtleWJvYXJkU2hvcnRjdXQoa2V5Q29tYm8sIGhhbmRsZXIpIHtcbiAgICBjb25zdCBoYW5kbGVyUmVmID0gKDAsIHJlYWN0XzEudXNlUmVmKShoYW5kbGVyKTtcbiAgICAoMCwgcmVhY3RfMS51c2VFZmZlY3QpKCgpID0+IHtcbiAgICAgICAgaGFuZGxlclJlZi5jdXJyZW50ID0gaGFuZGxlcjtcbiAgICB9LCBbaGFuZGxlcl0pO1xuICAgICgwLCByZWFjdF8xLnVzZUVmZmVjdCkoKCkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzS2V5Ym9hcmRFdmVudChldmVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcmVzc2VkQ29tYm8gPSBmb3JtYXRQcmVzc2VkS2V5cyhldmVudCk7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRDb21ibyA9IGZvcm1hdEtleUNvbWJvKGtleUNvbWJvKTtcbiAgICAgICAgICAgIGlmIChwcmVzc2VkQ29tYm8gPT09IGZvcm1hdHRlZENvbWJvKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVyUmVmLmN1cnJlbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZG9jdW1lbnRPYmplY3QgPSAoMCwgZW52aXJvbm1lbnRfMS5nZXREb2N1bWVudE9iamVjdCkoKTtcbiAgICAgICAgaWYgKGRvY3VtZW50T2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIGVudmlyb25tZW50XzEuYWRkRXZlbnRMaXN0ZW5lclNhZmVseSkoZG9jdW1lbnRPYmplY3QsICdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAoMCwgZW52aXJvbm1lbnRfMS5yZW1vdmVFdmVudExpc3RlbmVyU2FmZWx5KShkb2N1bWVudE9iamVjdCwgJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgfTtcbiAgICB9LCBba2V5Q29tYm8sIGhhbmRsZXJdKTtcbiAgICByZXR1cm4gZm9ybWF0S2V5Q29tYm8oa2V5Q29tYm8pO1xufVxuZnVuY3Rpb24gZm9ybWF0S2V5Q29tYm8oY29tYm8pIHtcbiAgICBjb25zdCBtb2RpZmllcnMgPSBbXTtcbiAgICBpZiAoY29tYm8uY3RybCA9PT0gdHJ1ZSlcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ0N0cmwnKTtcbiAgICBpZiAoY29tYm8uc2hpZnQgPT09IHRydWUpXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdTaGlmdCcpO1xuICAgIGlmIChjb21iby5hbHQgPT09IHRydWUpXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdBbHQnKTtcbiAgICBpZiAoY29tYm8ubWV0YSA9PT0gdHJ1ZSlcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ01ldGEnKTtcbiAgICByZXR1cm4gWy4uLm1vZGlmaWVycywgY29tYm8ua2V5XS5qb2luKCcrJyk7XG59XG5mdW5jdGlvbiBmb3JtYXRQcmVzc2VkS2V5cyhldmVudCkge1xuICAgIGNvbnN0IG1vZGlmaWVycyA9IFtdO1xuICAgIGlmIChldmVudC5jdHJsS2V5KVxuICAgICAgICBtb2RpZmllcnMucHVzaCgnQ3RybCcpO1xuICAgIGlmIChldmVudC5zaGlmdEtleSlcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ1NoaWZ0Jyk7XG4gICAgaWYgKGV2ZW50LmFsdEtleSlcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ0FsdCcpO1xuICAgIGlmIChldmVudC5tZXRhS2V5KVxuICAgICAgICBtb2RpZmllcnMucHVzaCgnTWV0YScpO1xuICAgIHJldHVybiBbLi4ubW9kaWZpZXJzLCBldmVudC5rZXldLmpvaW4oJysnKTtcbn1cbmNvbnN0IGlzS2V5Ym9hcmRFdmVudCA9IChldmVudCkgPT4ge1xuICAgIHJldHVybiAna2V5JyBpbiBldmVudDtcbn07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