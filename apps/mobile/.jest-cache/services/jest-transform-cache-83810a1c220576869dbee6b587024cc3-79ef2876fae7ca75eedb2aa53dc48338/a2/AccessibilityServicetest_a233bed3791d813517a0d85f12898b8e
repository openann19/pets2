3dbb83afbf3ab1b66d201f9b6713ab55
"use strict";

_getJestObj().mock('react-native', function () {
  return {
    AccessibilityInfo: {
      isScreenReaderEnabled: _globals.jest.fn(),
      isBoldTextEnabled: _globals.jest.fn(),
      isGrayscaleEnabled: _globals.jest.fn(),
      isInvertColorsEnabled: _globals.jest.fn(),
      isReduceMotionEnabled: _globals.jest.fn(),
      isReduceTransparencyEnabled: _globals.jest.fn(),
      announceForAccessibility: _globals.jest.fn(),
      addEventListener: _globals.jest.fn(),
      removeEventListener: _globals.jest.fn()
    },
    Platform: {
      OS: 'ios'
    }
  };
});
_getJestObj().mock("../logger", function () {
  return {
    logger: {
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("react-native");
var _AccessibilityService = require("../AccessibilityService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAccessibilityInfo = _reactNative.AccessibilityInfo;
(0, _globals.describe)('AccessibilityService', function () {
  var mockListeners = {};
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    _AccessibilityService.AccessibilityService.instance = undefined;
    mockAccessibilityInfo.isScreenReaderEnabled.mockResolvedValue(false);
    mockAccessibilityInfo.isBoldTextEnabled.mockResolvedValue(false);
    mockAccessibilityInfo.isGrayscaleEnabled.mockResolvedValue(false);
    mockAccessibilityInfo.isInvertColorsEnabled.mockResolvedValue(false);
    mockAccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(false);
    mockAccessibilityInfo.isReduceTransparencyEnabled.mockResolvedValue(false);
    mockAccessibilityInfo.addEventListener.mockImplementation(function (event, listener) {
      mockListeners[event] = listener;
      return {
        remove: _globals.jest.fn()
      };
    });
  });
  (0, _globals.afterEach)(function () {
    mockListeners = {};
  });
  (0, _globals.describe)('Singleton Pattern', function () {
    (0, _globals.it)('should return the same instance', function () {
      var instance1 = _AccessibilityService.AccessibilityService.getInstance();
      var instance2 = _AccessibilityService.AccessibilityService.getInstance();
      (0, _globals.expect)(instance1).toBe(instance2);
      (0, _globals.expect)(instance1).toBe(_AccessibilityService.accessibilityService);
    });
    (0, _globals.it)('should initialize accessibility on first getInstance call', (0, _asyncToGenerator2.default)(function* () {
      var service = _AccessibilityService.AccessibilityService.getInstance();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      (0, _globals.expect)(mockAccessibilityInfo.isScreenReaderEnabled).toHaveBeenCalled();
      (0, _globals.expect)(mockAccessibilityInfo.isBoldTextEnabled).toHaveBeenCalled();
      (0, _globals.expect)(mockAccessibilityInfo.isGrayscaleEnabled).toHaveBeenCalled();
      (0, _globals.expect)(mockAccessibilityInfo.isInvertColorsEnabled).toHaveBeenCalled();
      (0, _globals.expect)(mockAccessibilityInfo.isReduceMotionEnabled).toHaveBeenCalled();
      (0, _globals.expect)(mockAccessibilityInfo.isReduceTransparencyEnabled).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with default config when accessibility checks fail', (0, _asyncToGenerator2.default)(function* () {
      mockAccessibilityInfo.isScreenReaderEnabled.mockRejectedValue(new Error('Failed'));
      var service = _AccessibilityService.AccessibilityService.getInstance();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      var config = service.getAccessibilityConfig();
      (0, _globals.expect)(config.isScreenReaderEnabled).toBe(false);
      (0, _globals.expect)(config.isBoldTextEnabled).toBe(false);
      (0, _globals.expect)(config.isGrayscaleEnabled).toBe(false);
      (0, _globals.expect)(config.isInvertColorsEnabled).toBe(false);
      (0, _globals.expect)(config.isReduceMotionEnabled).toBe(false);
      (0, _globals.expect)(config.isReduceTransparencyEnabled).toBe(false);
      (0, _globals.expect)(config.preferredContentSizeCategory).toBe('normal');
    }));
    (0, _globals.it)('should setup all accessibility event listeners', (0, _asyncToGenerator2.default)(function* () {
      var service = _AccessibilityService.AccessibilityService.getInstance();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      (0, _globals.expect)(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith('screenReaderChanged', _globals.expect.any(Function));
      (0, _globals.expect)(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith('boldTextChanged', _globals.expect.any(Function));
      (0, _globals.expect)(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith('grayscaleChanged', _globals.expect.any(Function));
      (0, _globals.expect)(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith('invertColorsChanged', _globals.expect.any(Function));
      (0, _globals.expect)(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith('reduceMotionChanged', _globals.expect.any(Function));
      (0, _globals.expect)(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith('reduceTransparencyChanged', _globals.expect.any(Function));
    }));
  });
  (0, _globals.describe)('Configuration Management', function () {
    (0, _globals.it)('should return current accessibility config', function () {
      var config = _AccessibilityService.accessibilityService.getAccessibilityConfig();
      (0, _globals.expect)(config).toEqual({
        isScreenReaderEnabled: false,
        isBoldTextEnabled: false,
        isGrayscaleEnabled: false,
        isInvertColorsEnabled: false,
        isReduceMotionEnabled: false,
        isReduceTransparencyEnabled: false,
        preferredContentSizeCategory: 'normal'
      });
    });
    (0, _globals.it)('should update config when accessibility changes', (0, _asyncToGenerator2.default)(function* () {
      var service = _AccessibilityService.AccessibilityService.getInstance();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      mockListeners['screenReaderChanged'](true);
      (0, _globals.expect)(service.isScreenReaderEnabled()).toBe(true);
      (0, _globals.expect)(service.getAccessibilityConfig().isScreenReaderEnabled).toBe(true);
    }));
    (0, _globals.it)('should update config for all accessibility features', (0, _asyncToGenerator2.default)(function* () {
      var service = _AccessibilityService.AccessibilityService.getInstance();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      mockListeners['screenReaderChanged'](true);
      mockListeners['boldTextChanged'](true);
      mockListeners['grayscaleChanged'](true);
      mockListeners['invertColorsChanged'](true);
      mockListeners['reduceMotionChanged'](true);
      mockListeners['reduceTransparencyChanged'](true);
      var config = service.getAccessibilityConfig();
      (0, _globals.expect)(config.isScreenReaderEnabled).toBe(true);
      (0, _globals.expect)(config.isBoldTextEnabled).toBe(true);
      (0, _globals.expect)(config.isGrayscaleEnabled).toBe(true);
      (0, _globals.expect)(config.isInvertColorsEnabled).toBe(true);
      (0, _globals.expect)(config.isReduceMotionEnabled).toBe(true);
      (0, _globals.expect)(config.isReduceTransparencyEnabled).toBe(true);
    }));
  });
  (0, _globals.describe)('Accessibility Checks', function () {
    (0, _globals.it)('should return screen reader status', function () {
      (0, _globals.expect)(_AccessibilityService.accessibilityService.isScreenReaderEnabled()).toBe(false);
    });
    (0, _globals.it)('should return bold text status', function () {
      (0, _globals.expect)(_AccessibilityService.accessibilityService.isBoldTextEnabled()).toBe(false);
    });
    (0, _globals.it)('should return reduce motion status', function () {
      (0, _globals.expect)(_AccessibilityService.accessibilityService.isReduceMotionEnabled()).toBe(false);
    });
    (0, _globals.it)('should return high contrast status', function () {
      (0, _globals.expect)(_AccessibilityService.accessibilityService.isHighContrastEnabled()).toBe(false);
      _AccessibilityService.accessibilityService.config.isGrayscaleEnabled = true;
      (0, _globals.expect)(_AccessibilityService.accessibilityService.isHighContrastEnabled()).toBe(true);
      _AccessibilityService.accessibilityService.config.isGrayscaleEnabled = false;
      _AccessibilityService.accessibilityService.config.isInvertColorsEnabled = true;
      (0, _globals.expect)(_AccessibilityService.accessibilityService.isHighContrastEnabled()).toBe(true);
    });
  });
  (0, _globals.describe)('Touch Target Requirements', function () {
    (0, _globals.it)('should return minimum touch target size', function () {
      var size = _AccessibilityService.accessibilityService.getMinimumTouchTargetSize();
      (0, _globals.expect)(size).toEqual({
        width: 44,
        height: 44
      });
    });
  });
  (0, _globals.describe)('Accessibility Announcements', function () {
    (0, _globals.it)('should announce content for accessibility', function () {
      var message = 'Button pressed';
      _AccessibilityService.accessibilityService.announceForAccessibility(message);
      (0, _globals.expect)(mockAccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith(message);
    });
    (0, _globals.it)('should handle announcement errors gracefully', function () {
      mockAccessibilityInfo.announceForAccessibility.mockImplementation(function () {
        throw new Error('Announcement failed');
      });
      (0, _globals.expect)(function () {
        _AccessibilityService.accessibilityService.announceForAccessibility('test');
      }).not.toThrow();
    });
  });
  (0, _globals.describe)('Accessibility Focus', function () {
    (0, _globals.it)('should set accessibility focus on iOS', function () {
      var mockRef = {
        current: null
      };
      _AccessibilityService.accessibilityService.setAccessibilityFocus(mockRef);
      (0, _globals.expect)(mockAccessibilityInfo.setAccessibilityFocus).toHaveBeenCalledWith(mockRef);
    });
    (0, _globals.it)('should handle focus errors gracefully', function () {
      mockAccessibilityInfo.setAccessibilityFocus = _globals.jest.fn(function () {
        throw new Error('Focus failed');
      });
      (0, _globals.expect)(function () {
        _AccessibilityService.accessibilityService.setAccessibilityFocus({});
      }).not.toThrow();
    });
  });
  (0, _globals.describe)('Text Size Multipliers', function () {
    (0, _globals.it)('should return correct multiplier for different content sizes', function () {
      var testCases = [{
        category: 'extraSmall',
        expected: 0.8
      }, {
        category: 'small',
        expected: 0.9
      }, {
        category: 'normal',
        expected: 1.0
      }, {
        category: 'large',
        expected: 1.1
      }, {
        category: 'extraLarge',
        expected: 1.2
      }, {
        category: 'extraExtraLarge',
        expected: 1.3
      }, {
        category: 'extraExtraExtraLarge',
        expected: 1.4
      }, {
        category: 'accessibilityMedium',
        expected: 1.5
      }, {
        category: 'accessibilityLarge',
        expected: 1.6
      }, {
        category: 'accessibilityExtraLarge',
        expected: 1.7
      }, {
        category: 'accessibilityExtraExtraLarge',
        expected: 1.8
      }, {
        category: 'accessibilityExtraExtraExtraLarge',
        expected: 2.0
      }, {
        category: 'unknown',
        expected: 1.0
      }];
      testCases.forEach(function (_ref6) {
        var category = _ref6.category,
          expected = _ref6.expected;
        _AccessibilityService.accessibilityService.config.preferredContentSizeCategory = category;
        (0, _globals.expect)(_AccessibilityService.accessibilityService.getTextSizeMultiplier()).toBe(expected);
      });
    });
  });
  (0, _globals.describe)('Color Schemes', function () {
    (0, _globals.it)('should return standard accessible color scheme', function () {
      var colors = _AccessibilityService.accessibilityService.getAccessibleColorScheme();
      (0, _globals.expect)(colors).toEqual({
        primary: '#2563EB',
        secondary: '#64748B',
        background: '#FFFFFF',
        surface: '#F8FAFC',
        text: '#1E293B',
        textSecondary: '#64748B',
        error: '#DC2626',
        success: '#16A34A',
        warning: '#D97706'
      });
    });
    (0, _globals.it)('should return high contrast color scheme when enabled', function () {
      _AccessibilityService.accessibilityService.config.isGrayscaleEnabled = true;
      var colors = _AccessibilityService.accessibilityService.getAccessibleColorScheme();
      (0, _globals.expect)(colors).toEqual({
        primary: '#FFFFFF',
        secondary: '#CCCCCC',
        background: '#000000',
        surface: '#111111',
        text: '#FFFFFF',
        textSecondary: '#CCCCCC',
        error: '#FF4444',
        success: '#44FF44',
        warning: '#FFFF44'
      });
    });
  });
  (0, _globals.describe)('Contrast Requirements', function () {
    (0, _globals.it)('should return true for contrast check (placeholder implementation)', function () {
      var result = _AccessibilityService.accessibilityService.meetsContrastRequirement('#000000', '#FFFFFF');
      (0, _globals.expect)(result).toBe(true);
    });
  });
  (0, _globals.describe)('Event Listeners', function () {
    (0, _globals.it)('should add and remove change listeners', function () {
      var listener = _globals.jest.fn();
      var unsubscribe = _AccessibilityService.accessibilityService.addChangeListener(listener);
      (0, _globals.expect)(_AccessibilityService.accessibilityService.listeners).toContain(listener);
      unsubscribe();
      (0, _globals.expect)(_AccessibilityService.accessibilityService.listeners).not.toContain(listener);
    });
    (0, _globals.it)('should notify listeners when accessibility changes', (0, _asyncToGenerator2.default)(function* () {
      var listener = _globals.jest.fn();
      _AccessibilityService.accessibilityService.addChangeListener(listener);
      var service = _AccessibilityService.AccessibilityService.getInstance();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      mockListeners['screenReaderChanged'](true);
      (0, _globals.expect)(listener).toHaveBeenCalledWith({
        isScreenReaderEnabled: true,
        isBoldTextEnabled: false,
        isGrayscaleEnabled: false,
        isInvertColorsEnabled: false,
        isReduceMotionEnabled: false,
        isReduceTransparencyEnabled: false,
        preferredContentSizeCategory: 'normal'
      });
    }));
    (0, _globals.it)('should handle listener errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      var errorListener = _globals.jest.fn(function () {
        throw new Error('Listener error');
      });
      var goodListener = _globals.jest.fn();
      _AccessibilityService.accessibilityService.addChangeListener(errorListener);
      _AccessibilityService.accessibilityService.addChangeListener(goodListener);
      var service = _AccessibilityService.AccessibilityService.getInstance();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      mockListeners['screenReaderChanged'](true);
      (0, _globals.expect)(goodListener).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle initialization errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAccessibilityInfo.isScreenReaderEnabled.mockRejectedValue(new Error('Init failed'));
      var service = _AccessibilityService.AccessibilityService.getInstance();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      (0, _globals.expect)(service.getAccessibilityConfig()).toBeDefined();
    }));
    (0, _globals.it)('should handle listener setup errors', (0, _asyncToGenerator2.default)(function* () {
      mockAccessibilityInfo.addEventListener.mockImplementation(function () {
        throw new Error('Listener setup failed');
      });
      var service = _AccessibilityService.AccessibilityService.getInstance();
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
      (0, _globals.expect)(service).toBeDefined();
    }));
  });
  (0, _globals.describe)('Platform Differences', function () {
    (0, _globals.it)('should handle iOS-specific focus implementation', function () {
      _reactNative.Platform.OS = 'ios';
      var mockRef = {};
      _AccessibilityService.accessibilityService.setAccessibilityFocus(mockRef);
      (0, _globals.expect)(mockAccessibilityInfo.setAccessibilityFocus).toHaveBeenCalledWith(mockRef);
    });
    (0, _globals.it)('should handle Android focus (placeholder)', function () {
      _reactNative.Platform.OS = 'android';
      var mockRef = {};
      (0, _globals.expect)(function () {
        _AccessibilityService.accessibilityService.setAccessibilityFocus(mockRef);
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,