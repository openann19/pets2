{"version":3,"names":["_getJestObj","mock","AccessibilityInfo","isScreenReaderEnabled","jest","fn","isBoldTextEnabled","isGrayscaleEnabled","isInvertColorsEnabled","isReduceMotionEnabled","isReduceTransparencyEnabled","announceForAccessibility","addEventListener","removeEventListener","Platform","OS","logger","warn","_interopRequireDefault","require","_asyncToGenerator2","_globals","_reactNative","_AccessibilityService","_require","mockAccessibilityInfo","describe","mockListeners","beforeEach","clearAllMocks","AccessibilityService","instance","undefined","mockResolvedValue","mockImplementation","event","listener","remove","afterEach","it","instance1","getInstance","instance2","expect","toBe","accessibilityService","default","service","Promise","resolve","setTimeout","toHaveBeenCalled","mockRejectedValue","Error","config","getAccessibilityConfig","preferredContentSizeCategory","toHaveBeenCalledWith","any","Function","toEqual","isHighContrastEnabled","size","getMinimumTouchTargetSize","width","height","message","not","toThrow","mockRef","current","setAccessibilityFocus","testCases","category","expected","forEach","_ref6","getTextSizeMultiplier","colors","getAccessibleColorScheme","primary","secondary","background","surface","text","textSecondary","error","success","warning","result","meetsContrastRequirement","unsubscribe","addChangeListener","listeners","toContain","errorListener","goodListener","toBeDefined"],"sources":["AccessibilityService.test.ts"],"sourcesContent":["/**\n * Comprehensive tests for AccessibilityService\n *\n * Coverage:\n * - Singleton pattern and initialization\n * - Accessibility configuration management\n * - Screen reader, bold text, reduce motion detection\n * - Event listeners and change notifications\n * - Accessibility announcements and focus\n * - Text size multipliers and color schemes\n * - Touch target size requirements\n * - Error handling and edge cases\n */\n\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { AccessibilityInfo, Platform } from 'react-native';\nimport { accessibilityService, AccessibilityService } from '../AccessibilityService';\n\n// Mock React Native AccessibilityInfo\njest.mock('react-native', () => ({\n  AccessibilityInfo: {\n    isScreenReaderEnabled: jest.fn(),\n    isBoldTextEnabled: jest.fn(),\n    isGrayscaleEnabled: jest.fn(),\n    isInvertColorsEnabled: jest.fn(),\n    isReduceMotionEnabled: jest.fn(),\n    isReduceTransparencyEnabled: jest.fn(),\n    announceForAccessibility: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n  },\n  Platform: {\n    OS: 'ios',\n  },\n}));\n\n// Mock logger\njest.mock('../logger', () => ({\n  logger: {\n    warn: jest.fn(),\n  },\n}));\n\nconst mockAccessibilityInfo = AccessibilityInfo as jest.Mocked<typeof AccessibilityInfo>;\n\ndescribe('AccessibilityService', () => {\n  let mockListeners: { [key: string]: jest.Mock } = {};\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Reset singleton instance\n    (AccessibilityService as any).instance = undefined;\n\n    // Setup default mock returns\n    mockAccessibilityInfo.isScreenReaderEnabled.mockResolvedValue(false);\n    mockAccessibilityInfo.isBoldTextEnabled.mockResolvedValue(false);\n    mockAccessibilityInfo.isGrayscaleEnabled.mockResolvedValue(false);\n    mockAccessibilityInfo.isInvertColorsEnabled.mockResolvedValue(false);\n    mockAccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(false);\n    mockAccessibilityInfo.isReduceTransparencyEnabled.mockResolvedValue(false);\n\n    // Mock addEventListener to capture listeners\n    mockAccessibilityInfo.addEventListener.mockImplementation((event, listener) => {\n      mockListeners[event] = listener;\n      return { remove: jest.fn() };\n    });\n  });\n\n  afterEach(() => {\n    mockListeners = {};\n  });\n\n  describe('Singleton Pattern', () => {\n    it('should return the same instance', () => {\n      const instance1 = AccessibilityService.getInstance();\n      const instance2 = AccessibilityService.getInstance();\n\n      expect(instance1).toBe(instance2);\n      expect(instance1).toBe(accessibilityService);\n    });\n\n    it('should initialize accessibility on first getInstance call', async () => {\n      const service = AccessibilityService.getInstance();\n\n      // Wait for initialization\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      expect(mockAccessibilityInfo.isScreenReaderEnabled).toHaveBeenCalled();\n      expect(mockAccessibilityInfo.isBoldTextEnabled).toHaveBeenCalled();\n      expect(mockAccessibilityInfo.isGrayscaleEnabled).toHaveBeenCalled();\n      expect(mockAccessibilityInfo.isInvertColorsEnabled).toHaveBeenCalled();\n      expect(mockAccessibilityInfo.isReduceMotionEnabled).toHaveBeenCalled();\n      expect(mockAccessibilityInfo.isReduceTransparencyEnabled).toHaveBeenCalled();\n    });\n  });\n\n  describe('Initialization', () => {\n    it('should initialize with default config when accessibility checks fail', async () => {\n      mockAccessibilityInfo.isScreenReaderEnabled.mockRejectedValue(new Error('Failed'));\n\n      const service = AccessibilityService.getInstance();\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      const config = service.getAccessibilityConfig();\n      expect(config.isScreenReaderEnabled).toBe(false);\n      expect(config.isBoldTextEnabled).toBe(false);\n      expect(config.isGrayscaleEnabled).toBe(false);\n      expect(config.isInvertColorsEnabled).toBe(false);\n      expect(config.isReduceMotionEnabled).toBe(false);\n      expect(config.isReduceTransparencyEnabled).toBe(false);\n      expect(config.preferredContentSizeCategory).toBe('normal');\n    });\n\n    it('should setup all accessibility event listeners', async () => {\n      const service = AccessibilityService.getInstance();\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      expect(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith(\n        'screenReaderChanged',\n        expect.any(Function)\n      );\n      expect(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith(\n        'boldTextChanged',\n        expect.any(Function)\n      );\n      expect(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith(\n        'grayscaleChanged',\n        expect.any(Function)\n      );\n      expect(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith(\n        'invertColorsChanged',\n        expect.any(Function)\n      );\n      expect(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith(\n        'reduceMotionChanged',\n        expect.any(Function)\n      );\n      expect(mockAccessibilityInfo.addEventListener).toHaveBeenCalledWith(\n        'reduceTransparencyChanged',\n        expect.any(Function)\n      );\n    });\n  });\n\n  describe('Configuration Management', () => {\n    it('should return current accessibility config', () => {\n      const config = accessibilityService.getAccessibilityConfig();\n\n      expect(config).toEqual({\n        isScreenReaderEnabled: false,\n        isBoldTextEnabled: false,\n        isGrayscaleEnabled: false,\n        isInvertColorsEnabled: false,\n        isReduceMotionEnabled: false,\n        isReduceTransparencyEnabled: false,\n        preferredContentSizeCategory: 'normal',\n      });\n    });\n\n    it('should update config when accessibility changes', async () => {\n      const service = AccessibilityService.getInstance();\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      // Simulate screen reader enabled\n      mockListeners['screenReaderChanged'](true);\n\n      expect(service.isScreenReaderEnabled()).toBe(true);\n      expect(service.getAccessibilityConfig().isScreenReaderEnabled).toBe(true);\n    });\n\n    it('should update config for all accessibility features', async () => {\n      const service = AccessibilityService.getInstance();\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      // Simulate all features enabled\n      mockListeners['screenReaderChanged'](true);\n      mockListeners['boldTextChanged'](true);\n      mockListeners['grayscaleChanged'](true);\n      mockListeners['invertColorsChanged'](true);\n      mockListeners['reduceMotionChanged'](true);\n      mockListeners['reduceTransparencyChanged'](true);\n\n      const config = service.getAccessibilityConfig();\n      expect(config.isScreenReaderEnabled).toBe(true);\n      expect(config.isBoldTextEnabled).toBe(true);\n      expect(config.isGrayscaleEnabled).toBe(true);\n      expect(config.isInvertColorsEnabled).toBe(true);\n      expect(config.isReduceMotionEnabled).toBe(true);\n      expect(config.isReduceTransparencyEnabled).toBe(true);\n    });\n  });\n\n  describe('Accessibility Checks', () => {\n    it('should return screen reader status', () => {\n      expect(accessibilityService.isScreenReaderEnabled()).toBe(false);\n    });\n\n    it('should return bold text status', () => {\n      expect(accessibilityService.isBoldTextEnabled()).toBe(false);\n    });\n\n    it('should return reduce motion status', () => {\n      expect(accessibilityService.isReduceMotionEnabled()).toBe(false);\n    });\n\n    it('should return high contrast status', () => {\n      expect(accessibilityService.isHighContrastEnabled()).toBe(false);\n\n      // Enable grayscale\n      (accessibilityService as any).config.isGrayscaleEnabled = true;\n      expect(accessibilityService.isHighContrastEnabled()).toBe(true);\n\n      // Reset and enable invert colors\n      (accessibilityService as any).config.isGrayscaleEnabled = false;\n      (accessibilityService as any).config.isInvertColorsEnabled = true;\n      expect(accessibilityService.isHighContrastEnabled()).toBe(true);\n    });\n  });\n\n  describe('Touch Target Requirements', () => {\n    it('should return minimum touch target size', () => {\n      const size = accessibilityService.getMinimumTouchTargetSize();\n\n      expect(size).toEqual({\n        width: 44,\n        height: 44,\n      });\n    });\n  });\n\n  describe('Accessibility Announcements', () => {\n    it('should announce content for accessibility', () => {\n      const message = 'Button pressed';\n\n      accessibilityService.announceForAccessibility(message);\n\n      expect(mockAccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith(message);\n    });\n\n    it('should handle announcement errors gracefully', () => {\n      mockAccessibilityInfo.announceForAccessibility.mockImplementation(() => {\n        throw new Error('Announcement failed');\n      });\n\n      expect(() => {\n        accessibilityService.announceForAccessibility('test');\n      }).not.toThrow();\n    });\n  });\n\n  describe('Accessibility Focus', () => {\n    it('should set accessibility focus on iOS', () => {\n      const mockRef = { current: null };\n\n      accessibilityService.setAccessibilityFocus(mockRef);\n\n      expect((mockAccessibilityInfo as any).setAccessibilityFocus).toHaveBeenCalledWith(mockRef);\n    });\n\n    it('should handle focus errors gracefully', () => {\n      (mockAccessibilityInfo as any).setAccessibilityFocus = jest.fn(() => {\n        throw new Error('Focus failed');\n      });\n\n      expect(() => {\n        accessibilityService.setAccessibilityFocus({});\n      }).not.toThrow();\n    });\n  });\n\n  describe('Text Size Multipliers', () => {\n    it('should return correct multiplier for different content sizes', () => {\n      const testCases = [\n        { category: 'extraSmall', expected: 0.8 },\n        { category: 'small', expected: 0.9 },\n        { category: 'normal', expected: 1.0 },\n        { category: 'large', expected: 1.1 },\n        { category: 'extraLarge', expected: 1.2 },\n        { category: 'extraExtraLarge', expected: 1.3 },\n        { category: 'extraExtraExtraLarge', expected: 1.4 },\n        { category: 'accessibilityMedium', expected: 1.5 },\n        { category: 'accessibilityLarge', expected: 1.6 },\n        { category: 'accessibilityExtraLarge', expected: 1.7 },\n        { category: 'accessibilityExtraExtraLarge', expected: 1.8 },\n        { category: 'accessibilityExtraExtraExtraLarge', expected: 2.0 },\n        { category: 'unknown', expected: 1.0 }, // Default case\n      ];\n\n      testCases.forEach(({ category, expected }) => {\n        (accessibilityService as any).config.preferredContentSizeCategory = category;\n        expect(accessibilityService.getTextSizeMultiplier()).toBe(expected);\n      });\n    });\n  });\n\n  describe('Color Schemes', () => {\n    it('should return standard accessible color scheme', () => {\n      const colors = accessibilityService.getAccessibleColorScheme();\n\n      expect(colors).toEqual({\n        primary: '#2563EB',\n        secondary: '#64748B',\n        background: '#FFFFFF',\n        surface: '#F8FAFC',\n        text: '#1E293B',\n        textSecondary: '#64748B',\n        error: '#DC2626',\n        success: '#16A34A',\n        warning: '#D97706',\n      });\n    });\n\n    it('should return high contrast color scheme when enabled', () => {\n      // Enable high contrast\n      (accessibilityService as any).config.isGrayscaleEnabled = true;\n\n      const colors = accessibilityService.getAccessibleColorScheme();\n\n      expect(colors).toEqual({\n        primary: '#FFFFFF',\n        secondary: '#CCCCCC',\n        background: '#000000',\n        surface: '#111111',\n        text: '#FFFFFF',\n        textSecondary: '#CCCCCC',\n        error: '#FF4444',\n        success: '#44FF44',\n        warning: '#FFFF44',\n      });\n    });\n  });\n\n  describe('Contrast Requirements', () => {\n    it('should return true for contrast check (placeholder implementation)', () => {\n      const result = accessibilityService.meetsContrastRequirement('#000000', '#FFFFFF');\n\n      expect(result).toBe(true);\n    });\n  });\n\n  describe('Event Listeners', () => {\n    it('should add and remove change listeners', () => {\n      const listener = jest.fn();\n\n      const unsubscribe = accessibilityService.addChangeListener(listener);\n\n      expect((accessibilityService as any).listeners).toContain(listener);\n\n      unsubscribe();\n\n      expect((accessibilityService as any).listeners).not.toContain(listener);\n    });\n\n    it('should notify listeners when accessibility changes', async () => {\n      const listener = jest.fn();\n      accessibilityService.addChangeListener(listener);\n\n      const service = AccessibilityService.getInstance();\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      // Simulate change\n      mockListeners['screenReaderChanged'](true);\n\n      expect(listener).toHaveBeenCalledWith({\n        isScreenReaderEnabled: true,\n        isBoldTextEnabled: false,\n        isGrayscaleEnabled: false,\n        isInvertColorsEnabled: false,\n        isReduceMotionEnabled: false,\n        isReduceTransparencyEnabled: false,\n        preferredContentSizeCategory: 'normal',\n      });\n    });\n\n    it('should handle listener errors gracefully', async () => {\n      const errorListener = jest.fn(() => {\n        throw new Error('Listener error');\n      });\n      const goodListener = jest.fn();\n\n      accessibilityService.addChangeListener(errorListener);\n      accessibilityService.addChangeListener(goodListener);\n\n      const service = AccessibilityService.getInstance();\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      // Simulate change - should not throw\n      mockListeners['screenReaderChanged'](true);\n\n      expect(goodListener).toHaveBeenCalled();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle initialization errors gracefully', async () => {\n      mockAccessibilityInfo.isScreenReaderEnabled.mockRejectedValue(new Error('Init failed'));\n\n      const service = AccessibilityService.getInstance();\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      // Should not crash, should use defaults\n      expect(service.getAccessibilityConfig()).toBeDefined();\n    });\n\n    it('should handle listener setup errors', async () => {\n      mockAccessibilityInfo.addEventListener.mockImplementation(() => {\n        throw new Error('Listener setup failed');\n      });\n\n      // Should not crash during initialization\n      const service = AccessibilityService.getInstance();\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      expect(service).toBeDefined();\n    });\n  });\n\n  describe('Platform Differences', () => {\n    it('should handle iOS-specific focus implementation', () => {\n      Platform.OS = 'ios';\n      const mockRef = {};\n\n      accessibilityService.setAccessibilityFocus(mockRef);\n\n      expect((mockAccessibilityInfo as any).setAccessibilityFocus).toHaveBeenCalledWith(mockRef);\n    });\n\n    it('should handle Android focus (placeholder)', () => {\n      Platform.OS = 'android';\n      const mockRef = {};\n\n      // Should not crash on Android\n      expect(() => {\n        accessibilityService.setAccessibilityFocus(mockRef);\n      }).not.toThrow();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}