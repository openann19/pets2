{"version":3,"names":["LocalAuthentication","_interopRequireWildcard","require","SecureStore","_core","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","cov_2842pzl3r7","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","b","_coverageSchema","coverage","actualCoverage","BiometricService","_classCallCheck2","_createClass2","key","value","_checkBiometricSupport","_asyncToGenerator2","hasHardware","hasHardwareAsync","isEnrolled","isEnrolledAsync","supportedTypes","supportedAuthenticationTypesAsync","capabilities","logger","info","length","error","checkBiometricSupport","apply","arguments","_authenticate","reason","success","result","authenticateAsync","promptMessage","fallbackLabel","cancelLabel","disableDeviceFallback","biometricType","getBiometricType","warn","Error","message","authenticate","_x","_enableBiometric","authResult","setItemAsync","BIOMETRIC_ENABLED_KEY","BIOMETRIC_TYPE_KEY","enableBiometric","_disableBiometric","deleteItemAsync","disableBiometric","_isBiometricEnabled","enabled","getItemAsync","isBiometricEnabled","includes","AuthenticationType","FACIAL_RECOGNITION","FINGERPRINT","IRIS","getBiometricTypeName","_encryptWithBiometric","data","requireAuthentication","authenticationPrompt","showPrompt","encryptWithBiometric","_x2","_x3","_decryptWithBiometric","decryptedData","decryptWithBiometric","_x4","_removeBiometricData","removeBiometricData","_x5","biometricService","exports","_default"],"sources":["BiometricService.ts"],"sourcesContent":["/**\n * Biometric Authentication Service for PawfectMatch Mobile App\n * Handles biometric authentication (FaceID, TouchID, Fingerprint)\n */\nimport * as LocalAuthentication from \"expo-local-authentication\";\nimport * as SecureStore from \"expo-secure-store\";\nimport { logger } from \"@pawfectmatch/core\";\n\nexport interface BiometricAuthResult {\n  success: boolean;\n  error?: string;\n  biometricType?: \"fingerprint\" | \"facial\" | \"iris\" | \"unknown\";\n}\n\nexport interface BiometricCapabilities {\n  hasHardware: boolean;\n  isEnrolled: boolean;\n  supportedTypes: LocalAuthentication.AuthenticationType[];\n}\n\nclass BiometricService {\n  private static readonly BIOMETRIC_ENABLED_KEY = \"biometric_enabled\";\n  private static readonly BIOMETRIC_TYPE_KEY = \"biometric_type\";\n\n  /**\n   * Check if device supports biometric authentication\n   */\n  async checkBiometricSupport(): Promise<BiometricCapabilities> {\n    try {\n      const hasHardware = await LocalAuthentication.hasHardwareAsync();\n      const isEnrolled = await LocalAuthentication.isEnrolledAsync();\n      const supportedTypes =\n        await LocalAuthentication.supportedAuthenticationTypesAsync();\n\n      const capabilities: BiometricCapabilities = {\n        hasHardware,\n        isEnrolled,\n        supportedTypes,\n      };\n\n      logger.info(\"Biometric capabilities checked\", {\n        hasHardware,\n        isEnrolled,\n        supportedTypes: supportedTypes.length,\n      });\n\n      return capabilities;\n    } catch (error) {\n      logger.error(\"Failed to check biometric support\", { error });\n      return {\n        hasHardware: false,\n        isEnrolled: false,\n        supportedTypes: [],\n      };\n    }\n  }\n\n  /**\n   * Authenticate using biometrics\n   */\n  async authenticate(reason?: string): Promise<BiometricAuthResult> {\n    try {\n      const capabilities = await this.checkBiometricSupport();\n\n      if (!capabilities.hasHardware) {\n        return {\n          success: false,\n          error: \"Biometric authentication not supported on this device\",\n        };\n      }\n\n      if (!capabilities.isEnrolled) {\n        return {\n          success: false,\n          error: \"No biometric authentication methods enrolled\",\n        };\n      }\n\n      const result = await LocalAuthentication.authenticateAsync({\n        promptMessage:\n          reason !== undefined && reason !== \"\"\n            ? reason\n            : \"Authenticate to access PawfectMatch\",\n        fallbackLabel: \"Use PIN\",\n        cancelLabel: \"Cancel\",\n        disableDeviceFallback: false,\n      });\n\n      const biometricType = this.getBiometricType(capabilities.supportedTypes);\n\n      if (result.success) {\n        logger.info(\"Biometric authentication successful\", { biometricType });\n        return {\n          success: true,\n          biometricType,\n        };\n      } else {\n        const error =\n          result.error !== \"\" ? result.error : \"Authentication failed\";\n        logger.warn(\"Biometric authentication failed\", {\n          error,\n          biometricType,\n        });\n        return {\n          success: false,\n          error,\n          biometricType,\n        };\n      }\n    } catch (error) {\n      logger.error(\"Biometric authentication error\", { error });\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : \"Unknown error occurred\",\n      };\n    }\n  }\n\n  /**\n   * Enable biometric authentication for the app\n   */\n  async enableBiometric(): Promise<boolean> {\n    try {\n      // First authenticate to verify biometrics work\n      const authResult = await this.authenticate(\n        \"Enable biometric authentication\",\n      );\n\n      if (!authResult.success) {\n        return false;\n      }\n\n      // Store that biometric is enabled\n      await SecureStore.setItemAsync(\n        BiometricService.BIOMETRIC_ENABLED_KEY,\n        \"true\",\n      );\n      await SecureStore.setItemAsync(\n        BiometricService.BIOMETRIC_TYPE_KEY,\n        authResult.biometricType !== undefined\n          ? authResult.biometricType\n          : \"unknown\",\n      );\n\n      logger.info(\"Biometric authentication enabled\", {\n        type: authResult.biometricType,\n      });\n      return true;\n    } catch (error) {\n      logger.error(\"Failed to enable biometric authentication\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Disable biometric authentication for the app\n   */\n  async disableBiometric(): Promise<void> {\n    try {\n      await SecureStore.deleteItemAsync(BiometricService.BIOMETRIC_ENABLED_KEY);\n      await SecureStore.deleteItemAsync(BiometricService.BIOMETRIC_TYPE_KEY);\n      logger.info(\"Biometric authentication disabled\");\n    } catch (error) {\n      logger.error(\"Failed to disable biometric authentication\", { error });\n    }\n  }\n\n  /**\n   * Check if biometric authentication is enabled for the app\n   */\n  async isBiometricEnabled(): Promise<boolean> {\n    try {\n      const enabled = await SecureStore.getItemAsync(\n        BiometricService.BIOMETRIC_ENABLED_KEY,\n      );\n      return enabled === \"true\";\n    } catch (error) {\n      logger.error(\"Failed to check biometric status\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Get the type of biometric authentication available\n   */\n  private getBiometricType(\n    supportedTypes: LocalAuthentication.AuthenticationType[],\n  ): \"fingerprint\" | \"facial\" | \"iris\" | \"unknown\" {\n    if (\n      supportedTypes.includes(\n        LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION,\n      )\n    ) {\n      return \"facial\";\n    }\n    if (\n      supportedTypes.includes(\n        LocalAuthentication.AuthenticationType.FINGERPRINT,\n      )\n    ) {\n      return \"fingerprint\";\n    }\n    if (supportedTypes.includes(LocalAuthentication.AuthenticationType.IRIS)) {\n      return \"iris\";\n    }\n    return \"unknown\";\n  }\n\n  /**\n   * Get user-friendly biometric type name\n   */\n  getBiometricTypeName(type?: string): string {\n    switch (type) {\n      case \"facial\":\n        return \"Face ID\";\n      case \"fingerprint\":\n        return \"Touch ID\";\n      case \"iris\":\n        return \"Iris Scan\";\n      default:\n        return \"Biometric Authentication\";\n    }\n  }\n\n  /**\n   * Encrypt sensitive data with biometric protection\n   * Uses SecureStore with biometric authentication for production-grade encryption\n   */\n  async encryptWithBiometric(data: string, key: string): Promise<void> {\n    try {\n      // Authenticate first\n      const authResult = await this.authenticate(\"Encrypt sensitive data\");\n      if (!authResult.success) {\n        throw new Error(\"Biometric authentication required for encryption\");\n      }\n\n      // Store securely in keychain with biometric protection\n      await SecureStore.setItemAsync(key, data, {\n        requireAuthentication: true,\n        authenticationPrompt: \"Authenticate to access encrypted data\",\n        showPrompt: true,\n      });\n\n      logger.info(\"Data encrypted securely with biometric authentication\", {\n        key,\n        biometricType: authResult.biometricType,\n      });\n    } catch (error) {\n      logger.error(\"Failed to encrypt data with biometric protection\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Decrypt data protected by biometrics\n   */\n  async decryptWithBiometric(key: string): Promise<string | null> {\n    try {\n      // First authenticate\n      const authResult = await this.authenticate(\"Decrypt sensitive data\");\n      if (!authResult.success) {\n        throw new Error(\"Biometric authentication required\");\n      }\n\n      // Retrieve from secure store (triggers biometric prompt)\n      const decryptedData = await SecureStore.getItemAsync(key, {\n        requireAuthentication: true,\n        authenticationPrompt: \"Authenticate to decrypt sensitive data\",\n        showPrompt: true,\n      });\n\n      logger.info(\"Data decrypted successfully with biometric authentication\", {\n        key,\n        biometricType: authResult.biometricType,\n      });\n\n      return decryptedData;\n    } catch (error) {\n      logger.error(\"Failed to decrypt biometric data\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Remove encrypted data from biometric-protected storage\n   */\n  async removeBiometricData(key: string): Promise<void> {\n    try {\n      await SecureStore.deleteItemAsync(key);\n      logger.info(\"Biometric-protected data removed\", { key });\n    } catch (error) {\n      logger.error(\"Failed to remove biometric data\", { error });\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const biometricService = new BiometricService();\nexport default biometricService;\n"],"mappings":";;;;;;;;;;AAIA,IAAAA,mBAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,WAAA,GAAAF,uBAAA,CAAAC,OAAA;AACA,IAAAE,KAAA,GAAAF,OAAA;AAA4C,SAAAD,wBAAAI,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAN,uBAAA,YAAAA,wBAAAI,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAC,OAAA,EAAAV,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,UAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,GAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,EAAAQ,CAAA,cAAAM,GAAA,IAAAd,CAAA,gBAAAc,GAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,GAAA,OAAAP,CAAA,IAAAD,CAAA,GAAAW,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAnB,CAAA,EAAAc,GAAA,OAAAP,CAAA,CAAAK,GAAA,IAAAL,CAAA,CAAAM,GAAA,IAAAP,CAAA,CAAAE,CAAA,EAAAM,GAAA,EAAAP,CAAA,IAAAC,CAAA,CAAAM,GAAA,IAAAd,CAAA,CAAAc,GAAA,WAAAN,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAAA,SAAAmB,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,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","ignoreList":[]}