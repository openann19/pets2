229400600a77bf4e6ec97d262e211f24
"use strict";

_getJestObj().mock("../adminAPI", function () {
  return {
    _adminAPI: {
      getUsers: _globals.jest.fn(),
      suspendUser: _globals.jest.fn(),
      activateUser: _globals.jest.fn(),
      banUser: _globals.jest.fn()
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      error: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _adminUsersService = require("../adminUsersService");
var _adminAPI = require("../adminAPI");
var _core = require("@pawfectmatch/core");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAdminAPI = _adminAPI._adminAPI;
var mockLogger = _core.logger;
(0, _globals.describe)('AdminUsersService', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    (0, _adminUsersService.invalidateAdminUsersCache)();
  });
  (0, _globals.describe)('Cache Management', function () {
    (0, _globals.it)('should create consistent cache keys', function () {
      var query1 = {
        page: 1,
        limit: 20
      };
      var query2 = {
        page: 1,
        limit: 20
      };
      var query3 = {
        page: 2,
        limit: 20
      };
      var createCacheKey = global.createCacheKey;
      (0, _globals.expect)(createCacheKey(query1)).toBe(createCacheKey(query2));
      (0, _globals.expect)(createCacheKey(query1)).not.toBe(createCacheKey(query3));
    });
    (0, _globals.it)('should handle complex query normalization', function () {
      var query = {
        page: 1,
        limit: 50,
        search: 'John DOE',
        status: 'active',
        role: 'admin',
        verified: true
      };
      var createCacheKey = global.createCacheKey;
      var key = createCacheKey(query);
      (0, _globals.expect)(key).toContain('"search":"john doe"');
      (0, _globals.expect)(key).toContain('"status":"active"');
      (0, _globals.expect)(key).toContain('"role":"admin"');
      (0, _globals.expect)(key).toContain('"verified":"true"');
    });
    (0, _globals.it)('should exclude undefined and empty values from cache key', function () {
      var query = {
        page: 1,
        limit: undefined,
        search: '',
        status: undefined,
        role: 'user',
        verified: undefined
      };
      var createCacheKey = global.createCacheKey;
      var key = createCacheKey(query);
      (0, _globals.expect)(key).not.toContain('limit');
      (0, _globals.expect)(key).not.toContain('search');
      (0, _globals.expect)(key).not.toContain('status');
      (0, _globals.expect)(key).not.toContain('verified');
      (0, _globals.expect)(key).toContain('"role":"user"');
      (0, _globals.expect)(key).toContain('"page":"1"');
    });
    (0, _globals.it)('should validate cache expiration', function () {
      var isCacheValid = global.isCacheValid;
      var validEntry = {
        timestamp: Date.now() - 10000
      };
      var expiredEntry = {
        timestamp: Date.now() - 40000
      };
      (0, _globals.expect)(isCacheValid(validEntry)).toBe(true);
      (0, _globals.expect)(isCacheValid(expiredEntry)).toBe(false);
      (0, _globals.expect)(isCacheValid()).toBe(false);
      (0, _globals.expect)(isCacheValid({})).toBe(false);
    });
    (0, _globals.it)('should invalidate cache', function () {
      var cache = global.cache;
      cache.set('test', {
        timestamp: Date.now(),
        data: {}
      });
      (0, _globals.expect)(cache.size).toBe(1);
      (0, _adminUsersService.invalidateAdminUsersCache)();
      (0, _globals.expect)(cache.size).toBe(0);
    });
  });
  (0, _globals.describe)('Data Mapping', function () {
    (0, _globals.it)('should map user data correctly', function () {
      var rawUser = {
        _id: 'user123',
        firstName: 'John',
        lastName: 'Doe',
        email: 'john@example.com',
        role: 'admin',
        status: 'active',
        isVerified: true,
        createdAt: '2024-01-01T00:00:00Z',
        lastLoginAt: '2024-01-15T00:00:00Z',
        pets: [{
          id: 'pet1'
        }, {
          id: 'pet2'
        }],
        matchesCount: 25,
        messagesCount: 150
      };
      var mapUser = global.mapUser;
      var mapped = mapUser(rawUser);
      (0, _globals.expect)(mapped).toEqual({
        id: 'user123',
        firstName: 'John',
        lastName: 'Doe',
        email: 'john@example.com',
        role: 'admin',
        status: 'active',
        verified: true,
        createdAt: '2024-01-01T00:00:00Z',
        lastLoginAt: '2024-01-15T00:00:00Z',
        petsCount: 2,
        matchesCount: 25,
        messagesCount: 150
      });
    });
    (0, _globals.it)('should handle missing or invalid user data gracefully', function () {
      var incompleteUser = {
        _id: undefined,
        firstName: null,
        lastName: undefined,
        email: '',
        role: null,
        status: 'invalid_status',
        isVerified: undefined,
        createdAt: null,
        pets: null,
        matchesCount: 'invalid',
        messagesCount: undefined
      };
      var mapUser = global.mapUser;
      var mapped = mapUser(incompleteUser);
      (0, _globals.expect)(mapped).toEqual({
        id: '',
        firstName: 'Unknown',
        lastName: 'User',
        email: 'unknown@example.com',
        role: 'user',
        status: 'pending',
        verified: false,
        createdAt: _globals.expect.any(String),
        lastLoginAt: undefined,
        petsCount: 0,
        matchesCount: 0,
        messagesCount: 0
      });
    });
    (0, _globals.it)('should handle alternative field names', function () {
      var altUser = {
        _id: 'user456',
        firstName: 'Jane',
        lastName: 'Smith',
        email: 'jane@example.com',
        role: 'user',
        status: 'active',
        verified: true,
        createdAt: '2024-01-01T00:00:00Z',
        pets: ['pet1', 'pet2', 'pet3'],
        petsCount: 5,
        matchesCount: 10,
        messagesCount: 50
      };
      var mapUser = global.mapUser;
      var mapped = mapUser(altUser);
      (0, _globals.expect)(mapped.petsCount).toBe(3);
      (0, _globals.expect)(mapped.verified).toBe(true);
    });
    (0, _globals.it)('should map response data correctly', function () {
      var rawResponse = {
        success: true,
        data: {
          users: [{
            _id: 'user1',
            firstName: 'John',
            lastName: 'Doe',
            email: 'john@example.com',
            role: 'user',
            status: 'active',
            isVerified: true,
            createdAt: '2024-01-01T00:00:00Z',
            pets: [{
              id: 'pet1'
            }],
            matchesCount: 5,
            messagesCount: 10
          }],
          pagination: {
            page: 1,
            limit: 20,
            total: 100,
            pages: 5
          }
        }
      };
      var mapResponse = global.mapResponse;
      var mapped = mapResponse(rawResponse);
      (0, _globals.expect)(mapped.users).toHaveLength(1);
      (0, _globals.expect)(mapped.users[0].id).toBe('user1');
      (0, _globals.expect)(mapped.pagination).toEqual({
        page: 1,
        limit: 20,
        total: 100,
        pages: 5
      });
    });
    (0, _globals.it)('should handle missing response data', function () {
      var emptyResponse = {
        success: false,
        data: undefined
      };
      var mapResponse = global.mapResponse;
      var mapped = mapResponse(emptyResponse);
      (0, _globals.expect)(mapped.users).toEqual([]);
      (0, _globals.expect)(mapped.pagination).toEqual({
        page: 1,
        limit: 0,
        total: 0,
        pages: 1
      });
    });
  });
  (0, _globals.describe)('fetchAdminUsers', function () {
    var mockApiResponse = {
      success: true,
      data: {
        users: [{
          _id: 'user1',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john@example.com',
          role: 'user',
          status: 'active',
          isVerified: true,
          createdAt: '2024-01-01T00:00:00Z',
          pets: [{
            id: 'pet1'
          }],
          matchesCount: 5,
          messagesCount: 10
        }],
        pagination: {
          page: 1,
          limit: 20,
          total: 1,
          pages: 1
        }
      }
    };
    (0, _globals.it)('should fetch users from API and cache result', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.getUsers.mockResolvedValue(mockApiResponse);
      var result = yield (0, _adminUsersService.fetchAdminUsers)({
        page: 1,
        limit: 20
      });
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenCalledWith({
        page: 1,
        limit: 20
      });
      (0, _globals.expect)(result.users).toHaveLength(1);
      (0, _globals.expect)(result.users[0].id).toBe('user1');
      (0, _globals.expect)(result.pagination.total).toBe(1);
      var cache = global.cache;
      (0, _globals.expect)(cache.size).toBe(1);
    }));
    (0, _globals.it)('should return cached data when available and valid', (0, _asyncToGenerator2.default)(function* () {
      var cache = global.cache;
      var cachedData = {
        users: [{
          id: 'cached-user',
          firstName: 'Cached',
          lastName: 'User',
          email: 'cached@example.com',
          role: 'user',
          status: 'active',
          verified: true,
          createdAt: '2024-01-01T00:00:00Z',
          petsCount: 1,
          matchesCount: 2,
          messagesCount: 3
        }],
        pagination: {
          page: 1,
          limit: 20,
          total: 1,
          pages: 1
        }
      };
      cache.set('{"page":"1","limit":"20"}', {
        timestamp: Date.now(),
        data: cachedData
      });
      var result = yield (0, _adminUsersService.fetchAdminUsers)({
        page: 1,
        limit: 20
      });
      (0, _globals.expect)(mockAdminAPI.getUsers).not.toHaveBeenCalled();
      (0, _globals.expect)(result).toBe(cachedData);
    }));
    (0, _globals.it)('should refetch when cache is expired', (0, _asyncToGenerator2.default)(function* () {
      var cache = global.cache;
      var expiredData = {
        users: [],
        pagination: {
          page: 1,
          limit: 20,
          total: 0,
          pages: 0
        }
      };
      cache.set('{"page":"1","limit":"20"}', {
        timestamp: Date.now() - 40000,
        data: expiredData
      });
      mockAdminAPI.getUsers.mockResolvedValue(mockApiResponse);
      var result = yield (0, _adminUsersService.fetchAdminUsers)({
        page: 1,
        limit: 20
      });
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenCalled();
      (0, _globals.expect)(result.users).toHaveLength(1);
    }));
    (0, _globals.it)('should handle various query parameters', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.getUsers.mockResolvedValue(mockApiResponse);
      var queries = [{
        search: 'john',
        status: 'active',
        role: 'user',
        verified: true
      }, {
        page: 2,
        limit: 50
      }, {
        status: 'all'
      }, {
        role: ''
      }, {
        verified: undefined
      }];
      for (var query of queries) {
        yield (0, _adminUsersService.fetchAdminUsers)(query);
      }
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenCalledTimes(5);
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenNthCalledWith(1, {
        search: 'john',
        status: 'active',
        role: 'user',
        verified: 'true'
      });
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenNthCalledWith(2, {
        page: 2,
        limit: 50
      });
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenNthCalledWith(3, {});
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenNthCalledWith(4, {});
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenNthCalledWith(5, {});
    }));
    (0, _globals.it)('should handle API errors and clear cache', (0, _asyncToGenerator2.default)(function* () {
      var cache = global.cache;
      cache.set('test-key', {
        timestamp: Date.now(),
        data: {}
      });
      var error = new Error('API failed');
      mockAdminAPI.getUsers.mockRejectedValue(error);
      yield (0, _globals.expect)((0, _adminUsersService.fetchAdminUsers)()).rejects.toThrow('API failed');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to fetch admin users', {
        error: error
      });
      (0, _globals.expect)(cache.size).toBe(0);
    }));
    (0, _globals.it)('should handle non-Error exceptions', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.getUsers.mockRejectedValue('String error');
      yield (0, _globals.expect)((0, _adminUsersService.fetchAdminUsers)()).rejects.toThrow('Failed to fetch admin users');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to fetch admin users', {
        error: _globals.expect.any(Error)
      });
    }));
  });
  (0, _globals.describe)('performAdminUserAction', function () {
    (0, _globals.beforeEach)(function () {
      var cache = global.cache;
      cache.set('test-key', {
        timestamp: Date.now(),
        data: {
          users: [],
          pagination: {}
        }
      });
    });
    (0, _globals.it)('should suspend user successfully', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.suspendUser.mockResolvedValue({
        success: true
      });
      yield (0, _adminUsersService.performAdminUserAction)('user123', 'suspend', {
        reason: 'Violation of terms',
        durationDays: 7
      });
      (0, _globals.expect)(mockAdminAPI.suspendUser).toHaveBeenCalledWith('user123', 'Violation of terms', 7);
      var cache = global.cache;
      (0, _globals.expect)(cache.size).toBe(0);
    }));
    (0, _globals.it)('should activate user successfully', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.activateUser.mockResolvedValue({
        success: true
      });
      yield (0, _adminUsersService.performAdminUserAction)('user123', 'activate', {
        reason: 'Appeal approved'
      });
      (0, _globals.expect)(mockAdminAPI.activateUser).toHaveBeenCalledWith('user123', 'Appeal approved');
    }));
    (0, _globals.it)('should ban user successfully', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.banUser.mockResolvedValue({
        success: true
      });
      yield (0, _adminUsersService.performAdminUserAction)('user123', 'ban', {
        reason: 'Severe violation'
      });
      (0, _globals.expect)(mockAdminAPI.banUser).toHaveBeenCalledWith('user123', 'Severe violation');
    }));
    (0, _globals.it)('should handle unban action (same as activate)', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.activateUser.mockResolvedValue({
        success: true
      });
      yield (0, _adminUsersService.performAdminUserAction)('user123', 'unban', {
        reason: 'Reinstated'
      });
      (0, _globals.expect)(mockAdminAPI.activateUser).toHaveBeenCalledWith('user123', 'Reinstated');
    }));
    (0, _globals.it)('should use default reasons when not provided', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.suspendUser.mockResolvedValue({
        success: true
      });
      mockAdminAPI.activateUser.mockResolvedValue({
        success: true
      });
      mockAdminAPI.banUser.mockResolvedValue({
        success: true
      });
      yield (0, _adminUsersService.performAdminUserAction)('user123', 'suspend');
      yield (0, _adminUsersService.performAdminUserAction)('user456', 'activate');
      yield (0, _adminUsersService.performAdminUserAction)('user789', 'ban');
      (0, _globals.expect)(mockAdminAPI.suspendUser).toHaveBeenCalledWith('user123', 'User suspended via mobile admin controls', undefined);
      (0, _globals.expect)(mockAdminAPI.activateUser).toHaveBeenCalledWith('user456', 'User reactivated via mobile admin controls');
      (0, _globals.expect)(mockAdminAPI.banUser).toHaveBeenCalledWith('user789', 'User banned via mobile admin controls');
    }));
    (0, _globals.it)('should handle API errors and log appropriately', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Action failed');
      mockAdminAPI.suspendUser.mockRejectedValue(error);
      yield (0, _globals.expect)((0, _adminUsersService.performAdminUserAction)('user123', 'suspend')).rejects.toThrow('Action failed');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Admin user action failed', {
        action: 'suspend',
        userId: 'user123',
        error: error
      });
    }));
    (0, _globals.it)('should handle non-Error exceptions', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.banUser.mockRejectedValue('String error');
      yield (0, _globals.expect)((0, _adminUsersService.performAdminUserAction)('user123', 'ban')).rejects.toThrow('Failed to ban user');
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Admin user action failed', {
        action: 'ban',
        userId: 'user123',
        error: _globals.expect.any(Error)
      });
    }));
    (0, _globals.it)('should invalidate cache on successful actions', (0, _asyncToGenerator2.default)(function* () {
      var cache = global.cache;
      cache.set('test-key', {
        timestamp: Date.now(),
        data: {}
      });
      mockAdminAPI.activateUser.mockResolvedValue({
        success: true
      });
      yield (0, _adminUsersService.performAdminUserAction)('user123', 'activate');
      (0, _globals.expect)(cache.size).toBe(0);
    }));
    (0, _globals.it)('should not invalidate cache on failed actions', (0, _asyncToGenerator2.default)(function* () {
      var cache = global.cache;
      cache.set('test-key', {
        timestamp: Date.now(),
        data: {}
      });
      mockAdminAPI.suspendUser.mockRejectedValue(new Error('Failed'));
      yield (0, _globals.expect)((0, _adminUsersService.performAdminUserAction)('user123', 'suspend')).rejects.toThrow();
      (0, _globals.expect)(cache.size).toBe(1);
    }));
  });
  (0, _globals.describe)('Service Interface', function () {
    (0, _globals.it)('should export service methods correctly', function () {
      (0, _globals.expect)(_adminUsersService.adminUsersService.fetchAdminUsers).toBe(_adminUsersService.fetchAdminUsers);
      (0, _globals.expect)(_adminUsersService.adminUsersService.performAdminUserAction).toBe(_adminUsersService.performAdminUserAction);
      (0, _globals.expect)(_adminUsersService.adminUsersService.invalidate).toBe(_adminUsersService.invalidateAdminUsersCache);
    });
    (0, _globals.it)('should handle concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.getUsers.mockResolvedValue({
        success: true,
        data: {
          users: [],
          pagination: {
            page: 1,
            limit: 20,
            total: 0,
            pages: 0
          }
        }
      });
      var promises = [(0, _adminUsersService.fetchAdminUsers)({
        page: 1
      }), (0, _adminUsersService.fetchAdminUsers)({
        page: 2
      }), (0, _adminUsersService.fetchAdminUsers)({
        page: 3
      })];
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toHaveLength(3);
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenCalledTimes(3);
    }));
    (0, _globals.it)('should handle cache race conditions', (0, _asyncToGenerator2.default)(function* () {
      var cache = global.cache;
      var cacheKey = '{"page":"1"}';
      var callCount = 0;
      var originalSet = cache.set.bind(cache);
      cache.set = _globals.jest.fn(function (key, value) {
        if (callCount++ === 0) {
          return originalSet(key, value);
        } else {
          return originalSet(key, value);
        }
      });
      mockAdminAPI.getUsers.mockResolvedValue({
        success: true,
        data: {
          users: [{
            _id: 'user1',
            firstName: 'Test'
          }],
          pagination: {
            page: 1,
            limit: 20,
            total: 1,
            pages: 1
          }
        }
      });
      var results = yield Promise.all([(0, _adminUsersService.fetchAdminUsers)({
        page: 1
      }), (0, _adminUsersService.fetchAdminUsers)({
        page: 1
      })]);
      (0, _globals.expect)(results).toHaveLength(2);
      (0, _globals.expect)(results[0]).toEqual(results[1]);
      cache.set = originalSet;
    }));
  });
  (0, _globals.describe)('Edge Cases and Error Handling', function () {
    (0, _globals.it)('should handle very large result sets', (0, _asyncToGenerator2.default)(function* () {
      var largeUsers = Array.from({
        length: 1000
      }, function (_, i) {
        return {
          _id: `user${i}`,
          firstName: `User${i}`,
          lastName: 'Test',
          email: `user${i}@example.com`,
          role: 'user',
          status: 'active',
          isVerified: true,
          createdAt: '2024-01-01T00:00:00Z',
          pets: Array.from({
            length: Math.floor(Math.random() * 5)
          }, function () {
            return {
              id: 'pet'
            };
          }),
          matchesCount: Math.floor(Math.random() * 100),
          messagesCount: Math.floor(Math.random() * 500)
        };
      });
      mockAdminAPI.getUsers.mockResolvedValue({
        success: true,
        data: {
          users: largeUsers,
          pagination: {
            page: 1,
            limit: 1000,
            total: 1000,
            pages: 1
          }
        }
      });
      var result = yield (0, _adminUsersService.fetchAdminUsers)({
        page: 1,
        limit: 1000
      });
      (0, _globals.expect)(result.users).toHaveLength(1000);
      (0, _globals.expect)(result.pagination.total).toBe(1000);
    }));
    (0, _globals.it)('should handle empty user arrays', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.getUsers.mockResolvedValue({
        success: true,
        data: {
          users: [],
          pagination: {
            page: 1,
            limit: 20,
            total: 0,
            pages: 0
          }
        }
      });
      var result = yield (0, _adminUsersService.fetchAdminUsers)();
      (0, _globals.expect)(result.users).toEqual([]);
      (0, _globals.expect)(result.pagination.total).toBe(0);
    }));
    (0, _globals.it)('should handle very long search queries', (0, _asyncToGenerator2.default)(function* () {
      var longSearch = 'A'.repeat(1000);
      mockAdminAPI.getUsers.mockResolvedValue({
        success: true,
        data: {
          users: [],
          pagination: {
            page: 1,
            limit: 20,
            total: 0,
            pages: 0
          }
        }
      });
      yield (0, _adminUsersService.fetchAdminUsers)({
        search: longSearch
      });
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenCalledWith({
        search: longSearch
      });
    }));
    (0, _globals.it)('should handle special characters in queries', (0, _asyncToGenerator2.default)(function* () {
      var specialQueries = [{
        search: 'José María ñoño'
      }, {
        search: 'café & naïve résumé 🚀'
      }, {
        role: 'admin@#$%^&*()'
      }, {
        search: 'user@example.com'
      }];
      mockAdminAPI.getUsers.mockResolvedValue({
        success: true,
        data: {
          users: [],
          pagination: {
            page: 1,
            limit: 20,
            total: 0,
            pages: 0
          }
        }
      });
      for (var query of specialQueries) {
        yield (0, _adminUsersService.fetchAdminUsers)(query);
      }
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenCalledTimes(4);
    }));
    (0, _globals.it)('should handle extreme pagination values', (0, _asyncToGenerator2.default)(function* () {
      mockAdminAPI.getUsers.mockResolvedValue({
        success: true,
        data: {
          users: [],
          pagination: {
            page: 1,
            limit: 20,
            total: 0,
            pages: 0
          }
        }
      });
      var extremeQueries = [{
        page: 999999,
        limit: 10000
      }, {
        page: 0,
        limit: 0
      }, {
        page: -1,
        limit: -10
      }];
      for (var query of extremeQueries) {
        yield (0, _adminUsersService.fetchAdminUsers)(query);
      }
      (0, _globals.expect)(mockAdminAPI.getUsers).toHaveBeenCalledTimes(3);
    }));
    (0, _globals.it)('should handle malformed API responses', (0, _asyncToGenerator2.default)(function* () {
      var malformedResponses = [{
        success: true,
        data: null
      }, {
        success: true,
        data: {
          users: null,
          pagination: null
        }
      }, {
        success: true,
        data: {
          users: 'not an array',
          pagination: {}
        }
      }, {
        success: false
      }, null, undefined, 'string response'];
      for (var response of malformedResponses) {
        mockAdminAPI.getUsers.mockResolvedValueOnce(response);
        var result = yield (0, _adminUsersService.fetchAdminUsers)();
        (0, _globals.expect)(result).toHaveProperty('users');
        (0, _globals.expect)(result).toHaveProperty('pagination');
        (0, _globals.expect)(Array.isArray(result.users)).toBe(true);
      }
    }));
    (0, _globals.it)('should handle cache corruption', function () {
      var cache = global.cache;
      cache.set('corrupted1', null);
      cache.set('corrupted2', undefined);
      cache.set('corrupted3', {
        timestamp: 'invalid'
      });
      cache.set('corrupted4', {
        data: null
      });
      (0, _globals.expect)(function () {
        var isCacheValid = global.isCacheValid;
        (0, _globals.expect)(isCacheValid(null)).toBe(false);
        (0, _globals.expect)(isCacheValid(undefined)).toBe(false);
        (0, _globals.expect)(isCacheValid({
          timestamp: 'invalid'
        })).toBe(false);
        (0, _globals.expect)(isCacheValid({
          data: null
        })).toBe(false);
      }).not.toThrow();
    });
    (0, _globals.it)('should handle memory pressure with large caches', function () {
      var cache = global.cache;
      for (var i = 0; i < 1000; i++) {
        cache.set(`key${i}`, {
          timestamp: Date.now(),
          data: {
            users: Array.from({
              length: 100
            }, function () {
              return {
                id: `user${Math.random()}`,
                firstName: 'Test',
                lastName: 'User',
                email: 'test@example.com',
                role: 'user',
                status: 'active',
                verified: true,
                createdAt: '2024-01-01T00:00:00Z',
                petsCount: 1,
                matchesCount: 5,
                messagesCount: 10
              };
            }),
            pagination: {
              page: 1,
              limit: 100,
              total: 100,
              pages: 1
            }
          }
        });
      }
      (0, _globals.expect)(cache.size).toBe(1000);
      (0, _adminUsersService.invalidateAdminUsersCache)();
      (0, _globals.expect)(cache.size).toBe(0);
    });
    (0, _globals.it)('should handle rapid cache invalidations', function () {
      var cache = global.cache;
      for (var i = 0; i < 100; i++) {
        cache.set(`temp${i}`, {
          timestamp: Date.now(),
          data: {}
        });
        (0, _adminUsersService.invalidateAdminUsersCache)();
        (0, _globals.expect)(cache.size).toBe(0);
      }
    });
    (0, _globals.it)('should handle concurrent cache operations', (0, _asyncToGenerator2.default)(function* () {
      var cacheOperations = Array.from({
        length: 50
      }, function () {
        var _ref23 = (0, _asyncToGenerator2.default)(function* (_, i) {
          var cache = global.cache;
          cache.set(`concurrent${i}`, {
            timestamp: Date.now(),
            data: {
              users: [],
              pagination: {}
            }
          });
          yield new Promise(function (resolve) {
            return setTimeout(resolve, 1);
          });
          (0, _adminUsersService.invalidateAdminUsersCache)();
        });
        return function (_x, _x2) {
          return _ref23.apply(this, arguments);
        };
      }());
      yield Promise.all(cacheOperations);
      (0, _globals.expect)(global.cache.size).toBe(0);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,