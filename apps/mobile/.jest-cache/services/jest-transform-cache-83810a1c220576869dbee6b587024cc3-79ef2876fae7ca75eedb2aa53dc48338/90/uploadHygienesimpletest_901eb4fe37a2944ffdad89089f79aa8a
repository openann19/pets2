e2215677b25c41914ec58896aeab3fc8
"use strict";

_getJestObj().mock('expo-image-picker');
_getJestObj().mock('expo-image-manipulator');
_getJestObj().mock('expo-file-system');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _uploadHygiene = require("../uploadHygiene");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockImagePicker = ImagePicker;
var mockImageManipulator = ImageManipulator;
var mockFileSystem = FileSystem;
(0, _globals.describe)('UploadHygiene Service - Simplified Tests', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockImageManipulator.manipulateAsync.mockResolvedValue({
      uri: 'processed-image.jpg',
      width: 1024,
      height: 768,
      base64: undefined
    });
    mockFileSystem.getInfoAsync.mockResolvedValue({
      exists: true,
      isDirectory: false,
      size: 512000,
      uri: 'test-image.jpg',
      modificationTime: Date.now()
    });
    mockImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: 'granted',
      granted: true,
      canAskAgain: true
    });
    mockImagePicker.requestCameraPermissionsAsync.mockResolvedValue({
      status: 'granted',
      granted: true,
      canAskAgain: true
    });
    mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: 'picked-image.jpg',
        width: 2048,
        height: 1536,
        type: 'image',
        fileName: 'test.jpg',
        fileSize: 1024000,
        exif: {}
      }]
    });
    mockImagePicker.launchCameraAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: 'captured-image.jpg',
        width: 2048,
        height: 1536,
        type: 'image',
        fileName: 'capture.jpg',
        fileSize: 1024000,
        exif: {}
      }]
    });
  });
  (0, _globals.describe)('processImageForUpload', function () {
    (0, _globals.it)('should process image successfully', (0, _asyncToGenerator2.default)(function* () {
      var result = yield (0, _uploadHygiene.processImageForUpload)('test.jpg');
      (0, _globals.expect)(result).toBeDefined();
      (0, _globals.expect)(result.uri).toBe('processed-image.jpg');
      (0, _globals.expect)(result.width).toBe(1024);
      (0, _globals.expect)(result.height).toBe(768);
      (0, _globals.expect)(result.fileSize).toBe(512000);
      (0, _globals.expect)(result.mimeType).toBe('image/jpeg');
    }));
    (0, _globals.it)('should reject invalid file types', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.getInfoAsync.mockResolvedValue({
        exists: true,
        isDirectory: false,
        size: 1000,
        uri: 'test.txt',
        modificationTime: Date.now()
      });
      yield (0, _globals.expect)((0, _uploadHygiene.processImageForUpload)('test.txt')).rejects.toThrow('Invalid file type');
    }));
  });
  (0, _globals.describe)('pickAndProcessImage', function () {
    (0, _globals.it)('should pick and process image successfully', (0, _asyncToGenerator2.default)(function* () {
      var result = yield (0, _uploadHygiene.pickAndProcessImage)();
      (0, _globals.expect)(mockImagePicker.requestMediaLibraryPermissionsAsync).toHaveBeenCalled();
      (0, _globals.expect)(mockImagePicker.launchImageLibraryAsync).toHaveBeenCalled();
      (0, _globals.expect)(result).toBeDefined();
      (0, _globals.expect)(result.uri).toBe('processed-image.jpg');
    }));
    (0, _globals.it)('should handle permission denial', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: 'denied',
        granted: false,
        canAskAgain: true
      });
      yield (0, _globals.expect)((0, _uploadHygiene.pickAndProcessImage)()).rejects.toThrow('Camera roll permissions not granted');
    }));
    (0, _globals.it)('should handle user cancellation', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: true,
        assets: null
      });
      var result = yield (0, _uploadHygiene.pickAndProcessImage)();
      (0, _globals.expect)(result).toBeNull();
    }));
  });
  (0, _globals.describe)('captureAndProcessImage', function () {
    (0, _globals.it)('should capture and process image successfully', (0, _asyncToGenerator2.default)(function* () {
      var result = yield (0, _uploadHygiene.captureAndProcessImage)();
      (0, _globals.expect)(mockImagePicker.requestCameraPermissionsAsync).toHaveBeenCalled();
      (0, _globals.expect)(mockImagePicker.launchCameraAsync).toHaveBeenCalled();
      (0, _globals.expect)(result).toBeDefined();
      (0, _globals.expect)(result.uri).toBe('processed-image.jpg');
    }));
    (0, _globals.it)('should handle camera permission denial', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.requestCameraPermissionsAsync.mockResolvedValue({
        status: 'denied',
        granted: false,
        canAskAgain: false
      });
      yield (0, _globals.expect)((0, _uploadHygiene.captureAndProcessImage)()).rejects.toThrow('Camera permissions not granted');
    }));
  });
  (0, _globals.describe)('checkUploadQuota', function () {
    (0, _globals.it)('should return quota information', (0, _asyncToGenerator2.default)(function* () {
      var result = yield (0, _uploadHygiene.checkUploadQuota)('user123');
      (0, _globals.expect)(result).toBeDefined();
      (0, _globals.expect)(result.allowed).toBe(true);
      (0, _globals.expect)(result.remaining).toBe(10);
      (0, _globals.expect)(result.limit).toBe(10);
      (0, _globals.expect)(result.resetAt).toBeInstanceOf(Date);
    }));
  });
  (0, _globals.describe)('uploadWithRetry', function () {
    (0, _globals.it)('should succeed on first attempt', (0, _asyncToGenerator2.default)(function* () {
      var uploadFn = _globals.jest.fn().mockResolvedValue('success');
      var result = yield (0, _uploadHygiene.uploadWithRetry)(uploadFn);
      (0, _globals.expect)(result).toBe('success');
      (0, _globals.expect)(uploadFn).toHaveBeenCalledTimes(1);
    }));
    (0, _globals.it)('should retry on failure and succeed', (0, _asyncToGenerator2.default)(function* () {
      var uploadFn = _globals.jest.fn();
      uploadFn.mockRejectedValueOnce(new Error('Attempt 1 failed')).mockResolvedValueOnce('success');
      var result = yield (0, _uploadHygiene.uploadWithRetry)(uploadFn, 3, 100);
      (0, _globals.expect)(result).toBe('success');
      (0, _globals.expect)(uploadFn).toHaveBeenCalledTimes(2);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,