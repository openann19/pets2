0a5f300f6e4bbea5bc63cd4cdf1b4e33
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnimationConfig = exports.uiLogger = exports.storageLogger = exports.notificationLogger = exports.navigationLogger = exports.mediaLogger = exports.logger = exports.authLogger = exports.apiLogger = exports.apiClient = exports.animationConfig = exports.analyticsLogger = exports.UnifiedAPIClient = exports.SETTINGS = exports.HAPTIC_SETTINGS = exports.HAPTICS = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var logger = exports.logger = {
  debug: jest.fn(),
  info: jest.fn(),
  warn: jest.fn(),
  error: jest.fn(),
  security: jest.fn(),
  performance: jest.fn(),
  log: jest.fn(),
  trace: jest.fn(),
  setContext: jest.fn(),
  clearContext: jest.fn(),
  setUser: jest.fn(),
  clearUser: jest.fn(),
  addBreadcrumb: jest.fn(),
  flush: jest.fn().mockResolvedValue(undefined),
  getLogStats: jest.fn().mockReturnValue({
    total: 0,
    byLevel: {}
  }),
  exportLogs: jest.fn().mockResolvedValue([]),
  clearLogs: jest.fn()
};
var apiLogger = exports.apiLogger = logger;
var authLogger = exports.authLogger = logger;
var uiLogger = exports.uiLogger = logger;
var navigationLogger = exports.navigationLogger = logger;
var storageLogger = exports.storageLogger = logger;
var analyticsLogger = exports.analyticsLogger = logger;
var notificationLogger = exports.notificationLogger = logger;
var mediaLogger = exports.mediaLogger = logger;
var HAPTICS = exports.HAPTICS = {
  LIGHT: 'light',
  MEDIUM: 'medium',
  HEAVY: 'heavy'
};
var HAPTIC_SETTINGS = exports.HAPTIC_SETTINGS = {
  ENABLED: true,
  INTENSITY: 'medium'
};
var SETTINGS = exports.SETTINGS = {
  HAPTICS: HAPTIC_SETTINGS
};
var animationConfig = exports.animationConfig = {
  spring: {
    damping: 20,
    stiffness: 300
  },
  timing: {
    duration: 300
  }
};
var useAnimationConfig = exports.useAnimationConfig = function useAnimationConfig() {
  return animationConfig;
};
var ok = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (data) {
    var _ref2;
    return {
      success: true,
      data: (_ref2 = data) != null ? _ref2 : {}
    };
  });
  return function ok(_x) {
    return _ref.apply(this, arguments);
  };
}();
var apiClient = exports.apiClient = {
  get: jest.fn(ok),
  post: jest.fn(ok),
  put: jest.fn(ok),
  delete: jest.fn(ok)
};
var UnifiedAPIClient = exports.UnifiedAPIClient = jest.fn().mockImplementation(function () {
  return {
    setNetworkOnline: jest.fn(),
    setAuthToken: jest.fn(),
    clearAuthToken: jest.fn(),
    destroy: jest.fn(),
    getCircuitBreakerMetrics: jest.fn(function () {
      return {
        failures: 0
      };
    }),
    getQueueStats: jest.fn(function () {
      return {
        size: 0
      };
    })
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,