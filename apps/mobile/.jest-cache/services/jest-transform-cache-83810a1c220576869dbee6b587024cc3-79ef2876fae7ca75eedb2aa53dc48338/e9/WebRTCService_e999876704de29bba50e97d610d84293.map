{"version":3,"names":["_events","require","_reactNativeIncallManager","_interopRequireDefault","_reactNativeWebrtc","_logger","_useAuthStore","_nativeWebrtc","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_callSuper","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","Boolean","prototype","valueOf","call","WebRTCService","_EventEmitter","_this","_classCallCheck2","peerConnection","localStream","remoteStream","socket","currentCallId","callStartTime","rtcConfiguration","iceServers","servers","urls","turnUrl","process","env","EXPO_PUBLIC_TURN_SERVER_URL","turnUsername","EXPO_PUBLIC_TURN_USERNAME","turnCredential","EXPO_PUBLIC_TURN_CREDENTIAL","turnServer","username","credential","logger","info","url","warn","iceCandidatePoolSize","callState","isActive","isConnected","isIncoming","isMuted","isVideoEnabled","callDuration","setupInCallManager","_inherits2","_createClass2","key","value","InCallManager","setKeepScreenOn","setForceSpeakerphoneOn","error","Error","String","initialize","setupSocketListeners","_this2","on","callData","handleIncomingCall","data","handleCallAnswered","endCall","handleOffer","handleAnswer","handleIceCandidate","_startCall","_asyncToGenerator2","matchId","callType","_this3","_ref","_user$_id","_user$firstName","constraints","audio","video","width","min","ideal","height","frameRate","mediaDevices","getUserMedia","RTCPeerConnection","setupPeerConnectionListeners","getTracks","track","addTrack","callId","Date","now","Math","random","toString","substring","_useAuthStore$getStat","useAuthStore","getState","user","callerId","_id","id","callerName","firstName","timestamp","emit","start","media","startCall","_x","_x2","_answerCall","_this4","undefined","startCallTimer","answerCall","rejectCall","close","stop","toggleMute","audioTracks","getAudioTracks","audioTrack","enabled","toggleVideo","videoTracks","getVideoTracks","videoTrack","switchCamera","hasNativeCameraSwitch","_switchCamera","toggleSpeaker","_this5","onicecandidate","event","candidate","ontrack","streams","stream","onconnectionstatechange","_this5$peerConnection","state","connectionState","extendedPeerConnection","oniceconnectionstatechange","_this5$peerConnection2","iceState","iceConnectionState","debug","onicegatheringstatechange","_this5$peerConnection3","gatheringState","iceGatheringState","ringback","_handleCallAnswered","accepted","offer","createOffer","setLocalDescription","_x3","_handleOffer","_data$offer$sdp","RTCSessionDescriptionImpl","sdp","type","setRemoteDescription","answer","createAnswer","_x4","_handleAnswer","_data$answer$sdp","_x5","_handleIceCandidate","addIceCandidate","RTCIceCandidateImpl","_x6","_this6","timer","setInterval","floor","clearInterval","getCallState","isCallActive","EventEmitter","webRTCServiceInstance","_default","exports"],"sources":["WebRTCService.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-require-imports\nimport { EventEmitter } from \"events\";\n\nimport InCallManager from \"react-native-incall-manager\";\nimport type { MediaStream } from \"react-native-webrtc\";\nimport {\n  RTCPeerConnection,\n  RTCIceCandidate as RTCIceCandidateImpl,\n  RTCSessionDescription as RTCSessionDescriptionImpl,\n  mediaDevices,\n} from \"react-native-webrtc\";\n\nimport { logger } from \"./logger\";\nimport { useAuthStore } from \"../stores/useAuthStore\";\nimport { hasNativeCameraSwitch } from \"../types/native-webrtc\";\n\n// Extended RTCIceServer with React Native WebRTC compatibility\ninterface ExtendedRTCIceServer {\n  urls: string | string[];\n  username?: string;\n  credential?: string;\n}\n\n// Media constraints type for React Native WebRTC\ninterface MediaStreamConstraints {\n  video?: boolean | {\n    width?: { min?: number; ideal?: number; max?: number };\n    height?: { min?: number; ideal?: number; max?: number };\n    frameRate?: { min?: number; ideal?: number; max?: number };\n  };\n  audio?: boolean;\n}\n\n// Type-safe video track with extended methods for React Native WebRTC\ninterface MediaStreamTrackWithSwitchCamera {\n  _switchCamera?: () => void;\n  enabled: boolean;\n  id: string;\n  kind: string;\n  label: string;\n  muted: boolean;\n  readyState: MediaStreamTrackState;\n}\n\nexport interface CallData {\n  callId: string;\n  matchId: string;\n  callerId: string;\n  callerName: string;\n  callerAvatar?: string;\n  callType: \"voice\" | \"video\";\n  timestamp: number;\n}\n\nexport interface CallState {\n  isActive: boolean;\n  isConnected: boolean;\n  isIncoming: boolean;\n  callData?: CallData;\n  localStream?: MediaStream;\n  remoteStream?: MediaStream;\n  isMuted: boolean;\n  isVideoEnabled: boolean;\n  callDuration: number;\n}\n\nexport interface WebRTCSignalingData {\n  callId: string;\n  offer?: RTCSessionDescriptionInit;\n  answer?: RTCSessionDescriptionInit;\n  candidate?: RTCIceCandidateInit;\n}\n\nexport interface CallAnsweredData {\n  callId: string;\n  accepted: boolean;\n}\n\nclass WebRTCService extends EventEmitter {\n  private peerConnection: RTCPeerConnection | null = null;\n  private localStream: MediaStream | null = null;\n  private remoteStream: MediaStream | null = null;\n  private socket: {\n    emit: (event: string, data: unknown) => void;\n    on: (event: string, handler: (data: unknown) => void) => void;\n  } | null = null;\n  private currentCallId: string | null = null;\n  private callStartTime = 0;\n\n  // STUN/TURN configuration with environment support\n  private readonly rtcConfiguration = {\n    iceServers: (() => {\n      const servers: ExtendedRTCIceServer[] = [\n        { urls: \"stun:stun.l.google.com:19302\" },\n        { urls: \"stun:stun1.l.google.com:19302\" },\n      ];\n\n      // Add TURN servers from environment if configured\n      const turnUrl = process.env.EXPO_PUBLIC_TURN_SERVER_URL;\n      const turnUsername = process.env.EXPO_PUBLIC_TURN_USERNAME;\n      const turnCredential = process.env.EXPO_PUBLIC_TURN_CREDENTIAL;\n\n      if (turnUrl && turnUsername && turnCredential) {\n        const turnServer: ExtendedRTCIceServer = {\n          urls: turnUrl,\n          username: turnUsername,\n          credential: turnCredential,\n        };\n        servers.push(turnServer);\n        logger.info(\"TURN server configured\", { url: turnUrl });\n      } else {\n        logger.warn(\n          \"No TURN server configured. Calls may fail across NAT/firewalls.\",\n        );\n      }\n\n      return servers;\n    })(),\n    iceCandidatePoolSize: 10,\n  };\n\n  private callState: CallState = {\n    isActive: false,\n    isConnected: false,\n    isIncoming: false,\n    isMuted: false,\n    isVideoEnabled: true,\n    callDuration: 0,\n  };\n  constructor() {\n    super();\n    this.setupInCallManager();\n  }\n\n  private setupInCallManager() {\n    // const audioEnabled = true; // Default assumption\n    try {\n      if (typeof InCallManager.setKeepScreenOn === \"function\") {\n        InCallManager.setKeepScreenOn(true);\n        InCallManager.setForceSpeakerphoneOn(false);\n      }\n    } catch (error) {\n      logger.warn(\"InCallManager not available\", {\n        error: error instanceof Error ? error : new Error(String(error)),\n      });\n    }\n  }\n\n  // Initialize WebRTC service with socket connection\n  initialize(socket: {\n    emit: (event: string, data: unknown) => void;\n    on: (event: string, handler: (data: unknown) => void) => void;\n  }) {\n    this.socket = socket;\n    this.setupSocketListeners();\n  }\n\n  private setupSocketListeners() {\n    if (this.socket === null) return;\n\n    // Incoming call\n    this.socket.on(\"incoming-call\", (callData: unknown) => {\n      this.handleIncomingCall(callData as CallData);\n    });\n\n    // Call answered\n    this.socket.on(\"call-answered\", (data: unknown) => {\n      void this.handleCallAnswered(data as CallAnsweredData);\n    });\n\n    // Call rejected/ended\n    this.socket.on(\"call-ended\", () => {\n      this.endCall();\n    });\n\n    // WebRTC signaling\n    this.socket.on(\"webrtc-offer\", (data: unknown) => {\n      void this.handleOffer(data as WebRTCSignalingData);\n    });\n\n    this.socket.on(\"webrtc-answer\", (data: unknown) => {\n      void this.handleAnswer(data as WebRTCSignalingData);\n    });\n\n    this.socket.on(\"webrtc-ice-candidate\", (data: unknown) => {\n      void this.handleIceCandidate(data as WebRTCSignalingData);\n    });\n  }\n\n  // Start a call\n  async startCall(\n    matchId: string,\n    callType: \"voice\" | \"video\",\n  ): Promise<boolean> {\n    try {\n      // Get user media\n      const constraints = {\n        audio: true,\n        video:\n          callType === \"video\"\n            ? {\n                width: { min: 640, ideal: 1280 },\n                height: { min: 480, ideal: 720 },\n                frameRate: { min: 16, ideal: 30 },\n              }\n            : false,\n      };\n\n      this.localStream = await mediaDevices.getUserMedia(constraints as MediaStreamConstraints);\n\n      // Create peer connection\n      this.peerConnection = new RTCPeerConnection(this.rtcConfiguration);\n      this.setupPeerConnectionListeners();\n\n      // Add local stream to peer connection\n      this.localStream.getTracks().forEach((track) => {\n        if (this.peerConnection !== null && this.localStream !== null) {\n          this.peerConnection.addTrack(track, this.localStream);\n        }\n      });\n\n      // Create and send call offer\n      const callId = `call_${String(Date.now())}_${Math.random().toString(36).substring(2, 11)}`;\n      this.currentCallId = callId;\n\n      // Get user data from auth store\n      const { user } = useAuthStore.getState();\n      const callerId = user?._id ?? user?.id ?? \"unknown\";\n      const callerName = user?.firstName ?? \"Unknown User\";\n\n      const callData: CallData = {\n        callId,\n        matchId,\n        callerId,\n        callerName,\n        callType,\n        timestamp: Date.now(),\n      };\n\n      // Update call state\n      this.callState = {\n        ...this.callState,\n        isActive: true,\n        isIncoming: false,\n        callData,\n        localStream: this.localStream,\n      };\n\n      // Emit call initiation\n      if (this.socket !== null) {\n        this.socket.emit(\"initiate-call\", callData);\n      }\n      this.emit(\"callStateChanged\", this.callState);\n\n      if (typeof InCallManager.start === \"function\") {\n        InCallManager.start({\n          media: callType === \"video\" ? \"video\" : \"audio\",\n        });\n      }\n\n      return true;\n    } catch (error) {\n      logger.error(\"Error starting call\", {\n        error: error instanceof Error ? error : new Error(String(error)),\n      });\n      this.emit(\"callError\", error);\n      return false;\n    }\n  }\n\n  // Answer incoming call\n  async answerCall(): Promise<boolean> {\n    try {\n      if (this.callState.callData === undefined) return false;\n\n      const constraints = {\n        audio: true,\n        video:\n          this.callState.callData.callType === \"video\"\n            ? {\n                width: { min: 640, ideal: 1280 },\n                height: { min: 480, ideal: 720 },\n                frameRate: { min: 16, ideal: 30 },\n              }\n            : false,\n      };\n\n      this.localStream = await mediaDevices.getUserMedia(constraints as MediaStreamConstraints);\n\n      // Create peer connection\n      this.peerConnection = new RTCPeerConnection(this.rtcConfiguration);\n      this.setupPeerConnectionListeners();\n\n      // Add local stream\n      this.localStream.getTracks().forEach((track) => {\n        if (this.peerConnection !== null && this.localStream !== null) {\n          this.peerConnection.addTrack(track, this.localStream);\n        }\n      });\n\n      // Update state\n      this.callState = {\n        ...this.callState,\n        isActive: true,\n        isIncoming: false,\n        localStream: this.localStream,\n      };\n\n      // Notify caller that call was answered\n      if (this.callState.callData !== undefined) {\n        if (this.socket !== null) {\n          this.socket.emit(\"answer-call\", {\n            callId: this.currentCallId,\n            matchId: this.callState.callData.matchId,\n          });\n        }\n      }\n\n      this.emit(\"callStateChanged\", this.callState);\n      this.startCallTimer();\n\n      if (this.callState.callData !== undefined) {\n        if (typeof InCallManager.start === \"function\") {\n          InCallManager.start({\n            media:\n              this.callState.callData.callType === \"video\" ? \"video\" : \"audio\",\n          });\n        }\n      }\n\n      return true;\n    } catch (error) {\n      logger.error(\"Error answering call\", {\n        error: error instanceof Error ? error : new Error(String(error)),\n      });\n      this.emit(\"callError\", error);\n      return false;\n    }\n  }\n\n  // Reject incoming call\n  rejectCall() {\n    if (this.callState.callData !== undefined) {\n      if (this.socket !== null) {\n        this.socket.emit(\"reject-call\", {\n          callId: this.callState.callData.callId,\n          matchId: this.callState.callData.matchId,\n        });\n      }\n    }\n    this.endCall();\n  }\n\n  // End active call\n  endCall() {\n    // Clean up peer connection\n    if (this.peerConnection !== null) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n\n    // Stop local stream\n    try {\n      if (this.localStream !== null) {\n        this.localStream.getTracks().forEach((track) => {\n          track.stop();\n        });\n        this.localStream = null;\n      }\n    } catch (error) {\n      logger.error(\"Error ending local stream\", {\n        error: error instanceof Error ? error : new Error(String(error)),\n      });\n    }\n\n    // Stop remote stream\n    try {\n      if (this.remoteStream !== null) {\n        this.remoteStream.getTracks().forEach((track) => {\n          track.stop();\n        });\n        this.remoteStream = null;\n      }\n    } catch (error) {\n      logger.error(\"Error ending remote stream\", {\n        error: error instanceof Error ? error : new Error(String(error)),\n      });\n    }\n\n    // Reset call state\n    this.callState = {\n      isActive: false,\n      isConnected: false,\n      isIncoming: false,\n      isMuted: false,\n      isVideoEnabled: true,\n      callDuration: 0,\n    };\n\n    // Notify socket\n    if (this.currentCallId !== null) {\n      if (this.socket !== null) {\n        this.socket.emit(\"end-call\", { callId: this.currentCallId });\n      }\n    }\n\n    this.currentCallId = null;\n    this.callStartTime = 0;\n\n    // Stop InCallManager\n    if (typeof InCallManager.stop === \"function\") {\n      InCallManager.stop();\n    }\n\n    this.emit(\"callStateChanged\", this.callState);\n  }\n\n  // Toggle mute\n  toggleMute() {\n    if (this.localStream !== null) {\n      const audioTracks = this.localStream.getAudioTracks();\n      if (audioTracks.length > 0) {\n        const audioTrack = audioTracks[0];\n        if (audioTrack !== undefined) {\n          audioTrack.enabled = !audioTrack.enabled;\n          this.callState.isMuted = !audioTrack.enabled;\n          this.emit(\"callStateChanged\", this.callState);\n        }\n      }\n    }\n  }\n\n  // Toggle video\n  toggleVideo() {\n    if (this.localStream !== null) {\n      const videoTracks = this.localStream.getVideoTracks();\n      if (videoTracks.length > 0) {\n        const videoTrack = videoTracks[0];\n        if (videoTrack !== undefined) {\n          videoTrack.enabled = !videoTrack.enabled;\n          this.callState.isVideoEnabled = videoTrack.enabled;\n          this.emit(\"callStateChanged\", this.callState);\n        }\n      }\n    }\n  }\n\n  // Switch camera (front/back)\n  switchCamera() {\n    if (this.localStream !== null) {\n      const videoTracks = this.localStream.getVideoTracks();\n      if (videoTracks.length > 0) {\n        const videoTrack = videoTracks[0];\n        if (videoTrack && hasNativeCameraSwitch(videoTrack)) {\n          videoTrack._switchCamera();\n        }\n      }\n    }\n  }\n\n  // Toggle speaker\n  toggleSpeaker() {\n    // State managed by InCallManager internally\n    if (typeof InCallManager.setForceSpeakerphoneOn === \"function\") {\n      InCallManager.setForceSpeakerphoneOn(true);\n    }\n  }\n\n  // Private methods for WebRTC signaling  \n  private setupPeerConnectionListeners() {\n    if (this.peerConnection === null) return;\n\n    // Type assertion for react-native-webrtc compatibility\n    // The library supports event handlers but types don't match exactly\n    const peerConnection = this.peerConnection as RTCPeerConnection & {\n      onicecandidate: ((event: RTCPeerConnectionIceEvent | null) => void) | null;\n      ontrack: ((event: RTCTrackEvent) => void) | null;\n      onconnectionstatechange: (() => void) | null;\n    };\n\n    // ICE candidate handler - typed properly\n    peerConnection.onicecandidate = (event: RTCPeerConnectionIceEvent | null) => {\n      if (event !== null && event.candidate !== null && event.candidate !== undefined) {\n        if (this.socket !== null) {\n          this.socket.emit(\"webrtc-ice-candidate\", {\n            callId: this.currentCallId,\n            candidate: event.candidate,\n          });\n        }\n      }\n    };\n\n    // Track handler - typed properly  \n    peerConnection.ontrack = (event: RTCTrackEvent) => {\n      if (event.streams && event.streams.length > 0) {\n        // Cast to React Native WebRTC MediaStream type\n        // Using double cast to bridge browser WebRTC and React Native WebRTC types\n        const stream = event.streams[0] as unknown as MediaStream;\n        if (stream !== undefined && stream !== null) {\n          this.remoteStream = stream;\n          this.callState.remoteStream = stream;\n          this.emit(\"callStateChanged\", this.callState);\n        }\n      }\n    };\n\n    // Connection state change handler - typed properly\n    peerConnection.onconnectionstatechange = () => {\n      const state = this.peerConnection?.connectionState;\n      if (state === \"connected\") {\n        this.callState.isConnected = true;\n        this.startCallTimer();\n        this.emit(\"callStateChanged\", this.callState);\n      } else if (state === \"disconnected\" || state === \"failed\") {\n        this.endCall();\n      }\n    };\n\n    // Additional event listeners for comprehensive state tracking\n    // Using type assertion for optional handlers\n    const extendedPeerConnection = this.peerConnection as RTCPeerConnection & {\n      oniceconnectionstatechange?: (() => void) | null;\n      onicegatheringstatechange?: (() => void) | null;\n    };\n\n    extendedPeerConnection.oniceconnectionstatechange = () => {\n      const iceState = this.peerConnection?.iceConnectionState;\n      logger.debug(\"ICE connection state changed\", { state: iceState });\n      \n      if (iceState === \"failed\") {\n        logger.error(\"ICE connection failed\");\n        this.emit(\"callError\", new Error(\"ICE connection failed\"));\n      }\n    };\n\n    extendedPeerConnection.onicegatheringstatechange = () => {\n      const gatheringState = this.peerConnection?.iceGatheringState;\n      logger.debug(\"ICE gathering state changed\", { state: gatheringState });\n    };\n  }\n\n  private handleIncomingCall(callData: CallData) {\n    this.currentCallId = callData.callId;\n    this.callState = {\n      ...this.callState,\n      isActive: true,\n      isIncoming: true,\n      callData,\n    };\n\n    // InCallManager.displayIncomingCall not available in current version\n    // Using start for incoming call notification\n    if (typeof InCallManager.start === \"function\") {\n      InCallManager.start({\n        media: callData.callType === \"video\" ? \"video\" : \"audio\",\n        ringback: \"_DTMF_\",\n      });\n    }\n    this.emit(\"callStateChanged\", this.callState);\n  }\n\n  private async handleCallAnswered(data: CallAnsweredData) {\n    // Create offer when call is answered\n    if (this.peerConnection !== null && data.accepted) {\n      const offer = await this.peerConnection.createOffer();\n      await this.peerConnection.setLocalDescription(offer);\n\n      if (this.socket !== null) {\n        this.socket.emit(\"webrtc-offer\", {\n          callId: this.currentCallId,\n          offer: offer,\n        });\n      }\n    }\n  }\n\n  private async handleOffer(data: WebRTCSignalingData) {\n    if (this.peerConnection !== null) {\n      if (data.offer !== undefined) {\n        const offer = new RTCSessionDescriptionImpl({\n          sdp: data.offer.sdp ?? '',\n          type: data.offer.type as RTCSdpType,\n        });\n        await this.peerConnection.setRemoteDescription(offer);\n      }\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(answer);\n\n      if (this.socket !== null) {\n        this.socket.emit(\"webrtc-answer\", {\n          callId: this.currentCallId,\n          answer: answer,\n        });\n      }\n    }\n  }\n\n  private async handleAnswer(data: WebRTCSignalingData) {\n    if (this.peerConnection !== null) {\n      if (data.answer !== undefined) {\n        const answer = new RTCSessionDescriptionImpl({\n          sdp: data.answer.sdp ?? '',\n          type: data.answer.type as RTCSdpType,\n        });\n        await this.peerConnection.setRemoteDescription(answer);\n      }\n    }\n  }\n\n  private async handleIceCandidate(data: WebRTCSignalingData) {\n    if (this.peerConnection !== null && data.candidate !== undefined) {\n      await this.peerConnection.addIceCandidate(\n        new RTCIceCandidateImpl(data.candidate),\n      );\n    }\n  }\n\n  private startCallTimer() {\n    this.callStartTime = Date.now();\n    const timer: ReturnType<typeof setInterval> = setInterval(() => {\n      if (this.callState.isActive && this.callState.isConnected) {\n        this.callState.callDuration = Math.floor(\n          (Date.now() - this.callStartTime) / 1000,\n        );\n        this.emit(\"callStateChanged\", this.callState);\n      } else {\n        clearInterval(timer);\n      }\n    }, 1000);\n  }\n\n  // Getters\n  getCallState(): CallState {\n    return { ...this.callState };\n  }\n\n  isCallActive(): boolean {\n    return this.callState.isActive;\n  }\n}\n\n// Export singleton instance\nconst webRTCServiceInstance = new WebRTCService();\nexport default webRTCServiceInstance;\n"],"mappings":"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","ignoreList":[]}