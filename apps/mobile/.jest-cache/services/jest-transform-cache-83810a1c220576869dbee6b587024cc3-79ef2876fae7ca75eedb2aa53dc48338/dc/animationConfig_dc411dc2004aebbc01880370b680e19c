8ab3584d6f9282c79474daaa59e20e60
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.animationConfig = void 0;
exports.useAnimationConfig = useAnimationConfig;
var animations_1 = require("../types/animations");
var env_1 = require("../utils/env");
var AnimationConfigService = function () {
  function AnimationConfigService() {
    (0, _classCallCheck2.default)(this, AnimationConfigService);
    this.config = _objectSpread({}, animations_1.defaultAnimationConfig);
    this.listeners = new Set();
    void this.loadConfig();
  }
  return (0, _createClass2.default)(AnimationConfigService, [{
    key: "getConfig",
    value: function getConfig() {
      return _objectSpread({}, this.config);
    }
  }, {
    key: "updateConfig",
    value: function updateConfig(updates) {
      this.config = _objectSpread(_objectSpread({}, this.config), updates);
      void this.saveConfig();
      this.notifyListeners();
    }
  }, {
    key: "resetToDefaults",
    value: function resetToDefaults() {
      this.config = _objectSpread({}, animations_1.defaultAnimationConfig);
      void this.saveConfig();
      this.notifyListeners();
    }
  }, {
    key: "subscribe",
    value: function subscribe(listener) {
      var _this = this;
      this.listeners.add(listener);
      return function () {
        _this.listeners.delete(listener);
      };
    }
  }, {
    key: "areAnimationsEnabled",
    value: function areAnimationsEnabled() {
      return this.config.enabled;
    }
  }, {
    key: "isFeatureEnabled",
    value: function isFeatureEnabled(feature) {
      return this.config.enabled && Boolean(this.config[feature]);
    }
  }, {
    key: "getButtonConfig",
    value: function getButtonConfig() {
      return this.config.buttons;
    }
  }, {
    key: "getCardConfig",
    value: function getCardConfig() {
      return this.config.cards;
    }
  }, {
    key: "getListConfig",
    value: function getListConfig() {
      return this.config.lists;
    }
  }, {
    key: "getCelebrationConfig",
    value: function getCelebrationConfig() {
      return this.config.celebrations;
    }
  }, {
    key: "getMobileConfig",
    value: function getMobileConfig() {
      return this.config.mobile;
    }
  }, {
    key: "getWebConfig",
    value: function getWebConfig() {
      return this.config.web;
    }
  }, {
    key: "loadConfig",
    value: function () {
      var _loadConfig = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield Promise.resolve();
          var stored = (0, env_1.getLocalStorageItem)('animation-config');
          if (stored != null && stored !== '') {
            var parsed = JSON.parse(stored);
            this.config = _objectSpread(_objectSpread({}, animations_1.defaultAnimationConfig), parsed);
          }
        } catch (error) {
          console.warn('Failed to load animation config:', error);
          this.config = _objectSpread({}, animations_1.defaultAnimationConfig);
        }
      });
      function loadConfig() {
        return _loadConfig.apply(this, arguments);
      }
      return loadConfig;
    }()
  }, {
    key: "saveConfig",
    value: function () {
      var _saveConfig = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield Promise.resolve();
          (0, env_1.setLocalStorageItem)('animation-config', JSON.stringify(this.config));
        } catch (error) {
          console.warn('Failed to save animation config:', error);
        }
      });
      function saveConfig() {
        return _saveConfig.apply(this, arguments);
      }
      return saveConfig;
    }()
  }, {
    key: "notifyListeners",
    value: function notifyListeners() {
      var _this2 = this;
      this.listeners.forEach(function (listener) {
        try {
          listener(_this2.getConfig());
        } catch (error) {
          console.warn('Error notifying animation config listener:', error);
        }
      });
    }
  }]);
}();
exports.animationConfig = new AnimationConfigService();
function useAnimationConfig() {
  return exports.animationConfig;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,