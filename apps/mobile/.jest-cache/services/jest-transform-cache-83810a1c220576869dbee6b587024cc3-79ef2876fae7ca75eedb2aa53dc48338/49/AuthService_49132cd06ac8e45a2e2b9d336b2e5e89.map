{"version":3,"names":["SecureStore","_interopRequireWildcard","require","LocalAuthentication","Keychain","_core","_api","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","cov_1wlr82ylgc","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","b","_coverageSchema","coverage","actualCoverage","_callSuper","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","_objectSpread","arguments","length","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","AuthService","_classCallCheck2","sessionCheckInterval","useKeychain","startSessionMonitoring","_createClass2","key","value","_this","clearInterval","setInterval","checkSessionValidity","_checkSessionValidity","_asyncToGenerator2","isAuthenticated","stopSessionMonitoring","sessionStart","getSessionStartTime","lastActivity","getLastActivityTime","now","Date","SESSION_TIMEOUT","logger","info","logout","ACTIVITY_TIMEOUT","updateLastActivityTime","error","_getSessionStartTime","startTime","secureGetItemAsync","SESSION_START_KEY","parseInt","_getLastActivityTime","LAST_ACTIVITY_KEY","_updateLastActivityTime","secureSetItemAsync","toString","_recordUserActivity","recordUserActivity","_rotateTokens","refreshToken","getRefreshToken","response","api","request","method","body","JSON","stringify","storeAuthData","rotateTokens","_isBiometricAvailable","hasHardware","hasHardwareAsync","isEnrolled","isEnrolledAsync","supportedTypes","supportedAuthenticationTypesAsync","available","types","isBiometricAvailable","_enableBiometricAuthentication","_ref","AuthError","biometricAuth","authenticateAsync","promptMessage","fallbackLabel","cancelLabel","disableDeviceFallback","success","BIOMETRIC_ENABLED_KEY","currentUser","getCurrentUser","biometricCredentials","email","biometricToken","Math","random","BIOMETRIC_CREDENTIALS_KEY","enableBiometricAuthentication","_disableBiometricAuthentication","secureDeleteItemAsync","disableBiometricAuthentication","_isBiometricEnabled","enabled","isBiometricEnabled","_loginWithBiometrics","isEnabled","_ref2","storedCredentials","credentials","parse","userId","user","id","loginWithBiometrics","_login","login","_x","_register","data","password","confirmPassword","registerData","register","_x2","_logout","warn","clearAuthData","_refreshToken","_forgotPassword","forgotPassword","_x3","_resetPassword","resetData","token","resetPassword","_x4","_getCurrentUser","userData","USER_KEY","_getAccessToken","ACCESS_TOKEN_KEY","getAccessToken","_isAuthenticated","_updateUser","updatedUser","updateUser","_x5","_secureSetItemAsync","includes","result","setGenericPassword","service","accessControl","ACCESS_CONTROL","BIOMETRY_ANY_OR_DEVICE_PASSCODE","accessible","ACCESSIBLE","WHEN_UNLOCKED_THIS_DEVICE_ONLY","Error","setItemAsync","keychainAccessible","AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY","keychainError","_x6","_x7","_secureGetItemAsync","refKey","storageLocation","getItemAsync","getGenericPassword","_x8","_secureDeleteItemAsync","resetGenericPassword","deleteItemAsync","_x9","_storeAuthData","Promise","all","accessToken","REFRESH_TOKEN_KEY","_x0","_clearAuthData","_getRefreshToken","SERVICE_NAME","exports","_Error","message","originalError","_this2","_inherits2","_wrapNativeSuper2","authService","_default"],"sources":["AuthService.ts"],"sourcesContent":["/**\n * Authentication Service for PawfectMatch Mobile App\n * Handles user authentication, token management, and secure storage\n * Uses react-native-keychain for production-grade security\n */\nimport * as SecureStore from \"expo-secure-store\";\nimport * as LocalAuthentication from \"expo-local-authentication\";\nimport * as Keychain from \"react-native-keychain\";\nimport { logger } from \"@pawfectmatch/core\";\nimport { api } from \"./api\";\n\n// Types for authentication\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  user: {\n    id: string;\n    email: string;\n    name: string;\n    profileComplete: boolean;\n    subscriptionStatus: string;\n    createdAt: string;\n  };\n  accessToken: string;\n  refreshToken: string;\n  expiresIn: number;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  name: string;\n  confirmPassword: string;\n}\n\nexport interface ResetPasswordData {\n  token: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  profileComplete: boolean;\n  subscriptionStatus: string;\n  createdAt: string;\n}\n\nexport interface BiometricCredentials {\n  email: string;\n  biometricToken: string;\n}\n\nclass AuthService {\n  private static readonly ACCESS_TOKEN_KEY = \"auth_access_token\";\n  private static readonly REFRESH_TOKEN_KEY = \"auth_refresh_token\";\n  private static readonly USER_KEY = \"auth_user\";\n  private static readonly BIOMETRIC_ENABLED_KEY = \"biometric_enabled\";\n  private static readonly BIOMETRIC_CREDENTIALS_KEY = \"biometric_credentials\";\n  private static readonly SESSION_START_KEY = \"session_start_time\";\n  private static readonly LAST_ACTIVITY_KEY = \"last_activity_time\";\n  private static readonly SERVICE_NAME = \"com.pawfectmatch.mobile\";\n\n  // Session configuration\n  private static readonly SESSION_TIMEOUT = 24 * 60 * 60 * 1000; // 24 hours\n  private static readonly ACTIVITY_TIMEOUT = 30 * 60 * 1000; // 30 minutes of inactivity\n  private sessionCheckInterval: ReturnType<typeof setInterval> | null = null;\n  private useKeychain: boolean = true; // Use Keychain by default for production security\n\n  constructor() {\n    this.startSessionMonitoring();\n  }\n\n  // ===== Session Management =====\n\n  /**\n   * Start session monitoring for auto-logout\n   */\n  private startSessionMonitoring(): void {\n    // Clear any existing interval\n    if (this.sessionCheckInterval) {\n      clearInterval(this.sessionCheckInterval);\n    }\n\n    // Check session every minute\n    this.sessionCheckInterval = setInterval(() => {\n      void this.checkSessionValidity();\n    }, 60000); // Check every minute\n  }\n\n  /**\n   * Check if current session is still valid\n   */\n  private async checkSessionValidity(): Promise<void> {\n    try {\n      const isAuthenticated = await this.isAuthenticated();\n      if (!isAuthenticated) {\n        this.stopSessionMonitoring();\n        return;\n      }\n\n      const sessionStart = await this.getSessionStartTime();\n      const lastActivity = await this.getLastActivityTime();\n      const now = Date.now();\n\n      // Check session timeout (24 hours)\n      if (sessionStart && now - sessionStart > AuthService.SESSION_TIMEOUT) {\n        logger.info(\"Session expired due to timeout\");\n        await this.logout();\n        return;\n      }\n\n      // Check activity timeout (30 minutes)\n      if (lastActivity && now - lastActivity > AuthService.ACTIVITY_TIMEOUT) {\n        logger.info(\"Session expired due to inactivity\");\n        await this.logout();\n        return;\n      }\n\n      // Update last activity time\n      await this.updateLastActivityTime();\n    } catch (error) {\n      logger.error(\"Session validity check failed\", { error });\n    }\n  }\n\n  /**\n   * Stop session monitoring\n   */\n  private stopSessionMonitoring(): void {\n    if (this.sessionCheckInterval) {\n      clearInterval(this.sessionCheckInterval);\n      this.sessionCheckInterval = null;\n    }\n  }\n\n  /**\n   * Get session start time\n   */\n  private async getSessionStartTime(): Promise<number | null> {\n    try {\n      const startTime = await this.secureGetItemAsync(\n        AuthService.SESSION_START_KEY,\n      );\n      return startTime ? parseInt(startTime) : null;\n    } catch (error) {\n      logger.error(\"Failed to get session start time\", { error });\n      return null;\n    }\n  }\n\n  /**\n   * Get last activity time\n   */\n  private async getLastActivityTime(): Promise<number | null> {\n    try {\n      const lastActivity = await this.secureGetItemAsync(\n        AuthService.LAST_ACTIVITY_KEY,\n      );\n      return lastActivity ? parseInt(lastActivity) : null;\n    } catch (error) {\n      logger.error(\"Failed to get last activity time\", { error });\n      return null;\n    }\n  }\n\n  /**\n   * Update last activity time\n   */\n  private async updateLastActivityTime(): Promise<void> {\n    try {\n      await this.secureSetItemAsync(\n        AuthService.LAST_ACTIVITY_KEY,\n        Date.now().toString(),\n      );\n    } catch (error) {\n      logger.error(\"Failed to update last activity time\", { error });\n    }\n  }\n\n  /**\n   * Record user activity to prevent auto-logout\n   */\n  async recordUserActivity(): Promise<void> {\n    await this.updateLastActivityTime();\n  }\n\n  /**\n   * Force refresh token rotation\n   */\n  async rotateTokens(): Promise<boolean> {\n    try {\n      const refreshToken = await this.getRefreshToken();\n      if (!refreshToken) {\n        return false;\n      }\n\n      // Call refresh endpoint to get new tokens\n      const response = await api.request<AuthResponse>(\"/auth/refresh-token\", {\n        method: \"POST\",\n        body: JSON.stringify({ refreshToken }),\n      });\n\n      // Store new tokens\n      await this.storeAuthData(response);\n\n      // Update session start time for new session\n      await this.secureSetItemAsync(\n        AuthService.SESSION_START_KEY,\n        Date.now().toString(),\n      );\n\n      logger.info(\"Tokens rotated successfully\");\n      return true;\n    } catch (error) {\n      logger.error(\"Token rotation failed\", { error });\n      // If rotation fails, logout user\n      await this.logout();\n      return false;\n    }\n  }\n\n  /**\n   * Check if biometric authentication is available on device\n   */\n  async isBiometricAvailable(): Promise<{\n    available: boolean;\n    types: LocalAuthentication.AuthenticationType[];\n  }> {\n    try {\n      const hasHardware = await LocalAuthentication.hasHardwareAsync();\n      const isEnrolled = await LocalAuthentication.isEnrolledAsync();\n      const supportedTypes =\n        await LocalAuthentication.supportedAuthenticationTypesAsync();\n\n      return {\n        available: hasHardware && isEnrolled,\n        types: supportedTypes,\n      };\n    } catch (error) {\n      logger.error(\"Failed to check biometric availability\", { error });\n      return { available: false, types: [] };\n    }\n  }\n\n  /**\n   * Enable biometric authentication for current user\n   */\n  async enableBiometricAuthentication(): Promise<boolean> {\n    try {\n      const { available } = await this.isBiometricAvailable();\n      if (!available) {\n        throw new AuthError(\n          \"Biometric authentication is not available on this device\",\n        );\n      }\n\n      // Authenticate user with biometrics to enable feature\n      const biometricAuth = await LocalAuthentication.authenticateAsync({\n        promptMessage: \"Authenticate to enable biometric login\",\n        fallbackLabel: \"Use PIN\",\n        cancelLabel: \"Cancel\",\n        disableDeviceFallback: false,\n      });\n\n      if (!biometricAuth.success) {\n        throw new AuthError(\"Biometric authentication failed\");\n      }\n\n      // Store biometric preference\n      await this.secureSetItemAsync(AuthService.BIOMETRIC_ENABLED_KEY, \"true\");\n\n      // Get current user credentials for biometric storage\n      const currentUser = await this.getCurrentUser();\n      if (currentUser) {\n        const biometricCredentials: BiometricCredentials = {\n          email: currentUser.email,\n          biometricToken: Date.now().toString() + Math.random().toString(36),\n        };\n\n        await this.secureSetItemAsync(\n          AuthService.BIOMETRIC_CREDENTIALS_KEY,\n          JSON.stringify(biometricCredentials),\n        );\n      }\n\n      logger.info(\"Biometric authentication enabled\");\n      return true;\n    } catch (error) {\n      logger.error(\"Failed to enable biometric authentication\", { error });\n      throw new AuthError(\"Failed to enable biometric authentication\", error);\n    }\n  }\n\n  /**\n   * Disable biometric authentication\n   */\n  async disableBiometricAuthentication(): Promise<void> {\n    try {\n      await this.secureDeleteItemAsync(AuthService.BIOMETRIC_ENABLED_KEY);\n      await this.secureDeleteItemAsync(AuthService.BIOMETRIC_CREDENTIALS_KEY);\n      logger.info(\"Biometric authentication disabled\");\n    } catch (error) {\n      logger.error(\"Failed to disable biometric authentication\", { error });\n      throw new AuthError(\"Failed to disable biometric authentication\", error);\n    }\n  }\n\n  /**\n   * Check if biometric authentication is enabled\n   */\n  async isBiometricEnabled(): Promise<boolean> {\n    try {\n      const enabled = await this.secureGetItemAsync(\n        AuthService.BIOMETRIC_ENABLED_KEY,\n      );\n      return enabled === \"true\";\n    } catch (error) {\n      logger.error(\"Failed to check biometric status\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Login with biometrics (if enabled)\n   */\n  async loginWithBiometrics(): Promise<AuthResponse> {\n    try {\n      const isEnabled = await this.isBiometricEnabled();\n      if (!isEnabled) {\n        throw new AuthError(\"Biometric authentication is not enabled\");\n      }\n\n      const { available } = await this.isBiometricAvailable();\n      if (!available) {\n        throw new AuthError(\"Biometric authentication is not available\");\n      }\n\n      // Perform biometric authentication\n      const biometricAuth = await LocalAuthentication.authenticateAsync({\n        promptMessage: \"Authenticate to login\",\n        fallbackLabel: \"Use PIN\",\n        cancelLabel: \"Cancel\",\n        disableDeviceFallback: false,\n      });\n\n      if (!biometricAuth.success) {\n        throw new AuthError(\"Biometric authentication failed\");\n      }\n\n      // Get stored biometric credentials\n      const storedCredentials = await this.secureGetItemAsync(\n        AuthService.BIOMETRIC_CREDENTIALS_KEY,\n      );\n      if (!storedCredentials) {\n        throw new AuthError(\"No biometric credentials found\");\n      }\n\n      const credentials = JSON.parse(storedCredentials) as BiometricCredentials;\n\n      // Perform login with stored email and a special biometric flag\n      const response = await api.request<AuthResponse>(\n        \"/auth/biometric-login\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            email: credentials.email,\n            biometricToken: credentials.biometricToken,\n          }),\n        },\n      );\n\n      // Store authentication data securely\n      await this.storeAuthData(response);\n\n      logger.info(\"User logged in with biometrics\", {\n        userId: response.user.id,\n      });\n      return response;\n    } catch (error) {\n      logger.error(\"Biometric login failed\", { error });\n      throw new AuthError(\n        \"Biometric login failed. Please use email and password.\",\n        error,\n      );\n    }\n  }\n\n  /**\n   * Login user with email and password\n   */\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    try {\n      const response = await api.request<AuthResponse>(\"/auth/login\", {\n        method: \"POST\",\n        body: JSON.stringify(credentials),\n      });\n\n      // Store authentication data securely\n      await this.storeAuthData(response);\n\n      logger.info(\"User logged in successfully\", { userId: response.user.id });\n      return response;\n    } catch (error) {\n      logger.error(\"Login failed\", { error, email: credentials.email });\n      throw new AuthError(\n        \"Login failed. Please check your credentials and try again.\",\n        error,\n      );\n    }\n  }\n\n  /**\n   * Register new user account\n   */\n  async register(data: RegisterData): Promise<AuthResponse> {\n    try {\n      // Validate password confirmation\n      if (data.password !== data.confirmPassword) {\n        throw new AuthError(\"Passwords do not match\");\n      }\n\n      const registerData = {\n        email: data.email,\n        password: data.password,\n        name: data.name,\n      };\n      const response = await api.request<AuthResponse>(\"/auth/register\", {\n        method: \"POST\",\n        body: JSON.stringify(registerData),\n      });\n\n      // Store authentication data securely\n      await this.storeAuthData(response);\n\n      logger.info(\"User registered successfully\", { userId: response.user.id });\n      return response;\n    } catch (error) {\n      logger.error(\"Registration failed\", { error, email: data.email });\n      throw new AuthError(\"Registration failed. Please try again.\", error);\n    }\n  }\n\n  /**\n   * Logout user and clear stored data\n   */\n  async logout(): Promise<void> {\n    try {\n      const refreshToken = await this.getRefreshToken();\n      if (refreshToken) {\n        // Notify server about logout (optional)\n        try {\n          await api.request(\"/auth/logout\", {\n            method: \"POST\",\n            body: JSON.stringify({ refreshToken }),\n          });\n        } catch (error) {\n          // Ignore server logout errors\n          logger.warn(\"Server logout failed, continuing with local logout\", {\n            error,\n          });\n        }\n      }\n\n      // Clear all stored auth data\n      await this.clearAuthData();\n      logger.info(\"User logged out successfully\");\n    } catch (error) {\n      logger.error(\"Logout failed\", { error });\n      // Even if logout fails, clear local data\n      await this.clearAuthData();\n    }\n  }\n\n  /**\n   * Refresh access token using refresh token\n   */\n  async refreshToken(): Promise<AuthResponse | null> {\n    try {\n      const refreshToken = await this.getRefreshToken();\n      if (!refreshToken) {\n        return null;\n      }\n\n      const response = await api.request<AuthResponse>(\"/auth/refresh\", {\n        method: \"POST\",\n        body: JSON.stringify({ refreshToken }),\n      });\n\n      // Store new tokens\n      await this.storeAuthData(response);\n      return response;\n    } catch (error) {\n      logger.error(\"Token refresh failed\", { error });\n      // Clear invalid tokens\n      await this.clearAuthData();\n      return null;\n    }\n  }\n\n  /**\n   * Request password reset\n   */\n  async forgotPassword(\n    email: string,\n  ): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await api.request<{ success: boolean; message: string }>(\n        \"/auth/forgot-password\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({ email }),\n        },\n      );\n\n      logger.info(\"Password reset requested\", { email });\n      return response;\n    } catch (error) {\n      logger.error(\"Forgot password failed\", { error, email });\n      throw new AuthError(\n        \"Failed to send password reset email. Please try again.\",\n        error,\n      );\n    }\n  }\n\n  /**\n   * Reset password with token\n   */\n  async resetPassword(\n    data: ResetPasswordData,\n  ): Promise<{ success: boolean; message: string }> {\n    try {\n      if (data.password !== data.confirmPassword) {\n        throw new AuthError(\"Passwords do not match\");\n      }\n\n      const resetData = {\n        token: data.token,\n        password: data.password,\n      };\n      const response = await api.request<{ success: boolean; message: string }>(\n        \"/auth/reset-password\",\n        {\n          method: \"POST\",\n          body: JSON.stringify(resetData),\n        },\n      );\n\n      logger.info(\"Password reset successful\");\n      return response;\n    } catch (error) {\n      logger.error(\"Password reset failed\", { error });\n      throw new AuthError(\"Failed to reset password. Please try again.\", error);\n    }\n  }\n\n  /**\n   * Get current authenticated user\n   */\n  async getCurrentUser(): Promise<User | null> {\n    try {\n      const userData = await this.secureGetItemAsync(AuthService.USER_KEY);\n      return userData ? (JSON.parse(userData) as User) : null;\n    } catch (error) {\n      logger.error(\"Failed to get current user\", { error });\n      return null;\n    }\n  }\n\n  /**\n   * Get stored access token\n   */\n  async getAccessToken(): Promise<string | null> {\n    try {\n      return await this.secureGetItemAsync(AuthService.ACCESS_TOKEN_KEY);\n    } catch (error) {\n      logger.error(\"Failed to get access token\", { error });\n      return null;\n    }\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  async isAuthenticated(): Promise<boolean> {\n    try {\n      const token = await this.getAccessToken();\n      const user = await this.getCurrentUser();\n      return !!(token && user);\n    } catch (error) {\n      logger.error(\"Authentication check failed\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Update user profile data\n   */\n  async updateUser(userData: Partial<User>): Promise<void> {\n    try {\n      const currentUser = await this.getCurrentUser();\n      if (!currentUser) {\n        throw new AuthError(\"No authenticated user found\");\n      }\n\n      const updatedUser = { ...currentUser, ...userData };\n      await this.secureSetItemAsync(\n        AuthService.USER_KEY,\n        JSON.stringify(updatedUser),\n      );\n      logger.info(\"User data updated\", { userId: updatedUser.id });\n    } catch (error) {\n      logger.error(\"Failed to update user data\", { error });\n      throw new AuthError(\"Failed to update user data\", error);\n    }\n  }\n\n  // Secure storage methods - Keychain for sensitive data, SecureStore for session data\n  // Fallback to SecureStore if Keychain fails for robustness\n  private async secureSetItemAsync(key: string, value: string): Promise<void> {\n    try {\n      // Use Keychain for sensitive authentication data\n      if (key.includes('token') || key.includes('user')) {\n        try {\n          const result = await Keychain.setGenericPassword('pawfectmatch', value, {\n            service: 'pawfectmatch-auth',\n            accessControl: Keychain.ACCESS_CONTROL.BIOMETRY_ANY_OR_DEVICE_PASSCODE,\n            accessible: Keychain.ACCESSIBLE.WHEN_UNLOCKED_THIS_DEVICE_ONLY,\n          });\n          if (result === false) {\n            throw new Error('Failed to store in Keychain');\n          }\n          // Store a reference key in SecureStore for retrieval\n          await SecureStore.setItemAsync(`${key}_ref`, 'keychain', {\n            keychainAccessible: SecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY,\n          });\n          // Successfully stored in Keychain\n          return;\n        } catch (keychainError) {\n          // Fallback to SecureStore if Keychain fails\n          logger.warn(`Keychain failed, falling back to SecureStore for ${key}`, { error: keychainError });\n          await SecureStore.setItemAsync(key, value, {\n            keychainAccessible: SecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY,\n          });\n          // Store a reference indicating fallback to SecureStore\n          await SecureStore.setItemAsync(`${key}_ref`, 'securestore', {\n            keychainAccessible: SecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY,\n          });\n        }\n      } else {\n        // Use SecureStore for less sensitive session data\n        await SecureStore.setItemAsync(key, value, {\n          keychainAccessible: SecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY,\n        });\n      }\n    } catch (error) {\n      logger.error(`Failed to securely store ${key}`, { error });\n      throw new AuthError(`Failed to securely store authentication data`, error);\n    }\n  }\n\n  private async secureGetItemAsync(key: string): Promise<string | null> {\n    try {\n      // Check if data is stored in Keychain or SecureStore (fallback)\n      const refKey = `${key}_ref`;\n      const storageLocation = await SecureStore.getItemAsync(refKey);\n\n      if (storageLocation === 'keychain') {\n        try {\n          const credentials = await Keychain.getGenericPassword({\n            service: 'pawfectmatch-auth',\n          });\n          if (credentials) {\n            // Return the password (which contains our stored value)\n            return credentials.password;\n          }\n          return null;\n        } catch (keychainError) {\n          // If Keychain retrieval fails, try SecureStore fallback\n          logger.warn(`Keychain retrieval failed, trying SecureStore fallback for ${key}`, { error: keychainError });\n          return await SecureStore.getItemAsync(key);\n        }\n      } else if (storageLocation === 'securestore') {\n        // Data was stored in SecureStore due to Keychain failure\n        return await SecureStore.getItemAsync(key);\n      } else {\n        // No reference found, try SecureStore directly (for non-sensitive keys)\n        return await SecureStore.getItemAsync(key);\n      }\n    } catch (error) {\n      logger.error(`Failed to securely retrieve ${key}`, { error });\n      return null;\n    }\n  }\n\n  private async secureDeleteItemAsync(key: string): Promise<void> {\n    try {\n      // Check if data is stored in Keychain or SecureStore (fallback)\n      const refKey = `${key}_ref`;\n      const storageLocation = await SecureStore.getItemAsync(refKey);\n\n      if (storageLocation === 'keychain') {\n        try {\n          // Reset Keychain credentials\n          await Keychain.resetGenericPassword({\n            service: 'pawfectmatch-auth',\n          });\n        } catch (keychainError) {\n          logger.warn(`Keychain deletion failed, continuing with cleanup`, { error: keychainError });\n        }\n        // Remove the reference\n        await SecureStore.deleteItemAsync(refKey);\n      } else if (storageLocation === 'securestore') {\n        // Data was stored in SecureStore\n        await SecureStore.deleteItemAsync(key);\n        // Remove the reference\n        await SecureStore.deleteItemAsync(refKey);\n      } else {\n        // Try to delete from SecureStore (for non-sensitive keys or cleanup)\n        try {\n          await SecureStore.deleteItemAsync(key);\n        } catch (error) {\n          // Silently ignore deletion errors\n        }\n      }\n    } catch (error) {\n      logger.error(`Failed to securely delete ${key}`, { error });\n      // Don't throw here as this is cleanup\n    }\n  }\n\n  // Private helper methods\n\n  private async storeAuthData(response: AuthResponse): Promise<void> {\n    try {\n      await Promise.all([\n        this.secureSetItemAsync(\n          AuthService.ACCESS_TOKEN_KEY,\n          response.accessToken,\n        ),\n        this.secureSetItemAsync(\n          AuthService.REFRESH_TOKEN_KEY,\n          response.refreshToken,\n        ),\n        this.secureSetItemAsync(\n          AuthService.USER_KEY,\n          JSON.stringify(response.user),\n        ),\n        this.secureSetItemAsync(\n          AuthService.SESSION_START_KEY,\n          Date.now().toString(),\n        ),\n        this.secureSetItemAsync(\n          AuthService.LAST_ACTIVITY_KEY,\n          Date.now().toString(),\n        ),\n      ]);\n\n      // Start session monitoring\n      this.startSessionMonitoring();\n    } catch (error) {\n      logger.error(\"Failed to store auth data\", { error });\n      throw new AuthError(\"Failed to save authentication data\", error);\n    }\n  }\n\n  private async clearAuthData(): Promise<void> {\n    try {\n      await Promise.all([\n        this.secureDeleteItemAsync(AuthService.ACCESS_TOKEN_KEY),\n        this.secureDeleteItemAsync(AuthService.REFRESH_TOKEN_KEY),\n        this.secureDeleteItemAsync(AuthService.USER_KEY),\n        this.secureDeleteItemAsync(AuthService.SESSION_START_KEY),\n        this.secureDeleteItemAsync(AuthService.LAST_ACTIVITY_KEY),\n      ]);\n\n      // Stop session monitoring\n      this.stopSessionMonitoring();\n    } catch (error) {\n      logger.error(\"Failed to clear auth data\", { error });\n      // Don't throw here as this is cleanup\n    }\n  }\n\n  private async getRefreshToken(): Promise<string | null> {\n    try {\n      return await this.secureGetItemAsync(AuthService.REFRESH_TOKEN_KEY);\n    } catch (error) {\n      logger.error(\"Failed to get refresh token\", { error });\n      return null;\n    }\n  }\n}\n\n// Custom error class for authentication errors\nexport class AuthError extends Error {\n  constructor(\n    message: string,\n    public originalError?: unknown,\n  ) {\n    super(message);\n    this.name = \"AuthError\";\n  }\n}\n\n// Export singleton instance\nexport const authService = new AuthService();\nexport default authService;\n"],"mappings":"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","ignoreList":[]}