62002c8402629ab060b6581e7ff3ed7d
"use strict";

_getJestObj().mock("../api", function () {
  return {
    api: {
      get: jest.fn(),
      post: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _MatchingService = require("../MatchingService");
var _api = require("../api");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApi = _api.api;
describe('MatchingService', function () {
  var matchingService;
  beforeEach(function () {
    matchingService = new _MatchingService.MatchingService();
    jest.clearAllMocks();
  });
  describe('getRecommendations', function () {
    it('should get recommendations without filters', (0, _asyncToGenerator2.default)(function* () {
      var mockRecommendations = [{
        pet: {
          id: 'pet1',
          name: 'Buddy',
          species: 'Dog',
          breed: 'Golden Retriever',
          age: 2,
          size: 'large',
          personalityTags: ['friendly', 'energetic'],
          intent: 'friendship',
          photos: ['photo1.jpg'],
          ownerId: 'user1'
        },
        compatibilityScore: 85,
        reasons: ['Similar energy levels', 'Compatible personalities'],
        distance: 5.2
      }];
      mockApi.get.mockResolvedValue({
        data: mockRecommendations
      });
      var result = yield matchingService.getRecommendations();
      expect(mockApi.get).toHaveBeenCalledWith('/matching/recommendations');
      expect(result).toEqual(mockRecommendations);
    }));
    it('should get recommendations with filters', (0, _asyncToGenerator2.default)(function* () {
      var filters = {
        species: 'Dog',
        minAge: 1,
        maxAge: 5,
        size: 'medium',
        intent: 'friendship',
        distance: 10
      };
      var mockRecommendations = [{
        pet: {
          id: 'pet2',
          name: 'Max',
          species: 'Dog',
          breed: 'Labrador',
          age: 3,
          size: 'medium',
          personalityTags: ['playful', 'loyal'],
          intent: 'friendship',
          photos: ['photo2.jpg'],
          ownerId: 'user2'
        },
        compatibilityScore: 92,
        reasons: ['Perfect match!', 'Shared interests'],
        distance: 3.1
      }];
      mockApi.get.mockResolvedValue({
        data: mockRecommendations
      });
      var result = yield matchingService.getRecommendations(filters);
      expect(mockApi.get).toHaveBeenCalledWith('/matching/recommendations', {
        params: filters
      });
      expect(result).toEqual(mockRecommendations);
    }));
    it('should handle empty recommendations', (0, _asyncToGenerator2.default)(function* () {
      mockApi.get.mockResolvedValue({
        data: []
      });
      var result = yield matchingService.getRecommendations();
      expect(result).toEqual([]);
    }));
    it('should handle API errors', (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error('Network error');
      mockApi.get.mockRejectedValue(mockError);
      yield expect(matchingService.getRecommendations()).rejects.toThrow('Network error');
    }));
  });
  describe('recordSwipe', function () {
    it('should record like action successfully', (0, _asyncToGenerator2.default)(function* () {
      var swipeAction = {
        petId: 'pet123',
        action: 'like',
        timestamp: Date.now()
      };
      var mockResponse = {
        success: true,
        match: {
          id: 'match123',
          pet1Id: 'currentPet',
          pet2Id: 'pet123',
          compatibilityScore: 88,
          createdAt: new Date().toISOString()
        }
      };
      mockApi.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield matchingService.recordSwipe(swipeAction);
      expect(mockApi.post).toHaveBeenCalledWith('/matching/swipe', {
        petId: 'pet123',
        action: 'like',
        timestamp: swipeAction.timestamp
      });
      expect(result).toEqual(mockResponse);
    }));
    it('should record pass action successfully', (0, _asyncToGenerator2.default)(function* () {
      var swipeAction = {
        petId: 'pet456',
        action: 'pass',
        timestamp: Date.now()
      };
      var mockResponse = {
        success: true,
        match: null
      };
      mockApi.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield matchingService.recordSwipe(swipeAction);
      expect(mockApi.post).toHaveBeenCalledWith('/matching/swipe', {
        petId: 'pet456',
        action: 'pass',
        timestamp: swipeAction.timestamp
      });
      expect(result).toEqual(mockResponse);
    }));
    it('should record superlike action successfully', (0, _asyncToGenerator2.default)(function* () {
      var swipeAction = {
        petId: 'pet789',
        action: 'superlike',
        timestamp: Date.now()
      };
      var mockResponse = {
        success: true,
        match: {
          id: 'match456',
          pet1Id: 'currentPet',
          pet2Id: 'pet789',
          compatibilityScore: 95,
          createdAt: new Date().toISOString()
        }
      };
      mockApi.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield matchingService.recordSwipe(swipeAction);
      expect(mockApi.post).toHaveBeenCalledWith('/matching/swipe', {
        petId: 'pet789',
        action: 'superlike',
        timestamp: swipeAction.timestamp
      });
      expect(result).toEqual(mockResponse);
    }));
    it('should handle swipe recording errors', (0, _asyncToGenerator2.default)(function* () {
      var swipeAction = {
        petId: 'pet999',
        action: 'like',
        timestamp: Date.now()
      };
      var mockError = new Error('Invalid pet ID');
      mockApi.post.mockRejectedValue(mockError);
      yield expect(matchingService.recordSwipe(swipeAction)).rejects.toThrow('Invalid pet ID');
    }));
  });
  describe('getMatches', function () {
    it('should get user matches successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockMatches = [{
        id: 'match1',
        pet1: {
          id: 'pet1',
          name: 'Buddy',
          photos: ['buddy1.jpg']
        },
        pet2: {
          id: 'pet2',
          name: 'Luna',
          photos: ['luna1.jpg']
        },
        compatibilityScore: 87,
        createdAt: '2024-01-15T10:30:00Z',
        lastMessage: {
          text: 'Hey! Want to meet up?',
          timestamp: '2024-01-15T11:00:00Z',
          senderId: 'user1'
        }
      }];
      mockApi.get.mockResolvedValue({
        data: mockMatches
      });
      var result = yield matchingService.getMatches();
      expect(mockApi.get).toHaveBeenCalledWith('/matching/matches');
      expect(result).toEqual(mockMatches);
    }));
    it('should handle empty matches list', (0, _asyncToGenerator2.default)(function* () {
      mockApi.get.mockResolvedValue({
        data: []
      });
      var result = yield matchingService.getMatches();
      expect(result).toEqual([]);
    }));
    it('should handle matches API errors', (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error('Failed to load matches');
      mockApi.get.mockRejectedValue(mockError);
      yield expect(matchingService.getMatches()).rejects.toThrow('Failed to load matches');
    }));
  });
  describe('getCompatibilityScore', function () {
    it('should calculate compatibility between two pets', (0, _asyncToGenerator2.default)(function* () {
      var pet1Id = 'pet1';
      var pet2Id = 'pet2';
      var mockCompatibility = {
        score: 78,
        reasons: ['Similar energy levels', 'Compatible sizes', 'Shared personality traits'],
        breakdown: {
          personalityMatch: 80,
          sizeCompatibility: 85,
          ageDifference: 70,
          intentAlignment: 75
        }
      };
      mockApi.get.mockResolvedValue({
        data: mockCompatibility
      });
      var result = yield matchingService.getCompatibilityScore(pet1Id, pet2Id);
      expect(mockApi.get).toHaveBeenCalledWith(`/matching/compatibility/${pet1Id}/${pet2Id}`);
      expect(result).toEqual(mockCompatibility);
    }));
    it('should handle compatibility calculation errors', (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error('Pets not found');
      mockApi.get.mockRejectedValue(mockError);
      yield expect(matchingService.getCompatibilityScore('invalid1', 'invalid2')).rejects.toThrow('Pets not found');
    }));
  });
  describe('updateFilters', function () {
    it('should update user matching filters', (0, _asyncToGenerator2.default)(function* () {
      var filters = {
        species: 'Dog',
        minAge: 1,
        maxAge: 7,
        size: 'medium',
        intent: 'friendship',
        distance: 25,
        breed: 'Golden Retriever'
      };
      var mockResponse = {
        success: true,
        filters: _objectSpread(_objectSpread({}, filters), {}, {
          userId: 'currentUser'
        })
      };
      mockApi.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield matchingService.updateFilters(filters);
      expect(mockApi.post).toHaveBeenCalledWith('/matching/filters', filters);
      expect(result).toEqual(mockResponse);
    }));
    it('should handle filter update errors', (0, _asyncToGenerator2.default)(function* () {
      var filters = {
        species: 'Invalid'
      };
      var mockError = new Error('Invalid species filter');
      mockApi.post.mockRejectedValue(mockError);
      yield expect(matchingService.updateFilters(filters)).rejects.toThrow('Invalid species filter');
    }));
  });
  describe('getFilterOptions', function () {
    it('should get available filter options', (0, _asyncToGenerator2.default)(function* () {
      var mockOptions = {
        species: ['Dog', 'Cat', 'Bird', 'Rabbit'],
        sizes: ['small', 'medium', 'large'],
        intents: ['friendship', 'dating', 'breeding'],
        breeds: ['Golden Retriever', 'Labrador', 'Poodle'],
        maxDistance: 100
      };
      mockApi.get.mockResolvedValue({
        data: mockOptions
      });
      var result = yield matchingService.getFilterOptions();
      expect(mockApi.get).toHaveBeenCalledWith('/matching/filter-options');
      expect(result).toEqual(mockOptions);
    }));
    it('should handle filter options fetch errors', (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error('Service unavailable');
      mockApi.get.mockRejectedValue(mockError);
      yield expect(matchingService.getFilterOptions()).rejects.toThrow('Service unavailable');
    }));
  });
  describe('Integration scenarios', function () {
    it('should handle complete matching workflow', (0, _asyncToGenerator2.default)(function* () {
      var mockRecommendations = [{
        pet: {
          id: 'pet1',
          name: 'Buddy'
        },
        compatibilityScore: 85,
        reasons: ['Great match!']
      }];
      mockApi.get.mockResolvedValueOnce({
        data: mockRecommendations
      });
      var mockSwipeResult = {
        success: true,
        match: {
          id: 'match1',
          compatibilityScore: 85
        }
      };
      mockApi.post.mockResolvedValueOnce({
        data: mockSwipeResult
      });
      var recommendations = yield matchingService.getRecommendations();
      expect(recommendations).toHaveLength(1);
      var swipeResult = yield matchingService.recordSwipe({
        petId: 'pet1',
        action: 'like',
        timestamp: Date.now()
      });
      expect(swipeResult.success).toBe(true);
      expect(swipeResult.match).toBeDefined();
    }));
    it('should handle filter and recommendation workflow', (0, _asyncToGenerator2.default)(function* () {
      mockApi.post.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      var mockFilteredRecs = [{
        pet: {
          id: 'pet2',
          species: 'Dog',
          size: 'medium'
        },
        compatibilityScore: 90,
        reasons: ['Perfect size match']
      }];
      mockApi.get.mockResolvedValueOnce({
        data: mockFilteredRecs
      });
      var filters = {
        species: 'Dog',
        size: 'medium'
      };
      yield matchingService.updateFilters(filters);
      var recommendations = yield matchingService.getRecommendations(filters);
      expect(recommendations).toHaveLength(1);
      expect(recommendations[0].pet.species).toBe('Dog');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,