{"version":3,"names":["_reactNativeSslPinning","require","_logger","_excluded","_process$env$EXPO_PUB","_callSuper","t","o","e","_getPrototypeOf2","default","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","ownKeys","r","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","_objectSpread","arguments","length","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","BASE_URL","process","env","__DEV__","SSL_CERTIFICATES","algorithm","value","localhost","undefined","SecureAPIService","_classCallCheck2","authToken","_createClass2","key","setAuthToken","token","clearAuthToken","getSSLConfig","domain","certs","sslPinning","Error","_request","_asyncToGenerator2","endpoint","_fetchOptions$method","_lastError","_lastError$message","_lastError2","_lastError3","options","url","URL","hostname","_options$timeout","timeout","_options$retries","retries","_options$retryDelay","retryDelay","fetchOptions","_objectWithoutProperties2","headers","sslConfig","requestConfig","method","body","String","timeoutInterval","lastError","_loop","attempt","logger","debug","response","sslFetch","status","ok","statusText","data","json","v","error","warn","maxRetries","Promise","resolve","setTimeout","_ret","SecureAPIError","message","request","_x","_get","config","get","_x2","_x3","_post","JSON","stringify","post","_x4","_x5","_x6","_put","put","_x7","_x8","_x9","_delete2","delete","_x0","_x1","_validateCertificate","testConfig","validateCertificate","_x10","getSecurityMetrics","sslEnabled","certificatePinning","supportedDomains","getInstance","instance","exports","_Error","originalError","_this","name","_inherits2","_wrapNativeSuper2","secureAPI","_default"],"sources":["SecureAPIService.ts"],"sourcesContent":["/**\n * Secure API Service with SSL Pinning for PawfectMatch Mobile App\n * Provides certificate pinning and secure HTTP communication\n */\nimport { fetch as sslFetch } from \"react-native-ssl-pinning\";\nimport { logger } from \"../services/logger\";\nimport type { SSLFetch, SSLResponse, SSLPinningConfig } from \"../types/ssl-pinning\";\n\nconst BASE_URL =\n  process.env[\"EXPO_PUBLIC_API_URL\"] ??\n  (__DEV__ ? \"http://localhost:3001/api\" : \"https://api.pawfectmatch.com/api\");\n\n// Certificate fingerprints for SSL pinning\n// In production, these should be obtained from your server certificates\nconst SSL_CERTIFICATES: Record<\n  string,\n  Array<{ algorithm: string; value: string }> | undefined\n> = {\n  // Example certificate fingerprints (replace with your actual certificates)\n  \"api.pawfectmatch.com\": [\n    {\n      algorithm: \"sha256\",\n      value: \"PLACEHOLDER_CERTIFICATE_FINGERPRINT_SHA256\",\n    },\n    {\n      algorithm: \"sha1\",\n      value: \"PLACEHOLDER_CERTIFICATE_FINGERPRINT_SHA1\",\n    },\n  ],\n  // Development certificates\n  localhost: undefined,\n};\n\ninterface SSLConfig {\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n}\n\ninterface SSLRequestConfig {\n  method: string;\n  headers: Record<string, string>;\n  body?: string;\n  timeoutInterval: number;\n  sslPinning: {\n    certs: string | Array<{ algorithm: string; value: string }>;\n  };\n}\n\nclass SecureAPIService {\n  private static instance: SecureAPIService | null = null;\n  private authToken: string | null = null;\n\n  private constructor() {}\n\n  static getInstance(): SecureAPIService {\n    if (SecureAPIService.instance === null) {\n      SecureAPIService.instance = new SecureAPIService();\n    }\n    return SecureAPIService.instance;\n  }\n\n  /**\n   * Set authentication token\n   */\n  setAuthToken(token: string | null): void {\n    this.authToken = token;\n  }\n\n  /**\n   * Clear authentication token\n   */\n  clearAuthToken(): void {\n    this.authToken = null;\n  }\n\n  /**\n   * Get SSL configuration for a domain\n   */\n  private getSSLConfig(domain: string): {\n    sslPinning: { certs: string | Array<{ algorithm: string; value: string }> };\n  } {\n    const certs = SSL_CERTIFICATES[domain];\n    if (certs === undefined || certs.length === 0) {\n      // In development, allow untrusted certificates\n      if (__DEV__) {\n        return {\n          sslPinning: {\n            certs: \"public\",\n          },\n        };\n      }\n      throw new Error(`No SSL certificates configured for domain: ${domain}`);\n    }\n\n    return {\n      sslPinning: {\n        certs: certs,\n      },\n    };\n  }\n\n  /**\n   * Make a secure HTTP request with SSL pinning\n   */\n  async request<T = unknown>(\n    endpoint: string,\n    options: RequestInit & SSLConfig = {},\n  ): Promise<T> {\n    const url = `${BASE_URL}${endpoint}`;\n    const domain = new URL(url).hostname;\n\n    const {\n      timeout = 30000,\n      retries = 3,\n      retryDelay = 1000,\n      ...fetchOptions\n    } = options;\n\n    // Build headers\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      ...(fetchOptions.headers as Record<string, string> | undefined),\n    };\n\n    // Add auth token if available\n    if (this.authToken !== null) {\n      headers[\"Authorization\"] = `Bearer ${this.authToken}`;\n    }\n\n    // SSL pinning configuration\n    const sslConfig = this.getSSLConfig(domain);\n\n    const requestConfig: SSLRequestConfig = {\n      method: fetchOptions.method ?? \"GET\",\n      headers,\n      body: fetchOptions.body ? String(fetchOptions.body) : undefined,\n      timeoutInterval: timeout,\n      ...sslConfig,\n    };\n\n    let lastError: Error | null = null;\n\n    // Retry logic\n    for (let attempt = 0; attempt < retries; attempt++) {\n      try {\n        logger.debug(\n          `Secure API request attempt ${String(attempt + 1)}/${String(retries)}`,\n          {\n            url,\n            method: requestConfig.method,\n          },\n        );\n\n        const response = (await sslFetch(url, {\n          ...requestConfig,\n          method: requestConfig.method as \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n        } as any)) as SSLResponse;\n        const status = response.status;\n        const ok = status >= 200 && status < 300;\n        if (!ok) {\n          const statusText = response.statusText || \"\";\n          throw new Error(`HTTP ${String(status)}: ${statusText}`);\n        }\n\n        const data = (await response.json()) as T;\n        logger.debug(\"Secure API request successful\", {\n          url,\n          status: response.status,\n        });\n\n        return data;\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n\n        logger.warn(\n          `Secure API request attempt ${String(attempt + 1)} failed`,\n          {\n            url,\n            error: lastError,\n            attempt: attempt + 1,\n            maxRetries: retries,\n          },\n        );\n\n        // If not the last attempt, wait before retrying\n        if (attempt < retries - 1) {\n          await new Promise<void>((resolve) => {\n            setTimeout(() => { resolve(); }, retryDelay * (attempt + 1));\n          });\n        }\n      }\n    }\n\n    // All retries failed\n    logger.error(\"Secure API request failed after all retries\", {\n      url,\n      error: lastError ?? undefined,\n      retries,\n    });\n\n    throw new SecureAPIError(\n      `Request failed after ${String(retries)} attempts: ${lastError?.message ?? \"Unknown error\"}`,\n      lastError ?? undefined,\n    );\n  }\n\n  /**\n   * GET request\n   */\n  async get<T = unknown>(endpoint: string, config?: SSLConfig): Promise<T> {\n    return this.request<T>(endpoint, { ...config, method: \"GET\" });\n  }\n\n  /**\n   * POST request\n   */\n  async post<T = unknown>(\n    endpoint: string,\n    data?: unknown,\n    config?: SSLConfig,\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...(config ?? {}),\n      method: \"POST\",\n      body:\n        data !== null && data !== undefined ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  /**\n   * PUT request\n   */\n  async put<T = unknown>(\n    endpoint: string,\n    data?: unknown,\n    config?: SSLConfig,\n  ): Promise<T> {\n    return this.request<T>(endpoint, {\n      ...(config ?? {}),\n      method: \"PUT\",\n      body:\n        data !== null && data !== undefined ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  /**\n   * DELETE request\n   */\n  async delete<T = unknown>(endpoint: string, config?: SSLConfig): Promise<T> {\n    return this.request<T>(endpoint, { ...config, method: \"DELETE\" });\n  }\n\n  /**\n   * Check SSL certificate validity\n   */\n  async validateCertificate(domain: string): Promise<boolean> {\n    try {\n      const sslConfig = this.getSSLConfig(domain);\n      // Perform a test request to validate SSL pinning\n      const testConfig: SSLPinningConfig = {\n        method: \"HEAD\",\n        headers: {},\n        timeoutInterval: 5000,\n        ...sslConfig,\n      };\n      await sslFetch(`https://${domain}`, testConfig as any);\n      return true;\n    } catch (error) {\n      logger.error(\"SSL certificate validation failed\", {\n        domain,\n        error: error instanceof Error ? error : new Error(String(error)),\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Get security metrics\n   */\n  getSecurityMetrics(): {\n    sslEnabled: boolean;\n    certificatePinning: boolean;\n    supportedDomains: string[];\n  } {\n    return {\n      sslEnabled: true,\n      certificatePinning: true,\n      supportedDomains: Object.keys(SSL_CERTIFICATES),\n    };\n  }\n}\n\n/**\n * Custom error class for secure API errors\n */\nexport class SecureAPIError extends Error {\n  public originalError?: Error;\n\n  constructor(message: string, originalError?: Error) {\n    super(message);\n    this.name = \"SecureAPIError\";\n    this.originalError = originalError;\n  }\n}\n\n// Export singleton instance\nexport const secureAPI = SecureAPIService.getInstance();\n\n// Export types\nexport type { SSLConfig };\nexport default secureAPI;\n"],"mappings":"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","ignoreList":[]}