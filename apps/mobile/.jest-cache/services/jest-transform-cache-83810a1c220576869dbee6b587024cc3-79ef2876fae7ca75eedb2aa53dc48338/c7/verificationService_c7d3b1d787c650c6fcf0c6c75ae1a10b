8561f769f06ee64a5e025622be9665cc
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verificationService = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _api = require("./api");
var _logger = require("./logger");
var VerificationService = function () {
  function VerificationService() {
    (0, _classCallCheck2.default)(this, VerificationService);
  }
  return (0, _createClass2.default)(VerificationService, [{
    key: "getStatus",
    value: (function () {
      var _getStatus = (0, _asyncToGenerator2.default)(function* () {
        try {
          return yield (0, _api.request)('/verification/status', {
            method: 'GET'
          });
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error getting verification status', {
            error: errorMessage
          });
          throw errorMessage;
        }
      });
      function getStatus() {
        return _getStatus.apply(this, arguments);
      }
      return getStatus;
    }())
  }, {
    key: "submitIdentityVerification",
    value: (function () {
      var _submitIdentityVerification = (0, _asyncToGenerator2.default)(function* (data) {
        try {
          return yield (0, _api.request)('/verification/identity', {
            method: 'POST',
            body: data
          });
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error submitting identity verification', {
            error: errorMessage
          });
          throw errorMessage;
        }
      });
      function submitIdentityVerification(_x) {
        return _submitIdentityVerification.apply(this, arguments);
      }
      return submitIdentityVerification;
    }())
  }, {
    key: "submitPetOwnershipVerification",
    value: (function () {
      var _submitPetOwnershipVerification = (0, _asyncToGenerator2.default)(function* (data) {
        try {
          return yield (0, _api.request)('/verification/pet-ownership', {
            method: 'POST',
            body: data
          });
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error submitting pet ownership verification', {
            error: errorMessage
          });
          throw errorMessage;
        }
      });
      function submitPetOwnershipVerification(_x2) {
        return _submitPetOwnershipVerification.apply(this, arguments);
      }
      return submitPetOwnershipVerification;
    }())
  }, {
    key: "submitVeterinaryVerification",
    value: (function () {
      var _submitVeterinaryVerification = (0, _asyncToGenerator2.default)(function* (data) {
        try {
          return yield (0, _api.request)('/verification/veterinary', {
            method: 'POST',
            body: data
          });
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error submitting veterinary verification', {
            error: errorMessage
          });
          throw errorMessage;
        }
      });
      function submitVeterinaryVerification(_x3) {
        return _submitVeterinaryVerification.apply(this, arguments);
      }
      return submitVeterinaryVerification;
    }())
  }, {
    key: "submitOrganizationVerification",
    value: (function () {
      var _submitOrganizationVerification = (0, _asyncToGenerator2.default)(function* (data) {
        try {
          return yield (0, _api.request)('/verification/organization', {
            method: 'POST',
            body: data
          });
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error submitting organization verification', {
            error: errorMessage
          });
          throw errorMessage;
        }
      });
      function submitOrganizationVerification(_x4) {
        return _submitOrganizationVerification.apply(this, arguments);
      }
      return submitOrganizationVerification;
    }())
  }, {
    key: "getRequirements",
    value: (function () {
      var _getRequirements = (0, _asyncToGenerator2.default)(function* (tier) {
        try {
          var response = yield (0, _api.request)(`/verification/requirements/${tier}`, {
            method: 'GET'
          });
          return response.requirements;
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error getting requirements', {
            error: errorMessage,
            tier: tier
          });
          throw errorMessage;
        }
      });
      function getRequirements(_x5) {
        return _getRequirements.apply(this, arguments);
      }
      return getRequirements;
    }())
  }, {
    key: "cancelVerification",
    value: (function () {
      var _cancelVerification = (0, _asyncToGenerator2.default)(function* (verificationId) {
        try {
          yield (0, _api.request)(`/verification/${verificationId}/cancel`, {
            method: 'POST'
          });
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error canceling verification', {
            error: errorMessage,
            verificationId: verificationId
          });
          throw errorMessage;
        }
      });
      function cancelVerification(_x6) {
        return _cancelVerification.apply(this, arguments);
      }
      return cancelVerification;
    }())
  }, {
    key: "getBadges",
    value: (function () {
      var _getBadges = (0, _asyncToGenerator2.default)(function* () {
        try {
          var response = yield (0, _api.request)('/verification/badges', {
            method: 'GET'
          });
          return response.badges;
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error getting badges', {
            error: errorMessage
          });
          throw errorMessage;
        }
      });
      function getBadges() {
        return _getBadges.apply(this, arguments);
      }
      return getBadges;
    }())
  }, {
    key: "hasTier",
    value: (function () {
      var _hasTier = (0, _asyncToGenerator2.default)(function* (requiredTier) {
        try {
          var response = yield (0, _api.request)(`/verification/has-tier/${requiredTier}`, {
            method: 'GET'
          });
          return response.hasTier;
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error checking tier', {
            error: errorMessage,
            requiredTier: requiredTier
          });
          throw errorMessage;
        }
      });
      function hasTier(_x7) {
        return _hasTier.apply(this, arguments);
      }
      return hasTier;
    }())
  }, {
    key: "uploadDocument",
    value: (function () {
      var _uploadDocument = (0, _asyncToGenerator2.default)(function* (fileUri, documentType, verificationType) {
        if (!fileUri || fileUri.trim() === '') {
          throw new Error('Empty file');
        }
        try {
          var FormData = require('form-data');
          var formData = new FormData();
          var response = yield (0, _api.request)('/verification/upload', {
            method: 'POST',
            body: formData,
            headers: {
              'Content-Type': 'multipart/form-data'
            },
            params: {
              documentType: documentType,
              verificationType: verificationType
            }
          });
          return response.url;
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error uploading document', {
            error: errorMessage,
            documentType: documentType,
            verificationType: verificationType
          });
          throw errorMessage;
        }
      });
      function uploadDocument(_x8, _x9, _x0) {
        return _uploadDocument.apply(this, arguments);
      }
      return uploadDocument;
    }())
  }, {
    key: "requestStatusUpdate",
    value: (function () {
      var _requestStatusUpdate = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield (0, _api.request)('/verification/request-update', {
            method: 'POST'
          });
        } catch (error) {
          var errorMessage = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Error requesting status update', {
            error: errorMessage
          });
          throw errorMessage;
        }
      });
      function requestStatusUpdate() {
        return _requestStatusUpdate.apply(this, arguments);
      }
      return requestStatusUpdate;
    }())
  }]);
}();
var verificationService = exports.verificationService = new VerificationService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,