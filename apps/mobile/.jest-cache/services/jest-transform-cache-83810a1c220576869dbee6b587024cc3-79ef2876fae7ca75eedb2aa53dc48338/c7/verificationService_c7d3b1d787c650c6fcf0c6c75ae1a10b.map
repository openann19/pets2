{"version":3,"names":["_api","require","_logger","VerificationService","_classCallCheck2","default","_createClass2","key","value","_getStatus","_asyncToGenerator2","request","method","error","errorMessage","Error","String","logger","getStatus","apply","arguments","_submitIdentityVerification","data","body","submitIdentityVerification","_x","_submitPetOwnershipVerification","submitPetOwnershipVerification","_x2","_submitVeterinaryVerification","submitVeterinaryVerification","_x3","_submitOrganizationVerification","submitOrganizationVerification","_x4","_getRequirements","tier","response","requirements","getRequirements","_x5","_cancelVerification","verificationId","cancelVerification","_x6","_getBadges","badges","getBadges","_hasTier","requiredTier","hasTier","_x7","_uploadDocument","fileUri","documentType","verificationType","trim","FormData","formData","headers","params","url","uploadDocument","_x8","_x9","_x0","_requestStatusUpdate","requestStatusUpdate","verificationService","exports"],"sources":["verificationService.ts"],"sourcesContent":["/**\n * Verification Service - Mobile Client\n * \n * Handles all verification-related API calls and state management\n * for user verification tier progression.\n */\n\nimport { request } from './api';\nimport { logger } from './logger';\n\nexport interface VerificationRequirements {\n  [key: string]: unknown;\n}\n\nexport interface VerificationStatus {\n  tier: 'tier0' | 'tier1' | 'tier2' | 'tier3' | 'tier4';\n  verified: boolean;\n  badges: string[];\n  status: 'not_started' | 'in_progress' | 'pending_review' | 'approved' | 'rejected';\n  rejectionReason?: string;\n  submittedAt?: Date;\n  reviewedAt?: Date;\n  requirements?: VerificationRequirements;\n}\n\nexport interface IdentityVerificationData {\n  idDocument: {\n    front: string;\n    back?: string;\n  };\n  selfie: string;\n  personalInfo: {\n    legalName: string;\n    dateOfBirth: string;\n    address: {\n      street: string;\n      city: string;\n      state: string;\n      zipCode: string;\n      country: string;\n    };\n    phone: string;\n  };\n  consentToDataProcessing: boolean;\n}\n\nexport interface PetOwnershipVerificationData {\n  primaryProof: {\n    type: 'registration' | 'microchip' | 'adoption_contract' | 'vaccination_booklet' | 'vet_invoice';\n    documentUrl: string;\n  };\n  secondaryProof: {\n    type: 'selfie_with_pet' | 'home_photo' | 'microchip_number';\n    documentUrl?: string;\n    microchipNumber?: string;\n  };\n  petInfo: {\n    petId: string;\n    petName: string;\n    species: string;\n    breed?: string;\n  };\n}\n\nexport interface VeterinaryVerificationData {\n  veterinaryDocuments: {\n    vaccinationRecord: string;\n    spayNeuterProof?: string;\n    healthCertificate?: string;\n  };\n  vetClinicInfo: {\n    name: string;\n    city: string;\n    state?: string;\n    country: string;\n  };\n  piiRedacted: boolean;\n}\n\nexport interface OrganizationVerificationData {\n  organizationType: 'breeder' | 'shelter' | 'rescue';\n  documents: {\n    licenseOrRegistration: string;\n    businessRegistration?: string;\n    website?: string;\n  };\n  selfieAtFacility?: string;\n  publicListingUrl?: string;\n}\n\nclass VerificationService {\n  /**\n   * Get user's current verification status\n   */\n  async getStatus(): Promise<VerificationStatus> {\n    try {\n      return await request<VerificationStatus>('/verification/status', { method: 'GET' });\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error getting verification status', { error: errorMessage });\n      throw errorMessage;\n    }\n  }\n\n  /**\n   * Submit Tier 1: Identity Verification\n   */\n  async submitIdentityVerification(data: IdentityVerificationData): Promise<VerificationStatus> {\n    try {\n      return await request<VerificationStatus>('/verification/identity', { method: 'POST', body: data });\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error submitting identity verification', { error: errorMessage });\n      throw errorMessage;\n    }\n  }\n\n  /**\n   * Submit Tier 2: Pet Ownership Verification\n   */\n  async submitPetOwnershipVerification(\n    data: PetOwnershipVerificationData\n  ): Promise<VerificationStatus> {\n    try {\n      return await request<VerificationStatus>('/verification/pet-ownership', { method: 'POST', body: data });\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error submitting pet ownership verification', { error: errorMessage });\n      throw errorMessage;\n    }\n  }\n\n  /**\n   * Submit Tier 3: Veterinary Verification\n   */\n  async submitVeterinaryVerification(\n    data: VeterinaryVerificationData\n  ): Promise<VerificationStatus> {\n    try {\n      return await request<VerificationStatus>('/verification/veterinary', { method: 'POST', body: data });\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error submitting veterinary verification', { error: errorMessage });\n      throw errorMessage;\n    }\n  }\n\n  /**\n   * Submit Tier 4: Organization Verification\n   */\n  async submitOrganizationVerification(\n    data: OrganizationVerificationData\n  ): Promise<VerificationStatus> {\n    try {\n      return await request<VerificationStatus>('/verification/organization', { method: 'POST', body: data });\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error submitting organization verification', { error: errorMessage });\n      throw errorMessage;\n    }\n  }\n\n  /**\n   * Get verification requirements for a specific tier\n   */\n  async getRequirements(tier: string): Promise<string[]> {\n    try {\n      const response = await request<{ requirements: string[] }>(`/verification/requirements/${tier}`, { method: 'GET' });\n      return response.requirements;\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error getting requirements', { error: errorMessage, tier });\n      throw errorMessage;\n    }\n  }\n\n  /**\n   * Cancel pending verification\n   */\n  async cancelVerification(verificationId: string): Promise<void> {\n    try {\n      await request(`/verification/${verificationId}/cancel`, { method: 'POST' });\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error canceling verification', { error: errorMessage, verificationId });\n      throw errorMessage;\n    }\n  }\n\n  /**\n   * Get user badges\n   */\n  async getBadges(): Promise<string[]> {\n    try {\n      const response = await request<{ badges: string[] }>('/verification/badges', { method: 'GET' });\n      return response.badges;\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error getting badges', { error: errorMessage });\n      throw errorMessage;\n    }\n  }\n\n  /**\n   * Check if user has required tier\n   */\n  async hasTier(requiredTier: string): Promise<boolean> {\n    try {\n      const response = await request<{ hasTier: boolean }>(`/verification/has-tier/${requiredTier}`, { method: 'GET' });\n      return response.hasTier;\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error checking tier', { error: errorMessage, requiredTier });\n      throw errorMessage;\n    }\n  }\n\n  /**\n   * Upload verification document\n   */\n  async uploadDocument(\n    fileUri: string,\n    documentType: string,\n    verificationType?: string\n  ): Promise<string> {\n    if (!fileUri || fileUri.trim() === '') {\n      throw new Error('Empty file');\n    }\n\n    try {\n      const FormData = require('form-data');\n      const formData = new FormData();\n      \n      // In React Native, you'd use expo-file-system or similar\n      // formData.append('file', {\n      //   uri: fileUri,\n      //   name: 'document.jpg',\n      //   type: 'image/jpeg',\n      // });\n\n      const response = await request<{ url: string }>('/verification/upload', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        params: {\n          documentType,\n          verificationType,\n        },\n      });\n\n      return response.url;\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error uploading document', { error: errorMessage, documentType, verificationType });\n      throw errorMessage;\n    }\n  }\n\n  /**\n   * Request verification review status update\n   */\n  async requestStatusUpdate(): Promise<void> {\n    try {\n      await request('/verification/request-update', { method: 'POST' });\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error : new Error(String(error));\n      logger.error('Error requesting status update', { error: errorMessage });\n      throw errorMessage;\n    }\n  }\n}\n\nexport const verificationService = new VerificationService();\n\n"],"mappings":"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","ignoreList":[]}