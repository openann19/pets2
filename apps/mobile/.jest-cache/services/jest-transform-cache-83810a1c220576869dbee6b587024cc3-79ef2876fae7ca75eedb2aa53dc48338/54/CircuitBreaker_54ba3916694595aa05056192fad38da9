9e579a2cca3e3c5895f3057cd7f3c365
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CircuitBreakerOpenError = exports.CircuitBreaker = exports.CircuitState = void 0;
var logger_1 = require("../utils/logger");
var CircuitState;
(function (CircuitState) {
  CircuitState["CLOSED"] = "CLOSED";
  CircuitState["OPEN"] = "OPEN";
  CircuitState["HALF_OPEN"] = "HALF_OPEN";
})(CircuitState || (exports.CircuitState = CircuitState = {}));
var DEFAULT_CONFIG = {
  failureThreshold: 5,
  successThreshold: 2,
  timeout: 60000,
  resetTimeout: 60000,
  monitoringPeriod: 60000
};
var CircuitBreaker = function () {
  function CircuitBreaker() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, CircuitBreaker);
    this.state = CircuitState.CLOSED;
    this.failures = 0;
    this.successes = 0;
    this.stateChangedAt = Date.now();
    this.totalRequests = 0;
    this.config = _objectSpread(_objectSpread({}, DEFAULT_CONFIG), config);
    this.startHealthCheck();
  }
  return (0, _createClass2.default)(CircuitBreaker, [{
    key: "execute",
    value: (function () {
      var _execute = (0, _asyncToGenerator2.default)(function* (fn) {
        this.totalRequests++;
        if (this.state === CircuitState.OPEN) {
          if (Date.now() - this.stateChangedAt >= this.config.resetTimeout) {
            this.transitionTo(CircuitState.HALF_OPEN);
          } else {
            throw new CircuitBreakerOpenError('Circuit breaker is OPEN');
          }
        }
        try {
          var result = yield fn();
          this.onSuccess();
          return result;
        } catch (error) {
          this.onFailure();
          throw error;
        }
      });
      function execute(_x) {
        return _execute.apply(this, arguments);
      }
      return execute;
    }())
  }, {
    key: "isHealthy",
    value: function isHealthy() {
      return this.state === CircuitState.CLOSED;
    }
  }, {
    key: "getMetrics",
    value: function getMetrics() {
      return {
        failures: this.failures,
        successes: this.successes,
        totalRequests: this.totalRequests,
        lastFailureTime: this.lastFailureTime,
        lastSuccessTime: this.lastSuccessTime,
        state: this.state,
        stateChangedAt: this.stateChangedAt
      };
    }
  }, {
    key: "reset",
    value: function reset() {
      this.state = CircuitState.CLOSED;
      this.failures = 0;
      this.successes = 0;
      this.stateChangedAt = Date.now();
      logger_1.logger.info('Circuit breaker manually reset');
    }
  }, {
    key: "onSuccess",
    value: function onSuccess() {
      this.lastSuccessTime = Date.now();
      if (this.state === CircuitState.HALF_OPEN) {
        this.successes++;
        if (this.successes >= this.config.successThreshold) {
          this.transitionTo(CircuitState.CLOSED);
        }
      } else if (this.state === CircuitState.CLOSED) {
        if (this.lastFailureTime && Date.now() - this.lastFailureTime > this.config.monitoringPeriod) {
          this.failures = 0;
        }
      }
    }
  }, {
    key: "onFailure",
    value: function onFailure() {
      this.lastFailureTime = Date.now();
      if (this.state === CircuitState.HALF_OPEN) {
        this.transitionTo(CircuitState.OPEN);
      } else if (this.state === CircuitState.CLOSED) {
        this.failures++;
        if (this.failures >= this.config.failureThreshold) {
          this.transitionTo(CircuitState.OPEN);
        }
      }
    }
  }, {
    key: "transitionTo",
    value: function transitionTo(newState) {
      var oldState = this.state;
      this.state = newState;
      this.stateChangedAt = Date.now();
      logger_1.logger.info('Circuit breaker state transition', {
        from: oldState,
        to: newState,
        failures: this.failures,
        successes: this.successes
      });
      if (newState === CircuitState.CLOSED) {
        this.failures = 0;
        this.successes = 0;
      } else if (newState === CircuitState.HALF_OPEN) {
        this.successes = 0;
      }
    }
  }, {
    key: "startHealthCheck",
    value: function startHealthCheck() {
      var _this = this;
      if (!this.config.healthCheckInterval || !this.config.healthCheckEndpoint) {
        return;
      }
      this.healthCheckTimer = setInterval(function () {
        if (_this.state === CircuitState.OPEN) {
          _this.performHealthCheck();
        }
      }, this.config.healthCheckInterval);
    }
  }, {
    key: "performHealthCheck",
    value: (function () {
      var _performHealthCheck = (0, _asyncToGenerator2.default)(function* () {
        if (!this.config.healthCheckEndpoint) {
          return;
        }
        try {
          var response = yield fetch(this.config.healthCheckEndpoint, {
            method: 'GET',
            signal: AbortSignal.timeout(5000)
          });
          if (response.ok) {
            this.transitionTo(CircuitState.HALF_OPEN);
          }
        } catch (error) {
          logger_1.logger.debug('Health check failed', {
            error: error
          });
        }
      });
      function performHealthCheck() {
        return _performHealthCheck.apply(this, arguments);
      }
      return performHealthCheck;
    }())
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.healthCheckTimer) {
        clearInterval(this.healthCheckTimer);
      }
    }
  }]);
}();
exports.CircuitBreaker = CircuitBreaker;
var CircuitBreakerOpenError = function (_Error) {
  function CircuitBreakerOpenError(message) {
    var _this2;
    (0, _classCallCheck2.default)(this, CircuitBreakerOpenError);
    _this2 = _callSuper(this, CircuitBreakerOpenError, [message]);
    _this2.name = 'CircuitBreakerOpenError';
    return _this2;
  }
  (0, _inherits2.default)(CircuitBreakerOpenError, _Error);
  return (0, _createClass2.default)(CircuitBreakerOpenError);
}((0, _wrapNativeSuper2.default)(Error));
exports.CircuitBreakerOpenError = CircuitBreakerOpenError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,