453a25f61cbb48419a9976e43379fa2c
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RequestRetryStrategy = void 0;
var logger_1 = require("../utils/logger");
var DEFAULT_CONFIG = {
  maxRetries: 3,
  baseDelay: 1000,
  maxDelay: 30000,
  strategy: 'exponential',
  jitter: true,
  retryBudget: 10000,
  retryableStatusCodes: [408, 429, 500, 502, 503, 504],
  retryableErrors: ['ECONNRESET', 'ETIMEDOUT', 'ENOTFOUND']
};
var RequestRetryStrategy = function () {
  function RequestRetryStrategy() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, RequestRetryStrategy);
    this.networkCondition = 'excellent';
    this.config = _objectSpread(_objectSpread({}, DEFAULT_CONFIG), config);
  }
  return (0, _createClass2.default)(RequestRetryStrategy, [{
    key: "execute",
    value: (function () {
      var _execute = (0, _asyncToGenerator2.default)(function* (fn, errorHandler) {
        var lastError;
        var startTime = Date.now();
        for (var attempt = 0; attempt <= this.config.maxRetries; attempt++) {
          try {
            var result = yield fn();
            if (attempt > 0) {
              logger_1.logger.info('Request succeeded after retry', {
                attempt: attempt,
                attempts: attempt + 1
              });
            }
            return result;
          } catch (error) {
            lastError = error;
            var elapsedTime = Date.now() - startTime;
            if (!this.isRetryable(error, attempt)) {
              logger_1.logger.debug('Error not retryable', {
                error: error,
                attempt: attempt
              });
              throw error;
            }
            if (this.config.retryBudget && elapsedTime >= this.config.retryBudget) {
              logger_1.logger.warn('Retry budget exceeded', {
                elapsedTime: elapsedTime,
                budget: this.config.retryBudget
              });
              throw error;
            }
            if (errorHandler) {
              var retryContext = {
                attempt: attempt,
                totalAttempts: attempt + 1,
                delay: this.calculateDelay(attempt),
                elapsedTime: elapsedTime,
                reason: this.getErrorReason(error)
              };
              if (!errorHandler(error, retryContext)) {
                throw error;
              }
            }
            if (attempt < this.config.maxRetries) {
              var delay = this.calculateDelay(attempt);
              logger_1.logger.debug('Retrying request', {
                attempt: attempt + 1,
                maxRetries: this.config.maxRetries,
                delay: delay
              });
              yield this.sleep(delay);
            }
          }
        }
        logger_1.logger.error('Request failed after all retries', {
          attempts: this.config.maxRetries + 1,
          lastError: lastError
        });
        throw lastError;
      });
      function execute(_x, _x2) {
        return _execute.apply(this, arguments);
      }
      return execute;
    }())
  }, {
    key: "isRetryable",
    value: function isRetryable(error, attempt) {
      var _this$config$retryabl;
      if (attempt >= this.config.maxRetries) {
        return false;
      }
      var errorMessage = error instanceof Error ? error.message : String(error);
      if ((_this$config$retryabl = this.config.retryableErrors) != null && _this$config$retryabl.some(function (code) {
        return errorMessage.includes(code);
      })) {
        return true;
      }
      if (this.isHttpError(error)) {
        var _this$config$retryabl2, _this$config$retryabl3;
        var statusCode = this.getHttpStatusCode(error);
        return (_this$config$retryabl2 = (_this$config$retryabl3 = this.config.retryableStatusCodes) == null ? void 0 : _this$config$retryabl3.includes(statusCode)) != null ? _this$config$retryabl2 : false;
      }
      return this.isNetworkError(error);
    }
  }, {
    key: "calculateDelay",
    value: function calculateDelay(attempt) {
      var delay;
      switch (this.config.strategy) {
        case 'exponential':
          delay = Math.min(this.config.baseDelay * Math.pow(2, attempt), this.config.maxDelay);
          break;
        case 'linear':
          delay = Math.min(this.config.baseDelay * (attempt + 1), this.config.maxDelay);
          break;
        case 'fixed':
          delay = this.config.baseDelay;
          break;
        case 'none':
        default:
          return 0;
      }
      if (this.config.jitter) {
        var jitterAmount = delay * 0.1;
        delay += Math.random() * jitterAmount * 2 - jitterAmount;
      }
      delay = this.adjustForNetworkCondition(delay);
      return Math.max(0, Math.floor(delay));
    }
  }, {
    key: "adjustForNetworkCondition",
    value: function adjustForNetworkCondition(delay) {
      var multipliers = {
        excellent: 1.0,
        good: 1.2,
        fair: 1.5,
        poor: 2.0
      };
      return delay * multipliers[this.networkCondition];
    }
  }, {
    key: "updateNetworkCondition",
    value: function updateNetworkCondition(condition) {
      this.networkCondition = condition;
    }
  }, {
    key: "generateIdempotencyKey",
    value: function generateIdempotencyKey(endpoint, data) {
      var dataHash = data ? this.hashData(data) : '';
      return `${endpoint}_${Date.now()}_${dataHash}`;
    }
  }, {
    key: "hashData",
    value: function hashData(data) {
      try {
        var json = JSON.stringify(data);
        var hash = 0;
        for (var i = 0; i < json.length; i++) {
          var char = json.charCodeAt(i);
          hash = (hash << 5) - hash + char;
          hash = hash & hash;
        }
        return Math.abs(hash).toString(36);
      } catch (_unused) {
        return Math.random().toString(36).substring(2, 11);
      }
    }
  }, {
    key: "sleep",
    value: function sleep(ms) {
      return new Promise(function (resolve) {
        return setTimeout(resolve, ms);
      });
    }
  }, {
    key: "isNetworkError",
    value: function isNetworkError(error) {
      if (error instanceof Error) {
        return error.message.includes('network') || error.message.includes('timeout') || error.message.includes('ECONNREFUSED') || error.message.includes('ETIMEDOUT');
      }
      return false;
    }
  }, {
    key: "isHttpError",
    value: function isHttpError(error) {
      return typeof error === 'object' && error !== null && 'status' in error;
    }
  }, {
    key: "getHttpStatusCode",
    value: function getHttpStatusCode(error) {
      if (this.isHttpError(error)) {
        return error.status;
      }
      return 0;
    }
  }, {
    key: "getErrorReason",
    value: function getErrorReason(error) {
      if (error instanceof Error) {
        return error.message;
      }
      return String(error);
    }
  }]);
}();
exports.RequestRetryStrategy = RequestRetryStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,