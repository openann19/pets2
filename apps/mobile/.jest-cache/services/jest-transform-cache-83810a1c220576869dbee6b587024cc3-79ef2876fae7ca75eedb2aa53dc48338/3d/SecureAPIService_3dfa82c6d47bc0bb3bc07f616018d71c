91d76878cf33e17b9029b22fde1d7e82
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secureAPI = exports.default = exports.SecureAPIError = void 0;
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactNativeSslPinning = require("react-native-ssl-pinning");
var _logger = require("../services/logger");
var _excluded = ["timeout", "retries", "retryDelay"];
var _process$env$EXPO_PUB;
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var BASE_URL = (_process$env$EXPO_PUB = process.env["EXPO_PUBLIC_API_URL"]) != null ? _process$env$EXPO_PUB : __DEV__ ? "http://localhost:3001/api" : "https://api.pawfectmatch.com/api";
var SSL_CERTIFICATES = {
  "api.pawfectmatch.com": [{
    algorithm: "sha256",
    value: "PLACEHOLDER_CERTIFICATE_FINGERPRINT_SHA256"
  }, {
    algorithm: "sha1",
    value: "PLACEHOLDER_CERTIFICATE_FINGERPRINT_SHA1"
  }],
  localhost: undefined
};
var SecureAPIService = function () {
  function SecureAPIService() {
    (0, _classCallCheck2.default)(this, SecureAPIService);
    this.authToken = null;
  }
  return (0, _createClass2.default)(SecureAPIService, [{
    key: "setAuthToken",
    value: function setAuthToken(token) {
      this.authToken = token;
    }
  }, {
    key: "clearAuthToken",
    value: function clearAuthToken() {
      this.authToken = null;
    }
  }, {
    key: "getSSLConfig",
    value: function getSSLConfig(domain) {
      var certs = SSL_CERTIFICATES[domain];
      if (certs === undefined || certs.length === 0) {
        if (__DEV__) {
          return {
            sslPinning: {
              certs: "public"
            }
          };
        }
        throw new Error(`No SSL certificates configured for domain: ${domain}`);
      }
      return {
        sslPinning: {
          certs: certs
        }
      };
    }
  }, {
    key: "request",
    value: (function () {
      var _request = (0, _asyncToGenerator2.default)(function* (endpoint) {
        var _fetchOptions$method, _lastError, _lastError$message, _lastError2, _lastError3;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var url = `${BASE_URL}${endpoint}`;
        var domain = new URL(url).hostname;
        var _options$timeout = options.timeout,
          timeout = _options$timeout === void 0 ? 30000 : _options$timeout,
          _options$retries = options.retries,
          retries = _options$retries === void 0 ? 3 : _options$retries,
          _options$retryDelay = options.retryDelay,
          retryDelay = _options$retryDelay === void 0 ? 1000 : _options$retryDelay,
          fetchOptions = (0, _objectWithoutProperties2.default)(options, _excluded);
        var headers = _objectSpread({
          "Content-Type": "application/json"
        }, fetchOptions.headers);
        if (this.authToken !== null) {
          headers["Authorization"] = `Bearer ${this.authToken}`;
        }
        var sslConfig = this.getSSLConfig(domain);
        var requestConfig = _objectSpread({
          method: (_fetchOptions$method = fetchOptions.method) != null ? _fetchOptions$method : "GET",
          headers: headers,
          body: fetchOptions.body ? String(fetchOptions.body) : undefined,
          timeoutInterval: timeout
        }, sslConfig);
        var lastError = null;
        var _loop = function* _loop(attempt) {
            try {
              _logger.logger.debug(`Secure API request attempt ${String(attempt + 1)}/${String(retries)}`, {
                url: url,
                method: requestConfig.method
              });
              var response = yield (0, _reactNativeSslPinning.fetch)(url, _objectSpread(_objectSpread({}, requestConfig), {}, {
                method: requestConfig.method
              }));
              var status = response.status;
              var ok = status >= 200 && status < 300;
              if (!ok) {
                var statusText = response.statusText || "";
                throw new Error(`HTTP ${String(status)}: ${statusText}`);
              }
              var data = yield response.json();
              _logger.logger.debug("Secure API request successful", {
                url: url,
                status: response.status
              });
              return {
                v: data
              };
            } catch (error) {
              lastError = error instanceof Error ? error : new Error(String(error));
              _logger.logger.warn(`Secure API request attempt ${String(attempt + 1)} failed`, {
                url: url,
                error: lastError,
                attempt: attempt + 1,
                maxRetries: retries
              });
              if (attempt < retries - 1) {
                yield new Promise(function (resolve) {
                  setTimeout(function () {
                    return resolve();
                  }, retryDelay * (attempt + 1));
                });
              }
            }
          },
          _ret;
        for (var attempt = 0; attempt < retries; attempt++) {
          _ret = yield* _loop(attempt);
          if (_ret) return _ret.v;
        }
        _logger.logger.error("Secure API request failed after all retries", {
          url: url,
          error: (_lastError = lastError) != null ? _lastError : undefined,
          retries: retries
        });
        throw new SecureAPIError(`Request failed after ${String(retries)} attempts: ${(_lastError$message = (_lastError2 = lastError) == null ? void 0 : _lastError2.message) != null ? _lastError$message : "Unknown error"}`, (_lastError3 = lastError) != null ? _lastError3 : undefined);
      });
      function request(_x) {
        return _request.apply(this, arguments);
      }
      return request;
    }())
  }, {
    key: "get",
    value: (function () {
      var _get = (0, _asyncToGenerator2.default)(function* (endpoint, config) {
        return this.request(endpoint, _objectSpread(_objectSpread({}, config), {}, {
          method: "GET"
        }));
      });
      function get(_x2, _x3) {
        return _get.apply(this, arguments);
      }
      return get;
    }())
  }, {
    key: "post",
    value: (function () {
      var _post = (0, _asyncToGenerator2.default)(function* (endpoint, data, config) {
        return this.request(endpoint, _objectSpread(_objectSpread({}, config != null ? config : {}), {}, {
          method: "POST",
          body: data !== null && data !== undefined ? JSON.stringify(data) : undefined
        }));
      });
      function post(_x4, _x5, _x6) {
        return _post.apply(this, arguments);
      }
      return post;
    }())
  }, {
    key: "put",
    value: (function () {
      var _put = (0, _asyncToGenerator2.default)(function* (endpoint, data, config) {
        return this.request(endpoint, _objectSpread(_objectSpread({}, config != null ? config : {}), {}, {
          method: "PUT",
          body: data !== null && data !== undefined ? JSON.stringify(data) : undefined
        }));
      });
      function put(_x7, _x8, _x9) {
        return _put.apply(this, arguments);
      }
      return put;
    }())
  }, {
    key: "delete",
    value: (function () {
      var _delete2 = (0, _asyncToGenerator2.default)(function* (endpoint, config) {
        return this.request(endpoint, _objectSpread(_objectSpread({}, config), {}, {
          method: "DELETE"
        }));
      });
      function _delete(_x0, _x1) {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }())
  }, {
    key: "validateCertificate",
    value: (function () {
      var _validateCertificate = (0, _asyncToGenerator2.default)(function* (domain) {
        try {
          var sslConfig = this.getSSLConfig(domain);
          var testConfig = _objectSpread({
            method: "HEAD",
            headers: {},
            timeoutInterval: 5000
          }, sslConfig);
          yield (0, _reactNativeSslPinning.fetch)(`https://${domain}`, testConfig);
          return true;
        } catch (error) {
          _logger.logger.error("SSL certificate validation failed", {
            domain: domain,
            error: error instanceof Error ? error : new Error(String(error))
          });
          return false;
        }
      });
      function validateCertificate(_x10) {
        return _validateCertificate.apply(this, arguments);
      }
      return validateCertificate;
    }())
  }, {
    key: "getSecurityMetrics",
    value: function getSecurityMetrics() {
      return {
        sslEnabled: true,
        certificatePinning: true,
        supportedDomains: Object.keys(SSL_CERTIFICATES)
      };
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (SecureAPIService.instance === null) {
        SecureAPIService.instance = new SecureAPIService();
      }
      return SecureAPIService.instance;
    }
  }]);
}();
SecureAPIService.instance = null;
var SecureAPIError = exports.SecureAPIError = function (_Error) {
  function SecureAPIError(message, originalError) {
    var _this;
    (0, _classCallCheck2.default)(this, SecureAPIError);
    _this = _callSuper(this, SecureAPIError, [message]);
    _this.name = "SecureAPIError";
    _this.originalError = originalError;
    return _this;
  }
  (0, _inherits2.default)(SecureAPIError, _Error);
  return (0, _createClass2.default)(SecureAPIError);
}((0, _wrapNativeSuper2.default)(Error));
var secureAPI = exports.secureAPI = SecureAPIService.getInstance();
var _default = exports.default = secureAPI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,