b34e044d43ac42fcfe11397ba6a2ddb9
"use strict";

_getJestObj().mock('socket.io-client', function () {
  return {
    io: _globals.jest.fn()
  };
});
var _globals = require("@jest/globals");
var _socket = require("socket.io-client");
var _socket2 = require("../socket");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockIo = _socket.io;
(0, _globals.describe)('Socket Service', function () {
  var mockSocket;
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockSocket = {
      on: _globals.jest.fn(),
      emit: _globals.jest.fn(),
      off: _globals.jest.fn(),
      connect: _globals.jest.fn(),
      disconnect: _globals.jest.fn(),
      id: 'mock-socket-id',
      connected: true,
      disconnected: false,
      auth: {},
      receivedAck: true,
      binaryType: 'arraybuffer',
      opts: {},
      io: {},
      connectTimeout: undefined,
      _readyState: 'open',
      _receiver: undefined,
      _sender: undefined,
      _pid: undefined,
      _parser: undefined,
      toString: _globals.jest.fn(function () {
        return 'Socket';
      }),
      to: _globals.jest.fn(),
      in: _globals.jest.fn(),
      onAny: _globals.jest.fn(),
      prependAny: _globals.jest.fn(),
      offAny: _globals.jest.fn(),
      offAnyIncoming: _globals.jest.fn(),
      emitAny: _globals.jest.fn(),
      listenersAny: _globals.jest.fn(),
      listenersAnyOutgoing: _globals.jest.fn(),
      compress: _globals.jest.fn(),
      timeout: _globals.jest.fn(),
      sendBuffer: [],
      consumeBuffer: _globals.jest.fn(),
      open: _globals.jest.fn(),
      write: _globals.jest.fn(),
      close: _globals.jest.fn(),
      destroy: _globals.jest.fn(),
      disconnectInternal: _globals.jest.fn(),
      cleanup: _globals.jest.fn(),
      read: _globals.jest.fn(),
      addEventListener: _globals.jest.fn(),
      removeEventListener: _globals.jest.fn(),
      dispatchEvent: _globals.jest.fn()
    };
    mockIo.mockReturnValue(mockSocket);
  });
  (0, _globals.afterEach)(function () {
    _globals.jest.resetModules();
  });
  (0, _globals.describe)('Happy Path - Socket Initialization', function () {
    (0, _globals.it)('should create socket instance on first call', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      (0, _globals.expect)(_socket.io).toHaveBeenCalled();
      (0, _globals.expect)(socket).toBeDefined();
    });
    (0, _globals.it)('should return existing socket on subsequent calls', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket1 = (0, _socket2.getSocket)();
      var socket2 = (0, _socket2.getSocket)();
      (0, _globals.expect)(_socket.io).toHaveBeenCalledTimes(1);
      (0, _globals.expect)(socket1).toBe(socket2);
    });
    (0, _globals.it)('should initialize socket with correct configuration', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      (0, _socket2.getSocket)();
      (0, _globals.expect)(_socket.io).toHaveBeenCalledWith('', _globals.expect.objectContaining({
        transports: ['websocket'],
        forceNew: true,
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionDelayMax: 5000,
        reconnectionAttempts: 5
      }));
    });
    (0, _globals.it)('should export socketClient singleton', function () {
      (0, _globals.expect)(_socket2.socketClient).toBeDefined();
    });
  });
  (0, _globals.describe)('Happy Path - Socket Connection', function () {
    (0, _globals.it)('should have connected state', function () {
      mockSocket.connected = true;
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      (0, _globals.expect)(socket.connected).toBe(true);
    });
    (0, _globals.it)('should have socket ID', function () {
      mockSocket.id = 'test-socket-id';
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      (0, _globals.expect)(socket.id).toBe('test-socket-id');
    });
  });
  (0, _globals.describe)('Happy Path - Event Handling', function () {
    (0, _globals.it)('should listen to events', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      var handler = _globals.jest.fn();
      socket.on('test-event', handler);
      (0, _globals.expect)(mockSocket.on).toHaveBeenCalledWith('test-event', handler);
    });
    (0, _globals.it)('should emit events', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      var data = {
        message: 'test'
      };
      socket.emit('test-event', data);
      (0, _globals.expect)(mockSocket.emit).toHaveBeenCalledWith('test-event', data);
    });
    (0, _globals.it)('should remove event listeners', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      var handler = _globals.jest.fn();
      socket.off('test-event', handler);
      (0, _globals.expect)(mockSocket.off).toHaveBeenCalledWith('test-event', handler);
    });
  });
  (0, _globals.describe)('Happy Path - Connection Management', function () {
    (0, _globals.it)('should connect to server', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      socket.connect();
      (0, _globals.expect)(mockSocket.connect).toHaveBeenCalled();
    });
    (0, _globals.it)('should disconnect from server', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      socket.disconnect();
      (0, _globals.expect)(mockSocket.disconnect).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle connection errors', function () {
      var errorHandler = _globals.jest.fn();
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      socket.on('connect_error', errorHandler);
      (0, _globals.expect)(mockSocket.on).toHaveBeenCalledWith('connect_error', errorHandler);
    });
    (0, _globals.it)('should handle reconnection errors', function () {
      var errorHandler = _globals.jest.fn();
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      socket.on('reconnect_error', errorHandler);
      (0, _globals.expect)(mockSocket.on).toHaveBeenCalledWith('reconnect_error', errorHandler);
    });
    (0, _globals.it)('should handle disconnection', function () {
      var disconnectHandler = _globals.jest.fn();
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      socket.on('disconnect', disconnectHandler);
      (0, _globals.expect)(mockSocket.on).toHaveBeenCalledWith('disconnect', disconnectHandler);
    });
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle undefined URL gracefully', function () {
      process.env.EXPO_PUBLIC_SOCKET_URL = undefined;
      process.env.SOCKET_URL = undefined;
      mockIo.mockReturnValueOnce(mockSocket);
      (0, _globals.expect)(function () {
        return (0, _socket2.getSocket)();
      }).not.toThrow();
      (0, _globals.expect)(_socket.io).toHaveBeenCalledWith('', _globals.expect.any(Object));
    });
    (0, _globals.it)('should handle disconnected state', function () {
      mockSocket.connected = false;
      mockSocket.disconnected = true;
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      (0, _globals.expect)(socket.connected).toBe(false);
      (0, _globals.expect)(socket.disconnected).toBe(true);
    });
    (0, _globals.it)('should handle multiple event listeners', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      var handler1 = _globals.jest.fn();
      var handler2 = _globals.jest.fn();
      socket.on('event', handler1);
      socket.on('event', handler2);
      (0, _globals.expect)(mockSocket.on).toHaveBeenCalledTimes(2);
    });
    (0, _globals.it)('should handle socket without ID', function () {
      mockSocket.id = undefined;
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      (0, _globals.expect)(socket.id).toBeUndefined();
    });
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should maintain connection state across calls', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket1 = (0, _socket2.getSocket)();
      socket1.connect();
      var socket2 = (0, _socket2.getSocket)();
      (0, _globals.expect)(mockSocket.connect).toHaveBeenCalled();
      (0, _globals.expect)(socket1).toBe(socket2);
    });
    (0, _globals.it)('should handle socket events properly', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      var testData = {
        id: '123',
        message: 'hello'
      };
      socket.emit('message', testData);
      socket.on('response', _globals.jest.fn());
      (0, _globals.expect)(mockSocket.emit).toHaveBeenCalledWith('message', testData);
      (0, _globals.expect)(mockSocket.on).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Reconnection', function () {
    (0, _globals.it)('should handle reconnection', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      var handler = _globals.jest.fn();
      socket.on('reconnect', handler);
      (0, _globals.expect)(mockSocket.on).toHaveBeenCalledWith('reconnect', handler);
    });
    (0, _globals.it)('should handle reconnection attempts', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      var handler = _globals.jest.fn();
      socket.on('reconnect_attempt', handler);
      (0, _globals.expect)(mockSocket.on).toHaveBeenCalledWith('reconnect_attempt', handler);
    });
  });
  (0, _globals.describe)('Type Safety', function () {
    (0, _globals.it)('should maintain socket type', function () {
      mockIo.mockReturnValueOnce(mockSocket);
      var socket = (0, _socket2.getSocket)();
      (0, _globals.expect)(socket).toBeInstanceOf(Object);
      (0, _globals.expect)(typeof socket.emit).toBe('function');
      (0, _globals.expect)(typeof socket.on).toBe('function');
      (0, _globals.expect)(typeof socket.disconnect).toBe('function');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,