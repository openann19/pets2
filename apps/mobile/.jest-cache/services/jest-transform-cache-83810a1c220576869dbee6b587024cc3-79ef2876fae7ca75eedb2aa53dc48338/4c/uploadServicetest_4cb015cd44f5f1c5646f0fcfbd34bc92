4cdc6c0107029c9dc5787be06c0a194e
"use strict";

_getJestObj().mock("../api", function () {
  return {
    api: {
      post: jest.fn()
    }
  };
});
_getJestObj().mock('expo-image-picker', function () {
  return {
    launchImageLibraryAsync: jest.fn(),
    launchCameraAsync: jest.fn(),
    requestMediaLibraryPermissionsAsync: jest.fn(),
    requestCameraPermissionsAsync: jest.fn(),
    MediaTypeOptions: {
      Images: 'Images'
    }
  };
});
_getJestObj().mock('expo-file-system', function () {
  return {
    uploadAsync: jest.fn(),
    FileSystemUploadType: {
      BINARY_CONTENT: 'BINARY_CONTENT'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _uploadService = require("../uploadService");
var _api = require("../api");
function _getJestObj() {
  var _require7 = require("@jest/globals"),
    jest = _require7.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApi = _api.api;
describe('UploadService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('uploadPhoto', function () {
    it('should upload photo successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['test'], 'test.jpg', {
        type: 'image/jpeg'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/photo.jpg',
        publicId: 'photo123'
      };
      mockApi.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _uploadService.uploadService.uploadPhoto(mockFile);
      expect(mockApi.post).toHaveBeenCalledWith('/upload/photo', expect.any(FormData));
      expect(result).toEqual(mockResponse);
    }));
    it('should handle upload failure', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['test'], 'test.jpg', {
        type: 'image/jpeg'
      });
      var mockError = new Error('Upload failed');
      mockApi.post.mockRejectedValue(mockError);
      yield expect(_uploadService.uploadService.uploadPhoto(mockFile)).rejects.toThrow('Upload failed');
    }));
  });
  describe('uploadVideo', function () {
    it('should upload video successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['test'], 'test.mp4', {
        type: 'video/mp4'
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/video.mp4',
        publicId: 'video123'
      };
      mockApi.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _uploadService.uploadService.uploadVideo(mockFile);
      expect(mockApi.post).toHaveBeenCalledWith('/upload/video', expect.any(FormData));
      expect(result).toEqual(mockResponse);
    }));
    it('should handle video upload failure', (0, _asyncToGenerator2.default)(function* () {
      var mockFile = new File(['test'], 'test.mp4', {
        type: 'video/mp4'
      });
      var mockError = new Error('Video upload failed');
      mockApi.post.mockRejectedValue(mockError);
      yield expect(_uploadService.uploadService.uploadVideo(mockFile)).rejects.toThrow('Video upload failed');
    }));
  });
  describe('deletePhoto', function () {
    it('should delete photo successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        message: 'Photo deleted successfully'
      };
      mockApi.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _uploadService.uploadService.deletePhoto('photo123');
      expect(mockApi.post).toHaveBeenCalledWith('/upload/delete', {
        publicId: 'photo123'
      });
      expect(result).toEqual(mockResponse);
    }));
    it('should handle delete failure', (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error('Delete failed');
      mockApi.post.mockRejectedValue(mockError);
      yield expect(_uploadService.uploadService.deletePhoto('invalid123')).rejects.toThrow('Delete failed');
    }));
  });
  describe('getUploadUrl', function () {
    it('should get signed upload URL', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        success: true,
        uploadUrl: 'https://example.com/upload',
        publicId: 'upload123'
      };
      mockApi.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _uploadService.uploadService.getUploadUrl('image', 'test.jpg');
      expect(mockApi.post).toHaveBeenCalledWith('/upload/presign', {
        type: 'image',
        filename: 'test.jpg'
      });
      expect(result).toEqual(mockResponse);
    }));
    it('should handle presign failure', (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error('Presign failed');
      mockApi.post.mockRejectedValue(mockError);
      yield expect(_uploadService.uploadService.getUploadUrl('image', 'test.jpg')).rejects.toThrow('Presign failed');
    }));
  });
  describe('ImagePicker integration', function () {
    beforeEach(function () {
      var _require = require('expo-image-picker'),
        requestMediaLibraryPermissionsAsync = _require.requestMediaLibraryPermissionsAsync;
      requestMediaLibraryPermissionsAsync.mockResolvedValue({
        granted: true
      });
    });
    it('should pick image from library', (0, _asyncToGenerator2.default)(function* () {
      var _require2 = require('expo-image-picker'),
        launchImageLibraryAsync = _require2.launchImageLibraryAsync;
      var mockAsset = {
        uri: 'file://test.jpg',
        width: 800,
        height: 600,
        type: 'image'
      };
      launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [mockAsset]
      });
      var mockResponse = {
        success: true,
        url: 'https://example.com/uploaded.jpg'
      };
      mockApi.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _uploadService.uploadService.pickAndUploadPhoto();
      expect(launchImageLibraryAsync).toHaveBeenCalledWith({
        mediaTypes: 'Images',
        allowsEditing: true,
        quality: 0.8,
        allowsMultipleSelection: false
      });
      expect(result).toEqual(mockResponse);
    }));
    it('should handle image picker cancellation', (0, _asyncToGenerator2.default)(function* () {
      var _require3 = require('expo-image-picker'),
        launchImageLibraryAsync = _require3.launchImageLibraryAsync;
      launchImageLibraryAsync.mockResolvedValue({
        canceled: true,
        assets: []
      });
      var result = yield _uploadService.uploadService.pickAndUploadPhoto();
      expect(result).toBeNull();
    }));
    it('should handle permission denial', (0, _asyncToGenerator2.default)(function* () {
      var _require4 = require('expo-image-picker'),
        requestMediaLibraryPermissionsAsync = _require4.requestMediaLibraryPermissionsAsync,
        launchImageLibraryAsync = _require4.launchImageLibraryAsync;
      requestMediaLibraryPermissionsAsync.mockResolvedValue({
        granted: false
      });
      yield expect(_uploadService.uploadService.pickAndUploadPhoto()).rejects.toThrow('Photo library access denied');
      expect(launchImageLibraryAsync).not.toHaveBeenCalled();
    }));
  });
  describe('Native upload helpers', function () {
    it('should upload directly to S3 for native', (0, _asyncToGenerator2.default)(function* () {
      var _require5 = require('expo-file-system'),
        uploadAsync = _require5.uploadAsync;
      uploadAsync.mockResolvedValue({
        status: 200,
        body: 'OK'
      });
      mockApi.post.mockResolvedValueOnce({
        data: {
          url: 'presign-url',
          key: 'file-key'
        }
      });
      mockApi.post.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      var result = yield _uploadService.uploadService.uploadPhotoNative('file://test.jpg', 'photo123');
      expect(uploadAsync).toHaveBeenCalledWith('presign-url', 'file://test.jpg', {
        httpMethod: 'PUT',
        headers: {
          'Content-Type': 'image/jpeg'
        },
        uploadType: 'BINARY_CONTENT'
      });
      expect(result).toBeUndefined();
    }));
    it('should handle native upload failure', (0, _asyncToGenerator2.default)(function* () {
      var _require6 = require('expo-file-system'),
        uploadAsync = _require6.uploadAsync;
      uploadAsync.mockRejectedValue(new Error('Upload failed'));
      mockApi.post.mockResolvedValue({
        data: {
          url: 'presign-url',
          key: 'file-key'
        }
      });
      yield expect(_uploadService.uploadService.uploadPhotoNative('file://test.jpg', 'photo123')).rejects.toThrow('Upload failed');
    }));
  });
  describe('File validation', function () {
    it('should validate image file types', function () {
      var validFiles = [new File(['test'], 'test.jpg', {
        type: 'image/jpeg'
      }), new File(['test'], 'test.png', {
        type: 'image/png'
      }), new File(['test'], 'test.webp', {
        type: 'image/webp'
      })];
      validFiles.forEach(function (file) {
        expect(function () {
          return _uploadService.uploadService.validateImageFile(file);
        }).not.toThrow();
      });
    });
    it('should reject invalid file types', function () {
      var invalidFile = new File(['test'], 'test.txt', {
        type: 'text/plain'
      });
      expect(function () {
        return _uploadService.uploadService.validateImageFile(invalidFile);
      }).toThrow('Invalid file type. Only images are allowed.');
    });
    it('should validate file size', function () {
      var largeFile = new File(['x'.repeat(11 * 1024 * 1024)], 'large.jpg', {
        type: 'image/jpeg'
      });
      expect(function () {
        return _uploadService.uploadService.validateFileSize(largeFile);
      }).toThrow('File size too large. Maximum size is 10MB.');
    });
    it('should accept valid file sizes', function () {
      var validFile = new File(['test'], 'small.jpg', {
        type: 'image/jpeg'
      });
      expect(function () {
        return _uploadService.uploadService.validateFileSize(validFile);
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,