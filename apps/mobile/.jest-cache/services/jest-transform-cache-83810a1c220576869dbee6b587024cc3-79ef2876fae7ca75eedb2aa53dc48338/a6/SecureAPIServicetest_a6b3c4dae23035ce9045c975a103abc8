36b9b92afedf05af85064f640be08683
"use strict";

_getJestObj().mock('react-native-ssl-pinning', function () {
  return {
    fetch: _globals.jest.fn()
  };
});
_getJestObj().mock("../logger", function () {
  return {
    logger: {
      debug: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn(),
      info: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _globals = require("@jest/globals");
var _SecureAPIService = require("../SecureAPIService");
var _reactNativeSslPinning = require("react-native-ssl-pinning");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockSslFetch = _reactNativeSslPinning.sslFetch;
(0, _globals.describe)('SecureAPIService', function () {
  var originalEnv = process.env;
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    process.env = _objectSpread({}, originalEnv);
    mockSslFetch.mockResolvedValueOnce({
      status: 200,
      ok: true,
      json: function () {
        var _json = (0, _asyncToGenerator2.default)(function* () {
          return {
            data: 'success'
          };
        });
        function json() {
          return _json.apply(this, arguments);
        }
        return json;
      }(),
      statusText: 'OK'
    });
  });
  (0, _globals.describe)('Happy Path - GET Request', function () {
    (0, _globals.it)('should make secure GET request', (0, _asyncToGenerator2.default)(function* () {
      var result = yield _SecureAPIService.secureAPI.get('/test');
      (0, _globals.expect)(result).toEqual({
        data: 'success'
      });
      (0, _globals.expect)(mockSslFetch).toHaveBeenCalled();
    }));
    (0, _globals.it)('should include SSL pinning configuration', (0, _asyncToGenerator2.default)(function* () {
      var _mockSslFetch$mock$ca;
      yield _SecureAPIService.secureAPI.get('/test');
      var callArgs = (_mockSslFetch$mock$ca = mockSslFetch.mock.calls[0]) == null ? void 0 : _mockSslFetch$mock$ca[1];
      (0, _globals.expect)(callArgs).toHaveProperty('sslPinning');
    }));
    (0, _globals.it)('should set authentication token', (0, _asyncToGenerator2.default)(function* () {
      var _mockSslFetch$mock$ca2;
      _SecureAPIService.secureAPI.setAuthToken('test-token');
      yield _SecureAPIService.secureAPI.get('/test');
      var callArgs = (_mockSslFetch$mock$ca2 = mockSslFetch.mock.calls[0]) == null ? void 0 : _mockSslFetch$mock$ca2[1];
      (0, _globals.expect)(callArgs == null ? void 0 : callArgs.headers).toHaveProperty('Authorization', 'Bearer test-token');
    }));
    (0, _globals.it)('should use correct timeout', (0, _asyncToGenerator2.default)(function* () {
      var _mockSslFetch$mock$ca3;
      yield _SecureAPIService.secureAPI.get('/test', {
        timeout: 60000
      });
      var callArgs = (_mockSslFetch$mock$ca3 = mockSslFetch.mock.calls[0]) == null ? void 0 : _mockSslFetch$mock$ca3[1];
      (0, _globals.expect)(callArgs == null ? void 0 : callArgs.timeoutInterval).toBe(60000);
    }));
  });
  (0, _globals.describe)('Happy Path - POST Request', function () {
    (0, _globals.it)('should make secure POST request', (0, _asyncToGenerator2.default)(function* () {
      var data = {
        name: 'test',
        value: 123
      };
      mockSslFetch.mockResolvedValueOnce({
        status: 201,
        ok: true,
        json: function () {
          var _json2 = (0, _asyncToGenerator2.default)(function* () {
            return {
              created: true
            };
          });
          function json() {
            return _json2.apply(this, arguments);
          }
          return json;
        }(),
        statusText: 'Created'
      });
      var result = yield _SecureAPIService.secureAPI.post('/test', data);
      (0, _globals.expect)(result).toEqual({
        created: true
      });
      (0, _globals.expect)(mockSslFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('/test'), _globals.expect.objectContaining({
        method: 'POST',
        body: JSON.stringify(data)
      }));
    }));
    (0, _globals.it)('should set Content-Type header', (0, _asyncToGenerator2.default)(function* () {
      var _mockSslFetch$mock$ca4;
      yield _SecureAPIService.secureAPI.post('/test', {
        data: 'test'
      });
      var callArgs = (_mockSslFetch$mock$ca4 = mockSslFetch.mock.calls[0]) == null ? void 0 : _mockSslFetch$mock$ca4[1];
      (0, _globals.expect)(callArgs == null ? void 0 : callArgs.headers['Content-Type']).toBe('application/json');
    }));
  });
  (0, _globals.describe)('Happy Path - PUT Request', function () {
    (0, _globals.it)('should make secure PUT request', (0, _asyncToGenerator2.default)(function* () {
      mockSslFetch.mockResolvedValueOnce({
        status: 200,
        ok: true,
        json: function () {
          var _json3 = (0, _asyncToGenerator2.default)(function* () {
            return {
              updated: true
            };
          });
          function json() {
            return _json3.apply(this, arguments);
          }
          return json;
        }(),
        statusText: 'OK'
      });
      var result = yield _SecureAPIService.secureAPI.put('/test', {
        id: 123
      });
      (0, _globals.expect)(result).toEqual({
        updated: true
      });
      (0, _globals.expect)(mockSslFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('/test'), _globals.expect.objectContaining({
        method: 'PUT'
      }));
    }));
  });
  (0, _globals.describe)('Happy Path - DELETE Request', function () {
    (0, _globals.it)('should make secure DELETE request', (0, _asyncToGenerator2.default)(function* () {
      mockSslFetch.mockResolvedValueOnce({
        status: 204,
        ok: true,
        json: function () {
          var _json4 = (0, _asyncToGenerator2.default)(function* () {
            return {};
          });
          function json() {
            return _json4.apply(this, arguments);
          }
          return json;
        }(),
        statusText: 'No Content'
      });
      var result = yield _SecureAPIService.secureAPI.delete('/test');
      (0, _globals.expect)(result).toEqual({});
      (0, _globals.expect)(mockSslFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('/test'), _globals.expect.objectContaining({
        method: 'DELETE'
      }));
    }));
  });
  (0, _globals.describe)('Happy Path - Certificate Validation', function () {
    (0, _globals.it)('should validate SSL certificate', (0, _asyncToGenerator2.default)(function* () {
      mockSslFetch.mockResolvedValueOnce({
        status: 200,
        ok: true,
        json: function () {
          var _json5 = (0, _asyncToGenerator2.default)(function* () {
            return {};
          });
          function json() {
            return _json5.apply(this, arguments);
          }
          return json;
        }(),
        statusText: 'OK'
      });
      var isValid = yield _SecureAPIService.secureAPI.validateCertificate('api.pawfectmatch.com');
      (0, _globals.expect)(isValid).toBe(true);
    }));
    (0, _globals.it)('should return security metrics', function () {
      var metrics = _SecureAPIService.secureAPI.getSecurityMetrics();
      (0, _globals.expect)(metrics.sslEnabled).toBe(true);
      (0, _globals.expect)(metrics.certificatePinning).toBe(true);
      (0, _globals.expect)(Array.isArray(metrics.supportedDomains)).toBe(true);
    });
  });
  (0, _globals.describe)('Error Handling - Retry Logic', function () {
    (0, _globals.it)('should retry failed requests', (0, _asyncToGenerator2.default)(function* () {
      mockSslFetch.mockRejectedValueOnce(new Error('Network error')).mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({
        status: 200,
        ok: true,
        json: function () {
          var _json6 = (0, _asyncToGenerator2.default)(function* () {
            return {
              data: 'success'
            };
          });
          function json() {
            return _json6.apply(this, arguments);
          }
          return json;
        }(),
        statusText: 'OK'
      });
      var result = yield _SecureAPIService.secureAPI.get('/test');
      (0, _globals.expect)(result).toEqual({
        data: 'success'
      });
      (0, _globals.expect)(mockSslFetch).toHaveBeenCalledTimes(3);
    }));
    (0, _globals.it)('should throw error after all retries fail', (0, _asyncToGenerator2.default)(function* () {
      mockSslFetch.mockRejectedValue(new Error('Persistent error'));
      yield (0, _globals.expect)(_SecureAPIService.secureAPI.get('/test', {
        retries: 2
      })).rejects.toThrow();
      (0, _globals.expect)(mockSslFetch).toHaveBeenCalledTimes(2);
    }));
    (0, _globals.it)('should use exponential backoff for retries', (0, _asyncToGenerator2.default)(function* () {
      var callTimes = [];
      var originalSetTimeout = setTimeout;
      _globals.jest.spyOn(global, 'setTimeout').mockImplementation(function (fn, delay) {
        callTimes.push(delay);
        return originalSetTimeout(fn, delay);
      });
      mockSslFetch.mockRejectedValue(new Error('Network error'));
      try {
        yield _SecureAPIService.secureAPI.get('/test', {
          retries: 2,
          retryDelay: 1000
        });
      } catch (_unused) {}
      (0, _globals.expect)(setTimeout).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle HTTP errors', (0, _asyncToGenerator2.default)(function* () {
      mockSslFetch.mockResolvedValueOnce({
        status: 404,
        ok: false,
        statusText: 'Not Found'
      });
      yield (0, _globals.expect)(_SecureAPIService.secureAPI.get('/not-found')).rejects.toThrow('HTTP 404');
    }));
    (0, _globals.it)('should handle SSL pinning failures', (0, _asyncToGenerator2.default)(function* () {
      process.env.NODE_ENV = 'development';
      __DEV__ = true;
      var result = yield _SecureAPIService.secureAPI.get('/test');
      (0, _globals.expect)(result).toBeDefined();
    }));
    (0, _globals.it)('should clear authentication token', function () {
      _SecureAPIService.secureAPI.setAuthToken('test-token');
      (0, _globals.expect)(function () {
        return _SecureAPIService.secureAPI.clearAuthToken();
      }).not.toThrow();
    });
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty response body', (0, _asyncToGenerator2.default)(function* () {
      mockSslFetch.mockResolvedValueOnce({
        status: 200,
        ok: true,
        json: function () {
          var _json7 = (0, _asyncToGenerator2.default)(function* () {
            return null;
          });
          function json() {
            return _json7.apply(this, arguments);
          }
          return json;
        }(),
        statusText: 'OK'
      });
      var result = yield _SecureAPIService.secureAPI.get('/empty');
      (0, _globals.expect)(result).toBeNull();
    }));
    (0, _globals.it)('should handle large response bodies', (0, _asyncToGenerator2.default)(function* () {
      var largeData = {
        data: 'x'.repeat(100000)
      };
      mockSslFetch.mockResolvedValueOnce({
        status: 200,
        ok: true,
        json: function () {
          var _json8 = (0, _asyncToGenerator2.default)(function* () {
            return largeData;
          });
          function json() {
            return _json8.apply(this, arguments);
          }
          return json;
        }(),
        statusText: 'OK'
      });
      var result = yield _SecureAPIService.secureAPI.get('/large');
      (0, _globals.expect)(result).toEqual(largeData);
    }));
    (0, _globals.it)('should handle concurrent requests', (0, _asyncToGenerator2.default)(function* () {
      mockSslFetch.mockResolvedValue({
        status: 200,
        ok: true,
        json: function () {
          var _json9 = (0, _asyncToGenerator2.default)(function* () {
            return {
              id: Math.random()
            };
          });
          function json() {
            return _json9.apply(this, arguments);
          }
          return json;
        }(),
        statusText: 'OK'
      });
      var promises = Array.from({
        length: 10
      }, function () {
        return _SecureAPIService.secureAPI.get('/test');
      });
      var results = yield Promise.all(promises);
      (0, _globals.expect)(results).toHaveLength(10);
      (0, _globals.expect)(mockSslFetch).toHaveBeenCalledTimes(10);
    }));
    (0, _globals.it)('should handle timeout errors', (0, _asyncToGenerator2.default)(function* () {
      mockSslFetch.mockImplementation(function () {
        return new Promise(function (_, reject) {
          return setTimeout(function () {
            return reject(new Error('Timeout'));
          }, 1);
        });
      });
      yield (0, _globals.expect)(_SecureAPIService.secureAPI.get('/slow')).rejects.toThrow();
    }));
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should maintain authentication across requests', (0, _asyncToGenerator2.default)(function* () {
      var _calls$, _calls$$, _calls$$$headers, _calls$2, _calls$2$, _calls$2$$headers;
      _SecureAPIService.secureAPI.setAuthToken('persistent-token');
      yield _SecureAPIService.secureAPI.get('/test1');
      yield _SecureAPIService.secureAPI.post('/test2', {
        data: 'test'
      });
      var calls = mockSslFetch.mock.calls;
      (0, _globals.expect)((_calls$ = calls[0]) == null ? void 0 : (_calls$$ = _calls$[1]) == null ? void 0 : (_calls$$$headers = _calls$$.headers) == null ? void 0 : _calls$$$headers.Authorization).toBe('Bearer persistent-token');
      (0, _globals.expect)((_calls$2 = calls[1]) == null ? void 0 : (_calls$2$ = _calls$2[1]) == null ? void 0 : (_calls$2$$headers = _calls$2$.headers) == null ? void 0 : _calls$2$$headers.Authorization).toBe('Bearer persistent-token');
    }));
    (0, _globals.it)('should integrate with SSL pinning', (0, _asyncToGenerator2.default)(function* () {
      var _mockSslFetch$mock$ca5;
      yield _SecureAPIService.secureAPI.get('/test');
      var callArgs = (_mockSslFetch$mock$ca5 = mockSslFetch.mock.calls[0]) == null ? void 0 : _mockSslFetch$mock$ca5[1];
      (0, _globals.expect)(callArgs).toHaveProperty('sslPinning');
    }));
  });
  (0, _globals.describe)('Type Safety', function () {
    (0, _globals.it)('should maintain type safety for requests', (0, _asyncToGenerator2.default)(function* () {
      mockSslFetch.mockResolvedValueOnce({
        status: 200,
        ok: true,
        json: function () {
          var _json0 = (0, _asyncToGenerator2.default)(function* () {
            return {
              id: '123',
              name: 'test'
            };
          });
          function json() {
            return _json0.apply(this, arguments);
          }
          return json;
        }(),
        statusText: 'OK'
      });
      var result = yield _SecureAPIService.secureAPI.get('/typed');
      (0, _globals.expect)(typeof result.id).toBe('string');
      (0, _globals.expect)(typeof result.name).toBe('string');
    }));
    (0, _globals.it)('should handle SecureAPIError properly', (0, _asyncToGenerator2.default)(function* () {
      var originalError = new Error('Original error');
      try {
        throw new _SecureAPIService.SecureAPIError('Wrapper error', originalError);
      } catch (error) {
        (0, _globals.expect)(error).toBeInstanceOf(_SecureAPIService.SecureAPIError);
        (0, _globals.expect)(error.message).toBe('Wrapper error');
        (0, _globals.expect)(error.originalError).toBe(originalError);
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,