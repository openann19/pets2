80ef4e961f9b05cba7c6cab307332131
"use strict";

var React = require('react');
var View = 'View';
var Text = 'Text';
var TouchableOpacity = 'TouchableOpacity';
var TouchableHighlight = 'TouchableHighlight';
var TouchableWithoutFeedback = 'TouchableWithoutFeedback';
var ScrollView = 'ScrollView';
var FlatList = 'FlatList';
var SectionList = 'SectionList';
var Image = 'Image';
var TextInput = 'TextInput';
module.exports = {
  View: View,
  Text: Text,
  TouchableOpacity: TouchableOpacity,
  TouchableHighlight: TouchableHighlight,
  TouchableWithoutFeedback: TouchableWithoutFeedback,
  ScrollView: ScrollView,
  FlatList: FlatList,
  SectionList: SectionList,
  Image: Image,
  TextInput: TextInput,
  SafeAreaView: 'SafeAreaView',
  KeyboardAvoidingView: 'KeyboardAvoidingView',
  Modal: 'Modal',
  Pressable: 'Pressable',
  Button: 'Button',
  ActivityIndicator: 'ActivityIndicator',
  Platform: {
    OS: 'ios',
    Version: 123,
    isTesting: true,
    select: function select(objs) {
      return objs.ios || objs.default;
    }
  },
  Alert: {
    alert: jest.fn()
  },
  Linking: {
    openURL: jest.fn(function () {
      return Promise.resolve(true);
    }),
    canOpenURL: jest.fn(function () {
      return Promise.resolve(true);
    }),
    getInitialURL: jest.fn(function () {
      return Promise.resolve(null);
    })
  },
  Dimensions: {
    get: jest.fn(function () {
      return {
        width: 375,
        height: 667,
        scale: 2,
        fontScale: 1
      };
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  },
  StyleSheet: {
    create: function create(styles) {
      return styles;
    },
    flatten: function flatten(style) {
      return style;
    },
    compose: function compose(style1, style2) {
      return [style1, style2];
    }
  },
  PanResponder: {
    create: jest.fn(function () {
      return {
        panHandlers: {
          onStartShouldSetPanResponder: jest.fn(),
          onMoveShouldSetPanResponder: jest.fn(),
          onPanResponderGrant: jest.fn(),
          onPanResponderMove: jest.fn(),
          onPanResponderRelease: jest.fn(),
          onPanResponderTerminate: jest.fn()
        }
      };
    })
  },
  Animated: {
    View: 'Animated.View',
    Text: 'Animated.Text',
    Image: 'Animated.Image',
    ScrollView: 'Animated.ScrollView',
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          return callback && callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    spring: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          return callback && callback({
            finished: true
          });
        }),
        stop: jest.fn(),
        reset: jest.fn()
      };
    }),
    sequence: jest.fn(function (animations) {
      return {
        start: jest.fn(function (callback) {
          return callback && callback({
            finished: true
          });
        })
      };
    }),
    parallel: jest.fn(function (animations) {
      return {
        start: jest.fn(function (callback) {
          return callback && callback({
            finished: true
          });
        })
      };
    }),
    delay: jest.fn(function (time) {
      return {
        start: jest.fn(function (callback) {
          return callback && callback({
            finished: true
          });
        })
      };
    }),
    loop: jest.fn(function (animation) {
      return {
        start: jest.fn(function (callback) {
          return callback && callback({
            finished: true
          });
        }),
        stop: jest.fn()
      };
    }),
    Value: jest.fn(function (initial) {
      var _this = this;
      this.setValue = jest.fn();
      this.interpolate = jest.fn(function () {
        return _this;
      });
      this.addListener = jest.fn();
      this.removeListener = jest.fn();
      this.removeAllListeners = jest.fn();
      this.stopAnimation = jest.fn();
      this.resetAnimation = jest.fn();
      this._value = initial;
      return this;
    }),
    ValueXY: jest.fn(function (initial) {
      this.setValue = jest.fn();
      this.setOffset = jest.fn();
      this.flattenOffset = jest.fn();
      this.extractOffset = jest.fn();
      this.addListener = jest.fn();
      this.removeListener = jest.fn();
      this.stopAnimation = jest.fn();
      this.resetAnimation = jest.fn();
      this.x = new module.exports.Animated.Value(initial ? initial.x : 0);
      this.y = new module.exports.Animated.Value(initial ? initial.y : 0);
      return this;
    }),
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    },
    event: jest.fn(function (argMapping, config) {
      return jest.fn();
    })
  },
  Easing: {
    linear: jest.fn(),
    ease: jest.fn(),
    quad: jest.fn(),
    cubic: jest.fn(),
    poly: jest.fn(),
    sin: jest.fn(),
    circle: jest.fn(),
    exp: jest.fn(),
    elastic: jest.fn(),
    back: jest.fn(),
    bounce: jest.fn(),
    bezier: jest.fn(),
    in: jest.fn(),
    out: jest.fn(),
    inOut: jest.fn()
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,