{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_netinfo","_core","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","OfflineSyncService","_classCallCheck2","queue","isInitialized","isOnline","syncInProgress","syncListeners","QUEUE_KEY","SYNC_STATUS_KEY","MAX_RETRY_COUNT","SYNC_INTERVAL","_createClass2","key","value","_initialize","_asyncToGenerator2","loadQueue","setupNetworkMonitoring","startBackgroundSync","logger","info","error","initialize","apply","arguments","_queueApiCall","endpoint","method","length","undefined","data","priority","onConflict","queueItem","id","String","Date","now","Math","random","toString","substring","type","timestamp","retryCount","push","persistQueue","processQueue","notifyListeners","queueApiCall","_x","_queueUserAction","actionType","queueUserAction","_x2","_x3","getSyncStatus","_this","lastSyncTime","getLastSyncTime","pendingItems","failedItems","filter","item","isSyncing","_syncNow","Error","syncNow","_clearFailedItems","_this2","clearFailedItems","addSyncListener","listener","_this3","index","indexOf","splice","_loadQueue","storedQueue","AsyncStorage","getItem","JSON","parse","itemCount","_persistQueue","setItem","stringify","_this4","NetInfo","addEventListener","state","_state$isConnected","wasOnline","isConnected","fetch","then","_state$isConnected2","_this5","setInterval","_processQueue","_this6","priorityOrder","critical","high","normal","low","sort","a","b","itemsToProcess","_toConsumableArray2","successfulItems","processQueueItem","itemId","includes","updateLastSyncTime","processed","failed","remaining","_processQueueItem","_yield$import","Promise","resolve","api","apiService","request","body","_x4","_updateLastSyncTime","_this7","syncStatus","_unused","status","forEach","getInstance","instance","offlineSync","exports","_default"],"sources":["OfflineSyncService.ts"],"sourcesContent":["/**\n * Offline Sync Service for PawfectMatch Mobile App\n * Handles offline data persistence, background sync, and conflict resolution\n */\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport type { NetInfoState } from \"@react-native-community/netinfo\";\nimport { logger } from \"@pawfectmatch/core\";\n\ninterface OfflineQueueItem {\n  id: string;\n  type: \"api\" | \"user_action\";\n  endpoint: string;\n  method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n  data?: Record<string, unknown>;\n  timestamp: number;\n  retryCount: number;\n  priority: \"low\" | \"normal\" | \"high\" | \"critical\";\n  onConflict: \"overwrite\" | \"merge\" | \"skip\";\n}\n\ninterface SyncStatus {\n  isOnline: boolean;\n  lastSyncTime: number | null;\n  pendingItems: number;\n  failedItems: number;\n  isSyncing: boolean;\n}\n\nclass OfflineSyncService {\n  private static instance: OfflineSyncService | undefined;\n  private queue: OfflineQueueItem[] = [];\n  private isInitialized = false;\n  private isOnline = false;\n  private syncInProgress = false;\n  private syncListeners: ((status: SyncStatus) => void)[] = [];\n\n  private readonly QUEUE_KEY = \"@pawfectmatch_offline_queue\";\n  private readonly SYNC_STATUS_KEY = \"@pawfectmatch_sync_status\";\n  private readonly MAX_RETRY_COUNT = 3;\n  private readonly SYNC_INTERVAL = 30000; // 30 seconds\n\n  private constructor() {}\n\n  static getInstance(): OfflineSyncService {\n    if (OfflineSyncService.instance === undefined) {\n      OfflineSyncService.instance = new OfflineSyncService();\n    }\n    return OfflineSyncService.instance;\n  }\n\n  /**\n   * Initialize the offline sync service\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      // Load persisted queue\n      await this.loadQueue();\n\n      // Setup network monitoring\n      this.setupNetworkMonitoring();\n\n      // Start background sync\n      this.startBackgroundSync();\n\n      this.isInitialized = true;\n      logger.info(\"Offline sync service initialized\");\n    } catch (error) {\n      logger.error(\"Failed to initialize offline sync service\", { error });\n    }\n  }\n\n  /**\n   * Add an API call to the offline queue\n   */\n  async queueApiCall(\n    endpoint: string,\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" = \"GET\",\n    data?: Record<string, unknown>,\n    priority: OfflineQueueItem[\"priority\"] = \"normal\",\n    onConflict: OfflineQueueItem[\"onConflict\"] = \"overwrite\",\n  ): Promise<string> {\n    const queueItem: OfflineQueueItem = {\n      id: `${String(Date.now())}_${Math.random().toString(36).substring(2, 11)}`,\n      type: \"api\",\n      endpoint,\n      method,\n      data: data ?? {},\n      timestamp: Date.now(),\n      retryCount: 0,\n      priority,\n      onConflict,\n    };\n\n    this.queue.push(queueItem);\n    await this.persistQueue();\n\n    logger.info(\"API call queued for offline sync\", {\n      id: queueItem.id,\n      endpoint,\n      method,\n      priority,\n    });\n\n    // Try to sync immediately if online\n    if (this.isOnline) {\n      void this.processQueue();\n    }\n\n    this.notifyListeners();\n    return queueItem.id;\n  }\n\n  /**\n   * Queue a user action for offline processing\n   */\n  async queueUserAction(\n    actionType: string,\n    data: Record<string, unknown>,\n    priority: OfflineQueueItem[\"priority\"] = \"normal\",\n  ): Promise<string> {\n    const queueItem: OfflineQueueItem = {\n      id: `${String(Date.now())}_${Math.random().toString(36).substring(2, 11)}`,\n      type: \"user_action\",\n      endpoint: `/actions/${actionType}`,\n      method: \"POST\",\n      data,\n      timestamp: Date.now(),\n      retryCount: 0,\n      priority,\n      onConflict: \"overwrite\", // Default conflict resolution for user actions\n    };\n\n    this.queue.push(queueItem);\n    await this.persistQueue();\n\n    logger.info(\"User action queued for offline sync\", {\n      id: queueItem.id,\n      actionType,\n      priority,\n    });\n\n    if (this.isOnline) {\n      void this.processQueue();\n    }\n\n    this.notifyListeners();\n    return queueItem.id;\n  }\n\n  /**\n   * Get current sync status\n   */\n  getSyncStatus(): SyncStatus {\n    return {\n      isOnline: this.isOnline,\n      lastSyncTime: this.getLastSyncTime(),\n      pendingItems: this.queue.length,\n      failedItems: this.queue.filter(\n        (item) => item.retryCount >= this.MAX_RETRY_COUNT,\n      ).length,\n      isSyncing: this.syncInProgress,\n    };\n  }\n\n  /**\n   * Manually trigger sync\n   */\n  async syncNow(): Promise<void> {\n    if (!this.isOnline) {\n      throw new Error(\"Cannot sync while offline\");\n    }\n\n    await this.processQueue();\n  }\n\n  /**\n   * Clear failed items from queue\n   */\n  async clearFailedItems(): Promise<void> {\n    this.queue = this.queue.filter(\n      (item) => item.retryCount < this.MAX_RETRY_COUNT,\n    );\n    await this.persistQueue();\n    this.notifyListeners();\n    logger.info(\"Failed items cleared from offline queue\");\n  }\n\n  /**\n   * Add sync status listener\n   */\n  addSyncListener(listener: (status: SyncStatus) => void): () => void {\n    this.syncListeners.push(listener);\n\n    // Return unsubscribe function\n    return () => {\n      const index = this.syncListeners.indexOf(listener);\n      if (index > -1) {\n        this.syncListeners.splice(index, 1);\n      }\n    };\n  }\n\n  // Private methods\n\n  private async loadQueue(): Promise<void> {\n    try {\n      const storedQueue = await AsyncStorage.getItem(this.QUEUE_KEY);\n      if (storedQueue !== null && storedQueue !== \"\") {\n        this.queue = JSON.parse(storedQueue) as OfflineQueueItem[];\n        logger.info(\"Offline queue loaded\", { itemCount: this.queue.length });\n      }\n    } catch (error) {\n      logger.error(\"Failed to load offline queue\", { error });\n      this.queue = [];\n    }\n  }\n\n  private async persistQueue(): Promise<void> {\n    try {\n      await AsyncStorage.setItem(this.QUEUE_KEY, JSON.stringify(this.queue));\n    } catch (error) {\n      logger.error(\"Failed to persist offline queue\", { error });\n    }\n  }\n\n  private setupNetworkMonitoring(): void {\n    NetInfo.addEventListener((state: NetInfoState) => {\n      const wasOnline = this.isOnline;\n      this.isOnline = state.isConnected ?? false;\n\n      if (!wasOnline && this.isOnline) {\n        logger.info(\"Network connection restored, starting sync\");\n        void this.processQueue();\n      } else if (wasOnline && !this.isOnline) {\n        logger.info(\"Network connection lost\");\n      }\n\n      this.notifyListeners();\n    });\n\n    // Get initial state\n    void NetInfo.fetch().then((state: NetInfoState) => {\n      this.isOnline = state.isConnected ?? false;\n      this.notifyListeners();\n    });\n  }\n\n  private startBackgroundSync(): void {\n    setInterval(() => {\n      if (this.isOnline && !this.syncInProgress && this.queue.length > 0) {\n        void this.processQueue();\n      }\n    }, this.SYNC_INTERVAL);\n  }\n\n  private async processQueue(): Promise<void> {\n    if (this.syncInProgress || !this.isOnline || this.queue.length === 0) {\n      return;\n    }\n\n    this.syncInProgress = true;\n    this.notifyListeners();\n\n    try {\n      // Sort queue by priority (critical > high > normal > low)\n      const priorityOrder = { critical: 4, high: 3, normal: 2, low: 1 };\n      this.queue.sort(\n        (a, b) => priorityOrder[b.priority] - priorityOrder[a.priority],\n      );\n\n      const itemsToProcess = [...this.queue];\n      const successfulItems: string[] = [];\n      const failedItems: string[] = [];\n\n      for (const item of itemsToProcess) {\n        try {\n          await this.processQueueItem(item);\n          successfulItems.push(item.id);\n        } catch (error) {\n          logger.error(\"Failed to process queue item\", {\n            itemId: item.id,\n            endpoint: item.endpoint,\n            error,\n          });\n\n          item.retryCount++;\n\n          if (item.retryCount >= this.MAX_RETRY_COUNT) {\n            failedItems.push(item.id);\n          }\n        }\n      }\n\n      // Remove successful items from queue\n      this.queue = this.queue.filter(\n        (item) => !successfulItems.includes(item.id),\n      );\n\n      // Keep failed items for manual retry\n      this.queue = this.queue.filter(\n        (item) =>\n          !failedItems.includes(item.id) ||\n          item.retryCount < this.MAX_RETRY_COUNT,\n      );\n\n      await this.persistQueue();\n      await this.updateLastSyncTime();\n\n      logger.info(\"Queue processing completed\", {\n        processed: successfulItems.length,\n        failed: failedItems.length,\n        remaining: this.queue.length,\n      });\n    } catch (error) {\n      logger.error(\"Queue processing failed\", { error });\n    } finally {\n      this.syncInProgress = false;\n      this.notifyListeners();\n    }\n  }\n\n  private async processQueueItem(item: OfflineQueueItem): Promise<void> {\n    const { api } = await import(\"./api\");\n\n    // Import the API service dynamically to avoid circular dependencies\n    const apiService = api;\n\n    switch (item.method) {\n      case \"GET\":\n        await apiService.request(item.endpoint);\n        break;\n      case \"POST\":\n        await apiService.request(item.endpoint, {\n          method: \"POST\",\n          body: JSON.stringify(item.data),\n        });\n        break;\n      case \"PUT\":\n        await apiService.request(item.endpoint, {\n          method: \"PUT\",\n          body: JSON.stringify(item.data),\n        });\n        break;\n      case \"DELETE\":\n        await apiService.request(item.endpoint, {\n          method: \"DELETE\",\n        });\n        break;\n      default:\n        throw new Error(`Unsupported HTTP method: ${String(item.method)}`);\n    }\n  }\n\n  private async updateLastSyncTime(): Promise<void> {\n    try {\n      const syncStatus: SyncStatus = {\n        isOnline: this.isOnline,\n        lastSyncTime: Date.now(),\n        pendingItems: this.queue.length,\n        failedItems: this.queue.filter(\n          (item) => item.retryCount >= this.MAX_RETRY_COUNT,\n        ).length,\n        isSyncing: this.syncInProgress,\n      };\n      await AsyncStorage.setItem(\n        this.SYNC_STATUS_KEY,\n        JSON.stringify(syncStatus),\n      );\n    } catch (error) {\n      logger.error(\"Failed to update last sync time\", { error });\n    }\n  }\n\n  private getLastSyncTime(): number | null {\n    try {\n      // This would be implemented to read from AsyncStorage\n      // For now, return current time as placeholder\n      return Date.now();\n    } catch {\n      return null;\n    }\n  }\n\n  private notifyListeners(): void {\n    const status = this.getSyncStatus();\n    this.syncListeners.forEach((listener) => {\n      try {\n        listener(status);\n      } catch (error) {\n        logger.error(\"Error notifying sync listener\", { error });\n      }\n    });\n  }\n}\n\n// Export singleton instance\nexport const offlineSync = OfflineSyncService.getInstance();\n\n// Export types\nexport type { OfflineQueueItem, SyncStatus };\nexport default offlineSync;\n"],"mappings":"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","ignoreList":[]}