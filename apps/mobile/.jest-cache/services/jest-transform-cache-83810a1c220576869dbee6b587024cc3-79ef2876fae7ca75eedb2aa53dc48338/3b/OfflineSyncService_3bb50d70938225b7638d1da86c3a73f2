3889fb5077aadf2a836bdcf8c4ce90f4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.offlineSync = exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _core = require("@pawfectmatch/core");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var OfflineSyncService = function () {
  function OfflineSyncService() {
    (0, _classCallCheck2.default)(this, OfflineSyncService);
    this.queue = [];
    this.isInitialized = false;
    this.isOnline = false;
    this.syncInProgress = false;
    this.syncListeners = [];
    this.QUEUE_KEY = "@pawfectmatch_offline_queue";
    this.SYNC_STATUS_KEY = "@pawfectmatch_sync_status";
    this.MAX_RETRY_COUNT = 3;
    this.SYNC_INTERVAL = 30000;
  }
  return (0, _createClass2.default)(OfflineSyncService, [{
    key: "initialize",
    value: (function () {
      var _initialize = (0, _asyncToGenerator2.default)(function* () {
        if (this.isInitialized) return;
        try {
          yield this.loadQueue();
          this.setupNetworkMonitoring();
          this.startBackgroundSync();
          this.isInitialized = true;
          _core.logger.info("Offline sync service initialized");
        } catch (error) {
          _core.logger.error("Failed to initialize offline sync service", {
            error: error
          });
        }
      });
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }())
  }, {
    key: "queueApiCall",
    value: (function () {
      var _queueApiCall = (0, _asyncToGenerator2.default)(function* (endpoint) {
        var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "GET";
        var data = arguments.length > 2 ? arguments[2] : undefined;
        var priority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "normal";
        var onConflict = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "overwrite";
        var queueItem = {
          id: `${String(Date.now())}_${Math.random().toString(36).substring(2, 11)}`,
          type: "api",
          endpoint: endpoint,
          method: method,
          data: data != null ? data : {},
          timestamp: Date.now(),
          retryCount: 0,
          priority: priority,
          onConflict: onConflict
        };
        this.queue.push(queueItem);
        yield this.persistQueue();
        _core.logger.info("API call queued for offline sync", {
          id: queueItem.id,
          endpoint: endpoint,
          method: method,
          priority: priority
        });
        if (this.isOnline) {
          void this.processQueue();
        }
        this.notifyListeners();
        return queueItem.id;
      });
      function queueApiCall(_x) {
        return _queueApiCall.apply(this, arguments);
      }
      return queueApiCall;
    }())
  }, {
    key: "queueUserAction",
    value: (function () {
      var _queueUserAction = (0, _asyncToGenerator2.default)(function* (actionType, data) {
        var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "normal";
        var queueItem = {
          id: `${String(Date.now())}_${Math.random().toString(36).substring(2, 11)}`,
          type: "user_action",
          endpoint: `/actions/${actionType}`,
          method: "POST",
          data: data,
          timestamp: Date.now(),
          retryCount: 0,
          priority: priority,
          onConflict: "overwrite"
        };
        this.queue.push(queueItem);
        yield this.persistQueue();
        _core.logger.info("User action queued for offline sync", {
          id: queueItem.id,
          actionType: actionType,
          priority: priority
        });
        if (this.isOnline) {
          void this.processQueue();
        }
        this.notifyListeners();
        return queueItem.id;
      });
      function queueUserAction(_x2, _x3) {
        return _queueUserAction.apply(this, arguments);
      }
      return queueUserAction;
    }())
  }, {
    key: "getSyncStatus",
    value: function getSyncStatus() {
      var _this = this;
      return {
        isOnline: this.isOnline,
        lastSyncTime: this.getLastSyncTime(),
        pendingItems: this.queue.length,
        failedItems: this.queue.filter(function (item) {
          return item.retryCount >= _this.MAX_RETRY_COUNT;
        }).length,
        isSyncing: this.syncInProgress
      };
    }
  }, {
    key: "syncNow",
    value: (function () {
      var _syncNow = (0, _asyncToGenerator2.default)(function* () {
        if (!this.isOnline) {
          throw new Error("Cannot sync while offline");
        }
        yield this.processQueue();
      });
      function syncNow() {
        return _syncNow.apply(this, arguments);
      }
      return syncNow;
    }())
  }, {
    key: "clearFailedItems",
    value: (function () {
      var _clearFailedItems = (0, _asyncToGenerator2.default)(function* () {
        var _this2 = this;
        this.queue = this.queue.filter(function (item) {
          return item.retryCount < _this2.MAX_RETRY_COUNT;
        });
        yield this.persistQueue();
        this.notifyListeners();
        _core.logger.info("Failed items cleared from offline queue");
      });
      function clearFailedItems() {
        return _clearFailedItems.apply(this, arguments);
      }
      return clearFailedItems;
    }())
  }, {
    key: "addSyncListener",
    value: function addSyncListener(listener) {
      var _this3 = this;
      this.syncListeners.push(listener);
      return function () {
        var index = _this3.syncListeners.indexOf(listener);
        if (index > -1) {
          _this3.syncListeners.splice(index, 1);
        }
      };
    }
  }, {
    key: "loadQueue",
    value: function () {
      var _loadQueue = (0, _asyncToGenerator2.default)(function* () {
        try {
          var storedQueue = yield _asyncStorage.default.getItem(this.QUEUE_KEY);
          if (storedQueue !== null && storedQueue !== "") {
            this.queue = JSON.parse(storedQueue);
            _core.logger.info("Offline queue loaded", {
              itemCount: this.queue.length
            });
          }
        } catch (error) {
          _core.logger.error("Failed to load offline queue", {
            error: error
          });
          this.queue = [];
        }
      });
      function loadQueue() {
        return _loadQueue.apply(this, arguments);
      }
      return loadQueue;
    }()
  }, {
    key: "persistQueue",
    value: function () {
      var _persistQueue = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield _asyncStorage.default.setItem(this.QUEUE_KEY, JSON.stringify(this.queue));
        } catch (error) {
          _core.logger.error("Failed to persist offline queue", {
            error: error
          });
        }
      });
      function persistQueue() {
        return _persistQueue.apply(this, arguments);
      }
      return persistQueue;
    }()
  }, {
    key: "setupNetworkMonitoring",
    value: function setupNetworkMonitoring() {
      var _this4 = this;
      _netinfo.default.addEventListener(function (state) {
        var _state$isConnected;
        var wasOnline = _this4.isOnline;
        _this4.isOnline = (_state$isConnected = state.isConnected) != null ? _state$isConnected : false;
        if (!wasOnline && _this4.isOnline) {
          _core.logger.info("Network connection restored, starting sync");
          void _this4.processQueue();
        } else if (wasOnline && !_this4.isOnline) {
          _core.logger.info("Network connection lost");
        }
        _this4.notifyListeners();
      });
      void _netinfo.default.fetch().then(function (state) {
        var _state$isConnected2;
        _this4.isOnline = (_state$isConnected2 = state.isConnected) != null ? _state$isConnected2 : false;
        _this4.notifyListeners();
      });
    }
  }, {
    key: "startBackgroundSync",
    value: function startBackgroundSync() {
      var _this5 = this;
      setInterval(function () {
        if (_this5.isOnline && !_this5.syncInProgress && _this5.queue.length > 0) {
          void _this5.processQueue();
        }
      }, this.SYNC_INTERVAL);
    }
  }, {
    key: "processQueue",
    value: function () {
      var _processQueue = (0, _asyncToGenerator2.default)(function* () {
        var _this6 = this;
        if (this.syncInProgress || !this.isOnline || this.queue.length === 0) {
          return;
        }
        this.syncInProgress = true;
        this.notifyListeners();
        try {
          var priorityOrder = {
            critical: 4,
            high: 3,
            normal: 2,
            low: 1
          };
          this.queue.sort(function (a, b) {
            return priorityOrder[b.priority] - priorityOrder[a.priority];
          });
          var itemsToProcess = (0, _toConsumableArray2.default)(this.queue);
          var successfulItems = [];
          var failedItems = [];
          for (var item of itemsToProcess) {
            try {
              yield this.processQueueItem(item);
              successfulItems.push(item.id);
            } catch (error) {
              _core.logger.error("Failed to process queue item", {
                itemId: item.id,
                endpoint: item.endpoint,
                error: error
              });
              item.retryCount++;
              if (item.retryCount >= this.MAX_RETRY_COUNT) {
                failedItems.push(item.id);
              }
            }
          }
          this.queue = this.queue.filter(function (item) {
            return !successfulItems.includes(item.id);
          });
          this.queue = this.queue.filter(function (item) {
            return !failedItems.includes(item.id) || item.retryCount < _this6.MAX_RETRY_COUNT;
          });
          yield this.persistQueue();
          yield this.updateLastSyncTime();
          _core.logger.info("Queue processing completed", {
            processed: successfulItems.length,
            failed: failedItems.length,
            remaining: this.queue.length
          });
        } catch (error) {
          _core.logger.error("Queue processing failed", {
            error: error
          });
        } finally {
          this.syncInProgress = false;
          this.notifyListeners();
        }
      });
      function processQueue() {
        return _processQueue.apply(this, arguments);
      }
      return processQueue;
    }()
  }, {
    key: "processQueueItem",
    value: function () {
      var _processQueueItem = (0, _asyncToGenerator2.default)(function* (item) {
        var _yield$import = yield Promise.resolve().then(function () {
            return _interopRequireWildcard(require("./api"));
          }),
          api = _yield$import.api;
        var apiService = api;
        switch (item.method) {
          case "GET":
            yield apiService.request(item.endpoint);
            break;
          case "POST":
            yield apiService.request(item.endpoint, {
              method: "POST",
              body: JSON.stringify(item.data)
            });
            break;
          case "PUT":
            yield apiService.request(item.endpoint, {
              method: "PUT",
              body: JSON.stringify(item.data)
            });
            break;
          case "DELETE":
            yield apiService.request(item.endpoint, {
              method: "DELETE"
            });
            break;
          default:
            throw new Error(`Unsupported HTTP method: ${String(item.method)}`);
        }
      });
      function processQueueItem(_x4) {
        return _processQueueItem.apply(this, arguments);
      }
      return processQueueItem;
    }()
  }, {
    key: "updateLastSyncTime",
    value: function () {
      var _updateLastSyncTime = (0, _asyncToGenerator2.default)(function* () {
        var _this7 = this;
        try {
          var syncStatus = {
            isOnline: this.isOnline,
            lastSyncTime: Date.now(),
            pendingItems: this.queue.length,
            failedItems: this.queue.filter(function (item) {
              return item.retryCount >= _this7.MAX_RETRY_COUNT;
            }).length,
            isSyncing: this.syncInProgress
          };
          yield _asyncStorage.default.setItem(this.SYNC_STATUS_KEY, JSON.stringify(syncStatus));
        } catch (error) {
          _core.logger.error("Failed to update last sync time", {
            error: error
          });
        }
      });
      function updateLastSyncTime() {
        return _updateLastSyncTime.apply(this, arguments);
      }
      return updateLastSyncTime;
    }()
  }, {
    key: "getLastSyncTime",
    value: function getLastSyncTime() {
      try {
        return Date.now();
      } catch (_unused) {
        return null;
      }
    }
  }, {
    key: "notifyListeners",
    value: function notifyListeners() {
      var status = this.getSyncStatus();
      this.syncListeners.forEach(function (listener) {
        try {
          listener(status);
        } catch (error) {
          _core.logger.error("Error notifying sync listener", {
            error: error
          });
        }
      });
    }
  }], [{
    key: "getInstance",
    value: function getInstance() {
      if (OfflineSyncService.instance === undefined) {
        OfflineSyncService.instance = new OfflineSyncService();
      }
      return OfflineSyncService.instance;
    }
  }]);
}();
var offlineSync = exports.offlineSync = OfflineSyncService.getInstance();
var _default = exports.default = offlineSync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,