c8a2fe30256cf00f8c100a8e08d25caa
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock("./src/services/logger", function () {
  return {
    logger: {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn(),
      debug: jest.fn(),
      security: jest.fn(),
      bufferOfflineLog: jest.fn().mockResolvedValue(undefined),
      flushOfflineLogs: jest.fn().mockResolvedValue(undefined),
      setUserInfo: jest.fn(),
      clearUserInfo: jest.fn(),
      getSessionId: jest.fn().mockReturnValue('test-session'),
      destroy: jest.fn()
    }
  };
});
require("@testing-library/jest-native/extend-expect");
require("./jest.setup.core");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.ReanimatedDataMock = {
  now: function now() {
    return Date.now();
  }
};
if (typeof process !== 'undefined' && process.env.NODE_ENV === 'test') {
  var _require = require("./src/test-utils/msw/server"),
    server = _require.server;
  beforeAll(function () {
    return server.listen({
      onUnhandledRequest: 'warn'
    });
  });
  afterEach(function () {
    return server.resetHandlers();
  });
  afterAll(function () {
    return server.close();
  });
}
require("./jest.setup.mocks.native");
require("./jest.setup.mocks.expo");
require("./jest.setup.mocks.navigation");
require("./jest.setup.mocks.external");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJsb2dnZXIiLCJpbmZvIiwiamVzdCIsImZuIiwid2FybiIsImVycm9yIiwiZGVidWciLCJzZWN1cml0eSIsImJ1ZmZlck9mZmxpbmVMb2ciLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInVuZGVmaW5lZCIsImZsdXNoT2ZmbGluZUxvZ3MiLCJzZXRVc2VySW5mbyIsImNsZWFyVXNlckluZm8iLCJnZXRTZXNzaW9uSWQiLCJtb2NrUmV0dXJuVmFsdWUiLCJkZXN0cm95IiwicmVxdWlyZSIsIl9yZXF1aXJlMiIsImdsb2JhbCIsIlJlYW5pbWF0ZWREYXRhTW9jayIsIm5vdyIsIkRhdGUiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJfcmVxdWlyZSIsInNlcnZlciIsImJlZm9yZUFsbCIsImxpc3RlbiIsIm9uVW5oYW5kbGVkUmVxdWVzdCIsImFmdGVyRWFjaCIsInJlc2V0SGFuZGxlcnMiLCJhZnRlckFsbCIsImNsb3NlIl0sInNvdXJjZXMiOlsiamVzdC5zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1haW4gSmVzdCBzZXR1cCBmaWxlXG4gKiBMb2FkcyBtb2R1bGFyIHNldHVwIGZpbGVzIGNvbmRpdGlvbmFsbHkgYmFzZWQgb24gdGVzdCBuZWVkc1xuICovXG5cbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcblxuLy8gUmVhY3QgTmF0aXZlIFJlYW5pbWF0ZWQgcmVjb21tZW5kZWQgbW9jayB0d2Vha1xuLy8gQHRzLWlnbm9yZVxuZ2xvYmFsLlJlYW5pbWF0ZWREYXRhTW9jayA9IHsgbm93OiAoKSA9PiBEYXRlLm5vdygpIH07XG5cbi8vIFNpbGVuY2UgUk4gQW5pbWF0ZWQgd2FybmluZ3MgaW4gdGVzdHNcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbmltYXRlZC9OYXRpdmVBbmltYXRlZEhlbHBlcicpO1xuXG4vLyBNb2NrIGxvZ2dlciBnbG9iYWxseSB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzXG5qZXN0Lm1vY2soJy4vc3JjL3NlcnZpY2VzL2xvZ2dlcicsICgpID0+ICh7XG4gIGxvZ2dlcjoge1xuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICB3YXJuOiBqZXN0LmZuKCksXG4gICAgZXJyb3I6IGplc3QuZm4oKSxcbiAgICBkZWJ1ZzogamVzdC5mbigpLFxuICAgIHNlY3VyaXR5OiBqZXN0LmZuKCksXG4gICAgYnVmZmVyT2ZmbGluZUxvZzogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gICAgZmx1c2hPZmZsaW5lTG9nczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gICAgc2V0VXNlckluZm86IGplc3QuZm4oKSxcbiAgICBjbGVhclVzZXJJbmZvOiBqZXN0LmZuKCksXG4gICAgZ2V0U2Vzc2lvbklkOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCd0ZXN0LXNlc3Npb24nKSxcbiAgICBkZXN0cm95OiBqZXN0LmZuKCksXG4gIH1cbn0pKTtcblxuLy8gU2V0dXAgTVNXIHNlcnZlciBmb3IgQVBJIG1vY2tpbmcgKG9ubHkgaW4gdW5pdC9pbnRlZ3JhdGlvbiB0ZXN0cylcbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICBjb25zdCB7IHNlcnZlciB9ID0gcmVxdWlyZSgnLi9zcmMvdGVzdC11dGlscy9tc3cvc2VydmVyJyk7XG4gIFxuICAvLyBFc3RhYmxpc2ggQVBJIG1vY2tpbmcgYmVmb3JlIGFsbCB0ZXN0c1xuICBiZWZvcmVBbGwoKCkgPT4gc2VydmVyLmxpc3Rlbih7IG9uVW5oYW5kbGVkUmVxdWVzdDogJ3dhcm4nIH0pKTtcbiAgXG4gIC8vIFJlc2V0IGFueSByZXF1ZXN0IGhhbmRsZXJzIHRoYXQgbWF5IGhhdmUgYmVlbiBhZGRlZCBkdXJpbmcgdGVzdHNcbiAgYWZ0ZXJFYWNoKCgpID0+IHNlcnZlci5yZXNldEhhbmRsZXJzKCkpO1xuICBcbiAgLy8gQ2xlYW4gdXAgYWZ0ZXIgYWxsIHRlc3RzXG4gIGFmdGVyQWxsKCgpID0+IHNlcnZlci5jbG9zZSgpKTtcbn1cblxuLy8gQWx3YXlzIGxvYWQgY29yZSBzZXR1cFxuaW1wb3J0ICcuL2plc3Quc2V0dXAuY29yZSc7XG5cbi8vIExvYWQgYWxsIG1vY2tzIC0gbW9kdWxhciBmaWxlcyBoYW5kbGUgY29uZGl0aW9uYWwgbG9naWMgaW50ZXJuYWxseVxuLy8gVXNpbmcgcmVxdWlyZSB0byBlbnN1cmUgcHJvcGVyIGxvYWQgb3JkZXJcbnJlcXVpcmUoJy4vamVzdC5zZXR1cC5tb2Nrcy5uYXRpdmUnKTtcbnJlcXVpcmUoJy4vamVzdC5zZXR1cC5tb2Nrcy5leHBvJyk7XG5yZXF1aXJlKCcuL2plc3Quc2V0dXAubW9ja3MubmF2aWdhdGlvbicpO1xucmVxdWlyZSgnLi9qZXN0LnNldHVwLm1vY2tzLmV4dGVybmFsJyk7XG4iXSwibWFwcGluZ3MiOiI7O0FBWUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0FBR2pFRCxXQUFBLEdBQUtDLElBQUksMEJBQTBCO0VBQUEsT0FBTztJQUN4Q0MsTUFBTSxFQUFFO01BQ05DLElBQUksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNmQyxJQUFJLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDZkUsS0FBSyxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2hCRyxLQUFLLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDaEJJLFFBQVEsRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNuQkssZ0JBQWdCLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ00saUJBQWlCLENBQUNDLFNBQVMsQ0FBQztNQUN4REMsZ0JBQWdCLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ00saUJBQWlCLENBQUNDLFNBQVMsQ0FBQztNQUN4REUsV0FBVyxFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ3RCVSxhQUFhLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDeEJXLFlBQVksRUFBRVosSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDWSxlQUFlLENBQUMsY0FBYyxDQUFDO01BQ3ZEQyxPQUFPLEVBQUVkLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ25CO0VBQ0YsQ0FBQztBQUFBLENBQUMsQ0FBQztBQXhCSGMsT0FBQTtBQXlDQUEsT0FBQTtBQUEyQixTQUFBbkIsWUFBQTtFQUFBLElBQUFvQixTQUFBLEdBQUFELE9BQUE7SUFBQWYsSUFBQSxHQUFBZ0IsU0FBQSxDQUFBaEIsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFyQzNCaUIsTUFBTSxDQUFDQyxrQkFBa0IsR0FBRztFQUFFQyxHQUFHLEVBQUUsU0FBTEEsR0FBR0EsQ0FBQTtJQUFBLE9BQVFDLElBQUksQ0FBQ0QsR0FBRyxDQUFDLENBQUM7RUFBQTtBQUFDLENBQUM7QUF1QnJELElBQUksT0FBT0UsT0FBTyxLQUFLLFdBQVcsSUFBSUEsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxNQUFNLEVBQUU7RUFDckUsSUFBQUMsUUFBQSxHQUFtQlQsT0FBTyw4QkFBOEIsQ0FBQztJQUFqRFUsTUFBTSxHQUFBRCxRQUFBLENBQU5DLE1BQU07RUFHZEMsU0FBUyxDQUFDO0lBQUEsT0FBTUQsTUFBTSxDQUFDRSxNQUFNLENBQUM7TUFBRUMsa0JBQWtCLEVBQUU7SUFBTyxDQUFDLENBQUM7RUFBQSxFQUFDO0VBRzlEQyxTQUFTLENBQUM7SUFBQSxPQUFNSixNQUFNLENBQUNLLGFBQWEsQ0FBQyxDQUFDO0VBQUEsRUFBQztFQUd2Q0MsUUFBUSxDQUFDO0lBQUEsT0FBTU4sTUFBTSxDQUFDTyxLQUFLLENBQUMsQ0FBQztFQUFBLEVBQUM7QUFDaEM7QUFPQWpCLE9BQU8sNEJBQTRCLENBQUM7QUFDcENBLE9BQU8sMEJBQTBCLENBQUM7QUFDbENBLE9BQU8sZ0NBQWdDLENBQUM7QUFDeENBLE9BQU8sOEJBQThCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=