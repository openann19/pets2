b8563e8855973f04b837eb4aa73544c5
"use strict";

_getJestObj().mock('react-native/Libraries/Lists/FlatList', function () {
  var React = require('react');
  var RN = require('react-native');
  return React.forwardRef(function (props, ref) {
    var data = props.data,
      renderItem = props.renderItem,
      ListHeaderComponent = props.ListHeaderComponent,
      ListFooterComponent = props.ListFooterComponent,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded);
    return React.createElement(RN.ScrollView, _objectSpread({
      ref: ref
    }, rest), ListHeaderComponent ? React.createElement(ListHeaderComponent, null) : null, Array.isArray(data) ? data.map(function (item, index) {
      return renderItem({
        item: item,
        index: index
      });
    }) : null, ListFooterComponent ? React.createElement(ListFooterComponent, null) : null);
  });
});
_getJestObj().mock('react-native/Libraries/Lists/VirtualizedList', function () {
  var React = require('react');
  var RN = require('react-native');
  return React.forwardRef(function (props, ref) {
    var data = props.data,
      renderItem = props.renderItem,
      getItem = props.getItem,
      getItemCount = props.getItemCount,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded2);
    var items = Array.isArray(data) ? data : [];
    var count = typeof getItemCount === 'function' ? getItemCount(items) : items.length;
    var children = [];
    for (var i = 0; i < count; i++) {
      var itm = typeof getItem === 'function' ? getItem(items, i) : items[i];
      children.push(renderItem({
        item: itm,
        index: i
      }));
    }
    return React.createElement.apply(React, [RN.ScrollView, _objectSpread({
      ref: ref
    }, rest)].concat(children));
  });
});
_getJestObj().mock('react-native/Libraries/Lists/SectionList', function () {
  var React = require('react');
  var RN = require('react-native');
  return React.forwardRef(function (props, ref) {
    var sections = props.sections,
      renderItem = props.renderItem,
      renderSectionHeader = props.renderSectionHeader,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded3);
    var children = Array.isArray(sections) ? sections.flatMap(function (section) {
      return [renderSectionHeader ? renderSectionHeader({
        section: section
      }) : null].concat((0, _toConsumableArray2.default)(section.data.map(function (item, index) {
        return renderItem({
          item: item,
          index: index,
          section: section
        });
      })));
    }) : [];
    return React.createElement.apply(React, [RN.ScrollView, _objectSpread({
      ref: ref
    }, rest)].concat((0, _toConsumableArray2.default)(children)));
  });
});
_getJestObj().mock('react-native-maps', function () {
  var React = require('react');
  var RN = require('react-native');
  return {
    __esModule: true,
    default: RN.View,
    Marker: RN.View,
    Circle: RN.View,
    Polyline: RN.View,
    PROVIDER_GOOGLE: 'google'
  };
});
_getJestObj().mock('react-native-gesture-handler', function () {
  var RN = require('react-native');
  return {
    GestureHandlerRootView: RN.View,
    PanGestureHandler: RN.View,
    TapGestureHandler: RN.View,
    State: {},
    Directions: {}
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref) {
      var children = _ref.children;
      return children;
    },
    SafeAreaView: require('react-native').View,
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    },
    useSafeAreaFrame: function useSafeAreaFrame() {
      return {
        x: 0,
        y: 0,
        width: 390,
        height: 844
      };
    }
  };
});
_getJestObj().mock('react-native-svg', function () {
  return {
    Svg: 'View',
    Circle: 'View',
    Rect: 'View',
    Path: 'View',
    G: 'View',
    Text: 'Text',
    Defs: 'View',
    LinearGradient: 'View',
    Stop: 'View',
    ClipPath: 'View',
    Polygon: 'View',
    Polyline: 'View',
    Ellipse: 'View',
    Line: 'View'
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var React = require('react');
  var createAnimation = function createAnimation(name) {
    return {
      duration: jest.fn(function (ms) {
        return {
          duration: ms,
          name: name
        };
      }),
      delay: jest.fn(function (ms) {
        return {
          delay: ms,
          name: name
        };
      }),
      springify: jest.fn(function () {
        return {
          name: name,
          type: 'spring'
        };
      }),
      stiffness: jest.fn(function (value) {
        return {
          stiffness: value,
          name: name
        };
      }),
      damping: jest.fn(function (value) {
        return {
          damping: value,
          name: name
        };
      }),
      entering: {
        duration: jest.fn(function (ms) {
          return {
            duration: ms,
            name: name
          };
        })
      },
      exiting: {
        duration: jest.fn(function (ms) {
          return {
            duration: ms,
            name: name
          };
        })
      }
    };
  };
  var mockRunOnJS = jest.fn(function (fn) {
    return fn;
  });
  var mockRunOnUI = jest.fn(function (fn) {
    return fn;
  });
  var mockWithTiming = jest.fn(function (toValue) {
    return toValue;
  });
  var mockWithSpring = jest.fn(function (toValue) {
    return toValue;
  });
  var mockWithDelay = jest.fn(function () {
    return jest.fn();
  });
  var mockWithSequence = jest.fn(function () {
    return jest.fn();
  });
  var mockWithRepeat = jest.fn(function () {
    return jest.fn();
  });
  var mockUseSharedValue = jest.fn(function (initialValue) {
    return {
      value: initialValue
    };
  });
  var mockUseAnimatedStyle = jest.fn(function (updater) {
    return updater();
  });
  var View = React.forwardRef(function (props, ref) {
    return React.createElement('div', _objectSpread(_objectSpread({}, props), {}, {
      ref: ref
    }));
  });
  var Text = React.forwardRef(function (props, ref) {
    return React.createElement('span', _objectSpread(_objectSpread({}, props), {}, {
      ref: ref
    }));
  });
  var ScrollView = React.forwardRef(function (props, ref) {
    return React.createElement('div', _objectSpread(_objectSpread({}, props), {}, {
      ref: ref
    }));
  });
  var Image = React.forwardRef(function (props, ref) {
    return React.createElement('img', _objectSpread(_objectSpread({}, props), {}, {
      ref: ref
    }));
  });
  return {
    __esModule: true,
    default: {},
    View: View,
    Text: Text,
    ScrollView: ScrollView,
    Image: Image,
    useSharedValue: mockUseSharedValue,
    useAnimatedStyle: mockUseAnimatedStyle,
    withTiming: mockWithTiming,
    withSpring: mockWithSpring,
    withDelay: mockWithDelay,
    withSequence: mockWithSequence,
    withRepeat: mockWithRepeat,
    runOnJS: mockRunOnJS,
    runOnUI: mockRunOnUI,
    Extrapolate: {
      CLAMP: 'clamp',
      EXTEND: 'extend',
      IDENTITY: 'identity'
    },
    FadeIn: createAnimation('FadeIn'),
    FadeInDown: createAnimation('FadeInDown'),
    FadeInUp: createAnimation('FadeInUp'),
    FadeInLeft: createAnimation('FadeInLeft'),
    FadeInRight: createAnimation('FadeInRight'),
    FlipInEasyX: createAnimation('FlipInEasyX'),
    FlipInEasyY: createAnimation('FlipInEasyY'),
    FlipInXDown: createAnimation('FlipInXDown'),
    FlipInXUp: createAnimation('FlipInXUp'),
    SlideInDown: createAnimation('SlideInDown'),
    SlideInUp: createAnimation('SlideInUp'),
    ZoomIn: createAnimation('ZoomIn'),
    FadeOut: createAnimation('FadeOut'),
    FadeOutDown: createAnimation('FadeOutDown'),
    FadeOutUp: createAnimation('FadeOutUp'),
    SlideOutDown: createAnimation('SlideOutDown'),
    ZoomOut: createAnimation('ZoomOut')
  };
});
_getJestObj().mock('react-native/Libraries/BatchedBridge/NativeModules', function () {
  return {
    RNKeychainManager: {}
  };
});
_getJestObj().mock('@react-native-community/slider', function () {
  return {
    __esModule: true,
    default: require('react-native').View
  };
});
_getJestObj().mock('@react-native-picker/picker', function () {
  return {
    Picker: require('react-native').View,
    PickerItem: require('react-native').View
  };
});
_getJestObj().mock('react-native/Libraries/Animated/Animated', function () {
  var AnimatedMock = require("../../__mocks__/Animated.js");
  return AnimatedMock;
}, {
  virtual: true
});
_getJestObj().mock('react-native/Libraries/Interaction/InteractionManager', function () {
  var actualInteractionManager = jest.requireActual('react-native/Libraries/Interaction/InteractionManager');
  return _objectSpread(_objectSpread({}, actualInteractionManager), {}, {
    InteractionManager: _objectSpread(_objectSpread({}, actualInteractionManager.InteractionManager), {}, {
      runAfterInteractions: jest.fn(function (callback) {
        if (typeof callback === 'function') {
          setTimeout(callback, 0);
        }
        return {
          cancel: jest.fn()
        };
      }),
      createInteractionHandle: jest.fn(function () {
        return 1;
      }),
      clearInteractionHandle: jest.fn()
    })
  });
});
_getJestObj().mock('@react-native-community/netinfo', function () {
  return {
    __esModule: true,
    default: {
      fetch: jest.fn(function () {
        return Promise.resolve({
          isConnected: true,
          isInternetReachable: true
        });
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      configure: jest.fn()
    },
    NetInfoState: {
      unknown: 'unknown',
      none: 'none',
      cellular: 'cellular',
      wifi: 'wifi',
      bluetooth: 'bluetooth',
      ethernet: 'ethernet',
      wimax: 'wimax',
      vpn: 'vpn',
      other: 'other'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["data", "renderItem", "ListHeaderComponent", "ListFooterComponent"],
  _excluded2 = ["data", "renderItem", "getItem", "getItemCount"],
  _excluded3 = ["sections", "renderItem", "renderSectionHeader"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,