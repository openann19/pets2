a2f136791a363cfb1a436379006596cb
"use strict";

_getJestObj().mock("react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo", function () {
  return {
    isScreenReaderEnabled: jest.fn(function () {
      return Promise.resolve(true);
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    setAccessibilityFocus: jest.fn(),
    announceForAccessibility: jest.fn()
  };
});
_getJestObj().mock("expo-secure-store", function () {
  return {
    getItemAsync: jest.fn(),
    setItemAsync: jest.fn(),
    deleteItemAsync: jest.fn()
  };
});
_getJestObj().mock("../../services/socketService", function () {
  return {
    socketService: {
      connect: jest.fn(),
      disconnect: jest.fn(),
      emit: jest.fn(),
      on: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _reactQuery = require("@tanstack/react-query");
var _AuthProvider = require("../../providers/AuthProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestQueryClient = function createTestQueryClient() {
  return new _reactQuery.QueryClient({
    defaultOptions: {
      queries: {
        retry: false
      },
      mutations: {
        retry: false
      }
    }
  });
};
var TestWrapper = function TestWrapper(_ref) {
  var children = _ref.children;
  var queryClient = createTestQueryClient();
  return (0, _jsxRuntime.jsx)(_reactQuery.QueryClientProvider, {
    client: queryClient,
    children: (0, _jsxRuntime.jsx)(_AuthProvider.AuthProvider, {
      children: children
    })
  });
};
describe("Accessibility Tests", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe("Screen Reader Support", function () {
    it("should have proper accessibility labels on buttons", function () {
      var TestComponent = function TestComponent() {
        return (0, _jsxRuntime.jsxs)("div", {
          children: [(0, _jsxRuntime.jsx)("button", {
            testID: "login-button",
            accessibilityLabel: "Login to your account",
            children: "Login"
          }), (0, _jsxRuntime.jsx)("button", {
            testID: "signup-button",
            accessibilityLabel: "Create new account",
            children: "Sign Up"
          })]
        });
      };
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render.getByTestId;
      expect(getByTestId("login-button")).toHaveAccessibilityLabel("Login to your account");
      expect(getByTestId("signup-button")).toHaveAccessibilityLabel("Create new account");
    });
    it("should have proper accessibility hints", function () {
      var TestComponent = function TestComponent() {
        return (0, _jsxRuntime.jsx)("div", {
          children: (0, _jsxRuntime.jsx)("button", {
            testID: "help-button",
            accessibilityLabel: "Help",
            accessibilityHint: "Opens help documentation",
            children: "Help"
          })
        });
      };
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render2.getByTestId;
      expect(getByTestId("help-button")).toHaveAccessibilityHint("Opens help documentation");
    });
    it("should announce important state changes", (0, _asyncToGenerator2.default)(function* () {
      var TestComponent = function TestComponent() {
        var _React$useState = _react.default.useState(false),
          _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
          isLoading = _React$useState2[0],
          setIsLoading = _React$useState2[1];
        var handleAction = function handleAction() {
          setIsLoading(true);
          setTimeout(function () {
            setIsLoading(false);
            _reactNative2.AccessibilityInfo.announceForAccessibility("Action completed successfully");
          }, 100);
        };
        return (0, _jsxRuntime.jsx)("div", {
          children: (0, _jsxRuntime.jsx)("button", {
            testID: "action-button",
            onPress: handleAction,
            accessibilityState: {
              busy: isLoading
            },
            children: isLoading ? "Loading..." : "Perform Action"
          })
        });
      };
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render3.getByTestId;
      var button = getByTestId("action-button");
      _reactNative.fireEvent.press(button);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith("Action completed successfully");
      });
    }));
  });
  describe("Navigation Accessibility", function () {
    it("should have proper navigation labels", function () {
      var TestComponent = function TestComponent() {
        return (0, _jsxRuntime.jsx)("div", {
          children: (0, _jsxRuntime.jsxs)("nav", {
            testID: "main-navigation",
            accessibilityRole: "navigation",
            children: [(0, _jsxRuntime.jsx)("button", {
              testID: "nav-home",
              accessibilityLabel: "Home page",
              children: "Home"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "nav-profile",
              accessibilityLabel: "Profile page",
              children: "Profile"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "nav-settings",
              accessibilityLabel: "Settings page",
              children: "Settings"
            })]
          })
        });
      };
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render4.getByTestId;
      expect(getByTestId("main-navigation")).toHaveAccessibilityRole("navigation");
      expect(getByTestId("nav-home")).toHaveAccessibilityLabel("Home page");
      expect(getByTestId("nav-profile")).toHaveAccessibilityLabel("Profile page");
      expect(getByTestId("nav-settings")).toHaveAccessibilityLabel("Settings page");
    });
    it("should support keyboard navigation", function () {
      var TestComponent = function TestComponent() {
        var _React$useState3 = _react.default.useState(0),
          _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
          focusedIndex = _React$useState4[0],
          setFocusedIndex = _React$useState4[1];
        var items = ["Home", "Profile", "Settings"];
        var handleKeyPress = function handleKeyPress(event) {
          if (event.key === "ArrowRight") {
            setFocusedIndex(function (prev) {
              return Math.min(prev + 1, items.length - 1);
            });
          } else if (event.key === "ArrowLeft") {
            setFocusedIndex(function (prev) {
              return Math.max(prev - 1, 0);
            });
          }
        };
        return (0, _jsxRuntime.jsx)("div", {
          onKeyDown: handleKeyPress,
          children: items.map(function (item, index) {
            return (0, _jsxRuntime.jsx)("button", {
              testID: `nav-${item.toLowerCase()}`,
              accessibilityState: {
                selected: index === focusedIndex
              },
              onFocus: function onFocus() {
                setFocusedIndex(index);
              },
              children: item
            }, item);
          })
        });
      };
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render5.getByTestId;
      var homeButton = getByTestId("nav-home");
      var profileButton = getByTestId("nav-profile");
      _reactNative.fireEvent.focus(homeButton);
      expect(homeButton).toHaveAccessibilityState({
        selected: true
      });
      _reactNative.fireEvent.keyDown(homeButton, {
        key: "ArrowRight"
      });
      _reactNative.fireEvent.focus(profileButton);
      expect(profileButton).toHaveAccessibilityState({
        selected: true
      });
    });
  });
  describe("Form Accessibility", function () {
    it("should have proper form labels and descriptions", function () {
      var TestComponent = function TestComponent() {
        return (0, _jsxRuntime.jsxs)("form", {
          children: [(0, _jsxRuntime.jsx)("label", {
            htmlFor: "email-input",
            children: "Email Address"
          }), (0, _jsxRuntime.jsx)("input", {
            id: "email-input",
            testID: "email-input",
            type: "email",
            "aria-describedby": "email-help",
            "aria-required": "true"
          }), (0, _jsxRuntime.jsx)("div", {
            id: "email-help",
            testID: "email-help",
            children: "Enter your email address to sign in"
          }), (0, _jsxRuntime.jsx)("label", {
            htmlFor: "password-input",
            children: "Password"
          }), (0, _jsxRuntime.jsx)("input", {
            id: "password-input",
            testID: "password-input",
            type: "password",
            "aria-describedby": "password-help",
            "aria-required": "true"
          }), (0, _jsxRuntime.jsx)("div", {
            id: "password-help",
            testID: "password-help",
            children: "Enter your password"
          })]
        });
      };
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render6.getByTestId;
      var emailInput = getByTestId("email-input");
      var passwordInput = getByTestId("password-input");
      expect(emailInput).toHaveAccessibilityState({
        required: true
      });
      expect(passwordInput).toHaveAccessibilityState({
        required: true
      });
    });
    it("should announce validation errors", function () {
      var TestComponent = function TestComponent() {
        var _React$useState5 = _react.default.useState(""),
          _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
          error = _React$useState6[0],
          setError = _React$useState6[1];
        var handleSubmit = function handleSubmit() {
          setError("Please enter a valid email address");
          _reactNative2.AccessibilityInfo.announceForAccessibility("Please enter a valid email address");
        };
        return (0, _jsxRuntime.jsxs)("form", {
          children: [(0, _jsxRuntime.jsx)("input", {
            testID: "email-input",
            type: "email",
            "aria-invalid": !!error,
            "aria-describedby": error ? "email-error" : undefined
          }), error ? (0, _jsxRuntime.jsx)("div", {
            id: "email-error",
            testID: "email-error",
            role: "alert",
            children: error
          }) : null, (0, _jsxRuntime.jsx)("button", {
            testID: "submit-button",
            onPress: handleSubmit,
            children: "Submit"
          })]
        });
      };
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render7.getByTestId;
      var submitButton = getByTestId("submit-button");
      _reactNative.fireEvent.press(submitButton);
      expect(getByTestId("email-error")).toHaveAccessibilityRole("alert");
      expect(_reactNative2.AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith("Please enter a valid email address");
    });
  });
  describe("Pet Card Accessibility", function () {
    it("should have proper accessibility information for pet cards", function () {
      var pet = {
        id: "1",
        name: "Buddy",
        age: 3,
        breed: "Golden Retriever",
        photos: ["photo1.jpg"]
      };
      var TestComponent = function TestComponent() {
        return (0, _jsxRuntime.jsxs)("div", {
          testID: "pet-card",
          accessibilityRole: "button",
          accessibilityLabel: `Pet card for ${pet.name}, ${pet.age} year old ${pet.breed}`,
          accessibilityHint: "Double tap to view pet details",
          children: [(0, _jsxRuntime.jsx)("img", {
            src: pet.photos[0],
            alt: `Photo of ${pet.name}`
          }), (0, _jsxRuntime.jsx)("h3", {
            children: pet.name
          }), (0, _jsxRuntime.jsxs)("p", {
            children: [pet.age, " years old"]
          }), (0, _jsxRuntime.jsx)("p", {
            children: pet.breed
          })]
        });
      };
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render8.getByTestId;
      var petCard = getByTestId("pet-card");
      expect(petCard).toHaveAccessibilityRole("button");
      expect(petCard).toHaveAccessibilityLabel("Pet card for Buddy, 3 year old Golden Retriever");
      expect(petCard).toHaveAccessibilityHint("Double tap to view pet details");
    });
    it("should announce swipe actions", function () {
      var TestComponent = function TestComponent() {
        var handleSwipeRight = function handleSwipeRight() {
          _reactNative2.AccessibilityInfo.announceForAccessibility("Pet liked");
        };
        var handleSwipeLeft = function handleSwipeLeft() {
          _reactNative2.AccessibilityInfo.announceForAccessibility("Pet passed");
        };
        return (0, _jsxRuntime.jsxs)("div", {
          children: [(0, _jsxRuntime.jsx)("button", {
            testID: "like-button",
            onPress: handleSwipeRight,
            accessibilityLabel: "Like this pet",
            children: "Like"
          }), (0, _jsxRuntime.jsx)("button", {
            testID: "pass-button",
            onPress: handleSwipeLeft,
            accessibilityLabel: "Pass on this pet",
            children: "Pass"
          })]
        });
      };
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render9.getByTestId;
      var likeButton = getByTestId("like-button");
      var passButton = getByTestId("pass-button");
      _reactNative.fireEvent.press(likeButton);
      expect(_reactNative2.AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith("Pet liked");
      _reactNative.fireEvent.press(passButton);
      expect(_reactNative2.AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith("Pet passed");
    });
  });
  describe("Chat Accessibility", function () {
    it("should have proper chat message accessibility", function () {
      var message = {
        id: "1",
        text: "Hello! How are you?",
        senderId: "user1",
        timestamp: new Date().toISOString()
      };
      var TestComponent = function TestComponent() {
        return (0, _jsxRuntime.jsxs)("div", {
          testID: "message-1",
          accessibilityRole: "text",
          accessibilityLabel: `Message from ${message.senderId}: ${message.text}`,
          children: [(0, _jsxRuntime.jsx)("span", {
            children: message.text
          }), (0, _jsxRuntime.jsx)("time", {
            children: message.timestamp
          })]
        });
      };
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render0.getByTestId;
      var messageElement = getByTestId("message-1");
      expect(messageElement).toHaveAccessibilityRole("text");
      expect(messageElement).toHaveAccessibilityLabel("Message from user1: Hello! How are you?");
    });
    it("should announce new messages", function () {
      var TestComponent = function TestComponent() {
        var _React$useState7 = _react.default.useState([]),
          _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
          messages = _React$useState8[0],
          setMessages = _React$useState8[1];
        var addMessage = function addMessage() {
          var newMessage = {
            id: "2",
            text: "New message received",
            senderId: "user2"
          };
          setMessages(function (prev) {
            return [].concat((0, _toConsumableArray2.default)(prev), [newMessage]);
          });
          _reactNative2.AccessibilityInfo.announceForAccessibility("New message received");
        };
        return (0, _jsxRuntime.jsxs)("div", {
          children: [(0, _jsxRuntime.jsx)("button", {
            testID: "add-message",
            onPress: addMessage,
            children: "Add Message"
          }), messages.map(function (msg) {
            return (0, _jsxRuntime.jsx)("div", {
              testID: `message-${msg.id}`,
              children: msg.text
            }, msg.id);
          })]
        });
      };
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render1.getByTestId;
      var addButton = getByTestId("add-message");
      _reactNative.fireEvent.press(addButton);
      expect(_reactNative2.AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith("New message received");
    });
  });
  describe("Video Call Accessibility", function () {
    it("should have proper call control accessibility", function () {
      var TestComponent = function TestComponent() {
        return (0, _jsxRuntime.jsxs)("div", {
          children: [(0, _jsxRuntime.jsx)("button", {
            testID: "mute-button",
            accessibilityLabel: "Mute microphone",
            accessibilityState: {
              selected: false
            },
            children: "Mute"
          }), (0, _jsxRuntime.jsx)("button", {
            testID: "video-toggle",
            accessibilityLabel: "Toggle video",
            accessibilityState: {
              selected: true
            },
            children: "Video"
          }), (0, _jsxRuntime.jsx)("button", {
            testID: "end-call",
            accessibilityLabel: "End call",
            children: "End Call"
          })]
        });
      };
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render10.getByTestId;
      var muteButton = getByTestId("mute-button");
      var videoToggle = getByTestId("video-toggle");
      var endCallButton = getByTestId("end-call");
      expect(muteButton).toHaveAccessibilityLabel("Mute microphone");
      expect(muteButton).toHaveAccessibilityState({
        selected: false
      });
      expect(videoToggle).toHaveAccessibilityLabel("Toggle video");
      expect(videoToggle).toHaveAccessibilityState({
        selected: true
      });
      expect(endCallButton).toHaveAccessibilityLabel("End call");
    });
    it("should announce call state changes", function () {
      var TestComponent = function TestComponent() {
        var _React$useState9 = _react.default.useState(false),
          _React$useState0 = (0, _slicedToArray2.default)(_React$useState9, 2),
          isMuted = _React$useState0[0],
          setIsMuted = _React$useState0[1];
        var toggleMute = function toggleMute() {
          setIsMuted(!isMuted);
          _reactNative2.AccessibilityInfo.announceForAccessibility(isMuted ? "Microphone unmuted" : "Microphone muted");
        };
        return (0, _jsxRuntime.jsx)("div", {
          children: (0, _jsxRuntime.jsx)("button", {
            testID: "mute-button",
            onPress: toggleMute,
            accessibilityState: {
              selected: isMuted
            },
            children: isMuted ? "Unmute" : "Mute"
          })
        });
      };
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render11.getByTestId;
      var muteButton = getByTestId("mute-button");
      _reactNative.fireEvent.press(muteButton);
      expect(_reactNative2.AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith("Microphone muted");
      _reactNative.fireEvent.press(muteButton);
      expect(_reactNative2.AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith("Microphone unmuted");
    });
  });
  describe("Voice Control Support", function () {
    it("should support voice commands", function () {
      var TestComponent = function TestComponent() {
        var _React$useState1 = _react.default.useState(false),
          _React$useState10 = (0, _slicedToArray2.default)(_React$useState1, 2),
          voiceControlEnabled = _React$useState10[0],
          setVoiceControlEnabled = _React$useState10[1];
        var handleVoiceCommand = function handleVoiceCommand(command) {
          switch (command) {
            case "like":
              _reactNative2.AccessibilityInfo.announceForAccessibility("Pet liked via voice command");
              break;
            case "pass":
              _reactNative2.AccessibilityInfo.announceForAccessibility("Pet passed via voice command");
              break;
            default:
              break;
          }
        };
        return (0, _jsxRuntime.jsxs)("div", {
          children: [(0, _jsxRuntime.jsx)("button", {
            testID: "voice-control-toggle",
            onPress: function onPress() {
              setVoiceControlEnabled(!voiceControlEnabled);
            },
            children: voiceControlEnabled ? "Disable Voice Control" : "Enable Voice Control"
          }), voiceControlEnabled ? (0, _jsxRuntime.jsxs)("div", {
            testID: "voice-commands",
            children: [(0, _jsxRuntime.jsx)("button", {
              testID: "voice-like",
              onPress: function onPress() {
                handleVoiceCommand("like");
              },
              children: "Voice Like"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "voice-pass",
              onPress: function onPress() {
                handleVoiceCommand("pass");
              },
              children: "Voice Pass"
            })]
          }) : null]
        });
      };
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render12.getByTestId;
      var toggleButton = getByTestId("voice-control-toggle");
      _reactNative.fireEvent.press(toggleButton);
      var voiceLikeButton = getByTestId("voice-like");
      _reactNative.fireEvent.press(voiceLikeButton);
      expect(_reactNative2.AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith("Pet liked via voice command");
    });
  });
  describe("High Contrast Mode", function () {
    it("should support high contrast mode", function () {
      var TestComponent = function TestComponent() {
        return (0, _jsxRuntime.jsx)("div", {
          style: {
            color: "var(--text-color)",
            backgroundColor: "var(--bg-color)"
          },
          children: (0, _jsxRuntime.jsx)("button", {
            testID: "high-contrast-button",
            style: {
              color: "var(--button-text-color)",
              backgroundColor: "var(--button-bg-color)",
              border: "2px solid var(--button-border-color)"
            },
            children: "High Contrast Button"
          })
        });
      };
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render13.getByTestId;
      var button = getByTestId("high-contrast-button");
      expect(button).toBeTruthy();
    });
  });
  describe("Focus Management", function () {
    it("should manage focus properly in modals", function () {
      var TestComponent = function TestComponent() {
        var _React$useState11 = _react.default.useState(false),
          _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
          isModalOpen = _React$useState12[0],
          setIsModalOpen = _React$useState12[1];
        return (0, _jsxRuntime.jsxs)("div", {
          children: [(0, _jsxRuntime.jsx)("button", {
            testID: "open-modal",
            onPress: function onPress() {
              setIsModalOpen(true);
            },
            children: "Open Modal"
          }), isModalOpen ? (0, _jsxRuntime.jsxs)("div", {
            testID: "modal",
            accessibilityRole: "dialog",
            accessibilityModal: true,
            children: [(0, _jsxRuntime.jsx)("button", {
              testID: "modal-close",
              onPress: function onPress() {
                setIsModalOpen(false);
              },
              children: "Close"
            }), (0, _jsxRuntime.jsx)("button", {
              testID: "modal-action",
              children: "Action"
            })]
          }) : null]
        });
      };
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render14.getByTestId;
      var openButton = getByTestId("open-modal");
      _reactNative.fireEvent.press(openButton);
      var modal = getByTestId("modal");
      expect(modal).toHaveAccessibilityRole("dialog");
      expect(modal).toHaveAccessibilityState({
        modal: true
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJpc1NjcmVlblJlYWRlckVuYWJsZWQiLCJqZXN0IiwiZm4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0QWNjZXNzaWJpbGl0eUZvY3VzIiwiYW5ub3VuY2VGb3JBY2Nlc3NpYmlsaXR5IiwiZ2V0SXRlbUFzeW5jIiwic2V0SXRlbUFzeW5jIiwiZGVsZXRlSXRlbUFzeW5jIiwic29ja2V0U2VydmljZSIsImNvbm5lY3QiLCJkaXNjb25uZWN0IiwiZW1pdCIsIm9uIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiX3NsaWNlZFRvQXJyYXkyIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlMiIsIl9yZWFjdFF1ZXJ5IiwiX0F1dGhQcm92aWRlciIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJjcmVhdGVUZXN0UXVlcnlDbGllbnQiLCJRdWVyeUNsaWVudCIsImRlZmF1bHRPcHRpb25zIiwicXVlcmllcyIsInJldHJ5IiwibXV0YXRpb25zIiwiVGVzdFdyYXBwZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJxdWVyeUNsaWVudCIsImpzeCIsIlF1ZXJ5Q2xpZW50UHJvdmlkZXIiLCJjbGllbnQiLCJBdXRoUHJvdmlkZXIiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJUZXN0Q29tcG9uZW50IiwianN4cyIsInRlc3RJRCIsImFjY2Vzc2liaWxpdHlMYWJlbCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvSGF2ZUFjY2Vzc2liaWxpdHlMYWJlbCIsImFjY2Vzc2liaWxpdHlIaW50IiwiX3JlbmRlcjIiLCJ0b0hhdmVBY2Nlc3NpYmlsaXR5SGludCIsImRlZmF1bHQiLCJfUmVhY3QkdXNlU3RhdGUiLCJSZWFjdCIsInVzZVN0YXRlIiwiX1JlYWN0JHVzZVN0YXRlMiIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImhhbmRsZUFjdGlvbiIsInNldFRpbWVvdXQiLCJBY2Nlc3NpYmlsaXR5SW5mbyIsIm9uUHJlc3MiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJidXN5IiwiX3JlbmRlcjMiLCJidXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsIndhaXRGb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImFjY2Vzc2liaWxpdHlSb2xlIiwiX3JlbmRlcjQiLCJ0b0hhdmVBY2Nlc3NpYmlsaXR5Um9sZSIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJfUmVhY3QkdXNlU3RhdGU0IiwiZm9jdXNlZEluZGV4Iiwic2V0Rm9jdXNlZEluZGV4IiwiaXRlbXMiLCJoYW5kbGVLZXlQcmVzcyIsImV2ZW50Iiwia2V5IiwicHJldiIsIk1hdGgiLCJtaW4iLCJsZW5ndGgiLCJtYXgiLCJvbktleURvd24iLCJtYXAiLCJpdGVtIiwiaW5kZXgiLCJ0b0xvd2VyQ2FzZSIsInNlbGVjdGVkIiwib25Gb2N1cyIsIl9yZW5kZXI1IiwiaG9tZUJ1dHRvbiIsInByb2ZpbGVCdXR0b24iLCJmb2N1cyIsInRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSIsImtleURvd24iLCJodG1sRm9yIiwiaWQiLCJ0eXBlIiwiX3JlbmRlcjYiLCJlbWFpbElucHV0IiwicGFzc3dvcmRJbnB1dCIsInJlcXVpcmVkIiwiX1JlYWN0JHVzZVN0YXRlNSIsIl9SZWFjdCR1c2VTdGF0ZTYiLCJlcnJvciIsInNldEVycm9yIiwiaGFuZGxlU3VibWl0IiwidW5kZWZpbmVkIiwicm9sZSIsIl9yZW5kZXI3Iiwic3VibWl0QnV0dG9uIiwicGV0IiwibmFtZSIsImFnZSIsImJyZWVkIiwicGhvdG9zIiwic3JjIiwiYWx0IiwiX3JlbmRlcjgiLCJwZXRDYXJkIiwiaGFuZGxlU3dpcGVSaWdodCIsImhhbmRsZVN3aXBlTGVmdCIsIl9yZW5kZXI5IiwibGlrZUJ1dHRvbiIsInBhc3NCdXR0b24iLCJtZXNzYWdlIiwidGV4dCIsInNlbmRlcklkIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiX3JlbmRlcjAiLCJtZXNzYWdlRWxlbWVudCIsIl9SZWFjdCR1c2VTdGF0ZTciLCJfUmVhY3QkdXNlU3RhdGU4IiwibWVzc2FnZXMiLCJzZXRNZXNzYWdlcyIsImFkZE1lc3NhZ2UiLCJuZXdNZXNzYWdlIiwiY29uY2F0IiwibXNnIiwiX3JlbmRlcjEiLCJhZGRCdXR0b24iLCJfcmVuZGVyMTAiLCJtdXRlQnV0dG9uIiwidmlkZW9Ub2dnbGUiLCJlbmRDYWxsQnV0dG9uIiwiX1JlYWN0JHVzZVN0YXRlOSIsIl9SZWFjdCR1c2VTdGF0ZTAiLCJpc011dGVkIiwic2V0SXNNdXRlZCIsInRvZ2dsZU11dGUiLCJfcmVuZGVyMTEiLCJfUmVhY3QkdXNlU3RhdGUxIiwiX1JlYWN0JHVzZVN0YXRlMTAiLCJ2b2ljZUNvbnRyb2xFbmFibGVkIiwic2V0Vm9pY2VDb250cm9sRW5hYmxlZCIsImhhbmRsZVZvaWNlQ29tbWFuZCIsImNvbW1hbmQiLCJfcmVuZGVyMTIiLCJ0b2dnbGVCdXR0b24iLCJ2b2ljZUxpa2VCdXR0b24iLCJzdHlsZSIsImNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiX3JlbmRlcjEzIiwidG9CZVRydXRoeSIsIl9SZWFjdCR1c2VTdGF0ZTExIiwiX1JlYWN0JHVzZVN0YXRlMTIiLCJpc01vZGFsT3BlbiIsInNldElzTW9kYWxPcGVuIiwiYWNjZXNzaWJpbGl0eU1vZGFsIiwiX3JlbmRlcjE0Iiwib3BlbkJ1dHRvbiIsIm1vZGFsIl0sInNvdXJjZXMiOlsiYWNjZXNzaWJpbGl0eS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFjY2Vzc2liaWxpdHkgVGVzdHNcbiAqIENvbXByZWhlbnNpdmUgdGVzdGluZyBvZiBhY2Nlc3NpYmlsaXR5IGZlYXR1cmVzIGFuZCBzY3JlZW4gcmVhZGVyIHN1cHBvcnRcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgQWNjZXNzaWJpbGl0eUluZm8gfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyBRdWVyeUNsaWVudCwgUXVlcnlDbGllbnRQcm92aWRlciB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcbmltcG9ydCB7IEF1dGhQcm92aWRlciB9IGZyb20gXCIuLi8uLi9wcm92aWRlcnMvQXV0aFByb3ZpZGVyXCI7XG5cbi8vIE1vY2sgQWNjZXNzaWJpbGl0eUluZm9cbmplc3QubW9jayhcbiAgXCJyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0NvbXBvbmVudHMvQWNjZXNzaWJpbGl0eUluZm8vQWNjZXNzaWJpbGl0eUluZm9cIixcbiAgKCkgPT4gKHtcbiAgICBpc1NjcmVlblJlYWRlckVuYWJsZWQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHRydWUpKSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHNldEFjY2Vzc2liaWxpdHlGb2N1czogamVzdC5mbigpLFxuICAgIGFubm91bmNlRm9yQWNjZXNzaWJpbGl0eTogamVzdC5mbigpLFxuICB9KSxcbik7XG5cbi8vIE1vY2sgc2VjdXJlIHN0b3JhZ2Vcbmplc3QubW9jayhcImV4cG8tc2VjdXJlLXN0b3JlXCIsICgpID0+ICh7XG4gIGdldEl0ZW1Bc3luYzogamVzdC5mbigpLFxuICBzZXRJdGVtQXN5bmM6IGplc3QuZm4oKSxcbiAgZGVsZXRlSXRlbUFzeW5jOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgc29ja2V0IHNlcnZpY2Vcbmplc3QubW9jayhcIi4uLy4uL3NlcnZpY2VzL3NvY2tldFNlcnZpY2VcIiwgKCkgPT4gKHtcbiAgc29ja2V0U2VydmljZToge1xuICAgIGNvbm5lY3Q6IGplc3QuZm4oKSxcbiAgICBkaXNjb25uZWN0OiBqZXN0LmZuKCksXG4gICAgZW1pdDogamVzdC5mbigpLFxuICAgIG9uOiBqZXN0LmZuKCksXG4gIH0sXG59KSk7XG5cbmNvbnN0IGNyZWF0ZVRlc3RRdWVyeUNsaWVudCA9ICgpID0+XG4gIG5ldyBRdWVyeUNsaWVudCh7XG4gICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgIHF1ZXJpZXM6IHtcbiAgICAgICAgcmV0cnk6IGZhbHNlLFxuICAgICAgfSxcbiAgICAgIG11dGF0aW9uczoge1xuICAgICAgICByZXRyeTogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xuXG5jb25zdCBUZXN0V3JhcHBlcjogUmVhY3QuRkM8eyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0+ID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICBjb25zdCBxdWVyeUNsaWVudCA9IGNyZWF0ZVRlc3RRdWVyeUNsaWVudCgpO1xuXG4gIHJldHVybiAoXG4gICAgPFF1ZXJ5Q2xpZW50UHJvdmlkZXIgY2xpZW50PXtxdWVyeUNsaWVudH0+XG4gICAgICA8QXV0aFByb3ZpZGVyPntjaGlsZHJlbn08L0F1dGhQcm92aWRlcj5cbiAgICA8L1F1ZXJ5Q2xpZW50UHJvdmlkZXI+XG4gICk7XG59O1xuXG5kZXNjcmliZShcIkFjY2Vzc2liaWxpdHkgVGVzdHNcIiwgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJTY3JlZW4gUmVhZGVyIFN1cHBvcnRcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGhhdmUgcHJvcGVyIGFjY2Vzc2liaWxpdHkgbGFiZWxzIG9uIGJ1dHRvbnNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgVGVzdENvbXBvbmVudCA9ICgpID0+IChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0ZXN0SUQ9XCJsb2dpbi1idXR0b25cIlxuICAgICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPVwiTG9naW4gdG8geW91ciBhY2NvdW50XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBMb2dpblxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHRlc3RJRD1cInNpZ251cC1idXR0b25cIlxuICAgICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPVwiQ3JlYXRlIG5ldyBhY2NvdW50XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBTaWduIFVwXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcblxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj4sXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoXCJsb2dpbi1idXR0b25cIikpLnRvSGF2ZUFjY2Vzc2liaWxpdHlMYWJlbChcbiAgICAgICAgXCJMb2dpbiB0byB5b3VyIGFjY291bnRcIixcbiAgICAgICk7XG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoXCJzaWdudXAtYnV0dG9uXCIpKS50b0hhdmVBY2Nlc3NpYmlsaXR5TGFiZWwoXG4gICAgICAgIFwiQ3JlYXRlIG5ldyBhY2NvdW50XCIsXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgaGF2ZSBwcm9wZXIgYWNjZXNzaWJpbGl0eSBoaW50c1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHRlc3RJRD1cImhlbHAtYnV0dG9uXCJcbiAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD1cIkhlbHBcIlxuICAgICAgICAgICAgYWNjZXNzaWJpbGl0eUhpbnQ9XCJPcGVucyBoZWxwIGRvY3VtZW50YXRpb25cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIEhlbHBcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuXG4gICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPixcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChnZXRCeVRlc3RJZChcImhlbHAtYnV0dG9uXCIpKS50b0hhdmVBY2Nlc3NpYmlsaXR5SGludChcbiAgICAgICAgXCJPcGVucyBoZWxwIGRvY3VtZW50YXRpb25cIixcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBhbm5vdW5jZSBpbXBvcnRhbnQgc3RhdGUgY2hhbmdlc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZUFjdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICAgICAgLy8gU2ltdWxhdGUgYXN5bmMgb3BlcmF0aW9uXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgQWNjZXNzaWJpbGl0eUluZm8uYW5ub3VuY2VGb3JBY2Nlc3NpYmlsaXR5KFxuICAgICAgICAgICAgICBcIkFjdGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5XCIsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICB0ZXN0SUQ9XCJhY3Rpb24tYnV0dG9uXCJcbiAgICAgICAgICAgICAgb25QcmVzcz17aGFuZGxlQWN0aW9ufVxuICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5U3RhdGU9e3sgYnVzeTogaXNMb2FkaW5nIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtpc0xvYWRpbmcgPyBcIkxvYWRpbmcuLi5cIiA6IFwiUGVyZm9ybSBBY3Rpb25cIn1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj4sXG4gICAgICApO1xuXG4gICAgICBjb25zdCBidXR0b24gPSBnZXRCeVRlc3RJZChcImFjdGlvbi1idXR0b25cIik7XG4gICAgICBmaXJlRXZlbnQucHJlc3MoYnV0dG9uKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChBY2Nlc3NpYmlsaXR5SW5mby5hbm5vdW5jZUZvckFjY2Vzc2liaWxpdHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgIFwiQWN0aW9uIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHlcIixcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIk5hdmlnYXRpb24gQWNjZXNzaWJpbGl0eVwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgaGF2ZSBwcm9wZXIgbmF2aWdhdGlvbiBsYWJlbHNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgVGVzdENvbXBvbmVudCA9ICgpID0+IChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8bmF2IHRlc3RJRD1cIm1haW4tbmF2aWdhdGlvblwiIGFjY2Vzc2liaWxpdHlSb2xlPVwibmF2aWdhdGlvblwiPlxuICAgICAgICAgICAgPGJ1dHRvbiB0ZXN0SUQ9XCJuYXYtaG9tZVwiIGFjY2Vzc2liaWxpdHlMYWJlbD1cIkhvbWUgcGFnZVwiPlxuICAgICAgICAgICAgICBIb21lXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdGVzdElEPVwibmF2LXByb2ZpbGVcIiBhY2Nlc3NpYmlsaXR5TGFiZWw9XCJQcm9maWxlIHBhZ2VcIj5cbiAgICAgICAgICAgICAgUHJvZmlsZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHRlc3RJRD1cIm5hdi1zZXR0aW5nc1wiIGFjY2Vzc2liaWxpdHlMYWJlbD1cIlNldHRpbmdzIHBhZ2VcIj5cbiAgICAgICAgICAgICAgU2V0dGluZ3NcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvbmF2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxuICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+LFxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKFwibWFpbi1uYXZpZ2F0aW9uXCIpKS50b0hhdmVBY2Nlc3NpYmlsaXR5Um9sZShcbiAgICAgICAgXCJuYXZpZ2F0aW9uXCIsXG4gICAgICApO1xuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKFwibmF2LWhvbWVcIikpLnRvSGF2ZUFjY2Vzc2liaWxpdHlMYWJlbChcIkhvbWUgcGFnZVwiKTtcbiAgICAgIGV4cGVjdChnZXRCeVRlc3RJZChcIm5hdi1wcm9maWxlXCIpKS50b0hhdmVBY2Nlc3NpYmlsaXR5TGFiZWwoXG4gICAgICAgIFwiUHJvZmlsZSBwYWdlXCIsXG4gICAgICApO1xuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKFwibmF2LXNldHRpbmdzXCIpKS50b0hhdmVBY2Nlc3NpYmlsaXR5TGFiZWwoXG4gICAgICAgIFwiU2V0dGluZ3MgcGFnZVwiLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHN1cHBvcnQga2V5Ym9hcmQgbmF2aWdhdGlvblwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBbZm9jdXNlZEluZGV4LCBzZXRGb2N1c2VkSW5kZXhdID0gUmVhY3QudXNlU3RhdGUoMCk7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW1wiSG9tZVwiLCBcIlByb2ZpbGVcIiwgXCJTZXR0aW5nc1wiXTtcblxuICAgICAgICBjb25zdCBoYW5kbGVLZXlQcmVzcyA9IChldmVudDogdW5rbm93bikgPT4ge1xuICAgICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiQXJyb3dSaWdodFwiKSB7XG4gICAgICAgICAgICBzZXRGb2N1c2VkSW5kZXgoKHByZXYpID0+IE1hdGgubWluKHByZXYgKyAxLCBpdGVtcy5sZW5ndGggLSAxKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09IFwiQXJyb3dMZWZ0XCIpIHtcbiAgICAgICAgICAgIHNldEZvY3VzZWRJbmRleCgocHJldikgPT4gTWF0aC5tYXgocHJldiAtIDEsIDApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2IG9uS2V5RG93bj17aGFuZGxlS2V5UHJlc3N9PlxuICAgICAgICAgICAge2l0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGtleT17aXRlbX1cbiAgICAgICAgICAgICAgICB0ZXN0SUQ9e2BuYXYtJHtpdGVtLnRvTG93ZXJDYXNlKCl9YH1cbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5U3RhdGU9e3sgc2VsZWN0ZWQ6IGluZGV4ID09PSBmb2N1c2VkSW5kZXggfX1cbiAgICAgICAgICAgICAgICBvbkZvY3VzPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBzZXRGb2N1c2VkSW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7aXRlbX1cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxuICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+LFxuICAgICAgKTtcblxuICAgICAgY29uc3QgaG9tZUJ1dHRvbiA9IGdldEJ5VGVzdElkKFwibmF2LWhvbWVcIik7XG4gICAgICBjb25zdCBwcm9maWxlQnV0dG9uID0gZ2V0QnlUZXN0SWQoXCJuYXYtcHJvZmlsZVwiKTtcblxuICAgICAgZmlyZUV2ZW50LmZvY3VzKGhvbWVCdXR0b24pO1xuICAgICAgZXhwZWN0KGhvbWVCdXR0b24pLnRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSh7IHNlbGVjdGVkOiB0cnVlIH0pO1xuXG4gICAgICBmaXJlRXZlbnQua2V5RG93bihob21lQnV0dG9uLCB7IGtleTogXCJBcnJvd1JpZ2h0XCIgfSk7XG4gICAgICBmaXJlRXZlbnQuZm9jdXMocHJvZmlsZUJ1dHRvbik7XG4gICAgICBleHBlY3QocHJvZmlsZUJ1dHRvbikudG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlKHsgc2VsZWN0ZWQ6IHRydWUgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiRm9ybSBBY2Nlc3NpYmlsaXR5XCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBoYXZlIHByb3BlciBmb3JtIGxhYmVscyBhbmQgZGVzY3JpcHRpb25zXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IFRlc3RDb21wb25lbnQgPSAoKSA9PiAoXG4gICAgICAgIDxmb3JtPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZW1haWwtaW5wdXRcIj5FbWFpbCBBZGRyZXNzPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIGlkPVwiZW1haWwtaW5wdXRcIlxuICAgICAgICAgICAgdGVzdElEPVwiZW1haWwtaW5wdXRcIlxuICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJlbWFpbC1oZWxwXCJcbiAgICAgICAgICAgIGFyaWEtcmVxdWlyZWQ9XCJ0cnVlXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxkaXYgaWQ9XCJlbWFpbC1oZWxwXCIgdGVzdElEPVwiZW1haWwtaGVscFwiPlxuICAgICAgICAgICAgRW50ZXIgeW91ciBlbWFpbCBhZGRyZXNzIHRvIHNpZ24gaW5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGFzc3dvcmQtaW5wdXRcIj5QYXNzd29yZDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBpZD1cInBhc3N3b3JkLWlucHV0XCJcbiAgICAgICAgICAgIHRlc3RJRD1cInBhc3N3b3JkLWlucHV0XCJcbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwicGFzc3dvcmQtaGVscFwiXG4gICAgICAgICAgICBhcmlhLXJlcXVpcmVkPVwidHJ1ZVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8ZGl2IGlkPVwicGFzc3dvcmQtaGVscFwiIHRlc3RJRD1cInBhc3N3b3JkLWhlbHBcIj5cbiAgICAgICAgICAgIEVudGVyIHlvdXIgcGFzc3dvcmRcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj4sXG4gICAgICApO1xuXG4gICAgICBjb25zdCBlbWFpbElucHV0ID0gZ2V0QnlUZXN0SWQoXCJlbWFpbC1pbnB1dFwiKTtcbiAgICAgIGNvbnN0IHBhc3N3b3JkSW5wdXQgPSBnZXRCeVRlc3RJZChcInBhc3N3b3JkLWlucHV0XCIpO1xuXG4gICAgICBleHBlY3QoZW1haWxJbnB1dCkudG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlKHsgcmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgICBleHBlY3QocGFzc3dvcmRJbnB1dCkudG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlKHsgcmVxdWlyZWQ6IHRydWUgfSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBhbm5vdW5jZSB2YWxpZGF0aW9uIGVycm9yc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVN1Ym1pdCA9ICgpID0+IHtcbiAgICAgICAgICBzZXRFcnJvcihcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3NcIik7XG4gICAgICAgICAgQWNjZXNzaWJpbGl0eUluZm8uYW5ub3VuY2VGb3JBY2Nlc3NpYmlsaXR5KFxuICAgICAgICAgICAgXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzXCIsXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxmb3JtPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHRlc3RJRD1cImVtYWlsLWlucHV0XCJcbiAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgICAgYXJpYS1pbnZhbGlkPXshIWVycm9yfVxuICAgICAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PXtlcnJvciA/IFwiZW1haWwtZXJyb3JcIiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7ZXJyb3IgPyAoXG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJlbWFpbC1lcnJvclwiIHRlc3RJRD1cImVtYWlsLWVycm9yXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgICAge2Vycm9yfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPGJ1dHRvbiB0ZXN0SUQ9XCJzdWJtaXQtYnV0dG9uXCIgb25QcmVzcz17aGFuZGxlU3VibWl0fT5cbiAgICAgICAgICAgICAgU3VibWl0XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPixcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGdldEJ5VGVzdElkKFwic3VibWl0LWJ1dHRvblwiKTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhzdWJtaXRCdXR0b24pO1xuXG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoXCJlbWFpbC1lcnJvclwiKSkudG9IYXZlQWNjZXNzaWJpbGl0eVJvbGUoXCJhbGVydFwiKTtcbiAgICAgIGV4cGVjdChBY2Nlc3NpYmlsaXR5SW5mby5hbm5vdW5jZUZvckFjY2Vzc2liaWxpdHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3NcIixcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiUGV0IENhcmQgQWNjZXNzaWJpbGl0eVwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgaGF2ZSBwcm9wZXIgYWNjZXNzaWJpbGl0eSBpbmZvcm1hdGlvbiBmb3IgcGV0IGNhcmRzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHBldCA9IHtcbiAgICAgICAgaWQ6IFwiMVwiLFxuICAgICAgICBuYW1lOiBcIkJ1ZGR5XCIsXG4gICAgICAgIGFnZTogMyxcbiAgICAgICAgYnJlZWQ6IFwiR29sZGVuIFJldHJpZXZlclwiLFxuICAgICAgICBwaG90b3M6IFtcInBob3RvMS5qcGdcIl0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgdGVzdElEPVwicGV0LWNhcmRcIlxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2BQZXQgY2FyZCBmb3IgJHtwZXQubmFtZX0sICR7cGV0LmFnZX0geWVhciBvbGQgJHtwZXQuYnJlZWR9YH1cbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5SGludD1cIkRvdWJsZSB0YXAgdG8gdmlldyBwZXQgZGV0YWlsc1wiXG4gICAgICAgID5cbiAgICAgICAgICA8aW1nIHNyYz17cGV0LnBob3Rvc1swXX0gYWx0PXtgUGhvdG8gb2YgJHtwZXQubmFtZX1gfSAvPlxuICAgICAgICAgIDxoMz57cGV0Lm5hbWV9PC9oMz5cbiAgICAgICAgICA8cD57cGV0LmFnZX0geWVhcnMgb2xkPC9wPlxuICAgICAgICAgIDxwPntwZXQuYnJlZWR9PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxuICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+LFxuICAgICAgKTtcblxuICAgICAgY29uc3QgcGV0Q2FyZCA9IGdldEJ5VGVzdElkKFwicGV0LWNhcmRcIik7XG4gICAgICBleHBlY3QocGV0Q2FyZCkudG9IYXZlQWNjZXNzaWJpbGl0eVJvbGUoXCJidXR0b25cIik7XG4gICAgICBleHBlY3QocGV0Q2FyZCkudG9IYXZlQWNjZXNzaWJpbGl0eUxhYmVsKFxuICAgICAgICBcIlBldCBjYXJkIGZvciBCdWRkeSwgMyB5ZWFyIG9sZCBHb2xkZW4gUmV0cmlldmVyXCIsXG4gICAgICApO1xuICAgICAgZXhwZWN0KHBldENhcmQpLnRvSGF2ZUFjY2Vzc2liaWxpdHlIaW50KFwiRG91YmxlIHRhcCB0byB2aWV3IHBldCBkZXRhaWxzXCIpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgYW5ub3VuY2Ugc3dpcGUgYWN0aW9uc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGVTd2lwZVJpZ2h0ID0gKCkgPT4ge1xuICAgICAgICAgIEFjY2Vzc2liaWxpdHlJbmZvLmFubm91bmNlRm9yQWNjZXNzaWJpbGl0eShcIlBldCBsaWtlZFwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoYW5kbGVTd2lwZUxlZnQgPSAoKSA9PiB7XG4gICAgICAgICAgQWNjZXNzaWJpbGl0eUluZm8uYW5ub3VuY2VGb3JBY2Nlc3NpYmlsaXR5KFwiUGV0IHBhc3NlZFwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIHRlc3RJRD1cImxpa2UtYnV0dG9uXCJcbiAgICAgICAgICAgICAgb25QcmVzcz17aGFuZGxlU3dpcGVSaWdodH1cbiAgICAgICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPVwiTGlrZSB0aGlzIHBldFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIExpa2VcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICB0ZXN0SUQ9XCJwYXNzLWJ1dHRvblwiXG4gICAgICAgICAgICAgIG9uUHJlc3M9e2hhbmRsZVN3aXBlTGVmdH1cbiAgICAgICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPVwiUGFzcyBvbiB0aGlzIHBldFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFBhc3NcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj4sXG4gICAgICApO1xuXG4gICAgICBjb25zdCBsaWtlQnV0dG9uID0gZ2V0QnlUZXN0SWQoXCJsaWtlLWJ1dHRvblwiKTtcbiAgICAgIGNvbnN0IHBhc3NCdXR0b24gPSBnZXRCeVRlc3RJZChcInBhc3MtYnV0dG9uXCIpO1xuXG4gICAgICBmaXJlRXZlbnQucHJlc3MobGlrZUJ1dHRvbik7XG4gICAgICBleHBlY3QoQWNjZXNzaWJpbGl0eUluZm8uYW5ub3VuY2VGb3JBY2Nlc3NpYmlsaXR5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgXCJQZXQgbGlrZWRcIixcbiAgICAgICk7XG5cbiAgICAgIGZpcmVFdmVudC5wcmVzcyhwYXNzQnV0dG9uKTtcbiAgICAgIGV4cGVjdChBY2Nlc3NpYmlsaXR5SW5mby5hbm5vdW5jZUZvckFjY2Vzc2liaWxpdHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBcIlBldCBwYXNzZWRcIixcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiQ2hhdCBBY2Nlc3NpYmlsaXR5XCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBoYXZlIHByb3BlciBjaGF0IG1lc3NhZ2UgYWNjZXNzaWJpbGl0eVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICBpZDogXCIxXCIsXG4gICAgICAgIHRleHQ6IFwiSGVsbG8hIEhvdyBhcmUgeW91P1wiLFxuICAgICAgICBzZW5kZXJJZDogXCJ1c2VyMVwiLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IFRlc3RDb21wb25lbnQgPSAoKSA9PiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICB0ZXN0SUQ9XCJtZXNzYWdlLTFcIlxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwidGV4dFwiXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPXtgTWVzc2FnZSBmcm9tICR7bWVzc2FnZS5zZW5kZXJJZH06ICR7bWVzc2FnZS50ZXh0fWB9XG4gICAgICAgID5cbiAgICAgICAgICA8c3Bhbj57bWVzc2FnZS50ZXh0fTwvc3Bhbj5cbiAgICAgICAgICA8dGltZT57bWVzc2FnZS50aW1lc3RhbXB9PC90aW1lPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxuICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+LFxuICAgICAgKTtcblxuICAgICAgY29uc3QgbWVzc2FnZUVsZW1lbnQgPSBnZXRCeVRlc3RJZChcIm1lc3NhZ2UtMVwiKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlRWxlbWVudCkudG9IYXZlQWNjZXNzaWJpbGl0eVJvbGUoXCJ0ZXh0XCIpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2VFbGVtZW50KS50b0hhdmVBY2Nlc3NpYmlsaXR5TGFiZWwoXG4gICAgICAgIFwiTWVzc2FnZSBmcm9tIHVzZXIxOiBIZWxsbyEgSG93IGFyZSB5b3U/XCIsXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgYW5ub3VuY2UgbmV3IG1lc3NhZ2VzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IFRlc3RDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IFttZXNzYWdlcywgc2V0TWVzc2FnZXNdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuXG4gICAgICAgIGNvbnN0IGFkZE1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3TWVzc2FnZSA9IHtcbiAgICAgICAgICAgIGlkOiBcIjJcIixcbiAgICAgICAgICAgIHRleHQ6IFwiTmV3IG1lc3NhZ2UgcmVjZWl2ZWRcIixcbiAgICAgICAgICAgIHNlbmRlcklkOiBcInVzZXIyXCIsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBzZXRNZXNzYWdlcygocHJldikgPT4gWy4uLnByZXYsIG5ld01lc3NhZ2VdKTtcbiAgICAgICAgICBBY2Nlc3NpYmlsaXR5SW5mby5hbm5vdW5jZUZvckFjY2Vzc2liaWxpdHkoXCJOZXcgbWVzc2FnZSByZWNlaXZlZFwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8YnV0dG9uIHRlc3RJRD1cImFkZC1tZXNzYWdlXCIgb25QcmVzcz17YWRkTWVzc2FnZX0+XG4gICAgICAgICAgICAgIEFkZCBNZXNzYWdlXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIHttZXNzYWdlcy5tYXAoKG1zZykgPT4gKFxuICAgICAgICAgICAgICA8ZGl2IGtleT17bXNnLmlkfSB0ZXN0SUQ9e2BtZXNzYWdlLSR7bXNnLmlkfWB9PlxuICAgICAgICAgICAgICAgIHttc2cudGV4dH1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxuICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+LFxuICAgICAgKTtcblxuICAgICAgY29uc3QgYWRkQnV0dG9uID0gZ2V0QnlUZXN0SWQoXCJhZGQtbWVzc2FnZVwiKTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhhZGRCdXR0b24pO1xuXG4gICAgICBleHBlY3QoQWNjZXNzaWJpbGl0eUluZm8uYW5ub3VuY2VGb3JBY2Nlc3NpYmlsaXR5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgXCJOZXcgbWVzc2FnZSByZWNlaXZlZFwiLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJWaWRlbyBDYWxsIEFjY2Vzc2liaWxpdHlcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGhhdmUgcHJvcGVyIGNhbGwgY29udHJvbCBhY2Nlc3NpYmlsaXR5XCIsICgpID0+IHtcbiAgICAgIGNvbnN0IFRlc3RDb21wb25lbnQgPSAoKSA9PiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdGVzdElEPVwibXV0ZS1idXR0b25cIlxuICAgICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPVwiTXV0ZSBtaWNyb3Bob25lXCJcbiAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZT17eyBzZWxlY3RlZDogZmFsc2UgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBNdXRlXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdGVzdElEPVwidmlkZW8tdG9nZ2xlXCJcbiAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD1cIlRvZ2dsZSB2aWRlb1wiXG4gICAgICAgICAgICBhY2Nlc3NpYmlsaXR5U3RhdGU9e3sgc2VsZWN0ZWQ6IHRydWUgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBWaWRlb1xuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gdGVzdElEPVwiZW5kLWNhbGxcIiBhY2Nlc3NpYmlsaXR5TGFiZWw9XCJFbmQgY2FsbFwiPlxuICAgICAgICAgICAgRW5kIENhbGxcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuXG4gICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPixcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG11dGVCdXR0b24gPSBnZXRCeVRlc3RJZChcIm11dGUtYnV0dG9uXCIpO1xuICAgICAgY29uc3QgdmlkZW9Ub2dnbGUgPSBnZXRCeVRlc3RJZChcInZpZGVvLXRvZ2dsZVwiKTtcbiAgICAgIGNvbnN0IGVuZENhbGxCdXR0b24gPSBnZXRCeVRlc3RJZChcImVuZC1jYWxsXCIpO1xuXG4gICAgICBleHBlY3QobXV0ZUJ1dHRvbikudG9IYXZlQWNjZXNzaWJpbGl0eUxhYmVsKFwiTXV0ZSBtaWNyb3Bob25lXCIpO1xuICAgICAgZXhwZWN0KG11dGVCdXR0b24pLnRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSh7IHNlbGVjdGVkOiBmYWxzZSB9KTtcbiAgICAgIGV4cGVjdCh2aWRlb1RvZ2dsZSkudG9IYXZlQWNjZXNzaWJpbGl0eUxhYmVsKFwiVG9nZ2xlIHZpZGVvXCIpO1xuICAgICAgZXhwZWN0KHZpZGVvVG9nZ2xlKS50b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGUoeyBzZWxlY3RlZDogdHJ1ZSB9KTtcbiAgICAgIGV4cGVjdChlbmRDYWxsQnV0dG9uKS50b0hhdmVBY2Nlc3NpYmlsaXR5TGFiZWwoXCJFbmQgY2FsbFwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGFubm91bmNlIGNhbGwgc3RhdGUgY2hhbmdlc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBbaXNNdXRlZCwgc2V0SXNNdXRlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgdG9nZ2xlTXV0ZSA9ICgpID0+IHtcbiAgICAgICAgICBzZXRJc011dGVkKCFpc011dGVkKTtcbiAgICAgICAgICBBY2Nlc3NpYmlsaXR5SW5mby5hbm5vdW5jZUZvckFjY2Vzc2liaWxpdHkoXG4gICAgICAgICAgICBpc011dGVkID8gXCJNaWNyb3Bob25lIHVubXV0ZWRcIiA6IFwiTWljcm9waG9uZSBtdXRlZFwiLFxuICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICB0ZXN0SUQ9XCJtdXRlLWJ1dHRvblwiXG4gICAgICAgICAgICAgIG9uUHJlc3M9e3RvZ2dsZU11dGV9XG4gICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZT17eyBzZWxlY3RlZDogaXNNdXRlZCB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7aXNNdXRlZCA/IFwiVW5tdXRlXCIgOiBcIk11dGVcIn1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj4sXG4gICAgICApO1xuXG4gICAgICBjb25zdCBtdXRlQnV0dG9uID0gZ2V0QnlUZXN0SWQoXCJtdXRlLWJ1dHRvblwiKTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhtdXRlQnV0dG9uKTtcblxuICAgICAgZXhwZWN0KEFjY2Vzc2liaWxpdHlJbmZvLmFubm91bmNlRm9yQWNjZXNzaWJpbGl0eSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIFwiTWljcm9waG9uZSBtdXRlZFwiLFxuICAgICAgKTtcblxuICAgICAgZmlyZUV2ZW50LnByZXNzKG11dGVCdXR0b24pO1xuICAgICAgZXhwZWN0KEFjY2Vzc2liaWxpdHlJbmZvLmFubm91bmNlRm9yQWNjZXNzaWJpbGl0eSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIFwiTWljcm9waG9uZSB1bm11dGVkXCIsXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIlZvaWNlIENvbnRyb2wgU3VwcG9ydFwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgc3VwcG9ydCB2b2ljZSBjb21tYW5kc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBbdm9pY2VDb250cm9sRW5hYmxlZCwgc2V0Vm9pY2VDb250cm9sRW5hYmxlZF0gPVxuICAgICAgICAgIFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcblxuICAgICAgICBjb25zdCBoYW5kbGVWb2ljZUNvbW1hbmQgPSAoY29tbWFuZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwibGlrZVwiOlxuICAgICAgICAgICAgICBBY2Nlc3NpYmlsaXR5SW5mby5hbm5vdW5jZUZvckFjY2Vzc2liaWxpdHkoXG4gICAgICAgICAgICAgICAgXCJQZXQgbGlrZWQgdmlhIHZvaWNlIGNvbW1hbmRcIixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicGFzc1wiOlxuICAgICAgICAgICAgICBBY2Nlc3NpYmlsaXR5SW5mby5hbm5vdW5jZUZvckFjY2Vzc2liaWxpdHkoXG4gICAgICAgICAgICAgICAgXCJQZXQgcGFzc2VkIHZpYSB2b2ljZSBjb21tYW5kXCIsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgdGVzdElEPVwidm9pY2UtY29udHJvbC10b2dnbGVcIlxuICAgICAgICAgICAgICBvblByZXNzPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0Vm9pY2VDb250cm9sRW5hYmxlZCghdm9pY2VDb250cm9sRW5hYmxlZCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt2b2ljZUNvbnRyb2xFbmFibGVkXG4gICAgICAgICAgICAgICAgPyBcIkRpc2FibGUgVm9pY2UgQ29udHJvbFwiXG4gICAgICAgICAgICAgICAgOiBcIkVuYWJsZSBWb2ljZSBDb250cm9sXCJ9XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIHt2b2ljZUNvbnRyb2xFbmFibGVkID8gKFxuICAgICAgICAgICAgICA8ZGl2IHRlc3RJRD1cInZvaWNlLWNvbW1hbmRzXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgdGVzdElEPVwidm9pY2UtbGlrZVwiXG4gICAgICAgICAgICAgICAgICBvblByZXNzPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVZvaWNlQ29tbWFuZChcImxpa2VcIik7XG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIFZvaWNlIExpa2VcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICB0ZXN0SUQ9XCJ2b2ljZS1wYXNzXCJcbiAgICAgICAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlVm9pY2VDb21tYW5kKFwicGFzc1wiKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgVm9pY2UgUGFzc1xuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj4sXG4gICAgICApO1xuXG4gICAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBnZXRCeVRlc3RJZChcInZvaWNlLWNvbnRyb2wtdG9nZ2xlXCIpO1xuICAgICAgZmlyZUV2ZW50LnByZXNzKHRvZ2dsZUJ1dHRvbik7XG5cbiAgICAgIGNvbnN0IHZvaWNlTGlrZUJ1dHRvbiA9IGdldEJ5VGVzdElkKFwidm9pY2UtbGlrZVwiKTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyh2b2ljZUxpa2VCdXR0b24pO1xuXG4gICAgICBleHBlY3QoQWNjZXNzaWJpbGl0eUluZm8uYW5ub3VuY2VGb3JBY2Nlc3NpYmlsaXR5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgXCJQZXQgbGlrZWQgdmlhIHZvaWNlIGNvbW1hbmRcIixcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiSGlnaCBDb250cmFzdCBNb2RlXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBzdXBwb3J0IGhpZ2ggY29udHJhc3QgbW9kZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGNvbG9yOiBcInZhcigtLXRleHQtY29sb3IpXCIsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwidmFyKC0tYmctY29sb3IpXCIsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHRlc3RJRD1cImhpZ2gtY29udHJhc3QtYnV0dG9uXCJcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGNvbG9yOiBcInZhcigtLWJ1dHRvbi10ZXh0LWNvbG9yKVwiLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwidmFyKC0tYnV0dG9uLWJnLWNvbG9yKVwiLFxuICAgICAgICAgICAgICBib3JkZXI6IFwiMnB4IHNvbGlkIHZhcigtLWJ1dHRvbi1ib3JkZXItY29sb3IpXCIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIEhpZ2ggQ29udHJhc3QgQnV0dG9uXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcblxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPFRlc3RDb21wb25lbnQgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj4sXG4gICAgICApO1xuXG4gICAgICBjb25zdCBidXR0b24gPSBnZXRCeVRlc3RJZChcImhpZ2gtY29udHJhc3QtYnV0dG9uXCIpO1xuICAgICAgZXhwZWN0KGJ1dHRvbikudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIkZvY3VzIE1hbmFnZW1lbnRcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIG1hbmFnZSBmb2N1cyBwcm9wZXJseSBpbiBtb2RhbHNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgVGVzdENvbXBvbmVudCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgW2lzTW9kYWxPcGVuLCBzZXRJc01vZGFsT3Blbl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICB0ZXN0SUQ9XCJvcGVuLW1vZGFsXCJcbiAgICAgICAgICAgICAgb25QcmVzcz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldElzTW9kYWxPcGVuKHRydWUpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBPcGVuIE1vZGFsXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIHtpc01vZGFsT3BlbiA/IChcbiAgICAgICAgICAgICAgPGRpdiB0ZXN0SUQ9XCJtb2RhbFwiIGFjY2Vzc2liaWxpdHlSb2xlPVwiZGlhbG9nXCIgYWNjZXNzaWJpbGl0eU1vZGFsPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgIHRlc3RJRD1cIm1vZGFsLWNsb3NlXCJcbiAgICAgICAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SXNNb2RhbE9wZW4oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBDbG9zZVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdGVzdElEPVwibW9kYWwtYWN0aW9uXCI+QWN0aW9uPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPixcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG9wZW5CdXR0b24gPSBnZXRCeVRlc3RJZChcIm9wZW4tbW9kYWxcIik7XG4gICAgICBmaXJlRXZlbnQucHJlc3Mob3BlbkJ1dHRvbik7XG5cbiAgICAgIGNvbnN0IG1vZGFsID0gZ2V0QnlUZXN0SWQoXCJtb2RhbFwiKTtcbiAgICAgIGV4cGVjdChtb2RhbCkudG9IYXZlQWNjZXNzaWJpbGl0eVJvbGUoXCJkaWFsb2dcIik7XG4gICAgICBleHBlY3QobW9kYWwpLnRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSh7IG1vZGFsOiB0cnVlIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQVlBQSxXQUFBLEdBQUtDLElBQUksQ0FDUCx1RUFBdUUsRUFDdkU7RUFBQSxPQUFPO0lBQ0xDLHFCQUFxQixFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU1DLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLElBQUksQ0FBQztJQUFBLEVBQUM7SUFDM0RDLGdCQUFnQixFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzNCSSxtQkFBbUIsRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUM5QksscUJBQXFCLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDaENNLHdCQUF3QixFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUNwQyxDQUFDO0FBQUEsQ0FDSCxDQUFDO0FBR0RKLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG1CQUFtQixFQUFFO0VBQUEsT0FBTztJQUNwQ1UsWUFBWSxFQUFFUixJQUFJLENBQUNDLEVB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