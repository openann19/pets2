{"version":3,"names":["_getJestObj","mock","isScreenReaderEnabled","jest","fn","Promise","resolve","addEventListener","removeEventListener","setAccessibilityFocus","announceForAccessibility","getItemAsync","setItemAsync","deleteItemAsync","socketService","connect","disconnect","emit","on","_interopRequireDefault","require","_toConsumableArray2","_slicedToArray2","_asyncToGenerator2","_react","_reactNative","_reactNative2","_reactQuery","_AuthProvider","_jsxRuntime","_require","createTestQueryClient","QueryClient","defaultOptions","queries","retry","mutations","TestWrapper","_ref","children","queryClient","jsx","QueryClientProvider","client","AuthProvider","describe","beforeEach","clearAllMocks","it","TestComponent","jsxs","testID","accessibilityLabel","_render","render","getByTestId","expect","toHaveAccessibilityLabel","accessibilityHint","_render2","toHaveAccessibilityHint","default","_React$useState","React","useState","_React$useState2","isLoading","setIsLoading","handleAction","setTimeout","AccessibilityInfo","onPress","accessibilityState","busy","_render3","button","fireEvent","press","waitFor","toHaveBeenCalledWith","accessibilityRole","_render4","toHaveAccessibilityRole","_React$useState3","_React$useState4","focusedIndex","setFocusedIndex","items","handleKeyPress","event","key","prev","Math","min","length","max","onKeyDown","map","item","index","toLowerCase","selected","onFocus","_render5","homeButton","profileButton","focus","toHaveAccessibilityState","keyDown","htmlFor","id","type","_render6","emailInput","passwordInput","required","_React$useState5","_React$useState6","error","setError","handleSubmit","undefined","role","_render7","submitButton","pet","name","age","breed","photos","src","alt","_render8","petCard","handleSwipeRight","handleSwipeLeft","_render9","likeButton","passButton","message","text","senderId","timestamp","Date","toISOString","_render0","messageElement","_React$useState7","_React$useState8","messages","setMessages","addMessage","newMessage","concat","msg","_render1","addButton","_render10","muteButton","videoToggle","endCallButton","_React$useState9","_React$useState0","isMuted","setIsMuted","toggleMute","_render11","_React$useState1","_React$useState10","voiceControlEnabled","setVoiceControlEnabled","handleVoiceCommand","command","_render12","toggleButton","voiceLikeButton","style","color","backgroundColor","border","_render13","toBeTruthy","_React$useState11","_React$useState12","isModalOpen","setIsModalOpen","accessibilityModal","_render14","openButton","modal"],"sources":["accessibility.test.tsx"],"sourcesContent":["/**\n * Accessibility Tests\n * Comprehensive testing of accessibility features and screen reader support\n */\n\nimport React from \"react\";\nimport { render, fireEvent, waitFor } from \"@testing-library/react-native\";\nimport { AccessibilityInfo } from \"react-native\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { AuthProvider } from \"../../providers/AuthProvider\";\n\n// Mock AccessibilityInfo\njest.mock(\n  \"react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo\",\n  () => ({\n    isScreenReaderEnabled: jest.fn(() => Promise.resolve(true)),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    setAccessibilityFocus: jest.fn(),\n    announceForAccessibility: jest.fn(),\n  }),\n);\n\n// Mock secure storage\njest.mock(\"expo-secure-store\", () => ({\n  getItemAsync: jest.fn(),\n  setItemAsync: jest.fn(),\n  deleteItemAsync: jest.fn(),\n}));\n\n// Mock socket service\njest.mock(\"../../services/socketService\", () => ({\n  socketService: {\n    connect: jest.fn(),\n    disconnect: jest.fn(),\n    emit: jest.fn(),\n    on: jest.fn(),\n  },\n}));\n\nconst createTestQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n  });\n\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const queryClient = createTestQueryClient();\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>{children}</AuthProvider>\n    </QueryClientProvider>\n  );\n};\n\ndescribe(\"Accessibility Tests\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Screen Reader Support\", () => {\n    it(\"should have proper accessibility labels on buttons\", () => {\n      const TestComponent = () => (\n        <div>\n          <button\n            testID=\"login-button\"\n            accessibilityLabel=\"Login to your account\"\n          >\n            Login\n          </button>\n          <button\n            testID=\"signup-button\"\n            accessibilityLabel=\"Create new account\"\n          >\n            Sign Up\n          </button>\n        </div>\n      );\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      expect(getByTestId(\"login-button\")).toHaveAccessibilityLabel(\n        \"Login to your account\",\n      );\n      expect(getByTestId(\"signup-button\")).toHaveAccessibilityLabel(\n        \"Create new account\",\n      );\n    });\n\n    it(\"should have proper accessibility hints\", () => {\n      const TestComponent = () => (\n        <div>\n          <button\n            testID=\"help-button\"\n            accessibilityLabel=\"Help\"\n            accessibilityHint=\"Opens help documentation\"\n          >\n            Help\n          </button>\n        </div>\n      );\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      expect(getByTestId(\"help-button\")).toHaveAccessibilityHint(\n        \"Opens help documentation\",\n      );\n    });\n\n    it(\"should announce important state changes\", async () => {\n      const TestComponent = () => {\n        const [isLoading, setIsLoading] = React.useState(false);\n\n        const handleAction = () => {\n          setIsLoading(true);\n          // Simulate async operation\n          setTimeout(() => {\n            setIsLoading(false);\n            AccessibilityInfo.announceForAccessibility(\n              \"Action completed successfully\",\n            );\n          }, 100);\n        };\n\n        return (\n          <div>\n            <button\n              testID=\"action-button\"\n              onPress={handleAction}\n              accessibilityState={{ busy: isLoading }}\n            >\n              {isLoading ? \"Loading...\" : \"Perform Action\"}\n            </button>\n          </div>\n        );\n      };\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const button = getByTestId(\"action-button\");\n      fireEvent.press(button);\n\n      await waitFor(() => {\n        expect(AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith(\n          \"Action completed successfully\",\n        );\n      });\n    });\n  });\n\n  describe(\"Navigation Accessibility\", () => {\n    it(\"should have proper navigation labels\", () => {\n      const TestComponent = () => (\n        <div>\n          <nav testID=\"main-navigation\" accessibilityRole=\"navigation\">\n            <button testID=\"nav-home\" accessibilityLabel=\"Home page\">\n              Home\n            </button>\n            <button testID=\"nav-profile\" accessibilityLabel=\"Profile page\">\n              Profile\n            </button>\n            <button testID=\"nav-settings\" accessibilityLabel=\"Settings page\">\n              Settings\n            </button>\n          </nav>\n        </div>\n      );\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      expect(getByTestId(\"main-navigation\")).toHaveAccessibilityRole(\n        \"navigation\",\n      );\n      expect(getByTestId(\"nav-home\")).toHaveAccessibilityLabel(\"Home page\");\n      expect(getByTestId(\"nav-profile\")).toHaveAccessibilityLabel(\n        \"Profile page\",\n      );\n      expect(getByTestId(\"nav-settings\")).toHaveAccessibilityLabel(\n        \"Settings page\",\n      );\n    });\n\n    it(\"should support keyboard navigation\", () => {\n      const TestComponent = () => {\n        const [focusedIndex, setFocusedIndex] = React.useState(0);\n        const items = [\"Home\", \"Profile\", \"Settings\"];\n\n        const handleKeyPress = (event: unknown) => {\n          if (event.key === \"ArrowRight\") {\n            setFocusedIndex((prev) => Math.min(prev + 1, items.length - 1));\n          } else if (event.key === \"ArrowLeft\") {\n            setFocusedIndex((prev) => Math.max(prev - 1, 0));\n          }\n        };\n\n        return (\n          <div onKeyDown={handleKeyPress}>\n            {items.map((item, index) => (\n              <button\n                key={item}\n                testID={`nav-${item.toLowerCase()}`}\n                accessibilityState={{ selected: index === focusedIndex }}\n                onFocus={() => {\n                  setFocusedIndex(index);\n                }}\n              >\n                {item}\n              </button>\n            ))}\n          </div>\n        );\n      };\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const homeButton = getByTestId(\"nav-home\");\n      const profileButton = getByTestId(\"nav-profile\");\n\n      fireEvent.focus(homeButton);\n      expect(homeButton).toHaveAccessibilityState({ selected: true });\n\n      fireEvent.keyDown(homeButton, { key: \"ArrowRight\" });\n      fireEvent.focus(profileButton);\n      expect(profileButton).toHaveAccessibilityState({ selected: true });\n    });\n  });\n\n  describe(\"Form Accessibility\", () => {\n    it(\"should have proper form labels and descriptions\", () => {\n      const TestComponent = () => (\n        <form>\n          <label htmlFor=\"email-input\">Email Address</label>\n          <input\n            id=\"email-input\"\n            testID=\"email-input\"\n            type=\"email\"\n            aria-describedby=\"email-help\"\n            aria-required=\"true\"\n          />\n          <div id=\"email-help\" testID=\"email-help\">\n            Enter your email address to sign in\n          </div>\n\n          <label htmlFor=\"password-input\">Password</label>\n          <input\n            id=\"password-input\"\n            testID=\"password-input\"\n            type=\"password\"\n            aria-describedby=\"password-help\"\n            aria-required=\"true\"\n          />\n          <div id=\"password-help\" testID=\"password-help\">\n            Enter your password\n          </div>\n        </form>\n      );\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const emailInput = getByTestId(\"email-input\");\n      const passwordInput = getByTestId(\"password-input\");\n\n      expect(emailInput).toHaveAccessibilityState({ required: true });\n      expect(passwordInput).toHaveAccessibilityState({ required: true });\n    });\n\n    it(\"should announce validation errors\", () => {\n      const TestComponent = () => {\n        const [error, setError] = React.useState(\"\");\n\n        const handleSubmit = () => {\n          setError(\"Please enter a valid email address\");\n          AccessibilityInfo.announceForAccessibility(\n            \"Please enter a valid email address\",\n          );\n        };\n\n        return (\n          <form>\n            <input\n              testID=\"email-input\"\n              type=\"email\"\n              aria-invalid={!!error}\n              aria-describedby={error ? \"email-error\" : undefined}\n            />\n            {error ? (\n              <div id=\"email-error\" testID=\"email-error\" role=\"alert\">\n                {error}\n              </div>\n            ) : null}\n            <button testID=\"submit-button\" onPress={handleSubmit}>\n              Submit\n            </button>\n          </form>\n        );\n      };\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const submitButton = getByTestId(\"submit-button\");\n      fireEvent.press(submitButton);\n\n      expect(getByTestId(\"email-error\")).toHaveAccessibilityRole(\"alert\");\n      expect(AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith(\n        \"Please enter a valid email address\",\n      );\n    });\n  });\n\n  describe(\"Pet Card Accessibility\", () => {\n    it(\"should have proper accessibility information for pet cards\", () => {\n      const pet = {\n        id: \"1\",\n        name: \"Buddy\",\n        age: 3,\n        breed: \"Golden Retriever\",\n        photos: [\"photo1.jpg\"],\n      };\n\n      const TestComponent = () => (\n        <div\n          testID=\"pet-card\"\n          accessibilityRole=\"button\"\n          accessibilityLabel={`Pet card for ${pet.name}, ${pet.age} year old ${pet.breed}`}\n          accessibilityHint=\"Double tap to view pet details\"\n        >\n          <img src={pet.photos[0]} alt={`Photo of ${pet.name}`} />\n          <h3>{pet.name}</h3>\n          <p>{pet.age} years old</p>\n          <p>{pet.breed}</p>\n        </div>\n      );\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const petCard = getByTestId(\"pet-card\");\n      expect(petCard).toHaveAccessibilityRole(\"button\");\n      expect(petCard).toHaveAccessibilityLabel(\n        \"Pet card for Buddy, 3 year old Golden Retriever\",\n      );\n      expect(petCard).toHaveAccessibilityHint(\"Double tap to view pet details\");\n    });\n\n    it(\"should announce swipe actions\", () => {\n      const TestComponent = () => {\n        const handleSwipeRight = () => {\n          AccessibilityInfo.announceForAccessibility(\"Pet liked\");\n        };\n\n        const handleSwipeLeft = () => {\n          AccessibilityInfo.announceForAccessibility(\"Pet passed\");\n        };\n\n        return (\n          <div>\n            <button\n              testID=\"like-button\"\n              onPress={handleSwipeRight}\n              accessibilityLabel=\"Like this pet\"\n            >\n              Like\n            </button>\n            <button\n              testID=\"pass-button\"\n              onPress={handleSwipeLeft}\n              accessibilityLabel=\"Pass on this pet\"\n            >\n              Pass\n            </button>\n          </div>\n        );\n      };\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const likeButton = getByTestId(\"like-button\");\n      const passButton = getByTestId(\"pass-button\");\n\n      fireEvent.press(likeButton);\n      expect(AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith(\n        \"Pet liked\",\n      );\n\n      fireEvent.press(passButton);\n      expect(AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith(\n        \"Pet passed\",\n      );\n    });\n  });\n\n  describe(\"Chat Accessibility\", () => {\n    it(\"should have proper chat message accessibility\", () => {\n      const message = {\n        id: \"1\",\n        text: \"Hello! How are you?\",\n        senderId: \"user1\",\n        timestamp: new Date().toISOString(),\n      };\n\n      const TestComponent = () => (\n        <div\n          testID=\"message-1\"\n          accessibilityRole=\"text\"\n          accessibilityLabel={`Message from ${message.senderId}: ${message.text}`}\n        >\n          <span>{message.text}</span>\n          <time>{message.timestamp}</time>\n        </div>\n      );\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const messageElement = getByTestId(\"message-1\");\n      expect(messageElement).toHaveAccessibilityRole(\"text\");\n      expect(messageElement).toHaveAccessibilityLabel(\n        \"Message from user1: Hello! How are you?\",\n      );\n    });\n\n    it(\"should announce new messages\", () => {\n      const TestComponent = () => {\n        const [messages, setMessages] = React.useState([]);\n\n        const addMessage = () => {\n          const newMessage = {\n            id: \"2\",\n            text: \"New message received\",\n            senderId: \"user2\",\n          };\n          setMessages((prev) => [...prev, newMessage]);\n          AccessibilityInfo.announceForAccessibility(\"New message received\");\n        };\n\n        return (\n          <div>\n            <button testID=\"add-message\" onPress={addMessage}>\n              Add Message\n            </button>\n            {messages.map((msg) => (\n              <div key={msg.id} testID={`message-${msg.id}`}>\n                {msg.text}\n              </div>\n            ))}\n          </div>\n        );\n      };\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const addButton = getByTestId(\"add-message\");\n      fireEvent.press(addButton);\n\n      expect(AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith(\n        \"New message received\",\n      );\n    });\n  });\n\n  describe(\"Video Call Accessibility\", () => {\n    it(\"should have proper call control accessibility\", () => {\n      const TestComponent = () => (\n        <div>\n          <button\n            testID=\"mute-button\"\n            accessibilityLabel=\"Mute microphone\"\n            accessibilityState={{ selected: false }}\n          >\n            Mute\n          </button>\n          <button\n            testID=\"video-toggle\"\n            accessibilityLabel=\"Toggle video\"\n            accessibilityState={{ selected: true }}\n          >\n            Video\n          </button>\n          <button testID=\"end-call\" accessibilityLabel=\"End call\">\n            End Call\n          </button>\n        </div>\n      );\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const muteButton = getByTestId(\"mute-button\");\n      const videoToggle = getByTestId(\"video-toggle\");\n      const endCallButton = getByTestId(\"end-call\");\n\n      expect(muteButton).toHaveAccessibilityLabel(\"Mute microphone\");\n      expect(muteButton).toHaveAccessibilityState({ selected: false });\n      expect(videoToggle).toHaveAccessibilityLabel(\"Toggle video\");\n      expect(videoToggle).toHaveAccessibilityState({ selected: true });\n      expect(endCallButton).toHaveAccessibilityLabel(\"End call\");\n    });\n\n    it(\"should announce call state changes\", () => {\n      const TestComponent = () => {\n        const [isMuted, setIsMuted] = React.useState(false);\n\n        const toggleMute = () => {\n          setIsMuted(!isMuted);\n          AccessibilityInfo.announceForAccessibility(\n            isMuted ? \"Microphone unmuted\" : \"Microphone muted\",\n          );\n        };\n\n        return (\n          <div>\n            <button\n              testID=\"mute-button\"\n              onPress={toggleMute}\n              accessibilityState={{ selected: isMuted }}\n            >\n              {isMuted ? \"Unmute\" : \"Mute\"}\n            </button>\n          </div>\n        );\n      };\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const muteButton = getByTestId(\"mute-button\");\n      fireEvent.press(muteButton);\n\n      expect(AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith(\n        \"Microphone muted\",\n      );\n\n      fireEvent.press(muteButton);\n      expect(AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith(\n        \"Microphone unmuted\",\n      );\n    });\n  });\n\n  describe(\"Voice Control Support\", () => {\n    it(\"should support voice commands\", () => {\n      const TestComponent = () => {\n        const [voiceControlEnabled, setVoiceControlEnabled] =\n          React.useState(false);\n\n        const handleVoiceCommand = (command: string) => {\n          switch (command) {\n            case \"like\":\n              AccessibilityInfo.announceForAccessibility(\n                \"Pet liked via voice command\",\n              );\n              break;\n            case \"pass\":\n              AccessibilityInfo.announceForAccessibility(\n                \"Pet passed via voice command\",\n              );\n              break;\n            default:\n              break;\n          }\n        };\n\n        return (\n          <div>\n            <button\n              testID=\"voice-control-toggle\"\n              onPress={() => {\n                setVoiceControlEnabled(!voiceControlEnabled);\n              }}\n            >\n              {voiceControlEnabled\n                ? \"Disable Voice Control\"\n                : \"Enable Voice Control\"}\n            </button>\n            {voiceControlEnabled ? (\n              <div testID=\"voice-commands\">\n                <button\n                  testID=\"voice-like\"\n                  onPress={() => {\n                    handleVoiceCommand(\"like\");\n                  }}\n                >\n                  Voice Like\n                </button>\n                <button\n                  testID=\"voice-pass\"\n                  onPress={() => {\n                    handleVoiceCommand(\"pass\");\n                  }}\n                >\n                  Voice Pass\n                </button>\n              </div>\n            ) : null}\n          </div>\n        );\n      };\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const toggleButton = getByTestId(\"voice-control-toggle\");\n      fireEvent.press(toggleButton);\n\n      const voiceLikeButton = getByTestId(\"voice-like\");\n      fireEvent.press(voiceLikeButton);\n\n      expect(AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith(\n        \"Pet liked via voice command\",\n      );\n    });\n  });\n\n  describe(\"High Contrast Mode\", () => {\n    it(\"should support high contrast mode\", () => {\n      const TestComponent = () => (\n        <div\n          style={{\n            color: \"var(--text-color)\",\n            backgroundColor: \"var(--bg-color)\",\n          }}\n        >\n          <button\n            testID=\"high-contrast-button\"\n            style={{\n              color: \"var(--button-text-color)\",\n              backgroundColor: \"var(--button-bg-color)\",\n              border: \"2px solid var(--button-border-color)\",\n            }}\n          >\n            High Contrast Button\n          </button>\n        </div>\n      );\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const button = getByTestId(\"high-contrast-button\");\n      expect(button).toBeTruthy();\n    });\n  });\n\n  describe(\"Focus Management\", () => {\n    it(\"should manage focus properly in modals\", () => {\n      const TestComponent = () => {\n        const [isModalOpen, setIsModalOpen] = React.useState(false);\n\n        return (\n          <div>\n            <button\n              testID=\"open-modal\"\n              onPress={() => {\n                setIsModalOpen(true);\n              }}\n            >\n              Open Modal\n            </button>\n            {isModalOpen ? (\n              <div testID=\"modal\" accessibilityRole=\"dialog\" accessibilityModal>\n                <button\n                  testID=\"modal-close\"\n                  onPress={() => {\n                    setIsModalOpen(false);\n                  }}\n                >\n                  Close\n                </button>\n                <button testID=\"modal-action\">Action</button>\n              </div>\n            ) : null}\n          </div>\n        );\n      };\n\n      const { getByTestId } = render(\n        <TestWrapper>\n          <TestComponent />\n        </TestWrapper>,\n      );\n\n      const openButton = getByTestId(\"open-modal\");\n      fireEvent.press(openButton);\n\n      const modal = getByTestId(\"modal\");\n      expect(modal).toHaveAccessibilityRole(\"dialog\");\n      expect(modal).toHaveAccessibilityState({ modal: true });\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}