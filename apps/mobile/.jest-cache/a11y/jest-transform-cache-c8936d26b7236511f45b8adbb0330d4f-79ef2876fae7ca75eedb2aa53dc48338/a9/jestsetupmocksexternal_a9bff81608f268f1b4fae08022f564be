dfec0c7d5a43c0dcba5145dd5c3e6ae4
"use strict";

_getJestObj().mock('@sentry/react-native', function () {
  return {
    init: jest.fn(),
    captureException: jest.fn(),
    captureMessage: jest.fn(),
    addBreadcrumb: jest.fn(),
    setUser: jest.fn(),
    setContext: jest.fn(),
    setTag: jest.fn(),
    setTags: jest.fn(),
    setExtra: jest.fn(),
    setExtras: jest.fn(),
    Integrations: {},
    Severity: {
      Error: 'error',
      Warning: 'warning',
      Info: 'info',
      Debug: 'debug'
    }
  };
});
_getJestObj().mock('expo-local-authentication', function () {
  return {
    hasHardwareAsync: jest.fn(function () {
      return Promise.resolve(true);
    }),
    isEnrolledAsync: jest.fn(function () {
      return Promise.resolve(true);
    }),
    supportedAuthenticationTypesAsync: jest.fn(function () {
      return Promise.resolve([1, 2]);
    }),
    authenticateAsync: jest.fn(function () {
      return Promise.resolve({
        success: true
      });
    }),
    LocalAuthenticationResult: {
      Success: 'success',
      Cancel: 'cancel',
      NotEnrolled: 'notEnrolled',
      NotAvailable: 'notAvailable'
    }
  };
});
_getJestObj().mock('expo-secure-store', function () {
  return {
    setItemAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    getItemAsync: jest.fn(function () {
      return Promise.resolve(null);
    }),
    deleteItemAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    isAvailableAsync: jest.fn(function () {
      return Promise.resolve(true);
    }),
    whenAvailable: jest.fn()
  };
});
_getJestObj().mock('react-native-keychain', function () {
  return {
    SECURITY_LEVEL: {
      ANY: 'ANY',
      SECURE_HARDWARE: 'SECURE_HARDWARE'
    },
    ACCESSIBLE: {
      WHEN_UNLOCKED: 'WHEN_UNLOCKED',
      WHEN_UNLOCKED_THIS_DEVICE_ONLY: 'WHEN_UNLOCKED_THIS_DEVICE_ONLY',
      AFTER_FIRST_UNLOCK: 'AFTER_FIRST_UNLOCK',
      AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: 'AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY',
      ALWAYS: 'ALWAYS',
      ALWAYS_THIS_DEVICE_ONLY: 'ALWAYS_THIS_DEVICE_ONLY'
    },
    setGenericPassword: jest.fn(function () {
      return Promise.resolve(true);
    }),
    getGenericPassword: jest.fn(function () {
      return Promise.resolve(false);
    }),
    resetGenericPassword: jest.fn(function () {
      return Promise.resolve(true);
    })
  };
});
_getJestObj().mock('react-native-aes-crypto', function () {
  return {
    pbkdf2: jest.fn(function () {
      return Promise.resolve('hash');
    }),
    encrypt: jest.fn(function () {
      return Promise.resolve('encrypted');
    }),
    decrypt: jest.fn(function () {
      return Promise.resolve('decrypted');
    })
  };
});
_getJestObj().mock('react-native-encrypted-storage', function () {
  return {
    __esModule: true,
    default: {
      setItem: jest.fn(function () {
        return Promise.resolve();
      }),
      getItem: jest.fn(function () {
        return Promise.resolve(null);
      }),
      removeItem: jest.fn(function () {
        return Promise.resolve();
      }),
      clear: jest.fn(function () {
        return Promise.resolve();
      })
    }
  };
});
_getJestObj().mock('@tanstack/react-query', function () {
  return _objectSpread(_objectSpread({}, jest.requireActual('@tanstack/react-query')), {}, {
    useQuery: jest.fn(function () {
      return {
        data: null,
        isLoading: false,
        isError: false,
        error: null,
        refetch: jest.fn()
      };
    }),
    useMutation: jest.fn(function () {
      return {
        mutate: jest.fn(),
        mutateAsync: jest.fn(),
        isLoading: false,
        isError: false,
        error: null
      };
    }),
    useQueryClient: jest.fn(function () {
      return {
        invalidateQueries: jest.fn(),
        setQueryData: jest.fn(),
        getQueryData: jest.fn()
      };
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,