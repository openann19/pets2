{"version":3,"names":["_getJestObj","mock","__esModule","default","getInstance","jest","fn","addCallback","removeCallback","startMonitoring","stopMonitoring","getCurrentFPS","useTheme","isDark","colors","primary","surface","surfaceElevated","text","textSecondary","border","shadow","Colors","borderLight","Spacing","xs","sm","md","lg","xl","BorderRadius","AnimationConfigs","spring","damping","stiffness","mass","timing","duration","PREMIUM_SHADOWS","medium","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_PerformanceMonitor","_PhoenixCard","_jsxRuntime","_require","describe","performanceMonitor","beforeEach","clearAllMocks","PerformanceMonitor","it","onPressMock","render","jsx","PhoenixCard","title","interactive","onPress","glowOnPress","card","screen","getByLabelText","fireEvent","expect","toHaveBeenCalled","toBeGreaterThanOrEqual","i","_render","rerender","unmount","toBe","toBeTruthy","startTime","Date","now","press","interactionTime","toBeLessThanOrEqual","toHaveBeenCalledTimes","disabled","not","_render2","initialLayout","props","style","variants","forEach","variant","_render3","size"],"sources":["PhoenixCard.performance.test.tsx"],"sourcesContent":["/**\n * PhoenixCard Performance Tests\n * Testing animation performance and bundle size compliance\n */\n\nimport React from \"react\";\nimport { render } from \"@testing-library/react-native\";\nimport { PerformanceMonitor } from \"../../utils/PerformanceMonitor\";\nimport { PhoenixCard } from \"../../components/phoenix/PhoenixCard\";\nimport { Theme } from '../../theme/unified-theme';\n\n// Mock PerformanceMonitor\njest.mock(\"../../utils/PerformanceMonitor\", () => ({\n  __esModule: true,\n  default: {\n    getInstance: jest.fn(() => ({\n      addCallback: jest.fn(),\n      removeCallback: jest.fn(),\n      startMonitoring: jest.fn(),\n      stopMonitoring: jest.fn(),\n      getCurrentFPS: jest.fn(() => 60),\n    })),\n  },\n}));\n\n// Mock theme\njest.mock(\"../../theme/Provider\", () => ({\n  useTheme: () => ({\n    isDark: false,\n    colors: {\n      primary: \"#007AFF\",\n      surface: \"Theme.colors.neutral[0]\",\n      surfaceElevated: \"#F8F9FA\",\n      text: \"Theme.colors.neutral[950]\",\n      textSecondary: \"#666666\",\n      border: \"#E5E5E5\",\n      shadow: \"Theme.colors.neutral[950]\",\n    },\n  }),\n}));\n\n// Mock styles\njest.mock(\"../../animation\", () => ({\n  Colors: {\n    primary: \"#007AFF\",\n    surface: \"Theme.colors.neutral[0]\",\n    surfaceElevated: \"#F8F9FA\",\n    text: \"Theme.colors.neutral[950]\",\n    textSecondary: \"#666666\",\n    border: \"#E5E5E5\",\n    borderLight: \"#F0F0F0\",\n    shadow: \"Theme.colors.neutral[950]\",\n  },\n  Spacing: {\n    xs: 4,\n    sm: 8,\n    md: 16,\n    lg: 24,\n    xl: 32,\n    \"2xl\": 48,\n  },\n  BorderRadius: {\n    sm: 4,\n    md: 8,\n    lg: 12,\n    xl: 16,\n    \"2xl\": 24,\n  },\n  AnimationConfigs: {\n    spring: { damping: 15, stiffness: 300, mass: 1 },\n    timing: { duration: 300 },\n  },\n  PREMIUM_SHADOWS: {\n    medium: {\n      shadowColor: \"Theme.colors.neutral[950]\",\n      shadowOffset: { width: 0, height: 4 },\n      shadowOpacity: 0.1,\n      shadowRadius: 8,\n      elevation: 4,\n    },\n  },\n}));\n\ndescribe(\"PhoenixCard Performance Tests (Rule 06)\", () => {\n  let performanceMonitor: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    performanceMonitor = PerformanceMonitor.getInstance();\n  });\n\n  describe(\"Animation Performance (60fps requirement)\", () => {\n    it(\"should maintain 60fps during animations\", () => {\n      const onPressMock = jest.fn();\n\n      // Render component with animations\n      render(\n        <PhoenixCard\n          title=\"Performance Test Card\"\n          interactive={true}\n          onPress={onPressMock}\n          glowOnPress={true}\n        />,\n      );\n\n      // Simulate interaction that triggers animation\n      const card = screen.getByLabelText(\"Performance Test Card\");\n      fireEvent(card, \"pressIn\");\n\n      // Verify FPS monitoring is active\n      expect(performanceMonitor.getCurrentFPS).toHaveBeenCalled();\n\n      // Animation should complete within performance budget\n      // In real implementation, this would measure actual frame drops\n      expect(performanceMonitor.getCurrentFPS()).toBeGreaterThanOrEqual(50);\n    });\n\n    it(\"should not cause frame drops during rapid interactions\", () => {\n      const onPressMock = jest.fn();\n\n      render(\n        <PhoenixCard\n          title=\"Rapid Interaction Test\"\n          interactive={true}\n          onPress={onPressMock}\n        />,\n      );\n\n      const card = screen.getByLabelText(\"Rapid Interaction Test\");\n\n      // Simulate rapid press interactions\n      for (let i = 0; i < 10; i++) {\n        fireEvent(card, \"pressIn\");\n        fireEvent(card, \"pressOut\");\n      }\n\n      // Should maintain performance\n      expect(performanceMonitor.getCurrentFPS()).toBeGreaterThanOrEqual(50);\n    });\n  });\n\n  describe(\"Memory Usage (Bundle Budget Compliance)\", () => {\n    it(\"should not cause memory leaks during lifecycle\", () => {\n      const onPressMock = jest.fn();\n\n      const { rerender, unmount } = render(\n        <PhoenixCard\n          title=\"Memory Test\"\n          interactive={true}\n          onPress={onPressMock}\n        />,\n      );\n\n      // Simulate multiple re-renders\n      for (let i = 0; i < 5; i++) {\n        rerender(\n          <PhoenixCard\n            title={`Memory Test ${i}`}\n            interactive={true}\n            onPress={onPressMock}\n          />,\n        );\n      }\n\n      // Unmount should clean up properly\n      unmount();\n\n      // In real implementation, this would verify memory cleanup\n      expect(true).toBe(true); // Placeholder for memory leak detection\n    });\n\n    it(\"should have minimal bundle impact\", () => {\n      // This test would verify bundle size in a real CI environment\n      // For now, we test that the component is properly tree-shakable\n\n      const onPressMock = jest.fn();\n\n      render(\n        <PhoenixCard\n          title=\"Bundle Test\"\n          interactive={true}\n          onPress={onPressMock}\n        />,\n      );\n\n      const card = screen.getByLabelText(\"Bundle Test\");\n      expect(card).toBeTruthy();\n    });\n  });\n\n  describe(\"Interaction Performance (INP ≤ 200ms)\", () => {\n    it(\"should respond to interactions within 200ms\", async () => {\n      const onPressMock = jest.fn();\n\n      render(\n        <PhoenixCard\n          title=\"Interaction Performance Test\"\n          interactive={true}\n          onPress={onPressMock}\n        />,\n      );\n\n      const card = screen.getByLabelText(\"Interaction Performance Test\");\n\n      // Measure interaction time\n      const startTime = Date.now();\n      fireEvent.press(card);\n      const interactionTime = Date.now() - startTime;\n\n      // Should respond within 200ms (INP budget)\n      expect(interactionTime).toBeLessThanOrEqual(200);\n      expect(onPressMock).toHaveBeenCalledTimes(1);\n    });\n\n    it(\"should handle disabled state without performance impact\", () => {\n      const onPressMock = jest.fn();\n\n      render(\n        <PhoenixCard\n          title=\"Disabled Performance Test\"\n          interactive={true}\n          onPress={onPressMock}\n          disabled={true}\n        />,\n      );\n\n      const card = screen.getByLabelText(\"Disabled Performance Test\");\n\n      // Disabled interactions should still perform well\n      const startTime = Date.now();\n      fireEvent.press(card);\n      const interactionTime = Date.now() - startTime;\n\n      expect(interactionTime).toBeLessThanOrEqual(200);\n      expect(onPressMock).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Layout Stability (CLS ≤ 0.1)\", () => {\n    it(\"should not cause layout shifts during state changes\", () => {\n      const onPressMock = jest.fn();\n\n      const { rerender } = render(\n        <PhoenixCard\n          title=\"Layout Stability Test\"\n          interactive={true}\n          onPress={onPressMock}\n        />,\n      );\n\n      const card = screen.getByLabelText(\"Layout Stability Test\");\n\n      // Measure initial layout\n      const initialLayout = card.props.style;\n\n      // Trigger state change (press interaction)\n      fireEvent(card, \"pressIn\");\n\n      // Layout should remain stable (no sudden size changes)\n      // In real implementation, this would measure actual layout shifts\n      expect(card).toBeTruthy();\n    });\n\n    it(\"should maintain consistent dimensions across variants\", () => {\n      const variants = [\"elevated\", \"glass\", \"neon\", \"minimal\"] as const;\n\n      variants.forEach((variant) => {\n        const { rerender } = render(\n          <PhoenixCard\n            title={`${variant} Layout Test`}\n            variant={variant}\n            size=\"md\"\n          />,\n        );\n\n        const card = screen.getByLabelText(`${variant} Layout Test`);\n        expect(card).toBeTruthy();\n\n        // In real implementation, this would verify consistent sizing\n      });\n    });\n  });\n\n  describe(\"Animation Budget Compliance\", () => {\n    it(\"should use spring animations within 120-320ms range\", () => {\n      // This test verifies animation configurations\n      const onPressMock = jest.fn();\n\n      render(\n        <PhoenixCard\n          title=\"Animation Budget Test\"\n          interactive={true}\n          onPress={onPressMock}\n        />,\n      );\n\n      const card = screen.getByLabelText(\"Animation Budget Test\");\n\n      // Trigger animation\n      fireEvent(card, \"pressIn\");\n\n      // Animation should complete within budget\n      // In real implementation, this would measure actual animation duration\n      expect(card).toBeTruthy();\n    });\n\n    it(\"should prioritize transform animations over layout changes\", () => {\n      // Transform animations (scale, translate) are more performant than layout changes\n      const onPressMock = jest.fn();\n\n      render(\n        <PhoenixCard\n          title=\"Transform Animation Test\"\n          interactive={true}\n          onPress={onPressMock}\n        />,\n      );\n\n      const card = screen.getByLabelText(\"Transform Animation Test\");\n\n      // Should use transform animations, not layout animations\n      fireEvent(card, \"pressIn\");\n      fireEvent(card, \"pressOut\");\n\n      expect(onPressMock).toHaveBeenCalledTimes(0); // Only test animation, not press\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}