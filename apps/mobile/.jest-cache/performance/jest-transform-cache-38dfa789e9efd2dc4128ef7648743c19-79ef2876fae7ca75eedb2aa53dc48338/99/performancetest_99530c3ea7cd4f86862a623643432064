c57244fee99cdc91c0e5866eafec3861
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../services/api");
_getJestObj().mock("../services/offlineService");
_getJestObj().mock("../services/uploadHygiene");
_getJestObj().mock('react-native/Libraries/Utilities/Performance', function () {
  return {
    mark: _globals.jest.fn(),
    measure: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _SwipeScreen = require("../screens/SwipeScreen");
var _ChatScreen = require("../screens/ChatScreen");
var _CommunityFeed = require("../components/CommunityFeed");
var _api = require("../services/api");
var _offlineService = require("../services/offlineService");
var _uploadHygiene = require("../services/uploadHygiene");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockApi = _api.api;
var mockOfflineService = _offlineService.offlineService;
var mockUploadHygieneService = _uploadHygiene.uploadHygieneService;
var _require = require('react-native/Libraries/Utilities/Performance'),
  Performance = _require.Performance;
var PERFORMANCE_THRESHOLDS = {
  INITIAL_RENDER: 100,
  COMPONENT_UPDATE: 16,
  API_RESPONSE: 1000,
  IMAGE_LOAD: 2000,
  ANIMATION_FRAME: 16,
  MEMORY_USAGE: 50 * 1024 * 1024,
  BUNDLE_SIZE: 10 * 1024 * 1024
};
(0, _globals.describe)('PawfectMatch Performance Test Suite', function () {
  var performanceMarks = [];
  var performanceMeasures = [];
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    performanceMarks = [];
    performanceMeasures = [];
    Performance.mark.mockImplementation(function (name) {
      performanceMarks.push(name);
    });
    Performance.measure.mockImplementation(function (name, startMark, endMark) {
      var measure = {
        name: name,
        startMark: startMark,
        endMark: endMark,
        duration: Math.random() * 100
      };
      performanceMeasures.push(measure);
      return measure;
    });
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockApi.get.mockResolvedValue({
      data: []
    });
    mockOfflineService.getPets.mockResolvedValue([]);
  });
  (0, _globals.afterEach)(function () {
    (0, _globals.expect)(performanceMarks.length).toBeLessThan(1000);
    (0, _globals.expect)(performanceMeasures.length).toBeLessThan(1000);
  });
  (0, _globals.describe)('Rendering Performance', function () {
    (0, _globals.it)('should render initial screen within performance budget', (0, _asyncToGenerator2.default)(function* () {
      var startTime = Date.now();
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeScreen.SwipeScreen, {})),
        getByText = _render.getByText;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(getByText('Find Matches')).toBeTruthy();
      });
      var renderTime = Date.now() - startTime;
      (0, _globals.expect)(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.INITIAL_RENDER);
      (0, _globals.expect)(performanceMarks).toContain('SwipeScreen-mount-start');
      (0, _globals.expect)(performanceMarks).toContain('SwipeScreen-mount-end');
      (0, _globals.expect)(performanceMeasures).toContainEqual(_globals.expect.objectContaining({
        name: 'SwipeScreen-mount-duration'
      }));
    }));
    (0, _globals.it)('should handle rapid component updates efficiently', (0, _asyncToGenerator2.default)(function* () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.ChatScreen, {
          conversationId: "chat1"
        })),
        rerender = _render2.rerender;
      var updateTimes = [];
      for (var i = 0; i < 10; i++) {
        var startTime = Date.now();
        rerender((0, _jsxRuntime.jsx)(_ChatScreen.ChatScreen, {
          conversationId: `chat${i}`
        }));
        updateTimes.push(Date.now() - startTime);
      }
      var averageUpdateTime = updateTimes.reduce(function (a, b) {
        return a + b;
      }, 0) / updateTimes.length;
      var maxUpdateTime = Math.max.apply(Math, updateTimes);
      (0, _globals.expect)(averageUpdateTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_UPDATE);
      (0, _globals.expect)(maxUpdateTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_UPDATE * 2);
      (0, _globals.expect)(performanceMarks.length).toBeLessThan(50);
    }));
    (0, _globals.it)('should render large lists without performance degradation', (0, _asyncToGenerator2.default)(function* () {
      var largeDataset = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `item${i}`,
          title: `Item ${i}`,
          description: `Description for item ${i}`.repeat(10),
          image: `image${i}.jpg`
        };
      });
      var startTime = Date.now();
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CommunityFeed.CommunityFeed, {
          posts: largeDataset
        })),
        getByText = _render3.getByText;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(getByText('Item 0')).toBeTruthy();
        (0, _globals.expect)(getByText('Item 99')).toBeTruthy();
      });
      var renderTime = Date.now() - startTime;
      (0, _globals.expect)(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.INITIAL_RENDER * 3);
      (0, _globals.expect)(performanceMeasures).toContainEqual(_globals.expect.objectContaining({
        name: 'CommunityFeed-render-duration'
      }));
    }));
    (0, _globals.it)('should optimize re-renders with memoization', (0, _asyncToGenerator2.default)(function* () {
      var renderCount = 0;
      var MemoizedComponent = function MemoizedComponent() {
        renderCount++;
        return null;
      };
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MemoizedComponent, {})),
        rerender = _render4.rerender;
      (0, _globals.expect)(renderCount).toBe(1);
      rerender((0, _jsxRuntime.jsx)(MemoizedComponent, {}));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(performanceMarks.filter(function (mark) {
          return mark.includes('render');
        }).length).toBeLessThan(5);
      });
    }));
  });
  (0, _globals.describe)('Memory Usage and Leak Prevention', function () {
    (0, _globals.it)('should maintain stable memory usage during operations', (0, _asyncToGenerator2.default)(function* () {
      var memorySnapshots = [];
      var _renderHook = renderHook(function () {
          return useMemoryMonitor();
        }),
        result = _renderHook.result;
      (0, _reactNative.act)(function () {
        result.current.loadLargeDataset();
        memorySnapshots.push(result.current.getMemoryUsage());
      });
      (0, _reactNative.act)(function () {
        result.current.processImages();
        memorySnapshots.push(result.current.getMemoryUsage());
      });
      (0, _reactNative.act)(function () {
        result.current.clearCache();
        memorySnapshots.push(result.current.getMemoryUsage());
      });
      var maxMemoryUsage = Math.max.apply(Math, memorySnapshots);
      (0, _globals.expect)(maxMemoryUsage).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_USAGE);
      var finalMemoryUsage = memorySnapshots[memorySnapshots.length - 1];
      (0, _globals.expect)(finalMemoryUsage).toBeLessThan(maxMemoryUsage * 0.8);
    }));
    (0, _globals.it)('should prevent memory leaks in event listeners', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook2 = renderHook(function () {
          return useEventListeners();
        }),
        result = _renderHook2.result,
        unmount = _renderHook2.unmount;
      (0, _reactNative.act)(function () {
        result.current.addListener('scroll');
        result.current.addListener('touch');
        result.current.addListener('gesture');
      });
      (0, _globals.expect)(result.current.getListenerCount()).toBe(3);
      unmount();
      (0, _globals.expect)(result.current.getListenerCount()).toBe(0);
      (0, _globals.expect)(result.current.getCleanupWarnings()).toHaveLength(0);
    }));
    (0, _globals.it)('should handle large image caches efficiently', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook3 = renderHook(function () {
          return useImageCache();
        }),
        result = _renderHook3.result;
      var largeImageSet = Array.from({
        length: 50
      }, function (_, i) {
        return {
          id: `image${i}`,
          uri: `image${i}.jpg`,
          size: 1024 * 1024
        };
      });
      (0, _reactNative.act)(function () {
        result.current.cacheImages(largeImageSet);
      });
      (0, _globals.expect)(result.current.getCacheSize()).toBe(50 * 1024 * 1024);
      (0, _reactNative.act)(function () {
        result.current.optimizeCache();
      });
      (0, _globals.expect)(result.current.getCacheSize()).toBeLessThan(50 * 1024 * 1024);
      (0, _globals.expect)(result.current.getOptimizationMetrics().evictedCount).toBeGreaterThan(0);
    }));
    (0, _globals.it)('should monitor memory warnings and respond appropriately', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook4 = renderHook(function () {
          return useMemoryWarnings();
        }),
        result = _renderHook4.result;
      (0, _reactNative.act)(function () {
        result.current.simulateMemoryWarning('moderate');
      });
      (0, _globals.expect)(result.current.getMemoryWarnings()).toHaveLength(1);
      (0, _reactNative.act)(function () {
        result.current.simulateMemoryWarning('critical');
      });
      (0, _globals.expect)(result.current.getMemoryWarnings()).toHaveLength(2);
      (0, _globals.expect)(result.current.getCleanupActions()).toContain('clear_image_cache');
      (0, _globals.expect)(result.current.getCleanupActions()).toContain('reduce_component_rerenders');
    }));
  });
  (0, _globals.describe)('Animation Performance', function () {
    (0, _globals.it)('should maintain 60fps during animations', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeScreen.SwipeScreen, {})),
        getByTestId = _render5.getByTestId;
      var card = getByTestId('swipe-card');
      var animationStartTime = Date.now();
      (0, _reactNative.fireEvent)(card, 'swipeLeft');
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(performanceMeasures).toContainEqual(_globals.expect.objectContaining({
          name: 'swipe-animation-duration'
        }));
      });
      var animationDuration = Date.now() - animationStartTime;
      (0, _globals.expect)(animationDuration).toBeLessThan(1000);
      var frameRateMeasurements = performanceMeasures.filter(function (measure) {
        return measure.name.includes('frame-rate');
      });
      frameRateMeasurements.forEach(function (measurement) {
        (0, _globals.expect)(measurement.duration).toBeLessThanOrEqual(PERFORMANCE_THRESHOLDS.ANIMATION_FRAME);
      });
    }));
    (0, _globals.it)('should handle complex animation sequences efficiently', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook5 = renderHook(function () {
          return useAnimationSequence();
        }),
        result = _renderHook5.result;
      var sequenceStartTime = Date.now();
      (0, _reactNative.act)(function () {
        result.current.playSequence(['fade-in', 'scale-up', 'bounce', 'fade-out']);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isSequenceComplete()).toBe(true);
      });
      var sequenceDuration = Date.now() - sequenceStartTime;
      (0, _globals.expect)(sequenceDuration).toBeLessThan(3000);
      (0, _globals.expect)(result.current.getDroppedFrames()).toBe(0);
    }));
    (0, _globals.it)('should respect reduced motion preferences', (0, _asyncToGenerator2.default)(function* () {
      _globals.jest.doMock('react-native/Libraries/Utilities/Platform', function () {
        return {
          OS: 'ios',
          isReduceMotionEnabled: function isReduceMotionEnabled() {
            return true;
          }
        };
      });
      var _renderHook6 = renderHook(function () {
          return useReducedMotionAnimations();
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.playAnimation('bounce');
      });
      (0, _globals.expect)(result.current.isAnimationReduced()).toBe(true);
      (0, _globals.expect)(result.current.getAnimationDuration()).toBeGreaterThan(1000);
    }));
    (0, _globals.it)('should optimize animations for different screen sizes', (0, _asyncToGenerator2.default)(function* () {
      var screenSizes = [{
        width: 375,
        height: 667
      }, {
        width: 414,
        height: 896
      }, {
        width: 768,
        height: 1024
      }];
      var _loop = function* _loop(screenSize) {
        var _renderHook7 = renderHook(function () {
            return useResponsiveAnimations(screenSize);
          }),
          result = _renderHook7.result;
        (0, _reactNative.act)(function () {
          result.current.playOptimizedAnimation();
        });
        (0, _globals.expect)(result.current.getPerformanceScore()).toBeGreaterThan(80);
      };
      for (var screenSize of screenSizes) {
        yield* _loop(screenSize);
      }
    }));
  });
  (0, _globals.describe)('Network Performance', function () {
    (0, _globals.it)('should meet API response time targets', (0, _asyncToGenerator2.default)(function* () {
      var apiCalls = [{
        endpoint: '/pets/matches',
        method: 'GET'
      }, {
        endpoint: '/user/profile',
        method: 'GET'
      }, {
        endpoint: '/community/posts',
        method: 'GET'
      }, {
        endpoint: '/analytics/event',
        method: 'POST'
      }];
      for (var call of apiCalls) {
        var startTime = Date.now();
        mockApi.get.mockResolvedValueOnce({
          data: []
        });
        mockApi.post.mockResolvedValueOnce({
          success: true
        });
        if (call.method === 'GET') {
          yield mockApi.get(call.endpoint);
        } else {
          yield mockApi.post(call.endpoint, {});
        }
        var responseTime = Date.now() - startTime;
        (0, _globals.expect)(responseTime).toBeLessThan(PERFORMANCE_THRESHOLDS.API_RESPONSE);
        (0, _globals.expect)(performanceMeasures).toContainEqual(_globals.expect.objectContaining({
          name: `api-${call.endpoint.replace(/\//g, '-')}-duration`
        }));
      }
    }));
    (0, _globals.it)('should handle concurrent network requests efficiently', (0, _asyncToGenerator2.default)(function* () {
      var concurrentRequests = 10;
      var requestPromises = Array.from({
        length: concurrentRequests
      }, function (_, i) {
        return mockApi.get(`/endpoint${i}`);
      });
      var startTime = Date.now();
      requestPromises.forEach(function () {
        mockApi.get.mockResolvedValueOnce({
          data: {
            result: 'success'
          }
        });
      });
      yield Promise.all(requestPromises);
      var totalTime = Date.now() - startTime;
      (0, _globals.expect)(totalTime).toBeLessThan(PERFORMANCE_THRESHOLDS.API_RESPONSE * 2);
      (0, _globals.expect)(performanceMeasures.filter(function (m) {
        return m.name.includes('api-');
      }).length).toBe(concurrentRequests);
    }));
    (0, _globals.it)('should optimize network usage with caching', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook8 = renderHook(function () {
          return useNetworkCache();
        }),
        result = _renderHook8.result;
      (0, _reactNative.act)(function () {
        result.current.fetchData('endpoint1');
      });
      (0, _globals.expect)(mockApi.get).toHaveBeenCalledTimes(1);
      (0, _reactNative.act)(function () {
        result.current.fetchData('endpoint1');
      });
      (0, _globals.expect)(mockApi.get).toHaveBeenCalledTimes(1);
      (0, _reactNative.act)(function () {
        result.current.fetchData('endpoint2');
      });
      (0, _globals.expect)(mockApi.get).toHaveBeenCalledTimes(2);
      (0, _globals.expect)(result.current.getCacheHitRate()).toBe(0.5);
    }));
    (0, _globals.it)('should handle network timeouts gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockApi.get.mockImplementation(function () {
        return new Promise(function () {});
      });
      var _renderHook9 = renderHook(function () {
          return useNetworkTimeout();
        }),
        result = _renderHook9.result;
      (0, _reactNative.act)(function () {
        result.current.makeRequest();
      });
      _globals.jest.advanceTimersByTime(15000);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.hasTimedOut()).toBe(true);
        (0, _globals.expect)(result.current.getTimeoutDuration()).toBe(10000);
      });
    }));
  });
  (0, _globals.describe)('Image Processing Performance', function () {
    (0, _globals.it)('should process images within performance budget', (0, _asyncToGenerator2.default)(function* () {
      var testImages = [{
        uri: 'small.jpg',
        width: 800,
        height: 600,
        size: 100000
      }, {
        uri: 'medium.jpg',
        width: 2048,
        height: 1536,
        size: 2000000
      }, {
        uri: 'large.jpg',
        width: 4000,
        height: 3000,
        size: 8000000
      }];
      for (var image of testImages) {
        var startTime = Date.now();
        mockUploadHygieneService.processImageForUpload.mockResolvedValueOnce({
          uri: `processed-${image.uri}`,
          width: image.width > 2048 ? 2048 : image.width,
          height: Math.round(image.height / image.width * (image.width > 2048 ? 2048 : image.width)),
          fileSize: image.size * 0.8,
          mimeType: 'image/jpeg',
          metadata: {
            originalWidth: image.width,
            originalHeight: image.height
          }
        });
        yield mockUploadHygieneService.processImageForUpload(image.uri);
        var processingTime = Date.now() - startTime;
        (0, _globals.expect)(processingTime).toBeLessThan(PERFORMANCE_THRESHOLDS.IMAGE_LOAD);
        (0, _globals.expect)(performanceMeasures).toContainEqual(_globals.expect.objectContaining({
          name: `image-process-${image.uri}-duration`
        }));
      }
    }));
    (0, _globals.it)('should batch process images efficiently', (0, _asyncToGenerator2.default)(function* () {
      var imageBatch = Array.from({
        length: 20
      }, function (_, i) {
        return {
          uri: `batch-image${i}.jpg`,
          width: 1024,
          height: 768,
          size: 500000
        };
      });
      var startTime = Date.now();
      mockUploadHygieneService.uploadBatch.mockResolvedValue(imageBatch.map(function (img, i) {
        return {
          uploadId: `upload${i}`,
          s3Key: `key${i}`,
          url: `url${i}`,
          status: 'approved'
        };
      }));
      yield mockUploadHygieneService.uploadBatch(imageBatch, 'pet');
      var batchProcessingTime = Date.now() - startTime;
      (0, _globals.expect)(batchProcessingTime).toBeLessThan(PERFORMANCE_THRESHOLDS.IMAGE_LOAD * 5);
      (0, _globals.expect)(performanceMeasures).toContainEqual(_globals.expect.objectContaining({
        name: 'image-batch-upload-duration'
      }));
    }));
    (0, _globals.it)('should optimize image loading with lazy loading', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook0 = renderHook(function () {
          return useLazyImageLoading();
        }),
        result = _renderHook0.result;
      (0, _reactNative.act)(function () {
        result.current.setVisibleImages(['image1.jpg', 'image2.jpg', 'image3.jpg']);
      });
      (0, _globals.expect)(mockUploadHygieneService.getImage).toHaveBeenCalledTimes(3);
      (0, _reactNative.act)(function () {
        result.current.setVisibleImages(['image1.jpg', 'image2.jpg', 'image3.jpg', 'image4.jpg', 'image5.jpg']);
      });
      (0, _globals.expect)(mockUploadHygieneService.getImage).toHaveBeenCalledTimes(5);
      (0, _globals.expect)(result.current.getLoadingMetrics().loadedCount).toBe(5);
      (0, _globals.expect)(result.current.getLoadingMetrics().averageLoadTime).toBeLessThan(500);
    }));
  });
  (0, _globals.describe)('Database Operation Performance', function () {
    (0, _globals.it)('should perform AsyncStorage operations efficiently', (0, _asyncToGenerator2.default)(function* () {
      var testData = Array.from({
        length: 100
      }, function (_, i) {
        return {
          key: `testKey${i}`,
          value: JSON.stringify({
            id: i,
            data: 'x'.repeat(1000)
          })
        };
      });
      var storageOperations = testData.map(function () {
        var _ref19 = (0, _asyncToGenerator2.default)(function* (item) {
          var startTime = Date.now();
          yield mockAsyncStorage.setItem(item.key, item.value);
          var setTime = Date.now() - startTime;
          var getStartTime = Date.now();
          yield mockAsyncStorage.getItem(item.key);
          var getTime = Date.now() - getStartTime;
          return {
            setTime: setTime,
            getTime: getTime
          };
        });
        return function (_x) {
          return _ref19.apply(this, arguments);
        };
      }());
      var results = yield Promise.all(storageOperations);
      var averageSetTime = results.reduce(function (sum, r) {
        return sum + r.setTime;
      }, 0) / results.length;
      var averageGetTime = results.reduce(function (sum, r) {
        return sum + r.getTime;
      }, 0) / results.length;
      (0, _globals.expect)(averageSetTime).toBeLessThan(50);
      (0, _globals.expect)(averageGetTime).toBeLessThan(20);
      (0, _globals.expect)(performanceMeasures.filter(function (m) {
        return m.name.includes('storage-');
      }).length).toBeGreaterThan(0);
    }));
    (0, _globals.it)('should handle complex data queries efficiently', (0, _asyncToGenerator2.default)(function* () {
      var complexQuery = {
        filters: {
          age: {
            min: 1,
            max: 10
          },
          breeds: ['Golden Retriever', 'Labrador', 'Poodle'],
          location: {
            lat: 40.7128,
            lng: -74.0060,
            radius: 50
          },
          compatibility: {
            min: 70
          },
          vaccinated: true,
          size: 'large'
        },
        sort: {
          field: 'compatibility',
          direction: 'desc'
        },
        pagination: {
          page: 1,
          limit: 20
        }
      };
      var startTime = Date.now();
      mockApi.post.mockResolvedValue({
        data: Array.from({
          length: 20
        }, function (_, i) {
          return {
            id: `pet${i}`,
            name: `Pet ${i}`,
            compatibility: 100 - i,
            distance: i * 0.5
          };
        })
      });
      yield mockApi.post('/pets/search', complexQuery);
      var queryTime = Date.now() - startTime;
      (0, _globals.expect)(queryTime).toBeLessThan(PERFORMANCE_THRESHOLDS.API_RESPONSE);
      (0, _globals.expect)(performanceMeasures).toContainEqual(_globals.expect.objectContaining({
        name: 'complex-query-duration'
      }));
    }));
    (0, _globals.it)('should maintain database connection pool efficiently', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook1 = renderHook(function () {
          return useDatabaseConnection();
        }),
        result = _renderHook1.result;
      var operations = Array.from({
        length: 50
      }, function (_, i) {
        return result.current.performOperation(`operation${i}`);
      });
      var startTime = Date.now();
      yield Promise.all(operations);
      var totalTime = Date.now() - startTime;
      (0, _globals.expect)(totalTime).toBeLessThan(2000);
      (0, _globals.expect)(result.current.getConnectionPoolSize()).toBeLessThanOrEqual(10);
      (0, _globals.expect)(result.current.getAverageOperationTime()).toBeLessThan(50);
    }));
  });
  (0, _globals.describe)('Bundle Size and Loading Performance', function () {
    (0, _globals.it)('should maintain reasonable bundle size', function () {
      var bundleSize = getBundleSize();
      (0, _globals.expect)(bundleSize).toBeLessThan(PERFORMANCE_THRESHOLDS.BUNDLE_SIZE);
      var componentSizes = getComponentSizes();
      var largeComponents = componentSizes.filter(function (size) {
        return size > 100 * 1024;
      });
      (0, _globals.expect)(largeComponents.length).toBeLessThan(3);
    });
    (0, _globals.it)('should load critical resources quickly', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook10 = renderHook(function () {
          return useCriticalResourceLoading();
        }),
        result = _renderHook10.result;
      var loadStartTime = Date.now();
      (0, _reactNative.act)(function () {
        result.current.loadCriticalResources();
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.areCriticalResourcesLoaded()).toBe(true);
      });
      var loadTime = Date.now() - loadStartTime;
      (0, _globals.expect)(loadTime).toBeLessThan(2000);
      (0, _globals.expect)(performanceMeasures).toContainEqual(_globals.expect.objectContaining({
        name: 'critical-resources-load-duration'
      }));
    }));
    (0, _globals.it)('should implement effective code splitting', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook11 = renderHook(function () {
          return useCodeSplitting();
        }),
        result = _renderHook11.result;
      var modules = ['CommunityScreen', 'SettingsScreen', 'PremiumScreen', 'ChatScreen'];
      var _loop2 = function* _loop2(module) {
        var loadStartTime = Date.now();
        (0, _reactNative.act)(function () {
          result.current.loadModule(module);
        });
        yield (0, _reactNative.waitFor)(function () {
          (0, _globals.expect)(result.current.isModuleLoaded(module)).toBe(true);
        });
        var loadTime = Date.now() - loadStartTime;
        (0, _globals.expect)(loadTime).toBeLessThan(3000);
        (0, _globals.expect)(performanceMeasures).toContainEqual(_globals.expect.objectContaining({
          name: `module-${module}-load-duration`
        }));
      };
      for (var module of modules) {
        yield* _loop2(module);
      }
    }));
    (0, _globals.it)('should optimize initial bundle loading', (0, _asyncToGenerator2.default)(function* () {
      var timeToInteractive = measureTimeToInteractive();
      (0, _globals.expect)(timeToInteractive).toBeLessThan(3000);
      var unusedExports = getUnusedExports();
      (0, _globals.expect)(unusedExports.length).toBeLessThan(50);
      var compressionRatio = getCompressionRatio();
      (0, _globals.expect)(compressionRatio).toBeGreaterThan(0.6);
    }));
  });
  (0, _globals.describe)('End-to-End Performance Scenarios', function () {
    (0, _globals.it)('should handle complete user journey within performance budget', (0, _asyncToGenerator2.default)(function* () {
      var journeyStartTime = Date.now();
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(App, {})),
        getByText = _render6.getByText,
        getByPlaceholderText = _render6.getByPlaceholderText;
      _reactNative.fireEvent.press(getByText('Login'));
      var emailInput = getByPlaceholderText('Email');
      var passwordInput = getByPlaceholderText('Password');
      _reactNative.fireEvent.changeText(emailInput, 'user@example.com');
      _reactNative.fireEvent.changeText(passwordInput, 'password123');
      _reactNative.fireEvent.press(getByText('Sign In'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(getByText('Welcome back!')).toBeTruthy();
      });
      _reactNative.fireEvent.press(getByText('Find Matches'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(getByText('Swipe')).toBeTruthy();
      });
      for (var i = 0; i < 5; i++) {
        _reactNative.fireEvent.press(getByText('Like'));
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 100);
        });
      }
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(getByText('Matches found!')).toBeTruthy();
      });
      var totalJourneyTime = Date.now() - journeyStartTime;
      (0, _globals.expect)(totalJourneyTime).toBeLessThan(10000);
      (0, _globals.expect)(performanceMeasures.filter(function (m) {
        return m.name.includes('journey-');
      }).length).toBeGreaterThan(0);
    }));
    (0, _globals.it)('should maintain performance under memory pressure', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook12 = renderHook(function () {
          return useMemoryStressTest();
        }),
        result = _renderHook12.result;
      (0, _reactNative.act)(function () {
        result.current.loadLargeDataset();
        result.current.loadImages();
        result.current.loadMessages();
      });
      var initialMemory = result.current.getMemoryUsage();
      (0, _reactNative.act)(function () {
        result.current.processData();
        result.current.renderComponents();
      });
      var peakMemory = result.current.getMemoryUsage();
      (0, _reactNative.act)(function () {
        result.current.forceGarbageCollection();
      });
      var finalMemory = result.current.getMemoryUsage();
      (0, _globals.expect)(peakMemory).toBeLessThan(initialMemory * 3);
      (0, _globals.expect)(finalMemory).toBeLessThan(peakMemory * 0.7);
      (0, _globals.expect)(result.current.getPerformanceScore()).toBeGreaterThan(70);
    }));
    (0, _globals.it)('should handle high-frequency user interactions', (0, _asyncToGenerator2.default)(function* () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HighFrequencyInteraction, {})),
        getByText = _render7.getByText;
      var button = getByText('Interact');
      var interactionTimes = [];
      var frameDrops = [];
      for (var i = 0; i < 100; i++) {
        var startTime = Date.now();
        _reactNative.fireEvent.press(button);
        interactionTimes.push(Date.now() - startTime);
        if (Math.random() > 0.95) {
          frameDrops.push(i);
        }
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 10);
        });
      }
      var averageInteractionTime = interactionTimes.reduce(function (a, b) {
        return a + b;
      }, 0) / interactionTimes.length;
      var maxInteractionTime = Math.max.apply(Math, interactionTimes);
      (0, _globals.expect)(averageInteractionTime).toBeLessThan(50);
      (0, _globals.expect)(maxInteractionTime).toBeLessThan(200);
      (0, _globals.expect)(frameDrops.length).toBeLessThan(10);
      (0, _globals.expect)(performanceMeasures.filter(function (m) {
        return m.name.includes('interaction-');
      }).length).toBeGreaterThan(50);
    }));
    (0, _globals.it)('should scale performance with data size', (0, _asyncToGenerator2.default)(function* () {
      var dataSizes = [100, 1000, 10000];
      var _loop3 = function* _loop3(size) {
        var _renderHook13 = renderHook(function () {
            return useScalabilityTest();
          }),
          result = _renderHook13.result;
        var startTime = Date.now();
        (0, _reactNative.act)(function () {
          result.current.loadDataset(size);
        });
        yield (0, _reactNative.waitFor)(function () {
          (0, _globals.expect)(result.current.isDataLoaded()).toBe(true);
        });
        var loadTime = Date.now() - startTime;
        var expectedMaxTime = Math.max(1000, size * 2);
        (0, _globals.expect)(loadTime).toBeLessThan(expectedMaxTime);
        var performanceScore = result.current.getPerformanceScore();
        (0, _globals.expect)(performanceScore).toBeGreaterThan(50);
      };
      for (var size of dataSizes) {
        yield* _loop3(size);
      }
    }));
  });
});
function getBundleSize() {
  return 8 * 1024 * 1024;
}
function getComponentSizes() {
  return [50000, 75000, 120000, 80000, 60000];
}
function getUnusedExports() {
  return ['unusedFunction1', 'unusedComponent'];
}
function getCompressionRatio() {
  return 0.75;
}
function measureTimeToInteractive() {
  return 2500;
}
function useMemoryMonitor() {
  return {
    loadLargeDataset: _globals.jest.fn(),
    processImages: _globals.jest.fn(),
    clearCache: _globals.jest.fn(),
    getMemoryUsage: _globals.jest.fn(function () {
      return 30 * 1024 * 1024;
    })
  };
}
function useEventListeners() {
  return {
    addListener: _globals.jest.fn(),
    getListenerCount: _globals.jest.fn(function () {
      return 3;
    }),
    getCleanupWarnings: _globals.jest.fn(function () {
      return [];
    })
  };
}
function useImageCache() {
  return {
    cacheImages: _globals.jest.fn(),
    getCacheSize: _globals.jest.fn(function () {
      return 50 * 1024 * 1024;
    }),
    optimizeCache: _globals.jest.fn(),
    getOptimizationMetrics: _globals.jest.fn(function () {
      return {
        evictedCount: 10
      };
    })
  };
}
function useMemoryWarnings() {
  return {
    simulateMemoryWarning: _globals.jest.fn(),
    getMemoryWarnings: _globals.jest.fn(function () {
      return ['moderate', 'critical'];
    }),
    getCleanupActions: _globals.jest.fn(function () {
      return ['clear_image_cache', 'reduce_component_rerenders'];
    })
  };
}
function useAnimationSequence() {
  return {
    playSequence: _globals.jest.fn(),
    isSequenceComplete: _globals.jest.fn(function () {
      return true;
    }),
    getDroppedFrames: _globals.jest.fn(function () {
      return 0;
    })
  };
}
function useReducedMotionAnimations() {
  return {
    playAnimation: _globals.jest.fn(),
    isAnimationReduced: _globals.jest.fn(function () {
      return true;
    }),
    getAnimationDuration: _globals.jest.fn(function () {
      return 1500;
    })
  };
}
function useResponsiveAnimations(screenSize) {
  return {
    playOptimizedAnimation: _globals.jest.fn(),
    getPerformanceScore: _globals.jest.fn(function () {
      return 85;
    })
  };
}
function useNetworkCache() {
  return {
    fetchData: _globals.jest.fn(),
    getCacheHitRate: _globals.jest.fn(function () {
      return 0.5;
    })
  };
}
function useNetworkTimeout() {
  return {
    makeRequest: _globals.jest.fn(),
    hasTimedOut: _globals.jest.fn(function () {
      return true;
    }),
    getTimeoutDuration: _globals.jest.fn(function () {
      return 10000;
    })
  };
}
function useLazyImageLoading() {
  return {
    setVisibleImages: _globals.jest.fn(),
    getLoadingMetrics: _globals.jest.fn(function () {
      return {
        loadedCount: 5,
        averageLoadTime: 300
      };
    })
  };
}
function useDatabaseConnection() {
  return {
    performOperation: _globals.jest.fn(),
    getConnectionPoolSize: _globals.jest.fn(function () {
      return 5;
    }),
    getAverageOperationTime: _globals.jest.fn(function () {
      return 25;
    })
  };
}
function useCriticalResourceLoading() {
  return {
    loadCriticalResources: _globals.jest.fn(),
    areCriticalResourcesLoaded: _globals.jest.fn(function () {
      return true;
    })
  };
}
function useCodeSplitting() {
  return {
    loadModule: _globals.jest.fn(),
    isModuleLoaded: _globals.jest.fn(function () {
      return true;
    })
  };
}
function useMemoryStressTest() {
  return {
    loadLargeDataset: _globals.jest.fn(),
    loadImages: _globals.jest.fn(),
    loadMessages: _globals.jest.fn(),
    processData: _globals.jest.fn(),
    renderComponents: _globals.jest.fn(),
    forceGarbageCollection: _globals.jest.fn(),
    getMemoryUsage: _globals.jest.fn(function () {
      return 40 * 1024 * 1024;
    }),
    getPerformanceScore: _globals.jest.fn(function () {
      return 75;
    })
  };
}
function renderHook(hookFn) {
  return {
    result: {
      current: hookFn()
    },
    rerender: _globals.jest.fn(),
    unmount: _globals.jest.fn()
  };
}
function App() {
  return null;
}
function HighFrequencyInteraction() {
  return null;
}
function useScalabilityTest() {
  return {
    loadDataset: _globals.jest.fn(),
    isDataLoaded: _globals.jest.fn(function () {
      return true;
    }),
    getPerformanceScore: _globals.jest.fn(function () {
      return 80;
    })
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,