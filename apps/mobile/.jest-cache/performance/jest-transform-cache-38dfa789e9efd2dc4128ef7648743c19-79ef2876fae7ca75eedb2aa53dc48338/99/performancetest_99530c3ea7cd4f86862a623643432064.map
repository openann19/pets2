{"version":3,"names":["_getJestObj","mock","mark","jest","fn","measure","_interopRequireDefault","require","_asyncToGenerator2","_globals","_reactNative","_asyncStorage","_SwipeScreen","_ChatScreen","_CommunityFeed","_api","_offlineService","_uploadHygiene","_jsxRuntime","_require2","mockAsyncStorage","AsyncStorage","mockApi","api","mockOfflineService","offlineService","mockUploadHygieneService","uploadHygieneService","_require","Performance","PERFORMANCE_THRESHOLDS","INITIAL_RENDER","COMPONENT_UPDATE","API_RESPONSE","IMAGE_LOAD","ANIMATION_FRAME","MEMORY_USAGE","BUNDLE_SIZE","describe","performanceMarks","performanceMeasures","beforeEach","clearAllMocks","mockImplementation","name","push","startMark","endMark","duration","Math","random","getItem","mockResolvedValue","get","data","getPets","afterEach","expect","length","toBeLessThan","it","default","startTime","Date","now","_render","render","jsx","SwipeScreen","getByText","waitFor","toBeTruthy","renderTime","toContain","toContainEqual","objectContaining","_render2","ChatScreen","conversationId","rerender","updateTimes","i","averageUpdateTime","reduce","a","b","maxUpdateTime","max","apply","largeDataset","Array","from","_","id","title","description","repeat","image","_render3","CommunityFeed","posts","renderCount","MemoizedComponent","_render4","toBe","filter","includes","memorySnapshots","_renderHook","renderHook","useMemoryMonitor","result","act","current","loadLargeDataset","getMemoryUsage","processImages","clearCache","maxMemoryUsage","finalMemoryUsage","_renderHook2","useEventListeners","unmount","addListener","getListenerCount","getCleanupWarnings","toHaveLength","_renderHook3","useImageCache","largeImageSet","uri","size","cacheImages","getCacheSize","optimizeCache","getOptimizationMetrics","evictedCount","toBeGreaterThan","_renderHook4","useMemoryWarnings","simulateMemoryWarning","getMemoryWarnings","getCleanupActions","_render5","getByTestId","card","animationStartTime","fireEvent","animationDuration","frameRateMeasurements","forEach","measurement","toBeLessThanOrEqual","_renderHook5","useAnimationSequence","sequenceStartTime","playSequence","isSequenceComplete","sequenceDuration","getDroppedFrames","doMock","OS","isReduceMotionEnabled","_renderHook6","useReducedMotionAnimations","playAnimation","isAnimationReduced","getAnimationDuration","screenSizes","width","height","_loop","screenSize","_renderHook7","useResponsiveAnimations","playOptimizedAnimation","getPerformanceScore","apiCalls","endpoint","method","call","mockResolvedValueOnce","post","success","responseTime","replace","concurrentRequests","requestPromises","Promise","all","totalTime","m","_renderHook8","useNetworkCache","fetchData","toHaveBeenCalledTimes","getCacheHitRate","_renderHook9","useNetworkTimeout","makeRequest","advanceTimersByTime","hasTimedOut","getTimeoutDuration","testImages","processImageForUpload","round","fileSize","mimeType","metadata","originalWidth","originalHeight","processingTime","imageBatch","uploadBatch","map","img","uploadId","s3Key","url","status","batchProcessingTime","_renderHook0","useLazyImageLoading","setVisibleImages","getImage","getLoadingMetrics","loadedCount","averageLoadTime","testData","key","value","JSON","stringify","storageOperations","_ref19","item","setItem","setTime","getStartTime","getTime","_x","arguments","results","averageSetTime","sum","r","averageGetTime","complexQuery","filters","age","min","breeds","location","lat","lng","radius","compatibility","vaccinated","sort","field","direction","pagination","page","limit","distance","queryTime","_renderHook1","useDatabaseConnection","operations","performOperation","getConnectionPoolSize","getAverageOperationTime","bundleSize","getBundleSize","componentSizes","getComponentSizes","largeComponents","_renderHook10","useCriticalResourceLoading","loadStartTime","loadCriticalResources","areCriticalResourcesLoaded","loadTime","_renderHook11","useCodeSplitting","modules","_loop2","module","loadModule","isModuleLoaded","timeToInteractive","measureTimeToInteractive","unusedExports","getUnusedExports","compressionRatio","getCompressionRatio","journeyStartTime","_render6","App","getByPlaceholderText","press","emailInput","passwordInput","changeText","resolve","setTimeout","totalJourneyTime","_renderHook12","useMemoryStressTest","loadImages","loadMessages","initialMemory","processData","renderComponents","peakMemory","forceGarbageCollection","finalMemory","_render7","HighFrequencyInteraction","button","interactionTimes","frameDrops","averageInteractionTime","maxInteractionTime","dataSizes","_loop3","_renderHook13","useScalabilityTest","loadDataset","isDataLoaded","expectedMaxTime","performanceScore","hookFn"],"sources":["performance.test.tsx"],"sourcesContent":["/**\n * Performance and Benchmarking Tests for PawfectMatch Mobile App\n *\n * Tests focused on performance metrics, memory usage, rendering performance,\n * and system resource utilization under various conditions.\n *\n * Coverage:\n * - Rendering performance benchmarks\n * - Memory usage monitoring\n * - Animation performance metrics\n * - Network request performance\n * - Database operation performance\n * - Image processing performance\n * - Component re-render optimization\n * - Bundle size and loading performance\n */\n\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Import performance-critical components and services\nimport { SwipeScreen } from '../screens/SwipeScreen';\nimport { ChatScreen } from '../screens/ChatScreen';\nimport { CommunityFeed } from '../components/CommunityFeed';\nimport { ImageGallery } from '../components/ImageGallery';\nimport { api } from '../services/api';\nimport { offlineService } from '../services/offlineService';\nimport { uploadHygieneService } from '../services/uploadHygiene';\n\n// Mock all dependencies\njest.mock('@react-native-async-storage/async-storage');\njest.mock('../services/api');\njest.mock('../services/offlineService');\njest.mock('../services/uploadHygiene');\njest.mock('react-native/Libraries/Utilities/Performance', () => ({\n  mark: jest.fn(),\n  measure: jest.fn(),\n}));\n\nconst mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;\nconst mockApi = api as jest.Mocked<typeof api>;\nconst mockOfflineService = offlineService as jest.Mocked<typeof offlineService>;\nconst mockUploadHygieneService = uploadHygieneService as jest.Mocked<typeof uploadHygieneService>;\n\nconst { Performance } = require('react-native/Libraries/Utilities/Performance');\n\n// Performance thresholds (based on industry standards)\nconst PERFORMANCE_THRESHOLDS = {\n  INITIAL_RENDER: 100, // ms\n  COMPONENT_UPDATE: 16, // ms (60fps)\n  API_RESPONSE: 1000, // ms\n  IMAGE_LOAD: 2000, // ms\n  ANIMATION_FRAME: 16, // ms\n  MEMORY_USAGE: 50 * 1024 * 1024, // 50MB\n  BUNDLE_SIZE: 10 * 1024 * 1024, // 10MB\n};\n\ndescribe('PawfectMatch Performance Test Suite', () => {\n  let performanceMarks: string[] = [];\n  let performanceMeasures: any[] = [];\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    performanceMarks = [];\n    performanceMeasures = [];\n\n    // Setup performance mocks\n    Performance.mark.mockImplementation((name: string) => {\n      performanceMarks.push(name);\n    });\n\n    Performance.measure.mockImplementation((name: string, startMark: string, endMark: string) => {\n      const measure = { name, startMark, endMark, duration: Math.random() * 100 };\n      performanceMeasures.push(measure);\n      return measure;\n    });\n\n    // Setup default service mocks\n    mockAsyncStorage.getItem.mockResolvedValue(null);\n    mockApi.get.mockResolvedValue({ data: [] });\n    mockOfflineService.getPets.mockResolvedValue([]);\n  });\n\n  afterEach(() => {\n    // Verify no memory leaks\n    expect(performanceMarks.length).toBeLessThan(1000);\n    expect(performanceMeasures.length).toBeLessThan(1000);\n  });\n\n  describe('Rendering Performance', () => {\n    it('should render initial screen within performance budget', async () => {\n      const startTime = Date.now();\n\n      const { getByText } = render(<SwipeScreen />);\n\n      await waitFor(() => {\n        expect(getByText('Find Matches')).toBeTruthy();\n      });\n\n      const renderTime = Date.now() - startTime;\n\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.INITIAL_RENDER);\n\n      // Verify performance marks were created\n      expect(performanceMarks).toContain('SwipeScreen-mount-start');\n      expect(performanceMarks).toContain('SwipeScreen-mount-end');\n      expect(performanceMeasures).toContainEqual(\n        expect.objectContaining({\n          name: 'SwipeScreen-mount-duration',\n        })\n      );\n    });\n\n    it('should handle rapid component updates efficiently', async () => {\n      const { rerender } = render(<ChatScreen conversationId=\"chat1\" />);\n\n      const updateTimes: number[] = [];\n\n      // Perform rapid updates\n      for (let i = 0; i < 10; i++) {\n        const startTime = Date.now();\n        rerender(<ChatScreen conversationId={`chat${i}`} />);\n        updateTimes.push(Date.now() - startTime);\n      }\n\n      const averageUpdateTime = updateTimes.reduce((a, b) => a + b, 0) / updateTimes.length;\n      const maxUpdateTime = Math.max(...updateTimes);\n\n      expect(averageUpdateTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_UPDATE);\n      expect(maxUpdateTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_UPDATE * 2);\n\n      // Should not create excessive performance marks\n      expect(performanceMarks.length).toBeLessThan(50);\n    });\n\n    it('should render large lists without performance degradation', async () => {\n      const largeDataset = Array.from({ length: 100 }, (_, i) => ({\n        id: `item${i}`,\n        title: `Item ${i}`,\n        description: `Description for item ${i}`.repeat(10),\n        image: `image${i}.jpg`,\n      }));\n\n      const startTime = Date.now();\n\n      const { getByText } = render(<CommunityFeed posts={largeDataset} />);\n\n      await waitFor(() => {\n        expect(getByText('Item 0')).toBeTruthy();\n        expect(getByText('Item 99')).toBeTruthy();\n      });\n\n      const renderTime = Date.now() - startTime;\n\n      // Large list should still render within reasonable time\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.INITIAL_RENDER * 3);\n\n      // Verify virtualization is working (not rendering all items)\n      expect(performanceMeasures).toContainEqual(\n        expect.objectContaining({\n          name: 'CommunityFeed-render-duration',\n        })\n      );\n    });\n\n    it('should optimize re-renders with memoization', async () => {\n      let renderCount = 0;\n\n      const MemoizedComponent = () => {\n        renderCount++;\n        return null;\n      };\n\n      const { rerender } = render(<MemoizedComponent />);\n\n      expect(renderCount).toBe(1);\n\n      // Re-render with same props (should not re-render if memoized)\n      rerender(<MemoizedComponent />);\n\n      // In a properly memoized component, render count should not increase\n      // This test verifies the component follows React best practices\n      await waitFor(() => {\n        expect(performanceMarks.filter(mark => mark.includes('render')).length).toBeLessThan(5);\n      });\n    });\n  });\n\n  describe('Memory Usage and Leak Prevention', () => {\n    it('should maintain stable memory usage during operations', async () => {\n      const memorySnapshots: number[] = [];\n\n      const { result } = renderHook(() => useMemoryMonitor());\n\n      // Perform memory-intensive operations\n      act(() => {\n        result.current.loadLargeDataset();\n        memorySnapshots.push(result.current.getMemoryUsage());\n      });\n\n      act(() => {\n        result.current.processImages();\n        memorySnapshots.push(result.current.getMemoryUsage());\n      });\n\n      act(() => {\n        result.current.clearCache();\n        memorySnapshots.push(result.current.getMemoryUsage());\n      });\n\n      // Memory usage should not grow unbounded\n      const maxMemoryUsage = Math.max(...memorySnapshots);\n      expect(maxMemoryUsage).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_USAGE);\n\n      // Memory should be freed after cleanup\n      const finalMemoryUsage = memorySnapshots[memorySnapshots.length - 1];\n      expect(finalMemoryUsage).toBeLessThan(maxMemoryUsage * 0.8); // At least 20% reduction\n    });\n\n    it('should prevent memory leaks in event listeners', async () => {\n      const { result, unmount } = renderHook(() => useEventListeners());\n\n      act(() => {\n        result.current.addListener('scroll');\n        result.current.addListener('touch');\n        result.current.addListener('gesture');\n      });\n\n      expect(result.current.getListenerCount()).toBe(3);\n\n      unmount();\n\n      // Verify cleanup\n      expect(result.current.getListenerCount()).toBe(0);\n      expect(result.current.getCleanupWarnings()).toHaveLength(0);\n    });\n\n    it('should handle large image caches efficiently', async () => {\n      const { result } = renderHook(() => useImageCache());\n\n      const largeImageSet = Array.from({ length: 50 }, (_, i) => ({\n        id: `image${i}`,\n        uri: `image${i}.jpg`,\n        size: 1024 * 1024, // 1MB each\n      }));\n\n      act(() => {\n        result.current.cacheImages(largeImageSet);\n      });\n\n      expect(result.current.getCacheSize()).toBe(50 * 1024 * 1024); // 50MB\n\n      act(() => {\n        result.current.optimizeCache();\n      });\n\n      // Should reduce cache size through optimization\n      expect(result.current.getCacheSize()).toBeLessThan(50 * 1024 * 1024);\n      expect(result.current.getOptimizationMetrics().evictedCount).toBeGreaterThan(0);\n    });\n\n    it('should monitor memory warnings and respond appropriately', async () => {\n      const { result } = renderHook(() => useMemoryWarnings());\n\n      act(() => {\n        result.current.simulateMemoryWarning('moderate');\n      });\n\n      expect(result.current.getMemoryWarnings()).toHaveLength(1);\n\n      act(() => {\n        result.current.simulateMemoryWarning('critical');\n      });\n\n      expect(result.current.getMemoryWarnings()).toHaveLength(2);\n\n      // Should trigger cleanup actions\n      expect(result.current.getCleanupActions()).toContain('clear_image_cache');\n      expect(result.current.getCleanupActions()).toContain('reduce_component_rerenders');\n    });\n  });\n\n  describe('Animation Performance', () => {\n    it('should maintain 60fps during animations', async () => {\n      const { getByTestId } = render(<SwipeScreen />);\n\n      const card = getByTestId('swipe-card');\n\n      const animationStartTime = Date.now();\n\n      // Trigger animation\n      fireEvent(card, 'swipeLeft');\n\n      await waitFor(() => {\n        expect(performanceMeasures).toContainEqual(\n          expect.objectContaining({\n            name: 'swipe-animation-duration',\n          })\n        );\n      });\n\n      const animationDuration = Date.now() - animationStartTime;\n\n      // Animation should complete within reasonable time\n      expect(animationDuration).toBeLessThan(1000); // 1 second\n\n      // Verify frame rate monitoring\n      const frameRateMeasurements = performanceMeasures.filter(\n        measure => measure.name.includes('frame-rate')\n      );\n\n      frameRateMeasurements.forEach(measurement => {\n        expect(measurement.duration).toBeLessThanOrEqual(PERFORMANCE_THRESHOLDS.ANIMATION_FRAME);\n      });\n    });\n\n    it('should handle complex animation sequences efficiently', async () => {\n      const { result } = renderHook(() => useAnimationSequence());\n\n      const sequenceStartTime = Date.now();\n\n      act(() => {\n        result.current.playSequence(['fade-in', 'scale-up', 'bounce', 'fade-out']);\n      });\n\n      await waitFor(() => {\n        expect(result.current.isSequenceComplete()).toBe(true);\n      });\n\n      const sequenceDuration = Date.now() - sequenceStartTime;\n\n      // Complex sequence should complete within reasonable time\n      expect(sequenceDuration).toBeLessThan(3000); // 3 seconds\n\n      // Should not drop frames\n      expect(result.current.getDroppedFrames()).toBe(0);\n    });\n\n    it('should respect reduced motion preferences', async () => {\n      // Mock reduced motion enabled\n      jest.doMock('react-native/Libraries/Utilities/Platform', () => ({\n        OS: 'ios',\n        isReduceMotionEnabled: () => true,\n      }));\n\n      const { result } = renderHook(() => useReducedMotionAnimations());\n\n      act(() => {\n        result.current.playAnimation('bounce');\n      });\n\n      expect(result.current.isAnimationReduced()).toBe(true);\n      expect(result.current.getAnimationDuration()).toBeGreaterThan(1000); // Longer duration for reduced motion\n    });\n\n    it('should optimize animations for different screen sizes', async () => {\n      const screenSizes = [\n        { width: 375, height: 667 }, // iPhone SE\n        { width: 414, height: 896 }, // iPhone 11\n        { width: 768, height: 1024 }, // iPad\n      ];\n\n      for (const screenSize of screenSizes) {\n        const { result } = renderHook(() => useResponsiveAnimations(screenSize));\n\n        act(() => {\n          result.current.playOptimizedAnimation();\n        });\n\n        expect(result.current.getPerformanceScore()).toBeGreaterThan(80); // Good performance on all sizes\n      }\n    });\n  });\n\n  describe('Network Performance', () => {\n    it('should meet API response time targets', async () => {\n      const apiCalls = [\n        { endpoint: '/pets/matches', method: 'GET' },\n        { endpoint: '/user/profile', method: 'GET' },\n        { endpoint: '/community/posts', method: 'GET' },\n        { endpoint: '/analytics/event', method: 'POST' },\n      ];\n\n      for (const call of apiCalls) {\n        const startTime = Date.now();\n\n        mockApi.get.mockResolvedValueOnce({ data: [] });\n        mockApi.post.mockResolvedValueOnce({ success: true });\n\n        if (call.method === 'GET') {\n          await mockApi.get(call.endpoint);\n        } else {\n          await mockApi.post(call.endpoint, {});\n        }\n\n        const responseTime = Date.now() - startTime;\n\n        expect(responseTime).toBeLessThan(PERFORMANCE_THRESHOLDS.API_RESPONSE);\n\n        // Verify performance tracking\n        expect(performanceMeasures).toContainEqual(\n          expect.objectContaining({\n            name: `api-${call.endpoint.replace(/\\//g, '-')}-duration`,\n          })\n        );\n      }\n    });\n\n    it('should handle concurrent network requests efficiently', async () => {\n      const concurrentRequests = 10;\n      const requestPromises = Array.from({ length: concurrentRequests }, (_, i) =>\n        mockApi.get(`/endpoint${i}`)\n      );\n\n      const startTime = Date.now();\n\n      // Mock all responses\n      requestPromises.forEach(() => {\n        mockApi.get.mockResolvedValueOnce({ data: { result: 'success' } });\n      });\n\n      await Promise.all(requestPromises);\n\n      const totalTime = Date.now() - startTime;\n\n      // Concurrent requests should complete within reasonable time\n      expect(totalTime).toBeLessThan(PERFORMANCE_THRESHOLDS.API_RESPONSE * 2);\n\n      // Should not overwhelm the system\n      expect(performanceMeasures.filter(m => m.name.includes('api-')).length).toBe(concurrentRequests);\n    });\n\n    it('should optimize network usage with caching', async () => {\n      const { result } = renderHook(() => useNetworkCache());\n\n      // First request\n      act(() => {\n        result.current.fetchData('endpoint1');\n      });\n\n      expect(mockApi.get).toHaveBeenCalledTimes(1);\n\n      // Second request to same endpoint (should use cache)\n      act(() => {\n        result.current.fetchData('endpoint1');\n      });\n\n      expect(mockApi.get).toHaveBeenCalledTimes(1); // Still 1 call\n\n      // Different endpoint\n      act(() => {\n        result.current.fetchData('endpoint2');\n      });\n\n      expect(mockApi.get).toHaveBeenCalledTimes(2); // New call\n\n      expect(result.current.getCacheHitRate()).toBe(0.5); // 50% hit rate\n    });\n\n    it('should handle network timeouts gracefully', async () => {\n      mockApi.get.mockImplementation(() => new Promise(() => {})); // Never resolves\n\n      const { result } = renderHook(() => useNetworkTimeout());\n\n      act(() => {\n        result.current.makeRequest();\n      });\n\n      // Fast-forward time to trigger timeout\n      jest.advanceTimersByTime(15000);\n\n      await waitFor(() => {\n        expect(result.current.hasTimedOut()).toBe(true);\n        expect(result.current.getTimeoutDuration()).toBe(10000); // Default timeout\n      });\n    });\n  });\n\n  describe('Image Processing Performance', () => {\n    it('should process images within performance budget', async () => {\n      const testImages = [\n        { uri: 'small.jpg', width: 800, height: 600, size: 100000 },\n        { uri: 'medium.jpg', width: 2048, height: 1536, size: 2000000 },\n        { uri: 'large.jpg', width: 4000, height: 3000, size: 8000000 },\n      ];\n\n      for (const image of testImages) {\n        const startTime = Date.now();\n\n        mockUploadHygieneService.processImageForUpload.mockResolvedValueOnce({\n          uri: `processed-${image.uri}`,\n          width: image.width > 2048 ? 2048 : image.width,\n          height: Math.round((image.height / image.width) * (image.width > 2048 ? 2048 : image.width)),\n          fileSize: image.size * 0.8, // Assume compression\n          mimeType: 'image/jpeg',\n          metadata: {\n            originalWidth: image.width,\n            originalHeight: image.height,\n          },\n        });\n\n        await mockUploadHygieneService.processImageForUpload(image.uri);\n\n        const processingTime = Date.now() - startTime;\n\n        // Image processing should be reasonable even for large images\n        expect(processingTime).toBeLessThan(PERFORMANCE_THRESHOLDS.IMAGE_LOAD);\n\n        expect(performanceMeasures).toContainEqual(\n          expect.objectContaining({\n            name: `image-process-${image.uri}-duration`,\n          })\n        );\n      }\n    });\n\n    it('should batch process images efficiently', async () => {\n      const imageBatch = Array.from({ length: 20 }, (_, i) => ({\n        uri: `batch-image${i}.jpg`,\n        width: 1024,\n        height: 768,\n        size: 500000,\n      }));\n\n      const startTime = Date.now();\n\n      // Mock batch processing\n      mockUploadHygieneService.uploadBatch.mockResolvedValue(\n        imageBatch.map((img, i) => ({\n          uploadId: `upload${i}`,\n          s3Key: `key${i}`,\n          url: `url${i}`,\n          status: 'approved',\n        }))\n      );\n\n      await mockUploadHygieneService.uploadBatch(imageBatch, 'pet');\n\n      const batchProcessingTime = Date.now() - startTime;\n\n      // Batch processing should be efficient\n      expect(batchProcessingTime).toBeLessThan(PERFORMANCE_THRESHOLDS.IMAGE_LOAD * 5);\n\n      expect(performanceMeasures).toContainEqual(\n        expect.objectContaining({\n          name: 'image-batch-upload-duration',\n        })\n      );\n    });\n\n    it('should optimize image loading with lazy loading', async () => {\n      const { result } = renderHook(() => useLazyImageLoading());\n\n      act(() => {\n        result.current.setVisibleImages(['image1.jpg', 'image2.jpg', 'image3.jpg']);\n      });\n\n      // Only visible images should be loaded initially\n      expect(mockUploadHygieneService.getImage).toHaveBeenCalledTimes(3);\n\n      // Scroll to reveal more images\n      act(() => {\n        result.current.setVisibleImages(['image1.jpg', 'image2.jpg', 'image3.jpg', 'image4.jpg', 'image5.jpg']);\n      });\n\n      // Should load additional images progressively\n      expect(mockUploadHygieneService.getImage).toHaveBeenCalledTimes(5);\n\n      expect(result.current.getLoadingMetrics().loadedCount).toBe(5);\n      expect(result.current.getLoadingMetrics().averageLoadTime).toBeLessThan(500); // Fast loading\n    });\n  });\n\n  describe('Database Operation Performance', () => {\n    it('should perform AsyncStorage operations efficiently', async () => {\n      const testData = Array.from({ length: 100 }, (_, i) => ({\n        key: `testKey${i}`,\n        value: JSON.stringify({ id: i, data: 'x'.repeat(1000) }), // 1KB per item\n      }));\n\n      const storageOperations = testData.map(async (item) => {\n        const startTime = Date.now();\n        await mockAsyncStorage.setItem(item.key, item.value);\n        const setTime = Date.now() - startTime;\n\n        const getStartTime = Date.now();\n        await mockAsyncStorage.getItem(item.key);\n        const getTime = Date.now() - getStartTime;\n\n        return { setTime, getTime };\n      });\n\n      const results = await Promise.all(storageOperations);\n\n      const averageSetTime = results.reduce((sum, r) => sum + r.setTime, 0) / results.length;\n      const averageGetTime = results.reduce((sum, r) => sum + r.getTime, 0) / results.length;\n\n      expect(averageSetTime).toBeLessThan(50); // Fast storage operations\n      expect(averageGetTime).toBeLessThan(20); // Very fast retrieval\n\n      expect(performanceMeasures.filter(m => m.name.includes('storage-')).length).toBeGreaterThan(0);\n    });\n\n    it('should handle complex data queries efficiently', async () => {\n      const complexQuery = {\n        filters: {\n          age: { min: 1, max: 10 },\n          breeds: ['Golden Retriever', 'Labrador', 'Poodle'],\n          location: { lat: 40.7128, lng: -74.0060, radius: 50 },\n          compatibility: { min: 70 },\n          vaccinated: true,\n          size: 'large',\n        },\n        sort: { field: 'compatibility', direction: 'desc' },\n        pagination: { page: 1, limit: 20 },\n      };\n\n      const startTime = Date.now();\n\n      mockApi.post.mockResolvedValue({\n        data: Array.from({ length: 20 }, (_, i) => ({\n          id: `pet${i}`,\n          name: `Pet ${i}`,\n          compatibility: 100 - i,\n          distance: i * 0.5,\n        })),\n      });\n\n      await mockApi.post('/pets/search', complexQuery);\n\n      const queryTime = Date.now() - startTime;\n\n      expect(queryTime).toBeLessThan(PERFORMANCE_THRESHOLDS.API_RESPONSE);\n\n      expect(performanceMeasures).toContainEqual(\n        expect.objectContaining({\n          name: 'complex-query-duration',\n        })\n      );\n    });\n\n    it('should maintain database connection pool efficiently', async () => {\n      const { result } = renderHook(() => useDatabaseConnection());\n\n      // Simulate multiple concurrent database operations\n      const operations = Array.from({ length: 50 }, (_, i) =>\n        result.current.performOperation(`operation${i}`)\n      );\n\n      const startTime = Date.now();\n      await Promise.all(operations);\n      const totalTime = Date.now() - startTime;\n\n      // Should handle high concurrency efficiently\n      expect(totalTime).toBeLessThan(2000); // 2 seconds for 50 operations\n\n      expect(result.current.getConnectionPoolSize()).toBeLessThanOrEqual(10); // Reasonable pool size\n      expect(result.current.getAverageOperationTime()).toBeLessThan(50); // Fast operations\n    });\n  });\n\n  describe('Bundle Size and Loading Performance', () => {\n    it('should maintain reasonable bundle size', () => {\n      // Mock bundle size checking\n      const bundleSize = getBundleSize();\n\n      expect(bundleSize).toBeLessThan(PERFORMANCE_THRESHOLDS.BUNDLE_SIZE);\n\n      // Check individual component sizes\n      const componentSizes = getComponentSizes();\n      const largeComponents = componentSizes.filter(size => size > 100 * 1024); // 100KB\n\n      // Should minimize large components\n      expect(largeComponents.length).toBeLessThan(3);\n    });\n\n    it('should load critical resources quickly', async () => {\n      const { result } = renderHook(() => useCriticalResourceLoading());\n\n      const loadStartTime = Date.now();\n\n      act(() => {\n        result.current.loadCriticalResources();\n      });\n\n      await waitFor(() => {\n        expect(result.current.areCriticalResourcesLoaded()).toBe(true);\n      });\n\n      const loadTime = Date.now() - loadStartTime;\n\n      // Critical resources should load quickly\n      expect(loadTime).toBeLessThan(2000); // 2 seconds\n\n      expect(performanceMeasures).toContainEqual(\n        expect.objectContaining({\n          name: 'critical-resources-load-duration',\n        })\n      );\n    });\n\n    it('should implement effective code splitting', async () => {\n      const { result } = renderHook(() => useCodeSplitting());\n\n      // Test lazy loading of different modules\n      const modules = ['CommunityScreen', 'SettingsScreen', 'PremiumScreen', 'ChatScreen'];\n\n      for (const module of modules) {\n        const loadStartTime = Date.now();\n\n        act(() => {\n          result.current.loadModule(module);\n        });\n\n        await waitFor(() => {\n          expect(result.current.isModuleLoaded(module)).toBe(true);\n        });\n\n        const loadTime = Date.now() - loadStartTime;\n\n        // Lazy-loaded modules should load within reasonable time\n        expect(loadTime).toBeLessThan(3000); // 3 seconds\n\n        expect(performanceMeasures).toContainEqual(\n          expect.objectContaining({\n            name: `module-${module}-load-duration`,\n          })\n        );\n      }\n    });\n\n    it('should optimize initial bundle loading', async () => {\n      // Measure time to interactive\n      const timeToInteractive = measureTimeToInteractive();\n\n      expect(timeToInteractive).toBeLessThan(3000); // 3 seconds to interactive\n\n      // Check for efficient tree shaking\n      const unusedExports = getUnusedExports();\n      expect(unusedExports.length).toBeLessThan(50); // Minimal unused exports\n\n      // Verify compression is effective\n      const compressionRatio = getCompressionRatio();\n      expect(compressionRatio).toBeGreaterThan(0.6); // At least 60% compression\n    });\n  });\n\n  describe('End-to-End Performance Scenarios', () => {\n    it('should handle complete user journey within performance budget', async () => {\n      const journeyStartTime = Date.now();\n\n      // 1. App Launch\n      const { getByText, getByPlaceholderText } = render(<App />);\n\n      // 2. Authentication\n      fireEvent.press(getByText('Login'));\n      const emailInput = getByPlaceholderText('Email');\n      const passwordInput = getByPlaceholderText('Password');\n      fireEvent.changeText(emailInput, 'user@example.com');\n      fireEvent.changeText(passwordInput, 'password123');\n      fireEvent.press(getByText('Sign In'));\n\n      await waitFor(() => {\n        expect(getByText('Welcome back!')).toBeTruthy();\n      });\n\n      // 3. Navigate to main features\n      fireEvent.press(getByText('Find Matches'));\n\n      await waitFor(() => {\n        expect(getByText('Swipe')).toBeTruthy();\n      });\n\n      // 4. Perform interactions\n      for (let i = 0; i < 5; i++) {\n        fireEvent.press(getByText('Like'));\n        await new Promise(resolve => setTimeout(resolve, 100)); // Small delay\n      }\n\n      // 5. Check results\n      await waitFor(() => {\n        expect(getByText('Matches found!')).toBeTruthy();\n      });\n\n      const totalJourneyTime = Date.now() - journeyStartTime;\n\n      // Complete user journey should be smooth and fast\n      expect(totalJourneyTime).toBeLessThan(10000); // 10 seconds for complete journey\n\n      // Verify performance metrics were collected\n      expect(performanceMeasures.filter(m => m.name.includes('journey-')).length).toBeGreaterThan(0);\n    });\n\n    it('should maintain performance under memory pressure', async () => {\n      const { result } = renderHook(() => useMemoryStressTest());\n\n      // Load large amounts of data\n      act(() => {\n        result.current.loadLargeDataset();\n        result.current.loadImages();\n        result.current.loadMessages();\n      });\n\n      // Monitor memory usage\n      const initialMemory = result.current.getMemoryUsage();\n\n      // Perform memory-intensive operations\n      act(() => {\n        result.current.processData();\n        result.current.renderComponents();\n      });\n\n      const peakMemory = result.current.getMemoryUsage();\n\n      // Trigger garbage collection simulation\n      act(() => {\n        result.current.forceGarbageCollection();\n      });\n\n      const finalMemory = result.current.getMemoryUsage();\n\n      // Memory should not grow unbounded\n      expect(peakMemory).toBeLessThan(initialMemory * 3); // Max 3x initial memory\n      expect(finalMemory).toBeLessThan(peakMemory * 0.7); // At least 30% cleanup\n\n      // Performance should remain acceptable\n      expect(result.current.getPerformanceScore()).toBeGreaterThan(70);\n    });\n\n    it('should handle high-frequency user interactions', async () => {\n      const { getByText } = render(<HighFrequencyInteraction />);\n\n      const button = getByText('Interact');\n\n      const interactionTimes: number[] = [];\n      const frameDrops: number[] = [];\n\n      // Perform high-frequency interactions\n      for (let i = 0; i < 100; i++) {\n        const startTime = Date.now();\n        fireEvent.press(button);\n        interactionTimes.push(Date.now() - startTime);\n\n        // Check for frame drops (simulated)\n        if (Math.random() > 0.95) { // 5% chance of frame drop\n          frameDrops.push(i);\n        }\n\n        await new Promise(resolve => setTimeout(resolve, 10)); // 100 interactions/second\n      }\n\n      const averageInteractionTime = interactionTimes.reduce((a, b) => a + b, 0) / interactionTimes.length;\n      const maxInteractionTime = Math.max(...interactionTimes);\n\n      // High-frequency interactions should be responsive\n      expect(averageInteractionTime).toBeLessThan(50); // 50ms average\n      expect(maxInteractionTime).toBeLessThan(200); // 200ms max\n\n      // Frame drops should be minimal\n      expect(frameDrops.length).toBeLessThan(10); // Less than 10% frame drops\n\n      expect(performanceMeasures.filter(m => m.name.includes('interaction-')).length).toBeGreaterThan(50);\n    });\n\n    it('should scale performance with data size', async () => {\n      const dataSizes = [100, 1000, 10000];\n\n      for (const size of dataSizes) {\n        const { result } = renderHook(() => useScalabilityTest());\n\n        const startTime = Date.now();\n\n        act(() => {\n          result.current.loadDataset(size);\n        });\n\n        await waitFor(() => {\n          expect(result.current.isDataLoaded()).toBe(true);\n        });\n\n        const loadTime = Date.now() - startTime;\n\n        // Performance should scale reasonably with data size\n        const expectedMaxTime = Math.max(1000, size * 2); // At least 1 second, max 2ms per item\n        expect(loadTime).toBeLessThan(expectedMaxTime);\n\n        // Performance degradation should be sub-linear\n        const performanceScore = result.current.getPerformanceScore();\n        expect(performanceScore).toBeGreaterThan(50); // Maintain reasonable performance\n      }\n    });\n  });\n});\n\n// Helper functions for performance testing\nfunction getBundleSize(): number {\n  // Mock bundle size calculation\n  return 8 * 1024 * 1024; // 8MB\n}\n\nfunction getComponentSizes(): number[] {\n  // Mock component size data\n  return [50000, 75000, 120000, 80000, 60000]; // Sizes in bytes\n}\n\nfunction getUnusedExports(): string[] {\n  // Mock unused exports (should be minimal)\n  return ['unusedFunction1', 'unusedComponent'];\n}\n\nfunction getCompressionRatio(): number {\n  // Mock compression ratio\n  return 0.75; // 75% compression\n}\n\nfunction measureTimeToInteractive(): number {\n  // Mock time to interactive measurement\n  return 2500; // 2.5 seconds\n}\n\n// Mock hooks for performance testing\nfunction useMemoryMonitor() {\n  return {\n    loadLargeDataset: jest.fn(),\n    processImages: jest.fn(),\n    clearCache: jest.fn(),\n    getMemoryUsage: jest.fn(() => 30 * 1024 * 1024), // 30MB\n  };\n}\n\nfunction useEventListeners() {\n  return {\n    addListener: jest.fn(),\n    getListenerCount: jest.fn(() => 3),\n    getCleanupWarnings: jest.fn(() => []),\n  };\n}\n\nfunction useImageCache() {\n  return {\n    cacheImages: jest.fn(),\n    getCacheSize: jest.fn(() => 50 * 1024 * 1024),\n    optimizeCache: jest.fn(),\n    getOptimizationMetrics: jest.fn(() => ({ evictedCount: 10 })),\n  };\n}\n\nfunction useMemoryWarnings() {\n  return {\n    simulateMemoryWarning: jest.fn(),\n    getMemoryWarnings: jest.fn(() => ['moderate', 'critical']),\n    getCleanupActions: jest.fn(() => ['clear_image_cache', 'reduce_component_rerenders']),\n  };\n}\n\nfunction useAnimationSequence() {\n  return {\n    playSequence: jest.fn(),\n    isSequenceComplete: jest.fn(() => true),\n    getDroppedFrames: jest.fn(() => 0),\n  };\n}\n\nfunction useReducedMotionAnimations() {\n  return {\n    playAnimation: jest.fn(),\n    isAnimationReduced: jest.fn(() => true),\n    getAnimationDuration: jest.fn(() => 1500),\n  };\n}\n\nfunction useResponsiveAnimations(screenSize: any) {\n  return {\n    playOptimizedAnimation: jest.fn(),\n    getPerformanceScore: jest.fn(() => 85),\n  };\n}\n\nfunction useNetworkCache() {\n  return {\n    fetchData: jest.fn(),\n    getCacheHitRate: jest.fn(() => 0.5),\n  };\n}\n\nfunction useNetworkTimeout() {\n  return {\n    makeRequest: jest.fn(),\n    hasTimedOut: jest.fn(() => true),\n    getTimeoutDuration: jest.fn(() => 10000),\n  };\n}\n\nfunction useLazyImageLoading() {\n  return {\n    setVisibleImages: jest.fn(),\n    getLoadingMetrics: jest.fn(() => ({ loadedCount: 5, averageLoadTime: 300 })),\n  };\n}\n\nfunction useDatabaseConnection() {\n  return {\n    performOperation: jest.fn(),\n    getConnectionPoolSize: jest.fn(() => 5),\n    getAverageOperationTime: jest.fn(() => 25),\n  };\n}\n\nfunction useCriticalResourceLoading() {\n  return {\n    loadCriticalResources: jest.fn(),\n    areCriticalResourcesLoaded: jest.fn(() => true),\n  };\n}\n\nfunction useCodeSplitting() {\n  return {\n    loadModule: jest.fn(),\n    isModuleLoaded: jest.fn(() => true),\n  };\n}\n\nfunction useMemoryStressTest() {\n  return {\n    loadLargeDataset: jest.fn(),\n    loadImages: jest.fn(),\n    loadMessages: jest.fn(),\n    processData: jest.fn(),\n    renderComponents: jest.fn(),\n    forceGarbageCollection: jest.fn(),\n    getMemoryUsage: jest.fn(() => 40 * 1024 * 1024),\n    getPerformanceScore: jest.fn(() => 75),\n  };\n}\n\nfunction renderHook(hookFn: () => any) {\n  return {\n    result: { current: hookFn() },\n    rerender: jest.fn(),\n    unmount: jest.fn(),\n  };\n}\n\n// Mock components for performance testing\nfunction App() { return null; }\nfunction HighFrequencyInteraction() { return null; }\nfunction useScalabilityTest() {\n  return {\n    loadDataset: jest.fn(),\n    isDataLoaded: jest.fn(() => true),\n    getPerformanceScore: jest.fn(() => 80),\n  };\n}\n"],"mappings":"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","ignoreList":[]}