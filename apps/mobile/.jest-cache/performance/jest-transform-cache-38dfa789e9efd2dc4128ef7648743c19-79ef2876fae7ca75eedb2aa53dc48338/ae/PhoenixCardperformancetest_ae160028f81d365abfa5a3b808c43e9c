7f2dc222a0d89f4bb448fe53b54569b7
"use strict";

_getJestObj().mock("../../utils/PerformanceMonitor", function () {
  return {
    __esModule: true,
    default: {
      getInstance: jest.fn(function () {
        return {
          addCallback: jest.fn(),
          removeCallback: jest.fn(),
          startMonitoring: jest.fn(),
          stopMonitoring: jest.fn(),
          getCurrentFPS: jest.fn(function () {
            return 60;
          })
        };
      })
    }
  };
});
_getJestObj().mock("../../theme/Provider", function () {
  return {
    useTheme: function useTheme() {
      return {
        isDark: false,
        colors: {
          primary: "#007AFF",
          surface: "Theme.colors.neutral[0]",
          surfaceElevated: "#F8F9FA",
          text: "Theme.colors.neutral[950]",
          textSecondary: "#666666",
          border: "#E5E5E5",
          shadow: "Theme.colors.neutral[950]"
        }
      };
    }
  };
});
_getJestObj().mock("../../animation", function () {
  return {
    Colors: {
      primary: "#007AFF",
      surface: "Theme.colors.neutral[0]",
      surfaceElevated: "#F8F9FA",
      text: "Theme.colors.neutral[950]",
      textSecondary: "#666666",
      border: "#E5E5E5",
      borderLight: "#F0F0F0",
      shadow: "Theme.colors.neutral[950]"
    },
    Spacing: {
      xs: 4,
      sm: 8,
      md: 16,
      lg: 24,
      xl: 32,
      "2xl": 48
    },
    BorderRadius: {
      sm: 4,
      md: 8,
      lg: 12,
      xl: 16,
      "2xl": 24
    },
    AnimationConfigs: {
      spring: {
        damping: 15,
        stiffness: 300,
        mass: 1
      },
      timing: {
        duration: 300
      }
    },
    PREMIUM_SHADOWS: {
      medium: {
        shadowColor: "Theme.colors.neutral[950]",
        shadowOffset: {
          width: 0,
          height: 4
        },
        shadowOpacity: 0.1,
        shadowRadius: 8,
        elevation: 4
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _PerformanceMonitor = require("../../utils/PerformanceMonitor");
var _PhoenixCard = require("../../components/phoenix/PhoenixCard");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("PhoenixCard Performance Tests (Rule 06)", function () {
  var performanceMonitor;
  beforeEach(function () {
    jest.clearAllMocks();
    performanceMonitor = _PerformanceMonitor.PerformanceMonitor.getInstance();
  });
  describe("Animation Performance (60fps requirement)", function () {
    it("should maintain 60fps during animations", function () {
      var onPressMock = jest.fn();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
        title: "Performance Test Card",
        interactive: true,
        onPress: onPressMock,
        glowOnPress: true
      }));
      var card = screen.getByLabelText("Performance Test Card");
      fireEvent(card, "pressIn");
      expect(performanceMonitor.getCurrentFPS).toHaveBeenCalled();
      expect(performanceMonitor.getCurrentFPS()).toBeGreaterThanOrEqual(50);
    });
    it("should not cause frame drops during rapid interactions", function () {
      var onPressMock = jest.fn();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
        title: "Rapid Interaction Test",
        interactive: true,
        onPress: onPressMock
      }));
      var card = screen.getByLabelText("Rapid Interaction Test");
      for (var i = 0; i < 10; i++) {
        fireEvent(card, "pressIn");
        fireEvent(card, "pressOut");
      }
      expect(performanceMonitor.getCurrentFPS()).toBeGreaterThanOrEqual(50);
    });
  });
  describe("Memory Usage (Bundle Budget Compliance)", function () {
    it("should not cause memory leaks during lifecycle", function () {
      var onPressMock = jest.fn();
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
          title: "Memory Test",
          interactive: true,
          onPress: onPressMock
        })),
        rerender = _render.rerender,
        unmount = _render.unmount;
      for (var i = 0; i < 5; i++) {
        rerender((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
          title: `Memory Test ${i}`,
          interactive: true,
          onPress: onPressMock
        }));
      }
      unmount();
      expect(true).toBe(true);
    });
    it("should have minimal bundle impact", function () {
      var onPressMock = jest.fn();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
        title: "Bundle Test",
        interactive: true,
        onPress: onPressMock
      }));
      var card = screen.getByLabelText("Bundle Test");
      expect(card).toBeTruthy();
    });
  });
  describe("Interaction Performance (INP ≤ 200ms)", function () {
    it("should respond to interactions within 200ms", (0, _asyncToGenerator2.default)(function* () {
      var onPressMock = jest.fn();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
        title: "Interaction Performance Test",
        interactive: true,
        onPress: onPressMock
      }));
      var card = screen.getByLabelText("Interaction Performance Test");
      var startTime = Date.now();
      fireEvent.press(card);
      var interactionTime = Date.now() - startTime;
      expect(interactionTime).toBeLessThanOrEqual(200);
      expect(onPressMock).toHaveBeenCalledTimes(1);
    }));
    it("should handle disabled state without performance impact", function () {
      var onPressMock = jest.fn();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
        title: "Disabled Performance Test",
        interactive: true,
        onPress: onPressMock,
        disabled: true
      }));
      var card = screen.getByLabelText("Disabled Performance Test");
      var startTime = Date.now();
      fireEvent.press(card);
      var interactionTime = Date.now() - startTime;
      expect(interactionTime).toBeLessThanOrEqual(200);
      expect(onPressMock).not.toHaveBeenCalled();
    });
  });
  describe("Layout Stability (CLS ≤ 0.1)", function () {
    it("should not cause layout shifts during state changes", function () {
      var onPressMock = jest.fn();
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
          title: "Layout Stability Test",
          interactive: true,
          onPress: onPressMock
        })),
        rerender = _render2.rerender;
      var card = screen.getByLabelText("Layout Stability Test");
      var initialLayout = card.props.style;
      fireEvent(card, "pressIn");
      expect(card).toBeTruthy();
    });
    it("should maintain consistent dimensions across variants", function () {
      var variants = ["elevated", "glass", "neon", "minimal"];
      variants.forEach(function (variant) {
        var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
            title: `${variant} Layout Test`,
            variant: variant,
            size: "md"
          })),
          rerender = _render3.rerender;
        var card = screen.getByLabelText(`${variant} Layout Test`);
        expect(card).toBeTruthy();
      });
    });
  });
  describe("Animation Budget Compliance", function () {
    it("should use spring animations within 120-320ms range", function () {
      var onPressMock = jest.fn();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
        title: "Animation Budget Test",
        interactive: true,
        onPress: onPressMock
      }));
      var card = screen.getByLabelText("Animation Budget Test");
      fireEvent(card, "pressIn");
      expect(card).toBeTruthy();
    });
    it("should prioritize transform animations over layout changes", function () {
      var onPressMock = jest.fn();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhoenixCard.PhoenixCard, {
        title: "Transform Animation Test",
        interactive: true,
        onPress: onPressMock
      }));
      var card = screen.getByLabelText("Transform Animation Test");
      fireEvent(card, "pressIn");
      fireEvent(card, "pressOut");
      expect(onPressMock).toHaveBeenCalledTimes(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,