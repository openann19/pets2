8be638c25628c2ffed7b16867d5c2d08
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PhoenixCard = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _expoBlur = require("expo-blur");
var _expoLinearGradient = require("expo-linear-gradient");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _animation = require("../../animation");
var _GlobalStyles = require("../../styles/GlobalStyles");
var _constants = require("../elite/constants");
var _Provider = require("../../theme/Provider");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["title", "subtitle", "children", "variant", "size", "interactive", "glowOnPress", "style", "onPress", "testID", "accessibilityLabel", "accessibilityHint"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _worklet_10440987718667_init_data = {
  code: "function anonymous() {\n  const {\n    scale,\n    glowIntensity,\n    elevation\n  } = this._closure;\n  return {\n    transform: [{\n      scale: scale.value\n    }],\n    shadowOpacity: glowIntensity.value * 0.2,\n    shadowRadius: elevation.value * 8\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/phoenix/PhoenixCard.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"scale\",\"glowIntensity\",\"elevation\",\"_closure\",\"transform\",\"value\",\"shadowOpacity\",\"shadowRadius\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/phoenix/PhoenixCard.tsx\"],\"mappings\":\"AA2EI,SAAAA,UAAA;EAAA;IAAAC,KAAA;IAAAC,aAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAkB;IAChBC,SAAS,EAAE,CAAC;MAAEJ,KAAK,EAAEA,KAAK,CAACK;IAAM,CAAC,CAAC;IACnCC,aAAa,EAAEL,aAAa,CAACI,KAAK,GAAG,GAAG;IACxCE,YAAY,EAAEL,SAAS,CAACG,KAAK,GAAG;EAClC,CAAC;AAAA\",\"ignoreList\":[]}"
};
var PhoenixCard = exports.PhoenixCard = function PhoenixCard(_ref) {
  var title = _ref.title,
    subtitle = _ref.subtitle,
    children = _ref.children,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "elevated" : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? "md" : _ref$size,
    _ref$interactive = _ref.interactive,
    interactive = _ref$interactive === void 0 ? false : _ref$interactive,
    _ref$glowOnPress = _ref.glowOnPress,
    glowOnPress = _ref$glowOnPress === void 0 ? true : _ref$glowOnPress,
    style = _ref.style,
    onPress = _ref.onPress,
    testID = _ref.testID,
    accessibilityLabel = _ref.accessibilityLabel,
    accessibilityHint = _ref.accessibilityHint,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useTheme = (0, _Provider.useTheme)(),
    isDark = _useTheme.isDark;
  var scale = (0, _reactNativeReanimated.useSharedValue)(1);
  var glowIntensity = (0, _reactNativeReanimated.useSharedValue)(1);
  var elevation = (0, _reactNativeReanimated.useSharedValue)(1);
  var animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -4, -27];
    var _f = function _f() {
      return {
        transform: [{
          scale: scale.value
        }],
        shadowOpacity: glowIntensity.value * 0.2,
        shadowRadius: elevation.value * 8
      };
    };
    _f._closure = {
      scale: scale,
      glowIntensity: glowIntensity,
      elevation: elevation
    };
    _f.__initData = _worklet_10440987718667_init_data;
    _f.__workletHash = 10440987718667;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var handlePressIn = (0, _react.useCallback)(function () {
    if (!interactive) return;
    scale.value = (0, _reactNativeReanimated.withSpring)(0.98, _animation.SPRING.soft);
    glowIntensity.value = (0, _reactNativeReanimated.withSpring)(1.3, _animation.SPRING.soft);
    elevation.value = (0, _reactNativeReanimated.withSpring)(1.2, _animation.SPRING.soft);
    (0, _reactNativeReanimated.runOnJS)(Haptics.impactAsync)(Haptics.ImpactFeedbackStyle.Light);
  }, [interactive]);
  var handlePressOut = (0, _react.useCallback)(function () {
    if (!interactive) return;
    scale.value = (0, _reactNativeReanimated.withSpring)(1, _animation.SPRING.soft);
    glowIntensity.value = (0, _reactNativeReanimated.withSpring)(1, _animation.SPRING.soft);
    elevation.value = (0, _reactNativeReanimated.withSpring)(1, _animation.SPRING.soft);
  }, [interactive]);
  var handlePress = (0, _react.useCallback)(function () {
    if (onPress) {
      onPress(undefined);
    }
  }, [onPress]);
  var getSizeStyles = (0, _react.useCallback)(function () {
    var sizes = {
      sm: {
        padding: _GlobalStyles.Spacing.md,
        minHeight: 80
      },
      md: {
        padding: _GlobalStyles.Spacing.lg,
        minHeight: 120
      },
      lg: {
        padding: _GlobalStyles.Spacing.xl,
        minHeight: 160
      },
      xl: {
        padding: _GlobalStyles.Spacing["2xl"],
        minHeight: 200
      }
    };
    return sizes[size];
  }, [size]);
  var getVariantStyles = (0, _react.useCallback)(function () {
    var variants = {
      elevated: _objectSpread({
        backgroundColor: isDark ? _GlobalStyles.Colors.surfaceElevated : _GlobalStyles.Colors.surface
      }, _constants.PREMIUM_SHADOWS.primaryGlow),
      glass: {
        backgroundColor: "transparent"
      },
      neon: {
        backgroundColor: _GlobalStyles.Colors.primary + "10",
        borderWidth: 1,
        borderColor: _GlobalStyles.Colors.primary + "30",
        shadowColor: _GlobalStyles.Colors.primary,
        shadowOpacity: 0.3,
        shadowRadius: 12
      },
      minimal: {
        backgroundColor: "transparent",
        borderWidth: 1,
        borderColor: isDark ? _GlobalStyles.Colors.border : _GlobalStyles.Colors.borderLight
      }
    };
    return variants[variant];
  }, [variant, isDark]);
  var accessibilityProps = {
    accessible: true,
    accessibilityRole: interactive ? "button" : "none",
    accessibilityLabel: accessibilityLabel || title || "Card",
    accessibilityHint: accessibilityHint || (interactive ? "Double tap to interact" : undefined),
    accessibilityState: {
      disabled: props.disabled || false
    }
  };
  var CardContent = function CardContent() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([getSizeStyles(), getVariantStyles()]),
      children: [title && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          fontSize: 18,
          fontWeight: "600",
          color: isDark ? _GlobalStyles.Colors.text : _GlobalStyles.Colors.text,
          marginBottom: subtitle ? _GlobalStyles.Spacing.xs : 0
        },
        children: title
      }), subtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          fontSize: 14,
          color: isDark ? _GlobalStyles.Colors.textSecondary : _GlobalStyles.Colors.textSecondary,
          marginBottom: children ? _GlobalStyles.Spacing.md : 0
        },
        children: subtitle
      }), children]
    });
  };
  if (interactive && onPress) {
    return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: _reactNative.StyleSheet.flatten([animatedStyle, style]),
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, _objectSpread(_objectSpread(_objectSpread({
        testID: testID,
        style: {
          borderRadius: Number(_GlobalStyles.BorderRadius.lg) || 8,
          overflow: "hidden"
        },
        onPressIn: handlePressIn,
        onPressOut: handlePressOut,
        onPress: handlePress,
        activeOpacity: 0.9
      }, accessibilityProps), props), {}, {
        children: variant === "glass" ? (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
          intensity: 20,
          style: {
            borderRadius: Number(_GlobalStyles.BorderRadius.lg) || 8
          },
          children: (0, _jsxRuntime.jsx)(CardContent, {})
        }) : variant === "neon" ? (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
          colors: [_GlobalStyles.Colors.primary + "05", _GlobalStyles.Colors.primary + "10"],
          style: {
            borderRadius: Number(_GlobalStyles.BorderRadius.lg) || 8
          },
          children: (0, _jsxRuntime.jsx)(CardContent, {})
        }) : (0, _jsxRuntime.jsx)(CardContent, {})
      }))
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, _objectSpread(_objectSpread({
    testID: testID,
    style: _reactNative.StyleSheet.flatten([animatedStyle, {
      borderRadius: Number(_GlobalStyles.BorderRadius.lg) || 8,
      overflow: "hidden"
    }, style])
  }, accessibilityProps), {}, {
    children: variant === "glass" ? (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
      intensity: 20,
      style: {
        borderRadius: _GlobalStyles.BorderRadius.lg
      },
      children: (0, _jsxRuntime.jsx)(CardContent, {})
    }) : variant === "neon" ? (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: [_GlobalStyles.Colors.primary + "05", _GlobalStyles.Colors.primary + "10"],
      style: {
        borderRadius: _GlobalStyles.BorderRadius.lg
      },
      children: (0, _jsxRuntime.jsx)(CardContent, {})
    }) : (0, _jsxRuntime.jsx)(CardContent, {})
  }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,