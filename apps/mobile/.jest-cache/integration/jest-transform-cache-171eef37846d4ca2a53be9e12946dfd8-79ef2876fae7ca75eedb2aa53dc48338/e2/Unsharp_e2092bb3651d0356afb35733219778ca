16e4a16c1814464c0daf336e4c2329b8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsharpMask = unsharpMask;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function loadSkia() {
  return _loadSkia.apply(this, arguments);
}
function _loadSkia() {
  _loadSkia = (0, _asyncToGenerator2.default)(function* () {
    try {
      return require("@shopify/react-native-skia");
    } catch (_unused) {
      return null;
    }
  });
  return _loadSkia.apply(this, arguments);
}
function unsharpMask(_x) {
  return _unsharpMask.apply(this, arguments);
}
function _unsharpMask() {
  _unsharpMask = (0, _asyncToGenerator2.default)(function* (uri) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var Skia = yield loadSkia();
    if (!Skia) {
      return uri;
    }
    var _opts$amount = opts.amount,
      amount = _opts$amount === void 0 ? 0.5 : _opts$amount,
      _opts$radius = opts.radius,
      radius = _opts$radius === void 0 ? 1.5 : _opts$radius,
      _opts$threshold = opts.threshold,
      threshold = _opts$threshold === void 0 ? 0.02 : _opts$threshold,
      _opts$quality = opts.quality,
      quality = _opts$quality === void 0 ? 1 : _opts$quality,
      _opts$format = opts.format,
      format = _opts$format === void 0 ? "jpg" : _opts$format;
    var S = Skia.Skia;
    var data = yield S.Data.fromURI(uri);
    var src = S.Image.MakeImageFromEncoded(data);
    if (!src) {
      return uri;
    }
    var w = src.width();
    var h = src.height();
    var surface = S.Surface.MakeSurface(w, h);
    if (!surface) {
      return uri;
    }
    var canvas = surface.getCanvas();
    var blurSurface = S.Surface.MakeSurface(w, h);
    if (!blurSurface) {
      return uri;
    }
    var blurCanvas = blurSurface.getCanvas();
    var blurPaint = S.Paint();
    blurPaint.setImageFilter(S.ImageFilter.MakeBlur(radius, radius, "decal"));
    blurCanvas.drawImage(src, 0, 0, blurPaint);
    var blurred = blurSurface.makeImageSnapshot();
    var sksl = `
    uniform shader base;
    uniform shader blur;
    uniform float amount;
    uniform float threshold;
    
    half4 main(float2 xy) {
      half4 b = base.eval(xy);
      half4 g = blur.eval(xy);
      half3 hp = b.rgb - g.rgb;              // high-pass
      half m = max(max(abs(hp.r), abs(hp.g)), abs(hp.b));
      half t = m > threshold ? 1.0 : 0.0;    // threshold gate
      half3 sharp = b.rgb + (amount * hp * t);
      return half4(clamp(sharp, 0.0, 1.0), b.a);
    }
  `;
    var effect = S.RuntimeEffect.Make(sksl);
    if (!effect) {
      return uri;
    }
    var shader = effect.makeShader({
      amount: amount,
      threshold: threshold
    }, [src.makeShaderOptions({}, {}), blurred.makeShaderOptions({}, {})]);
    var p = S.Paint();
    p.setShader(shader);
    canvas.drawRect(S.XYWHRect(0, 0, w, h), p);
    var snap = surface.makeImageSnapshot();
    var base64 = format === "png" ? snap.encodeToBase64() : snap.encodeToBase64(S.ImageFormat.JPEG, Math.round(quality * 100));
    var outPath = `${FileSystem.cacheDirectory}usm_${Date.now()}.${format}`;
    yield FileSystem.writeAsStringAsync(outPath, base64, {
      encoding: FileSystem.EncodingType.Base64
    });
    return outPath;
  });
  return _unsharpMask.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,