6c64356dfed9e51c921734d7d819ac04
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuperRes = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var _TiledUpscaler = require("./TiledUpscaler");
var _Unsharp = require("./Unsharp");
var _logger4 = require("../services/logger");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var BicubicAdapter = {
  name: "bicubic",
  available: function () {
    var _available = (0, _asyncToGenerator2.default)(function* () {
      return true;
    });
    function available() {
      return _available.apply(this, arguments);
    }
    return available;
  }(),
  upscale: function () {
    var _upscale = (0, _asyncToGenerator2.default)(function* (uri, targetW, targetH) {
      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var _opts$sharpen = opts.sharpen,
        sharpen = _opts$sharpen === void 0 ? true : _opts$sharpen,
        useTiles = opts.useTiles,
        _opts$pickBest = opts.pickBest,
        pickBest = _opts$pickBest === void 0 ? false : _opts$pickBest;
      var shouldUseTiles = useTiles != null ? useTiles : targetW >= 1920 || targetH >= 1920;
      var result;
      if (shouldUseTiles) {
        result = yield (0, _TiledUpscaler.tileUpscaleAuto)(uri, {
          targetW: Math.round(targetW),
          targetH: Math.round(targetH),
          tile: 1024,
          overlap: 12,
          quality: 1,
          format: "jpg"
        });
      } else {
        var manipResult = yield ImageManipulator.manipulateAsync(uri, [{
          resize: {
            width: Math.round(targetW),
            height: Math.round(targetH)
          }
        }], {
          compress: 1,
          format: ImageManipulator.SaveFormat.JPEG
        });
        result = manipResult.uri;
      }
      if (sharpen) {
        try {
          result = yield (0, _Unsharp.unsharpMask)(result, {
            amount: 0.6,
            radius: 1.2,
            threshold: 0.02,
            quality: 1,
            format: "jpg"
          });
        } catch (error) {
          var err = error instanceof Error ? error : new Error(String(error));
          var _yield$import = yield Promise.resolve().then(function () {
              return _interopRequireWildcard(require("../services/logger"));
            }),
            _logger = _yield$import.logger;
          _logger.warn('SuperRes: Unsharp mask failed', {
            error: err
          });
        }
      }
      return result;
    });
    function upscale(_x, _x2, _x3) {
      return _upscale.apply(this, arguments);
    }
    return upscale;
  }()
};
var ServerAdapter = {
  name: "server-esrgan",
  available: function () {
    var _available2 = (0, _asyncToGenerator2.default)(function* () {
      if (__DEV__) {
        return false;
      }
      return false;
    });
    function available() {
      return _available2.apply(this, arguments);
    }
    return available;
  }(),
  upscale: function () {
    var _upscale2 = (0, _asyncToGenerator2.default)(function* (uri, targetW, targetH) {
      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      return uri;
    });
    function upscale(_x4, _x5, _x6) {
      return _upscale2.apply(this, arguments);
    }
    return upscale;
  }()
};
var LocalTFLiteAdapter = {
  name: "tflite-esrgan",
  available: function () {
    var _available3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        return false;
      } catch (_unused) {
        return false;
      }
    });
    function available() {
      return _available3.apply(this, arguments);
    }
    return available;
  }(),
  upscale: function () {
    var _upscale3 = (0, _asyncToGenerator2.default)(function* (uri, targetW, targetH) {
      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      return uri;
    });
    function upscale(_x7, _x8, _x9) {
      return _upscale3.apply(this, arguments);
    }
    return upscale;
  }()
};
var ADAPTERS = [LocalTFLiteAdapter, ServerAdapter, BicubicAdapter];
var SuperRes = exports.SuperRes = {
  upscale: function () {
    var _upscale4 = (0, _asyncToGenerator2.default)(function* (uri, targetW, targetH, opts) {
      for (var adapter of ADAPTERS) {
        if (yield adapter.available()) {
          try {
            var _yield$import2 = yield Promise.resolve().then(function () {
                return _interopRequireWildcard(require("../services/logger"));
              }),
              _logger2 = _yield$import2.logger;
            _logger2.info('SuperRes: Using adapter for upscaling', {
              adapter: adapter.name,
              dimensions: `${targetW}x${targetH}`
            });
            var result = yield adapter.upscale(uri, targetW, targetH, opts);
            return result;
          } catch (error) {
            var err = error instanceof Error ? error : new Error(String(error));
            var _yield$import3 = yield Promise.resolve().then(function () {
                return _interopRequireWildcard(require("../services/logger"));
              }),
              _logger3 = _yield$import3.logger;
            _logger3.warn(`SuperRes: ${adapter.name} failed, trying fallback`, {
              error: err
            });
          }
        }
      }
      _logger4.logger.error("[SuperRes] All adapters failed, returning original URI");
      return uri;
    });
    function upscale(_x0, _x1, _x10, _x11) {
      return _upscale4.apply(this, arguments);
    }
    return upscale;
  }(),
  adapters: ADAPTERS,
  getActiveAdapter: function () {
    var _getActiveAdapter = (0, _asyncToGenerator2.default)(function* () {
      for (var adapter of ADAPTERS) {
        if (yield adapter.available()) {
          return adapter.name;
        }
      }
      return "none";
    });
    function getActiveAdapter() {
      return _getActiveAdapter.apply(this, arguments);
    }
    return getActiveAdapter;
  }()
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,