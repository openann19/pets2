72367b9d973bf5b413075f0fd1e388bb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHapticFeedback = exports.default = void 0;
var Haptics = _interopRequireWildcard(require("expo-haptics"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var useHapticFeedback = exports.useHapticFeedback = function useHapticFeedback() {
  var triggerHaptic = function triggerHaptic() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "light";
    switch (type) {
      case "light":
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        break;
      case "medium":
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
        break;
      case "heavy":
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);
        break;
    }
  };
  var triggerSuccess = function triggerSuccess() {
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
  };
  var triggerWarning = function triggerWarning() {
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);
  };
  var triggerError = function triggerError() {
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
  };
  return {
    triggerHaptic: triggerHaptic,
    triggerSuccess: triggerSuccess,
    triggerWarning: triggerWarning,
    triggerError: triggerError
  };
};
var _default = exports.default = useHapticFeedback;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIYXB0aWNzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90MiIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidXNlSGFwdGljRmVlZGJhY2siLCJleHBvcnRzIiwidHJpZ2dlckhhcHRpYyIsInR5cGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJpbXBhY3RBc3luYyIsIkltcGFjdEZlZWRiYWNrU3R5bGUiLCJMaWdodCIsIk1lZGl1bSIsIkhlYXZ5IiwidHJpZ2dlclN1Y2Nlc3MiLCJub3RpZmljYXRpb25Bc3luYyIsIk5vdGlmaWNhdGlvbkZlZWRiYWNrVHlwZSIsIlN1Y2Nlc3MiLCJ0cmlnZ2VyV2FybmluZyIsIldhcm5pbmciLCJ0cmlnZ2VyRXJyb3IiLCJFcnJvciIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsidXNlSGFwdGljRmVlZGJhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB1c2VIYXB0aWNGZWVkYmFjayBIb29rXG4gKiBIYXB0aWMgZmVlZGJhY2sgdXRpbGl0aWVzXG4gKi9cblxuaW1wb3J0ICogYXMgSGFwdGljcyBmcm9tIFwiZXhwby1oYXB0aWNzXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VIYXB0aWNGZWVkYmFjayA9ICgpID0+IHtcbiAgY29uc3QgdHJpZ2dlckhhcHRpYyA9ICh0eXBlOiBcImxpZ2h0XCIgfCBcIm1lZGl1bVwiIHwgXCJoZWF2eVwiID0gXCJsaWdodFwiKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwibGlnaHRcIjpcbiAgICAgICAgSGFwdGljcy5pbXBhY3RBc3luYyhIYXB0aWNzLkltcGFjdEZlZWRiYWNrU3R5bGUuTGlnaHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJtZWRpdW1cIjpcbiAgICAgICAgSGFwdGljcy5pbXBhY3RBc3luYyhIYXB0aWNzLkltcGFjdEZlZWRiYWNrU3R5bGUuTWVkaXVtKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiaGVhdnlcIjpcbiAgICAgICAgSGFwdGljcy5pbXBhY3RBc3luYyhIYXB0aWNzLkltcGFjdEZlZWRiYWNrU3R5bGUuSGVhdnkpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdHJpZ2dlclN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgSGFwdGljcy5ub3RpZmljYXRpb25Bc3luYyhIYXB0aWNzLk5vdGlmaWNhdGlvbkZlZWRiYWNrVHlwZS5TdWNjZXNzKTtcbiAgfTtcblxuICBjb25zdCB0cmlnZ2VyV2FybmluZyA9ICgpID0+IHtcbiAgICBIYXB0aWNzLm5vdGlmaWNhdGlvbkFzeW5jKEhhcHRpY3MuTm90aWZpY2F0aW9uRmVlZGJhY2tUeXBlLldhcm5pbmcpO1xuICB9O1xuXG4gIGNvbnN0IHRyaWdnZXJFcnJvciA9ICgpID0+IHtcbiAgICBIYXB0aWNzLm5vdGlmaWNhdGlvbkFzeW5jKEhhcHRpY3MuTm90aWZpY2F0aW9uRmVlZGJhY2tUeXBlLkVycm9yKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHRyaWdnZXJIYXB0aWMsXG4gICAgdHJpZ2dlclN1Y2Nlc3MsXG4gICAgdHJpZ2dlcldhcm5pbmcsXG4gICAgdHJpZ2dlckVycm9yLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlSGFwdGljRmVlZGJhY2s7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLElBQUFBLE9BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUF3QyxTQUFBRCx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFG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