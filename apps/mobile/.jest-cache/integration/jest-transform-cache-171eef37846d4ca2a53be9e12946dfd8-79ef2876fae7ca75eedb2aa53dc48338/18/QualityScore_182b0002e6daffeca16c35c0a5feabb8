a109a56f4140e1361ece667d31cca26c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareSharpness = compareSharpness;
exports.jpegByteSize = jpegByteSize;
exports.pickSharpest = pickSharpest;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function jpegByteSize(_x) {
  return _jpegByteSize.apply(this, arguments);
}
function _jpegByteSize() {
  _jpegByteSize = (0, _asyncToGenerator2.default)(function* (uri) {
    var sampleW = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 720;
    var quality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.72;
    try {
      var _yield$ImageManipulat = yield ImageManipulator.manipulateAsync(uri, [{
          resize: {
            width: sampleW
          }
        }], {
          compress: quality,
          format: ImageManipulator.SaveFormat.JPEG
        }),
        tmp = _yield$ImageManipulat.uri;
      var info = yield FileSystem.getInfoAsync(tmp);
      try {
        yield FileSystem.deleteAsync(tmp, {
          idempotent: true
        });
      } catch (_unused) {}
      return info.exists && typeof info.size === 'number' ? info.size : 0;
    } catch (err) {
      var _yield$import = yield Promise.resolve().then(function () {
          return _interopRequireWildcard(require("../services/logger"));
        }),
        logger = _yield$import.logger;
      logger.warn('QualityScore: Failed to compute size', {
        error: err instanceof Error ? err : new Error(String(err))
      });
      return 0;
    }
  });
  return _jpegByteSize.apply(this, arguments);
}
function pickSharpest(_x2) {
  return _pickSharpest.apply(this, arguments);
}
function _pickSharpest() {
  _pickSharpest = (0, _asyncToGenerator2.default)(function* (uris) {
    var sampleW = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 720;
    var quality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.72;
    if (uris.length === 0) {
      throw new Error("No URIs provided to pickSharpest");
    }
    if (uris.length === 1) {
      var uri = uris[0];
      if (!uri) {
        throw new Error("Empty URI provided");
      }
      return uri;
    }
    var bestUri = uris[0];
    if (!bestUri) {
      throw new Error("No valid URI found");
    }
    var bestSize = -1;
    for (var _uri2 of uris) {
      if (!_uri2) continue;
      var size = yield jpegByteSize(_uri2, sampleW, quality);
      if (size > bestSize) {
        bestSize = size;
        bestUri = _uri2;
      }
    }
    if (!bestUri) {
      throw new Error("Failed to determine best URI");
    }
    return bestUri;
  });
  return _pickSharpest.apply(this, arguments);
}
function compareSharpness(_x3, _x4) {
  return _compareSharpness.apply(this, arguments);
}
function _compareSharpness() {
  _compareSharpness = (0, _asyncToGenerator2.default)(function* (uri1, uri2) {
    var sampleW = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 720;
    var quality = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.72;
    var _yield$Promise$all = yield Promise.all([jpegByteSize(uri1, sampleW, quality), jpegByteSize(uri2, sampleW, quality)]),
      _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2),
      size1 = _yield$Promise$all2[0],
      size2 = _yield$Promise$all2[1];
    return size1 > size2 ? uri1 : uri2;
  });
  return _compareSharpness.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,