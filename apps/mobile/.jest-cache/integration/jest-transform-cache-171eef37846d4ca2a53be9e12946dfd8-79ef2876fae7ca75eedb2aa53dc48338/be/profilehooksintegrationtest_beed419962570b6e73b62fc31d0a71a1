e273e7aeb67fb5926b3ddb0a1022635c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("Hooks Integration - Profile Management Flow", function () {
  _getJestObj().mock("../../../stores/useAuthStore", function () {
    return {
      useAuthStore: function useAuthStore() {
        return {
          user: {
            _id: "user123",
            firstName: "John",
            lastName: "Doe"
          },
          updateUser: jest.fn()
        };
      }
    };
  });
  _getJestObj().mock("../../../services/api", function () {
    return {
      matchesAPI: {
        getMyPets: jest.fn(),
        updateProfile: jest.fn()
      }
    };
  });
  _getJestObj().mock("../../../services/logger", function () {
    return {
      logger: {
        info: jest.fn(),
        error: jest.fn()
      }
    };
  });
  _getJestObj().mock("@react-native-async-storage/async-storage", function () {
    return {
      getItem: jest.fn(),
      setItem: jest.fn(),
      removeItem: jest.fn()
    };
  });
  var _require = require("../useProfileData"),
    useProfileData = _require.useProfileData;
  var _require2 = require("../useProfileUpdate"),
    useProfileUpdate = _require2.useProfileUpdate;
  var AsyncStorage = require("@react-native-async-storage/async-storage");
  var _require3 = require("../../../services/api"),
    matchesAPI = _require3.matchesAPI;
  var mockAsyncStorage = AsyncStorage;
  var mockMatchesAPI = matchesAPI;
  beforeEach(function () {
    jest.clearAllMocks();
    mockMatchesAPI.getMyPets.mockResolvedValue({
      data: [{
        _id: "pet1",
        name: "Buddy",
        species: "dog"
      }]
    });
    mockMatchesAPI.updateProfile.mockResolvedValue({
      _id: "user123",
      firstName: "John",
      lastName: "Updated",
      bio: "Updated bio"
    });
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue();
  });
  it("should demonstrate complete profile management workflow", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return useProfileData();
      }),
      profileDataResult = _renderHook.result;
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return useProfileUpdate();
      }),
      profileUpdateResult = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(profileDataResult.current.isLoading).toBe(false);
    });
    expect(profileDataResult.current.user.firstName).toBe("John");
    expect(profileDataResult.current.pets).toHaveLength(1);
    expect(profileDataResult.current.pets[0].name).toBe("Buddy");
    var updateData = {
      firstName: "Johnny",
      bio: "Love pets!"
    };
    var updateSuccess = yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return yield profileUpdateResult.current.updateProfile(updateData);
    }));
    expect(updateSuccess).toBe(true);
    expect(mockMatchesAPI.updateProfile).toHaveBeenCalledWith(updateData);
    (0, _reactNative.act)(function () {
      profileDataResult.current.refreshProfile();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(profileDataResult.current.isLoading).toBe(false);
    });
    expect(mockMatchesAPI.getMyPets).toHaveBeenCalledTimes(2);
  }));
  it("should handle error states across hooks", (0, _asyncToGenerator2.default)(function* () {
    mockMatchesAPI.getMyPets.mockRejectedValueOnce(new Error("Network error"));
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return useProfileData();
      }),
      profileDataResult = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(profileDataResult.current.isLoading).toBe(false);
    });
    expect(profileDataResult.current.error).toBe("Network error");
    expect(profileDataResult.current.pets).toEqual([]);
    mockMatchesAPI.getMyPets.mockResolvedValueOnce({
      data: [{
        _id: "pet1",
        name: "Buddy",
        species: "dog"
      }]
    });
    (0, _reactNative.act)(function () {
      profileDataResult.current.refreshProfile();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(profileDataResult.current.isLoading).toBe(false);
    });
    expect(profileDataResult.current.error).toBe(null);
    expect(profileDataResult.current.pets).toHaveLength(1);
  }));
  it("should demonstrate hook composition benefits", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return useProfileData();
      }),
      profileDataResult = _renderHook4.result;
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return useProfileUpdate();
      }),
      profileUpdateResult = _renderHook5.result;
    expect(typeof profileDataResult.current.refreshProfile).toBe("function");
    expect(typeof profileUpdateResult.current.updateProfile).toBe("function");
    expect(profileDataResult.current.user).toBeDefined();
    expect(profileUpdateResult.current.isUpdating).toBe(false);
    expect(profileDataResult.current).not.toBe(profileUpdateResult.current);
  });
  it("should handle concurrent operations", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return useProfileData();
      }),
      profileDataResult = _renderHook6.result;
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return useProfileUpdate();
      }),
      profileUpdateResult = _renderHook7.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(profileDataResult.current.isLoading).toBe(false);
    });
    var updatePromise = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return yield profileUpdateResult.current.updateProfile({
        bio: "New bio"
      });
    }));
    (0, _reactNative.act)(function () {
      profileDataResult.current.refreshProfile();
    });
    var updateResult = yield updatePromise;
    yield (0, _reactNative.waitFor)(function () {
      expect(profileDataResult.current.isLoading).toBe(false);
    });
    expect(updateResult).toBe(true);
    expect(mockMatchesAPI.updateProfile).toHaveBeenCalledTimes(1);
    expect(mockMatchesAPI.getMyPets).toHaveBeenCalledTimes(2);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,