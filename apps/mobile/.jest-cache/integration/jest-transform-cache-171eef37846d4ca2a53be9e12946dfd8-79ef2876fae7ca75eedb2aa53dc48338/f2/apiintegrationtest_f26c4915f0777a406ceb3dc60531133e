7fd7543db6457f799cc6aa56f2f888dd
"use strict";

_getJestObj().mock("../../services/apiService", function () {
  return {
    apiService: {
      get: jest.fn(),
      post: jest.fn(),
      put: jest.fn(),
      delete: jest.fn()
    }
  };
});
_getJestObj().mock("expo-secure-store", function () {
  return {
    getItemAsync: jest.fn(),
    setItemAsync: jest.fn(),
    deleteItemAsync: jest.fn()
  };
});
_getJestObj().mock("../../services/socketService", function () {
  return {
    socketService: {
      connect: jest.fn(),
      disconnect: jest.fn(),
      emit: jest.fn(),
      on: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactQuery = require("@tanstack/react-query");
var _apiService = require("../../services/apiService");
var _AuthProvider = require("../../providers/AuthProvider");
var _useAuth4 = require("../../hooks/useAuth");
var _logger = require("../../services/logger");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestQueryClient = function createTestQueryClient() {
  return new _reactQuery.QueryClient({
    defaultOptions: {
      queries: {
        retry: false
      },
      mutations: {
        retry: false
      }
    }
  });
};
var TestWrapper = function TestWrapper(_ref) {
  var children = _ref.children;
  var queryClient = createTestQueryClient();
  return (0, _jsxRuntime.jsx)(_reactQuery.QueryClientProvider, {
    client: queryClient,
    children: (0, _jsxRuntime.jsx)(_AuthProvider.AuthProvider, {
      children: children
    })
  });
};
describe("API Integration Tests", function () {
  var queryClient;
  beforeEach(function () {
    queryClient = createTestQueryClient();
    jest.clearAllMocks();
  });
  describe("Authentication API", function () {
    it("should handle successful login", (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        user: {
          id: "1",
          email: "test@example.com",
          name: "Test User"
        },
        token: "mock-jwt-token"
      };
      _apiService.apiService.post.mockResolvedValue({
        data: mockResponse,
        status: 200
      });
      var TestComponent = function TestComponent() {
        var _useAuth = (0, _useAuth4.useAuth)(),
          login = _useAuth.login,
          user = _useAuth.user,
          isLoading = _useAuth.isLoading;
        _react.default.useEffect(function () {
          login("test@example.com", "password123");
        }, [login]);
        if (isLoading) return null;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "user-data",
          children: user == null ? void 0 : user.email
        });
      };
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("user-data")).toBeTruthy();
      });
      expect(_apiService.apiService.post).toHaveBeenCalledWith("/auth/login", {
        email: "test@example.com",
        password: "password123"
      });
    }));
    it("should handle login failure", (0, _asyncToGenerator2.default)(function* () {
      _apiService.apiService.post.mockRejectedValue({
        response: {
          data: {
            message: "Invalid credentials"
          },
          status: 401
        }
      });
      var TestComponent = function TestComponent() {
        var _useAuth2 = (0, _useAuth4.useAuth)(),
          login = _useAuth2.login,
          error = _useAuth2.error,
          isLoading = _useAuth2.isLoading;
        _react.default.useEffect(function () {
          login("test@example.com", "wrongpassword");
        }, [login]);
        if (isLoading) return null;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "error-message",
          children: error
        });
      };
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render2.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("error-message")).toBeTruthy();
      });
    }));
    it("should handle token refresh", (0, _asyncToGenerator2.default)(function* () {
      var mockRefreshResponse = {
        token: "new-jwt-token",
        refreshToken: "new-refresh-token"
      };
      _apiService.apiService.post.mockResolvedValue({
        data: mockRefreshResponse,
        status: 200
      });
      var TestComponent = function TestComponent() {
        var _useAuth3 = (0, _useAuth4.useAuth)(),
          refreshToken = _useAuth3.refreshToken;
        _react.default.useEffect(function () {
          refreshToken();
        }, [refreshToken]);
        return (0, _jsxRuntime.jsx)("div", {
          testID: "refresh-status",
          children: "Refreshed"
        });
      };
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render3.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("refresh-status")).toBeTruthy();
      });
      expect(_apiService.apiService.post).toHaveBeenCalledWith("/auth/refresh");
    }));
  });
  describe("Pet Profile API", function () {
    it("should fetch pet profiles", (0, _asyncToGenerator2.default)(function* () {
      var mockPets = [{
        id: "1",
        name: "Buddy",
        age: 3,
        breed: "Golden Retriever",
        photos: ["photo1.jpg", "photo2.jpg"]
      }, {
        id: "2",
        name: "Luna",
        age: 2,
        breed: "Labrador",
        photos: ["photo3.jpg"]
      }];
      _apiService.apiService.get.mockResolvedValue({
        data: mockPets,
        status: 200
      });
      var TestComponent = function TestComponent() {
        var _React$useState = _react.default.useState([]),
          _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
          pets = _React$useState2[0],
          setPets = _React$useState2[1];
        _react.default.useEffect(function () {
          var fetchPets = function () {
            var _ref6 = (0, _asyncToGenerator2.default)(function* () {
              try {
                var response = yield _apiService.apiService.get("/pets");
                setPets(response.data);
              } catch (error) {
                _logger.logger.error("Failed to fetch pets:", {
                  error: error
                });
              }
            });
            return function fetchPets() {
              return _ref6.apply(this, arguments);
            };
          }();
          fetchPets();
        }, []);
        return (0, _jsxRuntime.jsx)("div", {
          testID: "pets-list",
          children: pets.map(function (pet) {
            return (0, _jsxRuntime.jsx)("div", {
              testID: `pet-${pet.id}`,
              children: pet.name
            }, pet.id);
          })
        });
      };
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render4.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("pet-1")).toBeTruthy();
        expect(getByTestId("pet-2")).toBeTruthy();
      });
      expect(_apiService.apiService.get).toHaveBeenCalledWith("/pets");
    }));
    it("should create new pet profile", (0, _asyncToGenerator2.default)(function* () {
      var newPet = {
        name: "Max",
        age: 1,
        breed: "German Shepherd",
        bio: "Friendly and energetic"
      };
      var mockResponse = _objectSpread(_objectSpread({
        id: "3"
      }, newPet), {}, {
        photos: [],
        createdAt: new Date().toISOString()
      });
      _apiService.apiService.post.mockResolvedValue({
        data: mockResponse,
        status: 201
      });
      var TestComponent = function TestComponent() {
        var _React$useState3 = _react.default.useState(null),
          _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
          pet = _React$useState4[0],
          setPet = _React$useState4[1];
        _react.default.useEffect(function () {
          var createPet = function () {
            var _ref8 = (0, _asyncToGenerator2.default)(function* () {
              try {
                var response = yield _apiService.apiService.post("/pets", newPet);
                setPet(response.data);
              } catch (error) {
                _logger.logger.error("Failed to create pet:", {
                  error: error
                });
              }
            });
            return function createPet() {
              return _ref8.apply(this, arguments);
            };
          }();
          createPet();
        }, []);
        if (!pet) return null;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "created-pet",
          children: pet.name
        });
      };
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render5.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("created-pet")).toBeTruthy();
      });
      expect(_apiService.apiService.post).toHaveBeenCalledWith("/pets", newPet);
    }));
    it("should update pet profile", (0, _asyncToGenerator2.default)(function* () {
      var updatedPet = {
        id: "1",
        name: "Buddy Updated",
        age: 4,
        breed: "Golden Retriever"
      };
      _apiService.apiService.put.mockResolvedValue({
        data: updatedPet,
        status: 200
      });
      var TestComponent = function TestComponent() {
        var _React$useState5 = _react.default.useState(null),
          _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
          pet = _React$useState6[0],
          setPet = _React$useState6[1];
        _react.default.useEffect(function () {
          var updatePet = function () {
            var _ref0 = (0, _asyncToGenerator2.default)(function* () {
              try {
                var response = yield _apiService.apiService.put(`/pets/${updatedPet.id}`, updatedPet);
                setPet(response.data);
              } catch (error) {
                _logger.logger.error("Failed to update pet:", {
                  error: error
                });
              }
            });
            return function updatePet() {
              return _ref0.apply(this, arguments);
            };
          }();
          updatePet();
        }, []);
        if (!pet) return null;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "updated-pet",
          children: pet.name
        });
      };
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render6.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("updated-pet")).toBeTruthy();
      });
      expect(_apiService.apiService.put).toHaveBeenCalledWith(`/pets/${updatedPet.id}`, updatedPet);
    }));
  });
  describe("Matching API", function () {
    it("should handle pet likes", (0, _asyncToGenerator2.default)(function* () {
      var likeData = {
        petId: "1",
        action: "like"
      };
      _apiService.apiService.post.mockResolvedValue({
        data: {
          success: true,
          isMatch: false
        },
        status: 200
      });
      var TestComponent = function TestComponent() {
        var _React$useState7 = _react.default.useState(null),
          _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
          result = _React$useState8[0],
          setResult = _React$useState8[1];
        _react.default.useEffect(function () {
          var likePet = function () {
            var _ref10 = (0, _asyncToGenerator2.default)(function* () {
              try {
                var response = yield _apiService.apiService.post("/matches/like", likeData);
                setResult(response.data);
              } catch (error) {
                _logger.logger.error("Failed to like pet:", {
                  error: error
                });
              }
            });
            return function likePet() {
              return _ref10.apply(this, arguments);
            };
          }();
          likePet();
        }, []);
        if (!result) return null;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "like-result",
          children: result.isMatch ? "Match!" : "Liked"
        });
      };
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render7.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("like-result")).toBeTruthy();
      });
      expect(_apiService.apiService.post).toHaveBeenCalledWith("/matches/like", likeData);
    }));
    it("should handle matches", (0, _asyncToGenerator2.default)(function* () {
      var matchData = {
        petId: "1",
        action: "like"
      };
      _apiService.apiService.post.mockResolvedValue({
        data: {
          success: true,
          isMatch: true,
          matchId: "match-123"
        },
        status: 200
      });
      var TestComponent = function TestComponent() {
        var _React$useState9 = _react.default.useState(null),
          _React$useState0 = (0, _slicedToArray2.default)(_React$useState9, 2),
          result = _React$useState0[0],
          setResult = _React$useState0[1];
        _react.default.useEffect(function () {
          var likePet = function () {
            var _ref12 = (0, _asyncToGenerator2.default)(function* () {
              try {
                var response = yield _apiService.apiService.post("/matches/like", matchData);
                setResult(response.data);
              } catch (error) {
                _logger.logger.error("Failed to like pet:", {
                  error: error
                });
              }
            });
            return function likePet() {
              return _ref12.apply(this, arguments);
            };
          }();
          likePet();
        }, []);
        if (!result) return null;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "match-result",
          children: result.isMatch ? "Match!" : "Liked"
        });
      };
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render8.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("match-result")).toBeTruthy();
      });
    }));
  });
  describe("Chat API", function () {
    it("should fetch chat messages", (0, _asyncToGenerator2.default)(function* () {
      var mockMessages = [{
        id: "1",
        text: "Hello!",
        senderId: "user1",
        timestamp: new Date().toISOString()
      }, {
        id: "2",
        text: "Hi there!",
        senderId: "user2",
        timestamp: new Date().toISOString()
      }];
      _apiService.apiService.get.mockResolvedValue({
        data: mockMessages,
        status: 200
      });
      var TestComponent = function TestComponent() {
        var _React$useState1 = _react.default.useState([]),
          _React$useState10 = (0, _slicedToArray2.default)(_React$useState1, 2),
          messages = _React$useState10[0],
          setMessages = _React$useState10[1];
        _react.default.useEffect(function () {
          var fetchMessages = function () {
            var _ref14 = (0, _asyncToGenerator2.default)(function* () {
              try {
                var response = yield _apiService.apiService.get("/chats/chat-123/messages");
                setMessages(response.data);
              } catch (error) {
                _logger.logger.error("Failed to fetch messages:", {
                  error: error
                });
              }
            });
            return function fetchMessages() {
              return _ref14.apply(this, arguments);
            };
          }();
          fetchMessages();
        }, []);
        return (0, _jsxRuntime.jsx)("div", {
          testID: "messages-list",
          children: messages.map(function (message) {
            return (0, _jsxRuntime.jsx)("div", {
              testID: `message-${message.id}`,
              children: message.text
            }, message.id);
          })
        });
      };
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render9.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("message-1")).toBeTruthy();
        expect(getByTestId("message-2")).toBeTruthy();
      });
      expect(_apiService.apiService.get).toHaveBeenCalledWith("/chats/chat-123/messages");
    }));
    it("should send chat message", (0, _asyncToGenerator2.default)(function* () {
      var messageData = {
        text: "Hello from test!",
        chatId: "chat-123"
      };
      var mockResponse = _objectSpread(_objectSpread({
        id: "3"
      }, messageData), {}, {
        senderId: "user1",
        timestamp: new Date().toISOString()
      });
      _apiService.apiService.post.mockResolvedValue({
        data: mockResponse,
        status: 201
      });
      var TestComponent = function TestComponent() {
        var _React$useState11 = _react.default.useState(null),
          _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
          message = _React$useState12[0],
          setMessage = _React$useState12[1];
        _react.default.useEffect(function () {
          var sendMessage = function () {
            var _ref16 = (0, _asyncToGenerator2.default)(function* () {
              try {
                var response = yield _apiService.apiService.post("/chats/messages", messageData);
                setMessage(response.data);
              } catch (error) {
                _logger.logger.error("Failed to send message:", {
                  error: error
                });
              }
            });
            return function sendMessage() {
              return _ref16.apply(this, arguments);
            };
          }();
          sendMessage();
        }, []);
        if (!message) return null;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "sent-message",
          children: message.text
        });
      };
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render0.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("sent-message")).toBeTruthy();
      });
      expect(_apiService.apiService.post).toHaveBeenCalledWith("/chats/messages", messageData);
    }));
  });
  describe("Error Handling", function () {
    it("should handle network errors", (0, _asyncToGenerator2.default)(function* () {
      _apiService.apiService.get.mockRejectedValue({
        message: "Network Error",
        code: "NETWORK_ERROR"
      });
      var TestComponent = function TestComponent() {
        var _React$useState13 = _react.default.useState(null),
          _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
          error = _React$useState14[0],
          setError = _React$useState14[1];
        _react.default.useEffect(function () {
          var fetchData = function () {
            var _ref18 = (0, _asyncToGenerator2.default)(function* () {
              try {
                yield _apiService.apiService.get("/pets");
              } catch (err) {
                setError(err.message);
              }
            });
            return function fetchData() {
              return _ref18.apply(this, arguments);
            };
          }();
          fetchData();
        }, []);
        if (!error) return null;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "network-error",
          children: error
        });
      };
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render1.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("network-error")).toBeTruthy();
      });
    }));
    it("should handle server errors", (0, _asyncToGenerator2.default)(function* () {
      _apiService.apiService.get.mockRejectedValue({
        response: {
          data: {
            message: "Internal Server Error"
          },
          status: 500
        }
      });
      var TestComponent = function TestComponent() {
        var _React$useState15 = _react.default.useState(null),
          _React$useState16 = (0, _slicedToArray2.default)(_React$useState15, 2),
          error = _React$useState16[0],
          setError = _React$useState16[1];
        _react.default.useEffect(function () {
          var fetchData = function () {
            var _ref20 = (0, _asyncToGenerator2.default)(function* () {
              try {
                yield _apiService.apiService.get("/pets");
              } catch (err) {
                setError(err.response.data.message);
              }
            });
            return function fetchData() {
              return _ref20.apply(this, arguments);
            };
          }();
          fetchData();
        }, []);
        if (!error) return null;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "server-error",
          children: error
        });
      };
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render10.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("server-error")).toBeTruthy();
      });
    }));
    it("should handle timeout errors", (0, _asyncToGenerator2.default)(function* () {
      _apiService.apiService.get.mockRejectedValue({
        message: "Request timeout",
        code: "TIMEOUT"
      });
      var TestComponent = function TestComponent() {
        var _React$useState17 = _react.default.useState(null),
          _React$useState18 = (0, _slicedToArray2.default)(_React$useState17, 2),
          error = _React$useState18[0],
          setError = _React$useState18[1];
        _react.default.useEffect(function () {
          var fetchData = function () {
            var _ref22 = (0, _asyncToGenerator2.default)(function* () {
              try {
                yield _apiService.apiService.get("/pets");
              } catch (err) {
                setError(err.message);
              }
            });
            return function fetchData() {
              return _ref22.apply(this, arguments);
            };
          }();
          fetchData();
        }, []);
        if (!error) return null;
        return (0, _jsxRuntime.jsx)("div", {
          testID: "timeout-error",
          children: error
        });
      };
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(TestComponent, {})
        })),
        getByTestId = _render11.getByTestId;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("timeout-error")).toBeTruthy();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,