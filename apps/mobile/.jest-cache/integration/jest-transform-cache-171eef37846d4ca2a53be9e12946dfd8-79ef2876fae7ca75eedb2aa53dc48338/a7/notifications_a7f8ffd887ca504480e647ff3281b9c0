dc1ab381815053a6d37ed02c6811bc0d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notificationService = exports.initializeNotificationsService = exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var Device = _interopRequireWildcard(require("expo-device"));
var Notifications = _interopRequireWildcard(require("expo-notifications"));
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var _api = require("./api");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
Notifications.setNotificationHandler({
  handleNotification: function handleNotification() {
    return {
      shouldShowAlert: true,
      shouldPlaySound: true,
      shouldSetBadge: true
    };
  }
});
var NotificationService = function () {
  function NotificationService() {
    (0, _classCallCheck2.default)(this, NotificationService);
    this.expoPushToken = null;
    this.notificationListener = null;
    this.responseListener = null;
  }
  return (0, _createClass2.default)(NotificationService, [{
    key: "initialize",
    value: function () {
      var _initialize = (0, _asyncToGenerator2.default)(function* () {
        try {
          if (!Device.isDevice) {
            _core.logger.warn("Must use physical device for Push Notifications");
            return null;
          }
          var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),
            existingStatus = _yield$Notifications$.status;
          var finalStatus = existingStatus;
          if (String(existingStatus) !== "granted") {
            var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),
              status = _yield$Notifications$2.status;
            finalStatus = status;
          }
          if (String(finalStatus) !== "granted") {
            _core.logger.warn("Failed to get push token for push notification!");
            return null;
          }
          var tokenData = yield Notifications.getExpoPushTokenAsync();
          var token = tokenData.data;
          this.expoPushToken = token;
          yield _asyncStorage.default.setItem("expo_push_token", token);
          try {
            var deviceId = yield this.getDeviceId();
            yield this.registerTokenWithBackend(token, deviceId);
          } catch (error) {
            _core.logger.warn("Failed to register push token with backend", {
              error: error
            });
          }
          if (_reactNative.Platform.OS === "android") {
            yield Notifications.setNotificationChannelAsync("default", {
              name: "default",
              importance: Notifications.AndroidImportance.MAX,
              vibrationPattern: [0, 250, 250, 250],
              lightColor: "#FF6B6B"
            });
            yield this.createNotificationChannels();
          }
          this.setupListeners();
          _core.logger.info("Push notifications initialized successfully");
          return token;
        } catch (error) {
          _core.logger.error("Error initializing push notifications", {
            error: error
          });
          return null;
        }
      });
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }()
  }, {
    key: "createNotificationChannels",
    value: function () {
      var _createNotificationChannels = (0, _asyncToGenerator2.default)(function* () {
        var channels = [{
          id: "matches",
          name: "New Matches",
          importance: Notifications.AndroidImportance.HIGH,
          description: "Notifications for new matches",
          sound: "match_sound.wav"
        }, {
          id: "messages",
          name: "Messages",
          importance: Notifications.AndroidImportance.HIGH,
          description: "New message notifications",
          sound: "message_sound.wav"
        }, {
          id: "likes",
          name: "Likes",
          importance: Notifications.AndroidImportance.DEFAULT,
          description: "Someone liked your pet",
          sound: "like_sound.wav"
        }, {
          id: "reminders",
          name: "Reminders",
          importance: Notifications.AndroidImportance.LOW,
          description: "App usage reminders"
        }];
        for (var channel of channels) {
          var _channel$sound;
          yield Notifications.setNotificationChannelAsync(channel.id, {
            name: channel.name,
            importance: channel.importance,
            description: channel.description,
            sound: (_channel$sound = channel.sound) != null ? _channel$sound : undefined,
            vibrationPattern: [0, 250, 250, 250]
          });
        }
      });
      function createNotificationChannels() {
        return _createNotificationChannels.apply(this, arguments);
      }
      return createNotificationChannels;
    }()
  }, {
    key: "setupListeners",
    value: function setupListeners() {
      var _this = this;
      this.notificationListener = Notifications.addNotificationReceivedListener(function (notification) {
        _core.logger.debug("Notification received", {
          notification: notification
        });
        _this.handleNotificationReceived(notification);
      });
      this.responseListener = Notifications.addNotificationResponseReceivedListener(function (response) {
        var data = response.notification.request.content.data;
        _this.handleNotificationResponse(data);
      });
    }
  }, {
    key: "handleNotificationReceived",
    value: function handleNotificationReceived(notification) {
      var data = notification.request.content.data;
      var notificationType = data && typeof data["type"] === "string" ? data["type"] : "";
      switch (notificationType) {
        case "match":
          break;
        case "message":
          break;
        case "like":
          break;
      }
    }
  }, {
    key: "handleNotificationResponse",
    value: function handleNotificationResponse(data) {
      var notificationType = typeof data["type"] === "string" ? data["type"] : "";
      var matchId = typeof data["matchId"] === "string" ? data["matchId"] : "";
      switch (notificationType) {
        case "match":
          break;
        case "message":
          if (matchId !== "") {}
          break;
        case "like":
          break;
        case "reminder":
          break;
      }
    }
  }, {
    key: "getSoundForType",
    value: function getSoundForType(type) {
      switch (type) {
        case "match":
          return "match_sound.wav";
        case "message":
          return "message_sound.wav";
        case "like":
        case "super_like":
          return "like_sound.wav";
        default:
          return "default_sound.wav";
      }
    }
  }, {
    key: "sendLocalNotification",
    value: function () {
      var _sendLocalNotification = (0, _asyncToGenerator2.default)(function* (notificationData) {
        try {
          var _notificationData$dat;
          var sound = this.getSoundForType(notificationData.type);
          var trigger = undefined;
          if (notificationData.scheduledFor !== undefined) {
            trigger = {
              type: "date",
              date: notificationData.scheduledFor
            };
          }
          var identifier = yield Notifications.scheduleNotificationAsync({
            content: {
              title: notificationData.title,
              body: notificationData.body,
              data: (_notificationData$dat = notificationData.data) != null ? _notificationData$dat : {},
              sound: sound
            },
            trigger: trigger
          });
          return identifier;
        } catch (error) {
          _core.logger.error("Error sending local notification", {
            error: error
          });
          return null;
        }
      });
      function sendLocalNotification(_x) {
        return _sendLocalNotification.apply(this, arguments);
      }
      return sendLocalNotification;
    }()
  }, {
    key: "getBadgeCount",
    value: function () {
      var _getBadgeCount = (0, _asyncToGenerator2.default)(function* () {
        try {
          var count = yield Notifications.getBadgeCountAsync();
          return count;
        } catch (error) {
          _core.logger.error("Error getting badge count", {
            error: error
          });
          return 0;
        }
      });
      function getBadgeCount() {
        return _getBadgeCount.apply(this, arguments);
      }
      return getBadgeCount;
    }()
  }, {
    key: "setBadgeCount",
    value: function () {
      var _setBadgeCount = (0, _asyncToGenerator2.default)(function* (count) {
        try {
          yield Notifications.setBadgeCountAsync(count);
          return true;
        } catch (error) {
          _core.logger.error("Error setting badge count", {
            error: error,
            count: count
          });
          return false;
        }
      });
      function setBadgeCount(_x2) {
        return _setBadgeCount.apply(this, arguments);
      }
      return setBadgeCount;
    }()
  }, {
    key: "clearBadge",
    value: function () {
      var _clearBadge = (0, _asyncToGenerator2.default)(function* () {
        return yield this.setBadgeCount(0);
      });
      function clearBadge() {
        return _clearBadge.apply(this, arguments);
      }
      return clearBadge;
    }()
  }, {
    key: "cancelNotification",
    value: function () {
      var _cancelNotification = (0, _asyncToGenerator2.default)(function* (identifier) {
        try {
          yield Notifications.cancelScheduledNotificationAsync(identifier);
          return true;
        } catch (error) {
          _core.logger.error("Error canceling notification", {
            error: error,
            identifier: identifier
          });
          return false;
        }
      });
      function cancelNotification(_x3) {
        return _cancelNotification.apply(this, arguments);
      }
      return cancelNotification;
    }()
  }, {
    key: "cancelAllNotifications",
    value: function () {
      var _cancelAllNotifications = (0, _asyncToGenerator2.default)(function* () {
        try {
          yield Notifications.cancelAllScheduledNotificationsAsync();
          return true;
        } catch (error) {
          _core.logger.error("Error canceling all notifications", {
            error: error
          });
          return false;
        }
      });
      function cancelAllNotifications() {
        return _cancelAllNotifications.apply(this, arguments);
      }
      return cancelAllNotifications;
    }()
  }, {
    key: "sendMatchNotification",
    value: function () {
      var _sendMatchNotification = (0, _asyncToGenerator2.default)(function* (petName, petPhoto) {
        return this.sendLocalNotification({
          type: "match",
          title: "New Match! 🎉",
          body: `You matched with ${petName}!`,
          data: {
            type: "match",
            petName: petName,
            petPhoto: petPhoto
          }
        });
      });
      function sendMatchNotification(_x4, _x5) {
        return _sendMatchNotification.apply(this, arguments);
      }
      return sendMatchNotification;
    }()
  }, {
    key: "sendMessageNotification",
    value: function () {
      var _sendMessageNotification = (0, _asyncToGenerator2.default)(function* (senderName, message, matchId) {
        return this.sendLocalNotification({
          type: "message",
          title: `Message from ${senderName}`,
          body: message.length > 50 ? `${message.substring(0, 50)}...` : message,
          data: {
            type: "message",
            senderName: senderName,
            message: message,
            matchId: matchId
          }
        });
      });
      function sendMessageNotification(_x6, _x7, _x8) {
        return _sendMessageNotification.apply(this, arguments);
      }
      return sendMessageNotification;
    }()
  }, {
    key: "sendLikeNotification",
    value: function () {
      var _sendLikeNotification = (0, _asyncToGenerator2.default)(function* (petName) {
        var isSuper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return this.sendLocalNotification({
          type: isSuper ? "super_like" : "like",
          title: isSuper ? "Super Like! ⭐" : "New Like! ❤️",
          body: `${petName} ${isSuper ? "super liked" : "liked"} your pet!`,
          data: {
            type: isSuper ? "super_like" : "like",
            petName: petName
          }
        });
      });
      function sendLikeNotification(_x9) {
        return _sendLikeNotification.apply(this, arguments);
      }
      return sendLikeNotification;
    }()
  }, {
    key: "scheduleReminderNotification",
    value: function () {
      var _scheduleReminderNotification = (0, _asyncToGenerator2.default)(function* (hours) {
        var scheduledTime = new Date();
        scheduledTime.setHours(scheduledTime.getHours() + hours);
        return this.sendLocalNotification({
          type: "reminder",
          title: "Missing Your Furry Friends!",
          body: `It's been ${String(hours)} hours since your last visit. Check out new potential matches!`,
          data: {
            type: "reminder"
          },
          scheduledFor: scheduledTime
        });
      });
      function scheduleReminderNotification(_x0) {
        return _scheduleReminderNotification.apply(this, arguments);
      }
      return scheduleReminderNotification;
    }()
  }, {
    key: "getExpoPushToken",
    value: function getExpoPushToken() {
      return this.expoPushToken;
    }
  }, {
    key: "getDeviceId",
    value: function () {
      var _getDeviceId = (0, _asyncToGenerator2.default)(function* () {
        var deviceId = yield _asyncStorage.default.getItem("device_id");
        if (!deviceId) {
          deviceId = `mobile_${String(Date.now())}_${Math.random().toString(36).substring(2, 9)}`;
          yield _asyncStorage.default.setItem("device_id", deviceId);
        }
        return deviceId;
      });
      function getDeviceId() {
        return _getDeviceId.apply(this, arguments);
      }
      return getDeviceId;
    }()
  }, {
    key: "registerTokenWithBackend",
    value: function () {
      var _registerTokenWithBackend = (0, _asyncToGenerator2.default)(function* (token, deviceId) {
        try {
          yield _api.api.request("/notifications/register-token", {
            method: "POST",
            body: {
              token: token,
              platform: _reactNative.Platform.OS,
              deviceId: deviceId
            }
          });
          _core.logger.info("Push token registered with backend", {
            deviceId: deviceId
          });
        } catch (error) {
          _core.logger.error("Failed to register push token with backend", {
            error: error
          });
          throw error;
        }
      });
      function registerTokenWithBackend(_x1, _x10) {
        return _registerTokenWithBackend.apply(this, arguments);
      }
      return registerTokenWithBackend;
    }()
  }, {
    key: "unregisterToken",
    value: function () {
      var _unregisterToken = (0, _asyncToGenerator2.default)(function* (deviceId) {
        try {
          var id = deviceId || (yield this.getDeviceId());
          yield _api.api.request("/notifications/unregister-token", {
            method: "DELETE",
            body: {
              deviceId: id
            }
          });
          _core.logger.info("Push token unregistered from backend", {
            deviceId: id
          });
          return true;
        } catch (error) {
          _core.logger.error("Failed to unregister push token", {
            error: error
          });
          return false;
        }
      });
      function unregisterToken(_x11) {
        return _unregisterToken.apply(this, arguments);
      }
      return unregisterToken;
    }()
  }, {
    key: "cleanup",
    value: function () {
      var _cleanup = (0, _asyncToGenerator2.default)(function* () {
        if (this.expoPushToken) {
          yield this.unregisterToken().catch(function () {});
        }
        if (this.notificationListener !== null) {
          this.notificationListener.remove();
          this.notificationListener = null;
        }
        if (this.responseListener !== null) {
          this.responseListener.remove();
          this.responseListener = null;
        }
      });
      function cleanup() {
        return _cleanup.apply(this, arguments);
      }
      return cleanup;
    }()
  }]);
}();
var notificationService = exports.notificationService = new NotificationService();
var initializeNotificationsService = exports.initializeNotificationsService = function initializeNotificationsService() {
  return notificationService.initialize();
};
var _default = exports.default = notificationService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,