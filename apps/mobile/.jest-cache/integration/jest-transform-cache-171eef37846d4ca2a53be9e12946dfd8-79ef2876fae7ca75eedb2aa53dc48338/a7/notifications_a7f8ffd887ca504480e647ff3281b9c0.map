{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","Device","_interopRequireWildcard","Notifications","_reactNative","_core","_api","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","NotificationService","_classCallCheck2","expoPushToken","notificationListener","responseListener","_createClass2","key","value","_initialize","_asyncToGenerator2","isDevice","logger","warn","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","String","_yield$Notifications$2","requestPermissionsAsync","tokenData","getExpoPushTokenAsync","token","data","AsyncStorage","setItem","deviceId","getDeviceId","registerTokenWithBackend","error","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","createNotificationChannels","setupListeners","info","initialize","apply","arguments","_createNotificationChannels","channels","id","HIGH","description","sound","DEFAULT","LOW","channel","_channel$sound","undefined","_this","addNotificationReceivedListener","notification","debug","handleNotificationReceived","addNotificationResponseReceivedListener","response","request","content","handleNotificationResponse","notificationType","matchId","getSoundForType","type","_sendLocalNotification","notificationData","_notificationData$dat","trigger","scheduledFor","date","identifier","scheduleNotificationAsync","title","body","sendLocalNotification","_x","_getBadgeCount","count","getBadgeCountAsync","getBadgeCount","_setBadgeCount","setBadgeCountAsync","setBadgeCount","_x2","_clearBadge","clearBadge","_cancelNotification","cancelScheduledNotificationAsync","cancelNotification","_x3","_cancelAllNotifications","cancelAllScheduledNotificationsAsync","cancelAllNotifications","_sendMatchNotification","petName","petPhoto","sendMatchNotification","_x4","_x5","_sendMessageNotification","senderName","message","length","substring","sendMessageNotification","_x6","_x7","_x8","_sendLikeNotification","isSuper","sendLikeNotification","_x9","_scheduleReminderNotification","hours","scheduledTime","Date","setHours","getHours","scheduleReminderNotification","_x0","getExpoPushToken","_getDeviceId","getItem","now","Math","random","toString","_registerTokenWithBackend","api","method","platform","_x1","_x10","_unregisterToken","unregisterToken","_x11","_cleanup","catch","remove","cleanup","notificationService","exports","initializeNotificationsService","_default"],"sources":["notifications.ts"],"sourcesContent":["/**\n * Push Notifications Service for PawfectMatch Mobile\n * Professional implementation with Expo Notifications\n * This is the PRIMARY implementation - pushNotificationService.ts is deprecated\n */\n\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport { Platform } from \"react-native\";\nimport { logger } from \"@pawfectmatch/core\";\nimport { api } from \"./api\";\n\n// Configure notification behavior\nNotifications.setNotificationHandler({\n  handleNotification: () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\n\nexport interface NotificationData {\n  type: \"match\" | \"message\" | \"like\" | \"super_like\" | \"premium\" | \"reminder\";\n  title: string;\n  body: string;\n  data?: Record<string, unknown>;\n  scheduledFor?: Date;\n}\n\nclass NotificationService {\n  private expoPushToken: string | null = null;\n  private notificationListener: Notifications.Subscription | null = null;\n  private responseListener: Notifications.Subscription | null = null;\n\n  async initialize(): Promise<string | null> {\n    try {\n      // Check if device supports notifications\n      if (!Device.isDevice) {\n        logger.warn(\"Must use physical device for Push Notifications\");\n        return null;\n      }\n\n      // Get existing permission status\n      const { status: existingStatus } =\n        await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n\n      // Request permission if not granted\n      if (String(existingStatus) !== \"granted\") {\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n\n      if (String(finalStatus) !== \"granted\") {\n        logger.warn(\"Failed to get push token for push notification!\");\n        return null;\n      }\n\n      // Get the token\n      const tokenData = await Notifications.getExpoPushTokenAsync();\n      const token = tokenData.data;\n      this.expoPushToken = token;\n\n      // Store token locally\n      await AsyncStorage.setItem(\"expo_push_token\", token);\n\n      // Register token with backend\n      try {\n        const deviceId = await this.getDeviceId();\n        await this.registerTokenWithBackend(token, deviceId);\n      } catch (error) {\n        logger.warn(\"Failed to register push token with backend\", { error });\n        // Non-critical - continue without backend registration\n      }\n\n      // Configure notification channel for Android\n      if (Platform.OS === \"android\") {\n        await Notifications.setNotificationChannelAsync(\"default\", {\n          name: \"default\",\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: \"#FF6B6B\",\n        });\n\n        // Create specific channels for different notification types\n        await this.createNotificationChannels();\n      }\n\n      // Set up listeners\n      this.setupListeners();\n\n      logger.info(\"Push notifications initialized successfully\");\n      return token;\n    } catch (error) {\n      logger.error(\"Error initializing push notifications\", { error });\n      return null;\n    }\n  }\n\n  private async createNotificationChannels() {\n    const channels = [\n      {\n        id: \"matches\",\n        name: \"New Matches\",\n        importance: Notifications.AndroidImportance.HIGH,\n        description: \"Notifications for new matches\",\n        sound: \"match_sound.wav\",\n      },\n      {\n        id: \"messages\",\n        name: \"Messages\",\n        importance: Notifications.AndroidImportance.HIGH,\n        description: \"New message notifications\",\n        sound: \"message_sound.wav\",\n      },\n      {\n        id: \"likes\",\n        name: \"Likes\",\n        importance: Notifications.AndroidImportance.DEFAULT,\n        description: \"Someone liked your pet\",\n        sound: \"like_sound.wav\",\n      },\n      {\n        id: \"reminders\",\n        name: \"Reminders\",\n        importance: Notifications.AndroidImportance.LOW,\n        description: \"App usage reminders\",\n      },\n    ];\n\n    for (const channel of channels) {\n      await Notifications.setNotificationChannelAsync(channel.id, {\n        name: channel.name,\n        importance: channel.importance,\n        description: channel.description,\n        sound: channel.sound ?? undefined,\n        vibrationPattern: [0, 250, 250, 250],\n      });\n    }\n  }\n\n  private setupListeners() {\n    this.notificationListener = Notifications.addNotificationReceivedListener(\n      (notification: Notifications.Notification) => {\n        logger.debug(\"Notification received\", { notification });\n        this.handleNotificationReceived(notification);\n      },\n    );\n\n    this.responseListener =\n      Notifications.addNotificationResponseReceivedListener(\n        (response: Notifications.NotificationResponse) => {\n          const { data } = response.notification.request.content;\n          this.handleNotificationResponse(data as Record<string, unknown>);\n        },\n      );\n  }\n\n  private handleNotificationReceived(notification: Notifications.Notification) {\n    const { data } = notification.request.content;\n\n    // Handle different notification types with safe type checking\n    const notificationType =\n      (data && typeof data[\"type\"] === \"string\") ? data[\"type\"] : \"\";\n\n    switch (notificationType) {\n      case \"match\":\n        // Could trigger a celebration animation\n        break;\n      case \"message\":\n        // Could update unread count\n        break;\n      case \"like\":\n        // Could show a brief toast\n        break;\n    }\n  }\n\n  private handleNotificationResponse(data: Record<string, unknown>) {\n    // Navigate to appropriate screen based on notification type\n    const notificationType =\n      typeof data[\"type\"] === \"string\" ? data[\"type\"] : \"\";\n    const matchId = typeof data[\"matchId\"] === \"string\" ? data[\"matchId\"] : \"\";\n\n    switch (notificationType) {\n      case \"match\":\n        // Navigate to matches screen\n        break;\n      case \"message\":\n        // Navigate to specific chat\n        if (matchId !== \"\") {\n          // Navigate to specific chat with matchId\n        }\n        break;\n      case \"like\":\n        // Navigate to likes screen\n        break;\n      case \"reminder\":\n        // Navigate to home screen\n        break;\n    }\n  }\n\n  // Helper to get sound for notification type\n  private getSoundForType(type: string): string {\n    switch (type) {\n      case \"match\":\n        return \"match_sound.wav\";\n      case \"message\":\n        return \"message_sound.wav\";\n      case \"like\":\n      case \"super_like\":\n        return \"like_sound.wav\";\n      default:\n        return \"default_sound.wav\";\n    }\n  }\n\n  // Helper to get notification channel for type\n  // private getChannelForType(type: string): string {\n  //   switch (type) {\n  //     case 'match':\n  //       return 'matches';\n  //     case 'message':\n  //       return 'messages';\n  //     case 'like':\n  //     case 'super_like':\n  //       return 'likes';\n  //     case 'reminder':\n  //       return 'reminders';\n  //     default:\n  //       return 'default';\n  //   }\n  // }\n\n  // Send a local notification\n  async sendLocalNotification(\n    notificationData: NotificationData,\n  ): Promise<string | null> {\n    try {\n      // Get sound and channel based on notification type\n      const sound = this.getSoundForType(notificationData.type);\n      // const channelId = Platform.OS === 'android' ? this.getChannelForType(notificationData.type) : undefined;\n\n      // Configure trigger (immediate or scheduled)\n      let trigger: Notifications.NotificationTriggerInput | undefined = undefined;\n      if (notificationData.scheduledFor !== undefined) {\n        trigger = {\n          type: \"date\",\n          date: notificationData.scheduledFor,\n        };\n      }\n\n      // Schedule the notification\n      const identifier = await Notifications.scheduleNotificationAsync({\n        content: {\n          title: notificationData.title,\n          body: notificationData.body,\n          data: notificationData.data ?? {},\n          sound,\n        },\n        trigger,\n      });\n\n      return identifier;\n    } catch (error) {\n      logger.error(\"Error sending local notification\", { error });\n      return null;\n    }\n  }\n\n  // Get current badge count\n  async getBadgeCount(): Promise<number> {\n    try {\n      const count = await Notifications.getBadgeCountAsync();\n      return count;\n    } catch (error) {\n      logger.error(\"Error getting badge count\", { error });\n      return 0;\n    }\n  }\n\n  // Set badge count\n  async setBadgeCount(count: number): Promise<boolean> {\n    try {\n      await Notifications.setBadgeCountAsync(count);\n      return true;\n    } catch (error) {\n      logger.error(\"Error setting badge count\", { error, count });\n      return false;\n    }\n  }\n\n  // Clear badge count\n  async clearBadge(): Promise<boolean> {\n    return await this.setBadgeCount(0);\n  }\n\n  // Cancel a specific notification\n  async cancelNotification(identifier: string): Promise<boolean> {\n    try {\n      await Notifications.cancelScheduledNotificationAsync(identifier);\n      return true;\n    } catch (error) {\n      logger.error(\"Error canceling notification\", { error, identifier });\n      return false;\n    }\n  }\n\n  // Cancel all notifications\n  async cancelAllNotifications(): Promise<boolean> {\n    try {\n      await Notifications.cancelAllScheduledNotificationsAsync();\n      return true;\n    } catch (error) {\n      logger.error(\"Error canceling all notifications\", { error });\n      return false;\n    }\n  }\n\n  // Send match notification\n  async sendMatchNotification(\n    petName: string,\n    petPhoto: string,\n  ): Promise<string | null> {\n    return this.sendLocalNotification({\n      type: \"match\",\n      title: \"New Match! 🎉\",\n      body: `You matched with ${petName}!`,\n      data: {\n        type: \"match\",\n        petName,\n        petPhoto,\n      },\n    });\n  }\n\n  // Send message notification\n  async sendMessageNotification(\n    senderName: string,\n    message: string,\n    matchId: string,\n  ): Promise<string | null> {\n    return this.sendLocalNotification({\n      type: \"message\",\n      title: `Message from ${senderName}`,\n      body: message.length > 50 ? `${message.substring(0, 50)}...` : message,\n      data: {\n        type: \"message\",\n        senderName,\n        message,\n        matchId,\n      },\n    });\n  }\n\n  // Send like notification\n  async sendLikeNotification(\n    petName: string,\n    isSuper = false,\n  ): Promise<string | null> {\n    return this.sendLocalNotification({\n      type: isSuper ? \"super_like\" : \"like\",\n      title: isSuper ? \"Super Like! ⭐\" : \"New Like! ❤️\",\n      body: `${petName} ${isSuper ? \"super liked\" : \"liked\"} your pet!`,\n      data: {\n        type: isSuper ? \"super_like\" : \"like\",\n        petName,\n      },\n    });\n  }\n\n  // Schedule a reminder notification\n  async scheduleReminderNotification(hours: number): Promise<string | null> {\n    const scheduledTime = new Date();\n    scheduledTime.setHours(scheduledTime.getHours() + hours);\n\n    return this.sendLocalNotification({\n      type: \"reminder\",\n      title: \"Missing Your Furry Friends!\",\n      body: `It's been ${String(hours)} hours since your last visit. Check out new potential matches!`,\n      data: {\n        type: \"reminder\",\n      },\n      scheduledFor: scheduledTime,\n    });\n  }\n\n  // Get current token\n  getExpoPushToken(): string | null {\n    return this.expoPushToken;\n  }\n\n  // Get or create device ID\n  private async getDeviceId(): Promise<string> {\n    let deviceId = await AsyncStorage.getItem(\"device_id\");\n    if (!deviceId) {\n      deviceId = `mobile_${String(Date.now())}_${Math.random().toString(36).substring(2, 9)}`;\n      await AsyncStorage.setItem(\"device_id\", deviceId);\n    }\n    return deviceId;\n  }\n\n  // Register token with backend\n  private async registerTokenWithBackend(\n    token: string,\n    deviceId: string,\n  ): Promise<void> {\n    try {\n      await api.request(\"/notifications/register-token\", {\n        method: \"POST\",\n        body: {\n          token,\n          platform: Platform.OS,\n          deviceId,\n        },\n      });\n      logger.info(\"Push token registered with backend\", { deviceId });\n    } catch (error) {\n      logger.error(\"Failed to register push token with backend\", { error });\n      throw error;\n    }\n  }\n\n  // Unregister token from backend\n  async unregisterToken(deviceId?: string): Promise<boolean> {\n    try {\n      const id = deviceId || (await this.getDeviceId());\n      await api.request(\"/notifications/unregister-token\", {\n        method: \"DELETE\",\n        body: { deviceId: id },\n      });\n      logger.info(\"Push token unregistered from backend\", { deviceId: id });\n      return true;\n    } catch (error) {\n      logger.error(\"Failed to unregister push token\", { error });\n      return false;\n    }\n  }\n\n  // Clean up resources\n  async cleanup(): Promise<void> {\n    // Unregister from backend\n    if (this.expoPushToken) {\n      await this.unregisterToken().catch(() => {\n        // Non-critical\n      });\n    }\n\n    // Remove listeners\n    if (this.notificationListener !== null) {\n      this.notificationListener.remove();\n      this.notificationListener = null;\n    }\n\n    if (this.responseListener !== null) {\n      this.responseListener.remove();\n      this.responseListener = null;\n    }\n  }\n\n  // ===== SECURITY CONTROLS =====\n}\n\n// Export a singleton instance\nexport const notificationService = new NotificationService();\nexport const initializeNotificationsService = () =>\n  notificationService.initialize();\nexport default notificationService;\n"],"mappings":"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","ignoreList":[]}