3ed31e5b9cd6973817034048efaf548d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLightTheme = exports.getDarkTheme = void 0;
exports.resolveTheme = resolveTheme;
var _unifiedTheme = require("./unified-theme");
function getContrastText(hex) {
  try {
    var normalized = hex.replace('#', '');
    var expanded = normalized.length === 3 ? `${normalized[0]}${normalized[0]}${normalized[1]}${normalized[1]}${normalized[2]}${normalized[2]}` : normalized;
    if (expanded.length < 6) return '#FFFFFF';
    var r = parseInt(expanded.slice(0, 2), 16);
    var g = parseInt(expanded.slice(2, 4), 16);
    var b = parseInt(expanded.slice(4, 6), 16);
    var getLuminance = function getLuminance(val) {
      var s = val / 255;
      return s <= 0.03928 ? s / 12.92 : Math.pow((s + 0.055) / 1.055, 2.4);
    };
    var L = 0.2126 * getLuminance(r) + 0.7152 * getLuminance(g) + 0.0722 * getLuminance(b);
    return L > 0.55 ? '#111827' : '#FFFFFF';
  } catch (_unused) {
    return '#FFFFFF';
  }
}
function resolveTheme(base) {
  var _base$colors$secondar, _base$colors, _base$colors$secondar2;
  var primary = base.colors.primary[500];
  return {
    scheme: base === _unifiedTheme.DarkTheme ? 'dark' : 'light',
    colors: {
      primary: primary,
      primaryText: getContrastText(primary),
      secondary: (_base$colors$secondar = (_base$colors = base.colors) == null ? void 0 : (_base$colors$secondar2 = _base$colors.secondary) == null ? void 0 : _base$colors$secondar2[500]) != null ? _base$colors$secondar : base.colors.primary[600],
      text: base.colors.text.primary,
      textMuted: base.colors.text.secondary,
      textInverse: base.colors.text.inverse,
      bg: base.colors.background.primary,
      bgAlt: base.colors.background.secondary,
      bgElevated: base.colors.background.tertiary,
      border: base.colors.border.medium,
      success: base.colors.status.success,
      warning: base.colors.status.warning,
      danger: base.colors.status.error,
      info: base.colors.status.info,
      primaryScale: base.colors.primary,
      neutral: base.colors.neutral
    },
    radius: base.borderRadius,
    typography: base.typography,
    spacing: base.spacing,
    shadows: base.shadows.depth,
    motion: base.motion,
    zIndex: {
      hide: -1,
      base: 0,
      docked: 10,
      dropdown: 1000,
      sticky: 1100,
      banner: 1200,
      overlay: 1300,
      modal: 1400,
      popover: 1500,
      skipLink: 1600,
      toast: 1700,
      tooltip: 1800
    },
    isDark: base === _unifiedTheme.DarkTheme
  };
}
var getLightTheme = exports.getLightTheme = function getLightTheme() {
  return resolveTheme(_unifiedTheme.Theme);
};
var getDarkTheme = exports.getDarkTheme = function getDarkTheme() {
  return resolveTheme(_unifiedTheme.DarkTheme);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,