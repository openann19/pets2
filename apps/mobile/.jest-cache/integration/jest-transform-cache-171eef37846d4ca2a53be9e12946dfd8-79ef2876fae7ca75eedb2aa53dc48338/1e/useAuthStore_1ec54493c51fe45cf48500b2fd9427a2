866f93c7fe7fdced4acd1b7bd24e8287
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAuthStore = void 0;
var zustand_1 = require("zustand");
var middleware_1 = require("zustand/middleware");
var immer_1 = require("zustand/middleware/immer");
exports.useAuthStore = (0, zustand_1.create)()((0, middleware_1.persist)((0, immer_1.immer)(function (set) {
  return {
    user: null,
    accessToken: null,
    refreshToken: null,
    isLoading: false,
    error: null,
    isAuthenticated: false,
    isOnboarded: false,
    setUser: function setUser(user) {
      set(function (state) {
        state.user = user;
        state.isAuthenticated = user !== null;
        return state;
      });
    },
    setTokens: function setTokens(accessToken, refreshToken) {
      set(function (state) {
        state.accessToken = accessToken;
        state.refreshToken = refreshToken;
        state.isAuthenticated = true;
        return state;
      });
    },
    clearTokens: function clearTokens() {
      set(function (state) {
        state.accessToken = null;
        state.refreshToken = null;
        state.isAuthenticated = false;
        return state;
      });
    },
    logout: function logout() {
      set(function (state) {
        state.user = null;
        state.accessToken = null;
        state.refreshToken = null;
        state.isAuthenticated = false;
        return state;
      });
    },
    setIsLoading: function setIsLoading(isLoading) {
      set(function (state) {
        state.isLoading = isLoading;
        return state;
      });
    },
    setError: function setError(error) {
      set(function (state) {
        state.error = error;
        return state;
      });
    },
    setIsOnboarded: function setIsOnboarded(isOnboarded) {
      set(function (state) {
        state.isOnboarded = isOnboarded;
        return state;
      });
    }
  };
}), {
  name: 'auth-storage',
  partialize: function partialize(state) {
    return {
      accessToken: state.accessToken,
      refreshToken: state.refreshToken,
      user: state.user
    };
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVzZUF1dGhTdG9yZSIsInp1c3RhbmRfMSIsInJlcXVpcmUiLCJtaWRkbGV3YXJlXzEiLCJpbW1lcl8xIiwiY3JlYXRlIiwicGVyc2lzdCIsImltbWVyIiwic2V0IiwidXNlciIsImFjY2Vzc1Rva2VuIiwicmVmcmVzaFRva2VuIiwiaXNMb2FkaW5nIiwiZXJyb3IiLCJpc0F1dGhlbnRpY2F0ZWQiLCJpc09uYm9hcmRlZCIsInNldFVzZXIiLCJzdGF0ZSIsInNldFRva2VucyIsImNsZWFyVG9rZW5zIiwibG9nb3V0Iiwic2V0SXNMb2FkaW5nIiwic2V0RXJyb3IiLCJzZXRJc09uYm9hcmRlZCIsIm5hbWUiLCJwYXJ0aWFsaXplIl0sInNvdXJjZXMiOlsidXNlQXV0aFN0b3JlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VBdXRoU3RvcmUgPSB2b2lkIDA7XG5jb25zdCB6dXN0YW5kXzEgPSByZXF1aXJlKFwienVzdGFuZFwiKTtcbmNvbnN0IG1pZGRsZXdhcmVfMSA9IHJlcXVpcmUoXCJ6dXN0YW5kL21pZGRsZXdhcmVcIik7XG5jb25zdCBpbW1lcl8xID0gcmVxdWlyZShcInp1c3RhbmQvbWlkZGxld2FyZS9pbW1lclwiKTtcbi8qKlxuICogR2xvYmFsIGF1dGhlbnRpY2F0aW9uIHN0b3JlIHVzaW5nIFp1c3RhbmRcbiAqIFBlcnNpc3RzIHRva2VucyBhbmQgdXNlciBkYXRhIHRvIGxvY2FsIHN0b3JhZ2VcbiAqL1xuZXhwb3J0cy51c2VBdXRoU3RvcmUgPSAoMCwgenVzdGFuZF8xLmNyZWF0ZSkoKSgoMCwgbWlkZGxld2FyZV8xLnBlcnNpc3QpKCgwLCBpbW1lcl8xLmltbWVyKSgoc2V0KSA9PiAoe1xuICAgIHVzZXI6IG51bGwsXG4gICAgYWNjZXNzVG9rZW46IG51bGwsXG4gICAgcmVmcmVzaFRva2VuOiBudWxsLFxuICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgZXJyb3I6IG51bGwsXG4gICAgaXNBdXRoZW50aWNhdGVkOiBmYWxzZSxcbiAgICBpc09uYm9hcmRlZDogZmFsc2UsXG4gICAgLy8gVXBkYXRlIHVzZXIgZGF0YVxuICAgIHNldFVzZXI6ICh1c2VyKSA9PiB7XG4gICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIHN0YXRlLnVzZXIgPSB1c2VyO1xuICAgICAgICAgICAgc3RhdGUuaXNBdXRoZW50aWNhdGVkID0gdXNlciAhPT0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyBTZXQgdG9rZW5zIGFmdGVyIHN1Y2Nlc3NmdWwgbG9naW4vcmVnaXN0cmF0aW9uXG4gICAgc2V0VG9rZW5zOiAoYWNjZXNzVG9rZW4sIHJlZnJlc2hUb2tlbikgPT4ge1xuICAgICAgICBzZXQoKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5hY2Nlc3NUb2tlbiA9IGFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgc3RhdGUucmVmcmVzaFRva2VuID0gcmVmcmVzaFRva2VuO1xuICAgICAgICAgICAgc3RhdGUuaXNBdXRoZW50aWNhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyBDbGVhciB0b2tlbnMgb24gbG9nb3V0XG4gICAgY2xlYXJUb2tlbnM6ICgpID0+IHtcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgc3RhdGUuYWNjZXNzVG9rZW4gPSBudWxsO1xuICAgICAgICAgICAgc3RhdGUucmVmcmVzaFRva2VuID0gbnVsbDtcbiAgICAgICAgICAgIHN0YXRlLmlzQXV0aGVudGljYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8vIEZ1bGwgbG9nb3V0XG4gICAgbG9nb3V0OiAoKSA9PiB7XG4gICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIHN0YXRlLnVzZXIgPSBudWxsO1xuICAgICAgICAgICAgc3RhdGUuYWNjZXNzVG9rZW4gPSBudWxsO1xuICAgICAgICAgICAgc3RhdGUucmVmcmVzaFRva2VuID0gbnVsbDtcbiAgICAgICAgICAgIHN0YXRlLmlzQXV0aGVudGljYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8vIFNldCBsb2FkaW5nIHN0YXRlXG4gICAgc2V0SXNMb2FkaW5nOiAoaXNMb2FkaW5nKSA9PiB7XG4gICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIHN0YXRlLmlzTG9hZGluZyA9IGlzTG9hZGluZztcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyBTZXQgZXJyb3IgbWVzc2FnZVxuICAgIHNldEVycm9yOiAoZXJyb3IpID0+IHtcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgc3RhdGUuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyBTZXQgb25ib2FyZGluZyBzdGF0ZVxuICAgIHNldElzT25ib2FyZGVkOiAoaXNPbmJvYXJkZWQpID0+IHtcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgc3RhdGUuaXNPbmJvYXJkZWQgPSBpc09uYm9hcmRlZDtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgfSxcbn0pKSwge1xuICAgIG5hbWU6ICdhdXRoLXN0b3JhZ2UnLFxuICAgIHBhcnRpYWxpemU6IChzdGF0ZSkgPT4gKHtcbiAgICAgICAgYWNjZXNzVG9rZW46IHN0YXRlLmFjY2Vzc1Rva2VuLFxuICAgICAgICByZWZyZXNoVG9rZW46IHN0YXRlLnJlZnJlc2hUb2tlbixcbiAgICAgICAgdXNlcjogc3RhdGUudXNlclxuICAgIH0pLFxufSkpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFDN0RELE9BQU8sQ0FBQ0UsWUFBWSxHQUFHLEtBQUssQ0FBQztBQUM3QixJQUFNQyxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDcEMsSUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDbEQsSUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsMEJBQTBCLENBQUM7QUFLbkRKLE9BQU8sQ0FBQ0UsWUFBWSxHQUFHLENBQUMsQ0FBQyxFQUFFQyxTQUFTLENBQUNJLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUVGLFlBQVksQ0FBQ0csT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFRixPQUFPLENBQUNHLEtBQUssRUFBRSxVQUFDQyxHQUFHO0VBQUEsT0FBTTtJQUNsR0MsSUFBSSxFQUFFLElBQUk7SUFDVkMsV0FBVyxFQUFFLElBQUk7SUFDakJDLFlBQVksRUFBRSxJQUFJO0lBQ2xCQyxTQUFTLEVBQUUsS0FBSztJQUNoQkMsS0FBSyxFQUFFLElBQUk7SUFDWEMsZUFBZSxFQUFFLEtBQUs7SUFDdEJDLFdBQVcsRUFBRSxLQUFLO0lBRWxCQyxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBR1AsSUFBSSxFQUFLO01BQ2ZELEdBQUcsQ0FBQyxVQUFDUyxLQUFLLEVBQUs7UUFDWEEsS0FBSyxDQUFDUixJQUFJLEdBQUdBLElBQUk7UUFDakJRLEtBQUssQ0FBQ0gsZUFBZSxHQUFHTCxJQUFJLEtBQUssSUFBSTtRQUNyQyxPQUFPUSxLQUFLO01BQ2hCLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFREMsU0FBUyxFQUFFLFNBQVhBLFNBQVNBLENBQUdSLFdBQVcsRUFBRUMsWUFBWSxFQUFLO01BQ3RDSCxHQUFHLENBQUMsVUFBQ1MsS0FBSyxFQUFLO1FBQ1hBLEtBQUssQ0FBQ1AsV0FBVyxHQUFHQSxXQUFXO1FBQy9CTyxLQUFLLENBQUNOLFlBQVksR0FBR0EsWUFBWTtRQUNqQ00sS0FBSyxDQUFDSCxlQUFlLEdBQUcsSUFBSTtRQUM1QixPQUFPRyxLQUFLO01BQ2hCLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFREUsV0FBVyxFQUFFLFNBQWJBLFdBQVdBLENBQUEsRUFBUTtNQUNmWCxHQUFHLENBQUMsVUFBQ1MsS0FBSyxFQUFLO1FBQ1hBLEtBQUssQ0FBQ1AsV0FBVyxHQUFHLElBQUk7UUFDeEJPLEtBQUssQ0FBQ04sWUFBWSxHQUFHLElBQUk7UUFDekJNLEtBQUssQ0FBQ0gsZUFBZSxHQUFHLEtBQUs7UUFDN0IsT0FBT0csS0FBSztNQUNoQixDQUFDLENBQUM7SUFDTixDQUFDO0lBRURHLE1BQU0sRUFBRSxTQUFSQSxNQUFNQSxDQUFBLEVBQVE7TUFDVlosR0FBRyxDQUFDLFVBQUNTLEtBQUssRUFBSztRQUNYQSxLQUFLLENBQUNSLElBQUksR0FBRyxJQUFJO1FBQ2pCUSxLQUFLLENBQUNQLFdBQVcsR0FBRyxJQUFJO1FBQ3hCTyxLQUFLLENBQUNOLFlBQVksR0FBRyxJQUFJO1FBQ3pCTSxLQUFLLENBQUNILGVBQWUsR0FBRyxLQUFLO1FBQzdCLE9BQU9HLEtBQUs7TUFDaEIsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVESSxZQUFZLEVBQUUsU0FBZEEsWUFBWUEsQ0FBR1QsU0FBUyxFQUFLO01BQ3pCSixHQUFHLENBQUMsVUFBQ1MsS0FBSyxFQUFLO1FBQ1hBLEtBQUssQ0FBQ0wsU0FBUyxHQUFHQSxTQUFTO1FBQzNCLE9BQU9LLEtBQUs7TUFDaEIsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVESyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBR1QsS0FBSyxFQUFLO01BQ2pCTCxHQUFHLENBQUMsVUFBQ1MsS0FBSyxFQUFLO1FBQ1hBLEtBQUssQ0FBQ0osS0FBSyxHQUFHQSxLQUFLO1FBQ25CLE9BQU9JLEtBQUs7TUFDaEIsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVETSxjQUFjLEVBQUUsU0FBaEJBLGNBQWNBLENBQUdSLFdBQVcsRUFBSztNQUM3QlAsR0FBRyxDQUFDLFVBQUNTLEtBQUssRUFBSztRQUNYQSxLQUFLLENBQUNGLFdBQVcsR0FBR0EsV0FBVztRQUMvQixPQUFPRSxLQUFLO01BQ2hCLENBQUMsQ0FBQztJQUNOO0VBQ0osQ0FBQztBQUFBLENBQUMsQ0FBQyxFQUFFO0VBQ0RPLElBQUksRUFBRSxjQUFjO0VBQ3BCQyxVQUFVLEVBQUUsU0FBWkEsVUFBVUEsQ0FBR1IsS0FBSztJQUFBLE9BQU07TUFDcEJQLFdBQVcsRUFBRU8sS0FBSyxDQUFDUCxXQUFXO01BQzlCQyxZQUFZLEVBQUVNLEtBQUssQ0FBQ04sWUFBWTtNQUNoQ0YsSUFBSSxFQUFFUSxLQUFLLENBQUNSO0lBQ2hCLENBQUM7RUFBQTtBQUNMLENBQUMsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119