f7234d2cfba99ebc4c5849d54e50ea5f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useProfileScreen = useProfileScreen;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _core = require("@pawfectmatch/core");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _react = require("react");
var _reactNative = require("react-native");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useProfileScreen() {
  var _useAuthStore = (0, _core.useAuthStore)(),
    user = _useAuthStore.user,
    logout = _useAuthStore.logout;
  var _useState = (0, _react.useState)({
      matches: true,
      messages: true,
      email: true,
      push: true
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    notifications = _useState2[0],
    setNotifications = _useState2[1];
  var _useState3 = (0, _react.useState)({
      showLocation: true,
      showAge: true,
      showBreed: true
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    privacy = _useState4[0],
    setPrivacy = _useState4[1];
  var handleLogout = (0, _react.useCallback)(function () {
    _reactNative.Alert.alert("Logout", "Are you sure you want to logout?", [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Logout",
      style: "destructive",
      onPress: function onPress() {
        void (0, _asyncToGenerator2.default)(function* () {
          try {
            logout == null ? void 0 : logout();
            yield _asyncStorage.default.clear();
            _core.logger.info("User logged out successfully");
          } catch (error) {
            _core.logger.error("Logout error:", {
              error: error
            });
          }
        })();
      }
    }]);
  }, [logout]);
  var handleSettingToggle = (0, _react.useCallback)(function (setting) {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    setNotifications(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, setting, !prev[setting]));
    });
  }, []);
  var handlePrivacyToggle = (0, _react.useCallback)(function (setting) {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    setPrivacy(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, setting, !prev[setting]));
    });
  }, []);
  return {
    user: user,
    notifications: notifications,
    privacy: privacy,
    handleLogout: handleLogout,
    handleSettingToggle: handleSettingToggle,
    handlePrivacyToggle: handlePrivacyToggle
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJfYXN5bmNTdG9yYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIkhhcHRpY3MiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdDIiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm93bktleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidXNlUHJvZmlsZVNjcmVlbiIsIl91c2VBdXRoU3RvcmUiLCJ1c2VBdXRoU3RvcmUiLCJ1c2VyIiwibG9nb3V0IiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJtYXRjaGVzIiwibWVzc2FnZXMiLCJlbWFpbCIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJub3RpZmljYXRpb25zIiwic2V0Tm90aWZpY2F0aW9ucyIsIl91c2VTdGF0ZTMiLCJzaG93TG9jYXRpb24iLCJzaG93QWdlIiwic2hvd0JyZWVkIiwiX3VzZVN0YXRlNCIsInByaXZhY3kiLCJzZXRQcml2YWN5IiwiaGFuZGxlTG9nb3V0IiwidXNlQ2FsbGJhY2siLCJBbGVydCIsImFsZXJ0IiwidGV4dCIsInN0eWxlIiwib25QcmVzcyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIkFzeW5jU3RvcmFnZSIsImNsZWFyIiwibG9nZ2VyIiwiaW5mbyIsImVycm9yIiwiaGFuZGxlU2V0dGluZ1RvZ2dsZSIsInNldHRpbmciLCJpbXBhY3RBc3luYyIsIkltcGFjdEZlZWRiYWNrU3R5bGUiLCJMaWdodCIsInByZXYiLCJoYW5kbGVQcml2YWN5VG9nZ2xlIl0sInNvdXJjZXMiOlsidXNlUHJvZmlsZVNjcmVlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiQHBhd2ZlY3RtYXRjaC9jb3JlXCI7XG5pbXBvcnQgeyB1c2VBdXRoU3RvcmUgfSBmcm9tIFwiQHBhd2ZlY3RtYXRjaC9jb3JlXCI7XG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gXCJAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZVwiO1xuaW1wb3J0ICogYXMgSGFwdGljcyBmcm9tIFwiZXhwby1oYXB0aWNzXCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgbWF0Y2hlc0FQSSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9hcGlcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVByb2ZpbGVTY3JlZW4oKSB7XG4gIGNvbnN0IHsgdXNlciwgbG9nb3V0IH0gPSB1c2VBdXRoU3RvcmUoKTtcbiAgY29uc3QgW25vdGlmaWNhdGlvbnMsIHNldE5vdGlmaWNhdGlvbnNdID0gdXNlU3RhdGUoe1xuICAgIG1hdGNoZXM6IHRydWUsXG4gICAgbWVzc2FnZXM6IHRydWUsXG4gICAgZW1haWw6IHRydWUsXG4gICAgcHVzaDogdHJ1ZSxcbiAgfSk7XG4gIGNvbnN0IFtwcml2YWN5LCBzZXRQcml2YWN5XSA9IHVzZVN0YXRlKHtcbiAgICBzaG93TG9jYXRpb246IHRydWUsXG4gICAgc2hvd0FnZTogdHJ1ZSxcbiAgICBzaG93QnJlZWQ6IHRydWUsXG4gIH0pO1xuXG4gIGNvbnN0IGhhbmRsZUxvZ291dCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBBbGVydC5hbGVydChcIkxvZ291dFwiLCBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsb2dvdXQ/XCIsIFtcbiAgICAgIHsgdGV4dDogXCJDYW5jZWxcIiwgc3R5bGU6IFwiY2FuY2VsXCIgfSxcbiAgICAgIHtcbiAgICAgICAgdGV4dDogXCJMb2dvdXRcIixcbiAgICAgICAgc3R5bGU6IFwiZGVzdHJ1Y3RpdmVcIixcbiAgICAgICAgb25QcmVzczogKCkgPT4ge1xuICAgICAgICAgIHZvaWQgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxvZ291dD8uKCk7XG4gICAgICAgICAgICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhcIlVzZXIgbG9nZ2VkIG91dCBzdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJMb2dvdXQgZXJyb3I6XCIsIHsgZXJyb3IgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkoKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSk7XG4gIH0sIFtsb2dvdXRdKTtcblxuICBjb25zdCBoYW5kbGVTZXR0aW5nVG9nZ2xlID0gdXNlQ2FsbGJhY2soKHNldHRpbmc6IHN0cmluZykgPT4ge1xuICAgIHZvaWQgSGFwdGljcy5pbXBhY3RBc3luYyhIYXB0aWNzLkltcGFjdEZlZWRiYWNrU3R5bGUuTGlnaHQpO1xuICAgIHNldE5vdGlmaWNhdGlvbnMoKHByZXYpID0+ICh7XG4gICAgICAuLi5wcmV2LFxuICAgICAgW3NldHRpbmddOiAhcHJldltzZXR0aW5nIGFzIGtleW9mIHR5cGVvZiBwcmV2XSxcbiAgICB9KSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBoYW5kbGVQcml2YWN5VG9nZ2xlID0gdXNlQ2FsbGJhY2soKHNldHRpbmc6IHN0cmluZykgPT4ge1xuICAgIHZvaWQgSGFwdGljcy5pbXBhY3RBc3luYyhIYXB0aWNzLkltcGFjdEZlZWRiYWNrU3R5bGUuTGlnaHQpO1xuICAgIHNldFByaXZhY3koKHByZXYpID0+ICh7XG4gICAgICAuLi5wcmV2LFxuICAgICAgW3NldHRpbmddOiAhcHJldltzZXR0aW5nIGFzIGtleW9mIHR5cGVvZiBwcmV2XSxcbiAgICB9KSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4ge1xuICAgIHVzZXIsXG4gICAgbm90aWZpY2F0aW9ucyxcbiAgICBwcml2YWN5LFxuICAgIGhhbmRsZUxvZ291dCxcbiAgICBoYW5kbGVTZXR0aW5nVG9nZ2xlLFxuICAgIGhhbmRsZVByaXZhY3lUb2dnbGUsXG4gIH07XG59XG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLE1BQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLFlBQUEsR0FBQU4sT0FBQTtBQUFxQyxTQUFBSSx3QkFBQUcsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUwsdUJBQUEsWUFBQUEsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxD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