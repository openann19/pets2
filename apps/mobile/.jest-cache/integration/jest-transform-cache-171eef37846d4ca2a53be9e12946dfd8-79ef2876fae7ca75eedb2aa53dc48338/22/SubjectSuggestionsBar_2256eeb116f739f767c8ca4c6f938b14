59eefb8a5e0a551966ae1078c6733f98
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubjectSuggestionsBar = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _AutoCropEngine = require("../../utils/AutoCropEngine");
var _unifiedTheme = require("../../theme/unified-theme");
var _micro = require("../micro");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var SubjectSuggestionsBar = exports.SubjectSuggestionsBar = function SubjectSuggestionsBar(_ref) {
  var uri = _ref.uri,
    _ref$ratios = _ref.ratios,
    ratios = _ref$ratios === void 0 ? ["1:1", "4:5", "9:16"] : _ref$ratios,
    onFocus = _ref.onFocus,
    onApply = _ref.onApply;
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    sugs = _useState4[0],
    setSugs = _useState4[1];
  (0, _react.useEffect)(function () {
    var mounted = true;
    (0, _asyncToGenerator2.default)(function* () {
      setLoading(true);
      try {
        var base = yield _AutoCropEngine.AutoCropEngine.suggestCrops(uri, ratios, {
          eyeWeight: 0.6,
          padPct: 0.16
        });
        var thumbs = yield _AutoCropEngine.AutoCropEngine.makeThumbnails(uri, base, {
          size: 220,
          quality: 0.9
        });
        if (mounted) setSugs(thumbs);
      } catch (_unused) {
        if (mounted) setSugs([]);
      } finally {
        if (mounted) setLoading(false);
      }
    })();
    return function () {
      mounted = false;
    };
  }, [uri, ratios]);
  if (loading) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.wrap,
      children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        size: "small",
        color: _unifiedTheme.Theme.colors.primary[500]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.meta,
        children: "Finding the best frames\u2026"
      })]
    });
  }
  if (!sugs.length) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.wrap,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.meta,
        children: "No suggestions\u2014try manual crop."
      })
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.wrap,
    children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      horizontal: true,
      showsHorizontalScrollIndicator: false,
      contentContainerStyle: styles.row,
      children: sugs.map(function (s) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.card,
          children: [(0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
            onPress: function onPress() {
              Haptics.selectionAsync();
              onFocus == null ? void 0 : onFocus(s.focus);
            },
            style: styles.thumbBtn,
            accessibilityLabel: `Preview ${s.ratio} crop`,
            children: [s.thumbUri ? (0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: {
                uri: s.thumbUri
              },
              style: styles.thumbImg,
              resizeMode: "cover"
            }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.thumbImg, {
                justifyContent: "center",
                alignItems: "center"
              }],
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "image",
                size: 24,
                color: "#fff"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.badge,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.badgeTxt,
                children: s.ratio
              })
            })]
          }), (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
            onPress: function onPress() {
              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
              onApply == null ? void 0 : onApply(s.crop);
            },
            style: styles.useBtn,
            accessibilityLabel: `Apply ${s.ratio} crop`,
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "flash",
              size: 14,
              color: "#fff"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.useTxt,
              children: "Use"
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.meta,
            children: [s.method === "eyes" ? "Eye-focus" : s.method === "face" ? "Face" : "Smart", " \u2022 ", s.ratio]
          })]
        }, s.ratio);
      })
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  wrap: {
    paddingVertical: 12,
    paddingHorizontal: 16
  },
  row: {
    gap: 12
  },
  card: {
    width: 140,
    alignItems: "center"
  },
  thumbBtn: {
    borderRadius: 12,
    overflow: "hidden",
    borderWidth: 1,
    borderColor: "rgba(255,255,255,0.15)"
  },
  thumbImg: {
    width: 140,
    height: 140,
    backgroundColor: "rgba(255,255,255,0.06)"
  },
  badge: {
    position: "absolute",
    top: 8,
    right: 8,
    backgroundColor: "rgba(0,0,0,0.55)",
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 10
  },
  badgeTxt: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "700"
  },
  useBtn: {
    marginTop: 8,
    flexDirection: "row",
    alignItems: "center",
    gap: 6,
    paddingHorizontal: 10,
    paddingVertical: 6,
    backgroundColor: _unifiedTheme.Theme.colors.primary[500],
    borderRadius: 10
  },
  useTxt: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "800"
  },
  meta: {
    marginTop: 6,
    color: "rgba(255,255,255,0.7)",
    fontSize: 12,
    textAlign: "center"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,