{"version":3,"names":["_core","require","_asyncStorage","_interopRequireDefault","_netinfo","_api","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","OfflineService","_classCallCheck2","isOnline","isSyncing","syncListeners","offlineData","pets","user","matches","messages","lastSync","Date","toISOString","pendingActions","initializeOfflineService","_createClass2","key","value","_initializeOfflineService","_asyncToGenerator2","loadOfflineData","setupNetworkMonitoring","startPeriodicSync","logger","info","error","String","_this","netInfoUnsubscribe","NetInfo","addEventListener","state","wasOffline","isConnected","triggerSync","notifyListeners","_this2","syncInterval","setInterval","_loadOfflineData","storedData","AsyncStorage","getItem","parsed","JSON","parse","_saveOfflineData","setItem","stringify","saveOfflineData","_triggerSync","syncPendingActions","syncFromServer","_syncPendingActions","_this3","actionsToSync","_toConsumableArray2","_loop","action","executePendingAction","a","id","actionId","retryCount","_action","type","Error","addPendingAction","data","now","Math","random","timestamp","getOfflineData","_getPets","api","getPets","warn","getUser","_getMatches","getMatches","_getMessages","matchId","getMessages","otherMessages","m","concat","_x","swipePet","petId","direction","_sendMessage","message","sendMessage","_x2","_x3","_updateProfile","profileData","updateUserProfile","updateProfile","_x4","performMatchAction","getSyncStatus","lastSyncTime","pendingActionsCount","syncProgress","addSyncStatusListener","listener","_this4","l","status","_clearOfflineData","removeItem","clearOfflineData","_getStorageSize","getAllKeys","totalSize","getStorageSize","cleanup","undefined","clearInterval","offlineService","exports"],"sources":["offlineService.ts"],"sourcesContent":["/**\n * Offline Support Service for PawfectMatch Mobile\n * Comprehensive offline functionality with data synchronization\n */\n\nimport { logger } from \"@pawfectmatch/core\";\nimport type { Match, Message, Pet, User } from \"@pawfectmatch/core/types\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport NetInfo, { type NetInfoState } from \"@react-native-community/netinfo\";\nimport { api } from \"./api\";\n\ninterface OfflineData {\n  pets: Pet[];\n  user: User | null;\n  matches: Match[];\n  messages: Message[];\n  lastSync: string;\n  pendingActions: PendingAction[];\n}\n\ninterface PendingAction {\n  id: string;\n  type: \"swipe\" | \"message\" | \"profile_update\" | \"match_action\";\n  data: unknown;\n  timestamp: string;\n  retryCount: number;\n}\n\ninterface SyncStatus {\n  isOnline: boolean;\n  isSyncing: boolean;\n  lastSyncTime: string | null;\n  pendingActionsCount: number;\n  syncProgress: number;\n}\n\nclass OfflineService {\n  private isOnline = true;\n  private isSyncing = false;\n  private syncListeners: ((status: SyncStatus) => void)[] = [];\n  private netInfoUnsubscribe?: () => void;\n  private syncInterval?: NodeJS.Timeout;\n  private offlineData: OfflineData = {\n    pets: [],\n    user: null,\n    matches: [],\n    messages: [],\n    lastSync: new Date().toISOString(),\n    pendingActions: [],\n  };\n\n  constructor() {\n    void this.initializeOfflineService();\n  }\n\n  /**\n   * Initialize offline service\n   */\n  private async initializeOfflineService(): Promise<void> {\n    try {\n      // Load offline data from storage\n      await this.loadOfflineData();\n\n      // Set up network monitoring\n      this.setupNetworkMonitoring();\n\n      // Start periodic sync\n      this.startPeriodicSync();\n\n      logger.info(\"Offline service initialized successfully\");\n    } catch (error) {\n      logger.error(\"Failed to initialize offline service\", {\n        error: String(error),\n      });\n    }\n  }\n\n  /**\n   * Set up network monitoring\n   */\n  private setupNetworkMonitoring(): void {\n    this.netInfoUnsubscribe = NetInfo.addEventListener((state: NetInfoState) => {\n      const wasOffline = !this.isOnline;\n      this.isOnline = state.isConnected === true;\n\n      if (wasOffline && this.isOnline) {\n        // Came back online, trigger sync\n        void this.triggerSync();\n      }\n\n      this.notifyListeners();\n    });\n  }\n\n  /**\n   * Start periodic sync when online\n   */\n  private startPeriodicSync(): void {\n    this.syncInterval = setInterval(() => {\n      if (this.isOnline && !this.isSyncing) {\n        void this.triggerSync();\n      }\n    }, 30000); // Sync every 30 seconds\n  }\n\n  /**\n   * Load offline data from storage\n   */\n  private async loadOfflineData(): Promise<void> {\n    try {\n      const storedData = await AsyncStorage.getItem(\"offline_data\");\n      if (storedData !== null && storedData !== \"\") {\n        const parsed: unknown = JSON.parse(storedData);\n        if (typeof parsed === \"object\" && parsed !== null) {\n          this.offlineData = parsed as OfflineData;\n        }\n      }\n    } catch (error) {\n      logger.error(\"Failed to load offline data\", { error: String(error) });\n    }\n  }\n\n  /**\n   * Save offline data to storage\n   */\n  private async saveOfflineData(): Promise<void> {\n    try {\n      await AsyncStorage.setItem(\n        \"offline_data\",\n        JSON.stringify(this.offlineData),\n      );\n    } catch (error) {\n      logger.error(\"Failed to save offline data\", { error: String(error) });\n    }\n  }\n\n  /**\n   * Trigger data synchronization\n   */\n  public async triggerSync(): Promise<void> {\n    if (this.isSyncing || !this.isOnline) {\n      return;\n    }\n\n    this.isSyncing = true;\n    this.notifyListeners();\n\n    try {\n      // Sync pending actions first\n      await this.syncPendingActions();\n\n      // Sync data from server\n      this.syncFromServer();\n\n      // Update last sync time\n      this.offlineData.lastSync = new Date().toISOString();\n      await this.saveOfflineData();\n\n      logger.info(\"Sync completed successfully\");\n    } catch (error) {\n      logger.error(\"Sync failed\", { error: String(error) });\n    } finally {\n      this.isSyncing = false;\n      this.notifyListeners();\n    }\n  }\n\n  /**\n   * Sync pending actions to server\n   */\n  private async syncPendingActions(): Promise<void> {\n    const actionsToSync = [...this.offlineData.pendingActions];\n\n    for (const action of actionsToSync) {\n      try {\n        await this.executePendingAction(action);\n\n        // Remove successful action\n        this.offlineData.pendingActions =\n          this.offlineData.pendingActions.filter((a) => a.id !== action.id);\n      } catch (error) {\n        logger.error(\"Failed to sync action\", {\n          actionId: action.id,\n          error: String(error),\n        });\n\n        // Increment retry count\n        action.retryCount++;\n\n        // Remove if max retries exceeded\n        if (action.retryCount >= 3) {\n          this.offlineData.pendingActions =\n            this.offlineData.pendingActions.filter((a) => a.id !== action.id);\n        }\n      }\n    }\n\n    await this.saveOfflineData();\n  }\n\n  /**\n   * Execute a pending action\n   */\n  private executePendingAction(_action: PendingAction): void {\n    // const actionData = action.data as Record<string, unknown>;\n    switch (_action.type) {\n      case \"swipe\":\n        // await api.swipePet(String(actionData['petId']), String(actionData['direction']) as 'like' | 'pass' | 'superlike');\n        break;\n      case \"message\":\n        // await api.sendMessage(String(actionData['matchId']), String(actionData['message']));\n        break;\n      case \"profile_update\":\n        // await api.updateUserProfile(actionData as Record<string, unknown>);\n        break;\n      case \"match_action\":\n        // await api.performMatchAction(String(actionData['matchId']), String(actionData['action']));\n        break;\n      default:\n        throw new Error(`Unknown action type: ${String(_action.type)}`);\n    }\n  }\n\n  /**\n   * Sync data from server\n   */\n  private syncFromServer(): void {\n    try {\n      // Sync user data\n      // const userData = await api.getCurrentUser();\n      // if (userData !== null && userData !== undefined) {\n      //   this.offlineData.user = userData as User;\n      // }\n      // Sync pets data\n      // const petsData = await api.getPets();\n      // if (petsData !== null) {\n      //   this.offlineData.pets = petsData as Pet[];\n      // }\n      // Sync matches\n      // const matchesData = await api.getMatches();\n      // if (matchesData !== null) {\n      //   this.offlineData.matches = matchesData as Match[];\n      //   // Sync messages for each match\n      //   const allMessages: Message[] = [];\n      //   for (const match of matchesData) {\n      //     const messages = await api.getMessages(match._id);\n      //     allMessages.push(...(messages as Message[]));\n      //   }\n      //   this.offlineData.messages = allMessages;\n      // }\n    } catch (error) {\n      logger.error(\"Failed to sync from server\", { error: String(error) });\n      throw error;\n    }\n  }\n\n  /**\n   * Add pending action for offline execution\n   */\n  public addPendingAction(type: PendingAction[\"type\"], data: unknown): void {\n    const action: PendingAction = {\n      id: `${type}_${String(Date.now())}_${String(Math.random())}`,\n      type,\n      data,\n      timestamp: new Date().toISOString(),\n      retryCount: 0,\n    };\n\n    this.offlineData.pendingActions.push(action);\n    void this.saveOfflineData();\n    this.notifyListeners();\n  }\n\n  /**\n   * Get offline data\n   */\n  public getOfflineData(): OfflineData {\n    return { ...this.offlineData };\n  }\n\n  /**\n   * Get pets (offline-first)\n   */\n  public async getPets(): Promise<Pet[]> {\n    if (this.isOnline) {\n      try {\n        const pets = await api.getPets();\n        this.offlineData.pets = pets;\n        await this.saveOfflineData();\n        return pets;\n      } catch (error) {\n        logger.warn(\"Failed to fetch pets online, using offline data\", {\n          error: String(error),\n        });\n      }\n    }\n\n    return this.offlineData.pets;\n  }\n\n  /**\n   * Get user (offline-first)\n   */\n  public getUser(): User | null {\n    if (this.isOnline) {\n      try {\n        // const user = await api.getCurrentUser();\n        // if (user !== null && user !== undefined) {\n        //   this.offlineData.user = user as User;\n        //   await this.saveOfflineData();\n        // }\n        // return user as User | null;\n      } catch (error) {\n        logger.warn(\"Failed to fetch user online, using offline data\", {\n          error: String(error),\n        });\n      }\n    }\n\n    return this.offlineData.user;\n  }\n\n  /**\n   * Get matches (offline-first)\n   */\n  public async getMatches(): Promise<Match[]> {\n    if (this.isOnline) {\n      try {\n        const matches = await api.getMatches();\n        this.offlineData.matches = matches;\n        await this.saveOfflineData();\n        return matches;\n      } catch (error) {\n        logger.warn(\"Failed to fetch matches online, using offline data\", {\n          error: String(error),\n        });\n      }\n    }\n\n    return this.offlineData.matches;\n  }\n\n  /**\n   * Get messages (offline-first)\n   */\n  public async getMessages(matchId: string): Promise<Message[]> {\n    if (this.isOnline) {\n      try {\n        const messages = await api.getMessages(matchId);\n        // This logic is a bit flawed, it replaces all messages with messages from one chat\n        // For a real app, we'd merge messages by matchId\n        interface MessageWithMatchId extends Message {\n          matchId?: string;\n        }\n        const otherMessages = this.offlineData.messages.filter(\n          (m) => (m as MessageWithMatchId).matchId !== matchId,\n        );\n        this.offlineData.messages = [...otherMessages, ...messages];\n        await this.saveOfflineData();\n        return messages;\n      } catch (error) {\n        logger.warn(\"Failed to fetch messages online, using offline data\", {\n          error: String(error),\n        });\n      }\n    }\n\n    interface MessageWithMatchId extends Message {\n      matchId?: string;\n    }\n    return this.offlineData.messages.filter(\n      (m) => (m as MessageWithMatchId).matchId === matchId,\n    );\n  }\n\n  /**\n   * Swipe pet (offline-aware)\n   */\n  public swipePet(\n    petId: string,\n    direction: \"like\" | \"pass\" | \"superlike\",\n  ): void {\n    if (this.isOnline) {\n      try {\n        // await api.swipePet(petId, direction);\n        // return;\n      } catch (error) {\n        logger.warn(\"Failed to swipe online, queuing for offline\", {\n          error: String(error),\n        });\n      }\n    }\n\n    // Queue for offline execution\n    this.addPendingAction(\"swipe\", { petId, direction });\n  }\n\n  /**\n   * Send message (offline-aware)\n   */\n  public async sendMessage(matchId: string, message: string): Promise<void> {\n    if (this.isOnline) {\n      try {\n        await api.sendMessage(matchId, message);\n        return;\n      } catch (error) {\n        logger.warn(\"Failed to send message online, queuing for offline\", {\n          error: String(error),\n        });\n      }\n    }\n\n    // Queue for offline execution\n    this.addPendingAction(\"message\", { matchId, message });\n  }\n\n  /**\n   * Update profile (offline-aware)\n   */\n  public async updateProfile(profileData: Partial<User>): Promise<void> {\n    if (this.isOnline) {\n      try {\n        await api.updateUserProfile(profileData);\n        return;\n      } catch (error) {\n        logger.warn(\"Failed to update profile online, queuing for offline\", {\n          error: String(error),\n        });\n      }\n    }\n\n    // Queue for offline execution\n    this.addPendingAction(\"profile_update\", profileData);\n  }\n\n  /**\n   * Perform match action (offline-aware)\n   */\n  public performMatchAction(matchId: string, action: string): void {\n    if (this.isOnline) {\n      try {\n        // await api.performMatchAction(matchId, action);\n        // return;\n      } catch (error) {\n        logger.warn(\n          \"Failed to perform match action online, queuing for offline\",\n          { error: String(error) },\n        );\n      }\n    }\n\n    // Queue for offline execution\n    this.addPendingAction(\"match_action\", { matchId, action });\n  }\n\n  /**\n   * Get sync status\n   */\n  public getSyncStatus(): SyncStatus {\n    return {\n      isOnline: this.isOnline,\n      isSyncing: this.isSyncing,\n      lastSyncTime: this.offlineData.lastSync,\n      pendingActionsCount: this.offlineData.pendingActions.length,\n      syncProgress: this.isSyncing ? 0.5 : 1.0,\n    };\n  }\n\n  /**\n   * Add sync status listener\n   */\n  public addSyncStatusListener(\n    listener: (status: SyncStatus) => void,\n  ): () => void {\n    this.syncListeners.push(listener);\n\n    // Return unsubscribe function\n    return () => {\n      this.syncListeners = this.syncListeners.filter((l) => l !== listener);\n    };\n  }\n\n  /**\n   * Notify sync status listeners\n   */\n  private notifyListeners(): void {\n    const status = this.getSyncStatus();\n    this.syncListeners.forEach((listener) => {\n      listener(status);\n    });\n  }\n\n  /**\n   * Clear offline data\n   */\n  public async clearOfflineData(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(\"offline_data\");\n      this.offlineData = {\n        pets: [],\n        user: null,\n        matches: [],\n        messages: [],\n        lastSync: new Date().toISOString(),\n        pendingActions: [],\n      };\n      logger.info(\"Offline data cleared\");\n    } catch (error) {\n      logger.error(\"Failed to clear offline data\", { error: String(error) });\n    }\n  }\n\n  /**\n   * Get offline storage size\n   */\n  public async getStorageSize(): Promise<number> {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      let totalSize = 0;\n\n      for (const key of keys) {\n        const value = await AsyncStorage.getItem(key);\n        if (value !== null && value !== \"\") {\n          totalSize += value.length;\n        }\n      }\n\n      return totalSize;\n    } catch (error) {\n      logger.error(\"Failed to get storage size\", { error: String(error) });\n      return 0;\n    }\n  }\n\n  // ===== SECURITY CONTROLS =====\n\n  /**\n   * Cleanup method for testing - removes event listeners and timers\n   */\n  public cleanup(): void {\n    if (this.netInfoUnsubscribe) {\n      this.netInfoUnsubscribe();\n      this.netInfoUnsubscribe = undefined;\n    }\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval);\n      this.syncInterval = undefined;\n    }\n    this.syncListeners = [];\n  }\n}\n\nexport const offlineService = new OfflineService();\n"],"mappings":"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","ignoreList":[]}