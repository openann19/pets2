e9d52f3b8786bbe810ba6b3e9f8077b6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withPerformanceMonitoring = exports.withComponentPerformanceMonitoring = exports.usePerformanceMonitor = exports.performanceMonitor = exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var PerformanceMonitor = function () {
  function PerformanceMonitor() {
    (0, _classCallCheck2.default)(this, PerformanceMonitor);
    this.isEnabled = __DEV__;
    this.lastFrameTime = 0;
    this.frameCount = 0;
    this.currentFPS = 60;
    this.interactions = new Map();
    this.metricsHistory = [];
    this.maxHistorySize = 100;
    if (this.isEnabled) {
      this.startFPSMonitoring();
    }
  }
  return (0, _createClass2.default)(PerformanceMonitor, [{
    key: "setEnabled",
    value: function setEnabled(enabled) {
      this.isEnabled = enabled && __DEV__;
      if (this.isEnabled) {
        this.startFPSMonitoring();
      }
    }
  }, {
    key: "startFPSMonitoring",
    value: function startFPSMonitoring() {
      var _this = this;
      if (!this.isEnabled) return;
      var _measureFPS = function measureFPS() {
        var now = Date.now();
        if (_this.lastFrameTime > 0) {
          var deltaTime = now - _this.lastFrameTime;
          _this.frameCount++;
          if (deltaTime >= 1000) {
            _this.currentFPS = Math.round(_this.frameCount * 1000 / deltaTime);
            _this.frameCount = 0;
            _this.lastFrameTime = now;
            if (_this.currentFPS < 30) {
              _core.logger.warn("Low FPS detected", {
                fps: _this.currentFPS
              });
            }
            _this.recordMetrics();
          }
        } else {
          _this.lastFrameTime = now;
        }
        requestAnimationFrame(_measureFPS);
      };
      requestAnimationFrame(_measureFPS);
    }
  }, {
    key: "getCurrentFPS",
    value: function getCurrentFPS() {
      return this.currentFPS;
    }
  }, {
    key: "startInteraction",
    value: function startInteraction(name) {
      if (!this.isEnabled) return;
      var interaction = {
        name: name,
        startTime: Date.now()
      };
      this.interactions.set(name, interaction);
    }
  }, {
    key: "endInteraction",
    value: function endInteraction(name) {
      if (!this.isEnabled) return null;
      var interaction = this.interactions.get(name);
      if (interaction === undefined) {
        _core.logger.warn("Interaction was not started", {
          interactionName: name
        });
        return null;
      }
      var endTime = Date.now();
      var duration = endTime - interaction.startTime;
      interaction.endTime = endTime;
      interaction.duration = duration;
      if (duration > 100) {
        _core.logger.warn("Slow interaction detected", {
          interactionName: name,
          duration: duration
        });
      }
      this.interactions.delete(name);
      return duration;
    }
  }, {
    key: "measureInteraction",
    value: (function () {
      var _measureInteraction = (0, _asyncToGenerator2.default)(function* (name, fn) {
        if (!this.isEnabled) {
          return yield fn();
        }
        this.startInteraction(name);
        try {
          var result = yield fn();
          return result;
        } finally {
          this.endInteraction(name);
        }
      });
      function measureInteraction(_x, _x2) {
        return _measureInteraction.apply(this, arguments);
      }
      return measureInteraction;
    }())
  }, {
    key: "getMemoryUsage",
    value: function getMemoryUsage() {
      if (_reactNative.Platform.OS === "ios") {
        return 0;
      } else {
        return 0;
      }
    }
  }, {
    key: "recordMetrics",
    value: function recordMetrics() {
      if (!this.isEnabled) return;
      var metrics = {
        fps: this.currentFPS,
        memoryUsage: this.getMemoryUsage(),
        interactionTime: this.getAverageInteractionTime(),
        timestamp: Date.now()
      };
      this.metricsHistory.push(metrics);
      if (this.metricsHistory.length > this.maxHistorySize) {
        this.metricsHistory.shift();
      }
    }
  }, {
    key: "getAverageInteractionTime",
    value: function getAverageInteractionTime() {
      var recentInteractions = Array.from(this.interactions.values()).filter(function (interaction) {
        return interaction.duration !== undefined;
      }).slice(-10);
      if (recentInteractions.length === 0) return 0;
      var totalTime = recentInteractions.reduce(function (sum, interaction) {
        return sum + (interaction.duration !== undefined ? interaction.duration : 0);
      }, 0);
      return totalTime / recentInteractions.length;
    }
  }, {
    key: "getMetricsHistory",
    value: function getMetricsHistory() {
      return (0, _toConsumableArray2.default)(this.metricsHistory);
    }
  }, {
    key: "getPerformanceSummary",
    value: function getPerformanceSummary() {
      var fpsValues = this.metricsHistory.map(function (m) {
        return m.fps;
      });
      return {
        currentFPS: this.currentFPS,
        averageFPS: fpsValues.length > 0 ? Math.round(fpsValues.reduce(function (a, b) {
          return a + b;
        }, 0) / fpsValues.length) : 0,
        minFPS: fpsValues.length > 0 ? Math.min.apply(Math, (0, _toConsumableArray2.default)(fpsValues)) : 0,
        maxFPS: fpsValues.length > 0 ? Math.max.apply(Math, (0, _toConsumableArray2.default)(fpsValues)) : 0,
        memoryUsage: this.getMemoryUsage(),
        activeInteractions: this.interactions.size
      };
    }
  }, {
    key: "logPerformanceSummary",
    value: function logPerformanceSummary() {
      if (!this.isEnabled) return;
      var summary = this.getPerformanceSummary();
      _core.logger.warn("Performance Summary", summary);
    }
  }, {
    key: "clearHistory",
    value: function clearHistory() {
      this.metricsHistory = [];
      this.interactions.clear();
    }
  }, {
    key: "waitForInteractions",
    value: function waitForInteractions() {
      return new Promise(function (resolve) {
        _reactNative.InteractionManager.runAfterInteractions(resolve);
      });
    }
  }]);
}();
var performanceMonitor = exports.performanceMonitor = new PerformanceMonitor();
var usePerformanceMonitor = exports.usePerformanceMonitor = function usePerformanceMonitor() {
  var startInteraction = function startInteraction(name) {
    performanceMonitor.startInteraction(name);
  };
  var endInteraction = function endInteraction(name) {
    return performanceMonitor.endInteraction(name);
  };
  var measureInteraction = function measureInteraction(name, fn) {
    return performanceMonitor.measureInteraction(name, fn);
  };
  var getCurrentFPS = function getCurrentFPS() {
    return performanceMonitor.getCurrentFPS();
  };
  var getPerformanceSummary = function getPerformanceSummary() {
    return performanceMonitor.getPerformanceSummary();
  };
  return {
    startInteraction: startInteraction,
    endInteraction: endInteraction,
    measureInteraction: measureInteraction,
    getCurrentFPS: getCurrentFPS,
    getPerformanceSummary: getPerformanceSummary
  };
};
var withPerformanceMonitoring = exports.withPerformanceMonitoring = function withPerformanceMonitoring(_name) {
  return function (target, propertyKey, descriptor) {
    var originalMethod = descriptor.value;
    descriptor.value = (0, _asyncToGenerator2.default)(function* () {
      var _this2 = this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return performanceMonitor.measureInteraction(`${target.constructor.name}.${propertyKey}`, function () {
        return originalMethod.apply(_this2, args);
      });
    });
    return descriptor;
  };
};
var withComponentPerformanceMonitoring = exports.withComponentPerformanceMonitoring = function withComponentPerformanceMonitoring(Component, componentName) {
  var WrappedComponent = function WrappedComponent(props) {
    var _ref2;
    var name = (_ref2 = componentName != null ? componentName : Component.displayName) != null ? _ref2 : Component.name;
    _react.default.useEffect(function () {
      performanceMonitor.startInteraction(`${name}.mount`);
      return function () {
        performanceMonitor.endInteraction(`${name}.mount`);
      };
    }, [name]);
    return _react.default.createElement(Component, props);
  };
  WrappedComponent.displayName = `withPerformanceMonitoring(${Component.displayName !== undefined && Component.displayName !== "" ? Component.displayName : Component.name})`;
  return WrappedComponent;
};
var _default = exports.default = performanceMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,