c75450891cd11a65f47a8f9f93fe49c1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MorphingContextMenu;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _vectorIcons = require("@expo/vector-icons");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var _worklet_9178608215160_init_data = {
  code: "function anonymous() {\n  const {\n    origin,\n    W,\n    interpolate,\n    t,\n    Extrapolate,\n    H,\n    alpha\n  } = this._closure;\n  const cxStart = origin.x + origin.width / 2;\n  const cyStart = origin.y + origin.height / 2;\n  const cxEnd = origin.x + (origin.width > 180 ? origin.width / 2 : W / 2);\n  const left = interpolate(t.value, [0, 1], [origin.x, cxStart - W / 2], Extrapolate.CLAMP);\n  const top = interpolate(t.value, [0, 1], [origin.y, Math.max(24, cyStart - H / 2)], Extrapolate.CLAMP);\n  const width = interpolate(t.value, [0, 1], [origin.width, W]);\n  const height = interpolate(t.value, [0, 1], [origin.height, H]);\n  const radius = interpolate(t.value, [0, 1], [16, 18]);\n  return {\n    left: left,\n    top: top,\n    width: width,\n    height: height,\n    borderRadius: radius,\n    opacity: alpha.value,\n    transform: [{\n      scale: 0.98 + 0.02 * t.value\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/menus/MorphingContextMenu.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"origin\",\"W\",\"interpolate\",\"t\",\"Extrapolate\",\"H\",\"alpha\",\"_closure\",\"cxStart\",\"x\",\"width\",\"cyStart\",\"y\",\"height\",\"cxEnd\",\"left\",\"value\",\"CLAMP\",\"top\",\"Math\",\"max\",\"radius\",\"borderRadius\",\"opacity\",\"transform\",\"scale\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/menus/MorphingContextMenu.tsx\"],\"mappings\":\"AAqFiC,SAAAA,SAAMA,CAAA;EAAA;IAAAC,MAAA;IAAAC,CAAA;IAAAC,WAAA;IAAAC,CAAA;IAAAC,WAAA;IAAAC,CAAA;IAAAC;EAAA,SAAAC,QAAA;EAEnC,MAAMC,OAAO,GAAGR,MAAM,CAACS,CAAC,GAAGT,MAAM,CAACU,KAAK,GAAG,CAAC;EAC3C,MAAMC,OAAO,GAAGX,MAAM,CAACY,CAAC,GAAGZ,MAAM,CAACa,MAAM,GAAG,CAAC;EAC5C,MAAMC,KAAK,GAAGd,MAAM,CAACS,CAAC,IAAIT,MAAM,CAACU,KAAK,GAAG,GAAG,GAAGV,MAAM,CAACU,KAAK,GAAG,CAAC,GAAGT,CAAC,GAAG,CAAC,CAAC;EACxE,MAAMc,IAAI,GAAGb,WAAW,CAACC,CAAC,CAACa,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAChB,MAAM,CAACS,CAAC,EAAED,OAAO,GAAGP,CAAC,GAAG,CAAC,CAAC,EAAEG,WAAW,CAACa,KAAK,CAAC;EACzF,MAAMC,GAAG,GAAGhB,WAAW,CAACC,CAAC,CAACa,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAChB,MAAM,CAACY,CAAC,EAAEO,IAAI,CAACC,GAAG,CAAC,EAAE,EAAET,OAAO,GAAGN,CAAC,GAAG,CAAC,CAAC,CAAC,EAAED,WAAW,CAACa,KAAK,CAAC;EACtG,MAAMP,KAAK,GAAGR,WAAW,CAACC,CAAC,CAACa,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAChB,MAAM,CAACU,KAAK,EAAET,CAAC,CAAC,CAAC;EAC7D,MAAMY,MAAM,GAAGX,WAAW,CAACC,CAAC,CAACa,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAChB,MAAM,CAACa,MAAM,EAAER,CAAC,CAAC,CAAC;EAC/D,MAAMgB,MAAM,GAAGnB,WAAW,CAACC,CAAC,CAACa,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EAErD,OAAO;IACLD,IAAI,EAAJA,IAAI;IAAEG,GAAG,EAAHA,GAAG;IAAER,KAAK,EAALA,KAAK;IAAEG,MAAM,EAANA,MAAM;IAAES,YAAY,EAAED,MAAM;IAC9CE,OAAO,EAAEjB,KAAK,CAACU,KAAK;IACpBQ,SAAS,EAAE,CAAC;MAAEC,KAAK,EAAE,IAAI,GAAG,IAAI,GAAGtB,CAAC,CAACa;IAAM,CAAC;EAC9C,CAAC;AACH\",\"ignoreList\":[]}"
};
var _worklet_15387015758994_init_data = {
  code: "function anonymous() {\n  const {\n    interpolate,\n    t\n  } = this._closure;\n  return {\n    opacity: interpolate(t.value, [0.2, 1], [0, 1])\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/menus/MorphingContextMenu.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"interpolate\",\"t\",\"_closure\",\"opacity\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/menus/MorphingContextMenu.tsx\"],\"mappings\":\"AAiI2B,SAAAA,UAAA;EAAA;IAAAC,WAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IACtBC,OAAO,EAAEH,WAAW,CAACC,CAAC,CAACG,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAChD,CAAC;AAAA\",\"ignoreList\":[]}"
};
function MorphingContextMenu(_ref) {
  var visible = _ref.visible,
    onClose = _ref.onClose,
    anchor = _ref.anchor,
    actions = _ref.actions,
    _ref$theme = _ref.theme,
    theme = _ref$theme === void 0 ? {
      bg: "#111",
      border: "rgba(255,255,255,0.08)",
      text: "#fff",
      sub: "#9ca3af",
      item: "#181818",
      itemPressed: "#222",
      danger: "#ef4444"
    } : _ref$theme;
  var alpha = (0, _reactNativeReanimated.useSharedValue)(0);
  var t = (0, _reactNativeReanimated.useSharedValue)(0);
  _react.default.useEffect(function () {
    if (visible) {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(function () {});
      alpha.value = (0, _reactNativeReanimated.withTiming)(1, {
        duration: 140
      });
      t.value = (0, _reactNativeReanimated.withSpring)(1, {
        damping: 16,
        stiffness: 320
      });
    } else {
      alpha.value = (0, _reactNativeReanimated.withTiming)(0, {
        duration: 120
      });
      t.value = (0, _reactNativeReanimated.withTiming)(0, {
        duration: 120
      });
    }
  }, [visible, alpha, t]);
  var W = 240;
  var H = Math.min(340, 56 + actions.length * 48);
  var origin = anchor != null ? anchor : {
    x: 40,
    y: 300,
    width: 90,
    height: 42
  };
  var style = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -8, -27];
    var _f = function _f() {
      var cxStart = origin.x + origin.width / 2;
      var cyStart = origin.y + origin.height / 2;
      var cxEnd = origin.x + (origin.width > 180 ? origin.width / 2 : W / 2);
      var left = (0, _reactNativeReanimated.interpolate)(t.value, [0, 1], [origin.x, cxStart - W / 2], _reactNativeReanimated.Extrapolate.CLAMP);
      var top = (0, _reactNativeReanimated.interpolate)(t.value, [0, 1], [origin.y, Math.max(24, cyStart - H / 2)], _reactNativeReanimated.Extrapolate.CLAMP);
      var width = (0, _reactNativeReanimated.interpolate)(t.value, [0, 1], [origin.width, W]);
      var height = (0, _reactNativeReanimated.interpolate)(t.value, [0, 1], [origin.height, H]);
      var radius = (0, _reactNativeReanimated.interpolate)(t.value, [0, 1], [16, 18]);
      return {
        left: left,
        top: top,
        width: width,
        height: height,
        borderRadius: radius,
        opacity: alpha.value,
        transform: [{
          scale: 0.98 + 0.02 * t.value
        }]
      };
    };
    _f._closure = {
      origin: origin,
      W: W,
      interpolate: _reactNativeReanimated.interpolate,
      t: t,
      Extrapolate: _reactNativeReanimated.Extrapolate,
      H: H,
      alpha: alpha
    };
    _f.__initData = _worklet_9178608215160_init_data;
    _f.__workletHash = 9178608215160;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsxs)(_reactNative.Modal, {
    visible: visible,
    transparent: true,
    animationType: "none",
    onRequestClose: onClose,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Pressable, {
      style: styles.backdrop,
      onPress: onClose,
      children: (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        style: [styles.backdropFill, {
          opacity: function () {
            console.warn(require("react-native-reanimated").getUseOfValueInStyleWarning());
            return alpha.value;
          }()
        }]
      })
    }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: [styles.shell, style, {
        backgroundColor: theme.bg,
        borderColor: theme.border
      }]
    }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      pointerEvents: "box-none",
      style: [styles.content, (0, _reactNativeReanimated.useAnimatedStyle)(function () {
        var _e = [new global.Error(), -3, -27];
        var _f = function _f() {
          return {
            opacity: (0, _reactNativeReanimated.interpolate)(t.value, [0.2, 1], [0, 1])
          };
        };
        _f._closure = {
          interpolate: _reactNativeReanimated.interpolate,
          t: t
        };
        _f.__initData = _worklet_15387015758994_init_data;
        _f.__workletHash = 15387015758994;
        _f.__stackDetails = _e;
        _f.__version = "3.3.0";
        return _f;
      }())],
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.menu, {
          left: origin.x + (origin.width > W ? 0 : origin.width / 2 - W / 2),
          top: Math.max(24, origin.y + origin.height / 2 - H / 2),
          width: W,
          height: H,
          backgroundColor: theme.bg,
          borderColor: theme.border
        }],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.title, {
            color: theme.sub
          }],
          children: "Message options"
        }), actions.map(function (a) {
          var _theme$danger, _theme$danger2;
          return (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
            onPress: function onPress() {
              a.onPress();
              onClose();
            },
            disabled: a.disabled,
            android_ripple: {
              color: "rgba(255,255,255,0.06)"
            },
            style: function style(_ref2) {
              var pressed = _ref2.pressed;
              return [styles.item, {
                backgroundColor: pressed ? theme.itemPressed : theme.item,
                opacity: a.disabled ? 0.5 : 1
              }];
            },
            accessibilityRole: "button",
            accessibilityLabel: a.label,
            accessibilityState: {
              disabled: a.disabled
            },
            children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.itemRow,
              children: [a.icon ? (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: a.icon,
                size: 18,
                color: a.danger ? (_theme$danger = theme.danger) != null ? _theme$danger : "#ef4444" : theme.text
              }) : null, (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.itemText, {
                  color: a.danger ? (_theme$danger2 = theme.danger) != null ? _theme$danger2 : "#ef4444" : theme.text
                }],
                children: a.label
              })]
            })
          }, a.key);
        })]
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  backdrop: {
    position: "absolute",
    inset: 0
  },
  backdropFill: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.25)"
  },
  shell: {
    position: "absolute",
    borderWidth: 1
  },
  content: {
    position: "absolute",
    inset: 0
  },
  menu: {
    position: "absolute",
    borderRadius: 18,
    borderWidth: 1,
    overflow: "hidden"
  },
  title: {
    paddingHorizontal: 12,
    paddingTop: 10,
    paddingBottom: 6,
    fontSize: 12,
    fontWeight: "700"
  },
  item: {
    height: 44,
    justifyContent: "center",
    paddingHorizontal: 12
  },
  itemRow: {
    flexDirection: "row",
    alignItems: "center",
    gap: 10
  },
  itemText: {
    fontSize: 14,
    fontWeight: "600"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,