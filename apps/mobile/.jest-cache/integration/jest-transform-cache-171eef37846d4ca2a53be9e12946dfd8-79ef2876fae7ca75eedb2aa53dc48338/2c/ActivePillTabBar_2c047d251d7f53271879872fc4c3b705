231871289134694397aba93d2c143927
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ActivePillTabBar;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _expoBlur = require("expo-blur");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _vectorIcons = require("@expo/vector-icons");
var _native = require("@react-navigation/native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _useReducedMotion = require("../hooks/useReducedMotion");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var getSpringConfig = function getSpringConfig(reducedMotion) {
  if (reducedMotion) {
    return {
      damping: 1000,
      stiffness: 1000,
      mass: 0.9
    };
  }
  return {
    damping: 22,
    stiffness: 260,
    mass: 0.9
  };
};
var getIcon = function getIcon(routeName, focused) {
  var route = routeName;
  switch (route) {
    case "Home":
      return focused ? "home" : "home-outline";
    case "Swipe":
      return focused ? "heart" : "heart-outline";
    case "Map":
      return focused ? "map" : "map-outline";
    case "Matches":
      return focused ? "chatbubbles" : "chatbubbles-outline";
    case "Profile":
      return focused ? "person" : "person-outline";
    case "AdoptionManager":
      return focused ? "list" : "list-outline";
    case "Premium":
      return focused ? "star" : "star-outline";
    default:
      return "home-outline";
  }
};
var _worklet_5136796338017_init_data = {
  code: "function anonymous() {\n  const {\n    indicatorX,\n    indicatorW\n  } = this._closure;\n  return {\n    transform: [{\n      translateX: indicatorX.value\n    }],\n    width: indicatorW.value\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/navigation/ActivePillTabBar.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"indicatorX\",\"indicatorW\",\"_closure\",\"transform\",\"translateX\",\"value\",\"width\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/navigation/ActivePillTabBar.tsx\"],\"mappings\":\"AAkHqC,SAAAA,UAAA;EAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IACxCC,SAAS,EAAE,CAAC;MAAEC,UAAU,EAAEJ,UAAU,CAACK;IAAM,CAAC,CAAC;IAC7CC,KAAK,EAAEL,UAAU,CAACI;EACpB,CAAC;AAAA\",\"ignoreList\":[]}"
};
var _worklet_4831822296595_init_data = {
  code: "function anonymous() {\n  const {\n    scale\n  } = this._closure;\n  var _scale$value, _scale;\n  return {\n    transform: [{\n      scale: (_scale$value = (_scale = scale) === null || _scale === void 0 ? void 0 : _scale.value) !== null && _scale$value !== void 0 ? _scale$value : 1\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/navigation/ActivePillTabBar.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"scale\",\"_closure\",\"_scale$value\",\"_scale\",\"transform\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/navigation/ActivePillTabBar.tsx\"],\"mappings\":\"AA+L6C,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,IAAAC,YAAA,EAAAC,MAAA;EAAA,OAAO;IACxCC,SAAS,EAAE,CAAC;MAAEJ,KAAK,GAAAE,YAAA,IAAAC,MAAA,GAAEH,KAAK,cAAAG,MAAA,uBAALA,MAAA,CAAOE,KAAK,cAAAH,YAAA,cAAAA,YAAA,GAAI;IAAE,CAAC;EAC1C,CAAC;AAAA\",\"ignoreList\":[]}"
};
function ActivePillTabBar(_ref) {
  var state = _ref.state,
    descriptors = _ref.descriptors,
    navigation = _ref.navigation;
  var _useTheme = (0, _native.useTheme)(),
    colors = _useTheme.colors,
    dark = _useTheme.dark;
  var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
  var reducedMotion = (0, _useReducedMotion.useReducedMotion)();
  var layoutsRef = (0, _react.useRef)({});
  var lastTapRef = (0, _react.useRef)({});
  var indicatorX = (0, _reactNativeReanimated.useSharedValue)(0);
  var indicatorW = (0, _reactNativeReanimated.useSharedValue)(0);
  var routesLength = state.routes.length;
  var iconScales = (0, _react.useMemo)(function () {
    return state.routes.map(function () {
      return (0, _reactNativeReanimated.useSharedValue)(1);
    });
  }, [routesLength]);
  (0, _react.useEffect)(function () {
    var route = state.routes[state.index];
    if (!route) return;
    var layout = layoutsRef.current[route.key];
    if (!layout) return;
    var springConfig = getSpringConfig(reducedMotion);
    indicatorX.value = reducedMotion ? (0, _reactNativeReanimated.withTiming)(layout.x, {
      duration: 0
    }) : (0, _reactNativeReanimated.withSpring)(layout.x, springConfig);
    indicatorW.value = reducedMotion ? (0, _reactNativeReanimated.withTiming)(layout.w, {
      duration: 0
    }) : (0, _reactNativeReanimated.withSpring)(layout.w, springConfig);
    var s = iconScales[state.index];
    if (s) {
      if (reducedMotion) {
        s.value = 1;
      } else {
        s.value = 1.15;
        s.value = (0, _reactNativeReanimated.withSpring)(1, {
          damping: 12,
          stiffness: 300
        });
      }
    }
    if (!reducedMotion) {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    }
  }, [state.index, iconScales, indicatorX, indicatorW, state.routes, reducedMotion]);
  var pillStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -3, -27];
    var _f = function _f() {
      return {
        transform: [{
          translateX: indicatorX.value
        }],
        width: indicatorW.value
      };
    };
    _f._closure = {
      indicatorX: indicatorX,
      indicatorW: indicatorW
    };
    _f.__initData = _worklet_5136796338017_init_data;
    _f.__workletHash = 5136796338017;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var getBadgeCount = function getBadgeCount(routeName) {
    switch (routeName) {
      case "Matches":
        return 3;
      case "Home":
        return 2;
      case "Map":
        return 1;
      default:
        return 0;
    }
  };
  var onTabLayout = function onTabLayout(key) {
    return function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
        x = _e$nativeEvent$layout.x,
        width = _e$nativeEvent$layout.width;
      layoutsRef.current[key] = {
        x: x,
        w: width
      };
      var currentRoute = state.routes[state.index];
      if (currentRoute && key === currentRoute.key) {
        indicatorX.value = (0, _reactNativeReanimated.withTiming)(x, {
          duration: 0
        });
        indicatorW.value = (0, _reactNativeReanimated.withTiming)(width, {
          duration: 0
        });
      }
    };
  };
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.root, {
      paddingBottom: Math.max(insets.bottom, 8),
      backgroundColor: _reactNative.Platform.OS === "android" ? dark ? "#16181d" : "#ffffff" : "transparent"
    }],
    children: (0, _jsxRuntime.jsxs)(_expoBlur.BlurView, {
      intensity: _reactNative.Platform.OS === "ios" ? 80 : 100,
      tint: dark ? "dark" : "light",
      style: [styles.bar, {
        borderColor: dark ? "#2a2e36" : "#e5e7eb"
      }],
      children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        style: [styles.pill, {
          backgroundColor: dark ? "rgba(255,255,255,0.08)" : "rgba(0,0,0,0.06)"
        }, pillStyle]
      }), state.routes.map(function (route, index) {
        var _descriptor$options, _ref2, _options$tabBarLabel;
        var descriptor = descriptors[route.key];
        var options = (_descriptor$options = descriptor == null ? void 0 : descriptor.options) != null ? _descriptor$options : {};
        var rawLabel = (_ref2 = (_options$tabBarLabel = options.tabBarLabel) != null ? _options$tabBarLabel : options.title) != null ? _ref2 : route.name;
        var label = typeof rawLabel === 'string' ? rawLabel : String(rawLabel);
        var isFocused = state.index === index;
        var badgeCount = getBadgeCount(route.name);
        var showBadge = badgeCount > 0;
        var scale = iconScales[index];
        var iconStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
          var _e = [new global.Error(), -2, -27];
          var _f = function _f() {
            var _scale$value;
            return {
              transform: [{
                scale: (_scale$value = scale == null ? void 0 : scale.value) != null ? _scale$value : 1
              }]
            };
          };
          _f._closure = {
            scale: scale
          };
          _f.__initData = _worklet_4831822296595_init_data;
          _f.__workletHash = 4831822296595;
          _f.__stackDetails = _e;
          _f.__version = "3.3.0";
          return _f;
        }());
        var onPress = function onPress() {
          var _lastTapRef$current$r;
          var now = Date.now();
          var last = (_lastTapRef$current$r = lastTapRef.current[route.key]) != null ? _lastTapRef$current$r : 0;
          var delta = now - last;
          lastTapRef.current[route.key] = now;
          if (scale && !reducedMotion) {
            scale.value = 0.9;
            scale.value = (0, _reactNativeReanimated.withSpring)(1, {
              damping: 10,
              stiffness: 420
            });
          }
          var event = navigation.emit({
            type: "tabPress",
            target: route.key,
            canPreventDefault: true
          });
          if (isFocused && delta < 300) {
            navigation.emit({
              type: "tabDoublePress",
              target: route.key
            });
          }
          if (!isFocused && !event.defaultPrevented) {
            navigation.navigate(route.name);
          }
        };
        var onLongPress = function onLongPress() {
          navigation.emit({
            type: "tabLongPress",
            target: route.key
          });
        };
        return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          onLayout: onTabLayout(route.key),
          accessibilityRole: "tab",
          accessibilityState: isFocused ? {
            selected: true
          } : {},
          accessibilityLabel: options.tabBarAccessibilityLabel || `${label} tab`,
          testID: options.tabBarTestID,
          onPress: onPress,
          onLongPress: onLongPress,
          style: styles.tab,
          activeOpacity: 0.9,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.iconWrap,
            accessibilityRole: "button",
            accessibilityLabel: `${label} icon`,
            children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
              style: iconStyle,
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: getIcon(route.name, isFocused),
                size: 22,
                color: isFocused ? colors.primary : colors.text
              })
            }), showBadge ? (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.badge, {
                backgroundColor: "#ef4444",
                borderColor: dark ? "#0b0d11" : "#ffffff"
              }],
              testID: `${label}.badge`,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.badgeText,
                children: badgeCount > 99 ? "99+" : String(badgeCount)
              })
            }) : null]
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.label, {
              color: isFocused ? colors.primary : colors.text,
              fontWeight: isFocused ? "600" : "400"
            }],
            numberOfLines: 1,
            accessibilityRole: "text",
            children: label
          })]
        }, route.key);
      })]
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  root: {
    paddingTop: 8
  },
  bar: {
    marginHorizontal: 12,
    height: 64,
    borderRadius: 18,
    overflow: "hidden",
    borderWidth: _reactNative.Platform.OS === "ios" ? 0 : 1,
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 6
  },
  pill: {
    position: "absolute",
    top: 6,
    bottom: 6,
    borderRadius: 14
  },
  tab: {
    flex: 1,
    height: "100%",
    alignItems: "center",
    justifyContent: "center"
  },
  iconWrap: {
    position: "relative",
    alignItems: "center",
    justifyContent: "center"
  },
  badge: {
    position: "absolute",
    top: -4,
    right: -12,
    minWidth: 18,
    height: 18,
    paddingHorizontal: 4,
    borderRadius: 9,
    borderWidth: 2,
    alignItems: "center",
    justifyContent: "center"
  },
  badgeText: {
    color: "#fff",
    fontSize: 10,
    fontWeight: "700"
  },
  label: {
    fontSize: 11,
    marginTop: 2
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,