ca2a1b7dfe169e18b31b4780e5d4f637
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._useWeatherStore = void 0;
var zustand_1 = require("zustand");
var immer_1 = require("zustand/middleware/immer");
exports._useWeatherStore = (0, zustand_1.create)()((0, immer_1.immer)(function (set, get) {
  return {
    data: null,
    isLoading: false,
    error: null,
    location: {
      latitude: null,
      longitude: null
    },
    setWeatherData: function setWeatherData(data) {
      set(function (state) {
        state.data = _objectSpread(_objectSpread({}, data), {}, {
          lastUpdated: new Date().toISOString()
        });
        state.error = null;
        return state;
      });
    },
    setIsLoading: function setIsLoading(isLoading) {
      set(function (state) {
        state.isLoading = isLoading;
        return state;
      });
    },
    setError: function setError(error) {
      set(function (state) {
        state.error = error;
        return state;
      });
    },
    setLocation: function setLocation(latitude, longitude) {
      set(function (state) {
        state.location = {
          latitude: latitude,
          longitude: longitude
        };
        return state;
      });
    },
    calculateTimeOfDay: function calculateTimeOfDay() {
      set(function (state) {
        var data = get().data;
        if (data == null || data.sys == null || state.data == null) return state;
        var now = new Date().getTime() / 1000;
        var sunrise = data.sys.sunrise != null ? data.sys.sunrise : 0;
        var sunset = data.sys.sunset != null ? data.sys.sunset : 0;
        var dawnStart = sunrise - 30 * 60;
        var duskEnd = sunset + 30 * 60;
        if (now >= dawnStart && now < sunrise) {
          state.data.timeOfDay = 'dawn';
        } else if (now >= sunrise && now < sunset) {
          state.data.timeOfDay = 'day';
        } else if (now >= sunset && now < duskEnd) {
          state.data.timeOfDay = 'dusk';
        } else {
          state.data.timeOfDay = 'night';
        }
        var month = new Date().getMonth();
        if (month >= 2 && month <= 4) {
          state.data.season = 'spring';
        } else if (month >= 5 && month <= 7) {
          state.data.season = 'summer';
        } else if (month >= 8 && month <= 10) {
          state.data.season = 'fall';
        } else {
          state.data.season = 'winter';
        }
        return state;
      });
    }
  };
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,