85e929aea4fa098bc8daca6c34c54c85
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PhotoAdjustmentSlider = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _unifiedTheme = require("../../theme/unified-theme");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var _worklet_4254833702622_init_data = {
  code: "function anonymous() {\n  const {\n    Haptics\n  } = this._closure;\n  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"Haptics\",\"_closure\",\"impactAsync\",\"ImpactFeedbackStyle\",\"Light\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx\"],\"mappings\":\"AAwDa,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EACbD,OAAO,CAACE,WAAW,CAACF,OAAO,CAACG,mBAAmB,CAACC,KAAK,CAAC;AACxD\",\"ignoreList\":[]}"
};
var _worklet_15708037033648_init_data = {
  code: "function anonymous(e) {\n  const {\n    trackW,\n    pos,\n    setFromPct,\n    lastTick,\n    Haptics\n  } = this._closure;\n  if (!trackW.value) return;\n  const nx = Math.max(0, Math.min(trackW.value, e.x));\n  const np = nx / trackW.value;\n  pos.value = np;\n  setFromPct(np);\n  const tick = Math.round(np * 4);\n  if (tick !== lastTick.current) {\n    lastTick.current = tick;\n    Haptics.selectionAsync();\n  }\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"e\",\"trackW\",\"pos\",\"setFromPct\",\"lastTick\",\"Haptics\",\"_closure\",\"value\",\"nx\",\"Math\",\"max\",\"min\",\"x\",\"np\",\"tick\",\"round\",\"current\",\"selectionAsync\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx\"],\"mappings\":\"AA2De,SAACA,SAAKA,CAAAC,CAAA;EAAA;IAAAC,MAAA;IAAAC,GAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC;EAAA,SAAAC,QAAA;EACf,IAAI,CAACL,MAAM,CAACM,KAAK,EAAE;EACnB,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAACV,MAAM,CAACM,KAAK,EAAEP,CAAC,CAACY,CAAC,CAAC,CAAC;EACnD,MAAMC,EAAE,GAAGL,EAAE,GAAGP,MAAM,CAACM,KAAK;EAC5BL,GAAG,CAACK,KAAK,GAAGM,EAAE;EACdV,UAAU,CAACU,EAAE,CAAC;EAEd,MAAMC,IAAI,GAAGL,IAAI,CAACM,KAAK,CAACF,EAAE,GAAG,CAAC,CAAC;EAC/B,IAAIC,IAAI,KAAKV,QAAQ,CAACY,OAAO,EAAE;IAC7BZ,QAAQ,CAACY,OAAO,GAAGF,IAAI;IACvBT,OAAO,CAACY,cAAc,CAAC,CAAC;EAC1B;AACF\",\"ignoreList\":[]}"
};
var _worklet_5272509524069_init_data = {
  code: "function anonymous() {\n  const {\n    lastTick\n  } = this._closure;\n  lastTick.current = -1;\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"lastTick\",\"_closure\",\"current\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx\"],\"mappings\":\"AAwEW,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EACXD,QAAQ,CAACE,OAAO,GAAG,CAAC,CAAC;AACvB\",\"ignoreList\":[]}"
};
var _worklet_851936140890_init_data = {
  code: "function anonymous() {\n  const {\n    defaultValue,\n    Haptics,\n    min,\n    max,\n    pos,\n    withSpring,\n    onValueChange\n  } = this._closure;\n  if (defaultValue !== undefined) {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n    const p = (defaultValue - min) / (max - min);\n    pos.value = withSpring(p);\n    onValueChange(defaultValue);\n  }\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"defaultValue\",\"Haptics\",\"min\",\"max\",\"pos\",\"withSpring\",\"onValueChange\",\"_closure\",\"undefined\",\"impactAsync\",\"ImpactFeedbackStyle\",\"Medium\",\"p\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx\"],\"mappings\":\"AA8EW,SAAAA,SAAMA,CAAA;EAAA;IAAAC,YAAA;IAAAC,OAAA;IAAAC,GAAA;IAAAC,GAAA;IAAAC,GAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EACX,IAAIP,YAAY,KAAKQ,SAAS,EAAE;IAC9BP,OAAO,CAACQ,WAAW,CAACR,OAAO,CAACS,mBAAmB,CAACC,MAAM,CAAC;IACvD,MAAMC,CAAC,GAAG,CAACZ,YAAY,GAAGE,GAAG,KAAKC,GAAG,GAAGD,GAAG,CAAC;IAC5CE,GAAG,CAACS,KAAK,GAAGR,UAAU,CAACO,CAAC,CAAC;IACzBN,aAAa,CAACN,YAAY,CAAC;EAC7B;AACF\",\"ignoreList\":[]}"
};
var _worklet_15680316010659_init_data = {
  code: "function anonymous() {\n  const {\n    pos\n  } = this._closure;\n  return {\n    width: pos.value * 100 + \"%\"\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"pos\",\"_closure\",\"width\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx\"],\"mappings\":\"AA0FqC,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAEvC,OAAO;IACLC,KAAK,EAAKF,GAAG,CAACG,KAAK,GAAG,GAAG;EAC3B,CAAC;AACH\",\"ignoreList\":[]}"
};
var _worklet_14307313534846_init_data = {
  code: "function anonymous() {\n  const {\n    pos\n  } = this._closure;\n  return {\n    left: pos.value * 100 + \"%\"\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"pos\",\"_closure\",\"left\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx\"],\"mappings\":\"AAiGsC,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAExC,OAAO;IACLC,IAAI,EAAKF,GAAG,CAACG,KAAK,GAAG,GAAG;EAC1B,CAAC;AACH\",\"ignoreList\":[]}"
};
var PhotoAdjustmentSlider = exports.PhotoAdjustmentSlider = function PhotoAdjustmentSlider(_ref) {
  var label = _ref.label,
    value = _ref.value,
    min = _ref.min,
    max = _ref.max,
    _ref$step = _ref.step,
    step = _ref$step === void 0 ? 1 : _ref$step,
    defaultValue = _ref.defaultValue,
    icon = _ref.icon,
    onValueChange = _ref.onValueChange;
  var trackW = (0, _reactNativeReanimated.useSharedValue)(0);
  var pct = Math.max(0, Math.min(1, (value - min) / (max - min)));
  var pos = (0, _reactNativeReanimated.useSharedValue)(pct);
  _react.default.useEffect(function () {
    var target = Math.max(0, Math.min(1, (value - min) / (max - min)));
    pos.value = (0, _reactNativeReanimated.withTiming)(target, {
      duration: 120
    });
  }, [value, min, max, pos]);
  var onLayoutTrack = function onLayoutTrack(e) {
    var width = e.nativeEvent.layout.width;
    trackW.value = width;
  };
  var setFromPct = function setFromPct(p) {
    var clamped = Math.max(0, Math.min(1, p));
    var raw = min + clamped * (max - min);
    var snapped = Math.round(raw / step) * step;
    onValueChange(Math.max(min, Math.min(max, snapped)));
  };
  var lastTick = (0, _react.useRef)(-1);
  var drag = _reactNativeGestureHandler.Gesture.Pan().onBegin(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    };
    _f._closure = {
      Haptics: Haptics
    };
    _f.__initData = _worklet_4254833702622_init_data;
    _f.__workletHash = 4254833702622;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onUpdate(function () {
    var _e = [new global.Error(), -6, -27];
    var _f = function _f(e) {
      if (!trackW.value) return;
      var nx = Math.max(0, Math.min(trackW.value, e.x));
      var np = nx / trackW.value;
      pos.value = np;
      setFromPct(np);
      var tick = Math.round(np * 4);
      if (tick !== lastTick.current) {
        lastTick.current = tick;
        Haptics.selectionAsync();
      }
    };
    _f._closure = {
      trackW: trackW,
      pos: pos,
      setFromPct: setFromPct,
      lastTick: lastTick,
      Haptics: Haptics
    };
    _f.__initData = _worklet_15708037033648_init_data;
    _f.__workletHash = 15708037033648;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onEnd(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      lastTick.current = -1;
    };
    _f._closure = {
      lastTick: lastTick
    };
    _f.__initData = _worklet_5272509524069_init_data;
    _f.__workletHash = 5272509524069;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var doubleTap = _reactNativeGestureHandler.Gesture.Tap().numberOfTaps(2).onEnd(function () {
    var _e = [new global.Error(), -8, -27];
    var _f = function _f() {
      if (defaultValue !== undefined) {
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
        var p = (defaultValue - min) / (max - min);
        pos.value = (0, _reactNativeReanimated.withSpring)(p);
        onValueChange(defaultValue);
      }
    };
    _f._closure = {
      defaultValue: defaultValue,
      Haptics: Haptics,
      min: min,
      max: max,
      pos: pos,
      withSpring: _reactNativeReanimated.withSpring,
      onValueChange: onValueChange
    };
    _f.__initData = _worklet_851936140890_init_data;
    _f.__workletHash = 851936140890;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var composed = _reactNativeGestureHandler.Gesture.Exclusive(doubleTap, drag);
  var fillStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        width: `${pos.value * 100}%`
      };
    };
    _f._closure = {
      pos: pos
    };
    _f.__initData = _worklet_15680316010659_init_data;
    _f.__workletHash = 15680316010659;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var thumbStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        left: `${pos.value * 100}%`
      };
    };
    _f._closure = {
      pos: pos
    };
    _f.__initData = _worklet_14307313534846_init_data;
    _f.__workletHash = 14307313534846;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    accessible: true,
    accessibilityRole: "adjustable",
    accessibilityLabel: label,
    accessibilityValue: {
      min: min,
      max: max,
      now: Math.round(value)
    },
    accessibilityActions: [{
      name: 'increment',
      label: 'Increase'
    }, {
      name: 'decrement',
      label: 'Decrease'
    }],
    onAccessibilityAction: function onAccessibilityAction(e) {
      if (e.nativeEvent.actionName === 'increment') setFromPct(Math.min(1, pct + step / (max - min)));
      if (e.nativeEvent.actionName === 'decrement') setFromPct(Math.max(0, pct - step / (max - min)));
    },
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: icon,
        size: 18,
        color: "white"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.label,
        children: label
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.value,
        children: Math.round(value)
      })]
    }), (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
      gesture: composed,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.sliderTrack,
        onLayout: onLayoutTrack,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.sliderBackground,
          children: (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
            style: [styles.sliderFill, fillStyle]
          })
        }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
          style: [styles.sliderThumb, thumbStyle]
        })]
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    marginBottom: 24
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    columnGap: 12,
    marginBottom: 12
  },
  label: {
    flex: 1,
    fontSize: 14,
    fontWeight: '600',
    color: 'white'
  },
  value: {
    fontSize: 14,
    fontWeight: '600',
    color: _unifiedTheme.Theme.colors.primary[500],
    minWidth: 50,
    textAlign: 'right'
  },
  sliderTrack: {
    height: 40,
    justifyContent: 'center'
  },
  sliderBackground: {
    height: 6,
    backgroundColor: 'rgba(255,255,255,0.2)',
    borderRadius: 3,
    overflow: 'hidden'
  },
  sliderFill: {
    height: '100%',
    backgroundColor: _unifiedTheme.Theme.colors.primary[500],
    borderRadius: 3
  },
  sliderThumb: {
    position: 'absolute',
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: _unifiedTheme.Theme.colors.primary[500],
    borderWidth: 3,
    borderColor: 'white',
    top: 8
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,