27bc31e19c0d28216a3831cf66d40430
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SmartImage = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _Shimmer = _interopRequireDefault(require("../micro/Shimmer"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["previewBlurRadius", "style", "onLoad", "onError", "rounded", "useShimmer"],
  _excluded2 = ["resizeMode"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _worklet_6964944486089_init_data = {
  code: "function anonymous() {\n  const {\n    o\n  } = this._closure;\n  return {\n    opacity: o.value\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/common/SmartImage.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"o\",\"_closure\",\"opacity\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/common/SmartImage.tsx\"],\"mappings\":\"AAwB8B,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAAEC,OAAO,EAAEF,CAAC,CAACG;EAAM,CAAC;AAAA\",\"ignoreList\":[]}"
};
var SmartImage = exports.SmartImage = (0, _react.memo)(function SmartImage(_ref) {
  var _ref$previewBlurRadiu = _ref.previewBlurRadius,
    previewBlurRadius = _ref$previewBlurRadiu === void 0 ? 16 : _ref$previewBlurRadiu,
    style = _ref.style,
    _onLoad = _ref.onLoad,
    _onError = _ref.onError,
    _ref$rounded = _ref.rounded,
    rounded = _ref$rounded === void 0 ? 12 : _ref$rounded,
    _ref$useShimmer = _ref.useShimmer,
    useShimmer = _ref$useShimmer === void 0 ? false : _ref$useShimmer,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loaded = _useState2[0],
    setLoaded = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    errored = _useState4[0],
    setErrored = _useState4[1];
  var o = (0, _reactNativeReanimated.useSharedValue)(0);
  (0, _react.useEffect)(function () {
    if (loaded) o.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 260
    });
  }, [loaded, o]);
  var as = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        opacity: o.value
      };
    };
    _f._closure = {
      o: o
    };
    _f.__initData = _worklet_6964944486089_init_data;
    _f.__workletHash = 6964944486089;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var _ref2 = rest,
    resizeMode = _ref2.resizeMode,
    imageProps = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  if (useShimmer) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.wrap, {
        borderRadius: rounded
      }, style],
      children: [!errored && (0, _jsxRuntime.jsx)(_Shimmer.default, {
        radius: rounded
      }), !errored && (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.Image, _objectSpread(_objectSpread({}, imageProps), {}, {
        resizeMode: resizeMode,
        onLoad: function onLoad(e) {
          setLoaded(true);
          _onLoad == null ? void 0 : _onLoad(e);
        },
        onError: function onError(e) {
          setErrored(true);
          _onError == null ? void 0 : _onError(e);
        },
        style: [_reactNative.StyleSheet.absoluteFillObject, as]
      })), errored && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.fallback, {
          borderRadius: rounded
        }]
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.wrap, style],
    children: [(0, _jsxRuntime.jsx)(_reactNative.Image, _objectSpread(_objectSpread({}, imageProps), {}, {
      resizeMode: resizeMode,
      blurRadius: previewBlurRadius,
      style: _reactNative.StyleSheet.absoluteFillObject
    })), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.Image, _objectSpread(_objectSpread({}, imageProps), {}, {
      resizeMode: resizeMode,
      onLoad: function onLoad(e) {
        setLoaded(true);
        _onLoad == null ? void 0 : _onLoad(e);
      },
      onError: function onError(e) {
        setErrored(true);
        _onError == null ? void 0 : _onError(e);
      },
      style: [_reactNative.StyleSheet.absoluteFillObject, as]
    }))]
  });
});
var styles = _reactNative.StyleSheet.create({
  wrap: {
    overflow: "hidden",
    position: "relative"
  },
  fallback: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.08)"
  }
});
var _default = exports.default = SmartImage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,