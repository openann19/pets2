e83e4ccd990de8414bbe68c05d0838cc
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountService = void 0;
var AccountService = function () {
  function AccountService(baseUrl) {
    (0, _classCallCheck2.default)(this, AccountService);
    this.baseUrl = baseUrl;
  }
  return (0, _createClass2.default)(AccountService, [{
    key: "requestAccountDeletion",
    value: (function () {
      var _requestAccountDeletion = (0, _asyncToGenerator2.default)(function* (request, token) {
        var response = yield fetch(`${this.baseUrl}/api/account/delete`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(request)
        });
        if (!response.ok) {
          var _error$message;
          var error = yield response.json();
          throw new Error((_error$message = error.message) != null ? _error$message : 'Failed to request account deletion');
        }
        return yield response.json();
      });
      function requestAccountDeletion(_x, _x2) {
        return _requestAccountDeletion.apply(this, arguments);
      }
      return requestAccountDeletion;
    }())
  }, {
    key: "cancelAccountDeletion",
    value: (function () {
      var _cancelAccountDeletion = (0, _asyncToGenerator2.default)(function* (request, token) {
        var response = yield fetch(`${this.baseUrl}/api/account/cancel-deletion`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(request)
        });
        if (!response.ok) {
          var _error$message2;
          var error = yield response.json();
          throw new Error((_error$message2 = error.message) != null ? _error$message2 : 'Failed to cancel account deletion');
        }
        return yield response.json();
      });
      function cancelAccountDeletion(_x3, _x4) {
        return _cancelAccountDeletion.apply(this, arguments);
      }
      return cancelAccountDeletion;
    }())
  }, {
    key: "deactivateAccount",
    value: (function () {
      var _deactivateAccount = (0, _asyncToGenerator2.default)(function* (request, token) {
        var response = yield fetch(`${this.baseUrl}/api/account/deactivate`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(request)
        });
        if (!response.ok) {
          var _error$message3;
          var error = yield response.json();
          throw new Error((_error$message3 = error.message) != null ? _error$message3 : 'Failed to deactivate account');
        }
        return yield response.json();
      });
      function deactivateAccount(_x5, _x6) {
        return _deactivateAccount.apply(this, arguments);
      }
      return deactivateAccount;
    }())
  }, {
    key: "reactivateAccount",
    value: (function () {
      var _reactivateAccount = (0, _asyncToGenerator2.default)(function* (token) {
        var response = yield fetch(`${this.baseUrl}/api/account/reactivate`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        });
        if (!response.ok) {
          var _error$message4;
          var error = yield response.json();
          throw new Error((_error$message4 = error.message) != null ? _error$message4 : 'Failed to reactivate account');
        }
        return yield response.json();
      });
      function reactivateAccount(_x7) {
        return _reactivateAccount.apply(this, arguments);
      }
      return reactivateAccount;
    }())
  }, {
    key: "requestDataExport",
    value: (function () {
      var _requestDataExport = (0, _asyncToGenerator2.default)(function* (request, token) {
        var response = yield fetch(`${this.baseUrl}/api/account/export-data`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(request)
        });
        if (!response.ok) {
          var _error$message5;
          var error = yield response.json();
          throw new Error((_error$message5 = error.message) != null ? _error$message5 : 'Failed to request data export');
        }
        return yield response.json();
      });
      function requestDataExport(_x8, _x9) {
        return _requestDataExport.apply(this, arguments);
      }
      return requestDataExport;
    }())
  }, {
    key: "getDataExportStatus",
    value: (function () {
      var _getDataExportStatus = (0, _asyncToGenerator2.default)(function* (exportId, token) {
        var response = yield fetch(`${this.baseUrl}/api/account/export-data/${exportId}/status`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        if (!response.ok) {
          var _error$message6;
          var error = yield response.json();
          throw new Error((_error$message6 = error.message) != null ? _error$message6 : 'Failed to get export status');
        }
        return yield response.json();
      });
      function getDataExportStatus(_x0, _x1) {
        return _getDataExportStatus.apply(this, arguments);
      }
      return getDataExportStatus;
    }())
  }, {
    key: "downloadDataExport",
    value: (function () {
      var _downloadDataExport = (0, _asyncToGenerator2.default)(function* (exportId, token) {
        var response = yield fetch(`${this.baseUrl}/api/account/export-data/${exportId}/download`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        if (!response.ok) {
          var _error$message7;
          var error = yield response.json();
          throw new Error((_error$message7 = error.message) != null ? _error$message7 : 'Failed to download data export');
        }
        return yield response.blob();
      });
      function downloadDataExport(_x10, _x11) {
        return _downloadDataExport.apply(this, arguments);
      }
      return downloadDataExport;
    }())
  }]);
}();
exports.AccountService = AccountService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,