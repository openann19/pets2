51a8a40245b169b81eb3402ac53de4ee
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EliteButtonPresets = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _BaseButton = _interopRequireDefault(require("./BaseButton"));
var _EffectWrappers = require("./EffectWrappers");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["glowEffect", "magneticEffect", "rippleEffect", "shimmerEffect", "pressEffect", "gradientEffect", "glowColor", "glowIntensity", "magneticSensitivity", "shimmerDuration", "gradientName", "gradientColors", "hapticFeedback", "title", "variant", "size", "loading", "disabled", "icon", "leftIcon", "rightIcon", "style", "onPress"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var EliteButton = (0, _react.forwardRef)(function (_ref, ref) {
  var _ref$glowEffect = _ref.glowEffect,
    glowEffect = _ref$glowEffect === void 0 ? false : _ref$glowEffect,
    _ref$magneticEffect = _ref.magneticEffect,
    magneticEffect = _ref$magneticEffect === void 0 ? false : _ref$magneticEffect,
    _ref$rippleEffect = _ref.rippleEffect,
    rippleEffect = _ref$rippleEffect === void 0 ? true : _ref$rippleEffect,
    _ref$shimmerEffect = _ref.shimmerEffect,
    shimmerEffect = _ref$shimmerEffect === void 0 ? false : _ref$shimmerEffect,
    _ref$pressEffect = _ref.pressEffect,
    pressEffect = _ref$pressEffect === void 0 ? true : _ref$pressEffect,
    _ref$gradientEffect = _ref.gradientEffect,
    gradientEffect = _ref$gradientEffect === void 0 ? false : _ref$gradientEffect,
    glowColor = _ref.glowColor,
    _ref$glowIntensity = _ref.glowIntensity,
    glowIntensity = _ref$glowIntensity === void 0 ? 1 : _ref$glowIntensity,
    _ref$magneticSensitiv = _ref.magneticSensitivity,
    magneticSensitivity = _ref$magneticSensitiv === void 0 ? 0.3 : _ref$magneticSensitiv,
    _ref$shimmerDuration = _ref.shimmerDuration,
    shimmerDuration = _ref$shimmerDuration === void 0 ? 2000 : _ref$shimmerDuration,
    gradientName = _ref.gradientName,
    gradientColors = _ref.gradientColors,
    _ref$hapticFeedback = _ref.hapticFeedback,
    hapticFeedback = _ref$hapticFeedback === void 0 ? true : _ref$hapticFeedback,
    title = _ref.title,
    variant = _ref.variant,
    size = _ref.size,
    loading = _ref.loading,
    disabled = _ref.disabled,
    icon = _ref.icon,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon,
    style = _ref.style,
    onPress = _ref.onPress,
    baseProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var handlePress = function handlePress() {
    if (hapticFeedback) {}
    onPress == null ? void 0 : onPress();
  };
  var ButtonComponent = (0, _jsxRuntime.jsx)(_BaseButton.default, _objectSpread(_objectSpread({}, baseProps), {}, {
    title: title,
    variant: variant,
    size: size,
    loading: loading,
    disabled: disabled,
    icon: icon,
    leftIcon: leftIcon,
    rightIcon: rightIcon,
    onPress: handlePress,
    style: style
  }));
  if (shimmerEffect) {
    ButtonComponent = (0, _jsxRuntime.jsx)(_EffectWrappers.WithShimmerFX, {
      duration: shimmerDuration,
      style: style,
      children: ButtonComponent
    });
  }
  if (gradientEffect) {
    ButtonComponent = (0, _jsxRuntime.jsx)(_EffectWrappers.WithGradientFX, {
      gradient: gradientName,
      colors: gradientColors,
      style: style,
      children: ButtonComponent
    });
  }
  if (rippleEffect) {
    ButtonComponent = (0, _jsxRuntime.jsx)(_EffectWrappers.WithRippleFX, {
      style: style,
      children: ButtonComponent
    });
  }
  if (pressEffect) {
    ButtonComponent = (0, _jsxRuntime.jsx)(_EffectWrappers.WithPressFX, {
      style: style,
      children: ButtonComponent
    });
  }
  if (magneticEffect) {
    ButtonComponent = (0, _jsxRuntime.jsx)(_EffectWrappers.WithMagneticFX, {
      sensitivity: magneticSensitivity,
      style: style,
      children: ButtonComponent
    });
  }
  if (glowEffect) {
    ButtonComponent = (0, _jsxRuntime.jsx)(_EffectWrappers.WithGlowFX, {
      color: glowColor,
      intensity: glowIntensity,
      style: style,
      children: ButtonComponent
    });
  }
  return ButtonComponent;
});
EliteButton.displayName = "EliteButton";
var EliteButtonPresets = exports.EliteButtonPresets = {
  premium: function premium(props) {
    return (0, _jsxRuntime.jsx)(EliteButton, _objectSpread(_objectSpread({}, props), {}, {
      glowEffect: true,
      rippleEffect: true,
      pressEffect: true
    }));
  },
  holographic: function holographic(props) {
    return (0, _jsxRuntime.jsx)(EliteButton, _objectSpread(_objectSpread({}, props), {}, {
      gradientEffect: true,
      gradientName: "primary",
      shimmerEffect: true,
      glowEffect: true,
      rippleEffect: true,
      pressEffect: true
    }));
  },
  magnetic: function magnetic(props) {
    return (0, _jsxRuntime.jsx)(EliteButton, _objectSpread(_objectSpread({}, props), {}, {
      magneticEffect: true,
      rippleEffect: true,
      pressEffect: true,
      glowEffect: true
    }));
  },
  glass: function glass(props) {
    return (0, _jsxRuntime.jsx)(EliteButton, _objectSpread(_objectSpread({}, props), {}, {
      variant: "ghost",
      glowEffect: true,
      rippleEffect: true,
      pressEffect: true,
      style: _reactNative.StyleSheet.flatten([{
        backgroundColor: "rgba(255, 255, 255, 0.1)",
        borderWidth: 1,
        borderColor: "rgba(255, 255, 255, 0.2)"
      }, props.style])
    }));
  },
  neon: function neon(props) {
    return (0, _jsxRuntime.jsx)(EliteButton, _objectSpread(_objectSpread({}, props), {}, {
      glowEffect: true,
      glowIntensity: 2,
      glowColor: "#00f5ff",
      rippleEffect: true,
      pressEffect: true,
      shimmerEffect: true,
      shimmerDuration: 1000
    }));
  }
};
var _default = exports.default = EliteButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,