86333f68d3cd0eed2aebcfcc86e49184
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeforeAfterSlider = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _vectorIcons = require("@expo/vector-icons");
var _expoBlur = require("expo-blur");
var _SmartImage = require("../common/SmartImage");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  SCREEN_W = _Dimensions$get.width;
var _worklet_4254833702622_init_data = {
  code: "function anonymous() {\n  const {\n    Haptics\n  } = this._closure;\n  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"Haptics\",\"_closure\",\"impactAsync\",\"ImpactFeedbackStyle\",\"Light\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx\"],\"mappings\":\"AA8Ba,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EACbD,OAAO,CAACE,WAAW,CAACF,OAAO,CAACG,mBAAmB,CAACC,KAAK,CAAC;AACxD\",\"ignoreList\":[]}"
};
var _worklet_7430242036389_init_data = {
  code: "function anonymous(e) {\n  const {\n    trackW,\n    x,\n    lastTick,\n    Haptics\n  } = this._closure;\n  const nx = Math.max(0, Math.min(trackW, x.value + e.changeX));\n  x.value = nx;\n  const p = Math.round(nx / trackW * 4);\n  if (p !== lastTick.current) {\n    lastTick.current = p;\n    Haptics.selectionAsync();\n  }\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"e\",\"trackW\",\"x\",\"lastTick\",\"Haptics\",\"_closure\",\"nx\",\"Math\",\"max\",\"min\",\"value\",\"changeX\",\"p\",\"round\",\"current\",\"selectionAsync\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx\"],\"mappings\":\"AAiCe,SAACA,SAAKA,CAAAC,CAAA;EAAA;IAAAC,MAAA;IAAAC,CAAA;IAAAC,QAAA;IAAAC;EAAA,SAAAC,QAAA;EACf,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAACR,MAAM,EAAEC,CAAC,CAACQ,KAAK,GAAIV,CAAC,CAASW,OAAO,CAAC,CAAC;EACtET,CAAC,CAACQ,KAAK,GAAGJ,EAAE;EACZ,MAAMM,CAAC,GAAGL,IAAI,CAACM,KAAK,CAAEP,EAAE,GAAGL,MAAM,GAAI,CAAC,CAAC;EACvC,IAAIW,CAAC,KAAKT,QAAQ,CAACW,OAAO,EAAE;IAC1BX,QAAQ,CAACW,OAAO,GAAGF,CAAC;IACpBR,OAAO,CAACW,cAAc,CAAC,CAAC;EAC1B;AACF\",\"ignoreList\":[]}"
};
var _worklet_9539659246793_init_data = {
  code: "function anonymous() {\n  const {\n    x,\n    trackW,\n    withSpring,\n    lastTick\n  } = this._closure;\n  const p = x.value / trackW;\n  if (Math.abs(p - 0.5) < 0.04) x.value = withSpring(trackW * 0.5);else if (p < 0.04) x.value = withSpring(0);else if (p > 0.96) x.value = withSpring(trackW);\n  lastTick.current = -1;\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"x\",\"trackW\",\"withSpring\",\"lastTick\",\"_closure\",\"p\",\"value\",\"Math\",\"abs\",\"current\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx\"],\"mappings\":\"AA0CW,SAAAA,SAAMA,CAAA;EAAA;IAAAC,CAAA;IAAAC,MAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EAEX,MAAMC,CAAC,GAAGL,CAAC,CAACM,KAAK,GAAGL,MAAM;EAC1B,IAAIM,IAAI,CAACC,GAAG,CAACH,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,EAAEL,CAAC,CAACM,KAAK,GAAGJ,UAAU,CAACD,MAAM,GAAG,GAAG,CAAC,CAAC,KAC5D,IAAII,CAAC,GAAG,IAAI,EAAEL,CAAC,CAACM,KAAK,GAAGJ,UAAU,CAAC,CAAC,CAAC,CAAC,KACtC,IAAIG,CAAC,GAAG,IAAI,EAAEL,CAAC,CAACM,KAAK,GAAGJ,UAAU,CAACD,MAAM,CAAC;EAC/CE,QAAQ,CAACM,OAAO,GAAG,CAAC,CAAC;AACvB\",\"ignoreList\":[]}"
};
var _worklet_6195544876758_init_data = {
  code: "function anonymous() {\n  const {\n    x\n  } = this._closure;\n  return {\n    width: x.value\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"x\",\"_closure\",\"width\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx\"],\"mappings\":\"AAmDuC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC1CC,KAAK,EAAEF,CAAC,CAACG;EACX,CAAC;AAAA\",\"ignoreList\":[]}"
};
var _worklet_6709660442895_init_data = {
  code: "function anonymous() {\n  const {\n    x\n  } = this._closure;\n  return {\n    left: x.value - 18\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"x\",\"_closure\",\"left\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx\"],\"mappings\":\"AAuDuC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC1CC,IAAI,EAAEF,CAAC,CAACG,KAAK,GAAG;EAClB,CAAC;AAAA\",\"ignoreList\":[]}"
};
var BeforeAfterSlider = exports.BeforeAfterSlider = function BeforeAfterSlider(_ref) {
  var originalUri = _ref.originalUri,
    editedUri = _ref.editedUri,
    onClose = _ref.onClose;
  var trackW = SCREEN_W;
  var x = (0, _reactNativeReanimated.useSharedValue)(trackW * 0.5);
  var lastTick = _react.default.useRef(-1);
  var pan = _reactNativeGestureHandler.Gesture.Pan().onBegin(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    };
    _f._closure = {
      Haptics: Haptics
    };
    _f.__initData = _worklet_4254833702622_init_data;
    _f.__workletHash = 4254833702622;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onUpdate(function () {
    var _e = [new global.Error(), -5, -27];
    var _f = function _f(e) {
      var nx = Math.max(0, Math.min(trackW, x.value + e.changeX));
      x.value = nx;
      var p = Math.round(nx / trackW * 4);
      if (p !== lastTick.current) {
        lastTick.current = p;
        Haptics.selectionAsync();
      }
    };
    _f._closure = {
      trackW: trackW,
      x: x,
      lastTick: lastTick,
      Haptics: Haptics
    };
    _f.__initData = _worklet_7430242036389_init_data;
    _f.__workletHash = 7430242036389;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onEnd(function () {
    var _e = [new global.Error(), -5, -27];
    var _f = function _f() {
      var p = x.value / trackW;
      if (Math.abs(p - 0.5) < 0.04) x.value = (0, _reactNativeReanimated.withSpring)(trackW * 0.5);else if (p < 0.04) x.value = (0, _reactNativeReanimated.withSpring)(0);else if (p > 0.96) x.value = (0, _reactNativeReanimated.withSpring)(trackW);
      lastTick.current = -1;
    };
    _f._closure = {
      x: x,
      trackW: trackW,
      withSpring: _reactNativeReanimated.withSpring,
      lastTick: lastTick
    };
    _f.__initData = _worklet_9539659246793_init_data;
    _f.__workletHash = 9539659246793;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var editedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        width: x.value
      };
    };
    _f._closure = {
      x: x
    };
    _f.__initData = _worklet_6195544876758_init_data;
    _f.__workletHash = 6195544876758;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var handleStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        left: x.value - 18
      };
    };
    _f._closure = {
      x: x
    };
    _f.__initData = _worklet_6709660442895_init_data;
    _f.__workletHash = 6709660442895;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.overlay,
    pointerEvents: "box-none",
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _reactNative.StyleSheet.absoluteFill,
      onTouchEnd: onClose
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.stage,
      children: [(0, _jsxRuntime.jsx)(_SmartImage.SmartImage, {
        source: {
          uri: originalUri
        },
        style: _reactNative.StyleSheet.absoluteFill,
        rounded: 0
      }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        style: [_reactNative.StyleSheet.absoluteFill, editedStyle, {
          overflow: 'hidden'
        }],
        children: (0, _jsxRuntime.jsx)(_SmartImage.SmartImage, {
          source: {
            uri: editedUri
          },
          style: _reactNative.StyleSheet.absoluteFill,
          rounded: 0
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.badge, {
          left: 12
        }],
        children: (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
          intensity: 30,
          style: styles.badgeInner,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.badgeText,
            children: "Before"
          })
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.badge, {
          right: 12
        }],
        children: (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
          intensity: 30,
          style: styles.badgeInner,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.badgeText,
            children: "After"
          })
        })
      }), (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
        gesture: pan,
        children: (0, _jsxRuntime.jsxs)(_reactNativeReanimated.default.View, {
          style: [styles.handle, handleStyle],
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.handleBar
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.handleKnob,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "swap-horizontal",
              size: 16,
              color: "white"
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.handleBar
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.closePill,
        children: (0, _jsxRuntime.jsxs)(_expoBlur.BlurView, {
          intensity: 30,
          style: styles.closeInner,
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "close",
            size: 18,
            color: "white"
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.closeText,
            children: "Close compare"
          })]
        })
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  overlay: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {
    justifyContent: 'flex-end'
  }),
  stage: {
    width: '100%',
    height: '100%',
    backgroundColor: 'black'
  },
  handle: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    width: 36,
    alignItems: 'center',
    justifyContent: 'center'
  },
  handleBar: {
    width: 2,
    height: '20%',
    backgroundColor: 'rgba(255,255,255,0.6)',
    borderRadius: 2
  },
  handleKnob: {
    width: 36,
    height: 36,
    borderRadius: 18,
    marginVertical: 10,
    backgroundColor: 'rgba(255,255,255,0.25)',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.35)'
  },
  badge: {
    position: 'absolute',
    top: 12
  },
  badgeInner: {
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 999,
    backgroundColor: 'rgba(0,0,0,0.45)'
  },
  badgeText: {
    color: 'white',
    fontWeight: '700',
    fontSize: 12
  },
  closePill: {
    position: 'absolute',
    bottom: 16,
    alignSelf: 'center'
  },
  closeInner: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    paddingHorizontal: 14,
    paddingVertical: 10,
    borderRadius: 999,
    backgroundColor: 'rgba(0,0,0,0.45)'
  },
  closeText: {
    color: 'white',
    fontWeight: '700',
    fontSize: 12
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,