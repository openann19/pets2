{"version":3,"names":["_interopRequireDefault","require","_asyncToGenerator2","_classCallCheck2","_createClass2","Object","defineProperty","exports","value","RecoveryStrategies","logger_1","default","key","_autoRetry","fn","_options$maxRetries","_options$retryDelay","options","arguments","length","undefined","maxRetries","retryDelay","lastError","attempt","onRetry","result","success","data","retriesPerformed","error","delay","Math","pow","logger","debug","sleep","onFailure","autoRetry","_x","apply","_retryWithTokenRefresh","refreshTokenFn","isAuthenticationError","info","retryResult","refreshError","retryWithTokenRefresh","_x2","_x3","_fallbackToCache","getCacheFn","warn","cachedData","cacheError","fallbackToCache","_x4","_x5","_queueForOffline","queueFn","isNetworkError","fallbackData","queueError","queueForOffline","_x6","_x7","_promptUserIntervention","promptFn","userWantsRetry","promptUserIntervention","_x8","_x9","_combinedRecovery","strategies","refreshToken","useCache","queue","retry","promptUser","combinedRecovery","_x0","_x1","status","statusCode","Error","message","toLowerCase","includes","ms","Promise","resolve","setTimeout"],"sources":["RecoveryStrategies.js"],"sourcesContent":["\"use strict\";\n/**\n * Recovery Strategies\n * Provides different recovery strategies for API errors\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RecoveryStrategies = void 0;\nconst logger_1 = require(\"../utils/logger\");\nclass RecoveryStrategies {\n    /**\n     * Auto-retry with exponential backoff\n     */\n    async autoRetry(fn, options = {}) {\n        const maxRetries = options.maxRetries ?? 3;\n        const retryDelay = options.retryDelay ?? 1000;\n        let lastError;\n        for (let attempt = 0; attempt <= maxRetries; attempt++) {\n            try {\n                if (attempt > 0 && options.onRetry) {\n                    options.onRetry(attempt);\n                }\n                const result = await fn();\n                return {\n                    success: true,\n                    data: result,\n                    retriesPerformed: attempt,\n                };\n            }\n            catch (error) {\n                lastError = error;\n                if (attempt < maxRetries) {\n                    const delay = retryDelay * Math.pow(2, attempt);\n                    logger_1.logger.debug('Retrying after delay', { attempt, delay });\n                    await this.sleep(delay);\n                }\n            }\n        }\n        if (options.onFailure) {\n            options.onFailure(lastError);\n        }\n        return {\n            success: false,\n            error: lastError,\n            retriesPerformed: maxRetries,\n        };\n    }\n    /**\n     * Retry with token refresh\n     */\n    async retryWithTokenRefresh(fn, refreshTokenFn, options = {}) {\n        try {\n            const result = await fn();\n            return { success: true, data: result };\n        }\n        catch (error) {\n            // Check if error is authentication error\n            if (this.isAuthenticationError(error)) {\n                logger_1.logger.info('Authentication error, refreshing token');\n                try {\n                    await refreshTokenFn();\n                    logger_1.logger.info('Token refreshed, retrying request');\n                    // Retry original request\n                    const retryResult = await this.autoRetry(fn, options);\n                    return retryResult;\n                }\n                catch (refreshError) {\n                    logger_1.logger.error('Token refresh failed', { error: refreshError });\n                    return {\n                        success: false,\n                        error: refreshError,\n                    };\n                }\n            }\n            return {\n                success: false,\n                error,\n            };\n        }\n    }\n    /**\n     * Fallback to cached data\n     */\n    async fallbackToCache(fn, getCacheFn, options = {}) {\n        try {\n            const result = await fn();\n            return { success: true, data: result };\n        }\n        catch (error) {\n            logger_1.logger.warn('Request failed, attempting cache fallback', { error });\n            try {\n                const cachedData = await getCacheFn();\n                if (cachedData !== null) {\n                    logger_1.logger.info('Using cached data as fallback');\n                    return {\n                        success: true,\n                        data: cachedData,\n                    };\n                }\n            }\n            catch (cacheError) {\n                logger_1.logger.error('Cache retrieval failed', { error: cacheError });\n            }\n            return {\n                success: false,\n                error,\n            };\n        }\n    }\n    /**\n     * Queue for offline processing\n     */\n    async queueForOffline(fn, queueFn, options = {}) {\n        try {\n            const result = await fn();\n            return { success: true, data: result };\n        }\n        catch (error) {\n            // Check if error is network error\n            if (this.isNetworkError(error)) {\n                logger_1.logger.info('Network error, queueing for offline processing', { error });\n                try {\n                    await queueFn(options.fallbackData);\n                    return {\n                        success: true,\n                        data: options.fallbackData,\n                    };\n                }\n                catch (queueError) {\n                    logger_1.logger.error('Failed to queue request', { error: queueError });\n                }\n            }\n            return {\n                success: false,\n                error,\n            };\n        }\n    }\n    /**\n     * Prompt user for intervention\n     */\n    async promptUserIntervention(fn, promptFn, options = {}) {\n        try {\n            const result = await fn();\n            return { success: true, data: result };\n        }\n        catch (error) {\n            const userWantsRetry = await promptFn(error);\n            if (userWantsRetry) {\n                logger_1.logger.info('User requested retry');\n                return await this.autoRetry(fn, options);\n            }\n            return {\n                success: false,\n                error,\n            };\n        }\n    }\n    /**\n     * Combined recovery strategy\n     */\n    async combinedRecovery(fn, strategies, options = {}) {\n        try {\n            const result = await fn();\n            return { success: true, data: result };\n        }\n        catch (error) {\n            // Try token refresh first\n            if (strategies.refreshToken && this.isAuthenticationError(error)) {\n                logger_1.logger.info('Attempting token refresh recovery');\n                const result = await this.retryWithTokenRefresh(fn, strategies.refreshToken, options);\n                if (result.success) {\n                    return result;\n                }\n            }\n            // Try cache fallback\n            if (strategies.useCache) {\n                logger_1.logger.info('Attempting cache fallback');\n                const result = await this.fallbackToCache(fn, strategies.useCache, options);\n                if (result.success) {\n                    return result;\n                }\n            }\n            // Try offline queue\n            if (strategies.queue && this.isNetworkError(error)) {\n                logger_1.logger.info('Attempting offline queue');\n                const result = await this.queueForOffline(fn, strategies.queue, options);\n                if (result.success) {\n                    return result;\n                }\n            }\n            // Try auto-retry\n            if (strategies.retry) {\n                logger_1.logger.info('Attempting auto-retry');\n                const result = await this.autoRetry(fn, options);\n                if (result.success) {\n                    return result;\n                }\n            }\n            // Finally, prompt user\n            if (strategies.promptUser) {\n                logger_1.logger.info('Prompting user for intervention');\n                return await this.promptUserIntervention(fn, strategies.promptUser, options);\n            }\n            return {\n                success: false,\n                error,\n            };\n        }\n    }\n    /**\n     * Check if error is authentication error\n     */\n    isAuthenticationError(error) {\n        if (error && typeof error === 'object') {\n            if ('status' in error && error.status === 401) {\n                return true;\n            }\n            if ('statusCode' in error && error.statusCode === 401) {\n                return true;\n            }\n        }\n        if (error instanceof Error) {\n            const message = error.message.toLowerCase();\n            return message.includes('unauthorized') ||\n                message.includes('authentication') ||\n                message.includes('token');\n        }\n        return false;\n    }\n    /**\n     * Check if error is network error\n     */\n    isNetworkError(error) {\n        if (error instanceof Error) {\n            const message = error.message.toLowerCase();\n            return message.includes('network') ||\n                message.includes('connection') ||\n                message.includes('timeout') ||\n                message.includes('econnrefused');\n        }\n        return false;\n    }\n    /**\n     * Sleep for specified milliseconds\n     */\n    sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n}\nexports.RecoveryStrategies = RecoveryStrategies;\n"],"mappings":"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","ignoreList":[]}