f28adc936a2404a54f5a6bfa332d6b23
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["id", "initialRouteName", "backBehavior", "children", "screenListeners", "screenOptions", "sceneContainerStyle"],
  _excluded2 = ["lazy", "tabBarOptions"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _native = require("@react-navigation/native");
var React = _interopRequireWildcard(require("react"));
var _warnOnce = _interopRequireDefault(require("warn-once"));
var _BottomTabView = _interopRequireDefault(require("../views/BottomTabView"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function BottomTabNavigator(_ref) {
  var id = _ref.id,
    initialRouteName = _ref.initialRouteName,
    backBehavior = _ref.backBehavior,
    children = _ref.children,
    screenListeners = _ref.screenListeners,
    screenOptions = _ref.screenOptions,
    sceneContainerStyle = _ref.sceneContainerStyle,
    restWithDeprecated = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var lazy = restWithDeprecated.lazy,
    tabBarOptions = restWithDeprecated.tabBarOptions,
    rest = (0, _objectWithoutProperties2.default)(restWithDeprecated, _excluded2);
  var defaultScreenOptions = {};
  if (tabBarOptions) {
    var _tabBarOptions$labelP;
    Object.assign(defaultScreenOptions, {
      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,
      tabBarActiveTintColor: tabBarOptions.activeTintColor,
      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,
      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,
      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,
      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,
      tabBarShowLabel: tabBarOptions.showLabel,
      tabBarLabelStyle: tabBarOptions.labelStyle,
      tabBarIconStyle: tabBarOptions.iconStyle,
      tabBarItemStyle: tabBarOptions.tabStyle,
      tabBarLabelPosition: (_tabBarOptions$labelP = tabBarOptions.labelPosition) != null ? _tabBarOptions$labelP : tabBarOptions.adaptive === false ? 'below-icon' : undefined,
      tabBarStyle: [{
        display: tabBarOptions.tabBarVisible ? 'none' : 'flex'
      }, defaultScreenOptions.tabBarStyle]
    });
    Object.keys(defaultScreenOptions).forEach(function (key) {
      if (defaultScreenOptions[key] === undefined) {
        delete defaultScreenOptions[key];
      }
    });
    (0, _warnOnce.default)(tabBarOptions, `Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\n\nPlace the following in 'screenOptions' in your code to keep current behavior:\n\n${JSON.stringify(defaultScreenOptions, null, 2)}\n\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.`);
  }
  if (typeof lazy === 'boolean') {
    defaultScreenOptions.lazy = lazy;
    (0, _warnOnce.default)(true, `Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\n\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.`);
  }
  var _ref2 = (0, _native.useNavigationBuilder)(_native.TabRouter, {
      id: id,
      initialRouteName: initialRouteName,
      backBehavior: backBehavior,
      children: children,
      screenListeners: screenListeners,
      screenOptions: screenOptions,
      defaultScreenOptions: defaultScreenOptions
    }),
    state = _ref2.state,
    descriptors = _ref2.descriptors,
    navigation = _ref2.navigation,
    NavigationContent = _ref2.NavigationContent;
  return React.createElement(NavigationContent, null, React.createElement(_BottomTabView.default, _extends({}, rest, {
    state: state,
    navigation: navigation,
    descriptors: descriptors,
    sceneContainerStyle: sceneContainerStyle
  })));
}
var _default = (0, _native.createNavigatorFactory)(BottomTabNavigator);
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbmF0aXZlIiwicmVxdWlyZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfd2Fybk9uY2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0JvdHRvbVRhYlZpZXciLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImFwcGx5IiwiQm90dG9tVGFiTmF2aWdhdG9yIiwiX3JlZiIsImlkIiwiaW5pdGlhbFJvdXRlTmFtZSIsImJhY2tCZWhhdmlvciIsImNoaWxkcmVuIiwic2NyZWVuTGlzdGVuZXJzIiwic2NyZWVuT3B0aW9ucyIsInNjZW5lQ29udGFpbmVyU3R5bGUiLCJyZXN0V2l0aERlcHJlY2F0ZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwibGF6eSIsInRhYkJhck9wdGlvbnMiLCJyZXN0IiwiX2V4Y2x1ZGVkMiIsImRlZmF1bHRTY3JlZW5PcHRpb25zIiwiX3RhYkJhck9wdGlvbnMkbGFiZWxQIiwidGFiQmFySGlkZU9uS2V5Ym9hcmQiLCJrZXlib2FyZEhpZGVzVGFiQmFyIiwidGFiQmFyQWN0aXZlVGludENvbG9yIiwiYWN0aXZlVGludENvbG9yIiwidGFiQmFySW5hY3RpdmVUaW50Q29sb3IiLCJpbmFjdGl2ZVRpbnRDb2xvciIsInRhYkJhckFjdGl2ZUJhY2tncm91bmRDb2xvciIsImFjdGl2ZUJhY2tncm91bmRDb2xvciIsInRhYkJhckluYWN0aXZlQmFja2dyb3VuZENvbG9yIiwiaW5hY3RpdmVCYWNrZ3JvdW5kQ29sb3IiLCJ0YWJCYXJBbGxvd0ZvbnRTY2FsaW5nIiwiYWxsb3dGb250U2NhbGluZyIsInRhYkJhclNob3dMYWJlbCIsInNob3dMYWJlbCIsInRhYkJhckxhYmVsU3R5bGUiLCJsYWJlbFN0eWxlIiwidGFiQmFySWNvblN0eWxlIiwiaWNvblN0eWxlIiwidGFiQmFySXRlbVN0eWxlIiwidGFiU3R5bGUiLCJ0YWJCYXJMYWJlbFBvc2l0aW9uIiwibGFiZWxQb3NpdGlvbiIsImFkYXB0aXZlIiwidW5kZWZpbmVkIiwidGFiQmFyU3R5bGUiLCJkaXNwbGF5IiwidGFiQmFyVmlzaWJsZSIsImtleXMiLCJmb3JFYWNoIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9yZWYyIiwidXNlTmF2aWdhdGlvbkJ1aWxkZXIiLCJUYWJSb3V0ZXIiLCJzdGF0ZSIsImRlc2NyaXB0b3JzIiwibmF2aWdhdGlvbiIsIk5hdmlnYXRpb25Db250ZW50IiwiY3JlYXRlRWxlbWVudCIsIl9kZWZhdWx0IiwiY3JlYXRlTmF2aWdhdG9yRmFjdG9yeSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbmF2aWdhdG9ycy9jcmVhdGVCb3R0b21UYWJOYXZpZ2F0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBVUEsSUFBQUMsS0FBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsU0FBQSxHQUFBQyxzQkFBQSxDQUFBSixPQUFBO0FBT0EsSUFBQUssY0FBQSxHQUFBRCxzQkFBQSxDQUFBSixPQUFBO0FBQW1ELFNBQUFJLHVCQUFBRSxHQUFBO0VBQUEsT0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEs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