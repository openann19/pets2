f032a50fb35c42cdfbadfbcf7e7bca9d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HapticSwitch;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _unifiedTheme = require("../../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var _worklet_17333597386376_init_data = {
  code: "function anonymous() {\n  const {\n    pulse\n  } = this._closure;\n  return {\n    opacity: 1 - pulse.value,\n    transform: [{\n      scale: 1 + 0.35 * (1 - pulse.value)\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/HapticSwitch.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"pulse\",\"_closure\",\"opacity\",\"value\",\"transform\",\"scale\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/HapticSwitch.tsx\"],\"mappings\":\"AAoBgC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IACnCC,OAAO,EAAE,CAAC,GAAGF,KAAK,CAACG,KAAK;IACxBC,SAAS,EAAE,CAAC;MAAEC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,GAAGL,KAAK,CAACG,KAAK;IAAE,CAAC;EACrD,CAAC;AAAA\",\"ignoreList\":[]}"
};
function HapticSwitch(_ref) {
  var value = _ref.value,
    _onValueChange = _ref.onValueChange,
    disabled = _ref.disabled;
  var pulse = (0, _reactNativeReanimated.useSharedValue)(0);
  (0, _react.useEffect)(function () {
    pulse.value = 0;
    pulse.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 450
    });
  }, [value]);
  var ring = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        opacity: 1 - pulse.value,
        transform: [{
          scale: 1 + 0.35 * (1 - pulse.value)
        }]
      };
    };
    _f._closure = {
      pulse: pulse
    };
    _f.__initData = _worklet_17333597386376_init_data;
    _f.__workletHash = 17333597386376;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.wrap,
    children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      pointerEvents: "none",
      style: [styles.ring, {
        borderColor: _unifiedTheme.Theme.colors.primary[500]
      }, ring]
    }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
      value: value,
      disabled: disabled,
      onValueChange: function onValueChange(v) {
        Haptics.selectionAsync();
        _onValueChange(v);
      },
      trackColor: {
        false: _unifiedTheme.Theme.colors.neutral[200],
        true: "#fce7f3"
      },
      thumbColor: value ? _unifiedTheme.Theme.colors.primary[500] : _unifiedTheme.Theme.colors.neutral[400]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  wrap: {
    alignItems: "center",
    justifyContent: "center"
  },
  ring: {
    position: "absolute",
    width: 52,
    height: 32,
    borderRadius: 20,
    borderWidth: 2
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmVSZWFuaW1hdGVkIiwiSGFwdGljcyIsIl91bmlmaWVkVGhlbWUiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX3dvcmtsZXRfMTczMzM1OTczODYzNzZfaW5pdF9kYXRhIiwiY29kZSIsImxvY2F0aW9uIiwic291cmNlTWFwIiwiSGFwdGljU3dpdGNoIiwiX3JlZiIsInZhbHVlIiwib25WYWx1ZUNoYW5nZSIsImRpc2FibGVkIiwicHVsc2UiLCJ1c2VTaGFyZWRWYWx1ZSIsInVzZUVmZmVjdCIsIndpdGhUaW1pbmciLCJkdXJhdGlvbiIsInJpbmciLCJ1c2VBbmltYXRlZFN0eWxlIiwiX2UiLCJnbG9iYWwiLCJFcnJvciIsIl9mIiwib3BhY2l0eSIsInRyYW5zZm9ybSIsInNjYWxlIiwiX2Nsb3N1cmUiLCJfX2luaXREYXRhIiwiX193b3JrbGV0SGFzaCIsIl9fc3RhY2tEZXRhaWxzIiwiX192ZXJzaW9uIiwianN4cyIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsIndyYXAiLCJjaGlsZHJlbiIsImpzeCIsInBvaW50ZXJFdmVudHMiLCJib3JkZXJDb2xvciIsIlRoZW1lIiwiY29sb3JzIiwicHJpbWFyeSIsIlN3aXRjaCIsInYiLCJzZWxlY3Rpb25Bc3luYyIsInRyYWNrQ29sb3IiLCJmYWxzZSIsIm5ldXRyYWwiLCJ0cnVlIiwidGh1bWJDb2xvciIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJwb3NpdGlvbiIsIndpZHRoIiwiaGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyV2lkdGgiXSwic291cmNlcyI6WyJIYXB0aWNTd2l0Y2gudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFZpZXcsIFN3aXRjaCwgU3R5bGVTaGVldCB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBBbmltYXRlZCwgeyB1c2VTaGFyZWRWYWx1ZSwgdXNlQW5pbWF0ZWRTdHlsZSwgd2l0aFNwcmluZywgd2l0aFRpbWluZyB9IGZyb20gXCJyZWFjdC1uYXRpdmUtcmVhbmltYXRlZFwiO1xuaW1wb3J0ICogYXMgSGFwdGljcyBmcm9tIFwiZXhwby1oYXB0aWNzXCI7XG5pbXBvcnQgeyBUaGVtZSB9IGZyb20gXCIuLi8uLi90aGVtZS91bmlmaWVkLXRoZW1lXCI7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHZhbHVlOiBib29sZWFuO1xuICBvblZhbHVlQ2hhbmdlOiAodjogYm9vbGVhbikgPT4gdm9pZDtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGFwdGljU3dpdGNoKHsgdmFsdWUsIG9uVmFsdWVDaGFuZ2UsIGRpc2FibGVkIH06IFByb3BzKSB7XG4gIGNvbnN0IHB1bHNlID0gdXNlU2hhcmVkVmFsdWUoMCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBwdWxzZS52YWx1ZSA9IDA7XG4gICAgcHVsc2UudmFsdWUgPSB3aXRoVGltaW5nKDEsIHsgZHVyYXRpb246IDQ1MCB9KTtcbiAgfSwgW3ZhbHVlXSk7XG5cbiAgY29uc3QgcmluZyA9IHVzZUFuaW1hdGVkU3R5bGUoKCkgPT4gKHtcbiAgICBvcGFjaXR5OiAxIC0gcHVsc2UudmFsdWUsXG4gICAgdHJhbnNmb3JtOiBbeyBzY2FsZTogMSArIDAuMzUgKiAoMSAtIHB1bHNlLnZhbHVlKSB9XSxcbiAgfSkpO1xuXG4gIHJldHVybiAoXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy53cmFwfT5cbiAgICAgIDxBbmltYXRlZC5WaWV3XG4gICAgICAgIHBvaW50ZXJFdmVudHM9XCJub25lXCJcbiAgICAgICAgc3R5bGU9e1tzdHlsZXMucmluZywgeyBib3JkZXJDb2xvcjogVGhlbWUuY29sb3JzLnByaW1hcnlbNTAwXSB9LCByaW5nXX1cbiAgICAgIC8+XG4gICAgICA8U3dpdGNoXG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICBvblZhbHVlQ2hhbmdlPXt2ID0+IHtcbiAgICAgICAgICBIYXB0aWNzLnNlbGVjdGlvbkFzeW5jKCk7XG4gICAgICAgICAgb25WYWx1ZUNoYW5nZSh2KTtcbiAgICAgICAgfX1cbiAgICAgICAgdHJhY2tDb2xvcj17eyBmYWxzZTogVGhlbWUuY29sb3JzLm5ldXRyYWxbMjAwXSwgdHJ1ZTogXCIjZmNlN2YzXCIgfX1cbiAgICAgICAgdGh1bWJDb2xvcj17dmFsdWUgPyBUaGVtZS5jb2xvcnMucHJpbWFyeVs1MDBdIDogVGhlbWUuY29sb3JzLm5ldXRyYWxbNDAwXX1cbiAgICAgIC8+XG4gICAgPC9WaWV3PlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHdyYXA6IHsgYWxpZ25JdGVtczogXCJjZW50ZXJcIiwganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIgfSxcbiAgcmluZzoge1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgd2lkdGg6IDUyLFxuICAgIGhlaWdodDogMzIsXG4gICAgYm9yZGVyUmFkaXVzOiAyMCxcbiAgICBib3JkZXJXaWR0aDogMixcbiAgfSxcbn0pO1xuXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLHNC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O0VBRUgsT0FDRSxJQUFBeEMsV0FBQSxDQUFBaUQsSUFBQSxFQUFDckQsWUFBQSxDQUFBc0QsSUFBSTtJQUFDQyxLQUFLLEVBQUVDLE1BQU0sQ0FBQ0MsSUFBSztJQUFBQyxRQUFBLEdBQ3ZCLElBQUF0RCxXQUFBLENBQUF1RCxHQUFBLEVBQUMxRCxzQkFBQSxDQUFBYyxPQUFRLENBQUN1QyxJQUFJO01BQ1pNLGFBQWEsRUFBQyxNQUFNO01BQ3BCTCxLQUFLLEVBQUUsQ0FBQ0MsTUFBTSxDQUFDakIsSUFBSSxFQUFFO1FBQUVzQixXQUFXLEVBQUVDLG1CQUFLLENBQUNDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLEdBQUc7TUFBRSxDQUFDLEVBQUV6QixJQUFJO0lBQUUsQ0FDeEUsQ0FBQyxFQUNGLElBQUFuQyxXQUFBLENBQUF1RCxHQUFBLEVBQUMzRCxZQUFBLENBQUFpRSxNQUFNO01BQ0xsQyxLQUFLLEVBQUVBLEtBQU07TUFDYkUsUUFBUSxFQUFFQSxRQUFTO01BQ25CRCxhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBRWtDLENBQUMsRUFBSTtRQUNsQmhFLE9BQU8sQ0FBQ2lFLGNBQWMsQ0FBQyxDQUFDO1FBQ3hCbkMsY0FBYSxDQUFDa0MsQ0FBQyxDQUFDO01BQ2xCLENBQUU7TUFDRkUsVUFBVSxFQUFFO1FBQUVDLEtBQUssRUFBRVAsbUJBQUssQ0FBQ0MsTUFBTSxDQUFDTyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQUVDLElBQUksRUFBRTtNQUFVLENBQUU7TUFDbEVDLFVBQVUsRUFBRXpDLEtBQUssR0FBRytCLG1CQUFLLENBQUNDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHRixtQkFBSyxDQUFDQyxNQUFNLENBQUNPLE9BQU8sQ0FBQyxHQUFHO0lBQUUsQ0FDM0UsQ0FBQztFQUFBLENBQ0UsQ0FBQztBQUVYO0FBRUEsSUFBTWQsTUFBTSxHQUFHaUIsdUJBQVUsQ0FBQ0MsTUFBTSxDQUFDO0VBQy9CakIsSUFBSSxFQUFFO0lBQUVrQixVQUFVLEVBQUUsUUFBUTtJQUFFQyxjQUFjLEVBQUU7RUFBUyxDQUFDO0VBQ3hEckMsSUFBSSxFQUFFO0lBQ0pzQyxRQUFRLEVBQUUsVUFBVTtJQUNwQkMsS0FBSyxFQUFFLEVBQUU7SUFDVEMsTUFBTSxFQUFFLEVBQUU7SUFDVkMsWUFBWSxFQUFFLEVBQUU7SUFDaEJDLFdBQVcsRUFBRTtFQUNmO0FBQ0YsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119