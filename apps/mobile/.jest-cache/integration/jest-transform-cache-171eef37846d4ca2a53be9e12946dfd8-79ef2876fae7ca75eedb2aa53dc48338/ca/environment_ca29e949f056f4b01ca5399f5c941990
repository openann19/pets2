ca7f63cf66eb0112d8a4edbd2c660a52
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isStaging = exports.isProduction = exports.isDevelopment = exports.config = exports.SOCKET_URL = exports.ENVIRONMENT = exports.ENABLE_LOGGING = exports.ENABLE_ANALYTICS = exports.API_URL = exports.API_TIMEOUT = exports.API_BASE_URL = exports.AI_SERVICE_URL = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var defaultConfig = {
  API_BASE_URL: "http://localhost:5001",
  SOCKET_URL: "http://localhost:5001",
  AI_SERVICE_URL: "http://localhost:8000",
  ENVIRONMENT: "development",
  ENABLE_LOGGING: true,
  ENABLE_ANALYTICS: false,
  API_TIMEOUT: 30000
};
var environments = {
  development: {
    API_BASE_URL: "http://localhost:5001",
    SOCKET_URL: "http://localhost:5001",
    AI_SERVICE_URL: "http://localhost:8000",
    ENVIRONMENT: "development",
    ENABLE_LOGGING: true,
    ENABLE_ANALYTICS: false,
    API_TIMEOUT: 30000
  },
  staging: {
    API_BASE_URL: "https://api-staging.pawfectmatch.com",
    SOCKET_URL: "https://api-staging.pawfectmatch.com",
    AI_SERVICE_URL: "https://ai-staging.pawfectmatch.com",
    ENVIRONMENT: "staging",
    ENABLE_LOGGING: true,
    ENABLE_ANALYTICS: true,
    API_TIMEOUT: 30000
  },
  production: {
    API_BASE_URL: "https://api.pawfectmatch.com",
    SOCKET_URL: "https://api.pawfectmatch.com",
    AI_SERVICE_URL: "https://ai.pawfectmatch.com",
    ENVIRONMENT: "production",
    ENABLE_LOGGING: false,
    ENABLE_ANALYTICS: true,
    API_TIMEOUT: 15000
  }
};
var getCurrentEnvironment = function getCurrentEnvironment() {
  if (__DEV__) {
    return "development";
  }
  return process.env.NODE_ENV || "development";
};
var currentEnv = getCurrentEnvironment();
var envConfig = environments[currentEnv] || {};
var config = exports.config = _objectSpread(_objectSpread({}, defaultConfig), envConfig);
var API_BASE_URL = exports.API_BASE_URL = config.API_BASE_URL,
  SOCKET_URL = exports.SOCKET_URL = config.SOCKET_URL,
  AI_SERVICE_URL = exports.AI_SERVICE_URL = config.AI_SERVICE_URL,
  ENVIRONMENT = exports.ENVIRONMENT = config.ENVIRONMENT,
  ENABLE_LOGGING = exports.ENABLE_LOGGING = config.ENABLE_LOGGING,
  ENABLE_ANALYTICS = exports.ENABLE_ANALYTICS = config.ENABLE_ANALYTICS,
  API_TIMEOUT = exports.API_TIMEOUT = config.API_TIMEOUT;
var API_URL = exports.API_URL = API_BASE_URL;
var isDevelopment = exports.isDevelopment = function isDevelopment() {
  return ENVIRONMENT === "development";
};
var isStaging = exports.isStaging = function isStaging() {
  return ENVIRONMENT === "staging";
};
var isProduction = exports.isProduction = function isProduction() {
  return ENVIRONMENT === "production";
};
if (isDevelopment() && ENABLE_LOGGING) {
  void Promise.resolve().then(function () {
    return _interopRequireWildcard(require("../services/logger"));
  }).then(function (_ref) {
    var logger = _ref.logger;
    logger.info("ðŸ”§ Environment Configuration", {
      environment: ENVIRONMENT,
      apiBaseUrl: API_BASE_URL,
      socketUrl: SOCKET_URL,
      aiServiceUrl: AI_SERVICE_URL,
      logging: ENABLE_LOGGING,
      analytics: ENABLE_ANALYTICS
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,