{"version":3,"names":["_react","require","_native","Haptics","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","scrollToTop","listRef","node","current","scrollToOffset","offset","animated","scrollTo","y","scrollToIndex","index","useTabReselectRefresh","opts","onRefresh","getOffset","_opts$topThreshold","topThreshold","_opts$cooldownMs","cooldownMs","_opts$haptics","haptics","_opts$nearTopAction","nearTopAction","navigation","useNavigation","isFocused","useIsFocused","canTrigger","useMemo","last","now","Date","useEffect","handleTabPress","_getOffset","farFromTop","impactAsync","ImpactFeedbackStyle","Light","Medium","handleTabDoublePress","Heavy","sub1","addListener","sub2"],"sources":["useTabReselectRefresh.ts"],"sourcesContent":["import { useEffect, useMemo } from \"react\";\nimport { useNavigation, useIsFocused } from \"@react-navigation/native\";\nimport * as Haptics from \"expo-haptics\";\n\ntype AnyScrollRef =\n  | React.RefObject<{ scrollToOffset?: (p: { offset: number; animated: boolean }) => void }>\n  | React.RefObject<{ scrollTo?: (p: { y: number; animated: boolean }) => void }>\n  | React.RefObject<{ scrollToIndex?: (p: { index: number; animated: boolean }) => void }>;\n\nexport interface UseTabReselectRefreshOptions {\n  /** Required: ref to FlatList/ScrollView/SectionList */\n  listRef: AnyScrollRef;\n  /** Required: refresh callback */\n  onRefresh: () => void | Promise<void>;\n  /** Optional: return current Y offset */\n  getOffset?: () => number;\n  /** Pixels above which single-tap reselect will scroll-to-top instead of refreshing */\n  topThreshold?: number;            // default 120\n  /** Double-tap window (ms) – handled by TabBar, exposed for docs */\n  doubleTapMs?: number;             // default 300\n  /** Prevent spam triggering (ms) */\n  cooldownMs?: number;              // default 700\n  /** Haptics toggle */\n  haptics?: boolean;                // default true\n  /** What to do on single reselect when near top */\n  nearTopAction?: \"refresh\" | \"none\"; // default \"refresh\"\n}\n\nfunction scrollToTop(listRef: AnyScrollRef) {\n  const node = listRef.current as any;\n  if (!node) return;\n  if (typeof node.scrollToOffset === \"function\") {\n    node.scrollToOffset({ offset: 0, animated: true });\n  } else if (typeof node.scrollTo === \"function\") {\n    node.scrollTo({ y: 0, animated: true });\n  } else if (typeof node.scrollToIndex === \"function\") {\n    node.scrollToIndex({ index: 0, animated: true });\n  }\n}\n\nexport function useTabReselectRefresh(opts: UseTabReselectRefreshOptions) {\n  const {\n    listRef,\n    onRefresh,\n    getOffset,\n    topThreshold = 120,\n    cooldownMs = 700,\n    haptics = true,\n    nearTopAction = \"refresh\",\n  } = opts;\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n\n  // Simple cooldown\n  const canTrigger = useMemo(() => {\n    let last = 0;\n    return () => {\n      const now = Date.now();\n      if (now - last < cooldownMs) return false;\n      last = now;\n      return true;\n    };\n  }, [cooldownMs]);\n\n  useEffect(() => {\n    // SINGLE TAP on active tab → reselect\n    const handleTabPress = () => {\n      if (!isFocused) return;           // only the active screen handles \"reselect\"\n      if (!canTrigger()) return;\n\n      const offset = getOffset?.() ?? 0;\n      const farFromTop = offset > topThreshold;\n\n      if (farFromTop) {\n        if (haptics) Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n        scrollToTop(listRef);\n      } else if (nearTopAction === \"refresh\") {\n        if (haptics) Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n        onRefresh();\n      }\n    };\n\n    // DOUBLE TAP on active tab → snap top + refresh\n    const handleTabDoublePress = () => {\n      if (!isFocused) return;\n      if (!canTrigger()) return;\n      if (haptics) Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n      scrollToTop(listRef);\n      onRefresh();\n    };\n\n    // Try to subscribe to events, but handle if types don't exist\n    const sub1 = (navigation as unknown as { addListener?: (name: string, handler: () => void) => () => void }).addListener?.(\"tabPress\", handleTabPress);\n    const sub2 = (navigation as unknown as { addListener?: (name: string, handler: () => void) => () => void }).addListener?.(\"tabDoublePress\", handleTabDoublePress);\n\n    return () => {\n      if (sub1) sub1();\n      if (sub2) sub2();\n    };\n  }, [navigation, isFocused, listRef, onRefresh, getOffset, topThreshold, canTrigger, haptics, nearTopAction]);\n}\n"],"mappings":"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","ignoreList":[]}