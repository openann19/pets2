5d877db22154db96d02ba8743856612e
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../../hooks/screens/useModernSwipeScreen");
_getJestObj().mock("../../../services/api", function () {
  return {
    matchesAPI: {
      getPets: jest.fn(),
      createMatch: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _ModernSwipeScreen = _interopRequireDefault(require("../../../screens/ModernSwipeScreen"));
var _useModernSwipeScreen = require("../../../hooks/screens/useModernSwipeScreen");
var matchesAPI = _interopRequireWildcard(require("../../../services/api"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var mockPet1 = {
  _id: 'pet1',
  name: 'Buddy',
  age: 3,
  breed: 'Golden Retriever',
  photos: [{
    url: 'photo1.jpg',
    order: 1
  }],
  description: 'Friendly and playful',
  owner: 'user1',
  species: 'dog',
  createdAt: new Date(),
  updatedAt: new Date()
};
var mockPet2 = {
  _id: 'pet2',
  name: 'Max',
  age: 2,
  breed: 'Labrador',
  photos: [{
    url: 'photo2.jpg',
    order: 1
  }],
  description: 'Energetic and fun',
  owner: 'user2',
  species: 'dog',
  createdAt: new Date(),
  updatedAt: new Date()
};
describe('Swipe Screen Integration', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    _asyncStorage.default.getItem.mockResolvedValue(null);
    matchesAPI.matchesAPI.getPets.mockResolvedValue([mockPet1, mockPet2]);
    matchesAPI.matchesAPI.createMatch.mockResolvedValue({
      _id: 'match1'
    });
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('Component Integration', function () {
    it('should render all components together', function () {
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [mockPet1, mockPet2],
        currentPet: mockPet1,
        isLoading: false,
        error: null,
        currentIndex: 0,
        showMatchModal: false,
        matchedPet: null,
        showFilters: false,
        filters: {},
        setCurrentIndex: jest.fn(),
        setShowMatchModal: jest.fn(),
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: jest.fn(),
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        getByText = _render.getByText;
      expect(getByText('Discover')).toBeTruthy();
    });
    it('should show gesture hints on first launch', (0, _asyncToGenerator2.default)(function* () {
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [mockPet1, mockPet2],
        currentPet: mockPet1,
        isLoading: false,
        error: null,
        currentIndex: 0,
        showMatchModal: false,
        matchedPet: null,
        showFilters: false,
        filters: {},
        setCurrentIndex: jest.fn(),
        setShowMatchModal: jest.fn(),
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: jest.fn(),
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        findByText = _render2.findByText;
      yield (0, _reactNative.waitFor)((0, _asyncToGenerator2.default)(function* () {
        var hint = yield findByText('Swipe left to pass');
        expect(hint).toBeTruthy();
      }));
    }));
    it('should show peek sheet when next pet exists', function () {
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [mockPet1, mockPet2],
        currentPet: mockPet1,
        isLoading: false,
        error: null,
        currentIndex: 0,
        showMatchModal: false,
        matchedPet: null,
        showFilters: false,
        filters: {},
        setCurrentIndex: jest.fn(),
        setShowMatchModal: jest.fn(),
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: jest.fn(),
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        container = _render3.container;
      expect(container).toBeTruthy();
    });
  });
  describe('Match Flow', function () {
    it('should show confetti burst on match', (0, _asyncToGenerator2.default)(function* () {
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [mockPet1, mockPet2],
        currentPet: mockPet1,
        isLoading: false,
        error: null,
        currentIndex: 0,
        showMatchModal: true,
        matchedPet: mockPet1,
        showFilters: false,
        filters: {},
        setCurrentIndex: jest.fn(),
        setShowMatchModal: jest.fn(),
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: jest.fn(),
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        UNSAFE_getAllByType = _render4.UNSAFE_getAllByType,
        getByText = _render4.getByText;
      expect(getByText("It's a Match! ðŸŽ‰")).toBeTruthy();
      var views = UNSAFE_getAllByType('View');
      expect(views.length).toBeGreaterThan(0);
    }));
    it('should call onSendMessage to navigate to chat', function () {
      var mockSetShowMatchModal = jest.fn();
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [mockPet1, mockPet2],
        currentPet: mockPet1,
        isLoading: false,
        error: null,
        currentIndex: 0,
        showMatchModal: true,
        matchedPet: mockPet1,
        showFilters: false,
        filters: {},
        setCurrentIndex: jest.fn(),
        setShowMatchModal: mockSetShowMatchModal,
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: jest.fn(),
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        getByText = _render5.getByText;
      var sendMessageButton = getByText('Send Message');
      _reactNative.fireEvent.press(sendMessageButton);
      expect(mockSetShowMatchModal).toHaveBeenCalledWith(false);
      expect(mockNavigation.navigate).toHaveBeenCalledWith('Chat', {
        matchId: mockPet1._id,
        petName: mockPet1.name
      });
    });
    it('should call onKeepSwiping to dismiss modal', function () {
      var mockSetShowMatchModal = jest.fn();
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [mockPet1, mockPet2],
        currentPet: mockPet1,
        isLoading: false,
        error: null,
        currentIndex: 0,
        showMatchModal: true,
        matchedPet: mockPet1,
        showFilters: false,
        filters: {},
        setCurrentIndex: jest.fn(),
        setShowMatchModal: mockSetShowMatchModal,
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: jest.fn(),
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        getByText = _render6.getByText;
      var keepSwipingButton = getByText('Keep Swiping');
      _reactNative.fireEvent.press(keepSwipingButton);
      expect(mockSetShowMatchModal).toHaveBeenCalledWith(false);
    });
  });
  describe('Swipe Actions', function () {
    it('should call handleButtonSwipe on like button press', function () {
      var mockHandleButtonSwipe = jest.fn();
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [mockPet1, mockPet2],
        currentPet: mockPet1,
        isLoading: false,
        error: null,
        currentIndex: 0,
        showMatchModal: false,
        matchedPet: null,
        showFilters: false,
        filters: {},
        setCurrentIndex: jest.fn(),
        setShowMatchModal: jest.fn(),
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: mockHandleButtonSwipe,
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        UNSAFE_getAllByType = _render7.UNSAFE_getAllByType;
      var buttons = UNSAFE_getAllByType('Pressable');
      expect(buttons.length).toBeGreaterThan(0);
    });
  });
  describe('Loading and Error States', function () {
    it('should show loading state when loading', function () {
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [],
        currentPet: null,
        isLoading: true,
        error: null,
        currentIndex: 0,
        showMatchModal: false,
        matchedPet: null,
        showFilters: false,
        filters: {},
        setCurrentIndex: jest.fn(),
        setShowMatchModal: jest.fn(),
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: jest.fn(),
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        getByText = _render8.getByText;
      expect(getByText('Finding Matches')).toBeTruthy();
    });
    it('should show error state when error occurs', function () {
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [],
        currentPet: null,
        isLoading: false,
        error: 'Failed to load pets',
        currentIndex: 0,
        showMatchModal: false,
        matchedPet: null,
        showFilters: false,
        filters: {},
        setCurrentIndex: jest.fn(),
        setShowMatchModal: jest.fn(),
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: jest.fn(),
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        getByText = _render9.getByText;
      expect(getByText('Error loading pets')).toBeTruthy();
    });
    it('should show empty state when no more pets', function () {
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [],
        currentPet: null,
        isLoading: false,
        error: null,
        currentIndex: 0,
        showMatchModal: false,
        matchedPet: null,
        showFilters: false,
        filters: {},
        setCurrentIndex: jest.fn(),
        setShowMatchModal: jest.fn(),
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: jest.fn(),
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        getByText = _render0.getByText;
      expect(getByText('No more pets!')).toBeTruthy();
    });
  });
  describe('Filter Panel', function () {
    it('should show filters when showFilters is true', function () {
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [mockPet1, mockPet2],
        currentPet: mockPet1,
        isLoading: false,
        error: null,
        currentIndex: 0,
        showMatchModal: false,
        matchedPet: null,
        showFilters: true,
        filters: {
          breed: 'Golden Retriever'
        },
        setCurrentIndex: jest.fn(),
        setShowMatchModal: jest.fn(),
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: jest.fn(),
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        container = _render1.container;
      expect(container).toBeTruthy();
    });
  });
  describe('Complete User Flow', function () {
    it('should handle full swipe session', (0, _asyncToGenerator2.default)(function* () {
      var mockSetShowMatchModal = jest.fn();
      var mockSetCurrentIndex = jest.fn();
      var mockHandleButtonSwipe = jest.fn();
      _useModernSwipeScreen.useModernSwipeScreen.mockReturnValue({
        pets: [mockPet1, mockPet2],
        currentPet: mockPet1,
        isLoading: false,
        error: null,
        currentIndex: 0,
        showMatchModal: false,
        matchedPet: null,
        showFilters: false,
        filters: {},
        setCurrentIndex: mockSetCurrentIndex,
        setShowMatchModal: mockSetShowMatchModal,
        setShowFilters: jest.fn(),
        setFilters: jest.fn(),
        loadPets: jest.fn(),
        handleButtonSwipe: mockHandleButtonSwipe,
        handleSwipeLeft: jest.fn(),
        handleSwipeRight: jest.fn(),
        handleSwipeUp: jest.fn()
      });
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernSwipeScreen.default, {
          navigation: mockNavigation
        })),
        container = _render10.container;
      expect(container).toBeTruthy();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,