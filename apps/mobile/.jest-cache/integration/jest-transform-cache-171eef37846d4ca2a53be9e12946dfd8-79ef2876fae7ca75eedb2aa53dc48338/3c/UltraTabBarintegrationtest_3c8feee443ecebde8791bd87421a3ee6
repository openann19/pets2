757ccaecc40d3ad4e2351fffefb4d83d
"use strict";

_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _bottomTabs = require("@react-navigation/bottom-tabs");
var _reactNative2 = require("@testing-library/react-native");
var _UltraTabBar = _interopRequireDefault(require("../UltraTabBar"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var Tab = (0, _bottomTabs.createBottomTabNavigator)();
var TestScreen = function TestScreen(_ref) {
  var name = _ref.name;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    testID: `screen-${name}`,
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      children: name
    })
  });
};
function createTestNavigator() {
  var initialRouteName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Home";
  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsxs)(Tab.Navigator, {
      tabBar: function tabBar(props) {
        return (0, _jsxRuntime.jsx)(_UltraTabBar.default, _objectSpread({}, props));
      },
      initialRouteName: initialRouteName,
      children: [(0, _jsxRuntime.jsx)(Tab.Screen, {
        name: "Home",
        component: function component() {
          return (0, _jsxRuntime.jsx)(TestScreen, {
            name: "Home"
          });
        },
        options: {
          tabBarLabel: "Home"
        }
      }), (0, _jsxRuntime.jsx)(Tab.Screen, {
        name: "Swipe",
        component: function component() {
          return (0, _jsxRuntime.jsx)(TestScreen, {
            name: "Swipe"
          });
        },
        options: {
          tabBarLabel: "Swipe"
        }
      }), (0, _jsxRuntime.jsx)(Tab.Screen, {
        name: "Matches",
        component: function component() {
          return (0, _jsxRuntime.jsx)(TestScreen, {
            name: "Matches"
          });
        },
        options: {
          tabBarLabel: "Matches"
        }
      }), (0, _jsxRuntime.jsx)(Tab.Screen, {
        name: "Map",
        component: function component() {
          return (0, _jsxRuntime.jsx)(TestScreen, {
            name: "Map"
          });
        },
        options: {
          tabBarLabel: "Map"
        }
      }), (0, _jsxRuntime.jsx)(Tab.Screen, {
        name: "Profile",
        component: function component() {
          return (0, _jsxRuntime.jsx)(TestScreen, {
            name: "Profile"
          });
        },
        options: {
          tabBarLabel: "Profile"
        }
      })]
    })
  });
}
describe("UltraTabBar Integration Tests", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe("Rendering and Initial State", function () {
    it("renders all tabs with correct labels", function () {
      var _render = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render.getByText;
      expect(getByText("Home")).toBeTruthy();
      expect(getByText("Swipe")).toBeTruthy();
      expect(getByText("Matches")).toBeTruthy();
      expect(getByText("Map")).toBeTruthy();
      expect(getByText("Profile")).toBeTruthy();
    });
    it("renders with blur view wrapper", function () {
      var _render2 = (0, _reactNative2.render)(createTestNavigator()),
        UNSAFE_getByType = _render2.UNSAFE_getByType;
      var blurViews = UNSAFE_getByType("BlurView");
      expect(blurViews).toBeTruthy();
    });
    it("shows active indicator with animated underline", function () {
      var _render3 = (0, _reactNative2.render)(createTestNavigator()),
        UNSAFE_getByType = _render3.UNSAFE_getByType;
      var animatedViews = UNSAFE_getByType("Animated.View");
      expect(animatedViews.length).toBeGreaterThan(0);
    });
    it("displays badges for tabs with counts", function () {
      var _render4 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render4.getByText;
      expect(getByText("3")).toBeTruthy();
      expect(getByText("1")).toBeTruthy();
      expect(getByText("2")).toBeTruthy();
    });
  });
  describe("Navigation", function () {
    it("navigates to different tab on press", (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render5.getByText,
        getByTestId = _render5.getByTestId;
      expect(getByTestId("screen-Home")).toBeTruthy();
      var swipeButton = getByText("Swipe");
      _reactNative2.fireEvent.press(swipeButton);
      yield (0, _reactNative2.waitFor)(function () {
        expect(getByTestId("screen-Swipe")).toBeTruthy();
      });
    }));
    it("handles multiple tab switches", (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render6.getByText,
        getByTestId = _render6.getByTestId;
      expect(getByTestId("screen-Home")).toBeTruthy();
      _reactNative2.fireEvent.press(getByText("Matches"));
      yield (0, _reactNative2.waitFor)(function () {
        expect(getByTestId("screen-Matches")).toBeTruthy();
      });
      _reactNative2.fireEvent.press(getByText("Profile"));
      yield (0, _reactNative2.waitFor)(function () {
        expect(getByTestId("screen-Profile")).toBeTruthy();
      });
      _reactNative2.fireEvent.press(getByText("Home"));
      yield (0, _reactNative2.waitFor)(function () {
        expect(getByTestId("screen-Home")).toBeTruthy();
      });
    }));
    it("triggers haptic feedback on tab press", function () {
      var _render7 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render7.getByText;
      _reactNative2.fireEvent.press(getByText("Swipe"));
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Light);
    });
    it("triggers medium haptic feedback on same tab reselect", function () {
      var _render8 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render8.getByText;
      _reactNative2.fireEvent.press(getByText("Home"));
      jest.clearAllMocks();
      _reactNative2.fireEvent.press(getByText("Home"));
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Medium);
    });
  });
  describe("Accessibility", function () {
    it("has proper accessibility labels", function () {
      var _render9 = (0, _reactNative2.render)(createTestNavigator()),
        getByLabelText = _render9.getByLabelText;
      expect(getByLabelText("Home tab")).toBeTruthy();
      expect(getByLabelText("Swipe tab")).toBeTruthy();
      expect(getByLabelText("Matches tab")).toBeTruthy();
      expect(getByLabelText("Map tab")).toBeTruthy();
      expect(getByLabelText("Profile tab")).toBeTruthy();
    });
    it("sets correct accessibility state for active tab", function () {
      var _homeTab$props$access;
      var _render0 = (0, _reactNative2.render)(createTestNavigator()),
        getByLabelText = _render0.getByLabelText;
      var homeTab = getByLabelText("Home tab");
      expect((_homeTab$props$access = homeTab.props.accessibilityState) == null ? void 0 : _homeTab$props$access.selected).toBe(true);
    });
    it("updates accessibility state on tab switch", (0, _asyncToGenerator2.default)(function* () {
      var _getByLabelText$props;
      var _render1 = (0, _reactNative2.render)(createTestNavigator()),
        getByLabelText = _render1.getByLabelText,
        getByText = _render1.getByText;
      expect((_getByLabelText$props = getByLabelText("Home tab").props.accessibilityState) == null ? void 0 : _getByLabelText$props.selected).toBe(true);
      _reactNative2.fireEvent.press(getByText("Swipe"));
      yield (0, _reactNative2.waitFor)(function () {
        var _getByLabelText$props2, _getByLabelText$props3;
        expect((_getByLabelText$props2 = getByLabelText("Swipe tab").props.accessibilityState) == null ? void 0 : _getByLabelText$props2.selected).toBe(true);
        expect((_getByLabelText$props3 = getByLabelText("Home tab").props.accessibilityState) == null ? void 0 : _getByLabelText$props3.selected).toBeUndefined();
      });
    }));
  });
  describe("Badge Functionality", function () {
    it("shows badge with correct count", function () {
      var _render10 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render10.getByText;
      expect(getByText("3")).toBeTruthy();
      expect(getByText("1")).toBeTruthy();
      expect(getByText("2")).toBeTruthy();
    });
    it("hides badge when count is 0", function () {
      var _render11 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render11.getByText;
      expect(function () {
        return getByText("0");
      }).toThrow();
    });
    it("displays 99+ for counts over 99", function () {});
  });
  describe("Long Press Events", function () {
    it("emits long press event", function () {
      var _render12 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render12.getByText;
      var homeTab = getByText("Home");
      (0, _reactNative2.fireEvent)(homeTab, "longPress");
    });
  });
  describe("Visual Effects", function () {
    it("applies blur view with correct intensity", function () {
      var _render13 = (0, _reactNative2.render)(createTestNavigator()),
        UNSAFE_getByType = _render13.UNSAFE_getByType;
      var blurView = UNSAFE_getByType("BlurView");
      expect(blurView).toBeTruthy();
    });
    it("has proper styling with shadows and elevation", function () {
      var _render14 = (0, _reactNative2.render)(createTestNavigator()),
        UNSAFE_getByType = _render14.UNSAFE_getByType;
      var blurView = UNSAFE_getByType("BlurView");
      expect(blurView).toBeTruthy();
    });
    it("animates icon scale on focus", (0, _asyncToGenerator2.default)(function* () {
      var _render15 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render15.getByText;
      var homeIcon = getByText("Home").parent;
      expect(homeIcon).toBeTruthy();
    }));
    it("renders spotlight pulse on press", function () {
      var _render16 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render16.getByText;
      _reactNative2.fireEvent.press(getByText("Swipe"));
    });
    it("renders breathing underline indicator", function () {
      var _render17 = (0, _reactNative2.render)(createTestNavigator()),
        UNSAFE_getByType = _render17.UNSAFE_getByType;
      var animatedViews = UNSAFE_getByType("Animated.View");
      expect(animatedViews.length).toBeGreaterThan(0);
    });
  });
  describe("Layout and Responsiveness", function () {
    it("handles safe area insets", function () {
      var _render18 = (0, _reactNative2.render)(createTestNavigator()),
        container = _render18.container;
      expect(container).toBeTruthy();
    });
    it("measures tab positions for accurate animations", function () {
      var _render19 = (0, _reactNative2.render)(createTestNavigator()),
        UNSAFE_getByType = _render19.UNSAFE_getByType;
      var tabButtons = UNSAFE_getByType("TouchableOpacity");
      expect(tabButtons.length).toBeGreaterThan(0);
    });
    it("adapts to different screen sizes", function () {});
  });
  describe("Performance", function () {
    it("does not create unnecessary re-renders", function () {
      var _render20 = (0, _reactNative2.render)(createTestNavigator()),
        rerender = _render20.rerender;
      rerender(createTestNavigator());
    });
    it("handles rapid tab switching smoothly", (0, _asyncToGenerator2.default)(function* () {
      var _render21 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render21.getByText;
      for (var i = 0; i < 5; i++) {
        _reactNative2.fireEvent.press(getByText("Home"));
        _reactNative2.fireEvent.press(getByText("Swipe"));
        _reactNative2.fireEvent.press(getByText("Profile"));
      }
      yield (0, _reactNative2.waitFor)(function () {
        expect(true).toBe(true);
      });
    }));
  });
  describe("Error Handling", function () {
    it("gracefully handles missing route descriptors", function () {});
    it("handles navigation errors without crashing", function () {});
  });
  describe("Theme Support", function () {
    it("adapts to dark theme", function () {});
    it("adapts to light theme", function () {});
    it("updates colors on theme change", function () {});
  });
  describe("Animation States", function () {
    it("animates indicator position on tab change", (0, _asyncToGenerator2.default)(function* () {
      var _render22 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render22.getByText;
      _reactNative2.fireEvent.press(getByText("Swipe"));
      yield (0, _reactNative2.waitFor)(function () {
        expect(getByText("Swipe").parent).toBeTruthy();
      });
    }));
    it("animates badge appearance", function () {
      var _render23 = (0, _reactNative2.render)(createTestNavigator()),
        getByText = _render23.getByText;
      expect(getByText("3")).toBeTruthy();
    });
    it("applies breathing animation to active indicator", function () {
      var _render24 = (0, _reactNative2.render)(createTestNavigator()),
        UNSAFE_getByType = _render24.UNSAFE_getByType;
      var animatedViews = UNSAFE_getByType("Animated.View");
      expect(animatedViews).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,