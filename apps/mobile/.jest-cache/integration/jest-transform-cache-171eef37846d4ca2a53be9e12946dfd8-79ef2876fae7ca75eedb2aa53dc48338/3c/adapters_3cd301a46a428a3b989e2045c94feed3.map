{"version":3,"names":["getExtendedColors","theme","colors","isDark","scheme","_objectSpread","background","bg","surface","surfaceElevated","bgElevated","card","textSecondary","textMuted","interactive","primary","feedback","success","white","black","gray50","gray100","gray200","gray300","gray400","gray500","gray600","gray700","gray800","gray900","gray950","primaryLight","primaryDark","secondary","secondaryLight","secondaryDark","accent","accentLight","accentDark","glass","glassLight","glassWhite","glassWhiteLight","glassWhiteDark","glassDark","glassDarkMedium","glassDarkStrong","info","error","danger","tertiary","warning","inverse","shadow","getThemeColors","getIsDark"],"sources":["adapters.ts"],"sourcesContent":["/**\n * ðŸŽ¨ THEME ADAPTER UTILITIES\n * Bridges old theme API with new unified theme\n * Allows gradual migration without breaking existing code\n */\n\nimport type { Theme, SemanticColors } from \"./types\";\n\n/**\n * Extended color palette for backward compatibility\n * Adds properties that components expect from the old theme\n */\nexport interface ExtendedColors extends SemanticColors {\n  // Background variants\n  background: string;\n  surface: string;\n  surfaceElevated: string;\n  card: string;\n  \n  // Text variants\n  textSecondary: string;\n  \n  // Color variants\n  white: string;\n  black: string;\n  gray50: string;\n  gray100: string;\n  gray200: string;\n  gray300: string;\n  gray400: string;\n  gray500: string;\n  gray600: string;\n  gray700: string;\n  gray800: string;\n  gray900: string;\n  gray950: string;\n  \n  // Primary variants\n  primaryLight: string;\n  primaryDark: string;\n  \n  // Secondary variants\n  secondary: string;\n  secondaryLight: string;\n  secondaryDark: string;\n  \n  // Accent variants\n  accent: string;\n  accentLight: string;\n  accentDark: string;\n  \n  // Glass effects\n  glass: string;\n  glassLight: string;\n  glassWhite: string;\n  glassWhiteLight: string;\n  glassWhiteDark: string;\n  glassDark: string;\n  glassDarkMedium: string;\n  glassDarkStrong: string;\n  \n  // Status colors\n  info: string;\n  error: string;\n  \n  // Additional properties\n  tertiary: string;\n  inverse: string;\n  shadow: string;\n}\n\n/**\n * Adapter function to convert unified theme to extended colors\n * Provides backward compatibility for old component API\n */\nexport function getExtendedColors(theme: Theme): ExtendedColors {\n  const { colors } = theme;\n  const isDark = theme.scheme === \"dark\";\n  \n  return {\n    // Core semantic colors\n    ...colors,\n    \n    // Background aliases\n    background: colors.bg,\n    surface: colors.bg,\n    surfaceElevated: colors.bgElevated,\n    card: colors.bgElevated,\n    \n    // Text aliases\n    textSecondary: colors.textMuted,\n    interactive: colors.primary,\n    feedback: colors.success,\n    \n    // Monochrome palette\n    white: \"#ffffff\",\n    black: \"#000000\",\n    gray50: \"#fafafa\",\n    gray100: \"#f5f5f5\",\n    gray200: \"#e5e5e5\",\n    gray300: \"#d4d4d4\",\n    gray400: \"#a3a3a3\",\n    gray500: \"#737373\",\n    gray600: \"#525252\",\n    gray700: \"#404040\",\n    gray800: \"#262626\",\n    gray900: \"#171717\",\n    gray950: \"#0a0a0a\",\n    \n    // Primary variants (can be customized based on brand)\n    primaryLight: isDark ? \"#fce7f3\" : \"#ec4899\",\n    primaryDark: isDark ? \"#831843\" : \"#be185d\",\n    \n    // Secondary variants\n    secondary: \"#a855f7\",\n    secondaryLight: isDark ? \"#f3e8ff\" : \"#9333ea\",\n    secondaryDark: isDark ? \"#581c87\" : \"#7e22ce\",\n    \n    // Accent variants\n    accent: \"#10b981\",\n    accentLight: isDark ? \"#dcfce7\" : \"#059669\",\n    accentDark: isDark ? \"#064e3b\" : \"#047857\",\n    \n    // Glass effects\n    glass: isDark ? \"rgba(255, 255, 255, 0.1)\" : \"rgba(255, 255, 255, 0.8)\",\n    glassLight: isDark ? \"rgba(255, 255, 255, 0.05)\" : \"rgba(255, 255, 255, 0.6)\",\n    glassWhite: isDark ? \"rgba(255, 255, 255, 0.05)\" : \"rgba(255, 255, 255, 0.9)\",\n    glassWhiteLight: isDark ? \"rgba(255, 255, 255, 0.1)\" : \"rgba(255, 255, 255, 0.95)\",\n    glassWhiteDark: isDark ? \"rgba(255, 255, 255, 0.2)\" : \"rgba(255, 255, 255, 0.98)\",\n    glassDark: isDark ? \"rgba(0, 0, 0, 0.8)\" : \"rgba(0, 0, 0, 0.9)\",\n    glassDarkMedium: isDark ? \"rgba(0, 0, 0, 0.6)\" : \"rgba(0, 0, 0, 0.7)\",\n    glassDarkStrong: isDark ? \"rgba(0, 0, 0, 0.4)\" : \"rgba(0, 0, 0, 0.5)\",\n    \n    // Status colors\n    info: \"#3b82f6\",\n    error: colors.danger,\n    \n    // Additional properties\n    tertiary: colors.warning,\n    inverse: isDark ? \"#ffffff\" : \"#000000\",\n    shadow: isDark ? \"rgba(0, 0, 0, 0.5)\" : \"rgba(0, 0, 0, 0.1)\",\n  };\n}\n\n/**\n * Helper to get theme colors with extensions\n * Usage: const extendedColors = getThemeColors(theme);\n */\nexport function getThemeColors(theme: Theme): ExtendedColors {\n  return getExtendedColors(theme);\n}\n\n/**\n * Check if theme is dark\n * Usage: const isDark = getIsDark(theme);\n */\nexport function getIsDark(theme: Theme): boolean {\n  return theme.scheme === \"dark\";\n}\n"],"mappings":";;;;;;;;;;;;AA2EO,SAASA,iBAAiBA,CAACC,KAAY,EAAkB;EAC9D,IAAQC,MAAM,GAAKD,KAAK,CAAhBC,MAAM;EACd,IAAMC,MAAM,GAAGF,KAAK,CAACG,MAAM,KAAK,MAAM;EAEtC,OAAAC,aAAA,CAAAA,aAAA,KAEKH,MAAM;IAGTI,UAAU,EAAEJ,MAAM,CAACK,EAAE;IACrBC,OAAO,EAAEN,MAAM,CAACK,EAAE;IAClBE,eAAe,EAAEP,MAAM,CAACQ,UAAU;IAClCC,IAAI,EAAET,MAAM,CAACQ,UAAU;IAGvBE,aAAa,EAAEV,MAAM,CAACW,SAAS;IAC/BC,WAAW,EAAEZ,MAAM,CAACa,OAAO;IAC3BC,QAAQ,EAAEd,MAAM,CAACe,OAAO;IAGxBC,KAAK,EAAE,SAAS;IAChBC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE,SAAS;IACjBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAGlBC,YAAY,EAAE5B,MAAM,GAAG,SAAS,GAAG,SAAS;IAC5C6B,WAAW,EAAE7B,MAAM,GAAG,SAAS,GAAG,SAAS;IAG3C8B,SAAS,EAAE,SAAS;IACpBC,cAAc,EAAE/B,MAAM,GAAG,SAAS,GAAG,SAAS;IAC9CgC,aAAa,EAAEhC,MAAM,GAAG,SAAS,GAAG,SAAS;IAG7CiC,MAAM,EAAE,SAAS;IACjBC,WAAW,EAAElC,MAAM,GAAG,SAAS,GAAG,SAAS;IAC3CmC,UAAU,EAAEnC,MAAM,GAAG,SAAS,GAAG,SAAS;IAG1CoC,KAAK,EAAEpC,MAAM,GAAG,0BAA0B,GAAG,0BAA0B;IACvEqC,UAAU,EAAErC,MAAM,GAAG,2BAA2B,GAAG,0BAA0B;IAC7EsC,UAAU,EAAEtC,MAAM,GAAG,2BAA2B,GAAG,0BAA0B;IAC7EuC,eAAe,EAAEvC,MAAM,GAAG,0BAA0B,GAAG,2BAA2B;IAClFwC,cAAc,EAAExC,MAAM,GAAG,0BAA0B,GAAG,2BAA2B;IACjFyC,SAAS,EAAEzC,MAAM,GAAG,oBAAoB,GAAG,oBAAoB;IAC/D0C,eAAe,EAAE1C,MAAM,GAAG,oBAAoB,GAAG,oBAAoB;IACrE2C,eAAe,EAAE3C,MAAM,GAAG,oBAAoB,GAAG,oBAAoB;IAGrE4C,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE9C,MAAM,CAAC+C,MAAM;IAGpBC,QAAQ,EAAEhD,MAAM,CAACiD,OAAO;IACxBC,OAAO,EAAEjD,MAAM,GAAG,SAAS,GAAG,SAAS;IACvCkD,MAAM,EAAElD,MAAM,GAAG,oBAAoB,GAAG;EAAoB;AAEhE;AAMO,SAASmD,cAAcA,CAACrD,KAAY,EAAkB;EAC3D,OAAOD,iBAAiB,CAACC,KAAK,CAAC;AACjC;AAMO,SAASsD,SAASA,CAACtD,KAAY,EAAW;EAC/C,OAAOA,KAAK,CAACG,MAAM,KAAK,MAAM;AAChC","ignoreList":[]}