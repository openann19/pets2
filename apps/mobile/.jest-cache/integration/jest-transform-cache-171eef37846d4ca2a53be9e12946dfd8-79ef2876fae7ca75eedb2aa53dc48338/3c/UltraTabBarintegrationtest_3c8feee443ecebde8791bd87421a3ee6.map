{"version":3,"names":["_getJestObj","mock","impactAsync","jest","fn","_interopRequireDefault","require","_asyncToGenerator2","_defineProperty2","_react","_reactNative","_native","_bottomTabs","_reactNative2","_UltraTabBar","Haptics","_interopRequireWildcard","_jsxRuntime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","_require","Tab","createBottomTabNavigator","TestScreen","_ref","name","jsx","View","testID","children","Text","createTestNavigator","initialRouteName","undefined","NavigationContainer","jsxs","Navigator","tabBar","props","Screen","component","options","tabBarLabel","describe","beforeEach","clearAllMocks","it","_render","render","getByText","expect","toBeTruthy","_render2","UNSAFE_getByType","blurViews","_render3","animatedViews","toBeGreaterThan","_render4","_render5","getByTestId","swipeButton","fireEvent","press","waitFor","_render6","_render7","toHaveBeenCalledWith","ImpactFeedbackStyle","Light","_render8","Medium","_render9","getByLabelText","_homeTab$props$access","_render0","homeTab","accessibilityState","selected","toBe","_getByLabelText$props","_render1","_getByLabelText$props2","_getByLabelText$props3","toBeUndefined","_render10","_render11","toThrow","_render12","_render13","blurView","_render14","_render15","homeIcon","parent","_render16","_render17","_render18","container","_render19","tabButtons","_render20","rerender","_render21","_render22","_render23","_render24"],"sources":["UltraTabBar.integration.test.tsx"],"sourcesContent":["/**\n * UltraTabBar Integration Tests\n * \n * Tests the ultra-enhanced tab bar with:\n * - Glass blur effects\n * - Spotlight press ripple\n * - Breathing active underline\n * - Springy badge physics\n * - Icon micro-motions\n */\n\nimport React from \"react\";\nimport { View, Text } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { render, fireEvent, waitFor } from \"@testing-library/react-native\";\nimport UltraTabBar from \"../UltraTabBar\";\nimport type { BottomTabBarProps } from \"@react-navigation/bottom-tabs\";\nimport * as Haptics from \"expo-haptics\";\n\n// Mock haptics\njest.mock(\"expo-haptics\", () => ({\n  impactAsync: jest.fn(),\n}));\n\nconst Tab = createBottomTabNavigator();\n\nconst TestScreen = ({ name }: { name: string }) => (\n  <View testID={`screen-${name}`}>\n    <Text>{name}</Text>\n  </View>\n);\n\nfunction createTestNavigator(initialRouteName = \"Home\") {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator\n        tabBar={(props: BottomTabBarProps) => <UltraTabBar {...props} />}\n        initialRouteName={initialRouteName}\n      >\n        <Tab.Screen\n          name=\"Home\"\n          component={() => <TestScreen name=\"Home\" />}\n          options={{ tabBarLabel: \"Home\" }}\n        />\n        <Tab.Screen\n          name=\"Swipe\"\n          component={() => <TestScreen name=\"Swipe\" />}\n          options={{ tabBarLabel: \"Swipe\" }}\n        />\n        <Tab.Screen\n          name=\"Matches\"\n          component={() => <TestScreen name=\"Matches\" />}\n          options={{ tabBarLabel: \"Matches\" }}\n        />\n        <Tab.Screen\n          name=\"Map\"\n          component={() => <TestScreen name=\"Map\" />}\n          options={{ tabBarLabel: \"Map\" }}\n        />\n        <Tab.Screen\n          name=\"Profile\"\n          component={() => <TestScreen name=\"Profile\" />}\n          options={{ tabBarLabel: \"Profile\" }}\n        />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n\ndescribe(\"UltraTabBar Integration Tests\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Rendering and Initial State\", () => {\n    it(\"renders all tabs with correct labels\", () => {\n      const { getByText } = render(createTestNavigator());\n      \n      expect(getByText(\"Home\")).toBeTruthy();\n      expect(getByText(\"Swipe\")).toBeTruthy();\n      expect(getByText(\"Matches\")).toBeTruthy();\n      expect(getByText(\"Map\")).toBeTruthy();\n      expect(getByText(\"Profile\")).toBeTruthy();\n    });\n\n    it(\"renders with blur view wrapper\", () => {\n      const { UNSAFE_getByType } = render(createTestNavigator());\n      const blurViews = UNSAFE_getByType(\"BlurView\");\n      expect(blurViews).toBeTruthy();\n    });\n\n    it(\"shows active indicator with animated underline\", () => {\n      const { UNSAFE_getByType } = render(createTestNavigator());\n      const animatedViews = UNSAFE_getByType(\"Animated.View\");\n      \n      // Should have multiple animated views (tabBarAnim, indicatorAnim, spotAnim, iconAnim, badgeAnim)\n      expect(animatedViews.length).toBeGreaterThan(0);\n    });\n\n    it(\"displays badges for tabs with counts\", () => {\n      const { getByText } = render(createTestNavigator());\n      \n      // Matches should have badge count 3\n      expect(getByText(\"3\")).toBeTruthy();\n      // Map should have badge count 1\n      expect(getByText(\"1\")).toBeTruthy();\n      // Home should have badge count 2\n      expect(getByText(\"2\")).toBeTruthy();\n    });\n  });\n\n  describe(\"Navigation\", () => {\n    it(\"navigates to different tab on press\", async () => {\n      const { getByText, getByTestId } = render(createTestNavigator());\n      \n      // Initial screen should be Home\n      expect(getByTestId(\"screen-Home\")).toBeTruthy();\n      \n      // Press Swipe tab\n      const swipeButton = getByText(\"Swipe\");\n      fireEvent.press(swipeButton);\n      \n      // Should navigate to Swipe screen\n      await waitFor(() => {\n        expect(getByTestId(\"screen-Swipe\")).toBeTruthy();\n      });\n    });\n\n    it(\"handles multiple tab switches\", async () => {\n      const { getByText, getByTestId } = render(createTestNavigator());\n      \n      // Start at Home\n      expect(getByTestId(\"screen-Home\")).toBeTruthy();\n      \n      // Switch to Matches\n      fireEvent.press(getByText(\"Matches\"));\n      await waitFor(() => {\n        expect(getByTestId(\"screen-Matches\")).toBeTruthy();\n      });\n      \n      // Switch to Profile\n      fireEvent.press(getByText(\"Profile\"));\n      await waitFor(() => {\n        expect(getByTestId(\"screen-Profile\")).toBeTruthy();\n      });\n      \n      // Switch back to Home\n      fireEvent.press(getByText(\"Home\"));\n      await waitFor(() => {\n        expect(getByTestId(\"screen-Home\")).toBeTruthy();\n      });\n    });\n\n    it(\"triggers haptic feedback on tab press\", () => {\n      const { getByText } = render(createTestNavigator());\n      \n      fireEvent.press(getByText(\"Swipe\"));\n      \n      expect(Haptics.impactAsync).toHaveBeenCalledWith(\n        Haptics.ImpactFeedbackStyle.Light\n      );\n    });\n\n    it(\"triggers medium haptic feedback on same tab reselect\", () => {\n      const { getByText } = render(createTestNavigator());\n      \n      // First press\n      fireEvent.press(getByText(\"Home\"));\n      jest.clearAllMocks();\n      \n      // Second press on same tab\n      fireEvent.press(getByText(\"Home\"));\n      \n      expect(Haptics.impactAsync).toHaveBeenCalledWith(\n        Haptics.ImpactFeedbackStyle.Medium\n      );\n    });\n  });\n\n  describe(\"Accessibility\", () => {\n    it(\"has proper accessibility labels\", () => {\n      const { getByLabelText } = render(createTestNavigator());\n      \n      expect(getByLabelText(\"Home tab\")).toBeTruthy();\n      expect(getByLabelText(\"Swipe tab\")).toBeTruthy();\n      expect(getByLabelText(\"Matches tab\")).toBeTruthy();\n      expect(getByLabelText(\"Map tab\")).toBeTruthy();\n      expect(getByLabelText(\"Profile tab\")).toBeTruthy();\n    });\n\n    it(\"sets correct accessibility state for active tab\", () => {\n      const { getByLabelText } = render(createTestNavigator());\n      \n      const homeTab = getByLabelText(\"Home tab\");\n      expect(homeTab.props.accessibilityState?.selected).toBe(true);\n    });\n\n    it(\"updates accessibility state on tab switch\", async () => {\n      const { getByLabelText, getByText } = render(createTestNavigator());\n      \n      // Home is selected initially\n      expect(getByLabelText(\"Home tab\").props.accessibilityState?.selected).toBe(true);\n      \n      // Switch to Swipe\n      fireEvent.press(getByText(\"Swipe\"));\n      \n      await waitFor(() => {\n        expect(getByLabelText(\"Swipe tab\").props.accessibilityState?.selected).toBe(true);\n        expect(getByLabelText(\"Home tab\").props.accessibilityState?.selected).toBeUndefined();\n      });\n    });\n  });\n\n  describe(\"Badge Functionality\", () => {\n    it(\"shows badge with correct count\", () => {\n      const { getByText } = render(createTestNavigator());\n      \n      // Matches has 3\n      expect(getByText(\"3\")).toBeTruthy();\n      // Map has 1\n      expect(getByText(\"1\")).toBeTruthy();\n      // Home has 2\n      expect(getByText(\"2\")).toBeTruthy();\n    });\n\n    it(\"hides badge when count is 0\", () => {\n      const { getByText } = render(createTestNavigator());\n      \n      // Swipe and Profile have no badges (count = 0)\n      expect(() => getByText(\"0\")).toThrow();\n    });\n\n    it(\"displays 99+ for counts over 99\", () => {\n      // This would require mocking the badge count function\n      // Test implementation would go here\n    });\n  });\n\n  describe(\"Long Press Events\", () => {\n    it(\"emits long press event\", () => {\n      const { getByText } = render(createTestNavigator());\n      \n      const homeTab = getByText(\"Home\");\n      fireEvent(homeTab, \"longPress\");\n      \n      // Long press event should be emitted\n      // Actual implementation depends on navigation.emit behavior\n    });\n  });\n\n  describe(\"Visual Effects\", () => {\n    it(\"applies blur view with correct intensity\", () => {\n      const { UNSAFE_getByType } = render(createTestNavigator());\n      const blurView = UNSAFE_getByType(\"BlurView\");\n      \n      // Intensity should be set (88 for iOS, 100 for Android)\n      expect(blurView).toBeTruthy();\n    });\n\n    it(\"has proper styling with shadows and elevation\", () => {\n      const { UNSAFE_getByType } = render(createTestNavigator());\n      const blurView = UNSAFE_getByType(\"BlurView\");\n      \n      // Should have blur effect applied\n      expect(blurView).toBeTruthy();\n    });\n\n    it(\"animates icon scale on focus\", async () => {\n      const { getByText } = render(createTestNavigator());\n      \n      // Icons should scale when focused\n      const homeIcon = getByText(\"Home\").parent;\n      expect(homeIcon).toBeTruthy();\n    });\n\n    it(\"renders spotlight pulse on press\", () => {\n      const { getByText } = render(createTestNavigator());\n      \n      fireEvent.press(getByText(\"Swipe\"));\n      \n      // Spotlight animation should trigger\n      // This is tested via the animation state changes\n    });\n\n    it(\"renders breathing underline indicator\", () => {\n      const { UNSAFE_getByType } = render(createTestNavigator());\n      const animatedViews = UNSAFE_getByType(\"Animated.View\");\n      \n      // Should have animated indicator\n      expect(animatedViews.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Layout and Responsiveness\", () => {\n    it(\"handles safe area insets\", () => {\n      const { container } = render(createTestNavigator());\n      \n      // Should apply safe area padding\n      expect(container).toBeTruthy();\n    });\n\n    it(\"measures tab positions for accurate animations\", () => {\n      const { UNSAFE_getByType } = render(createTestNavigator());\n      \n      // Layout measurement callbacks should be registered\n      const tabButtons = UNSAFE_getByType(\"TouchableOpacity\");\n      expect(tabButtons.length).toBeGreaterThan(0);\n    });\n\n    it(\"adapts to different screen sizes\", () => {\n      // This would require mocking different screen dimensions\n      // Test implementation would go here\n    });\n  });\n\n  describe(\"Performance\", () => {\n    it(\"does not create unnecessary re-renders\", () => {\n      const { rerender } = render(createTestNavigator());\n      \n      // Re-render with same props\n      rerender(createTestNavigator());\n      \n      // Should not cause issues\n    });\n\n    it(\"handles rapid tab switching smoothly\", async () => {\n      const { getByText } = render(createTestNavigator());\n      \n      // Rapidly switch between tabs\n      for (let i = 0; i < 5; i++) {\n        fireEvent.press(getByText(\"Home\"));\n        fireEvent.press(getByText(\"Swipe\"));\n        fireEvent.press(getByText(\"Profile\"));\n      }\n      \n      // Should handle without errors\n      await waitFor(() => {\n        expect(true).toBe(true);\n      });\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"gracefully handles missing route descriptors\", () => {\n      // This would require creating a test with malformed descriptors\n      // Test implementation would go here\n    });\n\n    it(\"handles navigation errors without crashing\", () => {\n      // This would test navigation error scenarios\n      // Test implementation would go here\n    });\n  });\n\n  describe(\"Theme Support\", () => {\n    it(\"adapts to dark theme\", () => {\n      // This would require mocking theme context\n      // Test implementation would go here\n    });\n\n    it(\"adapts to light theme\", () => {\n      // This would require mocking theme context\n      // Test implementation would go here\n    });\n\n    it(\"updates colors on theme change\", () => {\n      // This would require dynamic theme switching\n      // Test implementation would go here\n    });\n  });\n\n  describe(\"Animation States\", () => {\n    it(\"animates indicator position on tab change\", async () => {\n      const { getByText } = render(createTestNavigator());\n      \n      // Start at Home\n      // Switch to Swipe\n      fireEvent.press(getByText(\"Swipe\"));\n      \n      // Indicator should animate to new position\n      await waitFor(() => {\n        expect(getByText(\"Swipe\").parent).toBeTruthy();\n      });\n    });\n\n    it(\"animates badge appearance\", () => {\n      const { getByText } = render(createTestNavigator());\n      \n      // Badges should be visible for tabs with counts\n      expect(getByText(\"3\")).toBeTruthy();\n    });\n\n    it(\"applies breathing animation to active indicator\", () => {\n      const { UNSAFE_getByType } = render(createTestNavigator());\n      \n      // Breathing animation should be active\n      const animatedViews = UNSAFE_getByType(\"Animated.View\");\n      expect(animatedViews).toBeTruthy();\n    });\n  });\n});\n\n"],"mappings":"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","ignoreList":[]}