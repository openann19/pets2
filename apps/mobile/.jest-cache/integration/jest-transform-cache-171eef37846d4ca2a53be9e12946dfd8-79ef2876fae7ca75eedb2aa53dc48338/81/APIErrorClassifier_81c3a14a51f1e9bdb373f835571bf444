ee768c703788534065d4ea88706a9b37
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.APIErrorClassifier = exports.ErrorType = void 0;
var ErrorType;
(function (ErrorType) {
  ErrorType["NETWORK"] = "NETWORK";
  ErrorType["AUTHENTICATION"] = "AUTHENTICATION";
  ErrorType["AUTHORIZATION"] = "AUTHORIZATION";
  ErrorType["VALIDATION"] = "VALIDATION";
  ErrorType["SERVER"] = "SERVER";
  ErrorType["CLIENT"] = "CLIENT";
  ErrorType["TIMEOUT"] = "TIMEOUT";
  ErrorType["RATE_LIMIT"] = "RATE_LIMIT";
  ErrorType["UNKNOWN"] = "UNKNOWN";
})(ErrorType || (exports.ErrorType = ErrorType = {}));
var APIErrorClassifier = function () {
  function APIErrorClassifier() {
    (0, _classCallCheck2.default)(this, APIErrorClassifier);
  }
  return (0, _createClass2.default)(APIErrorClassifier, [{
    key: "classify",
    value: function classify(error, context) {
      var statusCode = (context == null ? void 0 : context.statusCode) || this.extractStatusCode(error);
      if (statusCode) {
        return this.classifyByStatusCode(statusCode);
      }
      var errorMessage = this.extractErrorMessage(error);
      return this.classifyByMessage(errorMessage, error);
    }
  }, {
    key: "classifyByStatusCode",
    value: function classifyByStatusCode(statusCode) {
      switch (true) {
        case statusCode >= 500:
          return {
            type: ErrorType.SERVER,
            retryable: true,
            userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.SERVER],
            statusCode: statusCode,
            severity: 'high'
          };
        case statusCode === 401:
          return {
            type: ErrorType.AUTHENTICATION,
            retryable: false,
            userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.AUTHENTICATION],
            statusCode: statusCode,
            severity: 'high'
          };
        case statusCode === 403:
          return {
            type: ErrorType.AUTHORIZATION,
            retryable: false,
            userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.AUTHORIZATION],
            statusCode: statusCode,
            severity: 'medium'
          };
        case statusCode === 404:
          return {
            type: ErrorType.CLIENT,
            retryable: false,
            userMessage: 'Resource not found.',
            statusCode: statusCode,
            severity: 'low'
          };
        case statusCode === 408:
          return {
            type: ErrorType.TIMEOUT,
            retryable: true,
            userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.TIMEOUT],
            statusCode: statusCode,
            severity: 'medium'
          };
        case statusCode === 429:
          return {
            type: ErrorType.RATE_LIMIT,
            retryable: true,
            userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.RATE_LIMIT],
            statusCode: statusCode,
            severity: 'medium'
          };
        case statusCode >= 400:
          return {
            type: ErrorType.VALIDATION,
            retryable: false,
            userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.VALIDATION],
            statusCode: statusCode,
            severity: 'medium'
          };
        default:
          return {
            type: ErrorType.UNKNOWN,
            retryable: false,
            userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.UNKNOWN],
            statusCode: statusCode,
            severity: 'low'
          };
      }
    }
  }, {
    key: "classifyByMessage",
    value: function classifyByMessage(errorMessage, error) {
      var lowerMessage = errorMessage.toLowerCase();
      if (this.isNetworkError(lowerMessage)) {
        return {
          type: ErrorType.NETWORK,
          retryable: true,
          userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.NETWORK],
          severity: 'high'
        };
      }
      if (this.isTimeoutError(lowerMessage)) {
        return {
          type: ErrorType.TIMEOUT,
          retryable: true,
          userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.TIMEOUT],
          severity: 'medium'
        };
      }
      if (this.isAuthenticationError(lowerMessage)) {
        return {
          type: ErrorType.AUTHENTICATION,
          retryable: false,
          userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.AUTHENTICATION],
          severity: 'high'
        };
      }
      return {
        type: ErrorType.UNKNOWN,
        retryable: this.isRetryableError(error),
        userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.UNKNOWN],
        severity: 'medium'
      };
    }
  }, {
    key: "isNetworkError",
    value: function isNetworkError(message) {
      var networkKeywords = ['network', 'connection', 'econnrefused', 'enotfound', 'econnreset', 'fetch failed', 'network error'];
      return networkKeywords.some(function (keyword) {
        return message.includes(keyword);
      });
    }
  }, {
    key: "isTimeoutError",
    value: function isTimeoutError(message) {
      var timeoutKeywords = ['timeout', 'timed out', 'etimedout', 'request timeout'];
      return timeoutKeywords.some(function (keyword) {
        return message.includes(keyword);
      });
    }
  }, {
    key: "isAuthenticationError",
    value: function isAuthenticationError(message) {
      var authKeywords = ['unauthorized', 'authentication', 'token', 'invalid credentials', 'session expired'];
      return authKeywords.some(function (keyword) {
        return message.includes(keyword);
      });
    }
  }, {
    key: "isRetryableError",
    value: function isRetryableError(error) {
      if (error instanceof Error) {
        var message = error.message.toLowerCase();
        return this.isNetworkError(message) || this.isTimeoutError(message);
      }
      return false;
    }
  }, {
    key: "extractStatusCode",
    value: function extractStatusCode(error) {
      if (error && typeof error === 'object') {
        if ('status' in error && typeof error.status === 'number') {
          return error.status;
        }
        if ('statusCode' in error && typeof error.statusCode === 'number') {
          return error.statusCode;
        }
        if ('response' in error && typeof error.response === 'object' && error.response !== null) {
          var response = error.response;
          return response.status || response.statusCode;
        }
      }
      return undefined;
    }
  }, {
    key: "extractErrorMessage",
    value: function extractErrorMessage(error) {
      if (error instanceof Error) {
        return error.message;
      }
      if (error && typeof error === 'object') {
        if ('message' in error && typeof error.message === 'string') {
          return error.message;
        }
      }
      return String(error);
    }
  }, {
    key: "getUserMessage",
    value: function getUserMessage(error, context) {
      var classification = this.classify(error, context);
      return classification.userMessage;
    }
  }]);
}();
APIErrorClassifier.ERROR_MESSAGES = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, ErrorType.NETWORK, 'Network connection failed. Please check your internet connection.'), ErrorType.AUTHENTICATION, 'Your session has expired. Please sign in again.'), ErrorType.AUTHORIZATION, 'You do not have permission to perform this action.'), ErrorType.VALIDATION, 'Invalid input. Please check your data and try again.'), ErrorType.SERVER, 'Server error. Please try again later.'), ErrorType.CLIENT, 'Invalid request. Please check your input.'), ErrorType.TIMEOUT, 'Request timed out. Please try again.'), ErrorType.RATE_LIMIT, 'Too many requests. Please wait a moment.'), ErrorType.UNKNOWN, 'An unexpected error occurred. Please try again.');
exports.APIErrorClassifier = APIErrorClassifier;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,