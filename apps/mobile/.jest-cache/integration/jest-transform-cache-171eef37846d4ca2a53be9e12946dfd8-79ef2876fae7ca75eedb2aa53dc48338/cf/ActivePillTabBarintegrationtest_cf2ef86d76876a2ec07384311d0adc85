0d7bf3c15d989317a1427cd1e364b86b
"use strict";

_getJestObj().mock("expo-haptics");
_getJestObj().mock("expo-blur");
_getJestObj().mock("react-native-safe-area-context");
_getJestObj().mock("@expo/vector-icons");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ActivePillTabBar = _interopRequireDefault(require("../ActivePillTabBar"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  emit: jest.fn(),
  navigate: jest.fn(),
  addListener: jest.fn()
};
describe("ActivePillTabBar Integration", function () {
  var mockState = {
    index: 0,
    routes: [{
      key: "Home-0",
      name: "Home"
    }, {
      key: "Swipe-1",
      name: "Swipe"
    }, {
      key: "Matches-2",
      name: "Matches"
    }]
  };
  var mockDescriptors = {
    "Home-0": {
      options: {
        title: "Home"
      }
    },
    "Swipe-1": {
      options: {
        title: "Swipe"
      }
    },
    "Matches-2": {
      options: {
        title: "Matches"
      }
    }
  };
  beforeEach(function () {
    jest.clearAllMocks();
    Haptics.impactAsync.mockResolvedValue(undefined);
    mockNavigation.addListener.mockReturnValue(jest.fn());
  });
  describe("Complete Tab Navigation Flow", function () {
    it("should handle complete navigation lifecycle", function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        getByTestId = _render.getByTestId;
      var homeTab = getByTestId("tab-Home");
      expect(homeTab).toBeTruthy();
      var swipeTab = getByTestId("tab-Swipe");
      _reactNative.fireEvent.press(swipeTab);
      expect(mockNavigation.emit).toHaveBeenCalledWith({
        type: "tabPress",
        target: "Swipe-1",
        canPreventDefault: true
      });
      expect(mockNavigation.navigate).toHaveBeenCalledWith("Swipe");
    });
    it("should handle rapid tab switching", (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        getByTestId = _render2.getByTestId;
      var homeTab = getByTestId("tab-Home");
      for (var i = 0; i < 5; i++) {
        (0, _reactNative.act)(function () {
          jest.advanceTimersByTime(100);
        });
        _reactNative.fireEvent.press(homeTab);
      }
      yield (0, _reactNative.waitFor)(function () {
        expect(mockNavigation.emit).toHaveBeenCalled();
      });
      jest.useRealTimers();
    }));
  });
  describe("Double-Tap Detection Integration", function () {
    it("should detect and handle double-tap correctly", (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      var callback = jest.fn();
      var handler = null;
      mockNavigation.addListener.mockImplementation(function (event, fn) {
        if (event === "tabDoublePress") {
          handler = fn;
        }
        return jest.fn();
      });
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        getByTestId = _render3.getByTestId;
      var homeTab = getByTestId("tab-Home");
      _reactNative.fireEvent.press(homeTab);
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(150);
      });
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockNavigation.emit).toHaveBeenCalledWith({
          type: "tabDoublePress",
          target: "Home-0"
        });
      });
      jest.useRealTimers();
    }));
    it("should reset double-tap timer after successful double-tap", (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        getByTestId = _render4.getByTestId;
      var homeTab = getByTestId("tab-Home");
      _reactNative.fireEvent.press(homeTab);
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(150);
      });
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockNavigation.emit).toHaveBeenCalledWith(expect.objectContaining({
          type: "tabDoublePress"
        }));
      });
      mockNavigation.emit.mockClear();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(500);
      });
      _reactNative.fireEvent.press(homeTab);
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(150);
      });
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockNavigation.emit).toHaveBeenCalledWith(expect.objectContaining({
          type: "tabDoublePress"
        }));
      });
      jest.useRealTimers();
    }));
  });
  describe("Animation Integration", function () {
    it("should animate indicator when switching tabs", function () {
      var initialState = {
        index: 0,
        routes: mockState.routes
      };
      var newState = {
        index: 1,
        routes: mockState.routes
      };
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: initialState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        rerender = _render5.rerender;
      rerender((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
        state: newState,
        descriptors: mockDescriptors,
        navigation: mockNavigation
      }));
      expect(true).toBe(true);
    });
    it("should bounce icon when pressed", function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        getByTestId = _render6.getByTestId;
      var homeTab = getByTestId("tab-Home");
      _reactNative.fireEvent.press(homeTab);
      expect(homeTab).toBeTruthy();
    });
  });
  describe("Badge Integration", function () {
    it("should display badges with correct counts", function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        getByText = _render7.getByText;
      var badges = ["3", "2", "1"];
      badges.forEach(function (count) {
        expect(getByText(count)).toBeTruthy();
      });
    });
    it("should hide badges when count is 0", function () {
      var customState = {
        index: 0,
        routes: [{
          key: "Empty-0",
          name: "Empty"
        }]
      };
      var customDescriptors = {
        "Empty-0": {
          options: {
            title: "Empty"
          }
        }
      };
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: customState,
          descriptors: customDescriptors,
          navigation: mockNavigation
        })),
        queryByTestId = _render8.queryByTestId;
      expect(true).toBe(true);
    });
  });
  describe("Edge Cases and Error Handling", function () {
    it("should handle missing layout gracefully", function () {
      var customDescriptors = {
        "Home-0": {
          options: {
            title: "Home"
          }
        }
      };
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: customDescriptors,
          navigation: mockNavigation
        }));
      }).not.toThrow();
    });
    it("should handle undefined descriptors", function () {
      var emptyDescriptors = {};
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: emptyDescriptors,
          navigation: mockNavigation
        }));
      }).not.toThrow();
    });
    it("should handle navigation state changes rapidly", function () {
      var states = [{
        index: 0,
        routes: mockState.routes
      }, {
        index: 1,
        routes: mockState.routes
      }, {
        index: 0,
        routes: mockState.routes
      }, {
        index: 2,
        routes: mockState.routes
      }];
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: states[0],
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        rerender = _render9.rerender;
      states.forEach(function (state) {
        rerender((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: state,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        }));
      });
      expect(true).toBe(true);
    });
    it("should handle haptic feedback failures gracefully", (0, _asyncToGenerator2.default)(function* () {
      Haptics.impactAsync.mockRejectedValue(new Error("Haptics unavailable"));
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        getByTestId = _render0.getByTestId;
      var homeTab = getByTestId("tab-Home");
      expect(function () {
        _reactNative.fireEvent.press(homeTab);
      }).not.toThrow();
      yield (0, _reactNative.waitFor)(function () {
        expect(mockNavigation.emit).toHaveBeenCalled();
      });
    }));
  });
  describe("Accessibility Integration", function () {
    it("should provide proper accessibility information", function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        getByTestId = _render1.getByTestId;
      var homeTab = getByTestId("tab-Home");
      expect(homeTab.props.accessibilityRole).toBe("tab");
      expect(homeTab.props.accessibilityState.selected).toBe(true);
    });
    it("should update accessibility state when tab changes", function () {
      var initialState = {
        index: 0,
        routes: mockState.routes
      };
      var newState = {
        index: 1,
        routes: mockState.routes
      };
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: initialState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        rerender = _render10.rerender,
        getByTestId = _render10.getByTestId;
      rerender((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
        state: newState,
        descriptors: mockDescriptors,
        navigation: mockNavigation
      }));
      var swipeTab = getByTestId("tab-Swipe");
      expect(swipeTab.props.accessibilityState.selected).toBe(true);
    });
  });
  describe("Theme Integration", function () {
    it("should apply correct styles for light mode", function () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        container = _render11.container;
      expect(container).toBeTruthy();
    });
    it("should apply correct styles for dark mode", function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ActivePillTabBar.default, {
          state: mockState,
          descriptors: mockDescriptors,
          navigation: mockNavigation
        })),
        container = _render12.container;
      expect(container).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,