f1a14ad4d3aea087f5a7a989e71e5443
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../services/api");
_getJestObj().mock("../services/offlineService");
_getJestObj().mock("../services/AuthService");
_getJestObj().mock("../services/notifications");
_getJestObj().mock("../services/communityAPI");
_getJestObj().mock("../services/aiService");
_getJestObj().mock("../services/uploadHygiene");
_getJestObj().mock("../App", function () {
  return {
    __esModule: true,
    default: function _default() {
      return null;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _api = require("../services/api");
var _offlineService = require("../services/offlineService");
var _AuthService = require("../services/AuthService");
var _notifications = require("../services/notifications");
var _communityAPI = require("../services/communityAPI");
var _aiService = require("../services/aiService");
var _uploadHygiene = require("../services/uploadHygiene");
var _App = _interopRequireDefault(require("../App"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockApi = _api.api;
var mockOfflineService = _offlineService.offlineService;
var mockAuthService = _AuthService.authService;
var mockNotificationService = _notifications.notificationService;
var mockCommunityAPI = _communityAPI.communityAPI;
var mockAiService = _aiService.aiService;
var mockUploadHygieneService = _uploadHygiene.uploadHygieneService;
var mockAuthNavigator = AuthNavigator;
var mockMainNavigator = MainNavigator;
(0, _globals.describe)('PawfectMatch Integration Test Suite', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockAuthService.getCurrentUser.mockReturnValue(null);
    mockOfflineService.getSyncStatus.mockReturnValue({
      isOnline: true,
      isSyncing: false,
      lastSyncTime: new Date().toISOString(),
      pendingActionsCount: 0,
      syncProgress: 1.0
    });
  });
  (0, _globals.describe)('Complete User Onboarding Flow', function () {
    (0, _globals.it)('should complete full user onboarding from registration to first match', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.register.mockResolvedValue({
        user: {
          id: 'user123',
          email: 'newuser@example.com'
        },
        token: 'jwt-token'
      });
      mockApi.post.mockResolvedValue({
        data: {
          pet: {
            id: 'pet123',
            name: 'Buddy',
            breed: 'Golden Retriever',
            photos: ['photo1.jpg']
          }
        }
      });
      mockApi.get.mockResolvedValue({
        data: {
          pets: [{
            id: 'pet1',
            name: 'Luna',
            photos: ['luna1.jpg'],
            compatibility: 85
          }, {
            id: 'pet2',
            name: 'Max',
            photos: ['max1.jpg'],
            compatibility: 72
          }]
        }
      });
      mockAiService.computeCompatibility.mockResolvedValue({
        score: 85,
        breakdown: {
          breed: 90,
          size: 85,
          energy: 80,
          age: 85,
          traits: 85
        }
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_App.default, {})),
        getByText = _render.getByText,
        getByPlaceholderText = _render.getByPlaceholderText;
      var registerButton = getByText('Get Started');
      _reactNative.fireEvent.press(registerButton);
      var emailInput = getByPlaceholderText('Email');
      var passwordInput = getByPlaceholderText('Password');
      var registerSubmitButton = getByText('Create Account');
      _reactNative.fireEvent.changeText(emailInput, 'newuser@example.com');
      _reactNative.fireEvent.changeText(passwordInput, 'SecurePass123!');
      _reactNative.fireEvent.press(registerSubmitButton);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockAuthService.register).toHaveBeenCalledWith({
          email: 'newuser@example.com',
          password: 'SecurePass123!'
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Check your email')).toBeTruthy();
      });
      (0, _reactNative.act)(function () {
        mockAuthService.verifyEmail('verification-code');
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Complete Your Profile')).toBeTruthy();
      });
      var firstNameInput = getByPlaceholderText('First Name');
      var lastNameInput = getByPlaceholderText('Last Name');
      var bioInput = getByPlaceholderText('Tell us about yourself');
      _reactNative.fireEvent.changeText(firstNameInput, 'John');
      _reactNative.fireEvent.changeText(lastNameInput, 'Doe');
      _reactNative.fireEvent.changeText(bioInput, 'Pet lover and adventurer!');
      _reactNative.fireEvent.press(getByText('Continue'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Add Your Pet')).toBeTruthy();
      });
      var petNameInput = getByPlaceholderText('Pet Name');
      var petTypeButton = getByText('Dog');
      var breedInput = getByPlaceholderText('Breed');
      _reactNative.fireEvent.changeText(petNameInput, 'Buddy');
      _reactNative.fireEvent.press(petTypeButton);
      _reactNative.fireEvent.changeText(breedInput, 'Golden Retriever');
      _reactNative.fireEvent.press(getByText('Add Photos'));
      (0, _reactNative.act)(function () {
        mockUploadHygieneService.processImageForUpload.mockResolvedValue({
          uri: 'processed-photo.jpg',
          width: 1024,
          height: 768,
          fileSize: 256000,
          mimeType: 'image/jpeg',
          metadata: {
            originalWidth: 2048,
            originalHeight: 1536
          }
        });
      });
      _reactNative.fireEvent.press(getByText('Create Pet Profile'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Find Matches')).toBeTruthy();
      });
      (0, _globals.expect)(mockOfflineService.getPets).toHaveBeenCalled();
      (0, _globals.expect)(mockApi.get).toHaveBeenCalledWith('/pets/matches');
      var likeButton = getByText('Like');
      _reactNative.fireEvent.press(likeButton);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/pets/swipe', {
          petId: 'pet123',
          targetPetId: 'pet1',
          action: 'like'
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('It\'s a Match!')).toBeTruthy();
      });
      (0, _globals.expect)(mockAuthService.register).toHaveBeenCalled();
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledTimes(2);
      (0, _globals.expect)(mockOfflineService.getPets).toHaveBeenCalled();
      (0, _globals.expect)(mockNotificationService.scheduleLocalNotification).toHaveBeenCalledWith('New Match!', 'You matched with Luna!');
    }));
  });
  (0, _globals.describe)('Offline-Online Data Synchronization', function () {
    (0, _globals.it)('should handle offline actions and sync when online', (0, _asyncToGenerator2.default)(function* () {
      mockOfflineService.getSyncStatus.mockReturnValue({
        isOnline: false,
        isSyncing: false,
        lastSyncTime: '2024-01-01T10:00:00Z',
        pendingActionsCount: 0,
        syncProgress: 1.0
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_App.default, {})),
        getByText = _render2.getByText;
      var likeButton = getByText('Like');
      _reactNative.fireEvent.press(likeButton);
      (0, _globals.expect)(mockOfflineService.addPendingAction).toHaveBeenCalledWith('swipe', {
        petId: 'current-pet',
        targetPetId: 'target-pet',
        direction: 'like'
      });
      (0, _reactNative.act)(function () {
        mockOfflineService.getSyncStatus.mockReturnValue({
          isOnline: true,
          isSyncing: true,
          lastSyncTime: '2024-01-01T10:00:00Z',
          pendingActionsCount: 1,
          syncProgress: 0.5
        });
      });
      _reactNative.fireEvent.press(getByText('Sync Now'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockOfflineService.triggerSync).toHaveBeenCalled();
      });
      (0, _reactNative.act)(function () {
        mockOfflineService.getSyncStatus.mockReturnValue({
          isOnline: true,
          isSyncing: false,
          lastSyncTime: new Date().toISOString(),
          pendingActionsCount: 0,
          syncProgress: 1.0
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Sync Complete')).toBeTruthy();
      });
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/pets/swipe', {
        petId: 'current-pet',
        targetPetId: 'target-pet',
        action: 'like'
      });
    }));
  });
  (0, _globals.describe)('Community Features Integration', function () {
    (0, _globals.beforeEach)((0, _asyncToGenerator2.default)(function* () {
      mockAuthService.getCurrentUser.mockReturnValue({
        id: 'user123',
        email: 'user@example.com',
        pets: [{
          id: 'pet123',
          name: 'Buddy'
        }]
      });
    }));
    (0, _globals.it)('should integrate community posting with AI bio generation', (0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(CommunityScreen, {})),
        getByText = _render3.getByText,
        getByPlaceholderText = _render3.getByPlaceholderText;
      _reactNative.fireEvent.press(getByText('Create Post'));
      _reactNative.fireEvent.press(getByText('Generate with AI'));
      var keywordsInput = getByPlaceholderText('Enter keywords (e.g., friendly, playful)');
      _reactNative.fireEvent.changeText(keywordsInput, 'friendly, energetic, loves walks');
      _reactNative.fireEvent.press(getByText('Generate Bio'));
      (0, _reactNative.act)(function () {
        mockAiService.generateBio.mockResolvedValue('Meet Buddy, a friendly and energetic companion who absolutely loves long walks in the park!');
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Meet Buddy, a friendly and energetic companion...')).toBeTruthy();
      });
      _reactNative.fireEvent.press(getByText('Add Photo'));
      (0, _reactNative.act)(function () {
        mockUploadHygieneService.pickAndProcessImage.mockResolvedValue({
          uri: 'processed-community-photo.jpg',
          width: 1024,
          height: 768,
          fileSize: 200000,
          mimeType: 'image/jpeg',
          metadata: {}
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Photo added')).toBeTruthy();
      });
      _reactNative.fireEvent.press(getByText('Share Post'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockCommunityAPI.createPost).toHaveBeenCalledWith({
          content: 'Meet Buddy, a friendly and energetic companion who absolutely loves long walks in the park!',
          images: ['processed-community-photo.jpg'],
          type: 'post'
        });
      });
      (0, _globals.expect)(_reactNative.screen.getByText('Post shared successfully!')).toBeTruthy();
    }));
    (0, _globals.it)('should handle community interactions across services', (0, _asyncToGenerator2.default)(function* () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(CommunityFeed, {})),
        getByText = _render4.getByText;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockCommunityAPI.getFeed).toHaveBeenCalled();
      });
      (0, _reactNative.act)(function () {
        mockCommunityAPI.getFeed.mockResolvedValue({
          success: true,
          posts: [{
            _id: 'post1',
            author: {
              _id: 'user456',
              name: 'Jane Doe'
            },
            content: 'Beautiful park today!',
            likes: 5,
            liked: false,
            comments: [],
            createdAt: '2024-01-01T12:00:00Z'
          }],
          pagination: {
            page: 1,
            limit: 20,
            total: 1,
            pages: 1
          },
          appliedFilters: {
            packId: null,
            userId: null,
            type: null,
            matchedCount: 1
          }
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Beautiful park today!')).toBeTruthy();
      });
      _reactNative.fireEvent.press(getByText('Like'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockCommunityAPI.likePost).toHaveBeenCalledWith('post1');
      });
      var commentInput = _reactNative.screen.getByPlaceholderText('Write a comment...');
      _reactNative.fireEvent.changeText(commentInput, 'Looks amazing!');
      _reactNative.fireEvent.press(getByText('Comment'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockCommunityAPI.addComment).toHaveBeenCalledWith('post1', {
          content: 'Looks amazing!'
        });
      });
      (0, _globals.expect)(mockNotificationService.scheduleLocalNotification).toHaveBeenCalledWith('Comment Added', 'Your comment was posted successfully');
    }));
  });
  (0, _globals.describe)('Premium Feature Integration', function () {
    (0, _globals.it)('should integrate premium features across the app', (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.getCurrentUser.mockReturnValue({
        id: 'user123',
        subscription: 'free'
      });
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SwipeScreen, {})),
        getByText = _render5.getByText;
      _reactNative.fireEvent.press(getByText('Super Like'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Upgrade to Premium')).toBeTruthy();
        (0, _globals.expect)(_reactNative.screen.getByText('Get unlimited Super Likes!')).toBeTruthy();
      });
      _reactNative.fireEvent.press(getByText('Upgrade Now'));
      (0, _reactNative.act)(function () {
        mockApi.post.mockResolvedValue({
          data: {
            subscription: {
              status: 'active',
              plan: 'premium',
              features: ['super_likes', 'advanced_filters', 'priority_matching']
            }
          }
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockAuthService.getCurrentUser).toHaveBeenCalled();
        (0, _globals.expect)(_reactNative.screen.getByText('Premium Active')).toBeTruthy();
      });
      var superLikeButton = getByText('Super Like');
      (0, _globals.expect)(superLikeButton).not.toBeDisabled();
      _reactNative.fireEvent.press(getByText('Filters'));
      (0, _globals.expect)(_reactNative.screen.getByText('Advanced Filters')).toBeTruthy();
      (0, _globals.expect)(_reactNative.screen.getByText('Breed Preferences')).toBeTruthy();
      (0, _globals.expect)(_reactNative.screen.getByText('Size Preferences')).toBeTruthy();
    }));
  });
  (0, _globals.describe)('Error Handling Integration', function () {
    (0, _globals.it)('should handle network errors across multiple services', (0, _asyncToGenerator2.default)(function* () {
      mockApi.get.mockRejectedValue(new Error('Network Error'));
      mockCommunityAPI.getFeed.mockRejectedValue(new Error('Community API Error'));
      mockOfflineService.getPets.mockRejectedValue(new Error('Offline Error'));
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MainScreen, {})),
        getByText = _render6.getByText;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Connection Error')).toBeTruthy();
      });
      (0, _globals.expect)(getByText('Offline Mode')).toBeTruthy();
      (0, _globals.expect)(getByText('Using cached data')).toBeTruthy();
      (0, _globals.expect)(mockNotificationService.scheduleLocalNotification).toHaveBeenCalledWith('Connection Issues', 'Some features may not be available offline');
    }));
    (0, _globals.it)('should handle authentication errors across services', (0, _asyncToGenerator2.default)(function* () {
      mockApi.get.mockRejectedValue(new Error('Unauthorized'));
      mockAuthService.refreshToken.mockRejectedValue(new Error('Token refresh failed'));
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ProtectedScreen, {})),
        getByText = _render7.getByText;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Session Expired')).toBeTruthy();
      });
      (0, _globals.expect)(getByText('Please log in again')).toBeTruthy();
      (0, _globals.expect)(mockOfflineService.clearOfflineData).toHaveBeenCalled();
      (0, _globals.expect)(mockAuthService.logout).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle partial service failures gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockApi.get.mockResolvedValue({
        data: []
      });
      mockCommunityAPI.getFeed.mockRejectedValue(new Error('Feed unavailable'));
      mockOfflineService.getPets.mockResolvedValue([]);
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(Dashboard, {})),
        getByText = _render8.getByText;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(getByText('Dashboard')).toBeTruthy();
      });
      (0, _globals.expect)(getByText('Recent Matches')).toBeTruthy();
      (0, _globals.expect)(_reactNative.screen.getByText('Community feed temporarily unavailable')).toBeTruthy();
      (0, _globals.expect)(getByText('Your Pets')).toBeTruthy();
      (0, _globals.expect)(_reactNative.screen.queryByText('App Error')).toBeNull();
    }));
  });
  (0, _globals.describe)('State Management Integration', function () {
    (0, _globals.it)('should synchronize state across components', (0, _asyncToGenerator2.default)(function* () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(AppWithMultipleComponents, {})),
        getByText = _render9.getByText;
      _reactNative.fireEvent.press(getByText('Edit Profile'));
      var nameInput = _reactNative.screen.getByPlaceholderText('Name');
      _reactNative.fireEvent.changeText(nameInput, 'Updated Name');
      _reactNative.fireEvent.press(getByText('Save Profile'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockApi.put).toHaveBeenCalledWith('/user/profile', {
          name: 'Updated Name'
        });
      });
      (0, _globals.expect)(_reactNative.screen.getByText('Welcome, Updated Name')).toBeTruthy();
      _reactNative.fireEvent.press(getByText('Settings'));
      (0, _globals.expect)(_reactNative.screen.getByText('Updated Name')).toBeTruthy();
    }));
    (0, _globals.it)('should handle concurrent state updates', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook = renderHook(function () {
          return useConcurrentState();
        }),
        result = _renderHook.result;
      (0, _reactNative.act)(function () {
        result.current.updateState1({
          count: 1
        });
        result.current.updateState2({
          value: 'test'
        });
        result.current.updateState1({
          count: 2
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.getState().count).toBe(2);
        (0, _globals.expect)(result.current.getState().value).toBe('test');
        (0, _globals.expect)(result.current.getUpdateCount()).toBe(3);
      });
    }));
    (0, _globals.it)('should handle navigation state integration', (0, _asyncToGenerator2.default)(function* () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(NavigationIntegration, {})),
        getByText = _render0.getByText;
      _reactNative.fireEvent.press(getByText('Go to Profile'));
      (0, _globals.expect)(_reactNative.screen.getByText('Profile Screen')).toBeTruthy();
      _reactNative.fireEvent.press(getByText('Go to Settings'));
      (0, _globals.expect)(_reactNative.screen.getByText('Settings Screen')).toBeTruthy();
      _reactNative.fireEvent.press(getByText('Go to Matches'));
      (0, _globals.expect)(_reactNative.screen.getByText('Matches Screen')).toBeTruthy();
      (0, _globals.expect)(mockOfflineService.getSyncStatus).toHaveBeenCalled();
      (0, _globals.expect)(mockAuthService.getCurrentUser).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Performance Integration', function () {
    (0, _globals.it)('should handle large datasets efficiently', (0, _asyncToGenerator2.default)(function* () {
      var largeMatches = Array.from({
        length: 1000
      }, function (_, i) {
        return {
          id: `match${i}`,
          pet: {
            name: `Pet${i}`,
            photos: [`photo${i}.jpg`]
          },
          compatibility: Math.floor(Math.random() * 100)
        };
      });
      mockApi.get.mockResolvedValue({
        data: largeMatches
      });
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MatchesList, {})),
        getByText = _render1.getByText;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(getByText('Pet0')).toBeTruthy();
        (0, _globals.expect)(getByText('Pet999')).toBeTruthy();
      }, {
        timeout: 5000
      });
      (0, _globals.expect)(_reactNative.screen.queryByText('Loading...')).toBeNull();
    }));
    (0, _globals.it)('should optimize image loading and caching', (0, _asyncToGenerator2.default)(function* () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ImageGallery, {})),
        getByText = _render10.getByText;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockUploadHygieneService.getImageCache).toHaveBeenCalled();
      });
      (0, _globals.expect)(_reactNative.screen.getByText('Images loaded from cache')).toBeTruthy();
      _reactNative.fireEvent.press(getByText('Load More'));
      (0, _globals.expect)(mockApi.get).toHaveBeenCalledWith('/images?page=2');
    }));
    (0, _globals.it)('should handle memory warnings gracefully', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook2 = renderHook(function () {
          return useMemoryIntegration();
        }),
        result = _renderHook2.result;
      (0, _reactNative.act)(function () {
        result.current.simulateMemoryWarning();
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.getMemoryOptimizations()).toContain('cleared_image_cache');
        (0, _globals.expect)(result.current.getMemoryOptimizations()).toContain('reduced_list_size');
      });
      (0, _globals.expect)(result.current.isAppStable()).toBe(true);
    }));
  });
  (0, _globals.describe)('Analytics Integration', function () {
    (0, _globals.it)('should track user journey across screens', (0, _asyncToGenerator2.default)(function* () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(AnalyticsIntegration, {})),
        getByText = _render11.getByText;
      _reactNative.fireEvent.press(getByText('Start'));
      (0, _globals.expect)(_reactNative.screen.getByText('Step 1')).toBeTruthy();
      _reactNative.fireEvent.press(getByText('Continue'));
      (0, _globals.expect)(_reactNative.screen.getByText('Step 2')).toBeTruthy();
      _reactNative.fireEvent.press(getByText('Complete'));
      (0, _globals.expect)(_reactNative.screen.getByText('Finished')).toBeTruthy();
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/analytics/event', {
        event: 'journey_started',
        properties: {
          step: 0
        }
      });
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/analytics/event', {
        event: 'journey_step_completed',
        properties: {
          step: 1
        }
      });
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/analytics/event', {
        event: 'journey_completed',
        properties: {
          totalSteps: 3
        }
      });
    }));
    (0, _globals.it)('should integrate analytics with error reporting', (0, _asyncToGenerator2.default)(function* () {
      mockApi.get.mockRejectedValue(new Error('API Error'));
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ErrorAnalytics, {})),
        getByText = _render12.getByText;
      _reactNative.fireEvent.press(getByText('Trigger Error'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Error occurred')).toBeTruthy();
      });
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/analytics/error', {
        error: 'API Error',
        context: 'ErrorAnalytics component',
        userId: 'current-user',
        sessionId: 'current-session',
        timestamp: _globals.expect.any(Number)
      });
    }));
  });
  (0, _globals.describe)('Notification Integration', function () {
    (0, _globals.it)('should handle push notifications and in-app navigation', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.act)(function () {
        mockNotificationService.handleNotification({
          type: 'match',
          data: {
            matchId: 'match123',
            petName: 'Luna'
          }
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('New Match!')).toBeTruthy();
        (0, _globals.expect)(_reactNative.screen.getByText('You matched with Luna!')).toBeTruthy();
      });
      _reactNative.fireEvent.press(_reactNative.screen.getByText('View Match'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Match Details')).toBeTruthy();
        (0, _globals.expect)(mockApi.get).toHaveBeenCalledWith('/matches/match123');
      });
    }));
    (0, _globals.it)('should integrate notifications with offline queue', (0, _asyncToGenerator2.default)(function* () {
      mockOfflineService.getSyncStatus.mockReturnValue({
        isOnline: false,
        isSyncing: false,
        lastSyncTime: '2024-01-01T10:00:00Z',
        pendingActionsCount: 0,
        syncProgress: 1.0
      });
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(NotificationOffline, {})),
        getByText = _render13.getByText;
      _reactNative.fireEvent.press(getByText('Send Message'));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(_reactNative.screen.getByText('Message will be sent when online')).toBeTruthy();
      });
      mockOfflineService.getSyncStatus.mockReturnValue({
        isOnline: true,
        isSyncing: false,
        lastSyncTime: new Date().toISOString(),
        pendingActionsCount: 0,
        syncProgress: 1.0
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockNotificationService.scheduleLocalNotification).toHaveBeenCalledWith('Message Sent', 'Your message was delivered successfully');
      });
    }));
  });
});
function CommunityScreen() {
  return null;
}
function CommunityFeed() {
  return null;
}
function MainScreen() {
  return null;
}
function SwipeScreen() {
  return null;
}
function ProtectedScreen() {
  return null;
}
function Dashboard() {
  return null;
}
function MatchesList() {
  return null;
}
function ImageGallery() {
  return null;
}
function AppWithMultipleComponents() {
  return null;
}
function NavigationIntegration() {
  return null;
}
function ErrorAnalytics() {
  return null;
}
function NotificationOffline() {
  return null;
}
function useConcurrentState() {
  return {
    updateState1: _globals.jest.fn(),
    updateState2: _globals.jest.fn(),
    getState: _globals.jest.fn(),
    getUpdateCount: _globals.jest.fn()
  };
}
function useMemoryIntegration() {
  return {
    simulateMemoryWarning: _globals.jest.fn(),
    getMemoryOptimizations: _globals.jest.fn(),
    isAppStable: _globals.jest.fn()
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,