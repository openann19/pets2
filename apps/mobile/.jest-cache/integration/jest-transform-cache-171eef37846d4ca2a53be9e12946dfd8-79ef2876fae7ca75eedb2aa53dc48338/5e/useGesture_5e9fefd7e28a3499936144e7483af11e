0e90a5e75daf25804b69776e3d8a3bfc
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGesture = useGesture;
var react_1 = require("react");
var environment_1 = require("../utils/environment");
function useGesture(onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown) {
  var startPos = (0, react_1.useRef)({
    x: 0,
    y: 0,
    time: 0
  });
  var currentPos = (0, react_1.useRef)({
    x: 0,
    y: 0,
    time: 0
  });
  var lastPos = (0, react_1.useRef)({
    x: 0,
    y: 0,
    time: 0
  });
  var handleTouchStart = (0, react_1.useCallback)(function (e) {
    if (e.touches.length > 0) {
      var touch = e.touches[0];
      if (touch != null) {
        startPos.current = {
          x: touch.clientX,
          y: touch.clientY,
          time: Date.now()
        };
        currentPos.current = {
          x: touch.clientX,
          y: touch.clientY,
          time: Date.now()
        };
        lastPos.current = {
          x: touch.clientX,
          y: touch.clientY,
          time: Date.now()
        };
      }
    }
  }, []);
  var handleTouchMove = (0, react_1.useCallback)(function (e) {
    if (e.touches.length > 0) {
      var touch = e.touches[0];
      if (touch != null) {
        lastPos.current = currentPos.current;
        currentPos.current = {
          x: touch.clientX,
          y: touch.clientY,
          time: Date.now()
        };
      }
    }
  }, []);
  var handleTouchEnd = (0, react_1.useCallback)(function (_e) {
    var now = Date.now();
    var deltaTime = now - startPos.current.time;
    if (deltaTime > 300) return;
    var deltaX = currentPos.current.x - startPos.current.x;
    var deltaY = currentPos.current.y - startPos.current.y;
    var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    if (distance < 50) return;
    if (Math.abs(deltaX) > Math.abs(deltaY)) {
      if (deltaX > 0 && onSwipeRight != null) {
        onSwipeRight();
      } else if (deltaX < 0 && onSwipeLeft != null) {
        onSwipeLeft();
      }
    } else {
      if (deltaY > 0 && onSwipeDown != null) {
        onSwipeDown();
      } else if (deltaY < 0 && onSwipeUp != null) {
        onSwipeUp();
      }
    }
  }, [onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown]);
  (0, react_1.useEffect)(function () {
    var element = (0, environment_1.getDocumentElement)();
    if (element == null) {
      return undefined;
    }
    (0, environment_1.addEventListenerSafely)(element, 'touchstart', handleTouchStart);
    (0, environment_1.addEventListenerSafely)(element, 'touchmove', handleTouchMove);
    (0, environment_1.addEventListenerSafely)(element, 'touchend', handleTouchEnd);
    return function () {
      (0, environment_1.removeEventListenerSafely)(element, 'touchstart', handleTouchStart);
      (0, environment_1.removeEventListenerSafely)(element, 'touchmove', handleTouchMove);
      (0, environment_1.removeEventListenerSafely)(element, 'touchend', handleTouchEnd);
    };
  }, [handleTouchStart, handleTouchMove, handleTouchEnd]);
  return {
    handleTouchStart: handleTouchStart,
    handleTouchMove: handleTouchMove,
    handleTouchEnd: handleTouchEnd
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,