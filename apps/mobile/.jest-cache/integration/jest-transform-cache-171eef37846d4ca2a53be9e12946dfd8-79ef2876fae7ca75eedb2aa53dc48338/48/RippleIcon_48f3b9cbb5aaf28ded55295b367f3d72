1cebca0f170063563c4cf09aa88b4595
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var _worklet_12604643036491_init_data = {
  code: "function anonymous() {\n  const {\n    t,\n    interpolate,\n    color,\n    size,\n    stroke\n  } = this._closure;\n  return {\n    opacity: 1 - t.value,\n    transform: [{\n      scale: interpolate(t.value, [0, 1], [0.4, 2])\n    }],\n    borderColor: color,\n    width: size,\n    height: size,\n    borderWidth: stroke,\n    borderRadius: size / 2,\n    position: \"absolute\"\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/RippleIcon.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"t\",\"interpolate\",\"color\",\"size\",\"stroke\",\"_closure\",\"opacity\",\"value\",\"transform\",\"scale\",\"borderColor\",\"width\",\"height\",\"borderWidth\",\"borderRadius\",\"position\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/RippleIcon.tsx\"],\"mappings\":\"AAS6B,SAAAA,UAAA;EAAA;IAAAC,CAAA;IAAAC,WAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAChCC,OAAO,EAAE,CAAC,GAAGN,CAAC,CAACO,KAAK;IACpBC,SAAS,EAAE,CAAC;MAAEC,KAAK,EAAER,WAAW,CAACD,CAAC,CAACO,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;IAAE,CAAC,CAAC;IAC9DG,WAAW,EAAER,KAAK;IAClBS,KAAK,EAAER,IAAI;IAAES,MAAM,EAAET,IAAI;IAAEU,WAAW,EAAET,MAAM;IAAEU,YAAY,EAAEX,IAAI,GAAG,CAAC;IAAEY,QAAQ,EAAE;EACpF,CAAC;AAAA\",\"ignoreList\":[]}"
};
var RippleIcon = (0, _react.memo)(function RippleIcon(_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? 36 : _ref$size,
    _ref$stroke = _ref.stroke,
    stroke = _ref$stroke === void 0 ? 2 : _ref$stroke,
    trigger = _ref.trigger,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? "rgba(236,72,153,0.35)" : _ref$color;
  var t = (0, _reactNativeReanimated.useSharedValue)(0);
  (0, _react.useEffect)(function () {
    t.value = 0;
    t.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 450
    });
  }, [trigger]);
  var s = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -6, -27];
    var _f = function _f() {
      return {
        opacity: 1 - t.value,
        transform: [{
          scale: (0, _reactNativeReanimated.interpolate)(t.value, [0, 1], [0.4, 2])
        }],
        borderColor: color,
        width: size,
        height: size,
        borderWidth: stroke,
        borderRadius: size / 2,
        position: "absolute"
      };
    };
    _f._closure = {
      t: t,
      interpolate: _reactNativeReanimated.interpolate,
      color: color,
      size: size,
      stroke: stroke
    };
    _f.__initData = _worklet_12604643036491_init_data;
    _f.__workletHash = 12604643036491;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    pointerEvents: "none",
    style: s
  });
});
var _default = exports.default = RippleIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmVSZWFuaW1hdGVkIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QyIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfd29ya2xldF8xMjYwNDY0MzAzNjQ5MV9pbml0X2RhdGEiLCJjb2RlIiwibG9jYXRpb24iLCJzb3VyY2VNYXAiLCJSaXBwbGVJY29uIiwibWVtbyIsIl9yZWYiLCJfcmVmJHNpemUiLCJzaXplIiwiX3JlZiRzdHJva2UiLCJzdHJva2UiLCJ0cmlnZ2VyIiwiX3JlZiRjb2xvciIsImNvbG9yIiwidXNlU2hhcmVkVmFsdWUiLCJ1c2VFZmZlY3QiLCJ2YWx1ZSIsIndpdGhUaW1pbmciLCJkdXJhdGlvbiIsInMiLCJ1c2VBbmltYXRlZFN0eWxlIiwiX2UiLCJnbG9iYWwiLCJFcnJvciIsIl9mIiwib3BhY2l0eSIsInRyYW5zZm9ybSIsInNjYWxlIiwiaW50ZXJwb2xhdGUiLCJib3JkZXJDb2xvciIsIndpZHRoIiwiaGVpZ2h0IiwiYm9yZGVyV2lkdGgiLCJib3JkZXJSYWRpdXMiLCJwb3NpdGlvbiIsIl9jbG9zdXJlIiwiX19pbml0RGF0YSIsIl9fd29ya2xldEhhc2giLCJfX3N0YWNrRGV0YWlscyIsIl9fdmVyc2lvbiIsImpzeCIsIlZpZXciLCJwb2ludGVyRXZlbnRzIiwic3R5bGUiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJSaXBwbGVJY29uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbywgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBWaWV3LCBTdHlsZVNoZWV0IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IEFuaW1hdGVkLCB7IGludGVycG9sYXRlLCB1c2VBbmltYXRlZFN0eWxlLCB1c2VTaGFyZWRWYWx1ZSwgd2l0aFRpbWluZyB9IGZyb20gXCJyZWFjdC1uYXRpdmUtcmVhbmltYXRlZFwiO1xuXG50eXBlIFByb3BzID0geyBzaXplPzogbnVtYmVyOyBzdHJva2U/OiBudW1iZXI7IHRyaWdnZXI6IG51bWJlcjsgY29sb3I/OiBzdHJpbmcgfTtcblxuY29uc3QgUmlwcGxlSWNvbiA9IG1lbW8oZnVuY3Rpb24gUmlwcGxlSWNvbih7IHNpemUgPSAzNiwgc3Ryb2tlID0gMiwgdHJpZ2dlciwgY29sb3IgPSBcInJnYmEoMjM2LDcyLDE1MywwLjM1KVwiIH06IFByb3BzKSB7XG4gIGNvbnN0IHQgPSB1c2VTaGFyZWRWYWx1ZSgwKTtcbiAgdXNlRWZmZWN0KCgpID0+IHsgdC52YWx1ZSA9IDA7IHQudmFsdWUgPSB3aXRoVGltaW5nKDEsIHsgZHVyYXRpb246IDQ1MCB9KTsgfSwgW3RyaWdnZXJdKTtcbiAgY29uc3QgcyA9IHVzZUFuaW1hdGVkU3R5bGUoKCkgPT4gKHtcbiAgICBvcGFjaXR5OiAxIC0gdC52YWx1ZSxcbiAgICB0cmFuc2Zvcm06IFt7IHNjYWxlOiBpbnRlcnBvbGF0ZSh0LnZhbHVlLCBbMCwgMV0sIFswLjQsIDJdKSB9XSxcbiAgICBib3JkZXJDb2xvcjogY29sb3IsXG4gICAgd2lkdGg6IHNpemUsIGhlaWdodDogc2l6ZSwgYm9yZGVyV2lkdGg6IHN0cm9rZSwgYm9yZGVyUmFkaXVzOiBzaXplIC8gMiwgcG9zaXRpb246IFwiYWJzb2x1dGVcIiBhcyBjb25zdCxcbiAgfSkpO1xuICByZXR1cm4gPEFuaW1hdGVkLlZpZXcgcG9pbnRlckV2ZW50cz1cIm5vbmVcIiBzdHlsZT17c30gLz47XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUmlwcGxlSWNvbjtcblxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7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