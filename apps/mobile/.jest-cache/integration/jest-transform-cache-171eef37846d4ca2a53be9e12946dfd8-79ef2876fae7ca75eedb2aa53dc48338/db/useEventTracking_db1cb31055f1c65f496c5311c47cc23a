a3ca4fa77cc91f82fc72324906b9ad71
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEventTracking = useEventTracking;
var react_1 = require("react");
var logger_1 = require("../utils/logger");
var env_1 = require("../utils/env");
function useEventTracking() {
  var eventQueue = (0, react_1.useRef)([]);
  var flushTimeout = (0, react_1.useRef)(null);
  var flushEvents = (0, react_1.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (eventQueue.current.length === 0) return;
    var events = (0, _toConsumableArray2.default)(eventQueue.current);
    eventQueue.current = [];
    try {
      var _ref2;
      var response = yield fetch('/api/analytics/events', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${(_ref2 = (0, env_1.getLocalStorageItem)('accessToken')) != null ? _ref2 : ''}`
        },
        body: JSON.stringify({
          events: events
        })
      });
      if (!response.ok) {
        throw new Error('Failed to send analytics events');
      }
      logger_1.logger.info('Analytics events sent', {
        count: events.length
      });
    } catch (error) {
      var _eventQueue$current;
      logger_1.logger.error('Failed to send analytics events', {
        error: error
      });
      (_eventQueue$current = eventQueue.current).unshift.apply(_eventQueue$current, (0, _toConsumableArray2.default)(events));
    }
  }), []);
  var trackEvent = (0, react_1.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (options) {
      var event = _objectSpread(_objectSpread({}, options), {}, {
        timestamp: new Date().toISOString()
      });
      eventQueue.current.push(event);
      if (flushTimeout.current) {
        clearTimeout(flushTimeout.current);
      }
      flushTimeout.current = setTimeout(function () {
        void flushEvents();
      }, 2000);
      logger_1.logger.info('Event tracked', {
        category: options.category,
        action: options.action
      });
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [flushEvents]);
  var trackPageView = (0, react_1.useCallback)(function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (pageName, metadata) {
      yield trackEvent(_objectSpread({
        category: 'Navigation',
        action: 'PageView',
        label: pageName
      }, metadata !== undefined && {
        metadata: metadata
      }));
    });
    return function (_x2, _x3) {
      return _ref4.apply(this, arguments);
    };
  }(), [trackEvent]);
  var trackSwipe = (0, react_1.useCallback)(function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* (action, petId) {
      yield trackEvent({
        category: 'Engagement',
        action: `Swipe_${action}`,
        label: petId,
        value: action === 'superlike' ? 2 : action === 'like' ? 1 : 0
      });
    });
    return function (_x4, _x5) {
      return _ref5.apply(this, arguments);
    };
  }(), [trackEvent]);
  var trackMatch = (0, react_1.useCallback)(function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* (matchId, petId) {
      yield trackEvent({
        category: 'Engagement',
        action: 'Match_Created',
        label: matchId,
        metadata: {
          petId: petId
        }
      });
    });
    return function (_x6, _x7) {
      return _ref6.apply(this, arguments);
    };
  }(), [trackEvent]);
  var trackMessage = (0, react_1.useCallback)(function () {
    var _ref7 = (0, _asyncToGenerator2.default)(function* (matchId, messageLength) {
      yield trackEvent({
        category: 'Communication',
        action: 'Message_Sent',
        label: matchId,
        value: messageLength
      });
    });
    return function (_x8, _x9) {
      return _ref7.apply(this, arguments);
    };
  }(), [trackEvent]);
  var trackProfileView = (0, react_1.useCallback)(function () {
    var _ref8 = (0, _asyncToGenerator2.default)(function* (profileId, duration) {
      yield trackEvent(_objectSpread({
        category: 'Engagement',
        action: 'Profile_View',
        label: profileId
      }, duration !== undefined && {
        value: duration
      }));
    });
    return function (_x0, _x1) {
      return _ref8.apply(this, arguments);
    };
  }(), [trackEvent]);
  return {
    trackEvent: trackEvent,
    trackPageView: trackPageView,
    trackSwipe: trackSwipe,
    trackMatch: trackMatch,
    trackMessage: trackMessage,
    trackProfileView: trackProfileView
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,