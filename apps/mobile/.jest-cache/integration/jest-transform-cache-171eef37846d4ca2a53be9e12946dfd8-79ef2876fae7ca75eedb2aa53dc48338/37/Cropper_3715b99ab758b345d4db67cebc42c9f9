30fe84e9d47d309e43e9e419d0d127f1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cropper = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _vectorIcons = require("@expo/vector-icons");
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _unifiedTheme = require("../../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  SCREEN_W = _Dimensions$get.width;
var ratioToNum = function ratioToNum(r) {
  switch (r) {
    case "1:1":
      return 1;
    case "4:5":
      return 4 / 5;
    case "9:16":
      return 9 / 16;
    case "16:9":
      return 16 / 9;
    case "3:2":
      return 3 / 2;
    default:
      return null;
  }
};
var clamp = function clamp(v, min, max) {
  return Math.max(min, Math.min(max, v));
};
var _worklet_4760109562005_init_data = {
  code: "function anonymous() {\n  const {\n    imgW,\n    baseScale,\n    scale,\n    imgH,\n    cropRight,\n    containerW,\n    cropLeft,\n    cropBottom,\n    containerH,\n    cropTop,\n    tx,\n    clamp,\n    ty\n  } = this._closure;\n  const dispW = imgW * baseScale * scale.value;\n  const dispH = imgH * baseScale * scale.value;\n  const minTx = cropRight - containerW / 2 - dispW / 2;\n  const maxTx = cropLeft - containerW / 2 + dispW / 2;\n  const minTy = cropBottom - containerH / 2 - dispH / 2;\n  const maxTy = cropTop - containerH / 2 + dispH / 2;\n  tx.value = clamp(tx.value, minTx, maxTx);\n  ty.value = clamp(ty.value, minTy, maxTy);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"imgW\",\"baseScale\",\"scale\",\"imgH\",\"cropRight\",\"containerW\",\"cropLeft\",\"cropBottom\",\"containerH\",\"cropTop\",\"tx\",\"clamp\",\"ty\",\"_closure\",\"dispW\",\"value\",\"dispH\",\"minTx\",\"maxTx\",\"minTy\",\"maxTy\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAuEoB,SAAAA,SAAMA,CAAA;EAAA;IAAAC,IAAA;IAAAC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,SAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,UAAA;IAAAC,UAAA;IAAAC,OAAA;IAAAC,EAAA;IAAAC,KAAA;IAAAC;EAAA,SAAAC,QAAA;EAEtB,MAAMC,KAAK,GAAGd,IAAI,GAAGC,SAAS,GAAGC,KAAK,CAACa,KAAK;EAC5C,MAAMC,KAAK,GAAGb,IAAI,GAAGF,SAAS,GAAGC,KAAK,CAACa,KAAK;EAC5C,MAAME,KAAK,GAAGb,SAAS,GAAGC,UAAU,GAAG,CAAC,GAAGS,KAAK,GAAG,CAAC;EACpD,MAAMI,KAAK,GAAGZ,QAAQ,GAAGD,UAAU,GAAG,CAAC,GAAGS,KAAK,GAAG,CAAC;EACnD,MAAMK,KAAK,GAAGZ,UAAU,GAAGC,UAAU,GAAG,CAAC,GAAGQ,KAAK,GAAG,CAAC;EACrD,MAAMI,KAAK,GAAGX,OAAO,GAAGD,UAAU,GAAG,CAAC,GAAGQ,KAAK,GAAG,CAAC;EAClDN,EAAE,CAACK,KAAK,GAAGJ,KAAK,CAACD,EAAE,CAACK,KAAK,EAAEE,KAAK,EAAEC,KAAK,CAAC;EACxCN,EAAE,CAACG,KAAK,GAAGJ,KAAK,CAACC,EAAE,CAACG,KAAK,EAAEI,KAAK,EAAEC,KAAK,CAAC;AAC1C\",\"ignoreList\":[]}"
};
var _worklet_15514434144562_init_data = {
  code: "function anonymous(e) {\n  const {\n    imgW,\n    baseScale,\n    scale,\n    imgH,\n    cropRight,\n    containerW,\n    cropLeft,\n    cropBottom,\n    containerH,\n    cropTop,\n    tx,\n    ty,\n    RUBBER\n  } = this._closure;\n  const dispW = imgW * baseScale * scale.value;\n  const dispH = imgH * baseScale * scale.value;\n  const minTx = cropRight - containerW / 2 - dispW / 2;\n  const maxTx = cropLeft - containerW / 2 + dispW / 2;\n  const minTy = cropBottom - containerH / 2 - dispH / 2;\n  const maxTy = cropTop - containerH / 2 + dispH / 2;\n  const nextX = tx.value + e.changeX;\n  const nextY = ty.value + e.changeY;\n  const overX = nextX < minTx ? nextX - minTx : nextX > maxTx ? nextX - maxTx : 0;\n  const overY = nextY < minTy ? nextY - minTy : nextY > maxTy ? nextY - maxTy : 0;\n  tx.value = overX ? nextX - overX * (1 - RUBBER) : nextX;\n  ty.value = overY ? nextY - overY * (1 - RUBBER) : nextY;\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"e\",\"imgW\",\"baseScale\",\"scale\",\"imgH\",\"cropRight\",\"containerW\",\"cropLeft\",\"cropBottom\",\"containerH\",\"cropTop\",\"tx\",\"ty\",\"RUBBER\",\"_closure\",\"dispW\",\"value\",\"dispH\",\"minTx\",\"maxTx\",\"minTy\",\"maxTy\",\"nextX\",\"changeX\",\"nextY\",\"changeY\",\"overX\",\"overY\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAoFe,SAACA,SAAKA,CAAAC,CAAA;EAAA;IAAAC,IAAA;IAAAC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,SAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,UAAA;IAAAC,UAAA;IAAAC,OAAA;IAAAC,EAAA;IAAAC,EAAA;IAAAC;EAAA,SAAAC,QAAA;EAEf,MAAMC,KAAK,GAAGd,IAAI,GAAGC,SAAS,GAAGC,KAAK,CAACa,KAAK;EAC5C,MAAMC,KAAK,GAAGb,IAAI,GAAGF,SAAS,GAAGC,KAAK,CAACa,KAAK;EAC5C,MAAME,KAAK,GAAGb,SAAS,GAAGC,UAAU,GAAG,CAAC,GAAGS,KAAK,GAAG,CAAC;EACpD,MAAMI,KAAK,GAAGZ,QAAQ,GAAGD,UAAU,GAAG,CAAC,GAAGS,KAAK,GAAG,CAAC;EACnD,MAAMK,KAAK,GAAGZ,UAAU,GAAGC,UAAU,GAAG,CAAC,GAAGQ,KAAK,GAAG,CAAC;EACrD,MAAMI,KAAK,GAAGX,OAAO,GAAGD,UAAU,GAAG,CAAC,GAAGQ,KAAK,GAAG,CAAC;EAElD,MAAMK,KAAK,GAAGX,EAAE,CAACK,KAAK,GAAGhB,CAAC,CAACuB,OAAO;EAClC,MAAMC,KAAK,GAAGZ,EAAE,CAACI,KAAK,GAAGhB,CAAC,CAACyB,OAAO;EAElC,MAAMC,KAAK,GAAGJ,KAAK,GAAGJ,KAAK,GAAGI,KAAK,GAAGJ,KAAK,GAAGI,KAAK,GAAGH,KAAK,GAAGG,KAAK,GAAGH,KAAK,GAAG,CAAC;EAC/E,MAAMQ,KAAK,GAAGH,KAAK,GAAGJ,KAAK,GAAGI,KAAK,GAAGJ,KAAK,GAAGI,KAAK,GAAGH,KAAK,GAAGG,KAAK,GAAGH,KAAK,GAAG,CAAC;EAE/EV,EAAE,CAACK,KAAK,GAAGU,KAAK,GAAGJ,KAAK,GAAGI,KAAK,IAAI,CAAC,GAAGb,MAAM,CAAC,GAAGS,KAAK;EACvDV,EAAE,CAACI,KAAK,GAAGW,KAAK,GAAGH,KAAK,GAAGG,KAAK,IAAI,CAAC,GAAGd,MAAM,CAAC,GAAGW,KAAK;AACzD\",\"ignoreList\":[]}"
};
var _worklet_2561773237314_init_data = {
  code: "function anonymous() {\n  const {\n    edgeClamp\n  } = this._closure;\n  edgeClamp();\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"edgeClamp\",\"_closure\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAsGW,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EACXD,SAAS,CAAC,CAAC;AACb\",\"ignoreList\":[]}"
};
var _worklet_4254833702622_init_data = {
  code: "function anonymous() {\n  const {\n    Haptics\n  } = this._closure;\n  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"Haptics\",\"_closure\",\"impactAsync\",\"ImpactFeedbackStyle\",\"Light\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AA2Ga,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAED,OAAO,CAACE,WAAW,CAACF,OAAO,CAACG,mBAAmB,CAACC,KAAK,CAAC;AAAE\",\"ignoreList\":[]}"
};
var _worklet_5632257845171_init_data = {
  code: "function anonymous(e) {\n  const {\n    scale,\n    clamp\n  } = this._closure;\n  const prev = scale.value;\n  scale.value = clamp(prev * e.scale, 1, 6);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"e\",\"scale\",\"clamp\",\"_closure\",\"prev\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AA4Ge,SAACA,SAAKA,CAAAC,CAAA;EAAA;IAAAC,KAAA;IAAAC;EAAA,SAAAC,QAAA;EACf,MAAMC,IAAI,GAAGH,KAAK,CAACI,KAAK;EACxBJ,KAAK,CAACI,KAAK,GAAGH,KAAK,CAACE,IAAI,GAAGJ,CAAC,CAACC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3C\",\"ignoreList\":[]}"
};
var _worklet_9743667463752_init_data = {
  code: "function anonymous() {\n  const {\n    edgeClamp,\n    Haptics\n  } = this._closure;\n  edgeClamp();\n  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"edgeClamp\",\"Haptics\",\"_closure\",\"impactAsync\",\"ImpactFeedbackStyle\",\"Light\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAgHW,SAAAA,SAAMA,CAAA;EAAA;IAAAC,SAAA;IAAAC;EAAA,SAAAC,QAAA;EACXF,SAAS,CAAC,CAAC;EACXC,OAAO,CAACE,WAAW,CAACF,OAAO,CAACG,mBAAmB,CAACC,KAAK,CAAC;AACxD\",\"ignoreList\":[]}"
};
var _worklet_4343438352327_init_data = {
  code: "function anonymous(rect) {\n  const {\n    cropW,\n    baseScale,\n    cropH,\n    clamp,\n    imgW,\n    imgH,\n    scale,\n    withSpring,\n    tx,\n    edgeClamp,\n    ty\n  } = this._closure;\n  const pad = 1.10;\n  const needScale = Math.max(cropW * pad / (rect.width * baseScale), cropH * pad / (rect.height * baseScale));\n  const nextScale = clamp(needScale, 1, 6);\n  const dispW = imgW * baseScale * nextScale;\n  const dispH = imgH * baseScale * nextScale;\n  const rx = rect.x + rect.width / 2;\n  const ry = rect.y + rect.height / 2;\n  const targetTx = dispW / 2 - rx * baseScale * nextScale;\n  const targetTy = dispH / 2 - ry * baseScale * nextScale;\n  scale.value = withSpring(nextScale, {\n    damping: 18,\n    stiffness: 300\n  }, function () {});\n  tx.value = withSpring(targetTx, {\n    damping: 18,\n    stiffness: 300\n  }, edgeClamp);\n  ty.value = withSpring(targetTy, {\n    damping: 18,\n    stiffness: 300\n  }, edgeClamp);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"rect\",\"cropW\",\"baseScale\",\"cropH\",\"clamp\",\"imgW\",\"imgH\",\"scale\",\"withSpring\",\"tx\",\"edgeClamp\",\"ty\",\"_closure\",\"pad\",\"needScale\",\"Math\",\"max\",\"width\",\"height\",\"nextScale\",\"dispW\",\"dispH\",\"rx\",\"x\",\"ry\",\"y\",\"targetTx\",\"targetTy\",\"value\",\"damping\",\"stiffness\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAwHkB,SAACA,SAAeA,CAAAC,IAAA;EAAA;IAAAC,KAAA;IAAAC,SAAA;IAAAC,KAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,IAAA;IAAAC,KAAA;IAAAC,UAAA;IAAAC,EAAA;IAAAC,SAAA;IAAAC;EAAA,SAAAC,QAAA;EAE9B,MAAMC,GAAG,GAAG,IAAI;EAChB,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CACvBf,KAAK,GAAGY,GAAG,IAAKb,IAAI,CAACiB,KAAK,GAAGf,SAAS,CAAC,EACvCC,KAAK,GAAGU,GAAG,IAAKb,IAAI,CAACkB,MAAM,GAAGhB,SAAS,CAC1C,CAAC;EACD,MAAMiB,SAAS,GAAGf,KAAK,CAACU,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;EACxC,MAAMM,KAAK,GAAGf,IAAI,GAAGH,SAAS,GAAGiB,SAAS;EAC1C,MAAME,KAAK,GAAGf,IAAI,GAAGJ,SAAS,GAAGiB,SAAS;EAG1C,MAAMG,EAAE,GAAGtB,IAAI,CAACuB,CAAC,GAAGvB,IAAI,CAACiB,KAAK,GAAG,CAAC;EAClC,MAAMO,EAAE,GAAGxB,IAAI,CAACyB,CAAC,GAAGzB,IAAI,CAACkB,MAAM,GAAG,CAAC;EAEnC,MAAMQ,QAAQ,GAAGN,KAAK,GAAG,CAAC,GAAGE,EAAE,GAAGpB,SAAS,GAAGiB,SAAS;EACvD,MAAMQ,QAAQ,GAAGN,KAAK,GAAG,CAAC,GAAGG,EAAE,GAAGtB,SAAS,GAAGiB,SAAS;EAEvDZ,KAAK,CAACqB,KAAK,GAAGpB,UAAU,CAACW,SAAS,EAAE;IAAEU,OAAO,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAI,CAAC,EAAE,YAAM,CACzE,CACD,CAAC;EACFrB,EAAE,CAACmB,KAAK,GAAGpB,UAAU,CAACkB,QAAQ,EAAE;IAAEG,OAAO,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAI,CAAC,EAAEpB,SAAS,CAAC;EAC3EC,EAAE,CAACiB,KAAK,GAAGpB,UAAU,CAACmB,QAAQ,EAAE;IAAEE,OAAO,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAI,CAAC,EAAEpB,SAAS,CAAC;AAC7E\",\"ignoreList\":[]}"
};
var _worklet_16556756009009_init_data = {
  code: "function anonymous() {}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AA0IyE,SAAAA,SAAMA,CAAA,GACzE\",\"ignoreList\":[]}"
};
var _worklet_10279186787711_init_data = {
  code: "function anonymous() {\n  const {\n    tx,\n    ty,\n    scale\n  } = this._closure;\n  return {\n    transform: [{\n      translateX: tx.value\n    }, {\n      translateY: ty.value\n    }, {\n      scale: scale.value\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"tx\",\"ty\",\"scale\",\"_closure\",\"transform\",\"translateX\",\"value\",\"translateY\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAmJoC,SAAAA,UAAA;EAAA;IAAAC,EAAA;IAAAC,EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IACvCC,SAAS,EAAE,CACT;MAAEC,UAAU,EAAEL,EAAE,CAACM;IAAM,CAAC,EACxB;MAAEC,UAAU,EAAEN,EAAE,CAACK;IAAM,CAAC,EACxB;MAAEJ,KAAK,EAAEA,KAAK,CAACI;IAAM,CAAC;EAE1B,CAAC;AAAA\",\"ignoreList\":[]}"
};
var Cropper = exports.Cropper = (0, _react.forwardRef)(function (_ref, ref) {
  var uri = _ref.uri,
    containerW = _ref.containerW,
    containerH = _ref.containerH,
    _ref$defaultRatio = _ref.defaultRatio,
    defaultRatio = _ref$defaultRatio === void 0 ? "4:5" : _ref$defaultRatio,
    onCropped = _ref.onCropped,
    _ref$showStoryGuides = _ref.showStoryGuides,
    showStoryGuides = _ref$showStoryGuides === void 0 ? false : _ref$showStoryGuides;
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    imgW = _useState2[0],
    setImgW = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    imgH = _useState4[0],
    setImgH = _useState4[1];
  var _useState5 = (0, _react.useState)(defaultRatio),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    ratio = _useState6[0],
    setRatio = _useState6[1];
  (0, _react.useEffect)(function () {
    _reactNative.Image.getSize(uri, function (w, h) {
      setImgW(w);
      setImgH(h);
    }, function () {});
  }, [uri]);
  var baseScale = (0, _react.useMemo)(function () {
    return !imgW || !imgH ? 1 : Math.min(containerW / imgW, containerH / imgH);
  }, [imgW, imgH, containerW, containerH]);
  var ar = ratioToNum(ratio);
  var cropW = ar ? Math.min(containerW, containerH * ar) : Math.min(containerW, containerH);
  var cropH = ar ? cropW / ar : Math.min(containerW, containerH);
  var cropLeft = (containerW - cropW) / 2;
  var cropTop = (containerH - cropH) / 2;
  var cropRight = cropLeft + cropW;
  var cropBottom = cropTop + cropH;
  var scale = (0, _reactNativeReanimated.useSharedValue)(1);
  var tx = (0, _reactNativeReanimated.useSharedValue)(0);
  var ty = (0, _reactNativeReanimated.useSharedValue)(0);
  var RUBBER = 0.45;
  var edgeClamp = function () {
    var _e = [new global.Error(), -14, -27];
    var _f = function _f() {
      var dispW = imgW * baseScale * scale.value;
      var dispH = imgH * baseScale * scale.value;
      var minTx = cropRight - containerW / 2 - dispW / 2;
      var maxTx = cropLeft - containerW / 2 + dispW / 2;
      var minTy = cropBottom - containerH / 2 - dispH / 2;
      var maxTy = cropTop - containerH / 2 + dispH / 2;
      tx.value = clamp(tx.value, minTx, maxTx);
      ty.value = clamp(ty.value, minTy, maxTy);
    };
    _f._closure = {
      imgW: imgW,
      baseScale: baseScale,
      scale: scale,
      imgH: imgH,
      cropRight: cropRight,
      containerW: containerW,
      cropLeft: cropLeft,
      cropBottom: cropBottom,
      containerH: containerH,
      cropTop: cropTop,
      tx: tx,
      clamp: clamp,
      ty: ty
    };
    _f.__initData = _worklet_4760109562005_init_data;
    _f.__workletHash = 4760109562005;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
  var pan = _reactNativeGestureHandler.Gesture.Pan().onChange(function () {
    var _e = [new global.Error(), -14, -27];
    var _f = function _f(e) {
      var dispW = imgW * baseScale * scale.value;
      var dispH = imgH * baseScale * scale.value;
      var minTx = cropRight - containerW / 2 - dispW / 2;
      var maxTx = cropLeft - containerW / 2 + dispW / 2;
      var minTy = cropBottom - containerH / 2 - dispH / 2;
      var maxTy = cropTop - containerH / 2 + dispH / 2;
      var nextX = tx.value + e.changeX;
      var nextY = ty.value + e.changeY;
      var overX = nextX < minTx ? nextX - minTx : nextX > maxTx ? nextX - maxTx : 0;
      var overY = nextY < minTy ? nextY - minTy : nextY > maxTy ? nextY - maxTy : 0;
      tx.value = overX ? nextX - overX * (1 - RUBBER) : nextX;
      ty.value = overY ? nextY - overY * (1 - RUBBER) : nextY;
    };
    _f._closure = {
      imgW: imgW,
      baseScale: baseScale,
      scale: scale,
      imgH: imgH,
      cropRight: cropRight,
      containerW: containerW,
      cropLeft: cropLeft,
      cropBottom: cropBottom,
      containerH: containerH,
      cropTop: cropTop,
      tx: tx,
      ty: ty,
      RUBBER: RUBBER
    };
    _f.__initData = _worklet_15514434144562_init_data;
    _f.__workletHash = 15514434144562;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onEnd(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      edgeClamp();
    };
    _f._closure = {
      edgeClamp: edgeClamp
    };
    _f.__initData = _worklet_2561773237314_init_data;
    _f.__workletHash = 2561773237314;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var pinch = _reactNativeGestureHandler.Gesture.Pinch().onBegin(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    };
    _f._closure = {
      Haptics: Haptics
    };
    _f.__initData = _worklet_4254833702622_init_data;
    _f.__workletHash = 4254833702622;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onChange(function () {
    var _e = [new global.Error(), -3, -27];
    var _f = function _f(e) {
      var prev = scale.value;
      scale.value = clamp(prev * e.scale, 1, 6);
    };
    _f._closure = {
      scale: scale,
      clamp: clamp
    };
    _f.__initData = _worklet_5632257845171_init_data;
    _f.__workletHash = 5632257845171;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onEnd(function () {
    var _e = [new global.Error(), -3, -27];
    var _f = function _f() {
      edgeClamp();
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    };
    _f._closure = {
      edgeClamp: edgeClamp,
      Haptics: Haptics
    };
    _f.__initData = _worklet_9743667463752_init_data;
    _f.__workletHash = 9743667463752;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var composed = _reactNativeGestureHandler.Gesture.Simultaneous(pan, pinch);
  var focusTo = function () {
    var _e = [new global.Error(), -12, -27];
    var _f = function _f(rect) {
      var pad = 1.10;
      var needScale = Math.max(cropW * pad / (rect.width * baseScale), cropH * pad / (rect.height * baseScale));
      var nextScale = clamp(needScale, 1, 6);
      var dispW = imgW * baseScale * nextScale;
      var dispH = imgH * baseScale * nextScale;
      var rx = rect.x + rect.width / 2;
      var ry = rect.y + rect.height / 2;
      var targetTx = dispW / 2 - rx * baseScale * nextScale;
      var targetTy = dispH / 2 - ry * baseScale * nextScale;
      scale.value = (0, _reactNativeReanimated.withSpring)(nextScale, {
        damping: 18,
        stiffness: 300
      }, function () {
        var _e = [new global.Error(), 1, -27];
        var _f = function _f() {};
        _f._closure = {};
        _f.__initData = _worklet_16556756009009_init_data;
        _f.__workletHash = 16556756009009;
        _f.__stackDetails = _e;
        _f.__version = "3.3.0";
        return _f;
      }());
      tx.value = (0, _reactNativeReanimated.withSpring)(targetTx, {
        damping: 18,
        stiffness: 300
      }, edgeClamp);
      ty.value = (0, _reactNativeReanimated.withSpring)(targetTy, {
        damping: 18,
        stiffness: 300
      }, edgeClamp);
    };
    _f._closure = {
      cropW: cropW,
      baseScale: baseScale,
      cropH: cropH,
      clamp: clamp,
      imgW: imgW,
      imgH: imgH,
      scale: scale,
      withSpring: _reactNativeReanimated.withSpring,
      tx: tx,
      edgeClamp: edgeClamp,
      ty: ty
    };
    _f.__initData = _worklet_4343438352327_init_data;
    _f.__workletHash = 4343438352327;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      focusTo: focusTo
    };
  });
  var imgStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -4, -27];
    var _f = function _f() {
      return {
        transform: [{
          translateX: tx.value
        }, {
          translateY: ty.value
        }, {
          scale: scale.value
        }]
      };
    };
    _f._closure = {
      tx: tx,
      ty: ty,
      scale: scale
    };
    _f.__initData = _worklet_10279186787711_init_data;
    _f.__workletHash = 10279186787711;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var applyCrop = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      var s = scale.value;
      var dispW = imgW * baseScale * s;
      var dispH = imgH * baseScale * s;
      var cx = containerW / 2 + tx.value;
      var cy = containerH / 2 + ty.value;
      var left = cx - dispW / 2;
      var top = cy - dispH / 2;
      var u = (cropLeft - left) / dispW;
      var v = (cropTop - top) / dispH;
      var uw = cropW / dispW;
      var vh = cropH / dispH;
      var originX = clamp(Math.round(u * imgW), 0, imgW - 1);
      var originY = clamp(Math.round(v * imgH), 0, imgH - 1);
      var widthPx = clamp(Math.round(uw * imgW), 1, imgW - originX);
      var heightPx = clamp(Math.round(vh * imgH), 1, imgH - originY);
      try {
        var result = yield ImageManipulator.manipulateAsync(uri, [{
          crop: {
            originX: originX,
            originY: originY,
            width: widthPx,
            height: heightPx
          }
        }], {
          compress: 1,
          format: ImageManipulator.SaveFormat.JPEG
        });
        onCropped(result.uri);
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      } catch (_unused) {
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
      }
    });
    return function applyCrop() {
      return _ref2.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      width: containerW,
      height: containerH
    },
    children: [(0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
      gesture: composed,
      children: (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.Image, {
        source: {
          uri: uri
        },
        style: [styles.img, {
          width: imgW * baseScale,
          height: imgH * baseScale
        }, imgStyle],
        resizeMode: "contain",
        accessibilityIgnoresInvertColors: true
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      pointerEvents: "none",
      style: _reactNative.StyleSheet.absoluteFill,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          flex: 1,
          backgroundColor: "rgba(0,0,0,0.6)"
        }
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: {
          height: cropH,
          flexDirection: "row"
        },
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            width: cropLeft,
            backgroundColor: "rgba(0,0,0,0.6)"
          }
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: {
            width: cropW,
            borderWidth: 1,
            borderColor: "rgba(255,255,255,0.85)"
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.gridRow
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.gridRow
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.gridRow
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: [_reactNative.StyleSheet.absoluteFill, {
              flexDirection: "row"
            }],
            children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.gridCol
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.gridCol
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.gridCol
            })]
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            width: cropLeft,
            backgroundColor: "rgba(0,0,0,0.6)"
          }
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          flex: 1,
          backgroundColor: "rgba(0,0,0,0.6)"
        }
      })]
    }), showStoryGuides && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      pointerEvents: "none",
      style: _reactNative.StyleSheet.absoluteFill,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.storyBand, {
          top: cropTop + 64
        }]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.storyBand, {
          bottom: containerH - cropBottom + 120
        }]
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.controls,
      children: [["FREE", "1:1", "4:5", "9:16", "16:9", "3:2"].map(function (r) {
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            setRatio(r);
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
          },
          style: [styles.ratioBtn, r === ratio && styles.ratioBtnActive],
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.ratioTxt, r === ratio && styles.ratioTxtActive],
            children: r
          })
        }, r);
      }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        onPress: applyCrop,
        style: styles.applyBtn,
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "crop",
          size: 16,
          color: "#fff"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.applyTxt,
          children: "Apply Crop"
        })]
      })]
    })]
  });
});
var styles = _reactNative.StyleSheet.create({
  img: {
    position: "absolute",
    left: 0,
    top: 0
  },
  gridRow: {
    flex: 1,
    borderBottomWidth: 1,
    borderColor: "rgba(255,255,255,0.35)"
  },
  gridCol: {
    flex: 1,
    borderRightWidth: 1,
    borderColor: "rgba(255,255,255,0.35)"
  },
  controls: {
    position: "absolute",
    bottom: 12,
    left: 12,
    right: 12,
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 8,
    justifyContent: "center"
  },
  ratioBtn: {
    paddingVertical: 6,
    paddingHorizontal: 10,
    borderRadius: 10,
    backgroundColor: "rgba(255,255,255,0.08)",
    borderWidth: 1,
    borderColor: "rgba(255,255,255,0.15)"
  },
  ratioBtnActive: {
    backgroundColor: "rgba(236,72,153,0.22)",
    borderColor: _unifiedTheme.Theme.colors.primary[500]
  },
  ratioTxt: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "600"
  },
  ratioTxtActive: {
    color: "#fff"
  },
  applyBtn: {
    marginLeft: 8,
    flexDirection: "row",
    alignItems: "center",
    gap: 6,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
    backgroundColor: _unifiedTheme.Theme.colors.primary[500]
  },
  applyTxt: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "700"
  },
  storyBand: {
    position: "absolute",
    left: 0,
    right: 0,
    height: 60,
    borderColor: "rgba(14,165,233,0.7)",
    borderWidth: 1,
    borderStyle: "dashed"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,