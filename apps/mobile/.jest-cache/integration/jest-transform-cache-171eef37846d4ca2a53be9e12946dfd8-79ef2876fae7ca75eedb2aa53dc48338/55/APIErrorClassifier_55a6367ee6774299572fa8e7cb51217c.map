{"version":3,"names":["_interopRequireDefault","require","_defineProperty2","_classCallCheck2","_createClass2","Object","defineProperty","exports","value","APIErrorClassifier","ErrorType","default","key","classify","error","context","statusCode","extractStatusCode","classifyByStatusCode","errorMessage","extractErrorMessage","classifyByMessage","type","SERVER","retryable","userMessage","ERROR_MESSAGES","severity","AUTHENTICATION","AUTHORIZATION","CLIENT","TIMEOUT","RATE_LIMIT","VALIDATION","UNKNOWN","lowerMessage","toLowerCase","isNetworkError","NETWORK","isTimeoutError","isAuthenticationError","isRetryableError","message","networkKeywords","some","keyword","includes","timeoutKeywords","authKeywords","Error","status","response","undefined","String","getUserMessage","classification"],"sources":["APIErrorClassifier.js"],"sourcesContent":["\"use strict\";\n/**\n * API Error Classifier\n * Classifies errors and determines retry eligibility\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.APIErrorClassifier = exports.ErrorType = void 0;\nvar ErrorType;\n(function (ErrorType) {\n    ErrorType[\"NETWORK\"] = \"NETWORK\";\n    ErrorType[\"AUTHENTICATION\"] = \"AUTHENTICATION\";\n    ErrorType[\"AUTHORIZATION\"] = \"AUTHORIZATION\";\n    ErrorType[\"VALIDATION\"] = \"VALIDATION\";\n    ErrorType[\"SERVER\"] = \"SERVER\";\n    ErrorType[\"CLIENT\"] = \"CLIENT\";\n    ErrorType[\"TIMEOUT\"] = \"TIMEOUT\";\n    ErrorType[\"RATE_LIMIT\"] = \"RATE_LIMIT\";\n    ErrorType[\"UNKNOWN\"] = \"UNKNOWN\";\n})(ErrorType || (exports.ErrorType = ErrorType = {}));\nclass APIErrorClassifier {\n    static ERROR_MESSAGES = {\n        [ErrorType.NETWORK]: 'Network connection failed. Please check your internet connection.',\n        [ErrorType.AUTHENTICATION]: 'Your session has expired. Please sign in again.',\n        [ErrorType.AUTHORIZATION]: 'You do not have permission to perform this action.',\n        [ErrorType.VALIDATION]: 'Invalid input. Please check your data and try again.',\n        [ErrorType.SERVER]: 'Server error. Please try again later.',\n        [ErrorType.CLIENT]: 'Invalid request. Please check your input.',\n        [ErrorType.TIMEOUT]: 'Request timed out. Please try again.',\n        [ErrorType.RATE_LIMIT]: 'Too many requests. Please wait a moment.',\n        [ErrorType.UNKNOWN]: 'An unexpected error occurred. Please try again.',\n    };\n    /**\n     * Classify an error\n     */\n    classify(error, context) {\n        const statusCode = context?.statusCode || this.extractStatusCode(error);\n        // Classify by status code first\n        if (statusCode) {\n            return this.classifyByStatusCode(statusCode);\n        }\n        // Classify by error message\n        const errorMessage = this.extractErrorMessage(error);\n        return this.classifyByMessage(errorMessage, error);\n    }\n    /**\n     * Classify error by HTTP status code\n     */\n    classifyByStatusCode(statusCode) {\n        switch (true) {\n            case statusCode >= 500:\n                return {\n                    type: ErrorType.SERVER,\n                    retryable: true,\n                    userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.SERVER],\n                    statusCode,\n                    severity: 'high',\n                };\n            case statusCode === 401:\n                return {\n                    type: ErrorType.AUTHENTICATION,\n                    retryable: false,\n                    userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.AUTHENTICATION],\n                    statusCode,\n                    severity: 'high',\n                };\n            case statusCode === 403:\n                return {\n                    type: ErrorType.AUTHORIZATION,\n                    retryable: false,\n                    userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.AUTHORIZATION],\n                    statusCode,\n                    severity: 'medium',\n                };\n            case statusCode === 404:\n                return {\n                    type: ErrorType.CLIENT,\n                    retryable: false,\n                    userMessage: 'Resource not found.',\n                    statusCode,\n                    severity: 'low',\n                };\n            case statusCode === 408:\n                return {\n                    type: ErrorType.TIMEOUT,\n                    retryable: true,\n                    userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.TIMEOUT],\n                    statusCode,\n                    severity: 'medium',\n                };\n            case statusCode === 429:\n                return {\n                    type: ErrorType.RATE_LIMIT,\n                    retryable: true,\n                    userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.RATE_LIMIT],\n                    statusCode,\n                    severity: 'medium',\n                };\n            case statusCode >= 400:\n                return {\n                    type: ErrorType.VALIDATION,\n                    retryable: false,\n                    userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.VALIDATION],\n                    statusCode,\n                    severity: 'medium',\n                };\n            default:\n                return {\n                    type: ErrorType.UNKNOWN,\n                    retryable: false,\n                    userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.UNKNOWN],\n                    statusCode,\n                    severity: 'low',\n                };\n        }\n    }\n    /**\n     * Classify error by error message\n     */\n    classifyByMessage(errorMessage, error) {\n        const lowerMessage = errorMessage.toLowerCase();\n        // Network errors\n        if (this.isNetworkError(lowerMessage)) {\n            return {\n                type: ErrorType.NETWORK,\n                retryable: true,\n                userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.NETWORK],\n                severity: 'high',\n            };\n        }\n        // Timeout errors\n        if (this.isTimeoutError(lowerMessage)) {\n            return {\n                type: ErrorType.TIMEOUT,\n                retryable: true,\n                userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.TIMEOUT],\n                severity: 'medium',\n            };\n        }\n        // Auth errors\n        if (this.isAuthenticationError(lowerMessage)) {\n            return {\n                type: ErrorType.AUTHENTICATION,\n                retryable: false,\n                userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.AUTHENTICATION],\n                severity: 'high',\n            };\n        }\n        // Unknown error\n        return {\n            type: ErrorType.UNKNOWN,\n            retryable: this.isRetryableError(error),\n            userMessage: APIErrorClassifier.ERROR_MESSAGES[ErrorType.UNKNOWN],\n            severity: 'medium',\n        };\n    }\n    /**\n     * Check if error is network error\n     */\n    isNetworkError(message) {\n        const networkKeywords = [\n            'network',\n            'connection',\n            'econnrefused',\n            'enotfound',\n            'econnreset',\n            'fetch failed',\n            'network error',\n        ];\n        return networkKeywords.some(keyword => message.includes(keyword));\n    }\n    /**\n     * Check if error is timeout error\n     */\n    isTimeoutError(message) {\n        const timeoutKeywords = [\n            'timeout',\n            'timed out',\n            'etimedout',\n            'request timeout',\n        ];\n        return timeoutKeywords.some(keyword => message.includes(keyword));\n    }\n    /**\n     * Check if error is authentication error\n     */\n    isAuthenticationError(message) {\n        const authKeywords = [\n            'unauthorized',\n            'authentication',\n            'token',\n            'invalid credentials',\n            'session expired',\n        ];\n        return authKeywords.some(keyword => message.includes(keyword));\n    }\n    /**\n     * Check if error is generally retryable\n     */\n    isRetryableError(error) {\n        if (error instanceof Error) {\n            const message = error.message.toLowerCase();\n            return this.isNetworkError(message) || this.isTimeoutError(message);\n        }\n        return false;\n    }\n    /**\n     * Extract status code from error\n     */\n    extractStatusCode(error) {\n        if (error && typeof error === 'object') {\n            if ('status' in error && typeof error.status === 'number') {\n                return error.status;\n            }\n            if ('statusCode' in error && typeof error.statusCode === 'number') {\n                return error.statusCode;\n            }\n            if ('response' in error && typeof error.response === 'object' && error.response !== null) {\n                const response = error.response;\n                return response.status || response.statusCode;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Extract error message\n     */\n    extractErrorMessage(error) {\n        if (error instanceof Error) {\n            return error.message;\n        }\n        if (error && typeof error === 'object') {\n            if ('message' in error && typeof error.message === 'string') {\n                return error.message;\n            }\n        }\n        return String(error);\n    }\n    /**\n     * Get user-friendly error message\n     */\n    getUserMessage(error, context) {\n        const classification = this.classify(error, context);\n        return classification.userMessage;\n    }\n}\nexports.APIErrorClassifier = APIErrorClassifier;\n"],"mappings":"AAAA,YAAY;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAA,IAAAC,gBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAA,IAAAE,gBAAA,GAAAH,sBAAA,CAAAC,OAAA;AAAA,IAAAG,aAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAKbI,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAGF,OAAO,CAACG,SAAS,GAAG,KAAK,CAAC;AACvD,IAAIA,SAAS;AACb,CAAC,UAAUA,SAAS,EAAE;EAClBA,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS;EAChCA,SAAS,CAAC,gBAAgB,CAAC,GAAG,gBAAgB;EAC9CA,SAAS,CAAC,eAAe,CAAC,GAAG,eAAe;EAC5CA,SAAS,CAAC,YAAY,CAAC,GAAG,YAAY;EACtCA,SAAS,CAAC,QAAQ,CAAC,GAAG,QAAQ;EAC9BA,SAAS,CAAC,QAAQ,CAAC,GAAG,QAAQ;EAC9BA,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS;EAChCA,SAAS,CAAC,YAAY,CAAC,GAAG,YAAY;EACtCA,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS;AACpC,CAAC,EAAEA,SAAS,KAAKH,OAAO,CAACG,SAAS,GAAGA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;AAAC,IAChDD,kBAAkB;EAAA,SAAAA,mBAAA;IAAA,IAAAN,gBAAA,CAAAQ,OAAA,QAAAF,kBAAA;EAAA;EAAA,WAAAL,aAAA,CAAAO,OAAA,EAAAF,kBAAA;IAAAG,GAAA;IAAAJ,KAAA,EAepB,SAAAK,QAAQA,CAACC,KAAK,EAAEC,OAAO,EAAE;MACrB,IAAMC,UAAU,GAAG,CAAAD,OAAO,oBAAPA,OAAO,CAAEC,UAAU,KAAI,IAAI,CAACC,iBAAiB,CAACH,KAAK,CAAC;MAEvE,IAAIE,UAAU,EAAE;QACZ,OAAO,IAAI,CAACE,oBAAoB,CAACF,UAAU,CAAC;MAChD;MAEA,IAAMG,YAAY,GAAG,IAAI,CAACC,mBAAmB,CAACN,KAAK,CAAC;MACpD,OAAO,IAAI,CAACO,iBAAiB,CAACF,YAAY,EAAEL,KAAK,CAAC;IACtD;EAAC;IAAAF,GAAA;IAAAJ,KAAA,EAID,SAAAU,oBAAoBA,CAACF,UAAU,EAAE;MAC7B,QAAQ,IAAI;QACR,KAAKA,UAAU,IAAI,GAAG;UAClB,OAAO;YACHM,IAAI,EAAEZ,SAAS,CAACa,MAAM;YACtBC,SAAS,EAAE,IAAI;YACfC,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAACa,MAAM,CAAC;YAChEP,UAAU,EAAVA,UAAU;YACVW,QAAQ,EAAE;UACd,CAAC;QACL,KAAKX,UAAU,KAAK,GAAG;UACnB,OAAO;YACHM,IAAI,EAAEZ,SAAS,CAACkB,cAAc;YAC9BJ,SAAS,EAAE,KAAK;YAChBC,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAACkB,cAAc,CAAC;YACxEZ,UAAU,EAAVA,UAAU;YACVW,QAAQ,EAAE;UACd,CAAC;QACL,KAAKX,UAAU,KAAK,GAAG;UACnB,OAAO;YACHM,IAAI,EAAEZ,SAAS,CAACmB,aAAa;YAC7BL,SAAS,EAAE,KAAK;YAChBC,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAACmB,aAAa,CAAC;YACvEb,UAAU,EAAVA,UAAU;YACVW,QAAQ,EAAE;UACd,CAAC;QACL,KAAKX,UAAU,KAAK,GAAG;UACnB,OAAO;YACHM,IAAI,EAAEZ,SAAS,CAACoB,MAAM;YACtBN,SAAS,EAAE,KAAK;YAChBC,WAAW,EAAE,qBAAqB;YAClCT,UAAU,EAAVA,UAAU;YACVW,QAAQ,EAAE;UACd,CAAC;QACL,KAAKX,UAAU,KAAK,GAAG;UACnB,OAAO;YACHM,IAAI,EAAEZ,SAAS,CAACqB,OAAO;YACvBP,SAAS,EAAE,IAAI;YACfC,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAACqB,OAAO,CAAC;YACjEf,UAAU,EAAVA,UAAU;YACVW,QAAQ,EAAE;UACd,CAAC;QACL,KAAKX,UAAU,KAAK,GAAG;UACnB,OAAO;YACHM,IAAI,EAAEZ,SAAS,CAACsB,UAAU;YAC1BR,SAAS,EAAE,IAAI;YACfC,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAACsB,UAAU,CAAC;YACpEhB,UAAU,EAAVA,UAAU;YACVW,QAAQ,EAAE;UACd,CAAC;QACL,KAAKX,UAAU,IAAI,GAAG;UAClB,OAAO;YACHM,IAAI,EAAEZ,SAAS,CAACuB,UAAU;YAC1BT,SAAS,EAAE,KAAK;YAChBC,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAACuB,UAAU,CAAC;YACpEjB,UAAU,EAAVA,UAAU;YACVW,QAAQ,EAAE;UACd,CAAC;QACL;UACI,OAAO;YACHL,IAAI,EAAEZ,SAAS,CAACwB,OAAO;YACvBV,SAAS,EAAE,KAAK;YAChBC,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAACwB,OAAO,CAAC;YACjElB,UAAU,EAAVA,UAAU;YACVW,QAAQ,EAAE;UACd,CAAC;MACT;IACJ;EAAC;IAAAf,GAAA;IAAAJ,KAAA,EAID,SAAAa,iBAAiBA,CAACF,YAAY,EAAEL,KAAK,EAAE;MACnC,IAAMqB,YAAY,GAAGhB,YAAY,CAACiB,WAAW,CAAC,CAAC;MAE/C,IAAI,IAAI,CAACC,cAAc,CAACF,YAAY,CAAC,EAAE;QACnC,OAAO;UACHb,IAAI,EAAEZ,SAAS,CAAC4B,OAAO;UACvBd,SAAS,EAAE,IAAI;UACfC,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAAC4B,OAAO,CAAC;UACjEX,QAAQ,EAAE;QACd,CAAC;MACL;MAEA,IAAI,IAAI,CAACY,cAAc,CAACJ,YAAY,CAAC,EAAE;QACnC,OAAO;UACHb,IAAI,EAAEZ,SAAS,CAACqB,OAAO;UACvBP,SAAS,EAAE,IAAI;UACfC,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAACqB,OAAO,CAAC;UACjEJ,QAAQ,EAAE;QACd,CAAC;MACL;MAEA,IAAI,IAAI,CAACa,qBAAqB,CAACL,YAAY,CAAC,EAAE;QAC1C,OAAO;UACHb,IAAI,EAAEZ,SAAS,CAACkB,cAAc;UAC9BJ,SAAS,EAAE,KAAK;UAChBC,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAACkB,cAAc,CAAC;UACxED,QAAQ,EAAE;QACd,CAAC;MACL;MAEA,OAAO;QACHL,IAAI,EAAEZ,SAAS,CAACwB,OAAO;QACvBV,SAAS,EAAE,IAAI,CAACiB,gBAAgB,CAAC3B,KAAK,CAAC;QACvCW,WAAW,EAAEhB,kBAAkB,CAACiB,cAAc,CAAChB,SAAS,CAACwB,OAAO,CAAC;QACjEP,QAAQ,EAAE;MACd,CAAC;IACL;EAAC;IAAAf,GAAA;IAAAJ,KAAA,EAID,SAAA6B,cAAcA,CAACK,OAAO,EAAE;MACpB,IAAMC,eAAe,GAAG,CACpB,SAAS,EACT,YAAY,EACZ,cAAc,EACd,WAAW,EACX,YAAY,EACZ,cAAc,EACd,eAAe,CAClB;MACD,OAAOA,eAAe,CAACC,IAAI,CAAC,UAAAC,OAAO;QAAA,OAAIH,OAAO,CAACI,QAAQ,CAACD,OAAO,CAAC;MAAA,EAAC;IACrE;EAAC;IAAAjC,GAAA;IAAAJ,KAAA,EAID,SAAA+B,cAAcA,CAACG,OAAO,EAAE;MACpB,IAAMK,eAAe,GAAG,CACpB,SAAS,EACT,WAAW,EACX,WAAW,EACX,iBAAiB,CACpB;MACD,OAAOA,eAAe,CAACH,IAAI,CAAC,UAAAC,OAAO;QAAA,OAAIH,OAAO,CAACI,QAAQ,CAACD,OAAO,CAAC;MAAA,EAAC;IACrE;EAAC;IAAAjC,GAAA;IAAAJ,KAAA,EAID,SAAAgC,qBAAqBA,CAACE,OAAO,EAAE;MAC3B,IAAMM,YAAY,GAAG,CACjB,cAAc,EACd,gBAAgB,EAChB,OAAO,EACP,qBAAqB,EACrB,iBAAiB,CACpB;MACD,OAAOA,YAAY,CAACJ,IAAI,CAAC,UAAAC,OAAO;QAAA,OAAIH,OAAO,CAACI,QAAQ,CAACD,OAAO,CAAC;MAAA,EAAC;IAClE;EAAC;IAAAjC,GAAA;IAAAJ,KAAA,EAID,SAAAiC,gBAAgBA,CAAC3B,KAAK,EAAE;MACpB,IAAIA,KAAK,YAAYmC,KAAK,EAAE;QACxB,IAAMP,OAAO,GAAG5B,KAAK,CAAC4B,OAAO,CAACN,WAAW,CAAC,CAAC;QAC3C,OAAO,IAAI,CAACC,cAAc,CAACK,OAAO,CAAC,IAAI,IAAI,CAACH,cAAc,CAACG,OAAO,CAAC;MACvE;MACA,OAAO,KAAK;IAChB;EAAC;IAAA9B,GAAA;IAAAJ,KAAA,EAID,SAAAS,iBAAiBA,CAACH,KAAK,EAAE;MACrB,IAAIA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACpC,IAAI,QAAQ,IAAIA,KAAK,IAAI,OAAOA,KAAK,CAACoC,MAAM,KAAK,QAAQ,EAAE;UACvD,OAAOpC,KAAK,CAACoC,MAAM;QACvB;QACA,IAAI,YAAY,IAAIpC,KAAK,IAAI,OAAOA,KAAK,CAACE,UAAU,KAAK,QAAQ,EAAE;UAC/D,OAAOF,KAAK,CAACE,UAAU;QAC3B;QACA,IAAI,UAAU,IAAIF,KAAK,IAAI,OAAOA,KAAK,CAACqC,QAAQ,KAAK,QAAQ,IAAIrC,KAAK,CAACqC,QAAQ,KAAK,IAAI,EAAE;UACtF,IAAMA,QAAQ,GAAGrC,KAAK,CAACqC,QAAQ;UAC/B,OAAOA,QAAQ,CAACD,MAAM,IAAIC,QAAQ,CAACnC,UAAU;QACjD;MACJ;MACA,OAAOoC,SAAS;IACpB;EAAC;IAAAxC,GAAA;IAAAJ,KAAA,EAID,SAAAY,mBAAmBA,CAACN,KAAK,EAAE;MACvB,IAAIA,KAAK,YAAYmC,KAAK,EAAE;QACxB,OAAOnC,KAAK,CAAC4B,OAAO;MACxB;MACA,IAAI5B,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACpC,IAAI,SAAS,IAAIA,KAAK,IAAI,OAAOA,KAAK,CAAC4B,OAAO,KAAK,QAAQ,EAAE;UACzD,OAAO5B,KAAK,CAAC4B,OAAO;QACxB;MACJ;MACA,OAAOW,MAAM,CAACvC,KAAK,CAAC;IACxB;EAAC;IAAAF,GAAA;IAAAJ,KAAA,EAID,SAAA8C,cAAcA,CAACxC,KAAK,EAAEC,OAAO,EAAE;MAC3B,IAAMwC,cAAc,GAAG,IAAI,CAAC1C,QAAQ,CAACC,KAAK,EAAEC,OAAO,CAAC;MACpD,OAAOwC,cAAc,CAAC9B,WAAW;IACrC;EAAC;AAAA;AAhOChB,kBAAkB,CACbiB,cAAc,OAAAxB,gBAAA,CAAAS,OAAA,MAAAT,gBAAA,CAAAS,OAAA,MAAAT,gBAAA,CAAAS,OAAA,MAAAT,gBAAA,CAAAS,OAAA,MAAAT,gBAAA,CAAAS,OAAA,MAAAT,gBAAA,CAAAS,OAAA,MAAAT,gBAAA,CAAAS,OAAA,MAAAT,gBAAA,CAAAS,OAAA,MAAAT,gBAAA,CAAAS,OAAA,MAChBD,SAAS,CAAC4B,OAAO,EAAG,mEAAmE,GACvF5B,SAAS,CAACkB,cAAc,EAAG,iDAAiD,GAC5ElB,SAAS,CAACmB,aAAa,EAAG,oDAAoD,GAC9EnB,SAAS,CAACuB,UAAU,EAAG,sDAAsD,GAC7EvB,SAAS,CAACa,MAAM,EAAG,uCAAuC,GAC1Db,SAAS,CAACoB,MAAM,EAAG,2CAA2C,GAC9DpB,SAAS,CAACqB,OAAO,EAAG,sCAAsC,GAC1DrB,SAAS,CAACsB,UAAU,EAAG,0CAA0C,GACjEtB,SAAS,CAACwB,OAAO,EAAG,iDAAiD;AAwN9E3B,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB","ignoreList":[]}