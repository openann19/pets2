{"version":3,"names":["_interopRequireDefault","require","_asyncToGenerator2","_defineProperty2","_classCallCheck2","_createClass2","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","default","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","OfflineQueueManager","logger_1","DEFAULT_CONFIG","maxSize","persistence","syncInterval","maxRetries","retryDelay","config","undefined","queue","processing","Set","storage","isOnline","listeners","initializeStorage","loadQueue","startSyncInterval","key","_enqueue","item","_this","sort","a","b","comparePriority","priority","removed","pop","logger","warn","removedItem","id","queueSize","queueItem","generateId","timestamp","Date","now","retryCount","insertByPriority","persistQueue","notifyListeners","debug","endpoint","processQueue","enqueue","_x","_processQueue","_this2","size","processableItems","has","add","processItem","removeItem","error","retries","delete","_processItem","Error","_x2","getStats","criticalItems","oldestItem","totalItems","pendingItems","processingItems","failedItems","oldestItemTimestamp","_clearQueue","clear","clearQueue","getItemsByPriority","index","findIndex","splice","setOnlineStatus","info","subscribe","listener","_this3","indexOf","priorityValue","getPriorityValue","insertIndex","i","current","values","critical","high","normal","low","window","localStorage","_persistQueue","data","JSON","stringify","setItem","_loadQueue","getItem","parse","itemCount","_this4","syncIntervalId","setInterval","stats","Math","random","toString","substring","destroy","clearInterval"],"sources":["OfflineQueueManager.js"],"sourcesContent":["\"use strict\";\n/**\n * Offline Queue Manager\n * Manages request queue for offline scenarios with priority, persistence, and conflict resolution\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OfflineQueueManager = void 0;\nconst logger_1 = require(\"../utils/logger\");\nconst DEFAULT_CONFIG = {\n    maxSize: 1000,\n    persistence: 'memory',\n    syncInterval: 30000,\n    maxRetries: 3,\n    retryDelay: 1000,\n};\nclass OfflineQueueManager {\n    config;\n    queue = [];\n    processing = new Set();\n    storage = null;\n    syncIntervalId;\n    isOnline = true;\n    listeners = [];\n    constructor(config = {}) {\n        this.config = { ...DEFAULT_CONFIG, ...config };\n        this.initializeStorage();\n        this.loadQueue();\n        this.startSyncInterval();\n    }\n    /**\n     * Add item to queue\n     */\n    async enqueue(item) {\n        // Check queue size\n        if (this.queue.length >= this.config.maxSize) {\n            // Remove lowest priority items\n            this.queue.sort((a, b) => this.comparePriority(a.priority, b.priority));\n            const removed = this.queue.pop();\n            logger_1.logger.warn('Queue full, removing lowest priority item', {\n                removedItem: removed?.id,\n                queueSize: this.queue.length,\n            });\n        }\n        const queueItem = {\n            ...item,\n            id: this.generateId(),\n            timestamp: Date.now(),\n            retryCount: 0,\n        };\n        // Insert based on priority\n        this.insertByPriority(queueItem);\n        await this.persistQueue();\n        this.notifyListeners();\n        logger_1.logger.debug('Item enqueued', {\n            id: queueItem.id,\n            endpoint: queueItem.endpoint,\n            priority: queueItem.priority,\n            queueSize: this.queue.length,\n        });\n        // Try to process immediately if online\n        if (this.isOnline) {\n            void this.processQueue();\n        }\n        return queueItem.id;\n    }\n    /**\n     * Process queue items\n     */\n    async processQueue() {\n        if (!this.isOnline || this.processing.size > 0) {\n            return;\n        }\n        const processableItems = this.queue.filter(item => !this.processing.has(item.id) && item.retryCount < item.maxRetries);\n        if (processableItems.length === 0) {\n            return;\n        }\n        // Process items in priority order\n        for (const item of processableItems) {\n            if (!this.isOnline) {\n                break;\n            }\n            this.processing.add(item.id);\n            try {\n                await this.processItem(item);\n                this.removeItem(item.id);\n                logger_1.logger.debug('Item processed successfully', { id: item.id });\n            }\n            catch (error) {\n                item.retryCount++;\n                if (item.retryCount >= item.maxRetries) {\n                    logger_1.logger.error('Item failed after max retries', {\n                        id: item.id,\n                        endpoint: item.endpoint,\n                        retries: item.retryCount,\n                    });\n                    this.removeItem(item.id);\n                }\n                else {\n                    logger_1.logger.debug('Item failed, will retry', {\n                        id: item.id,\n                        retries: item.retryCount,\n                    });\n                    await this.persistQueue();\n                }\n            }\n            finally {\n                this.processing.delete(item.id);\n            }\n        }\n        this.notifyListeners();\n    }\n    /**\n     * Process individual item\n     */\n    async processItem(item) {\n        // This should be implemented by subclasses\n        throw new Error('processItem must be implemented by subclass');\n    }\n    /**\n     * Get queue statistics\n     */\n    getStats() {\n        const criticalItems = this.queue.filter(item => item.priority === 'critical').length;\n        const oldestItem = this.queue.length > 0 ? this.queue[0].timestamp : undefined;\n        return {\n            totalItems: this.queue.length,\n            pendingItems: this.queue.length - this.processing.size,\n            processingItems: this.processing.size,\n            failedItems: this.queue.filter(item => item.retryCount >= item.maxRetries).length,\n            criticalItems,\n            oldestItemTimestamp: oldestItem,\n        };\n    }\n    /**\n     * Clear queue\n     */\n    async clearQueue() {\n        this.queue = [];\n        this.processing.clear();\n        await this.persistQueue();\n        this.notifyListeners();\n    }\n    /**\n     * Get items by priority\n     */\n    getItemsByPriority(priority) {\n        return this.queue.filter(item => item.priority === priority);\n    }\n    /**\n     * Remove item from queue\n     */\n    removeItem(id) {\n        const index = this.queue.findIndex(item => item.id === id);\n        if (index !== -1) {\n            this.queue.splice(index, 1);\n            this.persistQueue();\n            this.notifyListeners();\n        }\n    }\n    /**\n     * Set online status\n     */\n    setOnlineStatus(isOnline) {\n        this.isOnline = isOnline;\n        if (isOnline) {\n            logger_1.logger.info('Online, starting queue processing');\n            void this.processQueue();\n        }\n        else {\n            logger_1.logger.info('Offline, queueing requests');\n        }\n    }\n    /**\n     * Subscribe to queue stats changes\n     */\n    subscribe(listener) {\n        this.listeners.push(listener);\n        return () => {\n            const index = this.listeners.indexOf(listener);\n            if (index !== -1) {\n                this.listeners.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * Insert item by priority\n     */\n    insertByPriority(item) {\n        const priorityValue = this.getPriorityValue(item.priority);\n        let insertIndex = this.queue.length;\n        for (let i = 0; i < this.queue.length; i++) {\n            const current = this.queue[i];\n            if (this.getPriorityValue(current.priority) < priorityValue) {\n                insertIndex = i;\n                break;\n            }\n        }\n        this.queue.splice(insertIndex, 0, item);\n    }\n    /**\n     * Compare priorities\n     */\n    comparePriority(a, b) {\n        return this.getPriorityValue(a) - this.getPriorityValue(b);\n    }\n    /**\n     * Get numeric priority value\n     */\n    getPriorityValue(priority) {\n        const values = {\n            critical: 0,\n            high: 1,\n            normal: 2,\n            low: 3,\n        };\n        return values[priority];\n    }\n    /**\n     * Initialize storage\n     */\n    initializeStorage() {\n        if (this.config.persistence === 'localStorage' && typeof window !== 'undefined') {\n            this.storage = window.localStorage;\n        }\n    }\n    /**\n     * Persist queue to storage\n     */\n    async persistQueue() {\n        if (!this.storage) {\n            return;\n        }\n        try {\n            const data = JSON.stringify(this.queue);\n            this.storage.setItem('offline_queue', data);\n        }\n        catch (error) {\n            logger_1.logger.error('Failed to persist queue', { error });\n        }\n    }\n    /**\n     * Load queue from storage\n     */\n    async loadQueue() {\n        if (!this.storage) {\n            return;\n        }\n        try {\n            const data = this.storage.getItem('offline_queue');\n            if (data) {\n                this.queue = JSON.parse(data);\n                logger_1.logger.info('Queue loaded from storage', { itemCount: this.queue.length });\n            }\n        }\n        catch (error) {\n            logger_1.logger.error('Failed to load queue', { error });\n        }\n    }\n    /**\n     * Start sync interval\n     */\n    startSyncInterval() {\n        this.syncIntervalId = setInterval(() => {\n            if (this.isOnline) {\n                void this.processQueue();\n            }\n        }, this.config.syncInterval);\n    }\n    /**\n     * Notify listeners of stats changes\n     */\n    notifyListeners() {\n        const stats = this.getStats();\n        this.listeners.forEach(listener => {\n            try {\n                listener(stats);\n            }\n            catch (error) {\n                logger_1.logger.error('Listener error', { error });\n            }\n        });\n    }\n    /**\n     * Generate unique ID\n     */\n    generateId() {\n        return `${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n    }\n    /**\n     * Cleanup resources\n     */\n    destroy() {\n        if (this.syncIntervalId) {\n            clearInterval(this.syncIntervalId);\n        }\n    }\n}\nexports.OfflineQueueManager = OfflineQueueManager;\n"],"mappings":"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","ignoreList":[]}