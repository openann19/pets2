092991585c731d32bb9acb9c4be62e85
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock("./src/services/logger", function () {
  return {
    logger: {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn(),
      debug: jest.fn(),
      security: jest.fn(),
      bufferOfflineLog: jest.fn().mockResolvedValue(undefined),
      flushOfflineLogs: jest.fn().mockResolvedValue(undefined),
      setUserInfo: jest.fn(),
      clearUserInfo: jest.fn(),
      getSessionId: jest.fn().mockReturnValue('test-session'),
      destroy: jest.fn()
    }
  };
});
require("@testing-library/jest-native/extend-expect");
require("./jest.setup.core");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.ReanimatedDataMock = {
  now: function now() {
    return Date.now();
  }
};
require("./jest.setup.mocks.native");
require("./jest.setup.mocks.expo");
require("./jest.setup.mocks.navigation");
require("./jest.setup.mocks.external");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJsb2dnZXIiLCJpbmZvIiwiamVzdCIsImZuIiwid2FybiIsImVycm9yIiwiZGVidWciLCJzZWN1cml0eSIsImJ1ZmZlck9mZmxpbmVMb2ciLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInVuZGVmaW5lZCIsImZsdXNoT2ZmbGluZUxvZ3MiLCJzZXRVc2VySW5mbyIsImNsZWFyVXNlckluZm8iLCJnZXRTZXNzaW9uSWQiLCJtb2NrUmV0dXJuVmFsdWUiLCJkZXN0cm95IiwicmVxdWlyZSIsIl9yZXF1aXJlIiwiZ2xvYmFsIiwiUmVhbmltYXRlZERhdGFNb2NrIiwibm93IiwiRGF0ZSJdLCJzb3VyY2VzIjpbImplc3Quc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYWluIEplc3Qgc2V0dXAgZmlsZVxuICogTG9hZHMgbW9kdWxhciBzZXR1cCBmaWxlcyBjb25kaXRpb25hbGx5IGJhc2VkIG9uIHRlc3QgbmVlZHNcbiAqL1xuXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUvZXh0ZW5kLWV4cGVjdCc7XG5cbi8vIFJlYWN0IE5hdGl2ZSBSZWFuaW1hdGVkIHJlY29tbWVuZGVkIG1vY2sgdHdlYWtcbi8vIEB0cy1pZ25vcmVcbmdsb2JhbC5SZWFuaW1hdGVkRGF0YU1vY2sgPSB7IG5vdzogKCkgPT4gRGF0ZS5ub3coKSB9O1xuXG4vLyBTaWxlbmNlIFJOIEFuaW1hdGVkIHdhcm5pbmdzIGluIHRlc3RzXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuLy8gTW9jayBsb2dnZXIgZ2xvYmFsbHkgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wc1xuamVzdC5tb2NrKCcuL3NyYy9zZXJ2aWNlcy9sb2dnZXInLCAoKSA9PiAoe1xuICBsb2dnZXI6IHtcbiAgICBpbmZvOiBqZXN0LmZuKCksXG4gICAgd2FybjogamVzdC5mbigpLFxuICAgIGVycm9yOiBqZXN0LmZuKCksXG4gICAgZGVidWc6IGplc3QuZm4oKSxcbiAgICBzZWN1cml0eTogamVzdC5mbigpLFxuICAgIGJ1ZmZlck9mZmxpbmVMb2c6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICAgIGZsdXNoT2ZmbGluZUxvZ3M6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICAgIHNldFVzZXJJbmZvOiBqZXN0LmZuKCksXG4gICAgY2xlYXJVc2VySW5mbzogamVzdC5mbigpLFxuICAgIGdldFNlc3Npb25JZDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgndGVzdC1zZXNzaW9uJyksXG4gICAgZGVzdHJveTogamVzdC5mbigpLFxuICB9XG59KSk7XG5cbi8vIFNldHVwIE1TVyBzZXJ2ZXIgZm9yIEFQSSBtb2NraW5nIChvbmx5IGluIHVuaXQvaW50ZWdyYXRpb24gdGVzdHMpXG4vLyBUZW1wb3JhcmlseSBkaXNhYmxlZCBkdWUgdG8gaW1wb3J0IGlzc3VlcyAtIGluZGl2aWR1YWwgdGVzdHMgc2hvdWxkIG1vY2sgQVBJcyBkaXJlY3RseVxuLy8gaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4vLyAgIHRyeSB7XG4vLyAgICAgY29uc3QgeyBzZXJ2ZXIgfSA9IHJlcXVpcmUoJy4vc3JjL3Rlc3QtdXRpbHMvbXN3L3NlcnZlcicpO1xuLy8gICAgIFxuLy8gICAgIC8vIEVzdGFibGlzaCBBUEkgbW9ja2luZyBiZWZvcmUgYWxsIHRlc3RzXG4vLyAgICAgYmVmb3JlQWxsKCgpID0+IHNlcnZlci5saXN0ZW4oeyBvblVuaGFuZGxlZFJlcXVlc3Q6ICd3YXJuJyB9KSk7XG4vLyAgICAgXG4vLyAgICAgLy8gUmVzZXQgYW55IHJlcXVlc3QgaGFuZGxlcnMgdGhhdCBtYXkgaGF2ZSBiZWVuIGFkZGVkIGR1cmluZyB0ZXN0c1xuLy8gICAgIGFmdGVyRWFjaCgoKSA9PiBzZXJ2ZXIucmVzZXRIYW5kbGVycygpKTtcbi8vICAgICBcbi8vICAgICAvLyBDbGVhbiB1cCBhZnRlciBhbGwgdGVzdHNcbi8vICAgICBhZnRlckFsbCgoKSA9PiBzZXJ2ZXIuY2xvc2UoKSk7XG4vLyAgIH0gY2F0Y2ggKGVycm9yKSB7XG4vLyAgICAgLy8gTVNXIG5vdCBhdmFpbGFibGUsIHRlc3RzIHNob3VsZCBtb2NrIEFQSXMgaW5kaXZpZHVhbGx5XG4vLyAgIH1cbi8vIH1cblxuLy8gQWx3YXlzIGxvYWQgY29yZSBzZXR1cFxuaW1wb3J0ICcuL2plc3Quc2V0dXAuY29yZSc7XG5cbi8vIExvYWQgYWxsIG1vY2tzIC0gbW9kdWxhciBmaWxlcyBoYW5kbGUgY29uZGl0aW9uYWwgbG9naWMgaW50ZXJuYWxseVxuLy8gVXNpbmcgcmVxdWlyZSB0byBlbnN1cmUgcHJvcGVyIGxvYWQgb3JkZXJcbnJlcXVpcmUoJy4vamVzdC5zZXR1cC5tb2Nrcy5uYXRpdmUnKTtcbnJlcXVpcmUoJy4vamVzdC5zZXR1cC5tb2Nrcy5leHBvJyk7XG5yZXF1aXJlKCcuL2plc3Quc2V0dXAubW9ja3MubmF2aWdhdGlvbicpO1xucmVxdWlyZSgnLi9qZXN0LnNldHVwLm1vY2tzLmV4dGVybmFsJyk7XG4iXSwibWFwcGluZ3MiOiI7O0FBWUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0FBR2pFRCxXQUFBLEdBQUtDLElBQUksMEJBQTBCO0VBQUEsT0FBTztJQUN4Q0MsTUFBTSxFQUFFO01BQ05DLElBQUksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNmQyxJQUFJLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDZkUsS0FBSyxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2hCRyxLQUFLLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDaEJJLFFBQVEsRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNuQkssZ0JBQWdCLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ00saUJBQWlCLENBQUNDLFNBQVMsQ0FBQztNQUN4REMsZ0JBQWdCLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ00saUJBQWlCLENBQUNDLFNBQVMsQ0FBQztNQUN4REUsV0FBVyxFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ3RCVSxhQUFhLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDeEJXLFlBQVksRUFBRVosSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDWSxlQUFlLENBQUMsY0FBYyxDQUFDO01BQ3ZEQyxPQUFPLEVBQUVkLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ25CO0VBQ0YsQ0FBQztBQUFBLENBQUMsQ0FBQztBQXhCSGMsT0FBQTtBQThDQUEsT0FBQTtBQUEyQixTQUFBbkIsWUFBQTtFQUFBLElBQUFvQixRQUFBLEdBQUFELE9BQUE7SUFBQWYsSUFBQSxHQUFBZ0IsUUFBQSxDQUFBaEIsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUExQzNCaUIsTUFBTSxDQUFDQyxrQkFBa0IsR0FBRztFQUFFQyxHQUFHLEVBQUUsU0FBTEEsR0FBR0EsQ0FBQTtJQUFBLE9BQVFDLElBQUksQ0FBQ0QsR0FBRyxDQUFDLENBQUM7RUFBQTtBQUFDLENBQUM7QUE4Q3JESixPQUFPLDRCQUE0QixDQUFDO0FBQ3BDQSxPQUFPLDBCQUEwQixDQUFDO0FBQ2xDQSxPQUFPLGdDQUFnQyxDQUFDO0FBQ3hDQSxPQUFPLDhCQUE4QixDQUFDIiwiaWdub3JlTGlzdCI6W119