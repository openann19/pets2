652c58e0847e03d708aea792cb97028c
"use strict";

var _globals = require("@jest/globals");
(0, _globals.describe)('Auth API Contracts', function () {
  (0, _globals.describe)('POST /auth/login', function () {
    (0, _globals.it)('should return token and user on successful login', function () {
      var response = {
        token: 'jwt-token-here',
        refreshToken: 'refresh-token-here',
        user: {
          id: 'user-id',
          email: 'user@example.com',
          name: 'User Name'
        },
        expiresIn: 3600
      };
      (0, _globals.expect)(response).toHaveProperty('token');
      (0, _globals.expect)(response).toHaveProperty('user');
      (0, _globals.expect)(response.user).toHaveProperty('id');
      (0, _globals.expect)(response.user).toHaveProperty('email');
    });
    (0, _globals.it)('should return 401 for invalid credentials', function () {
      var errorResponse = {
        error: 'Invalid credentials',
        statusCode: 401
      };
      (0, _globals.expect)(errorResponse).toHaveProperty('error');
      (0, _globals.expect)(errorResponse.statusCode).toBe(401);
    });
  });
  (0, _globals.describe)('POST /auth/register', function () {
    (0, _globals.it)('should create new user and return token', function () {
      var request = {
        email: 'new@example.com',
        password: 'securePassword123',
        name: 'New User',
        petName: 'Buddy'
      };
      var response = {
        token: 'jwt-token-here',
        user: {
          id: 'new-user-id',
          email: request.email,
          name: request.name
        }
      };
      (0, _globals.expect)(response).toHaveProperty('token');
      (0, _globals.expect)(response).toHaveProperty('user');
      (0, _globals.expect)(response.user.email).toBe(request.email);
    });
    (0, _globals.it)('should validate email format', function () {
      var invalidEmails = ['notanemail', 'missing@domain', '@missinglocal'];
      invalidEmails.forEach(function (email) {
        (0, _globals.expect)(email).not.toMatch(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
      });
    });
  });
  (0, _globals.describe)('POST /auth/refresh-token', function () {
    (0, _globals.it)('should return new token', function () {
      var request = {
        refreshToken: 'valid-refresh-token'
      };
      var response = {
        token: 'new-jwt-token',
        expiresIn: 3600
      };
      (0, _globals.expect)(response).toHaveProperty('token');
      (0, _globals.expect)(response).toHaveProperty('expiresIn');
    });
  });
  (0, _globals.describe)('POST /auth/logout', function () {
    (0, _globals.it)('should invalidate token', function () {
      var response = {
        success: true,
        message: 'Logged out successfully'
      };
      (0, _globals.expect)(response.success).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2xvYmFscyIsInJlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwicmVzcG9uc2UiLCJ0b2tlbiIsInJlZnJlc2hUb2tlbiIsInVzZXIiLCJpZCIsImVtYWlsIiwibmFtZSIsImV4cGlyZXNJbiIsImV4cGVjdCIsInRvSGF2ZVByb3BlcnR5IiwiZXJyb3JSZXNwb25zZSIsImVycm9yIiwic3RhdHVzQ29kZSIsInRvQmUiLCJyZXF1ZXN0IiwicGFzc3dvcmQiLCJwZXROYW1lIiwiaW52YWxpZEVtYWlscyIsImZvckVhY2giLCJub3QiLCJ0b01hdGNoIiwic3VjY2VzcyIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyJhdXRoLWFwaS5jb250cmFjdC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udHJhY3QgdGVzdHMgZm9yIEF1dGggQVBJXG4gKiBWYWxpZGF0ZXMgYXV0aGVudGljYXRpb24gcmVxdWVzdC9yZXNwb25zZSBzY2hlbWFzXG4gKi9cblxuaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcblxuZGVzY3JpYmUoJ0F1dGggQVBJIENvbnRyYWN0cycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ1BPU1QgL2F1dGgvbG9naW4nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gdG9rZW4gYW5kIHVzZXIgb24gc3VjY2Vzc2Z1bCBsb2dpbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICB0b2tlbjogJ2p3dC10b2tlbi1oZXJlJyxcbiAgICAgICAgcmVmcmVzaFRva2VuOiAncmVmcmVzaC10b2tlbi1oZXJlJyxcbiAgICAgICAgdXNlcjoge1xuICAgICAgICAgIGlkOiAndXNlci1pZCcsXG4gICAgICAgICAgZW1haWw6ICd1c2VyQGV4YW1wbGUuY29tJyxcbiAgICAgICAgICBuYW1lOiAnVXNlciBOYW1lJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXhwaXJlc0luOiAzNjAwLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0hhdmVQcm9wZXJ0eSgndG9rZW4nKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZSkudG9IYXZlUHJvcGVydHkoJ3VzZXInKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS51c2VyKS50b0hhdmVQcm9wZXJ0eSgnaWQnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS51c2VyKS50b0hhdmVQcm9wZXJ0eSgnZW1haWwnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIDQwMSBmb3IgaW52YWxpZCBjcmVkZW50aWFscycsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2UgPSB7XG4gICAgICAgIGVycm9yOiAnSW52YWxpZCBjcmVkZW50aWFscycsXG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChlcnJvclJlc3BvbnNlKS50b0hhdmVQcm9wZXJ0eSgnZXJyb3InKTtcbiAgICAgIGV4cGVjdChlcnJvclJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvQmUoNDAxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BPU1QgL2F1dGgvcmVnaXN0ZXInLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgbmV3IHVzZXIgYW5kIHJldHVybiB0b2tlbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgIGVtYWlsOiAnbmV3QGV4YW1wbGUuY29tJyxcbiAgICAgICAgcGFzc3dvcmQ6ICdzZWN1cmVQYXNzd29yZDEyMycsXG4gICAgICAgIG5hbWU6ICdOZXcgVXNlcicsXG4gICAgICAgIHBldE5hbWU6ICdCdWRkeScsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgdG9rZW46ICdqd3QtdG9rZW4taGVyZScsXG4gICAgICAgIHVzZXI6IHtcbiAgICAgICAgICBpZDogJ25ldy11c2VyLWlkJyxcbiAgICAgICAgICBlbWFpbDogcmVxdWVzdC5lbWFpbCxcbiAgICAgICAgICBuYW1lOiByZXF1ZXN0Lm5hbWUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UpLnRvSGF2ZVByb3BlcnR5KCd0b2tlbicpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0hhdmVQcm9wZXJ0eSgndXNlcicpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnVzZXIuZW1haWwpLnRvQmUocmVxdWVzdC5lbWFpbCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGVtYWlsIGZvcm1hdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGludmFsaWRFbWFpbHMgPSBbXG4gICAgICAgICdub3RhbmVtYWlsJyxcbiAgICAgICAgJ21pc3NpbmdAZG9tYWluJyxcbiAgICAgICAgJ0BtaXNzaW5nbG9jYWwnLFxuICAgICAgXTtcblxuICAgICAgaW52YWxpZEVtYWlscy5mb3JFYWNoKGVtYWlsID0+IHtcbiAgICAgICAgZXhwZWN0KGVtYWlsKS5ub3QudG9NYXRjaCgvXlteXFxzQF0rQFteXFxzQF0rXFwuW15cXHNAXSskLyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BPU1QgL2F1dGgvcmVmcmVzaC10b2tlbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBuZXcgdG9rZW4nLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICByZWZyZXNoVG9rZW46ICd2YWxpZC1yZWZyZXNoLXRva2VuJyxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICB0b2tlbjogJ25ldy1qd3QtdG9rZW4nLFxuICAgICAgICBleHBpcmVzSW46IDM2MDAsXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UpLnRvSGF2ZVByb3BlcnR5KCd0b2tlbicpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0hhdmVQcm9wZXJ0eSgnZXhwaXJlc0luJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQT1NUIC9hdXRoL2xvZ291dCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGludmFsaWRhdGUgdG9rZW4nLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogJ0xvZ2dlZCBvdXQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG4iXSwibWFwcGluZ3MiOiI7O0FBS0EsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsaUJBQVEsRUFBQyxvQkFBb0IsRUFBRSxZQUFNO0VBQ25DLElBQUFBLGlCQUFRLEVBQUMsa0JBQWtCLEVBQUUsWUFBTTtJQUNqQyxJQUFBQyxXQUFFLEVBQUMsa0RBQWtELEVBQUUsWUFBTTtNQUMzRCxJQUFNQyxRQUFRLEdBQUc7UUFDZkMsS0FBSyxFQUFFLGdCQUFnQjtRQUN2QkMsWUFBWSxFQUFFLG9CQUFvQjtRQUNsQ0MsSUFBSSxFQUFFO1VBQ0pDLEVBQUUsRUFBRSxTQUFTO1VBQ2JDLEtBQUssRUFBRSxrQkFBa0I7VUFDekJDLElBQUksRUFBRTtRQUNSLENBQUM7UUFDREMsU0FBUyxFQUFFO01BQ2IsQ0FBQztNQUVELElBQUFDLGVBQU0sRUFBQ1IsUUFBUSxDQUFDLENBQUNTLGNBQWMsQ0FBQyxPQUFPLENBQUM7TUFDeEMsSUFBQUQsZUFBTSxFQUFDUixRQUFRLENBQUMsQ0FBQ1MsY0FBYyxDQUFDLE1BQU0sQ0FBQztNQUN2QyxJQUFBRCxlQUFNLEVBQUNSLFFBQVEsQ0FBQ0csSUFBSSxDQUFDLENBQUNNLGNBQWMsQ0FBQyxJQUFJLENBQUM7TUFDMUMsSUFBQUQsZUFBTSxFQUFDUixRQUFRLENBQUNHLElBQUksQ0FBQyxDQUFDTSxjQUFjLENBQUMsT0FBTyxDQUFDO0lBQy9DLENBQUMsQ0FBQztJQUVGLElBQUFWLFdBQUUsRUFBQywyQ0FBMkMsRUFBRSxZQUFNO01BQ3BELElBQU1XLGFBQWEsR0FBRztRQUNwQkMsS0FBSyxFQUFFLHFCQUFxQjtRQUM1QkMsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUVELElBQUFKLGVBQU0sRUFBQ0UsYUFBYSxDQUFDLENBQUNELGNBQWMsQ0FBQyxPQUFPLENBQUM7TUFDN0MsSUFBQUQsZUFBTSxFQUFDRSxhQUFhLENBQUNFLFVBQVUsQ0FBQyxDQUFDQyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQzVDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGLElBQUFmLGlCQUFRLEVBQUMscUJBQXFCLEVBQUUsWUFBTTtJQUNwQyxJQUFBQyxXQUFFLEVBQUMseUNBQXlDLEVBQUUsWUFBTTtNQUNsRCxJQUFNZSxPQUFPLEdBQUc7UUFDZFQsS0FBSyxFQUFFLGlCQUFpQjtRQUN4QlUsUUFBUSxFQUFFLG1CQUFtQjtRQUM3QlQsSUFBSSxFQUFFLFVBQVU7UUFDaEJVLE9BQU8sRUFBRTtNQUNYLENBQUM7TUFFRCxJQUFNaEIsUUFBUSxHQUFHO1FBQ2ZDLEtBQUssRUFBRSxnQkFBZ0I7UUFDdkJFLElBQUksRUFBRTtVQUNKQyxFQUFFLEVBQUUsYUFBYTtVQUNqQkMsS0FBSyxFQUFFUyxPQUFPLENBQUNULEtBQUs7VUFDcEJDLElBQUksRUFBRVEsT0FBTyxDQUFDUjtRQUNoQjtNQUNGLENBQUM7TUFFRCxJQUFBRSxlQUFNLEVBQUNSLFFBQVEsQ0FBQyxDQUFDUyxjQUFjLENBQUMsT0FBTyxDQUFDO01BQ3hDLElBQUFELGVBQU0sRUFBQ1IsUUFBUSxDQUFDLENBQUNTLGNBQWMsQ0FBQyxNQUFNLENBQUM7TUFDdkMsSUFBQUQsZUFBTSxFQUFDUixRQUFRLENBQUNHLElBQUksQ0FBQ0UsS0FBSyxDQUFDLENBQUNRLElBQUksQ0FBQ0MsT0FBTyxDQUFDVCxLQUFLLENBQUM7SUFDakQsQ0FBQyxDQUFDO0lBRUYsSUFBQU4sV0FBRSxFQUFDLDhCQUE4QixFQUFFLFlBQU07TUFDdkMsSUFBTWtCLGFBQWEsR0FBRyxDQUNwQixZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLGVBQWUsQ0FDaEI7TUFFREEsYUFBYSxDQUFDQyxPQUFPLENBQUMsVUFBQWIsS0FBSyxFQUFJO1FBQzdCLElBQUFHLGVBQU0sRUFBQ0gsS0FBSyxDQUFDLENBQUNjLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLDRCQUE0QixDQUFDO01BQ3pELENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGLElBQUF0QixpQkFBUSxFQUFDLDBCQUEwQixFQUFFLFlBQU07SUFDekMsSUFBQUMsV0FBRSxFQUFDLHlCQUF5QixFQUFFLFlBQU07TUFDbEMsSUFBTWUsT0FBTyxHQUFHO1FBQ2RaLFlBQVksRUFBRTtNQUNoQixDQUFDO01BRUQsSUFBTUYsUUFBUSxHQUFHO1FBQ2ZDLEtBQUssRUFBRSxlQUFlO1FBQ3RCTSxTQUFTLEVBQUU7TUFDYixDQUFDO01BRUQsSUFBQUMsZUFBTSxFQUFDUixRQUFRLENBQUMsQ0FBQ1MsY0FBYyxDQUFDLE9BQU8sQ0FBQztNQUN4QyxJQUFBRCxlQUFNLEVBQUNSLFFBQVEsQ0FBQyxDQUFDUyxjQUFjLENBQUMsV0FBVyxDQUFDO0lBQzlDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGLElBQUFYLGlCQUFRLEVBQUMsbUJBQW1CLEVBQUUsWUFBTTtJQUNsQyxJQUFBQyxXQUFFLEVBQUMseUJBQXlCLEVBQUUsWUFBTTtNQUNsQyxJQUFNQyxRQUFRLEdBQUc7UUFDZnFCLE9BQU8sRUFBRSxJQUFJO1FBQ2JDLE9BQU8sRUFBRTtNQUNYLENBQUM7TUFFRCxJQUFBZCxlQUFNLEVBQUNSLFFBQVEsQ0FBQ3FCLE9BQU8sQ0FBQyxDQUFDUixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==