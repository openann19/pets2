{"version":3,"names":["_globals","require","describe","it","response","token","refreshToken","user","id","email","name","expiresIn","expect","toHaveProperty","errorResponse","error","statusCode","toBe","request","password","petName","invalidEmails","forEach","not","toMatch","success","message"],"sources":["auth-api.contract.test.ts"],"sourcesContent":["/**\n * Contract tests for Auth API\n * Validates authentication request/response schemas\n */\n\nimport { describe, it, expect } from '@jest/globals';\n\ndescribe('Auth API Contracts', () => {\n  describe('POST /auth/login', () => {\n    it('should return token and user on successful login', () => {\n      const response = {\n        token: 'jwt-token-here',\n        refreshToken: 'refresh-token-here',\n        user: {\n          id: 'user-id',\n          email: 'user@example.com',\n          name: 'User Name',\n        },\n        expiresIn: 3600,\n      };\n\n      expect(response).toHaveProperty('token');\n      expect(response).toHaveProperty('user');\n      expect(response.user).toHaveProperty('id');\n      expect(response.user).toHaveProperty('email');\n    });\n\n    it('should return 401 for invalid credentials', () => {\n      const errorResponse = {\n        error: 'Invalid credentials',\n        statusCode: 401,\n      };\n\n      expect(errorResponse).toHaveProperty('error');\n      expect(errorResponse.statusCode).toBe(401);\n    });\n  });\n\n  describe('POST /auth/register', () => {\n    it('should create new user and return token', () => {\n      const request = {\n        email: 'new@example.com',\n        password: 'securePassword123',\n        name: 'New User',\n        petName: 'Buddy',\n      };\n\n      const response = {\n        token: 'jwt-token-here',\n        user: {\n          id: 'new-user-id',\n          email: request.email,\n          name: request.name,\n        },\n      };\n\n      expect(response).toHaveProperty('token');\n      expect(response).toHaveProperty('user');\n      expect(response.user.email).toBe(request.email);\n    });\n\n    it('should validate email format', () => {\n      const invalidEmails = [\n        'notanemail',\n        'missing@domain',\n        '@missinglocal',\n      ];\n\n      invalidEmails.forEach(email => {\n        expect(email).not.toMatch(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n      });\n    });\n  });\n\n  describe('POST /auth/refresh-token', () => {\n    it('should return new token', () => {\n      const request = {\n        refreshToken: 'valid-refresh-token',\n      };\n\n      const response = {\n        token: 'new-jwt-token',\n        expiresIn: 3600,\n      };\n\n      expect(response).toHaveProperty('token');\n      expect(response).toHaveProperty('expiresIn');\n    });\n  });\n\n  describe('POST /auth/logout', () => {\n    it('should invalidate token', () => {\n      const response = {\n        success: true,\n        message: 'Logged out successfully',\n      };\n\n      expect(response.success).toBe(true);\n    });\n  });\n});\n\n"],"mappings":"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","ignoreList":[]}