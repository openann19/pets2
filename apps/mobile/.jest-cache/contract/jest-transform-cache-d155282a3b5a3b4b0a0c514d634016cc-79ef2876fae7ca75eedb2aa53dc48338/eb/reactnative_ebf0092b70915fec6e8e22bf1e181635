9aac57799b4fc902604ab38445998e64
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var React = require('react');
var mockComponent = function mockComponent(name) {
  return React.forwardRef(function (props, ref) {
    return React.createElement('div', _objectSpread(_objectSpread({}, props), {}, {
      ref: ref,
      'data-testid': name,
      style: _objectSpread({
        display: 'flex'
      }, props.style)
    }), props.children);
  });
};
var RN = {
  View: mockComponent('View'),
  Text: mockComponent('Text'),
  TouchableOpacity: mockComponent('TouchableOpacity'),
  TouchableWithoutFeedback: mockComponent('TouchableWithoutFeedback'),
  TouchableHighlight: mockComponent('TouchableHighlight'),
  TextInput: mockComponent('TextInput'),
  ScrollView: mockComponent('ScrollView'),
  FlatList: mockComponent('FlatList'),
  SectionList: mockComponent('SectionList'),
  Image: mockComponent('Image'),
  Modal: mockComponent('Modal'),
  Alert: {
    alert: jest.fn()
  },
  Platform: {
    OS: 'ios',
    select: jest.fn(function (obj) {
      return obj.ios || obj.default;
    })
  },
  Dimensions: {
    get: jest.fn(function () {
      return {
        width: 375,
        height: 812
      };
    }),
    addEventListener: jest.fn(function () {
      return {
        remove: jest.fn()
      };
    }),
    removeEventListener: jest.fn()
  },
  StyleSheet: {
    create: jest.fn(function (styles) {
      return styles;
    }),
    flatten: jest.fn(function (style) {
      return style;
    })
  },
  Animated: {
    View: mockComponent('Animated.View'),
    Text: mockComponent('Animated.Text'),
    Value: jest.fn(function () {
      return {
        setValue: jest.fn(),
        interpolate: jest.fn(function () {
          return {
            __getValue: jest.fn(function () {
              return 0;
            })
          };
        }),
        addListener: jest.fn(function () {
          return {
            remove: jest.fn()
          };
        }),
        removeListener: jest.fn(),
        removeAllListeners: jest.fn()
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          return callback && callback();
        })
      };
    }),
    spring: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          return callback && callback();
        })
      };
    }),
    sequence: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          return callback && callback();
        })
      };
    }),
    parallel: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          return callback && callback();
        })
      };
    }),
    delay: jest.fn(function () {
      return {
        start: jest.fn(function (callback) {
          return callback && callback();
        })
      };
    })
  },
  PanResponder: {
    create: jest.fn(function () {
      return {
        panHandlers: {}
      };
    })
  },
  UIManager: {
    setLayoutAnimationEnabledExperimental: jest.fn()
  },
  Keyboard: {
    addListener: jest.fn(function () {
      return {
        remove: jest.fn()
      };
    }),
    removeListener: jest.fn(),
    dismiss: jest.fn()
  },
  Linking: {
    openURL: jest.fn().mockResolvedValue(true),
    canOpenURL: jest.fn().mockResolvedValue(true),
    addEventListener: jest.fn(function () {
      return {
        remove: jest.fn()
      };
    }),
    removeEventListener: jest.fn()
  },
  AppState: {
    currentState: 'active',
    addEventListener: jest.fn(function () {
      return {
        remove: jest.fn()
      };
    }),
    removeEventListener: jest.fn()
  },
  AsyncStorage: {
    getItem: jest.fn().mockResolvedValue(null),
    setItem: jest.fn().mockResolvedValue(null),
    removeItem: jest.fn().mockResolvedValue(null),
    getAllKeys: jest.fn().mockResolvedValue([]),
    multiGet: jest.fn().mockResolvedValue([]),
    multiSet: jest.fn().mockResolvedValue(null),
    multiRemove: jest.fn().mockResolvedValue(null),
    clear: jest.fn().mockResolvedValue(null)
  }
};
module.exports = RN;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,