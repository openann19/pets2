{"version":3,"names":["_globals","require","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","describe","it","response","pets","_id","name","type","breed","age","photos","pagination","page","totalPages","totalItems","expect","toBeInstanceOf","Array","toHaveProperty","pet","isArray","toBe","requestParams","limit","owner","id","location","lat","lng","errorResponse","error","statusCode","request","invalidRequests","not","success","message","details","field"],"sources":["pet-api.contract.test.ts"],"sourcesContent":["/**\n * Contract tests for Pet API\n * Validates request/response schemas against backend contracts\n */\n\nimport { describe, it, expect } from '@jest/globals';\n\n// Mock API responses to validate against contracts\ninterface PetAPIResponse {\n  pets: Array<{\n    _id: string;\n    name: string;\n    type: string;\n    breed?: string;\n    age?: number;\n    photos: string[];\n  }>;\n  pagination: {\n    page: number;\n    totalPages: number;\n    totalItems: number;\n  };\n}\n\ninterface PetDetailResponse {\n  _id: string;\n  name: string;\n  type: string;\n  breed?: string;\n  age?: number;\n  photos: string[];\n  owner: {\n    id: string;\n    name: string;\n  };\n  location: {\n    lat: number;\n    lng: number;\n  };\n}\n\ndescribe('Pet API Contracts', () => {\n  describe('GET /pets', () => {\n    it('should return paginated list of pets', () => {\n      const response: PetAPIResponse = {\n        pets: [\n          {\n            _id: '507f1f77bcf86cd799439011',\n            name: 'Fluffy',\n            type: 'dog',\n            breed: 'Golden Retriever',\n            age: 3,\n            photos: ['https://example.com/photo.jpg'],\n          },\n        ],\n        pagination: {\n          page: 1,\n          totalPages: 1,\n          totalItems: 1,\n        },\n      };\n\n      // Validate structure\n      expect(response.pets).toBeInstanceOf(Array);\n      expect(response.pagination).toHaveProperty('page');\n      expect(response.pagination).toHaveProperty('totalPages');\n      expect(response.pagination).toHaveProperty('totalItems');\n\n      // Validate pet object structure\n      if (response.pets.length > 0) {\n        const pet = response.pets[0];\n        expect(pet).toHaveProperty('_id');\n        expect(pet).toHaveProperty('name');\n        expect(pet).toHaveProperty('type');\n        expect(pet).toHaveProperty('photos');\n        expect(Array.isArray(pet.photos)).toBe(true);\n      }\n    });\n\n    it('should support pagination parameters', () => {\n      const requestParams = {\n        page: '1',\n        limit: '20',\n        type: 'dog',\n      };\n\n      // Validate request format\n      expect(typeof requestParams.page).toBe('string');\n      expect(typeof requestParams.limit).toBe('string');\n      expect(typeof requestParams.type).toBe('string');\n    });\n  });\n\n  describe('GET /pets/:id', () => {\n    it('should return detailed pet information', () => {\n      const response: PetDetailResponse = {\n        _id: '507f1f77bcf86cd799439011',\n        name: 'Fluffy',\n        type: 'dog',\n        breed: 'Golden Retriever',\n        age: 3,\n        photos: ['https://example.com/photo.jpg'],\n        owner: {\n          id: '507f1f77bcf86cd799439012',\n          name: 'John Doe',\n        },\n        location: {\n          lat: 37.7749,\n          lng: -122.4194,\n        },\n      };\n\n      // Validate structure\n      expect(response).toHaveProperty('_id');\n      expect(response).toHaveProperty('name');\n      expect(response).toHaveProperty('type');\n      expect(response).toHaveProperty('photos');\n      expect(response).toHaveProperty('owner');\n      expect(response).toHaveProperty('location');\n\n      // Validate nested objects\n      expect(response.owner).toHaveProperty('id');\n      expect(response.owner).toHaveProperty('name');\n      expect(response.location).toHaveProperty('lat');\n      expect(response.location).toHaveProperty('lng');\n    });\n\n    it('should return 404 for non-existent pet', () => {\n      const errorResponse = {\n        error: 'Pet not found',\n        statusCode: 404,\n      };\n\n      expect(errorResponse).toHaveProperty('error');\n      expect(errorResponse).toHaveProperty('statusCode');\n    });\n  });\n\n  describe('POST /pets', () => {\n    it('should create a new pet', () => {\n      const request = {\n        name: 'Buddy',\n        type: 'dog',\n        breed: 'Labrador',\n        age: 2,\n        photos: ['https://example.com/photo.jpg'],\n        location: {\n          lat: 37.7749,\n          lng: -122.4194,\n        },\n      };\n\n      // Validate request structure\n      expect(request).toHaveProperty('name');\n      expect(request).toHaveProperty('type');\n      expect(typeof request.name).toBe('string');\n      expect(typeof request.type).toBe('string');\n\n      // Mock successful response\n      const response = {\n        _id: '507f1f77bcf86cd799439013',\n        ...request,\n      };\n\n      expect(response).toHaveProperty('_id');\n      expect(response.name).toBe(request.name);\n      expect(response.type).toBe(request.type);\n    });\n\n    it('should validate required fields', () => {\n      const invalidRequests = [\n        { type: 'dog' }, // missing name\n        { name: 'Buddy' }, // missing type\n      ];\n\n      invalidRequests.forEach(request => {\n        // Should validate and reject missing fields\n        expect(request).not.toHaveProperty('name'); // or expect throw\n      });\n    });\n  });\n\n  describe('PUT /pets/:id', () => {\n    it('should update pet information', () => {\n      const request = {\n        name: 'Buddy Updated',\n        age: 3,\n      };\n\n      const response = {\n        _id: '507f1f77bcf86cd799439013',\n        name: 'Buddy Updated',\n        type: 'dog',\n        breed: 'Labrador',\n        age: 3,\n        photos: ['https://example.com/photo.jpg'],\n      };\n\n      expect(response).toHaveProperty('_id');\n      expect(response.name).toBe(request.name);\n      expect(response.age).toBe(request.age);\n    });\n  });\n\n  describe('DELETE /pets/:id', () => {\n    it('should delete a pet', () => {\n      const response = {\n        success: true,\n        message: 'Pet deleted successfully',\n      };\n\n      expect(response).toHaveProperty('success');\n      expect(response.success).toBe(true);\n    });\n\n    it('should return 403 for unauthorized deletion', () => {\n      const errorResponse = {\n        error: 'Unauthorized',\n        statusCode: 403,\n      };\n\n      expect(errorResponse).toHaveProperty('error');\n      expect(errorResponse.statusCode).toBe(403);\n    });\n  });\n\n  describe('Error responses', () => {\n    it('should return 400 for validation errors', () => {\n      const errorResponse = {\n        error: 'Validation failed',\n        statusCode: 400,\n        details: [\n          {\n            field: 'name',\n            message: 'Name is required',\n          },\n        ],\n      };\n\n      expect(errorResponse).toHaveProperty('error');\n      expect(errorResponse).toHaveProperty('statusCode');\n      expect(errorResponse.statusCode).toBe(400);\n    });\n\n    it('should return 500 for server errors', () => {\n      const errorResponse = {\n        error: 'Internal server error',\n        statusCode: 500,\n      };\n\n      expect(errorResponse).toHaveProperty('error');\n      expect(errorResponse.statusCode).toBe(500);\n    });\n  });\n});\n\n"],"mappings":";;;;AAKA,IAAAA,QAAA,GAAAC,OAAA;AAAqD,SAAAC,QAAAC,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAJ,CAAA,OAAAG,MAAA,CAAAE,qBAAA,QAAAC,CAAA,GAAAH,MAAA,CAAAE,qBAAA,CAAAL,CAAA,GAAAC,CAAA,KAAAK,CAAA,GAAAA,CAAA,CAAAC,MAAA,WAAAN,CAAA,WAAAE,MAAA,CAAAK,wBAAA,CAAAR,CAAA,EAAAC,CAAA,EAAAQ,UAAA,OAAAP,CAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,CAAA,EAAAI,CAAA,YAAAJ,CAAA;AAAA,SAAAU,cAAAZ,CAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAY,SAAA,CAAAC,MAAA,EAAAb,CAAA,UAAAC,CAAA,WAAAW,SAAA,CAAAZ,CAAA,IAAAY,SAAA,CAAAZ,CAAA,QAAAA,CAAA,OAAAF,OAAA,CAAAI,MAAA,CAAAD,CAAA,OAAAa,OAAA,WAAAd,CAAA,QAAAe,gBAAA,CAAAC,OAAA,EAAAjB,CAAA,EAAAC,CAAA,EAAAC,CAAA,CAAAD,CAAA,SAAAE,MAAA,CAAAe,yBAAA,GAAAf,MAAA,CAAAgB,gBAAA,CAAAnB,CAAA,EAAAG,MAAA,CAAAe,yBAAA,CAAAhB,CAAA,KAAAH,OAAA,CAAAI,MAAA,CAAAD,CAAA,GAAAa,OAAA,WAAAd,CAAA,IAAAE,MAAA,CAAAiB,cAAA,CAAApB,CAAA,EAAAC,CAAA,EAAAE,MAAA,CAAAK,wBAAA,CAAAN,CAAA,EAAAD,CAAA,iBAAAD,CAAA;AAoCrD,IAAAqB,iBAAQ,EAAC,mBAAmB,EAAE,YAAM;EAClC,IAAAA,iBAAQ,EAAC,WAAW,EAAE,YAAM;IAC1B,IAAAC,WAAE,EAAC,sCAAsC,EAAE,YAAM;MAC/C,IAAMC,QAAwB,GAAG;QAC/BC,IAAI,EAAE,CACJ;UACEC,GAAG,EAAE,0BAA0B;UAC/BC,IAAI,EAAE,QAAQ;UACdC,IAAI,EAAE,KAAK;UACXC,KAAK,EAAE,kBAAkB;UACzBC,GAAG,EAAE,CAAC;UACNC,MAAM,EAAE,CAAC,+BAA+B;QAC1C,CAAC,CACF;QACDC,UAAU,EAAE;UACVC,IAAI,EAAE,CAAC;UACPC,UAAU,EAAE,CAAC;UACbC,UAAU,EAAE;QACd;MACF,CAAC;MAGD,IAAAC,eAAM,EAACZ,QAAQ,CAACC,IAAI,CAAC,CAACY,cAAc,CAACC,KAAK,CAAC;MAC3C,IAAAF,eAAM,EAACZ,QAAQ,CAACQ,UAAU,CAAC,CAACO,cAAc,CAAC,MAAM,CAAC;MAClD,IAAAH,eAAM,EAACZ,QAAQ,CAACQ,UAAU,CAAC,CAACO,cAAc,CAAC,YAAY,CAAC;MACxD,IAAAH,eAAM,EAACZ,QAAQ,CAACQ,UAAU,CAAC,CAACO,cAAc,CAAC,YAAY,CAAC;MAGxD,IAAIf,QAAQ,CAACC,IAAI,CAACV,MAAM,GAAG,CAAC,EAAE;QAC5B,IAAMyB,GAAG,GAAGhB,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;QAC5B,IAAAW,eAAM,EAACI,GAAG,CAAC,CAACD,cAAc,CAAC,KAAK,CAAC;QACjC,IAAAH,eAAM,EAACI,GAAG,CAAC,CAACD,cAAc,CAAC,MAAM,CAAC;QAClC,IAAAH,eAAM,EAACI,GAAG,CAAC,CAACD,cAAc,CAAC,MAAM,CAAC;QAClC,IAAAH,eAAM,EAACI,GAAG,CAAC,CAACD,cAAc,CAAC,QAAQ,CAAC;QACpC,IAAAH,eAAM,EAACE,KAAK,CAACG,OAAO,CAACD,GAAG,CAACT,MAAM,CAAC,CAAC,CAACW,IAAI,CAAC,IAAI,CAAC;MAC9C;IACF,CAAC,CAAC;IAEF,IAAAnB,WAAE,EAAC,sCAAsC,EAAE,YAAM;MAC/C,IAAMoB,aAAa,GAAG;QACpBV,IAAI,EAAE,GAAG;QACTW,KAAK,EAAE,IAAI;QACXhB,IAAI,EAAE;MACR,CAAC;MAGD,IAAAQ,eAAM,EAAC,OAAOO,aAAa,CAACV,IAAI,CAAC,CAACS,IAAI,CAAC,QAAQ,CAAC;MAChD,IAAAN,eAAM,EAAC,OAAOO,aAAa,CAACC,KAAK,CAAC,CAACF,IAAI,CAAC,QAAQ,CAAC;MACjD,IAAAN,eAAM,EAAC,OAAOO,aAAa,CAACf,IAAI,CAAC,CAACc,IAAI,CAAC,QAAQ,CAAC;IAClD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAApB,iBAAQ,EAAC,eAAe,EAAE,YAAM;IAC9B,IAAAC,WAAE,EAAC,wCAAwC,EAAE,YAAM;MACjD,IAAMC,QAA2B,GAAG;QAClCE,GAAG,EAAE,0BAA0B;QAC/BC,IAAI,EAAE,QAAQ;QACdC,IAAI,EAAE,KAAK;QACXC,KAAK,EAAE,kBAAkB;QACzBC,GAAG,EAAE,CAAC;QACNC,MAAM,EAAE,CAAC,+BAA+B,CAAC;QACzCc,KAAK,EAAE;UACLC,EAAE,EAAE,0BAA0B;UAC9BnB,IAAI,EAAE;QACR,CAAC;QACDoB,QAAQ,EAAE;UACRC,GAAG,EAAE,OAAO;UACZC,GAAG,EAAE,CAAC;QACR;MACF,CAAC;MAGD,IAAAb,eAAM,EAACZ,QAAQ,CAAC,CAACe,cAAc,CAAC,KAAK,CAAC;MACtC,IAAAH,eAAM,EAACZ,QAAQ,CAAC,CAACe,cAAc,CAAC,MAAM,CAAC;MACvC,IAAAH,eAAM,EAACZ,QAAQ,CAAC,CAACe,cAAc,CAAC,MAAM,CAAC;MACvC,IAAAH,eAAM,EAACZ,QAAQ,CAAC,CAACe,cAAc,CAAC,QAAQ,CAAC;MACzC,IAAAH,eAAM,EAACZ,QAAQ,CAAC,CAACe,cAAc,CAAC,OAAO,CAAC;MACxC,IAAAH,eAAM,EAACZ,QAAQ,CAAC,CAACe,cAAc,CAAC,UAAU,CAAC;MAG3C,IAAAH,eAAM,EAACZ,QAAQ,CAACqB,KAAK,CAAC,CAACN,cAAc,CAAC,IAAI,CAAC;MAC3C,IAAAH,eAAM,EAACZ,QAAQ,CAACqB,KAAK,CAAC,CAACN,cAAc,CAAC,MAAM,CAAC;MAC7C,IAAAH,eAAM,EAACZ,QAAQ,CAACuB,QAAQ,CAAC,CAACR,cAAc,CAAC,KAAK,CAAC;MAC/C,IAAAH,eAAM,EAACZ,QAAQ,CAACuB,QAAQ,CAAC,CAACR,cAAc,CAAC,KAAK,CAAC;IACjD,CAAC,CAAC;IAEF,IAAAhB,WAAE,EAAC,wCAAwC,EAAE,YAAM;MACjD,IAAM2B,aAAa,GAAG;QACpBC,KAAK,EAAE,eAAe;QACtBC,UAAU,EAAE;MACd,CAAC;MAED,IAAAhB,eAAM,EAACc,aAAa,CAAC,CAACX,cAAc,CAAC,OAAO,CAAC;MAC7C,IAAAH,eAAM,EAACc,aAAa,CAAC,CAACX,cAAc,CAAC,YAAY,CAAC;IACpD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAAjB,iBAAQ,EAAC,YAAY,EAAE,YAAM;IAC3B,IAAAC,WAAE,EAAC,yBAAyB,EAAE,YAAM;MAClC,IAAM8B,OAAO,GAAG;QACd1B,IAAI,EAAE,OAAO;QACbC,IAAI,EAAE,KAAK;QACXC,KAAK,EAAE,UAAU;QACjBC,GAAG,EAAE,CAAC;QACNC,MAAM,EAAE,CAAC,+BAA+B,CAAC;QACzCgB,QAAQ,EAAE;UACRC,GAAG,EAAE,OAAO;UACZC,GAAG,EAAE,CAAC;QACR;MACF,CAAC;MAGD,IAAAb,eAAM,EAACiB,OAAO,CAAC,CAACd,cAAc,CAAC,MAAM,CAAC;MACtC,IAAAH,eAAM,EAACiB,OAAO,CAAC,CAACd,cAAc,CAAC,MAAM,CAAC;MACtC,IAAAH,eAAM,EAAC,OAAOiB,OAAO,CAAC1B,IAAI,CAAC,CAACe,IAAI,CAAC,QAAQ,CAAC;MAC1C,IAAAN,eAAM,EAAC,OAAOiB,OAAO,CAACzB,IAAI,CAAC,CAACc,IAAI,CAAC,QAAQ,CAAC;MAG1C,IAAMlB,QAAQ,GAAAX,aAAA;QACZa,GAAG,EAAE;MAA0B,GAC5B2B,OAAO,CACX;MAED,IAAAjB,eAAM,EAACZ,QAAQ,CAAC,CAACe,cAAc,CAAC,KAAK,CAAC;MACtC,IAAAH,eAAM,EAACZ,QAAQ,CAACG,IAAI,CAAC,CAACe,IAAI,CAACW,OAAO,CAAC1B,IAAI,CAAC;MACxC,IAAAS,eAAM,EAACZ,QAAQ,CAACI,IAAI,CAAC,CAACc,IAAI,CAACW,OAAO,CAACzB,IAAI,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAAL,WAAE,EAAC,iCAAiC,EAAE,YAAM;MAC1C,IAAM+B,eAAe,GAAG,CACtB;QAAE1B,IAAI,EAAE;MAAM,CAAC,EACf;QAAED,IAAI,EAAE;MAAQ,CAAC,CAClB;MAED2B,eAAe,CAACtC,OAAO,CAAC,UAAAqC,OAAO,EAAI;QAEjC,IAAAjB,eAAM,EAACiB,OAAO,CAAC,CAACE,GAAG,CAAChB,cAAc,CAAC,MAAM,CAAC;MAC5C,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAAjB,iBAAQ,EAAC,eAAe,EAAE,YAAM;IAC9B,IAAAC,WAAE,EAAC,+BAA+B,EAAE,YAAM;MACxC,IAAM8B,OAAO,GAAG;QACd1B,IAAI,EAAE,eAAe;QACrBG,GAAG,EAAE;MACP,CAAC;MAED,IAAMN,QAAQ,GAAG;QACfE,GAAG,EAAE,0BAA0B;QAC/BC,IAAI,EAAE,eAAe;QACrBC,IAAI,EAAE,KAAK;QACXC,KAAK,EAAE,UAAU;QACjBC,GAAG,EAAE,CAAC;QACNC,MAAM,EAAE,CAAC,+BAA+B;MAC1C,CAAC;MAED,IAAAK,eAAM,EAACZ,QAAQ,CAAC,CAACe,cAAc,CAAC,KAAK,CAAC;MACtC,IAAAH,eAAM,EAACZ,QAAQ,CAACG,IAAI,CAAC,CAACe,IAAI,CAACW,OAAO,CAAC1B,IAAI,CAAC;MACxC,IAAAS,eAAM,EAACZ,QAAQ,CAACM,GAAG,CAAC,CAACY,IAAI,CAACW,OAAO,CAACvB,GAAG,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAAR,iBAAQ,EAAC,kBAAkB,EAAE,YAAM;IACjC,IAAAC,WAAE,EAAC,qBAAqB,EAAE,YAAM;MAC9B,IAAMC,QAAQ,GAAG;QACfgC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE;MACX,CAAC;MAED,IAAArB,eAAM,EAACZ,QAAQ,CAAC,CAACe,cAAc,CAAC,SAAS,CAAC;MAC1C,IAAAH,eAAM,EAACZ,QAAQ,CAACgC,OAAO,CAAC,CAACd,IAAI,CAAC,IAAI,CAAC;IACrC,CAAC,CAAC;IAEF,IAAAnB,WAAE,EAAC,6CAA6C,EAAE,YAAM;MACtD,IAAM2B,aAAa,GAAG;QACpBC,KAAK,EAAE,cAAc;QACrBC,UAAU,EAAE;MACd,CAAC;MAED,IAAAhB,eAAM,EAACc,aAAa,CAAC,CAACX,cAAc,CAAC,OAAO,CAAC;MAC7C,IAAAH,eAAM,EAACc,aAAa,CAACE,UAAU,CAAC,CAACV,IAAI,CAAC,GAAG,CAAC;IAC5C,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAApB,iBAAQ,EAAC,iBAAiB,EAAE,YAAM;IAChC,IAAAC,WAAE,EAAC,yCAAyC,EAAE,YAAM;MAClD,IAAM2B,aAAa,GAAG;QACpBC,KAAK,EAAE,mBAAmB;QAC1BC,UAAU,EAAE,GAAG;QACfM,OAAO,EAAE,CACP;UACEC,KAAK,EAAE,MAAM;UACbF,OAAO,EAAE;QACX,CAAC;MAEL,CAAC;MAED,IAAArB,eAAM,EAACc,aAAa,CAAC,CAACX,cAAc,CAAC,OAAO,CAAC;MAC7C,IAAAH,eAAM,EAACc,aAAa,CAAC,CAACX,cAAc,CAAC,YAAY,CAAC;MAClD,IAAAH,eAAM,EAACc,aAAa,CAACE,UAAU,CAAC,CAACV,IAAI,CAAC,GAAG,CAAC;IAC5C,CAAC,CAAC;IAEF,IAAAnB,WAAE,EAAC,qCAAqC,EAAE,YAAM;MAC9C,IAAM2B,aAAa,GAAG;QACpBC,KAAK,EAAE,uBAAuB;QAC9BC,UAAU,EAAE;MACd,CAAC;MAED,IAAAhB,eAAM,EAACc,aAAa,CAAC,CAACX,cAAc,CAAC,OAAO,CAAC;MAC7C,IAAAH,eAAM,EAACc,aAAa,CAACE,UAAU,CAAC,CAACV,IAAI,CAAC,GAAG,CAAC;IAC5C,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}