5ccbf43f056899b9a18a0e159018d577
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var AnimatedValue = function () {
  function AnimatedValue(value) {
    (0, _classCallCheck2.default)(this, AnimatedValue);
    this._value = value || 0;
    this._listeners = new Set();
    this._animation = null;
  }
  return (0, _createClass2.default)(AnimatedValue, [{
    key: "setValue",
    value: function setValue(value) {
      this._value = value;
      this._listeners.forEach(function (listener) {
        return listener && listener({
          value: value
        });
      });
    }
  }, {
    key: "setOffset",
    value: function setOffset(value) {
      return this;
    }
  }, {
    key: "flattenOffset",
    value: function flattenOffset() {
      return this;
    }
  }, {
    key: "addListener",
    value: function addListener(callback) {
      this._listeners.add(callback);
    }
  }, {
    key: "removeListener",
    value: function removeListener(callback) {
      this._listeners.delete(callback);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      this._listeners.clear();
    }
  }, {
    key: "interpolate",
    value: function interpolate(config) {
      return this;
    }
  }, {
    key: "stopAnimation",
    value: function stopAnimation() {
      if (this._animation && this._animation.stop) {
        this._animation.stop();
      }
    }
  }, {
    key: "setAnimation",
    value: function setAnimation(animation) {
      this._animation = animation;
    }
  }]);
}();
var AnimatedValueXY = function () {
  function AnimatedValueXY() {
    var xy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      x: 0,
      y: 0
    };
    (0, _classCallCheck2.default)(this, AnimatedValueXY);
    this.x = new AnimatedValue(xy.x);
    this.y = new AnimatedValue(xy.y);
  }
  return (0, _createClass2.default)(AnimatedValueXY, [{
    key: "setValue",
    value: function setValue(xy) {
      this.x.setValue(xy.x);
      this.y.setValue(xy.y);
    }
  }, {
    key: "setOffset",
    value: function setOffset() {}
  }, {
    key: "flattenOffset",
    value: function flattenOffset() {}
  }, {
    key: "stopAnimation",
    value: function stopAnimation() {
      this.x.stopAnimation();
      this.y.stopAnimation();
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return {
        x: this.x._value,
        y: this.y._value
      };
    }
  }]);
}();
var MockAnimatedConfig = function () {
  function MockAnimatedConfig() {
    (0, _classCallCheck2.default)(this, MockAnimatedConfig);
    this._config = {};
    this._animation = null;
  }
  return (0, _createClass2.default)(MockAnimatedConfig, [{
    key: "start",
    value: function start(callback) {
      if (callback) setTimeout(callback, 0);
      this._animation = {
        stop: jest.fn()
      };
      return this._animation;
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this._animation) {
        this._animation.stop();
      }
    }
  }]);
}();
var RN = require('react-native');
var Animated = {
  Value: AnimatedValue,
  ValueXY: AnimatedValueXY,
  View: RN.View,
  Text: RN.Text,
  Image: RN.Image,
  ScrollView: RN.ScrollView,
  timing: jest.fn(function (value, config) {
    var mock = new MockAnimatedConfig();
    return mock;
  }),
  spring: jest.fn(function (value, config) {
    var mock = new MockAnimatedConfig();
    return mock;
  }),
  decay: jest.fn(function (value, config) {
    var mock = new MockAnimatedConfig();
    return mock;
  }),
  sequence: jest.fn(function (animations) {
    var mock = new MockAnimatedConfig();
    return mock;
  }),
  parallel: jest.fn(function (animations) {
    var mock = new MockAnimatedConfig();
    return mock;
  }),
  stagger: jest.fn(function (time, animations) {
    var mock = new MockAnimatedConfig();
    return mock;
  }),
  loop: jest.fn(function (animation) {
    var mock = new MockAnimatedConfig();
    return mock;
  }),
  delay: jest.fn(function (delay) {
    var mock = new MockAnimatedConfig();
    return mock;
  }),
  createAnimatedComponent: jest.fn(function (component) {
    return component;
  }),
  add: jest.fn(),
  subtract: jest.fn(),
  multiply: jest.fn(),
  divide: jest.fn(),
  modulo: jest.fn(),
  diffClamp: jest.fn()
};
module.exports = Animated;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,