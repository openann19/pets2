f9e41e5a1e997d95c04bb0cb45318b5d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.analyzePhotoFromUri = analyzePhotoFromUri;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _api = require("./api");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function analyzePhotoFromUri(_x) {
  return _analyzePhotoFromUri.apply(this, arguments);
}
function _analyzePhotoFromUri() {
  _analyzePhotoFromUri = (0, _asyncToGenerator2.default)(function* (localUri) {
    var contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "image/jpeg";
    var data = yield (0, _api.request)("/uploads/photos/presign", {
      method: 'POST',
      body: {
        contentType: contentType
      }
    });
    yield FileSystem.uploadAsync(data.url, localUri, {
      httpMethod: "PUT",
      headers: {
        "Content-Type": contentType
      },
      uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
    });
    var analysis = yield (0, _api.request)("/ai/analyze-photo", {
      method: 'POST',
      body: {
        s3Key: data.key
      }
    });
    return analysis.data;
  });
  return _analyzePhotoFromUri.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaWxlU3lzdGVtIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2FwaSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdDIiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImFuYWx5emVQaG90b0Zyb21VcmkiLCJfeCIsIl9hbmFseXplUGhvdG9Gcm9tVXJpIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJsb2NhbFVyaSIsImNvbnRlbnRUeXBlIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZGF0YSIsInJlcXVlc3QiLCJtZXRob2QiLCJib2R5IiwidXBsb2FkQXN5bmMiLCJ1cmwiLCJodHRwTWV0aG9kIiwiaGVhZGVycyIsInVwbG9hZFR5cGUiLCJGaWxlU3lzdGVtVXBsb2FkVHlwZSIsIkJJTkFSWV9DT05URU5UIiwiYW5hbHlzaXMiLCJzM0tleSIsImtleSJdLCJzb3VyY2VzIjpbImFpUGhvdG9TZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEZpbGVTeXN0ZW0gZnJvbSBcImV4cG8tZmlsZS1zeXN0ZW1cIjtcbmltcG9ydCB7IHJlcXVlc3QgfSBmcm9tIFwiLi9hcGlcIjtcblxuZXhwb3J0IGludGVyZmFjZSBQaG90b0FuYWx5c2lzUmVzdWx0IHtcbiAgbGFiZWxzOiBBcnJheTx7IG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDsgY29uZmlkZW5jZTogbnVtYmVyIHwgdW5kZWZpbmVkIH0+O1xuICBicmVlZENhbmRpZGF0ZXM6IEFycmF5PHsgbmFtZTogc3RyaW5nOyBjb25maWRlbmNlOiBudW1iZXIgfT47XG4gIHF1YWxpdHk6IHtcbiAgICBkaW1zOiB7IHdpZHRoPzogbnVtYmVyOyBoZWlnaHQ/OiBudW1iZXIgfTtcbiAgICBleHBvc3VyZTogbnVtYmVyO1xuICAgIGNvbnRyYXN0OiBudW1iZXI7XG4gICAgc2hhcnBuZXNzOiBudW1iZXI7XG4gIH07XG4gIG92ZXJhbGw6IG51bWJlcjtcbiAgaXNQZXQ6IGJvb2xlYW47XG4gIHN1Z2dlc3Rpb25zOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFuYWx5emVQaG90b0Zyb21VcmkobG9jYWxVcmk6IHN0cmluZywgY29udGVudFR5cGUgPSBcImltYWdlL2pwZWdcIik6IFByb21pc2U8UGhvdG9BbmFseXNpc1Jlc3VsdD4ge1xuICAvLyBVcGxvYWQgcGhvdG8gdG8gUzNcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcXVlc3Q8eyBrZXk6IHN0cmluZzsgdXJsOiBzdHJpbmcgfT4oXCIvdXBsb2Fkcy9waG90b3MvcHJlc2lnblwiLCB7IG1ldGhvZDogJ1BPU1QnLCBib2R5OiB7IGNvbnRlbnRUeXBlIH0gfSk7XG4gIFxuICBhd2FpdCBGaWxlU3lzdGVtLnVwbG9hZEFzeW5jKGRhdGEudXJsLCBsb2NhbFVyaSwge1xuICAgIGh0dHBNZXRob2Q6IFwiUFVUXCIsXG4gICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBjb250ZW50VHlwZSB9LFxuICAgIHVwbG9hZFR5cGU6IEZpbGVTeXN0ZW0uRmlsZVN5c3RlbVVwbG9hZFR5cGUuQklOQVJZX0NPTlRFTlQsXG4gIH0pO1xuXG4gIC8vIEFuYWx5emUgdGhlIHVwbG9hZGVkIHBob3RvXG4gIGNvbnN0IGFuYWx5c2lzID0gYXdhaXQgcmVxdWVzdDx7IGRhdGE6IFBob3RvQW5hbHlzaXNSZXN1bHQgfT4oXCIvYWkvYW5hbHl6ZS1waG90b1wiLCB7IFxuICAgIG1ldGhvZDogJ1BPU1QnLCBcbiAgICBib2R5OiB7IHMzS2V5OiBkYXRhLmtleSB9XG4gIH0pO1xuICBcbiAgcmV0dXJuIGFuYWx5c2lzLmRhdGE7XG59XG5cbiJdLCJtYXBwaW5ncyI6Ijs7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