34d46f0fdd3cea22da3f1dc4bacaa52d
"use strict";

_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: function useNavigation() {
      return mockNavigation;
    }
  };
});
_getJestObj().mock("../../domains/ai/useAICompatibility", function () {
  return {
    useAICompatibility: function useAICompatibility() {
      return {
        analyzeCompatibility: mockAnalyzeCompatibility,
        isAnalyzing: false,
        compatibilityResult: null,
        error: null,
        loadAvailablePets: mockLoadAvailablePets,
        availablePets: [],
        isLoadingPets: false,
        selectedPet1: null,
        selectedPet2: null,
        setSelectedPet1: mockSetSelectedPet1,
        setSelectedPet2: mockSetSelectedPet2,
        resetAnalysis: mockResetAnalysis,
        clearError: mockClearError
      };
    }
  };
});
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useAICompatibilityScreen = require("../useAICompatibilityScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGoBack = jest.fn();
var mockNavigation = {
  goBack: mockGoBack,
  navigate: jest.fn()
};
var mockAnalyzeCompatibility = jest.fn();
var mockLoadAvailablePets = jest.fn();
var mockSetSelectedPet1 = jest.fn();
var mockSetSelectedPet2 = jest.fn();
var mockResetAnalysis = jest.fn();
var mockClearError = jest.fn();
jest.spyOn(_reactNative2.Alert, "alert");
describe("useAICompatibilityScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it("should initialize and load available pets", function () {
    (0, _reactNative.renderHook)(function () {
      return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
    });
    expect(mockLoadAvailablePets).toHaveBeenCalled();
  });
  it("should provide state from domain hook", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
      }),
      result = _renderHook.result;
    expect(result.current.isAnalyzing).toBe(false);
    expect(result.current.compatibilityResult).toBe(null);
    expect(result.current.error).toBe(null);
    expect(result.current.availablePets).toEqual([]);
    expect(result.current.isLoadingPets).toBe(false);
  });
  it("should provide action methods", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
      }),
      result = _renderHook2.result;
    expect(typeof result.current.setSelectedPet1).toBe("function");
    expect(typeof result.current.setSelectedPet2).toBe("function");
    expect(typeof result.current.analyzeCompatibility).toBe("function");
    expect(typeof result.current.resetAnalysis).toBe("function");
    expect(typeof result.current.handleGoBack).toBe("function");
    expect(typeof result.current.clearError).toBe("function");
  });
  it("should handle go back navigation", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.handleGoBack();
    });
    expect(mockGoBack).toHaveBeenCalled();
  });
  it("should show alert when analyzing without both pets selected", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.analyzeCompatibility();
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Selection Required", "Please select two pets to analyze compatibility.");
    expect(mockAnalyzeCompatibility).not.toHaveBeenCalled();
  }));
  it("should call analyzeCompatibility when both pets selected", (0, _asyncToGenerator2.default)(function* () {
    var mockPet1 = {
      _id: "pet1",
      name: "Buddy"
    };
    var mockPet2 = {
      _id: "pet2",
      name: "Max"
    };
    jest.mocked(require("../../domains/ai/useAICompatibility").useAICompatibility).mockReturnValue({
      analyzeCompatibility: mockAnalyzeCompatibility,
      isAnalyzing: false,
      compatibilityResult: null,
      error: null,
      loadAvailablePets: mockLoadAvailablePets,
      availablePets: [mockPet1, mockPet2],
      isLoadingPets: false,
      selectedPet1: mockPet1,
      selectedPet2: mockPet2,
      setSelectedPet1: mockSetSelectedPet1,
      setSelectedPet2: mockSetSelectedPet2,
      resetAnalysis: mockResetAnalysis,
      clearError: mockClearError
    });
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.analyzeCompatibility();
    }));
    expect(mockAnalyzeCompatibility).toHaveBeenCalledWith("pet1", "pet2");
  }));
  it("should load specific pets from route params", (0, _asyncToGenerator2.default)(function* () {
    var mockPet1 = {
      _id: "pet-a",
      name: "Buddy"
    };
    var mockPet2 = {
      _id: "pet-b",
      name: "Max"
    };
    jest.mocked(require("../../domains/ai/useAICompatibility").useAICompatibility).mockReturnValue({
      analyzeCompatibility: mockAnalyzeCompatibility,
      isAnalyzing: false,
      compatibilityResult: null,
      error: null,
      loadAvailablePets: mockLoadAvailablePets.mockResolvedValue(undefined),
      availablePets: [mockPet1, mockPet2],
      isLoadingPets: false,
      selectedPet1: null,
      selectedPet2: null,
      setSelectedPet1: mockSetSelectedPet1,
      setSelectedPet2: mockSetSelectedPet2,
      resetAnalysis: mockResetAnalysis,
      clearError: mockClearError
    });
    var route = {
      params: {
        petAId: "pet-a",
        petBId: "pet-b"
      }
    };
    (0, _reactNative.renderHook)(function () {
      return (0, _useAICompatibilityScreen.useAICompatibilityScreen)(route);
    });
    expect(mockLoadAvailablePets).toHaveBeenCalled();
  }));
  it("should handle error when analyzing compatibility fails", (0, _asyncToGenerator2.default)(function* () {
    var error = new Error("Analysis failed");
    mockAnalyzeCompatibility.mockRejectedValue(error);
    var mockPet1 = {
      _id: "pet1",
      name: "Buddy"
    };
    var mockPet2 = {
      _id: "pet2",
      name: "Max"
    };
    jest.mocked(require("../../domains/ai/useAICompatibility").useAICompatibility).mockReturnValue({
      analyzeCompatibility: mockAnalyzeCompatibility,
      isAnalyzing: false,
      compatibilityResult: null,
      error: null,
      loadAvailablePets: mockLoadAvailablePets,
      availablePets: [mockPet1, mockPet2],
      isLoadingPets: false,
      selectedPet1: mockPet1,
      selectedPet2: mockPet2,
      setSelectedPet1: mockSetSelectedPet1,
      setSelectedPet2: mockSetSelectedPet2,
      resetAnalysis: mockResetAnalysis,
      clearError: mockClearError
    });
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.analyzeCompatibility();
    }));
    expect(mockAnalyzeCompatibility).toHaveBeenCalled();
  }));
  it("should expose selected pets from domain hook", function () {
    var mockPet1 = {
      _id: "pet1",
      name: "Buddy"
    };
    var mockPet2 = {
      _id: "pet2",
      name: "Max"
    };
    jest.mocked(require("../../domains/ai/useAICompatibility").useAICompatibility).mockReturnValue({
      analyzeCompatibility: mockAnalyzeCompatibility,
      isAnalyzing: false,
      compatibilityResult: null,
      error: null,
      loadAvailablePets: mockLoadAvailablePets,
      availablePets: [mockPet1, mockPet2],
      isLoadingPets: false,
      selectedPet1: mockPet1,
      selectedPet2: mockPet2,
      setSelectedPet1: mockSetSelectedPet1,
      setSelectedPet2: mockSetSelectedPet2,
      resetAnalysis: mockResetAnalysis,
      clearError: mockClearError
    });
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
      }),
      result = _renderHook7.result;
    expect(result.current.selectedPet1).toEqual(mockPet1);
    expect(result.current.selectedPet2).toEqual(mockPet2);
  });
  it("should expose compatibility result from domain hook", function () {
    var mockResult = {
      score: 85,
      traits: ["playful", "friendly"],
      analysis: "Great match!"
    };
    jest.mocked(require("../../domains/ai/useAICompatibility").useAICompatibility).mockReturnValue({
      analyzeCompatibility: mockAnalyzeCompatibility,
      isAnalyzing: false,
      compatibilityResult: mockResult,
      error: null,
      loadAvailablePets: mockLoadAvailablePets,
      availablePets: [],
      isLoadingPets: false,
      selectedPet1: null,
      selectedPet2: null,
      setSelectedPet1: mockSetSelectedPet1,
      setSelectedPet2: mockSetSelectedPet2,
      resetAnalysis: mockResetAnalysis,
      clearError: mockClearError
    });
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
      }),
      result = _renderHook8.result;
    expect(result.current.compatibilityResult).toEqual(mockResult);
  });
  it("should expose error state from domain hook", function () {
    jest.mocked(require("../../domains/ai/useAICompatibility").useAICompatibility).mockReturnValue({
      analyzeCompatibility: mockAnalyzeCompatibility,
      isAnalyzing: false,
      compatibilityResult: null,
      error: "Failed to analyze",
      loadAvailablePets: mockLoadAvailablePets,
      availablePets: [],
      isLoadingPets: false,
      selectedPet1: null,
      selectedPet2: null,
      setSelectedPet1: mockSetSelectedPet1,
      setSelectedPet2: mockSetSelectedPet2,
      resetAnalysis: mockResetAnalysis,
      clearError: mockClearError
    });
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
      }),
      result = _renderHook9.result;
    expect(result.current.error).toBe("Failed to analyze");
  });
  it("should expose analyzing state from domain hook", function () {
    jest.mocked(require("../../domains/ai/useAICompatibility").useAICompatibility).mockReturnValue({
      analyzeCompatibility: mockAnalyzeCompatibility,
      isAnalyzing: true,
      compatibilityResult: null,
      error: null,
      loadAvailablePets: mockLoadAvailablePets,
      availablePets: [],
      isLoadingPets: false,
      selectedPet1: null,
      selectedPet2: null,
      setSelectedPet1: mockSetSelectedPet1,
      setSelectedPet2: mockSetSelectedPet2,
      resetAnalysis: mockResetAnalysis,
      clearError: mockClearError
    });
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)();
      }),
      result = _renderHook0.result;
    expect(result.current.isAnalyzing).toBe(true);
  });
  it("should reload pets when route params change", function () {
    var _renderHook1 = (0, _reactNative.renderHook)(function (_ref8) {
        var route = _ref8.route;
        return (0, _useAICompatibilityScreen.useAICompatibilityScreen)(route);
      }, {
        initialProps: {
          route: undefined
        }
      }),
      rerender = _renderHook1.rerender;
    expect(mockLoadAvailablePets).toHaveBeenCalledTimes(1);
    rerender({
      route: {
        params: {
          petAId: "new-pet-a",
          petBId: "new-pet-b"
        }
      }
    });
    expect(mockLoadAvailablePets).toHaveBeenCalledTimes(2);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,