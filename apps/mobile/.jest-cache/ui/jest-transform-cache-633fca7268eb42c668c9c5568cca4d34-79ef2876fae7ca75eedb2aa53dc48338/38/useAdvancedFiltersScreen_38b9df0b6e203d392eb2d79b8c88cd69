3b9aac6581582a75e2bb3dbab78efe1c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAdvancedFiltersScreen = exports.INITIAL_FILTERS = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _core = require("@pawfectmatch/core");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var INITIAL_FILTERS = exports.INITIAL_FILTERS = [{
  id: "neutered",
  label: "Neutered/Spayed Only",
  value: false,
  category: "characteristics"
}, {
  id: "vaccinated",
  label: "Fully Vaccinated",
  value: true,
  category: "characteristics"
}, {
  id: "microchipped",
  label: "Microchipped",
  value: false,
  category: "characteristics"
}, {
  id: "house_trained",
  label: "House Trained",
  value: true,
  category: "characteristics"
}, {
  id: "small_only",
  label: "Small Dogs Only",
  value: false,
  category: "size"
}, {
  id: "medium_only",
  label: "Medium Dogs Only",
  value: false,
  category: "size"
}, {
  id: "large_only",
  label: "Large Dogs Only",
  value: false,
  category: "size"
}, {
  id: "low_energy",
  label: "Low Energy (Couch Potato)",
  value: false,
  category: "energy"
}, {
  id: "moderate_energy",
  label: "Moderate Energy",
  value: true,
  category: "energy"
}, {
  id: "high_energy",
  label: "High Energy (Athletic)",
  value: false,
  category: "energy"
}, {
  id: "good_with_kids",
  label: "Good with Children",
  value: true,
  category: "special"
}, {
  id: "good_with_dogs",
  label: "Good with Other Dogs",
  value: true,
  category: "special"
}, {
  id: "good_with_cats",
  label: "Good with Cats",
  value: false,
  category: "special"
}, {
  id: "apartment_friendly",
  label: "Apartment Friendly",
  value: false,
  category: "special"
}, {
  id: "senior_pets",
  label: "Include Senior Pets (7+ years)",
  value: true,
  category: "special"
}, {
  id: "rescue_pets",
  label: "Rescue Pets Only",
  value: false,
  category: "special"
}];
var useAdvancedFiltersScreen = exports.useAdvancedFiltersScreen = function useAdvancedFiltersScreen() {
  var _useState = (0, _react.useState)(INITIAL_FILTERS),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    filters = _useState2[0],
    setFilters = _useState2[1];
  var toggleFilter = (0, _react.useCallback)(function (filterId) {
    Haptics.selectionAsync().catch(function () {});
    setFilters(function (prev) {
      return prev.map(function (filter) {
        return filter.id === filterId ? _objectSpread(_objectSpread({}, filter), {}, {
          value: !filter.value
        }) : filter;
      });
    });
  }, []);
  var resetFilters = (0, _react.useCallback)(function () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(function () {});
    _reactNative.Alert.alert("Reset Filters", "Are you sure you want to reset all advanced filters?", [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Reset",
      style: "destructive",
      onPress: function onPress() {
        setFilters(function (prev) {
          return prev.map(function (filter) {
            return _objectSpread(_objectSpread({}, filter), {}, {
              value: false
            });
          });
        });
      }
    }]);
  }, []);
  var saveFilters = (0, _react.useCallback)(function () {
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(function () {});
    _core.logger.info("Saving advanced filters", {
      filters: filters
    });
    _reactNative.Alert.alert("Success", "Advanced filters saved successfully!");
  }, [filters]);
  var getFiltersByCategory = (0, _react.useCallback)(function (category) {
    return filters.filter(function (filter) {
      return filter.category === category;
    });
  }, [filters]);
  return {
    filters: filters,
    toggleFilter: toggleFilter,
    resetFilters: resetFilters,
    saveFilters: saveFilters,
    getFiltersByCategory: getFiltersByCategory
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,