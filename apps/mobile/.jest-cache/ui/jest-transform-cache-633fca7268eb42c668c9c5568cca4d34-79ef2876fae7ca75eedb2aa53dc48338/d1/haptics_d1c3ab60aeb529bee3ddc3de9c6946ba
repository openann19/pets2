4dea6b90525ee5ca0ab4d9a32a726240
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.haptic = void 0;
var Haptics = _interopRequireWildcard(require("expo-haptics"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var haptic = exports.haptic = {
  tap: function tap() {
    return Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
  },
  confirm: function confirm() {
    return Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(function () {});
  },
  super: function _super() {
    return Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy).catch(function () {});
  },
  error: function error() {
    return Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error).catch(function () {});
  },
  success: function success() {
    return Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(function () {});
  },
  selection: function selection() {
    return Haptics.selectionAsync().catch(function () {});
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIYXB0aWNzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90MiIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaGFwdGljIiwiZXhwb3J0cyIsInRhcCIsImltcGFjdEFzeW5jIiwiSW1wYWN0RmVlZGJhY2tTdHlsZSIsIkxpZ2h0IiwiY2F0Y2giLCJjb25maXJtIiwiTWVkaXVtIiwic3VwZXIiLCJIZWF2eSIsImVycm9yIiwibm90aWZpY2F0aW9uQXN5bmMiLCJOb3RpZmljYXRpb25GZWVkYmFja1R5cGUiLCJFcnJvciIsInN1Y2Nlc3MiLCJTdWNjZXNzIiwic2VsZWN0aW9uIiwic2VsZWN0aW9uQXN5bmMiXSwic291cmNlcyI6WyJoYXB0aWNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog8J+OryBIQVBUSUMgRkVFREJBQ0sgU1lTVEVNXG4gKiBTaW5nbGUgc291cmNlIG9mIHRydXRoIGZvciBhbGwgaGFwdGljIGZlZWRiYWNrXG4gKiBNYXBzIHRvIE1hdGVyaWFsIERlc2lnbiBoYXB0aWMgcGF0dGVybnNcbiAqL1xuXG5pbXBvcnQgKiBhcyBIYXB0aWNzIGZyb20gJ2V4cG8taGFwdGljcyc7XG5cbi8qKlxuICogSGFwdGljIGZlZWRiYWNrIHV0aWxpdGllc1xuICogVXNlIHRoZXNlIGV4Y2x1c2l2ZWx5IC0gbm8gZGlyZWN0IEhhcHRpY3MuKiBjYWxsc1xuICogQWxsIG1ldGhvZHMgaW5jbHVkZSBlcnJvciBoYW5kbGluZyB0byBwcmV2ZW50IGNyYXNoZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGhhcHRpYyA9IHtcbiAgLy8gTGlnaHQgaW1wYWN0IC0gZm9yIHN1YnRsZSBpbnRlcmFjdGlvbnMgKHRhYnMsIGJ1dHRvbnMsIG1pbm9yIHNlbGVjdGlvbnMpXG4gIHRhcDogKCkgPT4gSGFwdGljcy5pbXBhY3RBc3luYyhIYXB0aWNzLkltcGFjdEZlZWRiYWNrU3R5bGUuTGlnaHQpLmNhdGNoKCgpID0+IHt9KSxcbiAgXG4gIC8vIE1lZGl1bSBpbXBhY3QgLSBmb3IgY29uZmlybWF0aW9ucyAobGlrZSwgc2VuZCBtZXNzYWdlKVxuICBjb25maXJtOiAoKSA9PiBIYXB0aWNzLmltcGFjdEFzeW5jKEhhcHRpY3MuSW1wYWN0RmVlZGJhY2tTdHlsZS5NZWRpdW0pLmNhdGNoKCgpID0+IHt9KSxcbiAgXG4gIC8vIEhlYXZ5IGltcGFjdCAtIGZvciBzdXBlci1hY3Rpb25zIChzdXBlci1saWtlLCBwdXJjaGFzZSlcbiAgc3VwZXI6ICgpID0+IEhhcHRpY3MuaW1wYWN0QXN5bmMoSGFwdGljcy5JbXBhY3RGZWVkYmFja1N0eWxlLkhlYXZ5KS5jYXRjaCgoKSA9PiB7fSksXG4gIFxuICAvLyBOb3RpZmljYXRpb24gZmVlZGJhY2sgZm9yIGVycm9yc1xuICBlcnJvcjogKCkgPT4gSGFwdGljcy5ub3RpZmljYXRpb25Bc3luYyhIYXB0aWNzLk5vdGlmaWNhdGlvbkZlZWRiYWNrVHlwZS5FcnJvcikuY2F0Y2goKCkgPT4ge30pLFxuICBcbiAgLy8gTm90aWZpY2F0aW9uIGZlZWRiYWNrIGZvciBzdWNjZXNzXG4gIHN1Y2Nlc3M6ICgpID0+IEhhcHRpY3Mubm90aWZpY2F0aW9uQXN5bmMoSGFwdGljcy5Ob3RpZmljYXRpb25GZWVkYmFja1R5cGUuU3VjY2VzcykuY2F0Y2goKCkgPT4ge30pLFxuICBcbiAgLy8gU2VsZWN0aW9uIGZlZWRiYWNrIChwaWNrZXJzLCB0b2dnbGVzLCB3aGVlbClcbiAgc2VsZWN0aW9uOiAoKSA9PiBIYXB0aWNzLnNlbGVjdGlvbkFzeW5jKCkuY2F0Y2goKCkgPT4ge30pLFxufTtcblxuLyoqXG4gKiBIYXB0aWMgdXNhZ2UgbWFwXG4gKiBcbiAqIHRhcDogVGFiIHN3aXRjaGVzLCBidXR0b24gdGFwcywgbWlub3Igc2VsZWN0aW9uc1xuICogY29uZmlybTogTGlrZSwgc2VuZCwgY29uZmlybSBhY3Rpb25zXG4gKiBzdXBlcjogU3VwZXItbGlrZSwgcHVyY2hhc2UsIHByZW1pdW0gYWN0aW9uc1xuICogZXJyb3I6IEVycm9yIHN0YXRlcywgZmFpbGVkIGFjdGlvbnNcbiAqIHN1Y2Nlc3M6IFN1Y2Nlc3Mgc3RhdGVzLCBjb21wbGV0ZWQgYWN0aW9uc1xuICogc2VsZWN0aW9uOiBQaWNrZXIgY2hhbmdlcywgdG9nZ2xlIHN3aXRjaGVzLCB3aGVlbCBzY3JvbGxpbmdcbiAqL1xuXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQU1BLElBQUFBLE9BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUF3QyxTQUFBRCx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUosdUJBQUEsWUFBQUEsd0JBQUFFLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sR0FBQSxJQUFBZCxDQUFBLGdCQUFBYyxHQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxHQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxNQUFBLENBQUFDLGNBQUEsS0FBQUQsTUFBQSxDQUFBRSx3QkFBQSxDQUFBbkIsQ0FBQSxFQUFBYyxHQUFBLE9BQUFQLENBQUEsQ0FBQUssR0FBQSxJQUFBTCxDQUFBLENBQUFNLEdBQUEsSUFBQVAsQ0FBQSxDQUFBRSxDQUFBLEVBQUFNLEdBQUEsRUFBQVAsQ0FBQSxJQUFBQyxDQUFBLENBQUFNLEdBQUEsSUFBQWQsQ0FBQSxDQUFBYyxHQUFBLFdBQUFOLENBQUEsS0FBQVIsQ0FBQSxFQUFBQyxDQUFBO0FBT2pDLElBQU1tQixNQUFNLEdBQUFDLE9BQUEsQ0FBQUQsTUFBQSxHQUFHO0VBRXBCRSxHQUFHLEVBQUUsU0FBTEEsR0FBR0EsQ0FBQTtJQUFBLE9BQVF6QixPQUFPLENBQUMwQixXQUFXLENBQUMxQixPQUFPLENBQUMyQixtQkFBbUIsQ0FBQ0MsS0FBSyxDQUFDLENBQUNDLEtBQUssQ0FBQyxZQUFNLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFHakZDLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFBO0lBQUEsT0FBUTlCLE9BQU8sQ0FBQzBCLFdBQVcsQ0FBQzFCLE9BQU8sQ0FBQzJCLG1CQUFtQixDQUFDSSxNQUFNLENBQUMsQ0FBQ0YsS0FBSyxDQUFDLFlBQU0sQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUd0RkcsS0FBSyxFQUFFLFNBQVBBLE1BQUtBLENBQUE7SUFBQSxPQUFRaEMsT0FBTyxDQUFDMEIsV0FBVyxDQUFDMUIsT0FBTyxDQUFDMkIsbUJBQW1CLENBQUNNLEtBQUssQ0FBQyxDQUFDSixLQUFLLENBQUMsWUFBTSxDQUFDLENBQUMsQ0FBQztFQUFBO0VBR25GSyxLQUFLLEVBQUUsU0FBUEEsS0FBS0EsQ0FBQTtJQUFBLE9BQVFsQyxPQUFPLENBQUNtQyxpQkFBaUIsQ0FBQ25DLE9BQU8sQ0FBQ29DLHdCQUF3QixDQUFDQyxLQUFLLENBQUMsQ0FBQ1IsS0FBSyxDQUFDLFlBQU0sQ0FBQyxDQUFDLENBQUM7RUFBQTtFQUc5RlMsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUE7SUFBQSxPQUFRdEMsT0FBTyxDQUFDbUMsaUJBQWlCLENBQUNuQyxPQUFPLENBQUNvQyx3QkFBd0IsQ0FBQ0csT0FBTyxDQUFDLENBQUNWLEtBQUssQ0FBQyxZQUFNLENBQUMsQ0FBQyxDQUFDO0VBQUE7RUFHbEdXLFNBQVMsRUFBRSxTQUFYQSxTQUFTQSxDQUFBO0lBQUEsT0FBUXhDLE9BQU8sQ0FBQ3lDLGNBQWMsQ0FBQyxDQUFDLENBQUNaLEtBQUssQ0FBQyxZQUFNLENBQUMsQ0FBQyxDQUFDO0VBQUE7QUFDM0QsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==