7d2f96b612e880e6bce2531bf1138868
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../../services/api", function () {
  return {
    api: {
      get: _globals.jest.fn(),
      post: _globals.jest.fn(),
      put: _globals.jest.fn(),
      delete: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../../../services/analyticsService", function () {
  return {
    analyticsService: {
      trackEvent: _globals.jest.fn(),
      trackScreenView: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../../../hooks/useColorScheme", function () {
  return {
    useColorScheme: _globals.jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useSettingsScreen = require("../useSettingsScreen");
var _api = require("../../../services/api");
var _analyticsService = require("../../../services/analyticsService");
var _useColorScheme = require("../../../hooks/useColorScheme");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApi = _api.api;
var mockAnalyticsService = _analyticsService.analyticsService;
var mockUseColorScheme = _useColorScheme.useColorScheme;
var mockAsyncStorage = _asyncStorage.default;
(0, _globals.describe)('useSettingsScreen', function () {
  var mockSettingsData = {
    user: {
      id: 'user123',
      name: 'John Doe',
      email: 'john@example.com',
      phone: '+1234567890',
      createdAt: '2024-01-01T00:00:00Z'
    },
    privacy: {
      profileVisible: true,
      showDistance: true,
      showAge: true,
      allowMessagesFromStrangers: false,
      dataSharing: {
        analytics: true,
        marketing: false,
        thirdParty: false
      }
    },
    notifications: {
      push: {
        matches: true,
        messages: true,
        likes: false,
        superLikes: true,
        reminders: false
      },
      email: {
        weeklyDigest: true,
        matchAlerts: true,
        securityAlerts: true,
        marketing: false
      },
      sms: {
        securityAlerts: true,
        importantUpdates: false
      }
    },
    preferences: {
      theme: 'system',
      language: 'en',
      units: 'metric',
      maxDistance: 25,
      ageRange: {
        min: 21,
        max: 50
      },
      petPreferences: {
        species: ['dogs', 'cats'],
        sizes: ['small', 'medium'],
        energyLevels: ['moderate', 'high']
      }
    },
    account: {
      isPremium: false,
      subscriptionStatus: 'free',
      verificationStatus: 'verified',
      lastLogin: '2024-01-15T10:30:00Z',
      loginDevices: [{
        id: 'device1',
        name: 'iPhone 12',
        lastActive: '2024-01-15T10:30:00Z',
        current: true
      }, {
        id: 'device2',
        name: 'iPad Pro',
        lastActive: '2024-01-10T15:20:00Z',
        current: false
      }]
    }
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockApi.get.mockResolvedValue({
      data: mockSettingsData
    });
    mockApi.post.mockResolvedValue({
      data: {
        success: true
      }
    });
    mockApi.put.mockResolvedValue({
      data: {
        success: true
      }
    });
    mockApi.delete.mockResolvedValue({
      data: {
        success: true
      }
    });
    mockUseColorScheme.mockReturnValue('light');
  });
  (0, _globals.describe)('Initial State and Data Loading', function () {
    (0, _globals.it)('should initialize with loading state', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.isLoading).toBe(true);
      (0, _globals.expect)(result.current.settings).toBeNull();
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.isSaving).toBe(false);
    });
    (0, _globals.it)('should load settings data on mount', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.settings).toEqual(mockSettingsData);
      (0, _globals.expect)(mockApi.get).toHaveBeenCalledWith('/settings');
      (0, _globals.expect)(mockAnalyticsService.trackScreenView).toHaveBeenCalledWith('SettingsScreen');
    }));
    (0, _globals.it)('should load cached data when available', (0, _asyncToGenerator2.default)(function* () {
      var cachedData = {
        settings: mockSettingsData,
        lastUpdated: Date.now() - 5 * 60 * 1000
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(cachedData));
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.settings).toEqual(mockSettingsData);
      });
      (0, _globals.expect)(mockApi.get).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle loading errors', (0, _asyncToGenerator2.default)(function* () {
      mockApi.get.mockRejectedValue(new Error('Settings not available'));
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.error).toBe('Settings not available');
      (0, _globals.expect)(result.current.settings).toBeNull();
    }));
  });
  (0, _globals.describe)('Privacy Settings', function () {
    (0, _globals.it)('should update privacy settings successfully', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti;
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var newPrivacySettings = {
        profileVisible: false,
        showDistance: false,
        allowMessagesFromStrangers: true,
        dataSharing: {
          analytics: false,
          marketing: true,
          thirdParty: false
        }
      };
      mockApi.put.mockResolvedValue({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePrivacySettings(newPrivacySettings);
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$setti = result.current.settings) == null ? void 0 : _result$current$setti.privacy).toEqual(newPrivacySettings);
      (0, _globals.expect)(mockApi.put).toHaveBeenCalledWith('/settings/privacy', newPrivacySettings);
    }));
    (0, _globals.it)('should toggle individual privacy settings', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti2, _result$current$setti3;
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook6.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.put.mockResolvedValue({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.togglePrivacySetting('profileVisible');
      }));
      (0, _globals.expect)((_result$current$setti2 = result.current.settings) == null ? void 0 : _result$current$setti2.privacy.profileVisible).toBe(false);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.togglePrivacySetting('showAge');
      }));
      (0, _globals.expect)((_result$current$setti3 = result.current.settings) == null ? void 0 : _result$current$setti3.privacy.showAge).toBe(false);
    }));
  });
  (0, _globals.describe)('Notification Settings', function () {
    (0, _globals.it)('should update push notification settings', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti4;
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var newPushSettings = {
        matches: false,
        messages: false,
        likes: true,
        superLikes: true,
        reminders: true
      };
      mockApi.put.mockResolvedValue({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePushNotifications(newPushSettings);
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$setti4 = result.current.settings) == null ? void 0 : _result$current$setti4.notifications.push).toEqual(newPushSettings);
    }));
    (0, _globals.it)('should update email notification settings', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti5;
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var newEmailSettings = {
        weeklyDigest: false,
        matchAlerts: false,
        securityAlerts: true,
        marketing: true
      };
      mockApi.put.mockResolvedValue({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updateEmailNotifications(newEmailSettings);
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$setti5 = result.current.settings) == null ? void 0 : _result$current$setti5.notifications.email).toEqual(newEmailSettings);
    }));
    (0, _globals.it)('should toggle individual notification settings', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti6;
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.put.mockResolvedValue({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.toggleNotification('push', 'likes');
      }));
      (0, _globals.expect)((_result$current$setti6 = result.current.settings) == null ? void 0 : _result$current$setti6.notifications.push.likes).toBe(true);
    }));
  });
  (0, _globals.describe)('App Preferences', function () {
    (0, _globals.it)('should update app preferences', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti7;
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var newPreferences = {
        theme: 'dark',
        language: 'es',
        units: 'imperial',
        maxDistance: 50,
        ageRange: {
          min: 25,
          max: 60
        },
        petPreferences: {
          species: ['dogs'],
          sizes: ['large'],
          energyLevels: ['low', 'moderate']
        }
      };
      mockApi.put.mockResolvedValue({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePreferences(newPreferences);
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$setti7 = result.current.settings) == null ? void 0 : _result$current$setti7.preferences).toEqual(newPreferences);
    }));
    (0, _globals.it)('should update individual preference settings', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti8, _result$current$setti9;
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook1.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.put.mockResolvedValue({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updatePreference('theme', 'dark');
      }));
      (0, _globals.expect)((_result$current$setti8 = result.current.settings) == null ? void 0 : _result$current$setti8.preferences.theme).toBe('dark');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updatePreference('maxDistance', 100);
      }));
      (0, _globals.expect)((_result$current$setti9 = result.current.settings) == null ? void 0 : _result$current$setti9.preferences.maxDistance).toBe(100);
    }));
  });
  (0, _globals.describe)('Account Management', function () {
    (0, _globals.it)('should handle account deletion request', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook10.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.post.mockResolvedValue({
        data: {
          success: true,
          message: 'Account deletion requested',
          deletionId: 'del-123'
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.requestAccountDeletion('User request');
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/settings/account/delete', {
        reason: 'User request'
      });
    }));
    (0, _globals.it)('should export user data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook11.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var mockExportedData = {
        profile: {
          name: 'John Doe',
          email: 'john@example.com'
        },
        preferences: mockSettingsData.preferences,
        activity: {
          logins: 25,
          matches: 12
        }
      };
      mockApi.post.mockResolvedValue({
        data: {
          success: true,
          exportId: 'export-123',
          data: mockExportedData
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var data = yield result.current.exportUserData();
        (0, _globals.expect)(data).toEqual(mockExportedData);
      }));
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/settings/account/export');
    }));
    (0, _globals.it)('should logout from current device', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook12.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.post.mockResolvedValue({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.logoutFromDevice();
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/auth/logout');
    }));
    (0, _globals.it)('should logout from all devices', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook13.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.post.mockResolvedValue({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.logoutFromAllDevices();
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(mockApi.post).toHaveBeenCalledWith('/auth/logout-all');
    }));
  });
  (0, _globals.describe)('Device Management', function () {
    (0, _globals.it)('should get login devices', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook14.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.getLoginDevices()).toEqual(mockSettingsData.account.loginDevices);
      (0, _globals.expect)(result.current.getCurrentDevice()).toEqual(mockSettingsData.account.loginDevices[0]);
    }));
    (0, _globals.it)('should revoke device access', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.delete.mockResolvedValue({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.revokeDeviceAccess('device2');
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(mockApi.delete).toHaveBeenCalledWith('/settings/devices/device2');
      (0, _globals.expect)(result.current.getLoginDevices()).toHaveLength(1);
    }));
  });
  (0, _globals.describe)('Settings Validation', function () {
    (0, _globals.it)('should validate privacy settings', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var invalidSettings = {
        profileVisible: true,
        dataSharing: null
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePrivacySettings(invalidSettings);
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Invalid privacy settings');
    }));
    (0, _globals.it)('should validate preference settings', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var invalidPreferences = {
        ageRange: {
          min: 50,
          max: 25
        }
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePreferences(invalidPreferences);
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Invalid age range');
    }));
    (0, _globals.it)('should validate notification settings', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook18.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var invalidNotifications = {
        push: {
          invalidType: true
        }
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePushNotifications(invalidNotifications.push);
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Invalid notification settings');
    }));
  });
  (0, _globals.describe)('Cache Management', function () {
    (0, _globals.it)('should cache settings data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook19.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('settings_screen_cache', _globals.expect.any(String));
    }));
    (0, _globals.it)('should clear cache when requested', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook20.result;
      (0, _reactNative.act)(function () {
        result.current.settings = mockSettingsData;
      });
      (0, _reactNative.act)(function () {
        result.current.clearCache();
      });
      (0, _globals.expect)(result.current.settings).toBeNull();
      (0, _globals.expect)(mockAsyncStorage.removeItem).toHaveBeenCalledWith('settings_screen_cache');
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle network errors during updates', (0, _asyncToGenerator2.default)(function* () {
      mockApi.put.mockRejectedValue(new Error('Network error'));
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook21.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePrivacySettings({
          profileVisible: false
        });
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Network error');
    }));
    (0, _globals.it)('should handle server validation errors', (0, _asyncToGenerator2.default)(function* () {
      mockApi.put.mockRejectedValue({
        message: 'Invalid preference value',
        code: 'VALIDATION_ERROR'
      });
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook22.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePreferences({
          theme: 'invalid'
        });
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Invalid preference value');
    }));
    (0, _globals.it)('should handle AsyncStorage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook23.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.settings).toEqual(mockSettingsData);
    }));
    (0, _globals.it)('should reset error state on successful operations', (0, _asyncToGenerator2.default)(function* () {
      mockApi.put.mockRejectedValueOnce(new Error('First error'));
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook24.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updatePrivacySettings({
          profileVisible: false
        });
      }));
      (0, _globals.expect)(result.current.error).toBe('First error');
      mockApi.put.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePrivacySettings({
          profileVisible: true
        });
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
    }));
  });
  (0, _globals.describe)('Real-time Updates', function () {
    (0, _globals.it)('should handle settings updates from server', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti0;
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook25.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var updatedSettings = _objectSpread(_objectSpread({}, mockSettingsData), {}, {
        privacy: _objectSpread(_objectSpread({}, mockSettingsData.privacy), {}, {
          profileVisible: false
        })
      });
      (0, _reactNative.act)(function () {
        result.current.handleSettingsUpdate(updatedSettings);
      });
      (0, _globals.expect)((_result$current$setti0 = result.current.settings) == null ? void 0 : _result$current$setti0.privacy.profileVisible).toBe(false);
    }));
    (0, _globals.it)('should handle preference changes from system', (0, _asyncToGenerator2.default)(function* () {
      var currentTheme = 'light';
      mockUseColorScheme.mockImplementation(function () {
        return currentTheme;
      });
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook26.result,
        rerender = _renderHook26.rerender;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      currentTheme = 'dark';
      rerender();
      (0, _globals.expect)(result.current.getCurrentTheme()).toBe('dark');
    }));
  });
  (0, _globals.describe)('Analytics and Tracking', function () {
    (0, _globals.it)('should track settings interactions', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook27 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook27.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _reactNative.act)(function () {
        result.current.trackSettingsInteraction('privacy_toggle', {
          setting: 'profileVisible'
        });
      });
      (0, _globals.expect)(mockAnalyticsService.trackEvent).toHaveBeenCalledWith('settings_interaction', {
        element: 'privacy_toggle',
        action: 'toggle',
        setting: 'profileVisible'
      }, 'user123');
    }));
    (0, _globals.it)('should track settings changes', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook28 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook28.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updatePrivacySettings({
          profileVisible: false
        });
      }));
      (0, _globals.expect)(mockAnalyticsService.trackEvent).toHaveBeenCalledWith('settings_changed', {
        category: 'privacy',
        changes: {
          profileVisible: false
        }
      }, 'user123');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty settings data', (0, _asyncToGenerator2.default)(function* () {
      var emptySettings = {
        user: {
          id: 'user123',
          name: '',
          email: ''
        },
        privacy: {},
        notifications: {
          push: {},
          email: {},
          sms: {}
        },
        preferences: {},
        account: {
          isPremium: false
        }
      };
      mockApi.get.mockResolvedValue({
        data: emptySettings
      });
      var _renderHook29 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook29.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.settings).toEqual(emptySettings);
      (0, _globals.expect)(result.current.getCurrentTheme()).toBe('light');
    }));
    (0, _globals.it)('should handle settings with missing optional fields', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti1, _result$current$setti10;
      var minimalSettings = {
        user: {
          id: 'user123'
        },
        privacy: {
          profileVisible: true
        },
        notifications: {},
        preferences: {},
        account: {}
      };
      mockApi.get.mockResolvedValue({
        data: minimalSettings
      });
      var _renderHook30 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook30.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)((_result$current$setti1 = result.current.settings) == null ? void 0 : _result$current$setti1.user.id).toBe('user123');
      (0, _globals.expect)((_result$current$setti10 = result.current.settings) == null ? void 0 : _result$current$setti10.privacy.profileVisible).toBe(true);
    }));
    (0, _globals.it)('should handle very large preference data', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti11;
      var largePreferences = _objectSpread(_objectSpread({}, mockSettingsData.preferences), {}, {
        petPreferences: {
          species: Array.from({
            length: 50
          }, function (_, i) {
            return `species${i}`;
          }),
          sizes: Array.from({
            length: 20
          }, function (_, i) {
            return `size${i}`;
          }),
          energyLevels: Array.from({
            length: 10
          }, function (_, i) {
            return `energy${i}`;
          })
        }
      });
      var settingsWithLargePrefs = _objectSpread(_objectSpread({}, mockSettingsData), {}, {
        preferences: largePreferences
      });
      mockApi.get.mockResolvedValue({
        data: settingsWithLargePrefs
      });
      var _renderHook31 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook31.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)((_result$current$setti11 = result.current.settings) == null ? void 0 : _result$current$setti11.preferences.petPreferences.species).toHaveLength(50);
    }));
    (0, _globals.it)('should handle malformed cached data', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('{"invalid": json}');
      var _renderHook32 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook32.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.settings).toEqual(mockSettingsData);
    }));
    (0, _globals.it)('should handle concurrent settings updates', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook33 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook33.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var updates = [result.current.updatePrivacySettings({
        profileVisible: false
      }), result.current.updatePreferences({
        theme: 'dark'
      }), result.current.updatePushNotifications({
        matches: false
      })];
      var results = yield Promise.all(updates);
      (0, _globals.expect)(results.some(function (r) {
        return r === true;
      })).toBe(true);
    }));
    (0, _globals.it)('should handle rapid preference toggles', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$setti12;
      var _renderHook34 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsScreen.useSettingsScreen)();
        }),
        result = _renderHook34.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.togglePrivacySetting('profileVisible');
        yield result.current.togglePrivacySetting('profileVisible');
        yield result.current.togglePrivacySetting('profileVisible');
      }));
      (0, _globals.expect)((_result$current$setti12 = result.current.settings) == null ? void 0 : _result$current$setti12.privacy.profileVisible).toBe(false);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,