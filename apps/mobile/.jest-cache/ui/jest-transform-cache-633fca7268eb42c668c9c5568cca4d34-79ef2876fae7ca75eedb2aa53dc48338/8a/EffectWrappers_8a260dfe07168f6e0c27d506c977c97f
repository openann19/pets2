5468f5b59fe7986c2e3ff664221f244e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithShimmerFX = exports.WithRippleFX = exports.WithPressFX = exports.WithMagneticFX = exports.WithGradientFX = exports.WithGlowFX = exports.EffectWrappers = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireDefault(require("react-native-reanimated"));
var _useUnifiedAnimations = require("../../hooks/useUnifiedAnimations");
var _animations = require("../../hooks/animations");
var _unifiedTheme = require("../../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var WithGlowFX = exports.WithGlowFX = (0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? _unifiedTheme.Theme.colors.primary[500] : _ref$color,
    _ref$intensity = _ref.intensity,
    intensity = _ref$intensity === void 0 ? 1 : _ref$intensity,
    _ref$duration = _ref.duration,
    duration = _ref$duration === void 0 ? 2000 : _ref$duration,
    style = _ref.style,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled;
  var _useGlowAnimation = (0, _useUnifiedAnimations.useGlowAnimation)(disabled ? "transparent" : color, disabled ? 0 : intensity, duration),
    glowStyle = _useGlowAnimation.animatedStyle;
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    ref: ref,
    style: [glowStyle, style],
    children: children
  });
});
WithGlowFX.displayName = "WithGlowFX";
var WithMagneticFX = exports.WithMagneticFX = (0, _react.forwardRef)(function (_ref2, ref) {
  var children = _ref2.children,
    _ref2$sensitivity = _ref2.sensitivity,
    sensitivity = _ref2$sensitivity === void 0 ? 0.3 : _ref2$sensitivity,
    _ref2$maxDistance = _ref2.maxDistance,
    maxDistance = _ref2$maxDistance === void 0 ? 30 : _ref2$maxDistance,
    style = _ref2.style,
    _ref2$disabled = _ref2.disabled,
    disabled = _ref2$disabled === void 0 ? false : _ref2$disabled;
  var _useMagneticEffect = (0, _animations.useMagneticEffect)(!disabled),
    magneticStyle = _useMagneticEffect.magneticStyle,
    handleMagneticMove = _useMagneticEffect.handleMagneticMove,
    resetMagnetic = _useMagneticEffect.resetMagnetic;
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    ref: ref,
    style: [magneticStyle, style],
    children: children
  });
});
WithMagneticFX.displayName = "WithMagneticFX";
var WithRippleFX = exports.WithRippleFX = (0, _react.forwardRef)(function (_ref3, ref) {
  var children = _ref3.children,
    _ref3$color = _ref3.color,
    color = _ref3$color === void 0 ? "rgba(255, 255, 255, 0.3)" : _ref3$color,
    style = _ref3.style,
    _ref3$disabled = _ref3.disabled,
    disabled = _ref3$disabled === void 0 ? false : _ref3$disabled;
  var _useRippleEffect = (0, _animations.useRippleEffect)(),
    triggerRipple = _useRippleEffect.triggerRipple,
    rippleStyle = _useRippleEffect.rippleStyle;
  var handlePressIn = function handlePressIn() {
    if (!disabled) {
      triggerRipple();
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    ref: ref,
    style: style,
    children: [children, !disabled && (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: [{
        position: "absolute",
        top: "50%",
        left: "50%",
        width: 100,
        height: 100,
        borderRadius: 50,
        backgroundColor: color,
        marginTop: -50,
        marginLeft: -50
      }, rippleStyle],
      pointerEvents: "none"
    })]
  });
});
WithRippleFX.displayName = "WithRippleFX";
var WithShimmerFX = exports.WithShimmerFX = (0, _react.forwardRef)(function (_ref4, ref) {
  var children = _ref4.children,
    _ref4$duration = _ref4.duration,
    duration = _ref4$duration === void 0 ? 2000 : _ref4$duration,
    _ref4$color = _ref4.color,
    color = _ref4$color === void 0 ? "rgba(255, 255, 255, 0.1)" : _ref4$color,
    style = _ref4.style,
    _ref4$disabled = _ref4.disabled,
    disabled = _ref4$disabled === void 0 ? false : _ref4$disabled;
  var _useShimmerEffect = (0, _animations.useShimmerEffect)(!disabled && duration > 0),
    shimmerStyle = _useShimmerEffect.shimmerStyle;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    ref: ref,
    style: style,
    children: [children, !disabled && (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: [{
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: color
      }, shimmerStyle],
      pointerEvents: "none"
    })]
  });
});
WithShimmerFX.displayName = "WithShimmerFX";
var WithPressFX = exports.WithPressFX = (0, _react.forwardRef)(function (_ref5, ref) {
  var children = _ref5.children,
    _ref5$config = _ref5.config,
    config = _ref5$config === void 0 ? "snappy" : _ref5$config,
    style = _ref5.style,
    _ref5$disabled = _ref5.disabled,
    disabled = _ref5$disabled === void 0 ? false : _ref5$disabled;
  var _usePressAnimation = (0, _useUnifiedAnimations.usePressAnimation)(config),
    handlePressIn = _usePressAnimation.handlePressIn,
    handlePressOut = _usePressAnimation.handlePressOut,
    pressStyle = _usePressAnimation.animatedStyle;
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    ref: ref,
    style: [pressStyle, style],
    onTouchStart: disabled ? undefined : handlePressIn,
    onTouchEnd: disabled ? undefined : handlePressOut,
    children: children
  });
});
WithPressFX.displayName = "WithPressFX";
var WithGradientFX = exports.WithGradientFX = (0, _react.forwardRef)(function (_ref6, ref) {
  var children = _ref6.children,
    gradient = _ref6.gradient,
    colors = _ref6.colors,
    _ref6$angle = _ref6.angle,
    angle = _ref6$angle === void 0 ? 135 : _ref6$angle,
    style = _ref6.style;
  var _require = require("expo-linear-gradient"),
    LinearGradient = _require.LinearGradient;
  var gradientConfig = gradient ? _unifiedTheme.Theme.gradients[gradient] : null;
  var gradientColors = colors || Array.isArray(gradientConfig == null ? void 0 : gradientConfig.colors) ? gradientConfig == null ? void 0 : gradientConfig.colors : [_unifiedTheme.Theme.colors.primary[500], _unifiedTheme.Theme.colors.primary[400]];
  return (0, _jsxRuntime.jsx)(LinearGradient, {
    ref: ref,
    colors: gradientColors,
    start: {
      x: 0,
      y: 0
    },
    end: {
      x: 1,
      y: 1
    },
    style: style,
    children: children
  });
});
WithGradientFX.displayName = "WithGradientFX";
var EffectWrappers = exports.EffectWrappers = {
  WithGlowFX: WithGlowFX,
  WithMagneticFX: WithMagneticFX,
  WithRippleFX: WithRippleFX,
  WithShimmerFX: WithShimmerFX,
  WithPressFX: WithPressFX,
  WithGradientFX: WithGradientFX
};
var _default = exports.default = EffectWrappers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,