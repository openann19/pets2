5d84821231e656c2e26b88f7df901961
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useForgotPasswordScreen = useForgotPasswordScreen;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _core = require("@pawfectmatch/core");
var _AuthService = require("../../services/AuthService");
var _useFormState2 = require("../utils/useFormState");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useForgotPasswordScreen(_ref) {
  var navigation = _ref.navigation;
  var validateForm = (0, _react.useCallback)(function (values) {
    var errors = {};
    if (!values.email.trim()) {
      errors.email = "Email is required";
    } else if (!/\S+@\S+\.\S+/.test(values.email)) {
      errors.email = "Please enter a valid email address";
    }
    return errors;
  }, []);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useFormState = (0, _useFormState2.useFormState)({
      initialValues: {
        email: ""
      },
      validate: validateForm
    }),
    values = _useFormState.values,
    errors = _useFormState.errors,
    isValid = _useFormState.isValid,
    setValue = _useFormState.setValue,
    handleSubmitForm = _useFormState.handleSubmit;
  var handleForgotPassword = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    setLoading(true);
    try {
      _core.logger.info("Forgot password request", {
        email: values.email
      });
      var response = yield _AuthService.authService.forgotPassword(values.email);
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(function () {});
      _reactNative.Alert.alert("Check Your Email", "We've sent you a password reset link. Please check your email and follow the instructions.", [{
        text: "OK",
        onPress: function onPress() {
          return navigation.goBack();
        },
        style: "default"
      }], {
        cancelable: false
      });
    } catch (error) {
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error).catch(function () {});
      _core.logger.error("Forgot password failed", {
        error: error
      });
      var errorMessage = error instanceof _AuthService.AuthError ? error.message : "Failed to send password reset email. Please try again.";
      _reactNative.Alert.alert("Error", errorMessage, [{
        text: "OK",
        style: "default"
      }]);
    } finally {
      setLoading(false);
    }
  }), [values.email, navigation]);
  var handleSubmit = handleSubmitForm(handleForgotPassword);
  var navigateBack = (0, _react.useCallback)(function () {
    navigation.goBack();
  }, [navigation]);
  return {
    values: values,
    errors: errors,
    isValid: isValid,
    loading: loading,
    setValue: setValue,
    handleSubmit: handleSubmit,
    navigateBack: navigateBack
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiSGFwdGljcyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NvcmUiLCJfQXV0aFNlcnZpY2UiLCJfdXNlRm9ybVN0YXRlMiIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidXNlRm9yZ290UGFzc3dvcmRTY3JlZW4iLCJfcmVmIiwibmF2aWdhdGlvbiIsInZhbGlkYXRlRm9ybSIsInVzZUNhbGxiYWNrIiwidmFsdWVzIiwiZXJyb3JzIiwiZW1haWwiLCJ0cmltIiwidGVzdCIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiX3VzZUZvcm1TdGF0ZSIsInVzZUZvcm1TdGF0ZSIsImluaXRpYWxWYWx1ZXMiLCJ2YWxpZGF0ZSIsImlzVmFsaWQiLCJzZXRWYWx1ZSIsImhhbmRsZVN1Ym1pdEZvcm0iLCJoYW5kbGVTdWJtaXQiLCJoYW5kbGVGb3Jnb3RQYXNzd29yZCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImltcGFjdEFzeW5jIiwiSW1wYWN0RmVlZGJhY2tTdHlsZSIsIkxpZ2h0IiwiY2F0Y2giLCJsb2dnZXIiLCJpbmZvIiwicmVzcG9uc2UiLCJhdXRoU2VydmljZSIsImZvcmdvdFBhc3N3b3JkIiwibm90aWZpY2F0aW9uQXN5bmMiLCJOb3RpZmljYXRpb25GZWVkYmFja1R5cGUiLCJTdWNjZXNzIiwiQWxlcnQiLCJhbGVydCIsInRleHQiLCJvblByZXNzIiwiZ29CYWNrIiwic3R5bGUiLCJjYW5jZWxhYmxlIiwiZXJyb3IiLCJFcnJvciIsImVycm9yTWVzc2FnZSIsIkF1dGhFcnJvciIsIm1lc3NhZ2UiLCJuYXZpZ2F0ZUJhY2siXSwic291cmNlcyI6WyJ1c2VGb3Jnb3RQYXNzd29yZFNjcmVlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHVzZUZvcmdvdFBhc3N3b3JkU2NyZWVuIEhvb2tcbiAqIE1hbmFnZXMgRm9yZ290IFBhc3N3b3JkIHNjcmVlbiBzdGF0ZSBhbmQgaW50ZXJhY3Rpb25zXG4gKi9cbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQWxlcnQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgKiBhcyBIYXB0aWNzIGZyb20gXCJleHBvLWhhcHRpY3NcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJAcGF3ZmVjdG1hdGNoL2NvcmVcIjtcbmltcG9ydCB7IGF1dGhTZXJ2aWNlLCBBdXRoRXJyb3IgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvQXV0aFNlcnZpY2VcIjtcbmltcG9ydCB7IHVzZUZvcm1TdGF0ZSB9IGZyb20gXCIuLi91dGlscy91c2VGb3JtU3RhdGVcIjtcbmltcG9ydCB0eXBlIHsgUm9vdFN0YWNrU2NyZWVuUHJvcHMgfSBmcm9tIFwiLi4vLi4vbmF2aWdhdGlvbi90eXBlc1wiO1xuXG5pbnRlcmZhY2UgRm9yZ290UGFzc3dvcmRGb3JtVmFsdWVzIHtcbiAgZW1haWw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFVzZUZvcmdvdFBhc3N3b3JkU2NyZWVuT3B0aW9ucyB7XG4gIG5hdmlnYXRpb246IFJvb3RTdGFja1NjcmVlblByb3BzPFwiRm9yZ290UGFzc3dvcmRcIj5bXCJuYXZpZ2F0aW9uXCJdO1xufVxuXG5pbnRlcmZhY2UgVXNlRm9yZ290UGFzc3dvcmRTY3JlZW5SZXR1cm4ge1xuICB2YWx1ZXM6IEZvcmdvdFBhc3N3b3JkRm9ybVZhbHVlcztcbiAgZXJyb3JzOiBQYXJ0aWFsPFJlY29yZDxrZXlvZiBGb3Jnb3RQYXNzd29yZEZvcm1WYWx1ZXMsIHN0cmluZz4+O1xuICBpc1ZhbGlkOiBib29sZWFuO1xuICBsb2FkaW5nOiBib29sZWFuO1xuICBzZXRWYWx1ZTogKG5hbWU6IGtleW9mIEZvcmdvdFBhc3N3b3JkRm9ybVZhbHVlcywgdmFsdWU6IHN0cmluZykgPT4gdm9pZDtcbiAgaGFuZGxlU3VibWl0OiAoZT86IGFueSkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD47XG4gIG5hdmlnYXRlQmFjazogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvcmdvdFBhc3N3b3JkU2NyZWVuKHtcbiAgbmF2aWdhdGlvbixcbn06IFVzZUZvcmdvdFBhc3N3b3JkU2NyZWVuT3B0aW9ucyk6IFVzZUZvcmdvdFBhc3N3b3JkU2NyZWVuUmV0dXJuIHtcbiAgLy8gRm9ybSB2YWxpZGF0aW9uIHJ1bGVzXG4gIGNvbnN0IHZhbGlkYXRlRm9ybSA9IHVzZUNhbGxiYWNrKFxuICAgIChcbiAgICAgIHZhbHVlczogRm9yZ290UGFzc3dvcmRGb3JtVmFsdWVzLFxuICAgICk6IFBhcnRpYWw8UmVjb3JkPGtleW9mIEZvcmdvdFBhc3N3b3JkRm9ybVZhbHVlcywgc3RyaW5nPj4gPT4ge1xuICAgICAgY29uc3QgZXJyb3JzOiBQYXJ0aWFsPFJlY29yZDxrZXlvZiBGb3Jnb3RQYXNzd29yZEZvcm1WYWx1ZXMsIHN0cmluZz4+ID1cbiAgICAgICAge307XG5cbiAgICAgIGlmICghdmFsdWVzLmVtYWlsLnRyaW0oKSkge1xuICAgICAgICBlcnJvcnMuZW1haWwgPSBcIkVtYWlsIGlzIHJlcXVpcmVkXCI7XG4gICAgICB9IGVsc2UgaWYgKCEvXFxTK0BcXFMrXFwuXFxTKy8udGVzdCh2YWx1ZXMuZW1haWwpKSB7XG4gICAgICAgIGVycm9ycy5lbWFpbCA9IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzc1wiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXJyb3JzO1xuICAgIH0sXG4gICAgW10sXG4gICk7XG5cbiAgLy8gRm9ybSBzdGF0ZSBtYW5hZ2VtZW50XG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qge1xuICAgIHZhbHVlcyxcbiAgICBlcnJvcnMsXG4gICAgaXNWYWxpZCxcbiAgICBzZXRWYWx1ZSxcbiAgICBoYW5kbGVTdWJtaXQ6IGhhbmRsZVN1Ym1pdEZvcm0sXG4gIH0gPSB1c2VGb3JtU3RhdGU8Rm9yZ290UGFzc3dvcmRGb3JtVmFsdWVzPih7XG4gICAgaW5pdGlhbFZhbHVlczoge1xuICAgICAgZW1haWw6IFwiXCIsXG4gICAgfSxcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGVGb3JtLFxuICB9KTtcblxuICAvLyBIYW5kbGUgZm9yZ290IHBhc3N3b3JkIHN1Ym1pc3Npb25cbiAgY29uc3QgaGFuZGxlRm9yZ290UGFzc3dvcmQgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgSGFwdGljcy5pbXBhY3RBc3luYyhIYXB0aWNzLkltcGFjdEZlZWRiYWNrU3R5bGUuTGlnaHQpLmNhdGNoKCgpID0+IHt9KTtcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGxvZ2dlci5pbmZvKFwiRm9yZ290IHBhc3N3b3JkIHJlcXVlc3RcIiwgeyBlbWFpbDogdmFsdWVzLmVtYWlsIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF1dGhTZXJ2aWNlLmZvcmdvdFBhc3N3b3JkKHZhbHVlcy5lbWFpbCk7XG5cbiAgICAgIC8vIFN1Y2Nlc3MgaGFwdGljIGZlZWRiYWNrXG4gICAgICBIYXB0aWNzLm5vdGlmaWNhdGlvbkFzeW5jKEhhcHRpY3MuTm90aWZpY2F0aW9uRmVlZGJhY2tUeXBlLlN1Y2Nlc3MpLmNhdGNoKFxuICAgICAgICAoKSA9PiB7fSxcbiAgICAgICk7XG5cbiAgICAgIEFsZXJ0LmFsZXJ0KFxuICAgICAgICBcIkNoZWNrIFlvdXIgRW1haWxcIixcbiAgICAgICAgXCJXZSd2ZSBzZW50IHlvdSBhIHBhc3N3b3JkIHJlc2V0IGxpbmsuIFBsZWFzZSBjaGVjayB5b3VyIGVtYWlsIGFuZCBmb2xsb3cgdGhlIGluc3RydWN0aW9ucy5cIixcbiAgICAgICAgW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRleHQ6IFwiT0tcIixcbiAgICAgICAgICAgIG9uUHJlc3M6ICgpID0+IG5hdmlnYXRpb24uZ29CYWNrKCksXG4gICAgICAgICAgICBzdHlsZTogXCJkZWZhdWx0XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgeyBjYW5jZWxhYmxlOiBmYWxzZSB9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gRXJyb3IgaGFwdGljIGZlZWRiYWNrXG4gICAgICBIYXB0aWNzLm5vdGlmaWNhdGlvbkFzeW5jKEhhcHRpY3MuTm90aWZpY2F0aW9uRmVlZGJhY2tUeXBlLkVycm9yKS5jYXRjaChcbiAgICAgICAgKCkgPT4ge30sXG4gICAgICApO1xuXG4gICAgICBsb2dnZXIuZXJyb3IoXCJGb3Jnb3QgcGFzc3dvcmQgZmFpbGVkXCIsIHsgZXJyb3IgfSk7XG5cbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgIGVycm9yIGluc3RhbmNlb2YgQXV0aEVycm9yXG4gICAgICAgICAgPyBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgOiBcIkZhaWxlZCB0byBzZW5kIHBhc3N3b3JkIHJlc2V0IGVtYWlsLiBQbGVhc2UgdHJ5IGFnYWluLlwiO1xuXG4gICAgICBBbGVydC5hbGVydChcIkVycm9yXCIsIGVycm9yTWVzc2FnZSwgW3sgdGV4dDogXCJPS1wiLCBzdHlsZTogXCJkZWZhdWx0XCIgfV0pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH0sIFt2YWx1ZXMuZW1haWwsIG5hdmlnYXRpb25dKTtcblxuICBjb25zdCBoYW5kbGVTdWJtaXQgPSBoYW5kbGVTdWJtaXRGb3JtKGhhbmRsZUZvcmdvdFBhc3N3b3JkKTtcblxuICBjb25zdCBuYXZpZ2F0ZUJhY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgbmF2aWdhdGlvbi5nb0JhY2soKTtcbiAgfSwgW25hdmlnYXRpb25dKTtcblxuICByZXR1cm4ge1xuICAgIHZhbHVlcyxcbiAgICBlcnJvcnMsXG4gICAgaXNWYWxpZCxcbiAgICBsb2FkaW5nLFxuICAgIHNldFZhbHVlLFxuICAgIGhhbmRsZVN1Ym1pdCxcbiAgICBuYXZpZ2F0ZUJhY2ssXG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUlBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUMsdUJBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLFlBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLGNBQUEsR0FBQU4sT0FBQTtBQUFxRCxTQUFBRyx3QkFBQUksQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQU4sdUJBQUEsWUFBQUEsd0JBQUFJLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJ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