95fcbb7bdd203808b25623eb4595cb68
"use strict";

_getJestObj().mock('react-native-reanimated', function () {
  return {
    default: {
      View: function View(_ref) {
        var children = _ref.children;
        return children;
      },
      useAnimatedStyle: function useAnimatedStyle() {
        return {};
      },
      useSharedValue: function useSharedValue(value) {
        return {
          value: value
        };
      },
      withSpring: function withSpring(value) {
        return value;
      }
    }
  };
});
_getJestObj().mock("../containers/FXContainer", function () {
  return function (_ref2) {
    var children = _ref2.children;
    return children;
  };
});
_getJestObj().mock("../buttons/EliteButton", function () {
  return function (_ref3) {
    var title = _ref3.title,
      onPress = _ref3.onPress,
      children = _ref3.children;
    return (0, _jsxRuntime.jsx)("button", {
      onPress: onPress,
      title: title,
      children: children
    });
  };
});
_getJestObj().mock('expo-image-picker');
_getJestObj().mock('expo-haptics');
_getJestObj().mock("../photo/AdvancedPhotoEditor", function () {
  return {
    AdvancedPhotoEditor: function AdvancedPhotoEditor(_ref4) {
      var onSave = _ref4.onSave,
        onCancel = _ref4.onCancel;
      return (0, _jsxRuntime.jsxs)("div", {
        children: [(0, _jsxRuntime.jsx)("button", {
          onPress: onSave,
          testID: "editor-save",
          children: "Save"
        }), (0, _jsxRuntime.jsx)("button", {
          onPress: onCancel,
          testID: "editor-cancel",
          children: "Cancel"
        })]
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ModernPhotoUpload = _interopRequireDefault(require("../ModernPhotoUpload"));
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRequestMediaLibraryPermissions = jest.fn();
var mockLaunchImageLibraryAsync = jest.fn();
ImagePicker.requestMediaLibraryPermissionsAsync = mockRequestMediaLibraryPermissions;
ImagePicker.launchImageLibraryAsync = mockLaunchImageLibraryAsync;
describe('ModernPhotoUpload', function () {
  var mockPhotos = [{
    id: '1',
    uri: 'file://photo1.jpg',
    isUploading: false
  }];
  var mockOnPhotosChange = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    mockRequestMediaLibraryPermissions.mockResolvedValue({
      status: ImagePicker.PermissionStatus.GRANTED
    });
    mockLaunchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: 'file://new-photo.jpg'
      }]
    });
  });
  describe('Rendering', function () {
    it('should render with photos', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: mockPhotos,
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render.getByText;
      expect(getByText('Pet Photos')).toBeTruthy();
      expect(getByText(/Add up to/)).toBeTruthy();
    });
    it('should show photo count', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: mockPhotos,
          onPhotosChange: mockOnPhotosChange,
          maxPhotos: 6
        })),
        getByText = _render2.getByText;
      expect(getByText(/1\/6/)).toBeTruthy();
    });
    it('should show add photo button when below max', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: mockPhotos,
          onPhotosChange: mockOnPhotosChange,
          maxPhotos: 6
        })),
        getByText = _render3.getByText;
      expect(getByText('Add Photo')).toBeTruthy();
    });
    it('should hide add photo button when at max', function () {
      var maxPhotos = Array(6).fill(null).map(function (_, i) {
        return {
          id: String(i),
          uri: `file://photo${i}.jpg`,
          isUploading: false
        };
      });
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: maxPhotos,
          onPhotosChange: mockOnPhotosChange,
          maxPhotos: 6
        })),
        queryByText = _render4.queryByText;
      expect(queryByText('Add Photo')).toBeNull();
    });
    it('should render empty state when no photos', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render5.getByText;
      expect(getByText('No photos yet')).toBeTruthy();
    });
  });
  describe('Photo Picking', function () {
    it('should pick image from library', (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render6.getByText;
      var addButton = getByText('Add Photo');
      _reactNative.fireEvent.press(addButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockLaunchImageLibraryAsync).toHaveBeenCalled();
      });
    }));
    it('should show permission alert when denied', (0, _asyncToGenerator2.default)(function* () {
      mockRequestMediaLibraryPermissions.mockResolvedValue({
        status: ImagePicker.PermissionStatus.DENIED
      });
      _reactNative2.Alert.alert = jest.fn();
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render7.getByText;
      var addButton = getByText('Add Photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(addButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalled();
      });
    }));
    it('should not pick image when disabled', (0, _asyncToGenerator2.default)(function* () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange,
          disabled: true
        })),
        getByText = _render8.getByText;
      var addButton = getByText('Add Photo');
      _reactNative.fireEvent.press(addButton);
      expect(mockLaunchImageLibraryAsync).not.toHaveBeenCalled();
    }));
    it('should limit photos to maxPhotos', (0, _asyncToGenerator2.default)(function* () {
      var nearMaxPhotos = Array(5).fill(null).map(function (_, i) {
        return {
          id: String(i),
          uri: `file://photo${i}.jpg`,
          isUploading: false
        };
      });
      mockLaunchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: 'file://new-photo.jpg'
        }]
      });
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: nearMaxPhotos,
          onPhotosChange: mockOnPhotosChange,
          maxPhotos: 6
        })),
        getByText = _render9.getByText;
      var addButton = getByText('Add Photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(addButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockLaunchImageLibraryAsync).toHaveBeenCalled();
      });
    }));
    it('should show photo limit alert', (0, _asyncToGenerator2.default)(function* () {
      var maxPhotos = Array(6).fill(null).map(function (_, i) {
        return {
          id: String(i),
          uri: `file://photo${i}.jpg`,
          isUploading: false
        };
      });
      _reactNative2.Alert.alert = jest.fn();
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: maxPhotos,
          onPhotosChange: mockOnPhotosChange,
          maxPhotos: 6
        })),
        getByText = _render0.getByText;
      expect(true).toBeTruthy();
    }));
  });
  describe('Photo Editor Integration', function () {
    it('should show editor when picking image', (0, _asyncToGenerator2.default)(function* () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render1.getByText,
        queryByTestId = _render1.queryByTestId;
      var addButton = getByText('Add Photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(addButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(queryByTestId('editor-save')).toBeTruthy();
      });
    }));
    it('should save edited photo', (0, _asyncToGenerator2.default)(function* () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render10.getByText,
        getByTestId = _render10.getByTestId;
      var addButton = getByText('Add Photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(addButton);
      }));
      yield (0, _reactNative.waitFor)((0, _asyncToGenerator2.default)(function* () {
        var saveButton = getByTestId('editor-save');
        yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
          _reactNative.fireEvent.press(saveButton);
        }));
      }));
      expect(mockOnPhotosChange).toHaveBeenCalled();
    }));
    it('should cancel editor without adding photo', (0, _asyncToGenerator2.default)(function* () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render11.getByText,
        getByTestId = _render11.getByTestId;
      var addButton = getByText('Add Photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(addButton);
      }));
      yield (0, _reactNative.waitFor)((0, _asyncToGenerator2.default)(function* () {
        var cancelButton = getByTestId('editor-cancel');
        yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
          _reactNative.fireEvent.press(cancelButton);
        }));
      }));
      expect(mockOnPhotosChange).not.toHaveBeenCalled();
    }));
  });
  describe('Remove Photo', function () {
    it('should remove photo when remove button pressed', function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: mockPhotos,
          onPhotosChange: mockOnPhotosChange
        })),
        getByTestId = _render12.getByTestId;
      var removeButton = document.createElement('button');
      removeButton.onclick = function () {
        mockOnPhotosChange([]);
      };
      (0, _reactNative.fireEvent)(removeButton, {
        press: jest.fn()
      });
      expect(true).toBeTruthy();
    });
  });
  describe('Uploading State', function () {
    it('should show uploading overlay', function () {
      var uploadingPhoto = [{
        id: '1',
        uri: 'file://photo1.jpg',
        isUploading: true
      }];
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: uploadingPhoto,
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render13.getByText;
      expect(getByText('Uploading...')).toBeTruthy();
    });
  });
  describe('Error Handling', function () {
    it('should show error overlay on photo error', function () {
      var errorPhoto = [{
        id: '1',
        uri: 'file://photo1.jpg',
        isUploading: false,
        error: 'Upload failed'
      }];
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: errorPhoto,
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render14.getByText;
      expect(getByText('Failed')).toBeTruthy();
    });
    it('should handle picker error', (0, _asyncToGenerator2.default)(function* () {
      mockLaunchImageLibraryAsync.mockRejectedValue(new Error('Picker failed'));
      _reactNative2.Alert.alert = jest.fn();
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render15.getByText;
      var addButton = getByText('Add Photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(addButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalled();
      });
    }));
  });
  describe('Haptic Feedback', function () {
    it('should trigger haptic feedback on photo pick', (0, _asyncToGenerator2.default)(function* () {
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render16.getByText;
      var addButton = getByText('Add Photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(addButton);
      }));
      expect(Haptics.impactAsync).toHaveBeenCalled();
    }));
    it('should trigger success haptic on save', (0, _asyncToGenerator2.default)(function* () {
      var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange
        })),
        getByText = _render17.getByText,
        getByTestId = _render17.getByTestId;
      var addButton = getByText('Add Photo');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(addButton);
      }));
      yield (0, _reactNative.waitFor)((0, _asyncToGenerator2.default)(function* () {
        var saveButton = getByTestId('editor-save');
        yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
          _reactNative.fireEvent.press(saveButton);
        }));
      }));
      expect(Haptics.notificationAsync).toHaveBeenCalledWith(Haptics.NotificationFeedbackType.Success);
    }));
  });
  describe('Edge Cases', function () {
    it('should handle empty photo array', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
        photos: [],
        onPhotosChange: mockOnPhotosChange
      }));
      expect(true).toBeTruthy();
    });
    it('should handle single photo', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
        photos: mockPhotos,
        onPhotosChange: mockOnPhotosChange
      }));
      expect(true).toBeTruthy();
    });
    it('should handle max photos', function () {
      var maxPhotos = Array(6).fill(null).map(function (_, i) {
        return {
          id: String(i),
          uri: `file://photo${i}.jpg`,
          isUploading: false
        };
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
        photos: maxPhotos,
        onPhotosChange: mockOnPhotosChange,
        maxPhotos: 6
      }));
      expect(true).toBeTruthy();
    });
    it('should handle disabled state', function () {
      var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModernPhotoUpload.default, {
          photos: [],
          onPhotosChange: mockOnPhotosChange,
          disabled: true
        })),
        getByText = _render18.getByText;
      expect(true).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,