00d0b6e71ac4cd21f26bf7ba38b88750
"use strict";

_getJestObj().mock("../../../stores/useAuthStore", function () {
  return {
    useAuthStore: function useAuthStore() {
      return {
        user: {
          _id: "user123",
          firstName: "John",
          lastName: "Doe",
          email: "john@example.com"
        }
      };
    }
  };
});
_getJestObj().mock("../../../services/api", function () {
  return {
    matchesAPI: {
      getMyPets: jest.fn()
    }
  };
});
_getJestObj().mock("../../../services/logger", function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useProfileData = require("../useProfileData");
var _api = require("../../../services/api");
var _logger = require("../../../services/logger");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockMatchesAPI = _api.matchesAPI;
var mockLogger = _logger.logger;
describe("useProfileData", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockMatchesAPI.getMyPets.mockResolvedValue({
      data: [{
        _id: "pet1",
        name: "Buddy",
        species: "dog",
        breed: "Golden Retriever"
      }, {
        _id: "pet2",
        name: "Whiskers",
        species: "cat",
        breed: "Persian"
      }]
    });
  });
  it("should initialize with auth user data", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)();
      }),
      result = _renderHook.result;
    expect(result.current.user).toEqual({
      _id: "user123",
      firstName: "John",
      lastName: "Doe",
      email: "john@example.com"
    });
    expect(result.current.pets).toEqual([]);
    expect(result.current.isLoading).toBe(true);
    expect(result.current.error).toBe(null);
  });
  it("should load user pets on mount", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(mockMatchesAPI.getMyPets).toHaveBeenCalledTimes(1);
    expect(result.current.pets).toEqual([{
      _id: "pet1",
      name: "Buddy",
      species: "dog",
      breed: "Golden Retriever"
    }, {
      _id: "pet2",
      name: "Whiskers",
      species: "cat",
      breed: "Persian"
    }]);
    expect(result.current.error).toBe(null);
    expect(mockLogger.info).toHaveBeenCalledWith("Profile data refreshed", {
      petCount: 2
    });
  }));
  it("should handle API errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    var errorMessage = "Failed to load pets";
    mockMatchesAPI.getMyPets.mockRejectedValue(new Error(errorMessage));
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.pets).toEqual([]);
    expect(result.current.error).toBe(errorMessage);
    expect(mockLogger.error).toHaveBeenCalledWith("Failed to refresh profile", {
      error: errorMessage
    });
  }));
  it("should handle non-Error API rejections", (0, _asyncToGenerator2.default)(function* () {
    mockMatchesAPI.getMyPets.mockRejectedValue("String error");
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.pets).toEqual([]);
    expect(result.current.error).toBe("Failed to load profile");
  }));
  it("should refresh profile data when called manually", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    mockMatchesAPI.getMyPets.mockResolvedValue({
      data: [{
        _id: "pet3",
        name: "Max",
        species: "dog",
        breed: "Labrador"
      }]
    });
    (0, _reactNative.act)(function () {
      result.current.refreshProfile();
    });
    expect(result.current.isLoading).toBe(true);
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(mockMatchesAPI.getMyPets).toHaveBeenCalledTimes(2);
    expect(result.current.pets).toEqual([{
      _id: "pet3",
      name: "Max",
      species: "dog",
      breed: "Labrador"
    }]);
  }));
  it("should handle empty pets array", (0, _asyncToGenerator2.default)(function* () {
    mockMatchesAPI.getMyPets.mockResolvedValue({
      data: []
    });
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.pets).toEqual([]);
    expect(mockLogger.info).toHaveBeenCalledWith("Profile data refreshed", {
      petCount: 0
    });
  }));
  it("should handle null/undefined pets data", (0, _asyncToGenerator2.default)(function* () {
    mockMatchesAPI.getMyPets.mockResolvedValue({
      data: null
    });
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)();
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.pets).toEqual([]);
  }));
  it("should not load data when disabled", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)({
          enabled: false
        });
      }),
      result = _renderHook8.result;
    yield new Promise(function (resolve) {
      return setTimeout(resolve, 100);
    });
    expect(result.current.isLoading).toBe(false);
    expect(result.current.pets).toEqual([]);
    expect(mockMatchesAPI.getMyPets).not.toHaveBeenCalled();
  }));
  it("should handle refresh when disabled", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)({
          enabled: false
        });
      }),
      result = _renderHook9.result;
    (0, _reactNative.act)(function () {
      result.current.refreshProfile();
    });
    yield new Promise(function (resolve) {
      return setTimeout(resolve, 100);
    });
    expect(result.current.isLoading).toBe(false);
    expect(mockMatchesAPI.getMyPets).not.toHaveBeenCalled();
  }));
  it("should reset error state on successful refresh", (0, _asyncToGenerator2.default)(function* () {
    mockMatchesAPI.getMyPets.mockRejectedValueOnce(new Error("Network error"));
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.error).toBe("Network error");
    mockMatchesAPI.getMyPets.mockResolvedValueOnce({
      data: [{
        _id: "pet1",
        name: "Buddy",
        species: "dog",
        breed: "Golden"
      }]
    });
    (0, _reactNative.act)(function () {
      result.current.refreshProfile();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.error).toBe(null);
    expect(result.current.pets).toEqual([{
      _id: "pet1",
      name: "Buddy",
      species: "dog",
      breed: "Golden"
    }]);
  }));
  it("should return stable function references", function () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useProfileData.useProfileData)();
      }),
      result = _renderHook1.result,
      rerender = _renderHook1.rerender;
    var firstRefresh = result.current.refreshProfile;
    rerender();
    expect(result.current.refreshProfile).toBe(firstRefresh);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,