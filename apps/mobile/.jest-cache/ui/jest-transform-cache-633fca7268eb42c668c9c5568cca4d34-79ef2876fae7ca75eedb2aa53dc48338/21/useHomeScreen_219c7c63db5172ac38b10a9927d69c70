701698f210bc64c119e00c6120309c2f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHomeScreen = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _native = require("@react-navigation/native");
var _core = require("@pawfectmatch/core");
var _AuthService = require("../../services/AuthService");
var _haptics = require("../../ui/haptics");
var useHomeScreen = exports.useHomeScreen = function useHomeScreen() {
  var navigation = (0, _native.useNavigation)();
  var _useAuthStore = (0, _core.useAuthStore)(),
    user = _useAuthStore.user;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    refreshing = _useState2[0],
    setRefreshing = _useState2[1];
  var _useState3 = (0, _react.useState)({
      matches: 0,
      messages: 0,
      pets: 0
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    stats = _useState4[0],
    setStats = _useState4[1];
  var onRefresh = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setRefreshing(true);
    try {
      var accessToken = yield _AuthService.authService.getAccessToken();
      var response = yield fetch(`${process.env.EXPO_PUBLIC_API_URL}/home/stats`, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      });
      var data = yield response.json();
      setStats({
        matches: data.matches || 0,
        messages: data.messages || 0,
        pets: 0
      });
    } catch (error) {
      _core.logger.error("Failed to refresh data:", {
        error: error
      });
    } finally {
      setRefreshing(false);
    }
  }), []);
  var handleQuickAction = (0, _react.useCallback)(function (action) {
    try {
      switch (action) {
        case "swipe":
          navigation.navigate("Swipe");
          break;
        case "matches":
          navigation.navigate("Matches");
          break;
        case "messages":
          navigation.navigate("Matches");
          break;
        case "profile":
          navigation.navigate("Profile");
          break;
        case "settings":
          navigation.navigate("Settings");
          break;
        case "my-pets":
          navigation.navigate("MyPets");
          break;
        case "create-pet":
          navigation.navigate("CreatePet");
          break;
        case "community":
          navigation.navigate("Community");
          break;
        case "premium":
          navigation.navigate("Profile");
          break;
        default:
          _core.logger.warn(`Unknown action: ${action}`);
      }
    } catch (error) {
      _core.logger.error("Navigation error:", {
        error: error
      });
    }
  }, [navigation]);
  var handleProfilePress = (0, _react.useCallback)(function () {
    _haptics.haptic.tap();
    handleQuickAction("profile");
  }, [handleQuickAction]);
  var handleSettingsPress = (0, _react.useCallback)(function () {
    _haptics.haptic.tap();
    handleQuickAction("settings");
  }, [handleQuickAction]);
  var handleSwipePress = (0, _react.useCallback)(function () {
    _haptics.haptic.confirm();
    handleQuickAction("swipe");
  }, [handleQuickAction]);
  var handleMatchesPress = (0, _react.useCallback)(function () {
    _haptics.haptic.confirm();
    handleQuickAction("matches");
  }, [handleQuickAction]);
  var handleMessagesPress = (0, _react.useCallback)(function () {
    _haptics.haptic.confirm();
    handleQuickAction("messages");
  }, [handleQuickAction]);
  var handleMyPetsPress = (0, _react.useCallback)(function () {
    _haptics.haptic.confirm();
    handleQuickAction("my-pets");
  }, [handleQuickAction]);
  var handleCreatePetPress = (0, _react.useCallback)(function () {
    _haptics.haptic.confirm();
    handleQuickAction("create-pet");
  }, [handleQuickAction]);
  var handleCommunityPress = (0, _react.useCallback)(function () {
    _haptics.haptic.confirm();
    handleQuickAction("community");
  }, [handleQuickAction]);
  return {
    stats: stats,
    refreshing: refreshing,
    onRefresh: onRefresh,
    handleQuickAction: handleQuickAction,
    handleProfilePress: handleProfilePress,
    handleSettingsPress: handleSettingsPress,
    handleSwipePress: handleSwipePress,
    handleMatchesPress: handleMatchesPress,
    handleMessagesPress: handleMessagesPress,
    handleMyPetsPress: handleMyPetsPress,
    handleCreatePetPress: handleCreatePetPress,
    handleCommunityPress: handleCommunityPress
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX25hdGl2ZSIsIl9jb3JlIiwiX0F1dGhTZXJ2aWNlIiwiX2hhcHRpY3MiLCJ1c2VIb21lU2NyZWVuIiwiZXhwb3J0cyIsIm5hdmlnYXRpb24iLCJ1c2VOYXZpZ2F0aW9uIiwiX3VzZUF1dGhTdG9yZSIsInVzZUF1dGhTdG9yZSIsInVzZXIiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwicmVmcmVzaGluZyIsInNldFJlZnJlc2hpbmciLCJfdXNlU3RhdGUzIiwibWF0Y2hlcyIsIm1lc3NhZ2VzIiwicGV0cyIsIl91c2VTdGF0ZTQiLCJzdGF0cyIsInNldFN0YXRzIiwib25SZWZyZXNoIiwidXNlQ2FsbGJhY2siLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJhY2Nlc3NUb2tlbiIsImF1dGhTZXJ2aWNlIiwiZ2V0QWNjZXNzVG9rZW4iLCJyZXNwb25zZSIsImZldGNoIiwicHJvY2VzcyIsImVudiIsIkVYUE9fUFVCTElDX0FQSV9VUkwiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImRhdGEiLCJqc29uIiwiZXJyb3IiLCJsb2dnZXIiLCJoYW5kbGVRdWlja0FjdGlvbiIsImFjdGlvbiIsIm5hdmlnYXRlIiwid2FybiIsImhhbmRsZVByb2ZpbGVQcmVzcyIsImhhcHRpYyIsInRhcCIsImhhbmRsZVNldHRpbmdzUHJlc3MiLCJoYW5kbGVTd2lwZVByZXNzIiwiY29uZmlybSIsImhhbmRsZU1hdGNoZXNQcmVzcyIsImhhbmRsZU1lc3NhZ2VzUHJlc3MiLCJoYW5kbGVNeVBldHNQcmVzcyIsImhhbmRsZUNyZWF0ZVBldFByZXNzIiwiaGFuZGxlQ29tbXVuaXR5UHJlc3MiXSwic291cmNlcyI6WyJ1c2VIb21lU2NyZWVuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogdXNlSG9tZVNjcmVlbiBIb29rXG4gKiBNYW5hZ2VzIEhvbWVTY3JlZW4gc3RhdGUgYW5kIGJ1c2luZXNzIGxvZ2ljXG4gKi9cbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlTmF2aWdhdGlvbiB9IGZyb20gXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIjtcbmltcG9ydCB0eXBlIHsgTmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcCB9IGZyb20gXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2tcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJAcGF3ZmVjdG1hdGNoL2NvcmVcIjtcbmltcG9ydCB7IHVzZUF1dGhTdG9yZSB9IGZyb20gXCJAcGF3ZmVjdG1hdGNoL2NvcmVcIjtcbmltcG9ydCB7IG1hdGNoZXNBUEkgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvYXBpXCI7XG5pbXBvcnQgeyBhdXRoU2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9BdXRoU2VydmljZVwiO1xuaW1wb3J0IHR5cGUgeyBSb290U3RhY2tQYXJhbUxpc3QgfSBmcm9tIFwiLi4vLi4vbmF2aWdhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHsgaGFwdGljIH0gZnJvbSBcIi4uLy4uL3VpL2hhcHRpY3NcIjtcblxudHlwZSBOYXZpZ2F0aW9uUHJvcCA9IE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8Um9vdFN0YWNrUGFyYW1MaXN0PjtcblxuaW50ZXJmYWNlIFN0YXRzIHtcbiAgbWF0Y2hlczogbnVtYmVyO1xuICBtZXNzYWdlczogbnVtYmVyO1xuICBwZXRzOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBVc2VIb21lU2NyZWVuUmV0dXJuIHtcbiAgc3RhdHM6IFN0YXRzO1xuICByZWZyZXNoaW5nOiBib29sZWFuO1xuICBvblJlZnJlc2g6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIGhhbmRsZVF1aWNrQWN0aW9uOiAoYWN0aW9uOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGhhbmRsZVByb2ZpbGVQcmVzczogKCkgPT4gdm9pZDtcbiAgaGFuZGxlU2V0dGluZ3NQcmVzczogKCkgPT4gdm9pZDtcbiAgaGFuZGxlU3dpcGVQcmVzczogKCkgPT4gdm9pZDtcbiAgaGFuZGxlTWF0Y2hlc1ByZXNzOiAoKSA9PiB2b2lkO1xuICBoYW5kbGVNZXNzYWdlc1ByZXNzOiAoKSA9PiB2b2lkO1xuICBoYW5kbGVNeVBldHNQcmVzczogKCkgPT4gdm9pZDtcbiAgaGFuZGxlQ3JlYXRlUGV0UHJlc3M6ICgpID0+IHZvaWQ7XG4gIGhhbmRsZUNvbW11bml0eVByZXNzOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgdXNlSG9tZVNjcmVlbiA9ICgpOiBVc2VIb21lU2NyZWVuUmV0dXJuID0+IHtcbiAgY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF2aWdhdGlvblByb3A+KCk7XG4gIGNvbnN0IHsgdXNlciB9ID0gdXNlQXV0aFN0b3JlKCk7XG5cbiAgY29uc3QgW3JlZnJlc2hpbmcsIHNldFJlZnJlc2hpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc3RhdHMsIHNldFN0YXRzXSA9IHVzZVN0YXRlPFN0YXRzPih7XG4gICAgbWF0Y2hlczogMCxcbiAgICBtZXNzYWdlczogMCxcbiAgICBwZXRzOiAwLFxuICB9KTtcblxuICBjb25zdCBvblJlZnJlc2ggPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgc2V0UmVmcmVzaGluZyh0cnVlKTtcbiAgICB0cnkge1xuICAgICAgLy8gR2V0IGFjY2VzcyB0b2tlbiBmcm9tIEF1dGhTZXJ2aWNlXG4gICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IGF1dGhTZXJ2aWNlLmdldEFjY2Vzc1Rva2VuKCk7XG4gICAgICBcbiAgICAgIC8vIFVzZSByZWFsIGhvbWUgc3RhdHMgQVBJIGVuZHBvaW50XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3Byb2Nlc3MuZW52LkVYUE9fUFVCTElDX0FQSV9VUkx9L2hvbWUvc3RhdHNgLCB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YWNjZXNzVG9rZW59YCxcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgXG4gICAgICBzZXRTdGF0cyh7XG4gICAgICAgIG1hdGNoZXM6IGRhdGEubWF0Y2hlcyB8fCAwLFxuICAgICAgICBtZXNzYWdlczogZGF0YS5tZXNzYWdlcyB8fCAwLFxuICAgICAgICBwZXRzOiAwLCAvLyBOb3QgaW5jbHVkZWQgaW4gbmV3IEFQSVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byByZWZyZXNoIGRhdGE6XCIsIHsgZXJyb3IgfSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldFJlZnJlc2hpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGNvbnN0IGhhbmRsZVF1aWNrQWN0aW9uID0gdXNlQ2FsbGJhY2soXG4gICAgKGFjdGlvbjogc3RyaW5nKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgIGNhc2UgXCJzd2lwZVwiOlxuICAgICAgICAgICAgbmF2aWdhdGlvbi5uYXZpZ2F0ZShcIlN3aXBlXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm1hdGNoZXNcIjpcbiAgICAgICAgICAgIG5hdmlnYXRpb24ubmF2aWdhdGUoXCJNYXRjaGVzXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm1lc3NhZ2VzXCI6XG4gICAgICAgICAgICBuYXZpZ2F0aW9uLm5hdmlnYXRlKFwiTWF0Y2hlc1wiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJwcm9maWxlXCI6XG4gICAgICAgICAgICBuYXZpZ2F0aW9uLm5hdmlnYXRlKFwiUHJvZmlsZVwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJzZXR0aW5nc1wiOlxuICAgICAgICAgICAgbmF2aWdhdGlvbi5uYXZpZ2F0ZShcIlNldHRpbmdzXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm15LXBldHNcIjpcbiAgICAgICAgICAgIG5hdmlnYXRpb24ubmF2aWdhdGUoXCJNeVBldHNcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY3JlYXRlLXBldFwiOlxuICAgICAgICAgICAgbmF2aWdhdGlvbi5uYXZpZ2F0ZShcIkNyZWF0ZVBldFwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjb21tdW5pdHlcIjpcbiAgICAgICAgICAgIG5hdmlnYXRpb24ubmF2aWdhdGUoXCJDb21tdW5pdHlcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwicHJlbWl1bVwiOlxuICAgICAgICAgICAgbmF2aWdhdGlvbi5uYXZpZ2F0ZShcIlByb2ZpbGVcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oYFVua25vd24gYWN0aW9uOiAke2FjdGlvbn1gKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKFwiTmF2aWdhdGlvbiBlcnJvcjpcIiwgeyBlcnJvciB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtuYXZpZ2F0aW9uXSxcbiAgKTtcblxuICBjb25zdCBoYW5kbGVQcm9maWxlUHJlc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaGFwdGljLnRhcCgpO1xuICAgIGhhbmRsZVF1aWNrQWN0aW9uKFwicHJvZmlsZVwiKTtcbiAgfSwgW2hhbmRsZVF1aWNrQWN0aW9uXSk7XG5cbiAgY29uc3QgaGFuZGxlU2V0dGluZ3NQcmVzcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBoYXB0aWMudGFwKCk7XG4gICAgaGFuZGxlUXVpY2tBY3Rpb24oXCJzZXR0aW5nc1wiKTtcbiAgfSwgW2hhbmRsZVF1aWNrQWN0aW9uXSk7XG5cbiAgY29uc3QgaGFuZGxlU3dpcGVQcmVzcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBoYXB0aWMuY29uZmlybSgpO1xuICAgIGhhbmRsZVF1aWNrQWN0aW9uKFwic3dpcGVcIik7XG4gIH0sIFtoYW5kbGVRdWlja0FjdGlvbl0pO1xuXG4gIGNvbnN0IGhhbmRsZU1hdGNoZXNQcmVzcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBoYXB0aWMuY29uZmlybSgpO1xuICAgIGhhbmRsZVF1aWNrQWN0aW9uKFwibWF0Y2hlc1wiKTtcbiAgfSwgW2hhbmRsZVF1aWNrQWN0aW9uXSk7XG5cbiAgY29uc3QgaGFuZGxlTWVzc2FnZXNQcmVzcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBoYXB0aWMuY29uZmlybSgpO1xuICAgIGhhbmRsZVF1aWNrQWN0aW9uKFwibWVzc2FnZXNcIik7XG4gIH0sIFtoYW5kbGVRdWlja0FjdGlvbl0pO1xuXG4gIGNvbnN0IGhhbmRsZU15UGV0c1ByZXNzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGhhcHRpYy5jb25maXJtKCk7XG4gICAgaGFuZGxlUXVpY2tBY3Rpb24oXCJteS1wZXRzXCIpO1xuICB9LCBbaGFuZGxlUXVpY2tBY3Rpb25dKTtcblxuICBjb25zdCBoYW5kbGVDcmVhdGVQZXRQcmVzcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBoYXB0aWMuY29uZmlybSgpO1xuICAgIGhhbmRsZVF1aWNrQWN0aW9uKFwiY3JlYXRlLXBldFwiKTtcbiAgfSwgW2hhbmRsZVF1aWNrQWN0aW9uXSk7XG5cbiAgY29uc3QgaGFuZGxlQ29tbXVuaXR5UHJlc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaGFwdGljLmNvbmZpcm0oKTtcbiAgICBoYW5kbGVRdWlja0FjdGlvbihcImNvbW11bml0eVwiKTtcbiAgfSwgW2hhbmRsZVF1aWNrQWN0aW9uXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0cyxcbiAgICByZWZyZXNoaW5nLFxuICAgIG9uUmVmcmVzaCxcbiAgICBoYW5kbGVRdWlja0FjdGlvbixcbiAgICBoYW5kbGVQcm9maWxlUHJlc3MsXG4gICAgaGFuZGxlU2V0dGluZ3NQcmVzcyxcbiAgICBoYW5kbGVTd2lwZVByZXNzLFxuICAgIGhhbmRsZU1hdGNoZXNQcmVzcyxcbiAgICBoYW5kbGVNZXNzYWdlc1ByZXNzLFxuICAgIGhhbmRsZU15UGV0c1ByZXNzLFxuICAgIGhhbmRsZUNyZWF0ZVBldFByZXNzLFxuICAgIGhhbmRsZUNvbW11bml0eVByZXNzLFxuICB9O1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBSUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsS0FBQSxHQUFBRixPQUFBO0FBR0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBRUEsSUFBQUksUUFBQSxHQUFBSixPQUFBO0FBeUJPLElBQU1LLGFBQWEsR0FBQUMsT0FBQSxDQUFBRCxhQUFBLEdBQUcsU0FBaEJBLGFBQWFBLENBQUEsRUFBOEI7RUFDdEQsSUFBTUUsVUFBVSxHQUFHLElBQUFDLHFCQUFhLEVBQWlCLENBQUM7RUFDbEQsSUFBQUMsYUFBQSxHQUFpQixJQUFBQyxrQkFBWSxFQUFDLENBQUM7SUFBdkJDLElBQUksR0FBQUYsYUFBQSxDQUFKRSxJQUFJO0VBRVosSUFBQUMsU0FBQSxHQUFvQyxJQUFBQyxlQUFRLEVBQUMsS0FBSyxDQUFDO0lBQUFDLFVBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBLEVBQUFKLFNBQUE7SUFBNUNLLFVBQVUsR0FBQUgsVUFBQTtJQUFFSSxhQUFhLEdBQUFKLFVBQUE7RUFDaEMsSUFBQUssVUFBQSxHQUEwQixJQUFBTixlQUFRLEVBQVE7TUFDeENPLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLFFBQVEsRUFBRSxDQUFDO01BQ1hDLElBQUksRUFBRTtJQUNSLENBQUMsQ0FBQztJQUFBQyxVQUFBLE9BQUFSLGVBQUEsQ0FBQUMsT0FBQSxFQUFBRyxVQUFBO0lBSktLLEtBQUssR0FBQUQsVUFBQTtJQUFFRSxRQUFRLEdBQUFGLFVBQUE7RUFNdEIsSUFBTUcsU0FBUyxHQUFHLElBQUFDLGtCQUFXLE1BQUFDLGtCQUFBLENBQUFaLE9BQUEsRUFBQyxhQUFZO0lBQ3hDRSxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ25CLElBQUk7TUFFRixJQUFNVyxXQUFXLFNBQVNDLHdCQUFXLENBQUNDLGNBQWMsQ0FBQyxDQUFDO01BR3RELElBQU1DLFFBQVEsU0FBU0MsS0FBSyxDQUFDLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxtQkFBbUIsYUFBYSxFQUFFO1FBQzVFQyxPQUFPLEVBQUU7VUFDUEMsYUFBYSxFQUFFLFVBQVVULFdBQVcsRUFBRTtVQUN0QyxjQUFjLEVBQUU7UUFDbEI7TUFDRixDQUFDLENBQUM7TUFDRixJQUFNVSxJQUFJLFNBQVNQLFFBQVEsQ0FBQ1EsSUFBSSxDQUFDLENBQUM7TUFFbENmLFFBQVEsQ0FBQztRQUNQTCxPQUFPLEVBQUVtQixJQUFJLENBQUNuQixPQUFPLElBQUksQ0FBQztRQUMxQkMsUUFBUSxFQUFFa0IsSUFBSSxDQUFDbEIsUUFBUSxJQUFJLENBQUM7UUFDNUJDLElBQUksRUFBRTtNQUNSLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxPQUFPbUIsS0FBSyxFQUFFO01BQ2RDLFlBQU0sQ0FBQ0QsS0FBSyxDQUFDLHlCQUF5QixFQUFFO1FBQUVBLEtBQUssRUFBTEE7TUFBTSxDQUFDLENBQUM7SUFDcEQsQ0FBQyxTQUFTO01BQ1J2QixhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ3RCO0VBQ0YsQ0FBQyxHQUFFLEVBQUUsQ0FBQztFQUVOLElBQU15QixpQkFBaUIsR0FBRyxJQUFBaEIsa0JBQVcsRUFDbkMsVUFBQ2lCLE1BQWMsRUFBSztJQUNsQixJQUFJO01BQ0YsUUFBUUEsTUFBTTtRQUNaLEtBQUssT0FBTztVQUNWckMsVUFBVSxDQUFDc0MsUUFBUSxDQUFDLE9BQU8sQ0FBQztVQUM1QjtRQUNGLEtBQUssU0FBUztVQUNadEMsVUFBVSxDQUFDc0MsUUFBUSxDQUFDLFNBQVMsQ0FBQztVQUM5QjtRQUNGLEtBQUssVUFBVTtVQUNidEMsVUFBVSxDQUFDc0MsUUFBUSxDQUFDLFNBQVMsQ0FBQztVQUM5QjtRQUNGLEtBQUssU0FBUztVQUNadEMsVUFBVSxDQUFDc0MsUUFBUSxDQUFDLFNBQVMsQ0FBQztVQUM5QjtRQUNGLEtBQUssVUFBVTtVQUNidEMsVUFBVSxDQUFDc0MsUUFBUSxDQUFDLFVBQVUsQ0FBQztVQUMvQjtRQUNGLEtBQUssU0FBUztVQUNadEMsVUFBVSxDQUFDc0MsUUFBUSxDQUFDLFFBQVEsQ0FBQztVQUM3QjtRQUNGLEtBQUssWUFBWTtVQUNmdEMsVUFBVSxDQUFDc0MsUUFBUSxDQUFDLFdBQVcsQ0FBQztVQUNoQztRQUNGLEtBQUssV0FBVztVQUNkdEMsVUFBVSxDQUFDc0MsUUFBUSxDQUFDLFdBQVcsQ0FBQztVQUNoQztRQUNGLEtBQUssU0FBUztVQUNadEMsVUFBVSxDQUFDc0MsUUFBUSxDQUFDLFNBQVMsQ0FBQztVQUM5QjtRQUNGO1VBQ0VILFlBQU0sQ0FBQ0ksSUFBSSxDQUFDLG1CQUFtQkYsTUFBTSxFQUFFLENBQUM7TUFDNUM7SUFDRixDQUFDLENBQUMsT0FBT0gsS0FBSyxFQUFFO01BQ2RDLFlBQU0sQ0FBQ0QsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBQUVBLEtBQUssRUFBTEE7TUFBTSxDQUFDLENBQUM7SUFDOUM7RUFDRixDQUFDLEVBQ0QsQ0FBQ2xDLFVBQVUsQ0FDYixDQUFDO0VBRUQsSUFBTXdDLGtCQUFrQixHQUFHLElBQUFwQixrQkFBVyxFQUFDLFlBQU07SUFDM0NxQixlQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0lBQ1pOLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztFQUM5QixDQUFDLEVBQUUsQ0FBQ0EsaUJBQWlCLENBQUMsQ0FBQztFQUV2QixJQUFNTyxtQkFBbUIsR0FBRyxJQUFBdkIsa0JBQVcsRUFBQyxZQUFNO0lBQzVDcUIsZUFBTSxDQUFDQyxHQUFHLENBQUMsQ0FBQztJQUNaTixpQkFBaUIsQ0FBQyxVQUFVLENBQUM7RUFDL0IsQ0FBQyxFQUFFLENBQUNBLGlCQUFpQixDQUFDLENBQUM7RUFFdkIsSUFBTVEsZ0JBQWdCLEdBQUcsSUFBQXhCLGtCQUFXLEVBQUMsWUFBTTtJQUN6Q3FCLGVBQU0sQ0FBQ0ksT0FBTyxDQUFDLENBQUM7SUFDaEJULGlCQUFpQixDQUFDLE9BQU8sQ0FBQztFQUM1QixDQUFDLEVBQUUsQ0FBQ0EsaUJBQWlCLENBQUMsQ0FBQztFQUV2QixJQUFNVSxrQkFBa0IsR0FBRyxJQUFBMUIsa0JBQVcsRUFBQyxZQUFNO0lBQzNDcUIsZUFBTSxDQUFDSSxPQUFPLENBQUMsQ0FBQztJQUNoQlQsaUJBQWlCLENBQUMsU0FBUyxDQUFDO0VBQzlCLENBQUMsRUFBRSxDQUFDQSxpQkFBaUIsQ0FBQyxDQUFDO0VBRXZCLElBQU1XLG1CQUFtQixHQUFHLElBQUEzQixrQkFBVyxFQUFDLFlBQU07SUFDNUNxQixlQUFNLENBQUNJLE9BQU8sQ0FBQyxDQUFDO0lBQ2hCVCxpQkFBaUIsQ0FBQyxVQUFVLENBQUM7RUFDL0IsQ0FBQyxFQUFFLENBQUNBLGlCQUFpQixDQUFDLENBQUM7RUFFdkIsSUFBTVksaUJBQWlCLEdBQUcsSUFBQTVCLGtCQUFXLEVBQUMsWUFBTTtJQUMxQ3FCLGVBQU0sQ0FBQ0ksT0FBTyxDQUFDLENBQUM7SUFDaEJULGlCQUFpQixDQUFDLFNBQVMsQ0FBQztFQUM5QixDQUFDLEVBQUUsQ0FBQ0EsaUJBQWlCLENBQUMsQ0FBQztFQUV2QixJQUFNYSxvQkFBb0IsR0FBRyxJQUFBN0Isa0JBQVcsRUFBQyxZQUFNO0lBQzdDcUIsZUFBTSxDQUFDSSxPQUFPLENBQUMsQ0FBQztJQUNoQlQsaUJBQWlCLENBQUMsWUFBWSxDQUFDO0VBQ2pDLENBQUMsRUFBRSxDQUFDQSxpQkFBaUIsQ0FBQyxDQUFDO0VBRXZCLElBQU1jLG9CQUFvQixHQUFHLElBQUE5QixrQkFBVyxFQUFDLFlBQU07SUFDN0NxQixlQUFNLENBQUNJLE9BQU8sQ0FBQyxDQUFDO0lBQ2hCVCxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7RUFDaEMsQ0FBQyxFQUFFLENBQUNBLGlCQUFpQixDQUFDLENBQUM7RUFFdkIsT0FBTztJQUNMbkIsS0FBSyxFQUFMQSxLQUFLO0lBQ0xQLFVBQVUsRUFBVkEsVUFBVTtJQUNWUyxTQUFTLEVBQVRBLFNBQVM7SUFDVGlCLGlCQUFpQixFQUFqQkEsaUJBQWlCO0lBQ2pCSSxrQkFBa0IsRUFBbEJBLGtCQUFrQjtJQUNsQkcsbUJBQW1CLEVBQW5CQSxtQkFBbUI7SUFDbkJDLGdCQUFnQixFQUFoQkEsZ0JBQWdCO0lBQ2hCRSxrQkFBa0IsRUFBbEJBLGtCQUFrQjtJQUNsQkMsbUJBQW1CLEVBQW5CQSxtQkFBbUI7SUFDbkJDLGlCQUFpQixFQUFqQkEsaUJBQWlCO0lBQ2pCQyxvQkFBb0IsRUFBcEJBLG9CQUFvQjtJQUNwQkMsb0JBQW9CLEVBQXBCQTtFQUNGLENBQUM7QUFDSCxDQUFDIiwiaWdub3JlTGlzdCI6W119