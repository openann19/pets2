e58f97dca51794d4c689ae8a51a54287
"use strict";

var _groups = require("@jest/groups");
var _reactNative = require("@testing-library/react-native");
var _usePressAnimation = require("../usePressAnimation");
var _reactNativeReanimated = require("react-native-reanimated");
var _expoHaptics = require("expo-haptics");
_groups.jest.mock('react-native-reanimated', function () {
  return {
    useSharedValue: _groups.jest.fn(),
    useAnimatedStyle: _groups.jest.fn(),
    withSpring: _groups.jest.fn(),
    withTiming: _groups.jest.fn(),
    runOnJS: _groups.jest.fn(),
    interpolate: _groups.jest.fn(),
    Extrapolate: {
      CLAMP: 'clamp'
    }
  };
});
_groups.jest.mock('expo-haptics', function () {
  return {
    impactAsync: _groups.jest.fn(),
    ImpactFeedbackStyle: {
      Light: 'light',
      Medium: 'medium',
      Heavy: 'heavy'
    }
  };
});
_groups.jest.mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _groups.jest.fn(),
      error: _groups.jest.fn(),
      warn: _groups.jest.fn(),
      debug: _groups.jest.fn()
    }
  };
});
var mockUseSharedValue = _reactNativeReanimated.useSharedValue;
var mockUseAnimatedStyle = _reactNativeReanimated.useAnimatedStyle;
var mockWithSpring = _reactNativeReanimated.withSpring;
var mockWithTiming = _reactNativeReanimated.withTiming;
var mockInterpolate = _reactNativeReanimated.interpolate;
var mockImpactAsync = _expoHaptics.impactAsync;
(0, _groups.describe)('usePressAnimation', function () {
  var mockSharedValue = {
    value: 0,
    get: _groups.jest.fn(function () {
      return 0;
    }),
    set: _groups.jest.fn()
  };
  var mockAnimatedStyle = {
    transform: [{
      scale: mockInterpolate()
    }],
    opacity: mockInterpolate()
  };
  (0, _groups.beforeEach)(function () {
    _groups.jest.clearAllMocks();
    mockUseSharedValue.mockReturnValue(mockSharedValue);
    mockUseAnimatedStyle.mockReturnValue(mockAnimatedStyle);
    mockWithSpring.mockReturnValue('spring-animation');
    mockWithTiming.mockReturnValue('timing-animation');
    mockInterpolate.mockReturnValue(0.8);
  });
  (0, _groups.describe)('Initialization', function () {
    (0, _groups.it)('should initialize with default configuration', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook.result;
      (0, _groups.expect)(mockUseSharedValue).toHaveBeenCalledWith(0);
      (0, _groups.expect)(mockUseAnimatedStyle).toHaveBeenCalled();
      (0, _groups.expect)(result.current.isPressed).toBe(false);
      (0, _groups.expect)(result.current.animatedStyle).toBe(mockAnimatedStyle);
    });
    (0, _groups.it)('should initialize with custom scale range', function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            scaleRange: [1, 0.9]
          });
        }),
        result = _renderHook2.result;
      (0, _groups.expect)(result.current.config.scaleRange).toEqual([1, 0.9]);
    });
    (0, _groups.it)('should initialize with custom opacity range', function () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            opacityRange: [1, 0.7]
          });
        }),
        result = _renderHook3.result;
      (0, _groups.expect)(result.current.config.opacityRange).toEqual([1, 0.7]);
    });
    (0, _groups.it)('should initialize with haptic feedback enabled', function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            enableHaptics: true,
            hapticStyle: 'medium'
          });
        }),
        result = _renderHook4.result;
      (0, _groups.expect)(result.current.config.enableHaptics).toBe(true);
      (0, _groups.expect)(result.current.config.hapticStyle).toBe('medium');
    });
  });
  (0, _groups.describe)('Press Event Handling', function () {
    (0, _groups.it)('should handle press in event', function () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(result.current.isPressed).toBe(true);
      (0, _groups.expect)(mockSharedValue.set).toHaveBeenCalledWith(1);
      (0, _groups.expect)(mockWithSpring).toHaveBeenCalledWith(1, _groups.expect.objectContaining({
        damping: 15,
        stiffness: 400
      }));
    });
    (0, _groups.it)('should handle press out event', function () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _reactNative.act)(function () {
        result.current.handlePressOut();
      });
      (0, _groups.expect)(result.current.isPressed).toBe(false);
      (0, _groups.expect)(mockSharedValue.set).toHaveBeenCalledWith(0);
      (0, _groups.expect)(mockWithSpring).toHaveBeenCalledWith(0, _groups.expect.any(Object));
    });
    (0, _groups.it)('should handle press out with custom animation config', function () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            animationConfig: {
              release: {
                damping: 20,
                stiffness: 300
              }
            }
          });
        }),
        result = _renderHook7.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressOut();
      });
      (0, _groups.expect)(mockWithSpring).toHaveBeenCalledWith(0, _groups.expect.objectContaining({
        damping: 20,
        stiffness: 300
      }));
    });
  });
  (0, _groups.describe)('Haptic Feedback', function () {
    (0, _groups.it)('should trigger haptic feedback on press in', function () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            enableHaptics: true,
            hapticStyle: 'light'
          });
        }),
        result = _renderHook8.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(mockImpactAsync).toHaveBeenCalledWith('light');
    });
    (0, _groups.it)('should trigger haptic feedback on press out', function () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            enableHaptics: true,
            hapticStyle: 'medium',
            hapticOnRelease: true
          });
        }),
        result = _renderHook9.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressOut();
      });
      (0, _groups.expect)(mockImpactAsync).toHaveBeenCalledWith('medium');
    });
    (0, _groups.it)('should not trigger haptic feedback when disabled', function () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            enableHaptics: false
          });
        }),
        result = _renderHook0.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(mockImpactAsync).not.toHaveBeenCalled();
    });
    (0, _groups.it)('should handle haptic feedback errors gracefully', function () {
      mockImpactAsync.mockRejectedValue(new Error('Haptic not available'));
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            enableHaptics: true
          });
        }),
        result = _renderHook1.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(mockImpactAsync).toHaveBeenCalled();
    });
  });
  (0, _groups.describe)('Animation Styles', function () {
    (0, _groups.it)('should provide animated style with scale and opacity', function () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook10.result;
      (0, _groups.expect)(result.current.animatedStyle).toEqual({
        transform: [{
          scale: 0.8
        }],
        opacity: 0.8
      });
      (0, _groups.expect)(mockInterpolate).toHaveBeenCalledTimes(2);
    });
    (0, _groups.it)('should use custom scale range in animation', function () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            scaleRange: [1, 0.85]
          });
        }),
        result = _renderHook11.result;
      (0, _groups.expect)(mockInterpolate).toHaveBeenCalledWith(_groups.expect.anything(), _groups.expect.arrayContaining([0, 1]), _groups.expect.arrayContaining([1, 0.85]));
    });
    (0, _groups.it)('should use custom opacity range in animation', function () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            opacityRange: [1, 0.6]
          });
        }),
        result = _renderHook12.result;
      (0, _groups.expect)(mockInterpolate).toHaveBeenCalledWith(_groups.expect.anything(), _groups.expect.arrayContaining([0, 1]), _groups.expect.arrayContaining([1, 0.6]));
    });
    (0, _groups.it)('should clamp interpolation values', function () {
      (0, _reactNative.renderHook)(function () {
        return (0, _usePressAnimation.usePressAnimation)();
      });
      (0, _groups.expect)(mockInterpolate).toHaveBeenCalledWith(_groups.expect.anything(), _groups.expect.any(Array), _groups.expect.any(Array), 'clamp');
    });
  });
  (0, _groups.describe)('Press Handlers for Components', function () {
    (0, _groups.it)('should provide pressable props for React Native components', function () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook13.result;
      var pressableProps = result.current.getPressableProps();
      (0, _groups.expect)(pressableProps).toEqual({
        onPressIn: _groups.expect.any(Function),
        onPressOut: _groups.expect.any(Function),
        style: mockAnimatedStyle
      });
    });
    (0, _groups.it)('should merge with existing pressable props', function () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook14.result;
      var existingProps = {
        onPress: _groups.jest.fn(),
        disabled: false
      };
      var pressableProps = result.current.getPressableProps(existingProps);
      (0, _groups.expect)(pressableProps.onPress).toBe(existingProps.onPress);
      (0, _groups.expect)(pressableProps.disabled).toBe(false);
      (0, _groups.expect)(pressableProps.onPressIn).toBeDefined();
      (0, _groups.expect)(pressableProps.onPressOut).toBeDefined();
      (0, _groups.expect)(pressableProps.style).toBeDefined();
    });
    (0, _groups.it)('should handle touch events properly', function () {
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook15.result;
      var pressableProps = result.current.getPressableProps();
      (0, _reactNative.act)(function () {
        pressableProps.onPressIn == null ? void 0 : pressableProps.onPressIn({});
      });
      (0, _groups.expect)(result.current.isPressed).toBe(true);
      (0, _reactNative.act)(function () {
        pressableProps.onPressOut == null ? void 0 : pressableProps.onPressOut({});
      });
      (0, _groups.expect)(result.current.isPressed).toBe(false);
    });
  });
  (0, _groups.describe)('Custom Animation Configurations', function () {
    (0, _groups.it)('should use custom spring config for press in', function () {
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            animationConfig: {
              press: {
                damping: 10,
                stiffness: 500
              }
            }
          });
        }),
        result = _renderHook16.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(mockWithSpring).toHaveBeenCalledWith(1, _groups.expect.objectContaining({
        damping: 10,
        stiffness: 500
      }));
    });
    (0, _groups.it)('should use custom timing config for press out', function () {
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            useTiming: true,
            animationConfig: {
              release: {
                duration: 300
              }
            }
          });
        }),
        result = _renderHook17.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressOut();
      });
      (0, _groups.expect)(mockWithTiming).toHaveBeenCalledWith(0, _groups.expect.objectContaining({
        duration: 300
      }));
    });
    (0, _groups.it)('should support timing animation instead of spring', function () {
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            useTiming: true
          });
        }),
        result = _renderHook18.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressOut();
      });
      (0, _groups.expect)(mockWithTiming).toHaveBeenCalledWith(0, _groups.expect.any(Object));
      (0, _groups.expect)(mockWithSpring).not.toHaveBeenCalled();
    });
  });
  (0, _groups.describe)('State Management', function () {
    (0, _groups.it)('should track pressed state correctly', function () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook19.result;
      (0, _groups.expect)(result.current.isPressed).toBe(false);
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(result.current.isPressed).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.handlePressOut();
      });
      (0, _groups.expect)(result.current.isPressed).toBe(false);
    });
    (0, _groups.it)('should reset state when needed', function () {
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook20.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(result.current.isPressed).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.reset();
      });
      (0, _groups.expect)(result.current.isPressed).toBe(false);
      (0, _groups.expect)(mockSharedValue.set).toHaveBeenCalledWith(0);
    });
    (0, _groups.it)('should provide current animation progress', function () {
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook21.result;
      var progress = result.current.getAnimationProgress();
      (0, _groups.expect)(typeof progress).toBe('number');
      (0, _groups.expect)(progress).toBeGreaterThanOrEqual(0);
      (0, _groups.expect)(progress).toBeLessThanOrEqual(1);
    });
  });
  (0, _groups.describe)('Accessibility Support', function () {
    (0, _groups.it)('should provide accessibility props', function () {
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook22.result;
      var accessibilityProps = result.current.getAccessibilityProps();
      (0, _groups.expect)(accessibilityProps).toEqual({
        accessibilityRole: 'button',
        accessibilityState: {
          pressed: false
        }
      });
    });
    (0, _groups.it)('should update accessibility state when pressed', function () {
      var _accessibilityProps$a;
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook23.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      var accessibilityProps = result.current.getAccessibilityProps();
      (0, _groups.expect)((_accessibilityProps$a = accessibilityProps.accessibilityState) == null ? void 0 : _accessibilityProps$a.pressed).toBe(true);
    });
    (0, _groups.it)('should merge with custom accessibility props', function () {
      var _accessibilityProps$a2;
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook24.result;
      var customProps = {
        accessibilityLabel: 'Custom Button',
        accessibilityHint: 'Press to activate'
      };
      var accessibilityProps = result.current.getAccessibilityProps(customProps);
      (0, _groups.expect)(accessibilityProps.accessibilityLabel).toBe('Custom Button');
      (0, _groups.expect)(accessibilityProps.accessibilityHint).toBe('Press to activate');
      (0, _groups.expect)(accessibilityProps.accessibilityRole).toBe('button');
      (0, _groups.expect)((_accessibilityProps$a2 = accessibilityProps.accessibilityState) == null ? void 0 : _accessibilityProps$a2.pressed).toBe(false);
    });
  });
  (0, _groups.describe)('Performance Optimizations', function () {
    (0, _groups.it)('should memoize animated style', function () {
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook25.result,
        rerender = _renderHook25.rerender;
      var firstStyle = result.current.animatedStyle;
      rerender();
      var secondStyle = result.current.animatedStyle;
      (0, _groups.expect)(firstStyle).toBe(secondStyle);
      (0, _groups.expect)(mockUseAnimatedStyle).toHaveBeenCalledTimes(1);
    });
    (0, _groups.it)('should memoize configuration', function () {
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            scaleRange: [1, 0.9]
          });
        }),
        result = _renderHook26.result,
        rerender = _renderHook26.rerender;
      var firstConfig = result.current.config;
      rerender();
      var secondConfig = result.current.config;
      (0, _groups.expect)(firstConfig).toBe(secondConfig);
    });
    (0, _groups.it)('should not recreate functions on re-render', function () {
      var _renderHook27 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook27.result,
        rerender = _renderHook27.rerender;
      var firstPressIn = result.current.handlePressIn;
      var firstPressOut = result.current.handlePressOut;
      rerender();
      var secondPressIn = result.current.handlePressIn;
      var secondPressOut = result.current.handlePressOut;
      (0, _groups.expect)(firstPressIn).toBe(secondPressIn);
      (0, _groups.expect)(firstPressOut).toBe(secondPressOut);
    });
  });
  (0, _groups.describe)('Error Handling', function () {
    (0, _groups.it)('should handle animation errors gracefully', function () {
      mockWithSpring.mockImplementation(function () {
        throw new Error('Animation error');
      });
      var _renderHook28 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook28.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(result.current.isPressed).toBe(true);
    });
    (0, _groups.it)('should handle invalid configuration values', function () {
      var _renderHook29 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            scaleRange: [1, 1.5],
            opacityRange: [0.5, 1.5]
          });
        }),
        result = _renderHook29.result;
      (0, _groups.expect)(result.current.config.scaleRange).toEqual([1, 1.5]);
      (0, _groups.expect)(result.current.config.opacityRange).toEqual([0.5, 1.5]);
    });
    (0, _groups.it)('should handle rapid press events', function () {
      var _renderHook30 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook30.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
        result.current.handlePressOut();
        result.current.handlePressIn();
        result.current.handlePressOut();
      });
      (0, _groups.expect)(mockWithSpring).toHaveBeenCalledTimes(4);
    });
    (0, _groups.it)('should handle concurrent press events', function () {
      var _renderHook31 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook31.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
        result.current.handlePressIn();
        result.current.handlePressOut();
        result.current.handlePressOut();
      });
      (0, _groups.expect)(result.current.isPressed).toBe(false);
    });
  });
  (0, _groups.describe)('Integration Scenarios', function () {
    (0, _groups.it)('should work with button components', function () {
      var _renderHook32 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook32.result;
      var pressableProps = result.current.getPressableProps({
        onPress: _groups.jest.fn(),
        style: {
          backgroundColor: 'blue'
        }
      });
      (0, _groups.expect)(pressableProps.onPress).toBeDefined();
      (0, _groups.expect)(pressableProps.onPressIn).toBeDefined();
      (0, _groups.expect)(pressableProps.onPressOut).toBeDefined();
      (0, _groups.expect)(pressableProps.style).toEqual(_groups.expect.arrayContaining([{
        backgroundColor: 'blue'
      }, mockAnimatedStyle]));
    });
    (0, _groups.it)('should support different press feedback styles', function () {
      var testCases = [{
        style: 'light',
        expected: 'light'
      }, {
        style: 'medium',
        expected: 'medium'
      }, {
        style: 'heavy',
        expected: 'heavy'
      }];
      testCases.forEach(function (_ref) {
        var style = _ref.style,
          expected = _ref.expected;
        var _renderHook33 = (0, _reactNative.renderHook)(function () {
            return (0, _usePressAnimation.usePressAnimation)({
              enableHaptics: true,
              hapticStyle: style
            });
          }),
          result = _renderHook33.result;
        (0, _reactNative.act)(function () {
          result.current.handlePressIn();
        });
        (0, _groups.expect)(mockImpactAsync).toHaveBeenCalledWith(expected);
      });
    });
  });
  (0, _groups.describe)('Edge Cases', function () {
    (0, _groups.it)('should handle extreme scale ranges', function () {
      var _renderHook34 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            scaleRange: [1, 0.1]
          });
        }),
        result = _renderHook34.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(mockInterpolate).toHaveBeenCalledWith(_groups.expect.anything(), _groups.expect.any(Array), [1, 0.1], 'clamp');
    });
    (0, _groups.it)('should handle zero opacity ranges', function () {
      var _renderHook35 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            opacityRange: [1, 0]
          });
        }),
        result = _renderHook35.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(mockInterpolate).toHaveBeenCalledWith(_groups.expect.anything(), _groups.expect.any(Array), [1, 0], 'clamp');
    });
    (0, _groups.it)('should handle very fast press/release cycles', function () {
      var _renderHook36 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook36.result;
      for (var i = 0; i < 10; i++) {
        (0, _reactNative.act)(function () {
          result.current.handlePressIn();
          result.current.handlePressOut();
        });
      }
      (0, _groups.expect)(mockWithSpring).toHaveBeenCalledTimes(20);
    });
    (0, _groups.it)('should handle component unmounting during animation', function () {
      var _renderHook37 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)();
        }),
        result = _renderHook37.result,
        unmount = _renderHook37.unmount;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(result.current.isPressed).toBe(true);
      unmount();
      (0, _groups.expect)(mockSharedValue.set).toHaveBeenCalledWith(1);
    });
    (0, _groups.it)('should handle invalid animation configurations', function () {
      var _renderHook38 = (0, _reactNative.renderHook)(function () {
          return (0, _usePressAnimation.usePressAnimation)({
            animationConfig: {
              press: {
                damping: 0,
                stiffness: -100
              }
            }
          });
        }),
        result = _renderHook38.result;
      (0, _reactNative.act)(function () {
        result.current.handlePressIn();
      });
      (0, _groups.expect)(mockWithSpring).toHaveBeenCalled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,