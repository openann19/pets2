6d75c9f2ebab0c7125c502b9b1fd6afe
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../../services/logger", function () {
  return {
    logger: {
      error: _globals.jest.fn(),
      info: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useChatScroll = require("../useChatScroll");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
(0, _globals.describe)('useChatScroll', function () {
  var matchId = 'test-match-123';
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    _globals.jest.useFakeTimers();
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with zero offset', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId
          });
        }),
        result = _renderHook.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.initialOffset).toBe(0);
      });
      (0, _globals.expect)(mockAsyncStorage.getItem).toHaveBeenCalledWith(`mobile_chat_scroll_${matchId}`);
    }));
    (0, _globals.it)('should restore saved scroll position', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('500');
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId
          });
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.initialOffset).toBe(500);
      });
    }));
    (0, _globals.it)('should not restore when disabled', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId,
            enabled: false
          });
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.initialOffset).toBe(0);
      });
      (0, _globals.expect)(mockAsyncStorage.getItem).not.toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Scroll Handling', function () {
    (0, _globals.it)('should provide flatListRef', function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId
          });
        }),
        result = _renderHook4.result;
      (0, _globals.expect)(result.current.flatListRef).toBeDefined();
      (0, _globals.expect)(result.current.flatListRef.current).toBeNull();
    });
    (0, _globals.it)('should handle scroll events with debouncing', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId
          });
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        result.current.handleScroll(100);
      });
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(100);
      });
      (0, _globals.expect)(mockAsyncStorage.setItem).not.toHaveBeenCalled();
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(150);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith(`mobile_chat_scroll_${matchId}`, '100');
      });
    }));
    (0, _globals.it)('should debounce multiple scroll events', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId
          });
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.handleScroll(100);
      });
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(100);
      });
      (0, _reactNative.act)(function () {
        result.current.handleScroll(200);
      });
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(100);
      });
      (0, _reactNative.act)(function () {
        result.current.handleScroll(300);
      });
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(250);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledTimes(1);
        (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith(`mobile_chat_scroll_${matchId}`, '300');
      });
    }));
    (0, _globals.it)('should not persist scroll when disabled', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId,
            enabled: false
          });
        }),
        result = _renderHook7.result;
      (0, _reactNative.act)(function () {
        result.current.handleScroll(100);
      });
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(250);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockAsyncStorage.setItem).not.toHaveBeenCalled();
      });
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle invalid saved offset', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('invalid');
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId
          });
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.initialOffset).toBe(0);
      });
    }));
    (0, _globals.it)('should handle negative offsets', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('-100');
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId
          });
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.initialOffset).toBe(0);
      });
    }));
    (0, _globals.it)('should handle storage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId
          });
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.initialOffset).toBe(0);
      });
    }));
    (0, _globals.it)('should work with different matchIds', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: 'match-1'
          });
        }),
        result1 = _renderHook1.result;
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: 'match-2'
          });
        }),
        result2 = _renderHook10.result;
      (0, _reactNative.act)(function () {
        result1.current.handleScroll(100);
      });
      (0, _reactNative.act)(function () {
        result2.current.handleScroll(200);
      });
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(250);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledTimes(2);
      });
    }));
  });
  (0, _globals.describe)('Real-world Scenarios', function () {
    (0, _globals.it)('should simulate complete scroll flow', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId
          });
        }),
        result = _renderHook11.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.initialOffset).toBe(0);
      });
      (0, _reactNative.act)(function () {
        result.current.handleScroll(250);
      });
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(250);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith(`mobile_chat_scroll_${matchId}`, '250');
      });
      mockAsyncStorage.setItem.mockClear();
      mockAsyncStorage.getItem.mockResolvedValue('250');
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScroll.useChatScroll)({
            matchId: matchId
          });
        }),
        result2 = _renderHook12.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result2.current.initialOffset).toBe(250);
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,