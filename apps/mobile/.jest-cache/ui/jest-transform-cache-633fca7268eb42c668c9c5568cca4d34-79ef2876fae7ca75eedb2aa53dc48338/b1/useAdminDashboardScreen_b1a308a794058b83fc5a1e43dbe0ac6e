cf238b6083ec354bfec1648f663bd79e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.useAdminDashboardScreen = useAdminDashboardScreen;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _useErrorHandler2 = require("../useErrorHandler");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useAdminDashboardScreen(_ref) {
  var navigation = _ref.navigation;
  var _useErrorHandler = (0, _useErrorHandler2.useErrorHandler)(),
    handleNetworkError = _useErrorHandler.handleNetworkError,
    handleOfflineError = _useErrorHandler.handleOfflineError;
  var _useState = (0, _react.useState)({
      totalUsers: 0,
      activeUsers: 0,
      totalPets: 0,
      totalMatches: 0,
      pendingVerifications: 0,
      reportedContent: 0,
      systemHealth: "healthy"
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    metrics = _useState2[0],
    setMetrics = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    recentActivity = _useState4[0],
    setRecentActivity = _useState4[1];
  var _useState5 = (0, _react.useState)(true),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isRefreshing = _useState8[0],
    setIsRefreshing = _useState8[1];
  var _useState9 = (0, _react.useState)(null),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    lastUpdated = _useState0[0],
    setLastUpdated = _useState0[1];
  var loadDashboardData = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (options) {
      try {
        if (!(options != null && options.force)) {
          setIsLoading(true);
        }
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 1000);
        });
        var mockMetrics = {
          totalUsers: 15420,
          activeUsers: 12890,
          totalPets: 8760,
          totalMatches: 45230,
          pendingVerifications: 23,
          reportedContent: 7,
          systemHealth: "healthy"
        };
        var mockActivity = [{
          id: "1",
          type: "verification_submitted",
          message: "New pet verification submitted",
          timestamp: new Date(Date.now() - 5 * 60 * 1000),
          priority: "medium"
        }, {
          id: "2",
          type: "report_filed",
          message: "Content report filed",
          timestamp: new Date(Date.now() - 12 * 60 * 1000),
          priority: "high"
        }, {
          id: "3",
          type: "user_joined",
          message: "New user registered",
          timestamp: new Date(Date.now() - 18 * 60 * 1000),
          priority: "low"
        }, {
          id: "4",
          type: "match_made",
          message: "New match created",
          timestamp: new Date(Date.now() - 25 * 60 * 1000),
          priority: "low"
        }];
        setMetrics(mockMetrics);
        setRecentActivity(mockActivity);
        setLastUpdated(new Date());
        _core.logger.info("Admin dashboard data loaded", {
          metrics: mockMetrics,
          activityCount: mockActivity.length
        });
      } catch (error) {
        var err = error instanceof Error ? error : new Error("Failed to load dashboard");
        _core.logger.error("Failed to load admin dashboard", {
          error: err
        });
        handleNetworkError(err, "admin.dashboard.load", function () {
          void loadDashboardData(options);
        });
      } finally {
        setIsLoading(false);
        setIsRefreshing(false);
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [handleNetworkError]);
  (0, _react.useEffect)(function () {
    void loadDashboardData();
  }, [loadDashboardData]);
  var onRefresh = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setIsRefreshing(true);
    yield loadDashboardData({
      force: true
    });
  }), [loadDashboardData]);
  var onNavigateToUsers = (0, _react.useCallback)(function () {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    navigation.navigate("AdminUsers");
  }, [navigation]);
  var onNavigateToChats = (0, _react.useCallback)(function () {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    navigation.navigate("AdminChats");
  }, [navigation]);
  var onNavigateToVerifications = (0, _react.useCallback)(function () {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    navigation.navigate("AdminVerifications");
  }, [navigation]);
  var onNavigateToUploads = (0, _react.useCallback)(function () {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    navigation.navigate("AdminUploads");
  }, [navigation]);
  var onNavigateToAnalytics = (0, _react.useCallback)(function () {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    navigation.navigate("AdminAnalytics");
  }, [navigation]);
  var onNavigateToSecurity = (0, _react.useCallback)(function () {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    navigation.navigate("AdminSecurity");
  }, [navigation]);
  var onNavigateToBilling = (0, _react.useCallback)(function () {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    navigation.navigate("AdminBilling");
  }, [navigation]);
  var quickActions = [{
    id: "moderate_reports",
    title: "Review Reports",
    subtitle: `${metrics.reportedContent} pending`,
    icon: "flag",
    action: function action() {
      _reactNative.Alert.alert("Moderate Reports", "Navigate to reports moderation");
    },
    disabled: metrics.reportedContent === 0
  }, {
    id: "verify_pets",
    title: "Verify Pets",
    subtitle: `${metrics.pendingVerifications} pending`,
    icon: "checkmark-circle",
    action: function action() {
      onNavigateToVerifications();
    },
    disabled: metrics.pendingVerifications === 0
  }, {
    id: "system_health",
    title: "System Health",
    subtitle: metrics.systemHealth === "healthy" ? "All systems normal" : "Check system status",
    icon: metrics.systemHealth === "healthy" ? "shield-checkmark" : "warning",
    action: function action() {
      _reactNative.Alert.alert("System Health", `Status: ${metrics.systemHealth.toUpperCase()}`);
    }
  }, {
    id: "export_data",
    title: "Export Data",
    subtitle: "Download system reports",
    icon: "download",
    action: function action() {
      _reactNative.Alert.alert("Export Data", "Data export feature coming soon");
    }
  }];
  var onQuickAction = (0, _react.useCallback)(function (actionId) {
    var action = quickActions.find(function (a) {
      return a.id === actionId;
    });
    if (action && !action.disabled) {
      void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(function () {});
      action.action();
    }
  }, [quickActions]);
  return {
    metrics: metrics,
    recentActivity: recentActivity,
    quickActions: quickActions,
    isLoading: isLoading,
    isRefreshing: isRefreshing,
    lastUpdated: lastUpdated,
    onRefresh: onRefresh,
    onNavigateToUsers: onNavigateToUsers,
    onNavigateToChats: onNavigateToChats,
    onNavigateToVerifications: onNavigateToVerifications,
    onNavigateToUploads: onNavigateToUploads,
    onNavigateToAnalytics: onNavigateToAnalytics,
    onNavigateToSecurity: onNavigateToSecurity,
    onNavigateToBilling: onNavigateToBilling,
    onQuickAction: onQuickAction
  };
}
var _default = exports.default = useAdminDashboardScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,