285f914a51db87a40d3d46ad71270b93
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSafetyCenter = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var useSafetyCenter = exports.useSafetyCenter = function useSafetyCenter() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    emergencyMode = _useState2[0],
    setEmergencyMode = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isReporting = _useState4[0],
    setIsReporting = _useState4[1];
  var toggleEmergencyMode = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy).catch(function () {});
    var newMode = !emergencyMode;
    _reactNative.Alert.alert(newMode ? "Enable Emergency Mode" : "Disable Emergency Mode", newMode ? "Emergency mode will limit interactions and enhance safety features." : "This will restore normal app functionality.", [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: newMode ? "Enable" : "Disable",
      style: newMode ? "destructive" : "default",
      onPress: function onPress() {
        setEmergencyMode(newMode);
        _reactNative.Alert.alert("Emergency Mode", newMode ? "Emergency mode enabled. Stay safe!" : "Emergency mode disabled");
      }
    }]);
  }), [emergencyMode]);
  var reportUser = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (userId, reason) {
      setIsReporting(true);
      try {
        _core.logger.info("Reporting user", {
          userId: userId,
          reason: reason
        });
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 1000);
        });
        _reactNative.Alert.alert("Report Submitted", "Thank you for your report. We will review it shortly.");
        return true;
      } catch (error) {
        _core.logger.error("Failed to report user", {
          error: error,
          userId: userId
        });
        _reactNative.Alert.alert("Error", "Failed to submit report. Please try again.");
        return false;
      } finally {
        setIsReporting(false);
      }
    });
    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }(), []);
  var contactSupport = (0, _react.useCallback)(function () {
    _reactNative.Alert.alert("Contact Support", "Support contact options coming soon!");
  }, []);
  var viewSafetyGuidelines = (0, _react.useCallback)(function () {
    _reactNative.Alert.alert("Safety Guidelines", "Safety guidelines will be available soon!");
  }, []);
  var navigateToPrivacySettings = (0, _react.useCallback)(function () {
    _reactNative.Alert.alert("Privacy Settings", "Navigate to Privacy Settings screen (coming soon)");
  }, []);
  var setupEmergencyContacts = (0, _react.useCallback)(function () {
    _reactNative.Alert.alert("Emergency Contacts", "Emergency contact setup coming soon");
  }, []);
  var viewSafetyTips = (0, _react.useCallback)(function () {
    _reactNative.Alert.alert("Safety Tips", "Safety tips and guidelines will be available soon");
  }, []);
  var handleSafetyOption = (0, _react.useCallback)(function (option) {
    Haptics.selectionAsync().catch(function () {});
    option.action();
  }, []);
  var safetyOptions = [{
    id: "report",
    title: "Report User",
    description: "Report inappropriate behavior or content",
    icon: "flag-outline",
    color: "#EF4444",
    action: function action() {
      _reactNative.Alert.alert("Report User", "This feature is coming soon. Please contact support for urgent issues.");
    }
  }, {
    id: "block",
    title: "Block & Report",
    description: "Block a user and report their behavior",
    icon: "person-remove-outline",
    color: "#F59E0B",
    action: function action() {
      _core.logger.info("Navigate back to profile for blocking");
    }
  }, {
    id: "privacy",
    title: "Privacy Settings",
    description: "Control who can see your profile and contact you",
    icon: "lock-closed-outline",
    color: "#10B981",
    action: navigateToPrivacySettings
  }, {
    id: "emergency",
    title: "Emergency Contacts",
    description: "Set up emergency contacts for safety",
    icon: "call-outline",
    color: "#8B5CF6",
    action: setupEmergencyContacts
  }, {
    id: "safety-tips",
    title: "Safety Tips",
    description: "Learn about online safety and best practices",
    icon: "shield-checkmark-outline",
    color: "#06B6D4",
    action: viewSafetyTips
  }];
  return {
    emergencyMode: emergencyMode,
    setEmergencyMode: setEmergencyMode,
    toggleEmergencyMode: toggleEmergencyMode,
    safetyOptions: safetyOptions,
    handleSafetyOption: handleSafetyOption,
    reportUser: reportUser,
    contactSupport: contactSupport,
    viewSafetyGuidelines: viewSafetyGuidelines,
    navigateToPrivacySettings: navigateToPrivacySettings,
    setupEmergencyContacts: setupEmergencyContacts,
    viewSafetyTips: viewSafetyTips,
    isReporting: isReporting
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,