200209235d9170fd64441b20685ee095
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLeaderboard = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _core = require("@pawfectmatch/core");
var _LeaderboardService = _interopRequireDefault(require("../../../services/LeaderboardService"));
var useLeaderboard = exports.useLeaderboard = function useLeaderboard() {
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    entries = _useState2[0],
    setEntries = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    categories = _useState4[0],
    setCategories = _useState4[1];
  var _useState5 = (0, _react.useState)("all"),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    selectedCategory = _useState6[0],
    setSelectedCategory = _useState6[1];
  var _useState7 = (0, _react.useState)("weekly"),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    selectedPeriod = _useState8[0],
    setSelectedPeriod = _useState8[1];
  var _useState9 = (0, _react.useState)(null),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    userRank = _useState0[0],
    setUserRank = _useState0[1];
  var _useState1 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    userEntry = _useState10[0],
    setUserEntry = _useState10[1];
  var _useState11 = (0, _react.useState)(true),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    loading = _useState12[0],
    setLoading = _useState12[1];
  var _useState13 = (0, _react.useState)(false),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    refreshing = _useState14[0],
    setRefreshing = _useState14[1];
  var _useState15 = (0, _react.useState)(1),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    page = _useState16[0],
    setPage = _useState16[1];
  var _useState17 = (0, _react.useState)(true),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    hasMore = _useState18[0],
    setHasMore = _useState18[1];
  var _useState19 = (0, _react.useState)(false),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    showFilters = _useState20[0],
    setShowFilters = _useState20[1];
  var loadCategories = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var categoriesData = yield _LeaderboardService.default.getCategories();
      setCategories(categoriesData);
    } catch (error) {
      _core.logger.error("Failed to load categories:", {
        error: error
      });
      throw error;
    }
  }), []);
  var loadLeaderboard = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var pageNum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    try {
      var filter = selectedCategory === "all" ? {
        period: selectedPeriod
      } : {
        category: selectedCategory,
        period: selectedPeriod
      };
      var response = yield _LeaderboardService.default.getLeaderboard(filter, pageNum, 20);
      if (pageNum === 1) {
        setEntries(response.entries);
      } else {
        setEntries(function (prev) {
          return [].concat((0, _toConsumableArray2.default)(prev), (0, _toConsumableArray2.default)(response.entries));
        });
      }
      setHasMore(response.hasMore);
      setPage(pageNum);
    } catch (error) {
      _core.logger.error("Failed to load leaderboard:", {
        error: error
      });
      throw error;
    }
  }), [selectedCategory, selectedPeriod]);
  var loadUserRank = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var rankData = yield _LeaderboardService.default.getUserRank(selectedCategory === "all" ? undefined : selectedCategory);
      setUserRank(rankData.rank);
      setUserEntry(rankData.entry);
    } catch (error) {
      _core.logger.error("Failed to load user rank:", {
        error: error
      });
      throw error;
    }
  }), [selectedCategory]);
  var loadInitialData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      setLoading(true);
      yield Promise.all([loadCategories(), loadLeaderboard(), loadUserRank()]);
    } catch (error) {
      _core.logger.error("Failed to load initial data:", {
        error: error
      });
      throw error;
    } finally {
      setLoading(false);
    }
  }), [loadCategories, loadLeaderboard, loadUserRank]);
  var refreshData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      setRefreshing(true);
      yield Promise.all([loadLeaderboard(1), loadUserRank()]);
    } catch (error) {
      _core.logger.error("Failed to refresh data:", {
        error: error
      });
      throw error;
    } finally {
      setRefreshing(false);
    }
  }), [loadLeaderboard, loadUserRank]);
  var loadMore = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (!hasMore || loading) return;
    try {
      yield loadLeaderboard(page + 1);
    } catch (error) {
      _core.logger.error("Failed to load more entries:", {
        error: error
      });
      throw error;
    }
  }), [hasMore, loading, loadLeaderboard, page]);
  (0, _react.useEffect)(function () {
    void loadInitialData();
  }, []);
  (0, _react.useEffect)(function () {
    if (categories.length > 0) {
      void loadLeaderboard();
      void loadUserRank();
    }
  }, [selectedCategory, selectedPeriod]);
  return {
    entries: entries,
    categories: categories,
    userRank: userRank,
    userEntry: userEntry,
    loading: loading,
    refreshing: refreshing,
    page: page,
    hasMore: hasMore,
    showFilters: showFilters,
    selectedCategory: selectedCategory,
    selectedPeriod: selectedPeriod,
    setSelectedCategory: setSelectedCategory,
    setSelectedPeriod: setSelectedPeriod,
    setShowFilters: setShowFilters,
    refreshData: refreshData,
    loadMore: loadMore,
    loadInitialData: loadInitialData
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,