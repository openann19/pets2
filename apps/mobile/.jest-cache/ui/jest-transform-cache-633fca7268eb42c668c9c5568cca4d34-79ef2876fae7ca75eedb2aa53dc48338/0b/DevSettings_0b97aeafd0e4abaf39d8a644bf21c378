a6a8a1031fe65c28a84345cf45c57a25
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _NativeEventEmitter = _interopRequireDefault(require("../EventEmitter/NativeEventEmitter"));
var _NativeDevSettings = _interopRequireDefault(require("../NativeModules/specs/NativeDevSettings"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var DevSettings = {
  addMenuItem: function addMenuItem(title, handler) {},
  reload: function reload(reason) {},
  onFastRefresh: function onFastRefresh() {}
};
if (__DEV__) {
  var emitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : _NativeDevSettings.default);
  var subscriptions = new Map();
  DevSettings = {
    addMenuItem: function addMenuItem(title, handler) {
      var subscription = subscriptions.get(title);
      if (subscription != null) {
        subscription.remove();
      } else {
        _NativeDevSettings.default.addMenuItem(title);
      }
      subscription = emitter.addListener('didPressMenuItem', function (event) {
        if (event.title === title) {
          handler();
        }
      });
      subscriptions.set(title, subscription);
    },
    reload: function reload(reason) {
      if (_NativeDevSettings.default.reloadWithReason != null) {
        _NativeDevSettings.default.reloadWithReason(reason != null ? reason : 'Uncategorized from JS');
      } else {
        _NativeDevSettings.default.reload();
      }
    },
    onFastRefresh: function onFastRefresh() {
      _NativeDevSettings.default.onFastRefresh == null ? void 0 : _NativeDevSettings.default.onFastRefresh();
    }
  };
}
module.exports = DevSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlRXZlbnRFbWl0dGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfTmF0aXZlRGV2U2V0dGluZ3MiLCJfUGxhdGZvcm0iLCJEZXZTZXR0aW5ncyIsImFkZE1lbnVJdGVtIiwidGl0bGUiLCJoYW5kbGVyIiwicmVsb2FkIiwicmVhc29uIiwib25GYXN0UmVmcmVzaCIsIl9fREVWX18iLCJlbWl0dGVyIiwiTmF0aXZlRXZlbnRFbWl0dGVyIiwiUGxhdGZvcm0iLCJPUyIsIk5hdGl2ZURldlNldHRpbmdzIiwic3Vic2NyaXB0aW9ucyIsIk1hcCIsInN1YnNjcmlwdGlvbiIsImdldCIsInJlbW92ZSIsImFkZExpc3RlbmVyIiwiZXZlbnQiLCJzZXQiLCJyZWxvYWRXaXRoUmVhc29uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkRldlNldHRpbmdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7RXZlbnRTdWJzY3JpcHRpb259IGZyb20gJy4uL3ZlbmRvci9lbWl0dGVyL0V2ZW50RW1pdHRlcic7XG5cbmltcG9ydCBOYXRpdmVFdmVudEVtaXR0ZXIgZnJvbSAnLi4vRXZlbnRFbWl0dGVyL05hdGl2ZUV2ZW50RW1pdHRlcic7XG5pbXBvcnQgTmF0aXZlRGV2U2V0dGluZ3MgZnJvbSAnLi4vTmF0aXZlTW9kdWxlcy9zcGVjcy9OYXRpdmVEZXZTZXR0aW5ncyc7XG5pbXBvcnQgUGxhdGZvcm0gZnJvbSAnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJztcblxubGV0IERldlNldHRpbmdzOiB7XG4gIGFkZE1lbnVJdGVtKHRpdGxlOiBzdHJpbmcsIGhhbmRsZXI6ICgpID0+IG1peGVkKTogdm9pZCxcbiAgcmVsb2FkKHJlYXNvbj86IHN0cmluZyk6IHZvaWQsXG4gIG9uRmFzdFJlZnJlc2goKTogdm9pZCxcbn0gPSB7XG4gIGFkZE1lbnVJdGVtKHRpdGxlOiBzdHJpbmcsIGhhbmRsZXI6ICgpID0+IG1peGVkKTogdm9pZCB7fSxcbiAgcmVsb2FkKHJlYXNvbj86IHN0cmluZyk6IHZvaWQge30sXG4gIG9uRmFzdFJlZnJlc2goKTogdm9pZCB7fSxcbn07XG5cbnR5cGUgRGV2U2V0dGluZ3NFdmVudERlZmluaXRpb25zID0ge1xuICBkaWRQcmVzc01lbnVJdGVtOiBbe3RpdGxlOiBzdHJpbmd9XSxcbn07XG5cbmlmIChfX0RFVl9fKSB7XG4gIGNvbnN0IGVtaXR0ZXIgPSBuZXcgTmF0aXZlRXZlbnRFbWl0dGVyPERldlNldHRpbmdzRXZlbnREZWZpbml0aW9ucz4oXG4gICAgLy8gVDg4NzE1MDYzOiBOYXRpdmVFdmVudEVtaXR0ZXIgb25seSB1c2VkIHRoaXMgcGFyYW1ldGVyIG9uIGlPUy4gTm93IGl0IHVzZXMgaXQgb24gYWxsIHBsYXRmb3Jtcywgc28gdGhpcyBjb2RlIHdhcyBtb2RpZmllZCBhdXRvbWF0aWNhbGx5IHRvIHByZXNlcnZlIGl0cyBiZWhhdmlvclxuICAgIC8vIElmIHlvdSB3YW50IHRvIHVzZSB0aGUgbmF0aXZlIG1vZHVsZSBvbiBvdGhlciBwbGF0Zm9ybXMsIHBsZWFzZSByZW1vdmUgdGhpcyBjb25kaXRpb24gYW5kIHRlc3QgaXRzIGJlaGF2aW9yXG4gICAgUGxhdGZvcm0uT1MgIT09ICdpb3MnID8gbnVsbCA6IE5hdGl2ZURldlNldHRpbmdzLFxuICApO1xuICBjb25zdCBzdWJzY3JpcHRpb25zID0gbmV3IE1hcDxzdHJpbmcsIEV2ZW50U3Vic2NyaXB0aW9uPigpO1xuXG4gIERldlNldHRpbmdzID0ge1xuICAgIGFkZE1lbnVJdGVtKHRpdGxlOiBzdHJpbmcsIGhhbmRsZXI6ICgpID0+IG1peGVkKTogdm9pZCB7XG4gICAgICAvLyBNYWtlIHN1cmUgaXRlbXMgYXJlIG5vdCBhZGRlZCBtdWx0aXBsZSB0aW1lcy4gVGhpcyBjYW5cbiAgICAgIC8vIGhhcHBlbiB3aGVuIGhvdCByZWxvYWRpbmcgdGhlIG1vZHVsZSB0aGF0IHJlZ2lzdGVycyB0aGVcbiAgICAgIC8vIG1lbnUgaXRlbXMuIFRoZSB0aXRsZSBpcyB1c2VkIGFzIHRoZSBpZCB3aGljaCBtZWFucyB3ZVxuICAgICAgLy8gZG9uJ3Qgc3VwcG9ydCBtdWx0aXBsZSBpdGVtcyB3aXRoIHRoZSBzYW1lIG5hbWUuXG4gICAgICBsZXQgc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9ucy5nZXQodGl0bGUpO1xuICAgICAgaWYgKHN1YnNjcmlwdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5yZW1vdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE5hdGl2ZURldlNldHRpbmdzLmFkZE1lbnVJdGVtKHRpdGxlKTtcbiAgICAgIH1cblxuICAgICAgc3Vic2NyaXB0aW9uID0gZW1pdHRlci5hZGRMaXN0ZW5lcignZGlkUHJlc3NNZW51SXRlbScsIGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnRpdGxlID09PSB0aXRsZSkge1xuICAgICAgICAgIGhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzdWJzY3JpcHRpb25zLnNldCh0aXRsZSwgc3Vic2NyaXB0aW9uKTtcbiAgICB9LFxuICAgIHJlbG9hZChyZWFzb24/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgIGlmIChOYXRpdmVEZXZTZXR0aW5ncy5yZWxvYWRXaXRoUmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgTmF0aXZlRGV2U2V0dGluZ3MucmVsb2FkV2l0aFJlYXNvbihyZWFzb24gPz8gJ1VuY2F0ZWdvcml6ZWQgZnJvbSBKUycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgTmF0aXZlRGV2U2V0dGluZ3MucmVsb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkZhc3RSZWZyZXNoKCk6IHZvaWQge1xuICAgICAgTmF0aXZlRGV2U2V0dGluZ3Mub25GYXN0UmVmcmVzaD8uKCk7XG4gICAgfSxcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEZXZTZXR0aW5ncztcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBWUEsSUFBQUEsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFJRyxXQUlILEdBQUc7RUFDRkMsV0FBVyxXQUFYQSxXQUFXQSxDQUFDQyxLQUFhLEVBQUVDLE9BQW9CLEVBQVEsQ0FBQyxDQUFDO0VBQ3pEQyxNQUFNLFdBQU5BLE1BQU1BLENBQUNDLE1BQWUsRUFBUSxDQUFDLENBQUM7RUFDaENDLGFBQWEsV0FBYkEsYUFBYUEsQ0FBQSxFQUFTLENBQUM7QUFDekIsQ0FBQztBQU1ELElBQUlDLE9BQU8sRUFBRTtFQUNYLElBQU1DLE9BQU8sR0FBRyxJQUFJQywyQkFBa0IsQ0FHcENDLGlCQUFRLENBQUNDLEVBQUUsS0FBSyxLQUFLLEdBQUcsSUFBSSxHQUFHQywwQkFDakMsQ0FBQztFQUNELElBQU1DLGFBQWEsR0FBRyxJQUFJQyxHQUFHLENBQTRCLENBQUM7RUFFMURkLFdBQVcsR0FBRztJQUNaQyxXQUFXLFdBQVhBLFdBQVdBLENBQUNDLEtBQWEsRUFBRUMsT0FBb0IsRUFBUTtNQUtyRCxJQUFJWSxZQUFZLEdBQUdGLGFBQWEsQ0FBQ0csR0FBRyxDQUFDZCxLQUFLLENBQUM7TUFDM0MsSUFBSWEsWUFBWSxJQUFJLElBQUksRUFBRTtRQUN4QkEsWUFBWSxDQUFDRSxNQUFNLENBQUMsQ0FBQztNQUN2QixDQUFDLE1BQU07UUFDTEwsMEJBQWlCLENBQUNYLFdBQVcsQ0FBQ0MsS0FBSyxDQUFDO01BQ3RDO01BRUFhLFlBQVksR0FBR1AsT0FBTyxDQUFDVSxXQUFXLENBQUMsa0JBQWtCLEVBQUUsVUFBQUMsS0FBSyxFQUFJO1FBQzlELElBQUlBLEtBQUssQ0FBQ2pCLEtBQUssS0FBS0EsS0FBSyxFQUFFO1VBQ3pCQyxPQUFPLENBQUMsQ0FBQztRQUNYO01BQ0YsQ0FBQyxDQUFDO01BQ0ZVLGFBQWEsQ0FBQ08sR0FBRyxDQUFDbEIsS0FBSyxFQUFFYSxZQUFZLENBQUM7SUFDeEMsQ0FBQztJQUNEWCxNQUFNLFdBQU5BLE1BQU1BLENBQUNDLE1BQWUsRUFBUTtNQUM1QixJQUFJTywwQkFBaUIsQ0FBQ1MsZ0JBQWdCLElBQUksSUFBSSxFQUFFO1FBQzlDVCwwQkFBaUIsQ0FBQ1MsZ0JBQWdCLENBQUNoQixNQUFNLFdBQU5BLE1BQU0sR0FBSSx1QkFBdUIsQ0FBQztNQUN2RSxDQUFDLE1BQU07UUFDTE8sMEJBQWlCLENBQUNSLE1BQU0sQ0FBQyxDQUFDO01BQzVCO0lBQ0YsQ0FBQztJQUNERSxhQUFhLFdBQWJBLGFBQWFBLENBQUEsRUFBUztNQUNwQk0sMEJBQWlCLENBQUNOLGFBQWEsb0JBQS9CTSwwQkFBaUIsQ0FBQ04sYUFBYSxDQUFHLENBQUM7SUFDckM7RUFDRixDQUFDO0FBQ0g7QUFFQWdCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHdkIsV0FBVyIsImlnbm9yZUxpc3QiOltdfQ==