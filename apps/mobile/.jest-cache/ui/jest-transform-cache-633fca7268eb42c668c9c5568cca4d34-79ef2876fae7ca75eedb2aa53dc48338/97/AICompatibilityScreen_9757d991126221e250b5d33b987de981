bed49b21557df0d20310ae53f27f674f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var _api = require("../services/api");
var _logger = require("../services/logger");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var AICompatibilityScreen = function AICompatibilityScreen(_ref) {
  var navigation = _ref.navigation,
    route = _ref.route;
  var _useAuthStore = (0, _core.useAuthStore)(),
    user = _useAuthStore.user;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    pets = _useState2[0],
    setPets = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    loading = _useState4[0],
    setLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    selectedPet1 = _useState6[0],
    setSelectedPet1 = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    selectedPet2 = _useState8[0],
    setSelectedPet2 = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    analyzing = _useState0[0],
    setAnalyzing = _useState0[1];
  var _useState1 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    analysisResult = _useState10[0],
    setAnalysisResult = _useState10[1];
  var _useState11 = (0, _react.useState)(null),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    error = _useState12[0],
    setError = _useState12[1];
  var loadPets = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      setLoading(true);
      setError(null);
      var allPets = yield _api.matchesAPI.getPets();
      var otherPets = allPets;
      if (otherPets && otherPets.length > 0) {
        setPets(otherPets);
      } else {
        setPets([]);
      }
    } catch (err) {
      var errorMessage = err instanceof Error ? err.message : "Failed to load pets";
      setError(errorMessage);
      var errorObj = err instanceof Error ? err : new Error(String(err));
      _logger.logger.error("Failed to load pets", {
        error: errorObj
      });
      setPets([]);
    } finally {
      setLoading(false);
    }
  }), []);
  (0, _react.useEffect)(function () {
    loadPets();
  }, [loadPets]);
  (0, _react.useEffect)(function () {
    var _route$params, _route$params2;
    if (route != null && (_route$params = route.params) != null && _route$params.pet1Id && route != null && (_route$params2 = route.params) != null && _route$params2.pet2Id && pets.length > 0) {
      var pet1 = pets.find(function (p) {
        return p._id === route.params.pet1Id;
      });
      var pet2 = pets.find(function (p) {
        return p._id === route.params.pet2Id;
      });
      if (pet1 && pet2) {
        setSelectedPet1(pet1);
        setSelectedPet2(pet2);
      }
    }
  }, [route == null ? void 0 : route.params, pets]);
  var handlePetSelect = function handlePetSelect(pet) {
    if ((selectedPet1 == null ? void 0 : selectedPet1._id) === pet._id) {
      setSelectedPet1(null);
      setAnalysisResult(null);
    } else if ((selectedPet2 == null ? void 0 : selectedPet2._id) === pet._id) {
      setSelectedPet2(null);
      setAnalysisResult(null);
    } else if (!selectedPet1) {
      setSelectedPet1(pet);
      setAnalysisResult(null);
    } else if (!selectedPet2 && selectedPet1._id !== pet._id && selectedPet1.owner._id !== pet.owner._id) {
      setSelectedPet2(pet);
      setAnalysisResult(null);
    }
  };
  var handleAnalyze = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (!selectedPet1 || !selectedPet2) {
        _reactNative.Alert.alert("Selection Required", "Please select two pets to analyze compatibility.");
        return;
      }
      setAnalyzing(true);
      setError(null);
      try {
        var result = yield _api.api.ai.analyzeCompatibility({
          pet1Id: selectedPet1._id,
          pet2Id: selectedPet2._id
        });
        setAnalysisResult(result);
      } catch (err) {
        var errorMessage = err instanceof Error ? err.message : "Analysis failed";
        setError(errorMessage);
      } finally {
        setAnalyzing(false);
      }
    });
    return function handleAnalyze() {
      return _ref3.apply(this, arguments);
    };
  }();
  var handleReset = function handleReset() {
    setSelectedPet1(null);
    setSelectedPet2(null);
    setAnalysisResult(null);
    setError(null);
  };
  if (error && !pets.length && !loading) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.container,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorText,
        children: "Failed to load pets. Please try again."
      })
    });
  }
  var getCompatibilityLabel = function getCompatibilityLabel(score) {
    if (score >= 90) return "Excellent Match!";
    if (score >= 80) return "Very Good Match";
    if (score >= 70) return "Good Compatibility";
    if (score >= 60) return "Fair Compatibility";
    return "Poor Match";
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        testID: "back-button",
        onPress: function onPress() {
          return navigation.goBack();
        },
        style: styles.backButton,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.backButtonText,
          children: "\u2190"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: "AI Compatibility"
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.subtitle,
      children: "See how two pets would get along"
    }), loading && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.loadingText,
      children: "Loading pets..."
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.selectButton,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.selectButtonText,
        children: "\uD83D\uDC15 Select Two Pets"
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.petSelectionContainer,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.petSlot,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.petSlotLabel,
          children: "Pet 1"
        }), selectedPet1 ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.selectedPet,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.selectedPetName,
            children: selectedPet1.name
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.selectedPetBreed,
            children: selectedPet1.breed
          })]
        }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.emptyPetSlot,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.emptyPetText,
            children: "Select Pet 1"
          })
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.vsText,
        children: "VS"
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.petSlot,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.petSlotLabel,
          children: "Pet 2"
        }), selectedPet2 ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.selectedPet,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.selectedPetName,
            children: selectedPet2.name
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.selectedPetBreed,
            children: selectedPet2.breed
          })]
        }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.emptyPetSlot,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.emptyPetText,
            children: "Select Pet 2"
          })
        })]
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.availablePetsSection,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.sectionTitle,
        children: "Available Pets"
      }), pets.length > 0 ? (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
        data: pets,
        keyExtractor: function keyExtractor(item) {
          return item._id;
        },
        renderItem: function renderItem(_ref4) {
          var item = _ref4.item;
          var isSelected1 = (selectedPet1 == null ? void 0 : selectedPet1._id) === item._id;
          var isSelected2 = (selectedPet2 == null ? void 0 : selectedPet2._id) === item._id;
          var isSelected = isSelected1 || isSelected2;
          return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
            style: [styles.petCard, isSelected && styles.petCardSelected],
            onPress: function onPress() {
              return handlePetSelect(item);
            },
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.petCardName,
              children: item.name
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.petCardBreed,
              children: item.breed
            })]
          });
        },
        scrollEnabled: false
      }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: "No pets available"
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: [styles.analyzeButton, (!selectedPet1 || !selectedPet2 || analyzing) && styles.analyzeButtonDisabled],
      onPress: handleAnalyze,
      disabled: !selectedPet1 || !selectedPet2 || analyzing,
      children: analyzing ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.analyzeButtonText,
        children: "Analyzing..."
      }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.analyzeButtonText,
        children: "Analyze Compatibility"
      })
    }), error && !analyzing && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.errorContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorText,
        children: error
      })
    }), analysisResult && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.resultsSection,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.resultsTitle,
        children: "\uD83C\uDFAF Compatibility Results"
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.scoreContainer,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.scoreValue,
          children: [Math.round(analysisResult.compatibility_score * 100), "/100"]
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.scoreLabel,
          children: getCompatibilityLabel(analysisResult.compatibility_score * 100)
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.analysisText,
        children: analysisResult.ai_analysis
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.breakdownSection,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.breakdownTitle,
          children: "\uD83D\uDCCA Detailed Breakdown"
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.breakdownItem,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.breakdownLabel,
            children: "Personality"
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.breakdownValue,
            children: [Math.round(analysisResult.breakdown.personality_compatibility * 100), "%"]
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.breakdownItem,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.breakdownLabel,
            children: "Lifestyle"
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.breakdownValue,
            children: [Math.round(analysisResult.breakdown.lifestyle_compatibility * 100), "%"]
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.breakdownItem,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.breakdownLabel,
            children: "Activity Level"
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.breakdownValue,
            children: [Math.round(analysisResult.breakdown.activity_compatibility * 100), "%"]
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.breakdownItem,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.breakdownLabel,
            children: "Social Behavior"
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.breakdownValue,
            children: [Math.round(analysisResult.breakdown.social_compatibility * 100), "%"]
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.breakdownItem,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.breakdownLabel,
            children: "Environment"
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.breakdownValue,
            children: [Math.round(analysisResult.breakdown.environment_compatibility * 100), "%"]
          })]
        })]
      }), analysisResult.recommendations && (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.recommendationsSection,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.recommendationsTitle,
          children: "\uD83D\uDCA1 Recommendations"
        }), analysisResult.recommendations.meeting_suggestions && analysisResult.recommendations.meeting_suggestions.length > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.recommendationGroup,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.recommendationGroupTitle,
            children: "\uD83C\uDFAF Meeting Suggestions"
          }), analysisResult.recommendations.meeting_suggestions.map(function (suggestion, index) {
            return (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.recommendationItem,
              children: ["\u2022 ", suggestion]
            }, index);
          })]
        }), analysisResult.recommendations.activity_recommendations && analysisResult.recommendations.activity_recommendations.length > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.recommendationGroup,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.recommendationGroupTitle,
            children: "\uD83C\uDFBE Activity Recommendations"
          }), analysisResult.recommendations.activity_recommendations.map(function (activity, index) {
            return (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.recommendationItem,
              children: ["\u2022 ", activity]
            }, index);
          })]
        }), analysisResult.recommendations.supervision_requirements && analysisResult.recommendations.supervision_requirements.length > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.recommendationGroup,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.recommendationGroupTitle,
            children: "\u26A0\uFE0F Supervision Requirements"
          }), analysisResult.recommendations.supervision_requirements.map(function (requirement, index) {
            return (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.recommendationItem,
              children: ["\u2022 ", requirement]
            }, index);
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.recommendationGroup,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.recommendationGroupTitle,
            children: "Success Probability:"
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.probabilityValue,
            children: [Math.round(analysisResult.recommendations.success_probability * 100), "%"]
          })]
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.newAnalysisButton,
        onPress: handleReset,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.newAnalysisButtonText,
          children: "New Analysis"
        })
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f5f5f5",
    padding: 16
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 8
  },
  backButton: {
    marginRight: 12
  },
  backButtonText: {
    fontSize: 24,
    color: "#007AFF"
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#333"
  },
  subtitle: {
    fontSize: 16,
    color: "#666",
    marginBottom: 24
  },
  loadingText: {
    fontSize: 16,
    color: "#666",
    textAlign: "center",
    marginTop: 40
  },
  selectButton: {
    backgroundColor: "#007AFF",
    padding: 16,
    borderRadius: 12,
    alignItems: "center",
    marginBottom: 24
  },
  selectButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600"
  },
  petSelectionContainer: {
    marginBottom: 24,
    padding: 16,
    backgroundColor: "#fff",
    borderRadius: 12,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-around"
  },
  petSlot: {
    flex: 1,
    alignItems: "center"
  },
  petSlotLabel: {
    fontSize: 12,
    color: "#666",
    marginBottom: 8,
    fontWeight: "600"
  },
  selectedPet: {
    alignItems: "center"
  },
  selectedPetName: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333"
  },
  selectedPetBreed: {
    fontSize: 12,
    color: "#666"
  },
  emptyPetSlot: {
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderWidth: 2,
    borderColor: "#ddd",
    borderStyle: "dashed",
    borderRadius: 8,
    minWidth: 100,
    alignItems: "center"
  },
  emptyPetText: {
    fontSize: 14,
    color: "#999"
  },
  vsText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#666",
    marginHorizontal: 16
  },
  availablePetsSection: {
    marginBottom: 24
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
    marginBottom: 16
  },
  petCard: {
    backgroundColor: "#fff",
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 2,
    borderColor: "#ddd"
  },
  petCardSelected: {
    borderColor: "#007AFF",
    backgroundColor: "#f0f8ff"
  },
  petCardName: {
    fontSize: 16,
    fontWeight: "600",
    color: "#333",
    marginBottom: 4
  },
  petCardBreed: {
    fontSize: 12,
    color: "#666"
  },
  analyzeButton: {
    backgroundColor: "#34C759",
    padding: 16,
    borderRadius: 12,
    alignItems: "center",
    marginBottom: 24
  },
  analyzeButtonDisabled: {
    backgroundColor: "#ccc"
  },
  analyzeButtonText: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "600"
  },
  errorContainer: {
    backgroundColor: "#fff5f5",
    padding: 16,
    borderRadius: 12,
    marginBottom: 24
  },
  errorText: {
    color: "#e53e3e",
    fontSize: 14
  },
  resultsSection: {
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 12,
    marginBottom: 24
  },
  resultsTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 16
  },
  scoreContainer: {
    alignItems: "center",
    marginBottom: 16
  },
  scoreValue: {
    fontSize: 48,
    fontWeight: "bold",
    color: "#007AFF",
    marginBottom: 8
  },
  scoreLabel: {
    fontSize: 18,
    color: "#666"
  },
  analysisText: {
    fontSize: 16,
    color: "#333",
    marginBottom: 20,
    lineHeight: 24
  },
  breakdownSection: {
    marginBottom: 20
  },
  breakdownTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
    marginBottom: 12
  },
  breakdownItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 12,
    paddingBottom: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#eee"
  },
  breakdownLabel: {
    fontSize: 14,
    color: "#666",
    textTransform: "capitalize"
  },
  breakdownValue: {
    fontSize: 14,
    fontWeight: "600",
    color: "#333"
  },
  recommendationsSection: {
    marginTop: 20
  },
  recommendationsTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
    marginBottom: 16
  },
  recommendationGroup: {
    marginBottom: 16
  },
  recommendationGroupTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#333",
    marginBottom: 8
  },
  recommendationItem: {
    fontSize: 14,
    color: "#666",
    marginLeft: 8,
    marginBottom: 4
  },
  probabilityValue: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#007AFF"
  },
  newAnalysisButton: {
    backgroundColor: "#007AFF",
    padding: 16,
    borderRadius: 12,
    alignItems: "center",
    marginTop: 20
  },
  newAnalysisButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600"
  }
});
var _default = exports.default = AICompatibilityScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,