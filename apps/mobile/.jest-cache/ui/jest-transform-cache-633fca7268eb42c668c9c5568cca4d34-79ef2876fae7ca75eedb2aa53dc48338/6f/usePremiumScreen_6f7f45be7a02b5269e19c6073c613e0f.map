{"version":3,"names":["_native","require","_react","_reactNative","_core","_PremiumService","SUBSCRIPTION_TIERS","id","name","price","monthly","yearly","stripePriceId","features","popular","usePremiumScreen","exports","navigation","useNavigation","_useState","useState","_useState2","_slicedToArray2","default","billingPeriod","setBillingPeriod","_useState3","_useState4","selectedTier","setSelectedTier","_useState5","_useState6","isLoading","setIsLoading","handleSubscribe","_ref","_asyncToGenerator2","tierId","tier","find","t","Error","priceId","session","premiumService","createCheckoutSession","url","Linking","openURL","error","logger","Alert","alert","text","_x","apply","arguments","handleGoBack","goBack","availablePlans","getAvailablePlans","subscriptionTiers"],"sources":["usePremiumScreen.ts"],"sourcesContent":["/**\n * usePremiumScreen Hook\n * Manages premium subscription screen state and interactions\n */\nimport { useNavigation } from \"@react-navigation/native\";\nimport { useState } from \"react\";\nimport { Alert, Linking } from \"react-native\";\nimport { logger } from \"@pawfectmatch/core\";\nimport {\n  premiumService,\n  type SubscriptionPlan,\n} from \"../../services/PremiumService\";\n\ntype BillingPeriod = \"monthly\" | \"yearly\";\n\ninterface SubscriptionTier {\n  id: string;\n  name: string;\n  price: {\n    monthly: number;\n    yearly: number;\n  };\n  stripePriceId: {\n    monthly: string;\n    yearly: string;\n  };\n  features: string[];\n  popular?: boolean;\n}\n\ninterface UsePremiumScreenReturn {\n  billingPeriod: BillingPeriod;\n  selectedTier: string;\n  isLoading: boolean;\n  subscriptionTiers: SubscriptionTier[];\n  availablePlans: SubscriptionPlan[];\n  setBillingPeriod: (period: BillingPeriod) => void;\n  setSelectedTier: (tierId: string) => void;\n  handleSubscribe: (tierId: string) => Promise<void>;\n  handleGoBack: () => void;\n}\n\nconst SUBSCRIPTION_TIERS: SubscriptionTier[] = [\n  {\n    id: \"basic\",\n    name: \"Basic\",\n    price: { monthly: 0, yearly: 0 },\n    stripePriceId: {\n      monthly: \"\",\n      yearly: \"\",\n    },\n    features: [\n      \"5 daily swipes\",\n      \"Basic matching\",\n      \"Standard chat\",\n      \"Weather updates\",\n      \"Community support\",\n    ],\n  },\n  {\n    id: \"premium\",\n    name: \"Premium\",\n    price: { monthly: 9.99, yearly: 99.99 },\n    stripePriceId: {\n      monthly: \"price_premium_monthly\",\n      yearly: \"price_premium_yearly\",\n    },\n    features: [\n      \"Unlimited swipes\",\n      \"See who liked you\",\n      \"Advanced filters\",\n      \"Ad-free experience\",\n      \"Advanced matching algorithm\",\n      \"Priority in search results\",\n      \"Read receipts\",\n      \"Video calls\",\n    ],\n    popular: true,\n  },\n  {\n    id: \"ultimate\",\n    name: \"Ultimate\",\n    price: { monthly: 19.99, yearly: 199.99 },\n    stripePriceId: {\n      monthly: \"price_ultimate_monthly\",\n      yearly: \"price_ultimate_yearly\",\n    },\n    features: [\n      \"All Premium features\",\n      \"AI-powered recommendations\",\n      \"Exclusive events access\",\n      \"Priority support\",\n      \"Profile boost\",\n      \"Unlimited Super Likes\",\n      \"Advanced analytics\",\n      \"VIP status\",\n    ],\n  },\n];\n\nexport const usePremiumScreen = (): UsePremiumScreenReturn => {\n  const navigation = useNavigation();\n  const [billingPeriod, setBillingPeriod] = useState<BillingPeriod>(\"monthly\");\n  const [selectedTier, setSelectedTier] = useState<string>(\"premium\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubscribe = async (tierId: string) => {\n    setIsLoading(true);\n    try {\n      const tier = SUBSCRIPTION_TIERS.find((t) => t.id === tierId);\n      if (!tier) {\n        throw new Error(\"Invalid subscription tier\");\n      }\n\n      const priceId = tier.stripePriceId[billingPeriod];\n\n      if (!priceId) {\n        // Free tier - no subscription needed\n        return;\n      }\n\n      // Create checkout session\n      const session = await premiumService.createCheckoutSession(\n        priceId,\n        \"pawfectmatch://subscription/success\",\n        \"pawfectmatch://subscription/cancel\",\n      );\n\n      // Open Stripe checkout in browser\n      if (session?.url) {\n        await Linking.openURL(session.url);\n      }\n    } catch (error) {\n      logger.error(\"Subscription error:\", { error });\n      Alert.alert(\n        \"Subscription Error\",\n        \"Failed to start checkout process. Please try again.\",\n        [{ text: \"OK\" }],\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoBack = () => {\n    navigation.goBack();\n  };\n\n  const availablePlans = premiumService.getAvailablePlans();\n\n  return {\n    billingPeriod,\n    selectedTier,\n    isLoading,\n    subscriptionTiers: SUBSCRIPTION_TIERS,\n    availablePlans,\n    setBillingPeriod,\n    setSelectedTier,\n    handleSubscribe,\n    handleGoBack,\n  };\n};\n"],"mappings":"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","ignoreList":[]}