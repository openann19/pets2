23d116459db13f283af243e1a1f0d1ed
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _vectorIcons = require("@expo/vector-icons");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _unifiedTheme = require("../../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["title", "variant", "size", "loading", "disabled", "icon", "leftIcon", "rightIcon", "style", "textStyle", "onPress"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var SIZE_CONFIGS = {
  sm: {
    paddingHorizontal: _unifiedTheme.Theme.spacing.lg,
    paddingVertical: _unifiedTheme.Theme.spacing.sm,
    fontSize: _unifiedTheme.Theme.typography.fontSize.sm,
    borderRadius: _unifiedTheme.Theme.borderRadius.md,
    minHeight: 36,
    iconSize: 16
  },
  md: {
    paddingHorizontal: _unifiedTheme.Theme.spacing.xl,
    paddingVertical: _unifiedTheme.Theme.spacing.md,
    fontSize: _unifiedTheme.Theme.typography.fontSize.base,
    borderRadius: _unifiedTheme.Theme.borderRadius.lg,
    minHeight: 44,
    iconSize: 20
  },
  lg: {
    paddingHorizontal: _unifiedTheme.Theme.spacing["2xl"],
    paddingVertical: _unifiedTheme.Theme.spacing.lg,
    fontSize: _unifiedTheme.Theme.typography.fontSize.lg,
    borderRadius: _unifiedTheme.Theme.borderRadius.xl,
    minHeight: 52,
    iconSize: 24
  },
  xl: {
    paddingHorizontal: _unifiedTheme.Theme.spacing["3xl"],
    paddingVertical: _unifiedTheme.Theme.spacing.xl,
    fontSize: _unifiedTheme.Theme.typography.fontSize.xl,
    borderRadius: _unifiedTheme.Theme.borderRadius["2xl"],
    minHeight: 60,
    iconSize: 28
  }
};
var BaseButton = (0, _react.forwardRef)(function (_ref, ref) {
  var title = _ref.title,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "primary" : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? "md" : _ref$size,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    icon = _ref.icon,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon,
    style = _ref.style,
    textStyle = _ref.textStyle,
    onPress = _ref.onPress,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var effectiveLeftIcon = icon || leftIcon;
  var sizeConfig = SIZE_CONFIGS[size];
  var isDisabled = disabled || loading;
  var getVariantStyles = function getVariantStyles() {
    var baseStyles = {
      borderRadius: sizeConfig.borderRadius,
      minHeight: sizeConfig.minHeight,
      alignItems: "center",
      justifyContent: "center",
      flexDirection: "row",
      overflow: "hidden"
    };
    switch (variant) {
      case "primary":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: _unifiedTheme.Theme.semantic.interactive.primary
        }, _unifiedTheme.Theme.shadows.depth.sm);
      case "secondary":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: _unifiedTheme.Theme.semantic.interactive.secondary
        }, _unifiedTheme.Theme.shadows.depth.sm);
      case "ghost":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: "transparent"
        });
      case "outline":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: "transparent",
          borderWidth: 2,
          borderColor: _unifiedTheme.Theme.semantic.interactive.primary
        });
      default:
        return baseStyles;
    }
  };
  var getTextStyles = function getTextStyles() {
    var baseTextStyles = {
      fontSize: sizeConfig.fontSize,
      fontWeight: _unifiedTheme.Theme.typography.fontWeight.semibold,
      textAlign: "center"
    };
    switch (variant) {
      case "primary":
      case "secondary":
        return _objectSpread(_objectSpread({}, baseTextStyles), {}, {
          color: _unifiedTheme.Theme.colors.text.inverse
        });
      case "ghost":
      case "outline":
        return _objectSpread(_objectSpread({}, baseTextStyles), {}, {
          color: _unifiedTheme.Theme.semantic.interactive.primary
        });
      default:
        return _objectSpread(_objectSpread({}, baseTextStyles), {}, {
          color: _unifiedTheme.Theme.colors.text.primary
        });
    }
  };
  var getIconColor = function getIconColor() {
    switch (variant) {
      case "primary":
      case "secondary":
        return _unifiedTheme.Theme.colors.text.inverse;
      case "ghost":
      case "outline":
        return _unifiedTheme.Theme.semantic.interactive.primary;
      default:
        return _unifiedTheme.Theme.colors.text.primary;
    }
  };
  var handlePress = function handlePress() {
    if (isDisabled) return;
    onPress == null ? void 0 : onPress();
  };
  var renderContent = function renderContent() {
    if (loading) {
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.loadingContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "small",
          color: getIconColor()
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _reactNative.StyleSheet.flatten([getTextStyles(), {
            marginLeft: _unifiedTheme.Theme.spacing.sm
          }]),
          children: "Loading..."
        })]
      });
    }
    return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [effectiveLeftIcon && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: effectiveLeftIcon,
        size: sizeConfig.iconSize,
        color: getIconColor(),
        style: {
          marginRight: _unifiedTheme.Theme.spacing.sm
        }
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _reactNative.StyleSheet.flatten([getTextStyles(), textStyle]),
        children: title
      }), rightIcon && (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: rightIcon,
        size: sizeConfig.iconSize,
        color: getIconColor(),
        style: {
          marginLeft: _unifiedTheme.Theme.spacing.sm
        }
      })]
    });
  };
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, _objectSpread(_objectSpread({
    ref: ref,
    style: _reactNative.StyleSheet.flatten([getVariantStyles(), {
      paddingHorizontal: sizeConfig.paddingHorizontal,
      paddingVertical: sizeConfig.paddingVertical,
      opacity: isDisabled ? 0.6 : 1
    }, style]),
    onPress: handlePress,
    disabled: isDisabled,
    activeOpacity: 0.8,
    accessibilityRole: "button",
    accessibilityLabel: title,
    accessibilityState: {
      disabled: isDisabled,
      busy: loading
    }
  }, props), {}, {
    children: renderContent()
  }));
});
var styles = _reactNative.StyleSheet.create({
  loadingContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center"
  }
});
BaseButton.displayName = "BaseButton";
var _default = exports.default = BaseButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,