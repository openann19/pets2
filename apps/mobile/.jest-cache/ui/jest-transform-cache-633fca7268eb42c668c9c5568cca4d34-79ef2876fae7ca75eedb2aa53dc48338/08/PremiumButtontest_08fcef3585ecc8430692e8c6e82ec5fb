209e5ec3524bb0f034bb1776df7a2f71
"use strict";

_getJestObj().mock("../../../theme/Provider");
_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(),
    ImpactFeedbackStyle: {
      Light: "light",
      Medium: "medium"
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _PremiumButton = _interopRequireDefault(require("../../Premium/PremiumButton"));
require("../../../theme/Provider");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  navigate: jest.fn()
};
describe("PremiumButton", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    useTheme.mockReturnValue({
      colors: {
        primary: "#7c3aed",
        secondary: "Theme.colors.primary[500]",
        background: "Theme.colors.neutral[0]",
        text: "Theme.colors.neutral[950]"
      },
      isDark: false
    });
  });
  it("renders correctly with default props", function () {
    var _render = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByText("Upgrade")).toBeTruthy();
    expect(getByTestId("premium-button")).toBeTruthy();
  });
  it("renders with custom text", function () {
    var _render2 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation,
        text: "Go Premium"
      })),
      getByText = _render2.getByText;
    expect(getByText("Go Premium")).toBeTruthy();
  });
  it("handles press with haptic feedback", function () {
    var _render3 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render3.getByTestId;
    fireEvent.press(getByTestId("premium-button"));
    expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Medium);
    expect(mockNavigation.navigate).toHaveBeenCalledWith("Premium");
  });
  it("renders with gradient style in light theme", function () {
    var _render4 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render4.getByTestId;
    var button = getByTestId("premium-button");
    expect(button.props.style).toBeDefined();
  });
  it("renders with dark theme style", function () {
    useTheme.mockReturnValue({
      colors: {
        primary: "#7c3aed",
        secondary: "Theme.colors.primary[500]",
        background: "Theme.colors.neutral[800]",
        text: "Theme.colors.neutral[0]"
      },
      isDark: true
    });
    var _render5 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render5.getByTestId;
    var button = getByTestId("premium-button");
    expect(button.props.style).toBeDefined();
  });
  it("renders with custom size", function () {
    var _render6 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation,
        size: "large"
      })),
      getByTestId = _render6.getByTestId;
    var button = getByTestId("premium-button");
    expect(button.props.style).toBeDefined();
  });
  it("renders with icon", function () {
    var _render7 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation,
        showIcon: true
      })),
      getByTestId = _render7.getByTestId;
    expect(getByTestId("premium-icon")).toBeTruthy();
  });
  it("applies custom style when provided", function () {
    var customStyle = {
      marginTop: 20
    };
    var _render8 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation,
        style: customStyle
      })),
      getByTestId = _render8.getByTestId;
    var button = getByTestId("premium-button");
    expect(button.props.style).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,