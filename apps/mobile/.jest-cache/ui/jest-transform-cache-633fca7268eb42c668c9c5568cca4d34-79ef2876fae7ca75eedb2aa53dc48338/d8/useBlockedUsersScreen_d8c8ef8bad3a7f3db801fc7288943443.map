{"version":3,"names":["_react","require","_reactNative","_core","_api","useBlockedUsersScreen","exports","_useState","useState","_useState2","_slicedToArray2","default","blockedUsers","setBlockedUsers","_useState3","_useState4","loading","setLoading","_useState5","_useState6","refreshing","setRefreshing","loadBlockedUsers","useCallback","_asyncToGenerator2","refresh","arguments","length","undefined","users","matchesAPI","getBlockedUsers","transformedUsers","map","user","id","_id","name","firstName","lastName","trim","email","blockedAt","createdAt","Date","toISOString","reason","error","logger","Alert","alert","refreshBlockedUsers","unblockUser","_ref3","userId","prev","filter","info","_x","apply"],"sources":["useBlockedUsersScreen.ts"],"sourcesContent":["/**\n * useBlockedUsersScreen Hook\n * Manages Blocked Users screen state and interactions\n */\nimport { useCallback, useState } from \"react\";\nimport { Alert } from \"react-native\";\nimport { logger } from \"@pawfectmatch/core\";\nimport { matchesAPI } from \"../../services/api\";\n\ninterface BlockedUser {\n  id: string;\n  name: string;\n  email: string;\n  blockedAt: string;\n  reason?: string;\n  avatar?: string;\n}\n\ninterface UseBlockedUsersScreenReturn {\n  blockedUsers: BlockedUser[];\n  loading: boolean;\n  refreshing: boolean;\n  loadBlockedUsers: () => Promise<void>;\n  refreshBlockedUsers: () => Promise<void>;\n  unblockUser: (userId: string) => Promise<void>;\n}\n\nexport const useBlockedUsersScreen = (): UseBlockedUsersScreenReturn => {\n  const [blockedUsers, setBlockedUsers] = useState<BlockedUser[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const loadBlockedUsers = useCallback(async (refresh = false) => {\n    try {\n      if (refresh) setRefreshing(true);\n      else setLoading(true);\n\n      // Fetch real blocked users from API\n      const users = await matchesAPI.getBlockedUsers();\n\n      // Transform API response to BlockedUser format\n      const transformedUsers: BlockedUser[] = users.map((user) => ({\n        id: user._id || user.id || \"\",\n        name: user.firstName && user.lastName \n          ? `${user.firstName} ${user.lastName}`.trim() \n          : user.firstName || \"Unknown\",\n        email: user.email || \"\",\n        blockedAt: user.createdAt || new Date().toISOString(),\n        reason: \"User blocked\",\n      }));\n\n      setBlockedUsers(transformedUsers);\n    } catch (error) {\n      logger.error(\"Failed to load blocked users:\", { error });\n      Alert.alert(\"Error\", \"Failed to load blocked users. Please try again.\");\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  }, []);\n\n  const refreshBlockedUsers = useCallback(async () => {\n    await loadBlockedUsers(true);\n  }, [loadBlockedUsers]);\n\n  const unblockUser = useCallback(async (userId: string) => {\n    try {\n      await matchesAPI.unblockUser(userId);\n      \n      // Remove user from list\n      setBlockedUsers(prev => prev.filter(user => user.id !== userId));\n      \n      logger.info(\"User unblocked successfully\", { userId });\n      Alert.alert(\"Success\", \"User has been unblocked\");\n    } catch (error) {\n      logger.error(\"Failed to unblock user:\", { error, userId });\n      Alert.alert(\"Error\", \"Failed to unblock user. Please try again.\");\n    }\n  }, []);\n\n  return {\n    blockedUsers,\n    loading,\n    refreshing,\n    loadBlockedUsers,\n    refreshBlockedUsers,\n    unblockUser,\n  };\n};\n"],"mappings":"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","ignoreList":[]}