b3d5029e40ce3c931ceecfe8c234e36d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var FormData = function () {
  function FormData() {
    (0, _classCallCheck2.default)(this, FormData);
    this._parts = [];
  }
  return (0, _createClass2.default)(FormData, [{
    key: "append",
    value: function append(key, value) {
      this._parts.push([key, value]);
    }
  }, {
    key: "getAll",
    value: function getAll(key) {
      return this._parts.filter(function (_ref) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 1),
          name = _ref2[0];
        return name === key;
      }).map(function (_ref3) {
        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
          value = _ref4[1];
        return value;
      });
    }
  }, {
    key: "getParts",
    value: function getParts() {
      return this._parts.map(function (_ref5) {
        var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
          name = _ref6[0],
          value = _ref6[1];
        var contentDisposition = 'form-data; name="' + name + '"';
        var headers = {
          'content-disposition': contentDisposition
        };
        if (typeof value === 'object' && !Array.isArray(value) && value) {
          if (typeof value.name === 'string') {
            headers['content-disposition'] += '; filename="' + value.name + '"';
          }
          if (typeof value.type === 'string') {
            headers['content-type'] = value.type;
          }
          return _objectSpread(_objectSpread({}, value), {}, {
            headers: headers,
            fieldName: name
          });
        }
        return {
          string: String(value),
          headers: headers,
          fieldName: name
        };
      });
    }
  }]);
}();
module.exports = FormData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfc2xpY2VkVG9BcnJheTIiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiRm9ybURhdGEiLCJfcGFydHMiLCJrZXkiLCJ2YWx1ZSIsImFwcGVuZCIsImdldEFsbCIsIl9yZWYiLCJfcmVmMiIsIm5hbWUiLCJtYXAiLCJfcmVmMyIsIl9yZWY0IiwiZ2V0UGFydHMiLCJfcmVmNSIsIl9yZWY2IiwiY29udGVudERpc3Bvc2l0aW9uIiwiaGVhZGVycyIsIkFycmF5IiwiaXNBcnJheSIsInR5cGUiLCJmaWVsZE5hbWUiLCJzdHJpbmciLCJTdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRm9ybURhdGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudHlwZSBGb3JtRGF0YVZhbHVlID0gc3RyaW5nIHwge25hbWU/OiBzdHJpbmcsIHR5cGU/OiBzdHJpbmcsIHVyaTogc3RyaW5nfTtcbnR5cGUgRm9ybURhdGFOYW1lVmFsdWVQYWlyID0gW3N0cmluZywgRm9ybURhdGFWYWx1ZV07XG5cbnR5cGUgSGVhZGVycyA9IHtbbmFtZTogc3RyaW5nXTogc3RyaW5nLCAuLi59O1xudHlwZSBGb3JtRGF0YVBhcnQgPVxuICB8IHtcbiAgICAgIHN0cmluZzogc3RyaW5nLFxuICAgICAgaGVhZGVyczogSGVhZGVycyxcbiAgICAgIC4uLlxuICAgIH1cbiAgfCB7XG4gICAgICB1cmk6IHN0cmluZyxcbiAgICAgIGhlYWRlcnM6IEhlYWRlcnMsXG4gICAgICBuYW1lPzogc3RyaW5nLFxuICAgICAgdHlwZT86IHN0cmluZyxcbiAgICAgIC4uLlxuICAgIH07XG5cbi8qKlxuICogUG9seWZpbGwgZm9yIFhNTEh0dHBSZXF1ZXN0MiBGb3JtRGF0YSBBUEksIGFsbG93aW5nIG11bHRpcGFydCBQT1NUIHJlcXVlc3RzXG4gKiB3aXRoIG1peGVkIGRhdGEgKHN0cmluZywgbmF0aXZlIGZpbGVzKSB0byBiZSBzdWJtaXR0ZWQgdmlhIFhNTEh0dHBSZXF1ZXN0LlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICB2YXIgcGhvdG8gPSB7XG4gKiAgICAgdXJpOiB1cmlGcm9tQ2FtZXJhUm9sbCxcbiAqICAgICB0eXBlOiAnaW1hZ2UvanBlZycsXG4gKiAgICAgbmFtZTogJ3Bob3RvLmpwZycsXG4gKiAgIH07XG4gKlxuICogICB2YXIgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xuICogICBib2R5LmFwcGVuZCgnYXV0aFRva2VuJywgJ3NlY3JldCcpO1xuICogICBib2R5LmFwcGVuZCgncGhvdG8nLCBwaG90byk7XG4gKiAgIGJvZHkuYXBwZW5kKCd0aXRsZScsICdBIGJlYXV0aWZ1bCBwaG90byEnKTtcbiAqXG4gKiAgIHhoci5vcGVuKCdQT1NUJywgc2VydmVyVVJMKTtcbiAqICAgeGhyLnNlbmQoYm9keSk7XG4gKi9cbmNsYXNzIEZvcm1EYXRhIHtcbiAgX3BhcnRzOiBBcnJheTxGb3JtRGF0YU5hbWVWYWx1ZVBhaXI+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3BhcnRzID0gW107XG4gIH1cblxuICBhcHBlbmQoa2V5OiBzdHJpbmcsIHZhbHVlOiBGb3JtRGF0YVZhbHVlKSB7XG4gICAgLy8gVGhlIFhNTEh0dHBSZXF1ZXN0IHNwZWMgZG9lc24ndCBzcGVjaWZ5IGlmIGR1cGxpY2F0ZSBrZXlzIGFyZSBhbGxvd2VkLlxuICAgIC8vIE1ETiBzYXlzIHRoYXQgYW55IG5ldyB2YWx1ZXMgc2hvdWxkIGJlIGFwcGVuZGVkIHRvIGV4aXN0aW5nIHZhbHVlcy5cbiAgICAvLyBJbiBhbnkgY2FzZSwgbWFqb3IgYnJvd3NlcnMgYWxsb3cgZHVwbGljYXRlIGtleXMsIHNvIHRoYXQncyB3aGF0IHdlJ2xsIGRvXG4gICAgLy8gdG9vLiBUaGV5J2xsIHNpbXBseSBnZXQgYXBwZW5kZWQgYXMgYWRkaXRpb25hbCBmb3JtIGRhdGEgcGFydHMgaW4gdGhlXG4gICAgLy8gcmVxdWVzdCBib2R5LCBsZWF2aW5nIHRoZSBzZXJ2ZXIgdG8gZGVhbCB3aXRoIHRoZW0uXG4gICAgdGhpcy5fcGFydHMucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9XG5cbiAgZ2V0QWxsKGtleTogc3RyaW5nKTogQXJyYXk8Rm9ybURhdGFWYWx1ZT4ge1xuICAgIHJldHVybiB0aGlzLl9wYXJ0c1xuICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiBuYW1lID09PSBrZXkpXG4gICAgICAubWFwKChbLCB2YWx1ZV0pID0+IHZhbHVlKTtcbiAgfVxuXG4gIGdldFBhcnRzKCk6IEFycmF5PEZvcm1EYXRhUGFydD4ge1xuICAgIHJldHVybiB0aGlzLl9wYXJ0cy5tYXAoKFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnREaXNwb3NpdGlvbiA9ICdmb3JtLWRhdGE7IG5hbWU9XCInICsgbmFtZSArICdcIic7XG5cbiAgICAgIGNvbnN0IGhlYWRlcnM6IEhlYWRlcnMgPSB7J2NvbnRlbnQtZGlzcG9zaXRpb24nOiBjb250ZW50RGlzcG9zaXRpb259O1xuXG4gICAgICAvLyBUaGUgYm9keSBwYXJ0IGlzIGEgXCJibG9iXCIsIHdoaWNoIGluIFJlYWN0IE5hdGl2ZSBqdXN0IG1lYW5zXG4gICAgICAvLyBhbiBvYmplY3Qgd2l0aCBhIGB1cmlgIGF0dHJpYnV0ZS4gT3B0aW9uYWxseSwgaXQgY2FuIGFsc29cbiAgICAgIC8vIGhhdmUgYSBgbmFtZWAgYW5kIGB0eXBlYCBhdHRyaWJ1dGUgdG8gc3BlY2lmeSBmaWxlbmFtZSBhbmRcbiAgICAgIC8vIGNvbnRlbnQgdHlwZSAoY2YuIHdlYiBCbG9iIGludGVyZmFjZS4pXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS5uYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtZGlzcG9zaXRpb24nXSArPSAnOyBmaWxlbmFtZT1cIicgKyB2YWx1ZS5uYW1lICsgJ1wiJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaGVhZGVyc1snY29udGVudC10eXBlJ10gPSB2YWx1ZS50eXBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7Li4udmFsdWUsIGhlYWRlcnMsIGZpZWxkTmFtZTogbmFtZX07XG4gICAgICB9XG4gICAgICAvLyBDb252ZXJ0IG5vbi1vYmplY3QgdmFsdWVzIHRvIHN0cmluZ3MgYXMgcGVyIEZvcm1EYXRhLmFwcGVuZCgpIHNwZWNcbiAgICAgIHJldHVybiB7c3RyaW5nOiBTdHJpbmcodmFsdWUpLCBoZWFkZXJzLCBmaWVsZE5hbWU6IG5hbWV9O1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVs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