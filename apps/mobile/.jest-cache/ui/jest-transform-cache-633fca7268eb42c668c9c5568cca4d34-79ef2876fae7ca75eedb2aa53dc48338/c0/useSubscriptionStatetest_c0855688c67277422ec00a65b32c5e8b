b8739117362d9fc6f3ca347c19a5cd93
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../../services/premiumService", function () {
  return {
    premiumService: {
      createSubscription: _globals.jest.fn(),
      cancelSubscription: _globals.jest.fn(),
      updateSubscription: _globals.jest.fn(),
      getSubscriptionDetails: _globals.jest.fn(),
      getPaymentMethods: _globals.jest.fn(),
      addPaymentMethod: _globals.jest.fn(),
      removePaymentMethod: _globals.jest.fn(),
      getBillingHistory: _globals.jest.fn()
    }
  };
});
_getJestObj().mock('@stripe/stripe-react-native', function () {
  return {
    initPaymentSheet: _globals.jest.fn(),
    presentPaymentSheet: _globals.jest.fn(),
    confirmPaymentSheetPayment: _globals.jest.fn(),
    createToken: _globals.jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useSubscriptionState = require("../useSubscriptionState");
var _premiumService = require("../../../services/premiumService");
var _stripeReactNative = require("@stripe/stripe-react-native");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockPremiumService = _premiumService.premiumService;
var mockStripe = {
  initPaymentSheet: _stripeReactNative.initPaymentSheet,
  presentPaymentSheet: _stripeReactNative.presentPaymentSheet,
  createToken: _stripeReactNative.createToken
};
(0, _globals.describe)('useSubscriptionState', function () {
  var mockSubscriptionDetails = {
    id: 'sub_123',
    status: 'active',
    currentPeriodStart: new Date('2024-01-01'),
    currentPeriodEnd: new Date('2024-02-01'),
    cancelAtPeriodEnd: false,
    plan: {
      id: 'premium_monthly',
      name: 'Premium Monthly',
      amount: 999,
      currency: 'usd',
      interval: 'month'
    },
    paymentMethod: {
      id: 'pm_123',
      type: 'card',
      last4: '4242',
      brand: 'visa'
    }
  };
  var mockPaymentMethods = [{
    id: 'pm_123',
    type: 'card',
    last4: '4242',
    brand: 'visa',
    isDefault: true
  }, {
    id: 'pm_456',
    type: 'card',
    last4: '8888',
    brand: 'mastercard',
    isDefault: false
  }];
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockPremiumService.getSubscriptionDetails.mockResolvedValue(mockSubscriptionDetails);
    mockPremiumService.getPaymentMethods.mockResolvedValue(mockPaymentMethods);
    mockStripe.initPaymentSheet.mockResolvedValue({
      error: null
    });
    mockStripe.presentPaymentSheet.mockResolvedValue({
      error: null,
      paymentOption: {
        label: 'Visa **** 4242'
      }
    });
  });
  (0, _globals.describe)('Initial State', function () {
    (0, _globals.it)('should initialize with default state', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.isLoading).toBe(false);
      (0, _globals.expect)(result.current.subscription).toBeNull();
      (0, _globals.expect)(result.current.paymentMethods).toEqual([]);
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.isProcessing).toBe(false);
    });
    (0, _globals.it)('should load cached subscription data on mount', (0, _asyncToGenerator2.default)(function* () {
      var cachedData = {
        subscription: mockSubscriptionDetails,
        paymentMethods: mockPaymentMethods,
        lastUpdated: Date.now()
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(cachedData));
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.subscription).toEqual(mockSubscriptionDetails);
        (0, _globals.expect)(result.current.paymentMethods).toEqual(mockPaymentMethods);
      });
    }));
  });
  (0, _globals.describe)('Subscription Management', function () {
    (0, _globals.it)('should create subscription successfully', (0, _asyncToGenerator2.default)(function* () {
      var paymentMethodId = 'pm_123';
      var priceId = 'price_premium_monthly';
      mockPremiumService.createSubscription.mockResolvedValue(mockSubscriptionDetails);
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.createSubscription(paymentMethodId, priceId);
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(mockPremiumService.createSubscription).toHaveBeenCalledWith({
        paymentMethodId: paymentMethodId,
        priceId: priceId
      });
      (0, _globals.expect)(result.current.subscription).toEqual(mockSubscriptionDetails);
      (0, _globals.expect)(result.current.isProcessing).toBe(false);
    }));
    (0, _globals.it)('should handle subscription creation errors', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.createSubscription.mockRejectedValue(new Error('Payment failed'));
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.createSubscription('pm_123', 'price_123');
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Payment failed');
      (0, _globals.expect)(result.current.isProcessing).toBe(false);
    }));
    (0, _globals.it)('should cancel subscription successfully', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$subsc;
      var cancelledSubscription = _objectSpread(_objectSpread({}, mockSubscriptionDetails), {}, {
        cancelAtPeriodEnd: true
      });
      mockPremiumService.cancelSubscription.mockResolvedValue(cancelledSubscription);
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        result.current.subscription = mockSubscriptionDetails;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.cancelSubscription();
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$subsc = result.current.subscription) == null ? void 0 : _result$current$subsc.cancelAtPeriodEnd).toBe(true);
    }));
    (0, _globals.it)('should update subscription plan', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$subsc2;
      var updatedSubscription = _objectSpread(_objectSpread({}, mockSubscriptionDetails), {}, {
        plan: _objectSpread(_objectSpread({}, mockSubscriptionDetails.plan), {}, {
          name: 'Premium Yearly'
        })
      });
      mockPremiumService.updateSubscription.mockResolvedValue(updatedSubscription);
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook6.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updateSubscription('new_price_id');
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$subsc2 = result.current.subscription) == null ? void 0 : _result$current$subsc2.plan.name).toBe('Premium Yearly');
    }));
  });
  (0, _globals.describe)('Payment Method Management', function () {
    (0, _globals.it)('should load payment methods', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPaymentMethods();
      }));
      (0, _globals.expect)(result.current.paymentMethods).toEqual(mockPaymentMethods);
      (0, _globals.expect)(mockPremiumService.getPaymentMethods).toHaveBeenCalled();
    }));
    (0, _globals.it)('should add payment method', (0, _asyncToGenerator2.default)(function* () {
      var newPaymentMethod = {
        id: 'pm_new',
        type: 'card',
        last4: '1111',
        brand: 'amex',
        isDefault: false
      };
      var updatedMethods = [].concat(mockPaymentMethods, [newPaymentMethod]);
      mockPremiumService.addPaymentMethod.mockResolvedValue(updatedMethods);
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.addPaymentMethod('token_123');
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(result.current.paymentMethods).toEqual(updatedMethods);
    }));
    (0, _globals.it)('should remove payment method', (0, _asyncToGenerator2.default)(function* () {
      var filteredMethods = mockPaymentMethods.filter(function (pm) {
        return pm.id !== 'pm_456';
      });
      mockPremiumService.removePaymentMethod.mockResolvedValue(filteredMethods);
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.removePaymentMethod('pm_456');
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(result.current.paymentMethods).toEqual(filteredMethods);
    }));
  });
  (0, _globals.describe)('Stripe Payment Sheet', function () {
    (0, _globals.it)('should initialize payment sheet successfully', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.initializePaymentSheet({
          paymentIntentClientSecret: 'pi_secret_123',
          customerEphemeralKeySecret: 'ek_secret_456',
          customerId: 'cus_789'
        });
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(mockStripe.initPaymentSheet).toHaveBeenCalledWith({
        paymentIntentClientSecret: 'pi_secret_123',
        customerEphemeralKeySecret: 'ek_secret_456',
        customerId: 'cus_789',
        merchantDisplayName: 'PawfectMatch'
      });
    }));
    (0, _globals.it)('should present payment sheet', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook1.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var result_sheet = yield result.current.presentPaymentSheet();
        (0, _globals.expect)(result_sheet).toEqual({
          error: null,
          paymentOption: {
            label: 'Visa **** 4242'
          }
        });
      }));
      (0, _globals.expect)(mockStripe.presentPaymentSheet).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle payment sheet errors', (0, _asyncToGenerator2.default)(function* () {
      mockStripe.initPaymentSheet.mockResolvedValue({
        error: {
          message: 'Invalid client secret'
        }
      });
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook10.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.initializePaymentSheet({
          paymentIntentClientSecret: 'invalid_secret'
        });
        (0, _globals.expect)(success).toBe(false);
      }));
    }));
  });
  (0, _globals.describe)('Subscription Status Utilities', function () {
    (0, _globals.beforeEach)(function () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook11.result;
      (0, _reactNative.act)(function () {
        result.current.subscription = mockSubscriptionDetails;
      });
    });
    (0, _globals.it)('should check if subscription is active', function () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook12.result;
      (0, _reactNative.act)(function () {
        result.current.subscription = mockSubscriptionDetails;
      });
      (0, _globals.expect)(result.current.isSubscriptionActive()).toBe(true);
      (0, _globals.expect)(result.current.getSubscriptionStatus()).toBe('active');
    });
    (0, _globals.it)('should check if subscription is cancelled', function () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook13.result;
      (0, _reactNative.act)(function () {
        result.current.subscription = _objectSpread(_objectSpread({}, mockSubscriptionDetails), {}, {
          cancelAtPeriodEnd: true
        });
      });
      (0, _globals.expect)(result.current.isSubscriptionCancelled()).toBe(true);
    });
    (0, _globals.it)('should calculate days until renewal', function () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook14.result;
      (0, _reactNative.act)(function () {
        result.current.subscription = mockSubscriptionDetails;
      });
      var daysLeft = result.current.getDaysUntilRenewal();
      (0, _globals.expect)(daysLeft).toBeGreaterThan(0);
      (0, _globals.expect)(daysLeft).toBeLessThanOrEqual(31);
    });
    (0, _globals.it)('should check if subscription will renew', function () {
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook15.result;
      (0, _reactNative.act)(function () {
        result.current.subscription = mockSubscriptionDetails;
      });
      (0, _globals.expect)(result.current.willSubscriptionRenew()).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.subscription = _objectSpread(_objectSpread({}, mockSubscriptionDetails), {}, {
          cancelAtPeriodEnd: true
        });
      });
      (0, _globals.expect)(result.current.willSubscriptionRenew()).toBe(false);
    });
  });
  (0, _globals.describe)('Billing History', function () {
    (0, _globals.it)('should load billing history', (0, _asyncToGenerator2.default)(function* () {
      var mockBillingHistory = [{
        id: 'inv_123',
        amount: 999,
        currency: 'usd',
        date: new Date('2024-01-01'),
        status: 'paid',
        description: 'Premium Monthly'
      }];
      mockPremiumService.getBillingHistory.mockResolvedValue(mockBillingHistory);
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var history = yield result.current.getBillingHistory();
        (0, _globals.expect)(history).toEqual(mockBillingHistory);
      }));
      (0, _globals.expect)(mockPremiumService.getBillingHistory).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Processing States', function () {
    (0, _globals.it)('should show processing state during operations', (0, _asyncToGenerator2.default)(function* () {
      var resolveOperation;
      var operationPromise = new Promise(function (resolve) {
        resolveOperation = resolve;
      });
      mockPremiumService.createSubscription.mockReturnValue(operationPromise);
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook17.result;
      (0, _reactNative.act)(function () {
        result.current.createSubscription('pm_123', 'price_123');
      });
      (0, _globals.expect)(result.current.isProcessing).toBe(true);
      (0, _reactNative.act)(function () {
        resolveOperation(mockSubscriptionDetails);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isProcessing).toBe(false);
      });
    }));
    (0, _globals.it)('should prevent concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.createSubscription.mockImplementation(function () {
        return new Promise(function (resolve) {
          return setTimeout(function () {
            return resolve(mockSubscriptionDetails);
          }, 100);
        });
      });
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook18.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield Promise.all([result.current.createSubscription('pm_1', 'price_1'), result.current.createSubscription('pm_2', 'price_2'), result.current.createSubscription('pm_3', 'price_3')]);
      }));
      (0, _globals.expect)(mockPremiumService.createSubscription).toHaveBeenCalledTimes(1);
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle network errors', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.getSubscriptionDetails.mockRejectedValue(new Error('Network error'));
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook19.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshSubscription();
      }));
      (0, _globals.expect)(result.current.error).toBe('Network error');
    }));
    (0, _globals.it)('should handle Stripe errors', (0, _asyncToGenerator2.default)(function* () {
      mockStripe.presentPaymentSheet.mockResolvedValue({
        error: {
          message: 'Payment declined'
        }
      });
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook20.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var _result_sheet$error;
        var result_sheet = yield result.current.presentPaymentSheet();
        (0, _globals.expect)((_result_sheet$error = result_sheet.error) == null ? void 0 : _result_sheet$error.message).toBe('Payment declined');
      }));
    }));
    (0, _globals.it)('should handle malformed subscription data', (0, _asyncToGenerator2.default)(function* () {
      var malformedSubscription = {
        id: 'sub_123',
        status: 'active'
      };
      mockPremiumService.getSubscriptionDetails.mockResolvedValue(malformedSubscription);
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook21.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshSubscription();
      }));
      (0, _globals.expect)(result.current.subscription).toBeDefined();
    }));
    (0, _globals.it)('should reset error state on successful operations', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.createSubscription.mockRejectedValueOnce(new Error('First error'));
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook22.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.createSubscription('pm_123', 'price_123');
      }));
      (0, _globals.expect)(result.current.error).toBe('First error');
      mockPremiumService.createSubscription.mockResolvedValueOnce(mockSubscriptionDetails);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.createSubscription('pm_456', 'price_456');
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
    }));
  });
  (0, _globals.describe)('Cache Management', function () {
    (0, _globals.it)('should cache subscription data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook23.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshSubscription();
      }));
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('subscription_state_cache', _globals.expect.any(String));
    }));
    (0, _globals.it)('should clear cache when requested', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook24.result;
      (0, _reactNative.act)(function () {
        result.current.subscription = mockSubscriptionDetails;
        result.current.paymentMethods = mockPaymentMethods;
      });
      (0, _reactNative.act)(function () {
        result.current.clearCache();
      });
      (0, _globals.expect)(result.current.subscription).toBeNull();
      (0, _globals.expect)(result.current.paymentMethods).toEqual([]);
      (0, _globals.expect)(mockAsyncStorage.removeItem).toHaveBeenCalledWith('subscription_state_cache');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty payment methods', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.getPaymentMethods.mockResolvedValue([]);
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook25.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPaymentMethods();
      }));
      (0, _globals.expect)(result.current.paymentMethods).toEqual([]);
    }));
    (0, _globals.it)('should handle subscription without payment method', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$subsc3;
      var subscriptionWithoutPayment = _objectSpread({}, mockSubscriptionDetails);
      delete subscriptionWithoutPayment.paymentMethod;
      mockPremiumService.getSubscriptionDetails.mockResolvedValue(subscriptionWithoutPayment);
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook26.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshSubscription();
      }));
      (0, _globals.expect)((_result$current$subsc3 = result.current.subscription) == null ? void 0 : _result$current$subsc3.paymentMethod).toBeUndefined();
    }));
    (0, _globals.it)('should handle expired subscriptions', (0, _asyncToGenerator2.default)(function* () {
      var expiredSubscription = _objectSpread(_objectSpread({}, mockSubscriptionDetails), {}, {
        currentPeriodEnd: new Date(Date.now() - 86400000),
        status: 'past_due'
      });
      mockPremiumService.getSubscriptionDetails.mockResolvedValue(expiredSubscription);
      var _renderHook27 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook27.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshSubscription();
      }));
      (0, _globals.expect)(result.current.isSubscriptionActive()).toBe(false);
      (0, _globals.expect)(result.current.getSubscriptionStatus()).toBe('past_due');
    }));
    (0, _globals.it)('should handle very long billing cycles', (0, _asyncToGenerator2.default)(function* () {
      var yearlySubscription = _objectSpread(_objectSpread({}, mockSubscriptionDetails), {}, {
        currentPeriodEnd: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)
      });
      mockPremiumService.getSubscriptionDetails.mockResolvedValue(yearlySubscription);
      var _renderHook28 = (0, _reactNative.renderHook)(function () {
          return (0, _useSubscriptionState.useSubscriptionState)();
        }),
        result = _renderHook28.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshSubscription();
      }));
      var daysLeft = result.current.getDaysUntilRenewal();
      (0, _globals.expect)(daysLeft).toBeGreaterThan(300);
      (0, _globals.expect)(daysLeft).toBeLessThanOrEqual(366);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,