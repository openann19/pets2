e216ae51623217d6dde1a636baca8a99
"use strict";

_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    selectionAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    ImpactFeedbackStyle: {
      Heavy: "heavy",
      Light: "light"
    }
  };
});
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useSafetyCenter = require("../useSafetyCenter");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.Alert, "alert");
describe("useSafetyCenter", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it("should initialize with emergency mode disabled", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook.result;
    expect(result.current.emergencyMode).toBe(false);
    expect(result.current.isReporting).toBe(false);
  });
  it("should provide safety options", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook2.result;
    expect(result.current.safetyOptions).toHaveLength(5);
    var optionIds = result.current.safetyOptions.map(function (o) {
      return o.id;
    });
    expect(optionIds).toContain("report");
    expect(optionIds).toContain("block");
    expect(optionIds).toContain("privacy");
    expect(optionIds).toContain("emergency");
    expect(optionIds).toContain("safety-tips");
  });
  it("should show confirmation dialog when toggling emergency mode", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      void result.current.toggleEmergencyMode();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Enable Emergency Mode", "Emergency mode will limit interactions and enhance safety features.", expect.arrayContaining([expect.objectContaining({
      text: "Cancel"
    }), expect.objectContaining({
      text: "Enable"
    })]));
  }));
  it("should enable emergency mode when confirmed", function () {
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var enableButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Enable";
      });
      if (enableButton != null && enableButton.onPress) {
        enableButton.onPress();
      }
    });
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      void result.current.toggleEmergencyMode();
    });
    expect(result.current.emergencyMode).toBe(true);
  });
  it("should disable emergency mode when toggling off", function () {
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var confirmButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Enable" || b.text === "Disable";
      });
      if (confirmButton != null && confirmButton.onPress) {
        confirmButton.onPress();
      }
    });
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      void result.current.toggleEmergencyMode();
    });
    expect(result.current.emergencyMode).toBe(true);
    (0, _reactNative.act)(function () {
      void result.current.toggleEmergencyMode();
    });
    expect(result.current.emergencyMode).toBe(false);
  });
  it("should set emergency mode directly", function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.setEmergencyMode(true);
    });
    expect(result.current.emergencyMode).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.setEmergencyMode(false);
    });
    expect(result.current.emergencyMode).toBe(false);
  });
  it("should report user successfully", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook7.result;
    var reportResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      reportResult = yield result.current.reportUser("user123", "Inappropriate behavior");
    }));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isReporting).toBe(false);
    });
    expect(reportResult).toBe(true);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Report Submitted", "Thank you for your report. We will review it shortly.");
  }));
  it("should set reporting state during report submission", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook8.result;
    var reportPromise = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      return result.current.reportUser("user123", "Spam");
    }));
    expect(result.current.isReporting).toBe(true);
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    yield reportPromise;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isReporting).toBe(false);
    });
  }));
  it("should handle safety option selection", function () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook9.result;
    var reportOption = result.current.safetyOptions.find(function (o) {
      return o.id === "report";
    });
    (0, _reactNative.act)(function () {
      result.current.handleSafetyOption(reportOption);
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Report User", "This feature is coming soon. Please contact support for urgent issues.");
  });
  it("should contact support", function () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook0.result;
    (0, _reactNative.act)(function () {
      result.current.contactSupport();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Contact Support", "Support contact options coming soon!");
  });
  it("should view safety guidelines", function () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook1.result;
    (0, _reactNative.act)(function () {
      result.current.viewSafetyGuidelines();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Safety Guidelines", "Safety guidelines will be available soon!");
  });
  it("should navigate to privacy settings", function () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook10.result;
    (0, _reactNative.act)(function () {
      result.current.navigateToPrivacySettings();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Privacy Settings", "Navigate to Privacy Settings screen (coming soon)");
  });
  it("should setup emergency contacts", function () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook11.result;
    (0, _reactNative.act)(function () {
      result.current.setupEmergencyContacts();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Emergency Contacts", "Emergency contact setup coming soon");
  });
  it("should view safety tips", function () {
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook12.result;
    (0, _reactNative.act)(function () {
      result.current.viewSafetyTips();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Safety Tips", "Safety tips and guidelines will be available soon");
  });
  it("should provide all safety option details", function () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook13.result;
    result.current.safetyOptions.forEach(function (option) {
      expect(option).toHaveProperty("id");
      expect(option).toHaveProperty("title");
      expect(option).toHaveProperty("description");
      expect(option).toHaveProperty("icon");
      expect(option).toHaveProperty("color");
      expect(option).toHaveProperty("action");
      expect(typeof option.action).toBe("function");
    });
  });
  it("should have correct color codes for safety options", function () {
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook14.result;
    var reportOption = result.current.safetyOptions.find(function (o) {
      return o.id === "report";
    });
    expect(reportOption == null ? void 0 : reportOption.color).toBe("#EF4444");
    var privacyOption = result.current.safetyOptions.find(function (o) {
      return o.id === "privacy";
    });
    expect(privacyOption == null ? void 0 : privacyOption.color).toBe("#10B981");
  });
  it("should trigger haptic feedback on emergency mode toggle", (0, _asyncToGenerator2.default)(function* () {
    var Haptics = require("expo-haptics");
    var _renderHook15 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook15.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.toggleEmergencyMode();
    }));
    expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Heavy);
  }));
  it("should trigger haptic feedback on safety option selection", function () {
    var Haptics = require("expo-haptics");
    var _renderHook16 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook16.result;
    var option = result.current.safetyOptions[0];
    (0, _reactNative.act)(function () {
      result.current.handleSafetyOption(option);
    });
    expect(Haptics.selectionAsync).toHaveBeenCalled();
  });
  it("should return stable function references", function () {
    var _renderHook17 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook17.result,
      rerender = _renderHook17.rerender;
    var firstToggleEmergencyMode = result.current.toggleEmergencyMode;
    var firstReportUser = result.current.reportUser;
    var firstContactSupport = result.current.contactSupport;
    var firstHandleSafetyOption = result.current.handleSafetyOption;
    rerender();
    expect(result.current.toggleEmergencyMode).toBe(firstToggleEmergencyMode);
    expect(result.current.reportUser).toBe(firstReportUser);
    expect(result.current.contactSupport).toBe(firstContactSupport);
    expect(result.current.handleSafetyOption).toBe(firstHandleSafetyOption);
  });
  it("should provide privacy settings option action", function () {
    var _renderHook18 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook18.result;
    var privacyOption = result.current.safetyOptions.find(function (o) {
      return o.id === "privacy";
    });
    expect(privacyOption).toBeDefined();
    expect(privacyOption == null ? void 0 : privacyOption.title).toBe("Privacy Settings");
    (0, _reactNative.act)(function () {
      privacyOption == null ? void 0 : privacyOption.action();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalled();
  });
  it("should provide emergency contacts option action", function () {
    var _renderHook19 = (0, _reactNative.renderHook)(function () {
        return (0, _useSafetyCenter.useSafetyCenter)();
      }),
      result = _renderHook19.result;
    var emergencyOption = result.current.safetyOptions.find(function (o) {
      return o.id === "emergency";
    });
    expect(emergencyOption).toBeDefined();
    expect(emergencyOption == null ? void 0 : emergencyOption.title).toBe("Emergency Contacts");
    (0, _reactNative.act)(function () {
      emergencyOption == null ? void 0 : emergencyOption.action();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,