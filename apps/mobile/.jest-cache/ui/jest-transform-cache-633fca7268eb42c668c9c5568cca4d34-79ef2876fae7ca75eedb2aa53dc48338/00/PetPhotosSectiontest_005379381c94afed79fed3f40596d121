ad80bda017386275fabf417465283c98
"use strict";

_getJestObj().mock("../../../hooks/useExtendedTheme", function () {
  return {
    useExtendedColors: function useExtendedColors() {
      return {
        textSecondary: "#6b7280",
        white: "#ffffff",
        error: "#ef4444",
        success: "#10b981"
      };
    }
  };
});
_getJestObj().mock("@expo/vector-icons/Ionicons", function () {
  var _require = require("react-native"),
    View = _require.View;
  return {
    default: function _default(_ref) {
      var name = _ref.name,
        size = _ref.size,
        color = _ref.color,
        testID = _ref.testID;
      return (0, _jsxRuntime.jsx)(View, {
        testID: testID || name,
        accessibleRole: "image"
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _PetPhotosSection = require("../PetPhotosSection");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockOnPickImage = jest.fn();
var mockOnRemovePhoto = jest.fn();
var mockOnSetPrimaryPhoto = jest.fn();
var defaultErrors = {};
describe("PetPhotosSection", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe("Basic Rendering", function () {
    it("should render with empty photos array", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: [],
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText("Photos")).toBeTruthy();
      expect(_reactNative.screen.getByText("Add Photos")).toBeTruthy();
    });
    it("should render add photo button with correct text", function () {
      var photos = [];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText("Add Photos")).toBeTruthy();
    });
    it("should show photo count when photos exist", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText(/Add More Photos/)).toBeTruthy();
    });
  });
  describe("Photo Display", function () {
    it("should display photos when provided", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true
      }, {
        uri: "file://photo2.jpg",
        type: "image/jpeg",
        fileName: "photo2.jpg",
        isPrimary: false
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      var images = _reactNative.screen.getAllByRole("image");
      expect(images.length).toBeGreaterThan(0);
    });
    it("should show primary badge on first photo", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText("Primary")).toBeTruthy();
    });
  });
  describe("Upload Progress", function () {
    it("should show uploading indicator when photo is uploading", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true,
        isUploading: true,
        uploadProgress: {
          uploaded: 50,
          total: 100,
          percentage: 50
        }
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText("Uploading photos...")).toBeTruthy();
    });
    it("should show progress percentage during upload", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true,
        isUploading: true,
        uploadProgress: {
          uploaded: 75,
          total: 100,
          percentage: 75
        }
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText("75%")).toBeTruthy();
    });
    it("should show success indicator after upload completes", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true,
        isUploading: false,
        uploadedUrl: "https://s3.amazonaws.com/bucket/photo.jpg",
        thumbnailUrl: "https://s3.amazonaws.com/bucket/thumbnail.jpg"
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText("Photos")).toBeTruthy();
    });
  });
  describe("Error Handling", function () {
    it("should show error indicator when upload fails", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true,
        isUploading: false,
        error: "Upload failed"
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText(/failed to upload/i)).toBeTruthy();
    });
    it("should show error message when photos field has error", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: [],
        errors: {
          photos: "At least one photo is required"
        },
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText("At least one photo is required")).toBeTruthy();
    });
  });
  describe("Photo Actions", function () {
    it("should disable photo picker when at max capacity", function () {
      var photos = Array(10).fill(null).map(function (_, i) {
        return {
          uri: `file://photo${i}.jpg`,
          type: "image/jpeg",
          fileName: `photo${i}.jpg`,
          isPrimary: i === 0
        };
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      var addButton = _reactNative.screen.getByText(/Add More Photos/);
      expect(addButton).toBeTruthy();
    });
    it("should not show star button for primary photo", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      var starButtons = _reactNative.screen.queryAllByTestId("star");
      expect(starButtons.length).toBe(0);
    });
    it("should not show delete button during upload", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true,
        isUploading: true,
        uploadProgress: {
          uploaded: 50,
          total: 100,
          percentage: 50
        }
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      var trashButtons = _reactNative.screen.queryAllByTestId("trash");
      expect(trashButtons.length).toBe(0);
    });
  });
  describe("Photo Hints", function () {
    it("should display photo upload hints", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: [],
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText(/Upload up to 10 photos/)).toBeTruthy();
      expect(_reactNative.screen.getByText(/First photo will be set as primary/)).toBeTruthy();
    });
  });
  describe("Edge Cases", function () {
    it("should handle photos with uploaded URLs", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true,
        uploadedUrl: "https://s3.amazonaws.com/bucket/photo.jpg",
        thumbnailUrl: "https://s3.amazonaws.com/bucket/thumbnail.webp"
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText("Primary")).toBeTruthy();
    });
    it("should handle multiple photos with different states", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true,
        isUploading: true,
        uploadProgress: {
          uploaded: 50,
          total: 100,
          percentage: 50
        }
      }, {
        uri: "file://photo2.jpg",
        type: "image/jpeg",
        fileName: "photo2.jpg",
        isPrimary: false,
        uploadedUrl: "https://s3.amazonaws.com/bucket/photo2.jpg"
      }, {
        uri: "file://photo3.jpg",
        type: "image/jpeg",
        fileName: "photo3.jpg",
        isPrimary: false,
        error: "Upload failed"
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText("Uploading photos...")).toBeTruthy();
      expect(_reactNative.screen.getByText(/failed to upload/i)).toBeTruthy();
    });
  });
  describe("Accessibility", function () {
    it("should have proper accessibility labels", function () {
      var photos = [{
        uri: "file://photo1.jpg",
        type: "image/jpeg",
        fileName: "photo1.jpg",
        isPrimary: true
      }];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PetPhotosSection.PetPhotosSection, {
        photos: photos,
        errors: defaultErrors,
        onPickImage: mockOnPickImage,
        onRemovePhoto: mockOnRemovePhoto,
        onSetPrimaryPhoto: mockOnSetPrimaryPhoto
      }));
      expect(_reactNative.screen.getByText("Photos")).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,