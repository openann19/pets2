7c7beca38b87dbbb0f31aa5d33da1fd4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._useAnalyticsStore = void 0;
var zustand_1 = require("zustand");
var client_1 = require("../api/client");
exports._useAnalyticsStore = (0, zustand_1.create)()(function (set, get) {
  return {
    userAnalytics: null,
    petAnalytics: {},
    matchAnalytics: {},
    isLoading: false,
    error: null,
    fetchUserAnalytics: function () {
      var _fetchUserAnalytics = (0, _asyncToGenerator2.default)(function* () {
        set({
          isLoading: true,
          error: null
        });
        try {
          var analyticsData = {
            id: 'user-analytics-id',
            timestamp: new Date().toISOString(),
            data: {
              views: 123,
              matches: 45,
              likes: 67
            }
          };
          yield Promise.resolve();
          set({
            userAnalytics: analyticsData,
            isLoading: false
          });
        } catch (_unused) {
          set({
            error: 'Failed to fetch user analytics',
            isLoading: false
          });
        }
      });
      function fetchUserAnalytics() {
        return _fetchUserAnalytics.apply(this, arguments);
      }
      return fetchUserAnalytics;
    }(),
    trackUserEvent: function () {
      var _trackUserEvent = (0, _asyncToGenerator2.default)(function* (eventType, metadata) {
        try {
          yield client_1.apiClient.post('/analytics/user', {
            eventType: eventType,
            metadata: metadata
          });
          var _get = get(),
            fetchUserAnalytics = _get.fetchUserAnalytics;
          yield fetchUserAnalytics();
        } catch (_unused2) {
          set({
            error: 'Failed to track user event'
          });
        }
      });
      function trackUserEvent(_x, _x2) {
        return _trackUserEvent.apply(this, arguments);
      }
      return trackUserEvent;
    }(),
    fetchPetAnalytics: function () {
      var _fetchPetAnalytics = (0, _asyncToGenerator2.default)(function* (petId) {
        set({
          isLoading: true,
          error: null
        });
        try {
          var petData = {
            id: `pet-analytics-${petId}`,
            timestamp: new Date().toISOString(),
            data: {
              views: 89,
              likes: 34,
              superlikes: 12
            }
          };
          yield Promise.resolve();
          set({
            petAnalytics: _objectSpread(_objectSpread({}, get().petAnalytics), {}, (0, _defineProperty2.default)({}, petId, petData)),
            isLoading: false
          });
        } catch (_unused3) {
          set({
            error: `Failed to fetch pet analytics for ${petId}`,
            isLoading: false
          });
        }
      });
      function fetchPetAnalytics(_x3) {
        return _fetchPetAnalytics.apply(this, arguments);
      }
      return fetchPetAnalytics;
    }(),
    trackPetEvent: function () {
      var _trackPetEvent = (0, _asyncToGenerator2.default)(function* (petId, eventType, metadata) {
        try {
          yield client_1.apiClient.post('/analytics/pet', {
            petId: petId,
            eventType: eventType,
            metadata: metadata
          });
          var _get2 = get(),
            fetchPetAnalytics = _get2.fetchPetAnalytics;
          yield fetchPetAnalytics(petId);
        } catch (_unused4) {
          set({
            error: `Failed to track pet event for ${petId}`
          });
        }
      });
      function trackPetEvent(_x4, _x5, _x6) {
        return _trackPetEvent.apply(this, arguments);
      }
      return trackPetEvent;
    }(),
    fetchMatchAnalytics: function () {
      var _fetchMatchAnalytics = (0, _asyncToGenerator2.default)(function* (matchId) {
        set({
          isLoading: true,
          error: null
        });
        try {
          var matchData = {
            id: `match-analytics-${matchId}`,
            timestamp: new Date().toISOString(),
            data: {
              messageCount: 42,
              responseTime: 15,
              lastActivity: new Date().toISOString()
            }
          };
          yield Promise.resolve();
          set({
            matchAnalytics: _objectSpread(_objectSpread({}, get().matchAnalytics), {}, (0, _defineProperty2.default)({}, matchId, matchData)),
            isLoading: false
          });
        } catch (_unused5) {
          set({
            error: `Failed to fetch match analytics for ${matchId}`,
            isLoading: false
          });
        }
      });
      function fetchMatchAnalytics(_x7) {
        return _fetchMatchAnalytics.apply(this, arguments);
      }
      return fetchMatchAnalytics;
    }(),
    trackMatchEvent: function () {
      var _trackMatchEvent = (0, _asyncToGenerator2.default)(function* (matchId, eventType, metadata) {
        try {
          yield client_1.apiClient.post('/analytics/match', {
            matchId: matchId,
            eventType: eventType,
            metadata: metadata
          });
          var _get3 = get(),
            fetchMatchAnalytics = _get3.fetchMatchAnalytics;
          yield fetchMatchAnalytics(matchId);
        } catch (_unused6) {
          set({
            error: `Failed to track match event for ${matchId}`
          });
        }
      });
      function trackMatchEvent(_x8, _x9, _x0) {
        return _trackMatchEvent.apply(this, arguments);
      }
      return trackMatchEvent;
    }()
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,