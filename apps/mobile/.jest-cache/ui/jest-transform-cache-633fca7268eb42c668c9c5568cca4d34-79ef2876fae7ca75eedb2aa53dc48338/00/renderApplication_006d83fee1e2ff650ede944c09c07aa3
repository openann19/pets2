14459048febf50b5a833826b1f4d3343
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderApplication;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _GlobalPerformanceLogger = _interopRequireDefault(require("../Utilities/GlobalPerformanceLogger"));
var _PerformanceLoggerContext = _interopRequireDefault(require("../Utilities/PerformanceLoggerContext"));
var _AppContainer = _interopRequireDefault(require("./AppContainer"));
var _DisplayMode = _interopRequireDefault(require("./DisplayMode"));
var _getCachedComponentWithDebugName = _interopRequireDefault(require("./getCachedComponentWithDebugName"));
var Renderer = _interopRequireWildcard(require("./RendererProxy"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
require("../Utilities/BackHandler");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, fabric, showArchitectureIndicator, scopedPerformanceLogger, isLogBox, debugName, displayMode, useConcurrentRoot, useOffscreen) {
  (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
  var performanceLogger = scopedPerformanceLogger != null ? scopedPerformanceLogger : _GlobalPerformanceLogger.default;
  var renderable = (0, _jsxRuntime.jsx)(_PerformanceLoggerContext.default.Provider, {
    value: performanceLogger,
    children: (0, _jsxRuntime.jsx)(_AppContainer.default, {
      rootTag: rootTag,
      fabric: fabric,
      showArchitectureIndicator: showArchitectureIndicator,
      WrapperComponent: WrapperComponent,
      initialProps: initialProps != null ? initialProps : Object.freeze({}),
      internal_excludeLogBox: isLogBox,
      children: (0, _jsxRuntime.jsx)(RootComponent, _objectSpread(_objectSpread({}, initialProps), {}, {
        rootTag: rootTag
      }))
    })
  });
  if (__DEV__ && debugName) {
    var RootComponentWithMeaningfulName = (0, _getCachedComponentWithDebugName.default)(`${debugName}(RootComponent)`);
    renderable = (0, _jsxRuntime.jsx)(RootComponentWithMeaningfulName, {
      children: renderable
    });
  }
  if (useOffscreen && displayMode != null) {
    var Offscreen = React.unstable_Offscreen;
    renderable = (0, _jsxRuntime.jsx)(Offscreen, {
      mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
      children: renderable
    });
  }
  performanceLogger.startTimespan('renderApplication_React_render');
  performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRoot ? '1' : '0');
  performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
  performanceLogger.setExtra('usedReactProfiler', Renderer.isProfilingRenderer());
  Renderer.renderElement({
    element: renderable,
    rootTag: rootTag,
    useFabric: Boolean(fabric),
    useConcurrentRoot: Boolean(useConcurrentRoot)
  });
  performanceLogger.stopTimespan('renderApplication_React_render');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,