f4b633c1c49e27a21eb48cbef9604360
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdvancedPetFilters = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slider = _interopRequireDefault(require("@react-native-community/slider"));
var _picker = require("@react-native-picker/picker");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _worklet_3235326854101_init_data = {
  code: "function anonymous() {\n  const {\n    interpolate,\n    slideIn,\n    fadeIn\n  } = this._closure;\n  return {\n    transform: [{\n      translateY: interpolate(slideIn.value, [0, 1], [50, 0])\n    }, {\n      scale: interpolate(slideIn.value, [0, 1], [0.95, 1])\n    }],\n    opacity: fadeIn.value\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/filters/AdvancedPetFilters.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"interpolate\",\"slideIn\",\"fadeIn\",\"_closure\",\"transform\",\"translateY\",\"value\",\"scale\",\"opacity\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/filters/AdvancedPetFilters.tsx\"],\"mappings\":\"AAsCyC,SAAAA,UAAA;EAAA;IAAAC,WAAA;IAAAC,OAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC5CC,SAAS,EAAE,CACT;MACEC,UAAU,EAAEL,WAAW,CAACC,OAAO,CAACK,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACxD,CAAC,EACD;MACEC,KAAK,EAAEP,WAAW,CAACC,OAAO,CAACK,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;IACrD,CAAC,CACF;IACDE,OAAO,EAAEN,MAAM,CAACI;EAClB,CAAC;AAAA\",\"ignoreList\":[]}"
};
var AdvancedPetFilters = exports.AdvancedPetFilters = function AdvancedPetFilters(_ref) {
  var _value$minAge, _value$maxAge, _value$maxDistance;
  var value = _ref.value,
    onChange = _ref.onChange,
    onReset = _ref.onReset,
    onApply = _ref.onApply;
  var slideIn = (0, _reactNativeReanimated.useSharedValue)(0);
  var fadeIn = (0, _reactNativeReanimated.useSharedValue)(0);
  _react.default.useEffect(function () {
    slideIn.value = (0, _reactNativeReanimated.withSpring)(1, {
      stiffness: 300,
      damping: 30
    });
    fadeIn.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 500
    });
  }, [slideIn, fadeIn]);
  var animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -4, -27];
    var _f = function _f() {
      return {
        transform: [{
          translateY: (0, _reactNativeReanimated.interpolate)(slideIn.value, [0, 1], [50, 0])
        }, {
          scale: (0, _reactNativeReanimated.interpolate)(slideIn.value, [0, 1], [0.95, 1])
        }],
        opacity: fadeIn.value
      };
    };
    _f._closure = {
      interpolate: _reactNativeReanimated.interpolate,
      slideIn: slideIn,
      fadeIn: fadeIn
    };
    _f.__initData = _worklet_3235326854101_init_data;
    _f.__workletHash = 3235326854101;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var handleChange = function handleChange(field, val) {
    onChange(_objectSpread(_objectSpread({}, value), {}, (0, _defineProperty2.default)({}, field, val)));
    Haptics.selectionAsync();
  };
  var handleReset = function handleReset() {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    onReset == null ? void 0 : onReset();
  };
  var handleApply = function handleApply() {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    onApply == null ? void 0 : onApply();
  };
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    style: animatedStyle,
    children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
      colors: ["#fceabb", "#f8b500", "Theme.colors.primary[500]", "#a21caf"],
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: "Advanced Filters"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.label,
        children: "Species"
      }), (0, _jsxRuntime.jsxs)(_picker.Picker, {
        selectedValue: value.species || "",
        onValueChange: function onValueChange(v) {
          handleChange("species", v || undefined);
        },
        style: styles.picker,
        accessibilityLabel: "Species",
        children: [(0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Any",
          value: undefined
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Dog",
          value: "dog"
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Cat",
          value: "cat"
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Bird",
          value: "bird"
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Rabbit",
          value: "rabbit"
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Other",
          value: "other"
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.label,
        children: "Min Age"
      }), (0, _jsxRuntime.jsx)(_slider.default, {
        minimumValue: 0,
        maximumValue: 20,
        step: 1,
        value: (_value$minAge = value.minAge) != null ? _value$minAge : 0,
        onValueChange: function onValueChange(v) {
          handleChange("minAge", v);
        },
        style: styles.slider,
        accessibilityLabel: "Minimum Age"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.label,
        children: "Max Age"
      }), (0, _jsxRuntime.jsx)(_slider.default, {
        minimumValue: 0,
        maximumValue: 20,
        step: 1,
        value: (_value$maxAge = value.maxAge) != null ? _value$maxAge : 20,
        onValueChange: function onValueChange(v) {
          handleChange("maxAge", v);
        },
        style: styles.slider,
        accessibilityLabel: "Maximum Age"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.label,
        children: "Size"
      }), (0, _jsxRuntime.jsxs)(_picker.Picker, {
        selectedValue: value.size || "",
        onValueChange: function onValueChange(v) {
          handleChange("size", v || undefined);
        },
        style: styles.picker,
        accessibilityLabel: "Size",
        children: [(0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Any",
          value: undefined
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Small",
          value: "small"
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Medium",
          value: "medium"
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Large",
          value: "large"
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Extra Large",
          value: "extra-large"
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.label,
        children: "Intent"
      }), (0, _jsxRuntime.jsxs)(_picker.Picker, {
        selectedValue: value.intent || "",
        onValueChange: function onValueChange(v) {
          handleChange("intent", v || undefined);
        },
        style: styles.picker,
        accessibilityLabel: "Intent",
        children: [(0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Any",
          value: undefined
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Adoption",
          value: "adoption"
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Mating",
          value: "mating"
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "Playdate",
          value: "playdate"
        }), (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: "All",
          value: "all"
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.label,
        children: "Max Distance (km)"
      }), (0, _jsxRuntime.jsx)(_slider.default, {
        minimumValue: 1,
        maximumValue: 100,
        step: 1,
        value: (_value$maxDistance = value.maxDistance) != null ? _value$maxDistance : 10,
        onValueChange: function onValueChange(v) {
          handleChange("maxDistance", v);
        },
        style: styles.slider,
        accessibilityLabel: "Maximum Distance"
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.buttonRow,
        children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: styles.resetButton,
          onPress: handleReset,
          accessibilityLabel: "Reset Filters",
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.resetText,
            children: "Reset"
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: styles.applyButton,
          onPress: handleApply,
          accessibilityLabel: "Apply Filters",
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.applyText,
            children: "Apply"
          })
        })]
      })]
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 24,
    padding: 20,
    margin: 16,
    shadowColor: "Theme.colors.primary[500]",
    shadowOpacity: 0.15,
    shadowRadius: 16,
    elevation: 8
  },
  title: {
    fontSize: 22,
    fontWeight: "bold",
    color: "#a21caf",
    marginBottom: 12,
    textAlign: "center"
  },
  label: {
    fontSize: 16,
    fontWeight: "600",
    color: "#6b21a8",
    marginTop: 12
  },
  picker: {
    backgroundColor: "Theme.colors.neutral[0]",
    borderRadius: 8,
    marginVertical: 4
  },
  slider: {
    marginVertical: 8
  },
  buttonRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20
  },
  resetButton: {
    backgroundColor: "#f3e8ff",
    borderRadius: 12,
    paddingVertical: 10,
    paddingHorizontal: 24
  },
  resetText: {
    color: "#a21caf",
    fontWeight: "bold",
    fontSize: 16
  },
  applyButton: {
    backgroundColor: "Theme.colors.primary[500]",
    borderRadius: 12,
    paddingVertical: 10,
    paddingHorizontal: 24
  },
  applyText: {
    color: "Theme.colors.neutral[0]",
    fontWeight: "bold",
    fontSize: 16
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,