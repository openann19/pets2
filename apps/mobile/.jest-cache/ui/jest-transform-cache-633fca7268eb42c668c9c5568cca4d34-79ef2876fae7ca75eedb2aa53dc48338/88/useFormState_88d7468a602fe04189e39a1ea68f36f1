5c02296369275ed3d2a96cc51c372b9d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFormState = useFormState;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _logger = require("../../services/logger");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useFormState(_ref) {
  var initialValues = _ref.initialValues,
    validateFn = _ref.validate;
  var _useState = (0, _react.useState)(initialValues),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    values = _useState2[0],
    setValuesState = _useState2[1];
  var _useState3 = (0, _react.useState)({}),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    errors = _useState4[0],
    setErrors = _useState4[1];
  var _useState5 = (0, _react.useState)({}),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    touched = _useState6[0],
    setTouched = _useState6[1];
  var setValue = (0, _react.useCallback)(function (name, value) {
    setValuesState(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, name, value));
    });
    setErrors(function (prev) {
      var newErrors = _objectSpread({}, prev);
      if (newErrors[name]) {
        delete newErrors[name];
      }
      return newErrors;
    });
  }, []);
  var setValues = (0, _react.useCallback)(function (newValues) {
    setValuesState(function (prev) {
      return _objectSpread(_objectSpread({}, prev), newValues);
    });
  }, []);
  var setError = (0, _react.useCallback)(function (name, error) {
    setErrors(function (prev) {
      if (error) {
        return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, name, error));
      }
      var newErrors = _objectSpread({}, prev);
      delete newErrors[name];
      return newErrors;
    });
  }, []);
  var setFieldTouched = (0, _react.useCallback)(function (name) {
    var touchedValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    setTouched(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, name, touchedValue));
    });
  }, []);
  var validate = (0, _react.useCallback)(function () {
    if (!validateFn) return true;
    var validationErrors = validateFn(values);
    setErrors(validationErrors);
    var allTouched = {};
    Object.keys(values).forEach(function (key) {
      allTouched[key] = true;
    });
    setTouched(allTouched);
    return Object.keys(validationErrors).length === 0;
  }, [values, validateFn]);
  var reset = (0, _react.useCallback)(function () {
    setValuesState(initialValues);
    setErrors({});
    setTouched({});
  }, [initialValues]);
  var handleSubmit = (0, _react.useCallback)(function (onSubmit) {
    return function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* (e) {
        e == null ? void 0 : e.preventDefault == null ? void 0 : e.preventDefault();
        if (!validate()) {
          return;
        }
        try {
          yield onSubmit(values);
        } catch (error) {
          var errorObj = error instanceof Error ? error : new Error('Form submission failed');
          _logger.logger.error("Form submission error", {
            error: errorObj
          });
        }
      });
      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();
  }, [values, validate]);
  var isValid = Object.keys(errors).length === 0;
  return {
    values: values,
    errors: errors,
    touched: touched,
    isValid: isValid,
    setValue: setValue,
    setValues: setValues,
    setError: setError,
    setFieldTouched: setFieldTouched,
    validate: validate,
    reset: reset,
    handleSubmit: handleSubmit
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,