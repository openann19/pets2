ad3d2a530afddae877e791c35e7e9004
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSwipeToReply = useSwipeToReply;
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = require("react-native-reanimated");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var _worklet_12663837778096_init_data = {
  code: "function anonymous(e) {\n  const {\n    maxPull,\n    x,\n    threshold,\n    onProgress,\n    runOnJS,\n    crossed,\n    vibrate\n  } = this._closure;\n  const nx = Math.min(Math.max(e.translationX, 0), maxPull);\n  x.value = nx;\n  const p = Math.min(1, nx / threshold);\n  if (onProgress) runOnJS(onProgress)(p);\n  if (nx >= threshold && !crossed.value) {\n    crossed.value = true;\n    runOnJS(vibrate)();\n  }\n  if (nx < threshold && crossed.value) {\n    crossed.value = false;\n  }\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/hooks/useSwipeToReply.ts",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"e\",\"maxPull\",\"x\",\"threshold\",\"onProgress\",\"runOnJS\",\"crossed\",\"vibrate\",\"_closure\",\"nx\",\"Math\",\"min\",\"max\",\"translationX\",\"value\",\"p\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/hooks/useSwipeToReply.ts\"],\"mappings\":\"AAmDe,SAACA,SAAKA,CAAAC,CAAA;EAAA;IAAAC,OAAA;IAAAC,CAAA;IAAAC,SAAA;IAAAC,UAAA;IAAAC,OAAA;IAAAC,OAAA;IAAAC;EAAA,SAAAC,QAAA;EACf,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACZ,CAAC,CAACa,YAAY,EAAE,CAAC,CAAC,EAAEZ,OAAO,CAAC;EACzDC,CAAC,CAACY,KAAK,GAAGL,EAAE;EACZ,MAAMM,CAAC,GAAGL,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,EAAE,GAAGN,SAAS,CAAC;EACrC,IAAIC,UAAU,EAAEC,OAAO,CAACD,UAAU,CAAC,CAACW,CAAC,CAAC;EACtC,IAAIN,EAAE,IAAIN,SAAS,IAAI,CAACG,OAAO,CAACQ,KAAK,EAAE;IACrCR,OAAO,CAACQ,KAAK,GAAG,IAAI;IACpBT,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC;EACpB;EACA,IAAIE,EAAE,GAAGN,SAAS,IAAIG,OAAO,CAACQ,KAAK,EAAE;IACnCR,OAAO,CAACQ,KAAK,GAAG,KAAK;EACvB;AACF\",\"ignoreList\":[]}"
};
var _worklet_14583680667473_init_data = {
  code: "function anonymous() {\n  const {\n    x,\n    threshold,\n    runOnJS,\n    onReply,\n    payload,\n    withSpring,\n    onProgress,\n    crossed\n  } = this._closure;\n  const didTrigger = x.value >= threshold;\n  if (didTrigger) {\n    runOnJS(onReply)(payload);\n  }\n  x.value = withSpring(0, {\n    damping: 16,\n    stiffness: 300\n  });\n  if (onProgress) runOnJS(onProgress)(0);\n  crossed.value = false;\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/hooks/useSwipeToReply.ts",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"x\",\"threshold\",\"runOnJS\",\"onReply\",\"payload\",\"withSpring\",\"onProgress\",\"crossed\",\"_closure\",\"didTrigger\",\"value\",\"damping\",\"stiffness\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/hooks/useSwipeToReply.ts\"],\"mappings\":\"AAgEW,SAAAA,SAAMA,CAAA;EAAA;IAAAC,CAAA;IAAAC,SAAA;IAAAC,OAAA;IAAAC,OAAA;IAAAC,OAAA;IAAAC,UAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EACX,MAAMC,UAAU,GAAGT,CAAC,CAACU,KAAK,IAAIT,SAAS;EACvC,IAAIQ,UAAU,EAAE;IACdP,OAAO,CAACC,OAAO,CAAC,CAACC,OAAO,CAAC;EAC3B;EACAJ,CAAC,CAACU,KAAK,GAAGL,UAAU,CAAC,CAAC,EAAE;IAAEM,OAAO,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAI,CAAC,CAAC;EACxD,IAAIN,UAAU,EAAEJ,OAAO,CAACI,UAAU,CAAC,CAAC,CAAC,CAAC;EACtCC,OAAO,CAACG,KAAK,GAAG,KAAK;AACvB\",\"ignoreList\":[]}"
};
var _worklet_5275432537208_init_data = {
  code: "function anonymous() {\n  const {\n    x\n  } = this._closure;\n  return {\n    transform: [{\n      translateX: x.value\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/hooks/useSwipeToReply.ts",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"x\",\"_closure\",\"transform\",\"translateX\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/hooks/useSwipeToReply.ts\"],\"mappings\":\"AA0EuC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC1CC,SAAS,EAAE,CAAC;MAAEC,UAAU,EAAEH,CAAC,CAACI;IAAM,CAAC;EACrC,CAAC;AAAA\",\"ignoreList\":[]}"
};
function useSwipeToReply(_ref) {
  var _ref$enabled = _ref.enabled,
    enabled = _ref$enabled === void 0 ? true : _ref$enabled,
    _ref$threshold = _ref.threshold,
    threshold = _ref$threshold === void 0 ? 56 : _ref$threshold,
    _ref$maxPull = _ref.maxPull,
    maxPull = _ref$maxPull === void 0 ? 84 : _ref$maxPull,
    onReply = _ref.onReply,
    payload = _ref.payload,
    onProgress = _ref.onProgress;
  var x = (0, _reactNativeReanimated.useSharedValue)(0);
  var crossed = (0, _reactNativeReanimated.useSharedValue)(false);
  var vibrate = function vibrate() {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
  };
  var gesture = _reactNativeGestureHandler.Gesture.Pan().enabled(enabled).activeOffsetX([6, 9999]).failOffsetY([16, -16]).onUpdate(function () {
    var _e = [new global.Error(), -8, -27];
    var _f = function _f(e) {
      var nx = Math.min(Math.max(e.translationX, 0), maxPull);
      x.value = nx;
      var p = Math.min(1, nx / threshold);
      if (onProgress) (0, _reactNativeReanimated.runOnJS)(onProgress)(p);
      if (nx >= threshold && !crossed.value) {
        crossed.value = true;
        (0, _reactNativeReanimated.runOnJS)(vibrate)();
      }
      if (nx < threshold && crossed.value) {
        crossed.value = false;
      }
    };
    _f._closure = {
      maxPull: maxPull,
      x: x,
      threshold: threshold,
      onProgress: onProgress,
      runOnJS: _reactNativeReanimated.runOnJS,
      crossed: crossed,
      vibrate: vibrate
    };
    _f.__initData = _worklet_12663837778096_init_data;
    _f.__workletHash = 12663837778096;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onEnd(function () {
    var _e = [new global.Error(), -9, -27];
    var _f = function _f() {
      var didTrigger = x.value >= threshold;
      if (didTrigger) {
        (0, _reactNativeReanimated.runOnJS)(onReply)(payload);
      }
      x.value = (0, _reactNativeReanimated.withSpring)(0, {
        damping: 16,
        stiffness: 300
      });
      if (onProgress) (0, _reactNativeReanimated.runOnJS)(onProgress)(0);
      crossed.value = false;
    };
    _f._closure = {
      x: x,
      threshold: threshold,
      runOnJS: _reactNativeReanimated.runOnJS,
      onReply: onReply,
      payload: payload,
      withSpring: _reactNativeReanimated.withSpring,
      onProgress: onProgress,
      crossed: crossed
    };
    _f.__initData = _worklet_14583680667473_init_data;
    _f.__workletHash = 14583680667473;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var bubbleStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        transform: [{
          translateX: x.value
        }]
      };
    };
    _f._closure = {
      x: x
    };
    _f.__initData = _worklet_5275432537208_init_data;
    _f.__workletHash = 5275432537208;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return {
    gesture: gesture,
    bubbleStyle: bubbleStyle,
    progressX: x
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,