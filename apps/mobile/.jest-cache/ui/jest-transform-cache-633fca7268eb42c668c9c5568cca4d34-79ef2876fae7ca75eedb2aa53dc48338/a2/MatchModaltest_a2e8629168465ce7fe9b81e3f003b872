71dddf125247313f48cbd75484a9689a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MatchModal = require("../MatchModal");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var mockPet = {
  _id: 'pet1',
  name: 'Buddy',
  age: 3,
  breed: 'Golden Retriever',
  photos: [{
    url: 'photo1.jpg',
    order: 1
  }],
  description: 'Friendly and playful',
  owner: 'user1',
  species: 'dog',
  createdAt: new Date(),
  updatedAt: new Date()
};
var mockOnKeepSwiping = jest.fn();
var mockOnSendMessage = jest.fn();
describe('MatchModal', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('Rendering', function () {
    it('should not render when show is false', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: false,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        queryByText = _render.queryByText;
      expect(queryByText("It's a Match! ðŸŽ‰")).toBeNull();
    });
    it('should render when show is true', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render2.getByText;
      expect(getByText("It's a Match! ðŸŽ‰")).toBeTruthy();
    });
    it('should render default show true when not provided', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render3.getByText;
      expect(getByText("It's a Match! ðŸŽ‰")).toBeTruthy();
    });
  });
  describe('Confetti Integration', function () {
    it('should render confetti burst when shown', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        UNSAFE_getAllByType = _render4.UNSAFE_getAllByType;
      var confettiComponents = UNSAFE_getAllByType('View');
      expect(confettiComponents.length).toBeGreaterThan(0);
    });
    it('should trigger confetti on show', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: false,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        rerender = _render5.rerender;
      rerender((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
        pet: mockPet,
        show: true,
        onKeepSwiping: mockOnKeepSwiping,
        onSendMessage: mockOnSendMessage
      }));
      yield (0, _reactNative.waitFor)(function () {
        jest.advanceTimersByTime(100);
      });
    }));
    it('should stop confetti after duration', (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        UNSAFE_getByType = _render6.UNSAFE_getByType;
      act(function () {
        jest.advanceTimersByTime(4100);
      });
      yield (0, _reactNative.waitFor)(function () {
        var container = UNSAFE_getByType('View');
        expect(container).toBeTruthy();
      });
    }));
  });
  describe('Content Display', function () {
    it('should display match title', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render7.getByText;
      expect(getByText("It's a Match! ðŸŽ‰")).toBeTruthy();
    });
    it('should display pet name in message', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render8.getByText;
      expect(getByText(/You and Buddy liked each other!/)).toBeTruthy();
    });
    it('should handle long pet names', function () {
      var longNamePet = _objectSpread(_objectSpread({}, mockPet), {}, {
        name: 'Super Long Pet Name That Should Still Display'
      });
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: longNamePet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render9.getByText;
      expect(getByText(/Super Long Pet Name That Should Still Display/)).toBeTruthy();
    });
  });
  describe('Buttons', function () {
    it('should render Keep Swiping button', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render0.getByText;
      expect(getByText('Keep Swiping')).toBeTruthy();
    });
    it('should render Send Message button', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render1.getByText;
      expect(getByText('Send Message')).toBeTruthy();
    });
    it('should call onKeepSwiping when Keep Swiping is pressed', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render10.getByText;
      var button = getByText('Keep Swiping');
      _reactNative.fireEvent.press(button);
      expect(mockOnKeepSwiping).toHaveBeenCalledTimes(1);
    });
    it('should call onSendMessage when Send Message is pressed', function () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render11.getByText;
      var button = getByText('Send Message');
      _reactNative.fireEvent.press(button);
      expect(mockOnSendMessage).toHaveBeenCalledTimes(1);
    });
    it('should handle rapid button presses', function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render12.getByText;
      var keepSwipingButton = getByText('Keep Swiping');
      var sendMessageButton = getByText('Send Message');
      _reactNative.fireEvent.press(keepSwipingButton);
      _reactNative.fireEvent.press(sendMessageButton);
      _reactNative.fireEvent.press(keepSwipingButton);
      expect(mockOnKeepSwiping).toHaveBeenCalledTimes(2);
      expect(mockOnSendMessage).toHaveBeenCalledTimes(1);
    });
  });
  describe('Photo Display', function () {
    it('should render photo container', function () {
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        UNSAFE_getAllByType = _render13.UNSAFE_getAllByType;
      var containers = UNSAFE_getAllByType('View');
      var photoContainer = containers.find(function (view) {
        var _view$props$style;
        return (_view$props$style = view.props.style) == null ? void 0 : _view$props$style.some(function (style) {
          return (style == null ? void 0 : style.width) === 80;
        });
      });
      expect(photoContainer).toBeTruthy();
    });
    it('should handle pets with no photos', function () {
      var petWithoutPhotos = _objectSpread(_objectSpread({}, mockPet), {}, {
        photos: []
      });
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: petWithoutPhotos,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render14.getByText;
      expect(getByText("It's a Match! ðŸŽ‰")).toBeTruthy();
    });
  });
  describe('Styling', function () {
    it('should have overlay with correct background', function () {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        UNSAFE_getByType = _render15.UNSAFE_getByType;
      var overlay = UNSAFE_getByType('View');
      expect(overlay).toBeTruthy();
    });
    it('should have correct z-index', function () {
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        UNSAFE_getByType = _render16.UNSAFE_getByType;
      var overlay = UNSAFE_getByType('View');
      expect(overlay).toBeTruthy();
    });
  });
  describe('Integration with SwipeScreen', function () {
    it('should handle navigation on Send Message', function () {
      var navigateMock = jest.fn();
      var onSendMessageWithNav = function onSendMessageWithNav() {
        navigateMock('Chat', {
          matchId: mockPet._id,
          petName: mockPet.name
        });
      };
      var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: onSendMessageWithNav
        })),
        getByText = _render17.getByText;
      var button = getByText('Send Message');
      _reactNative.fireEvent.press(button);
      expect(navigateMock).toHaveBeenCalledWith('Chat', {
        matchId: mockPet._id,
        petName: mockPet.name
      });
    });
    it('should handle dismiss on Keep Swiping', function () {
      var setShowModalMock = jest.fn();
      var onKeepSwipingWithDismiss = function onKeepSwipingWithDismiss() {
        setShowModalMock(false);
      };
      var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: onKeepSwipingWithDismiss,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render18.getByText;
      var button = getByText('Keep Swiping');
      _reactNative.fireEvent.press(button);
      expect(setShowModalMock).toHaveBeenCalledWith(false);
    });
  });
  describe('Edge Cases', function () {
    it('should handle undefined callbacks gracefully', function () {
      var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: undefined,
          onSendMessage: undefined
        })),
        getByText = _render19.getByText;
      var button = getByText('Keep Swiping');
      expect(function () {
        _reactNative.fireEvent.press(button);
      }).not.toThrow();
    });
    it('should handle rapid show/hide toggles', function () {
      var _render20 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: false,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        rerender = _render20.rerender;
      rerender((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
        pet: mockPet,
        show: true,
        onKeepSwiping: mockOnKeepSwiping,
        onSendMessage: mockOnSendMessage
      }));
      rerender((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
        pet: mockPet,
        show: false,
        onKeepSwiping: mockOnKeepSwiping,
        onSendMessage: mockOnSendMessage
      }));
      expect(function () {}).not.toThrow();
    });
    it('should handle pet changes', function () {
      var newPet = _objectSpread(_objectSpread({}, mockPet), {}, {
        name: 'Max',
        _id: 'pet2'
      });
      var _render21 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        rerender = _render21.rerender,
        getByText = _render21.getByText;
      rerender((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
        pet: newPet,
        show: true,
        onKeepSwiping: mockOnKeepSwiping,
        onSendMessage: mockOnSendMessage
      }));
      expect(getByText(/You and Max liked each other!/)).toBeTruthy();
    });
    it('should unmount cleanly', function () {
      var _render22 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        unmount = _render22.unmount;
      expect(function () {
        unmount();
      }).not.toThrow();
    });
  });
  describe('Accessibility', function () {
    it('should be accessible to screen readers', function () {
      var _render23 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render23.getByText;
      expect(getByText("It's a Match! ðŸŽ‰")).toBeTruthy();
    });
    it('should have accessible buttons', function () {
      var _render24 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        getByText = _render24.getByText;
      expect(getByText('Keep Swiping')).toBeTruthy();
      expect(getByText('Send Message')).toBeTruthy();
    });
  });
  describe('Performance', function () {
    it('should not re-render unnecessarily', function () {
      var _render25 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        rerender = _render25.rerender;
      rerender((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
        pet: mockPet,
        show: true,
        onKeepSwiping: mockOnKeepSwiping,
        onSendMessage: mockOnSendMessage
      }));
      expect(function () {}).not.toThrow();
    });
    it('should handle confetti cleanup efficiently', (0, _asyncToGenerator2.default)(function* () {
      var _render26 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchModal.MatchModal, {
          pet: mockPet,
          show: true,
          onKeepSwiping: mockOnKeepSwiping,
          onSendMessage: mockOnSendMessage
        })),
        unmount = _render26.unmount;
      act(function () {
        jest.advanceTimersByTime(100);
      });
      unmount();
      expect(function () {
        act(function () {
          jest.runAllTimers();
        });
      }).not.toThrow();
    }));
  });
});
function act(callback) {
  callback();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,