8dfa605e015630d223daea756fcd6246
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.analyzePhotoFromUri = analyzePhotoFromUri;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _api = require("./api");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function analyzePhotoFromUri(_x) {
  return _analyzePhotoFromUri.apply(this, arguments);
}
function _analyzePhotoFromUri() {
  _analyzePhotoFromUri = (0, _asyncToGenerator2.default)(function* (localUri) {
    var contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "image/jpeg";
    var data = yield (0, _api.request)("/uploads/photos/presign", {
      method: 'POST',
      body: {
        contentType: contentType
      }
    });
    yield FileSystem.uploadAsync(data.url, localUri, {
      httpMethod: "PUT",
      headers: {
        "Content-Type": contentType
      },
      uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
    });
    var analysis = yield (0, _api.request)("/ai/analyze-photo", {
      method: 'POST',
      body: {
        s3Key: data.key
      }
    });
    return analysis.data;
  });
  return _analyzePhotoFromUri.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaWxlU3lzdGVtIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2FwaSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYW5hbHl6ZVBob3RvRnJvbVVyaSIsIl94IiwiX2FuYWx5emVQaG90b0Zyb21VcmkiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImxvY2FsVXJpIiwiY29udGVudFR5cGUiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJkYXRhIiwicmVxdWVzdCIsIm1ldGhvZCIsImJvZHkiLCJ1cGxvYWRBc3luYyIsInVybCIsImh0dHBNZXRob2QiLCJoZWFkZXJzIiwidXBsb2FkVHlwZSIsIkZpbGVTeXN0ZW1VcGxvYWRUeXBlIiwiQklOQVJZX0NPTlRFTlQiLCJhbmFseXNpcyIsInMzS2V5Iiwia2V5Il0sInNvdXJjZXMiOlsiYWlQaG90b1NlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRmlsZVN5c3RlbSBmcm9tIFwiZXhwby1maWxlLXN5c3RlbVwiO1xuaW1wb3J0IHsgcmVxdWVzdCB9IGZyb20gXCIuL2FwaVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBob3RvQW5hbHlzaXNSZXN1bHQge1xuICBsYWJlbHM6IEFycmF5PHsgbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkOyBjb25maWRlbmNlOiBudW1iZXIgfCB1bmRlZmluZWQgfT47XG4gIGJyZWVkQ2FuZGlkYXRlczogQXJyYXk8eyBuYW1lOiBzdHJpbmc7IGNvbmZpZGVuY2U6IG51bWJlciB9PjtcbiAgcXVhbGl0eToge1xuICAgIGRpbXM6IHsgd2lkdGg/OiBudW1iZXI7IGhlaWdodD86IG51bWJlciB9O1xuICAgIGV4cG9zdXJlOiBudW1iZXI7XG4gICAgY29udHJhc3Q6IG51bWJlcjtcbiAgICBzaGFycG5lc3M6IG51bWJlcjtcbiAgfTtcbiAgb3ZlcmFsbDogbnVtYmVyO1xuICBpc1BldDogYm9vbGVhbjtcbiAgc3VnZ2VzdGlvbnM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYW5hbHl6ZVBob3RvRnJvbVVyaShsb2NhbFVyaTogc3RyaW5nLCBjb250ZW50VHlwZSA9IFwiaW1hZ2UvanBlZ1wiKTogUHJvbWlzZTxQaG90b0FuYWx5c2lzUmVzdWx0PiB7XG4gIC8vIFVwbG9hZCBwaG90byB0byBTM1xuICBjb25zdCBkYXRhID0gYXdhaXQgcmVxdWVzdDx7IGtleTogc3RyaW5nOyB1cmw6IHN0cmluZyB9PihcIi91cGxvYWRzL3Bob3Rvcy9wcmVzaWduXCIsIHsgbWV0aG9kOiAnUE9TVCcsIGJvZHk6IHsgY29udGVudFR5cGUgfSB9KTtcbiAgXG4gIGF3YWl0IEZpbGVTeXN0ZW0udXBsb2FkQXN5bmMoZGF0YS51cmwsIGxvY2FsVXJpLCB7XG4gICAgaHR0cE1ldGhvZDogXCJQVVRcIixcbiAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IGNvbnRlbnRUeXBlIH0sXG4gICAgdXBsb2FkVHlwZTogRmlsZVN5c3RlbS5GaWxlU3lzdGVtVXBsb2FkVHlwZS5CSU5BUllfQ09OVEVOVCxcbiAgfSk7XG5cbiAgLy8gQW5hbHl6ZSB0aGUgdXBsb2FkZWQgcGhvdG9cbiAgY29uc3QgYW5hbHlzaXMgPSBhd2FpdCByZXF1ZXN0PHsgZGF0YTogUGhvdG9BbmFseXNpc1Jlc3VsdCB9PihcIi9haS9hbmFseXplLXBob3RvXCIsIHsgXG4gICAgbWV0aG9kOiAnUE9TVCcsIFxuICAgIGJvZHk6IHsgczNLZXk6IGRhdGEua2V5IH1cbiAgfSk7XG4gIFxuICByZXR1cm4gYW5hbHlzaXMuZGF0YTtcbn1cblxuIl0sIm1hcHBpbmdzIjoiOzs7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