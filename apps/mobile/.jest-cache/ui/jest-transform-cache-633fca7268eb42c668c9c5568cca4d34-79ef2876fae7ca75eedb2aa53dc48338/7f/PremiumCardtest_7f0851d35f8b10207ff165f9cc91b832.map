{"version":3,"names":["_getJestObj","mock","impactAsync","jest","fn","ImpactFeedbackStyle","Medium","_interopRequireDefault","require","_defineProperty2","_react","_PremiumCard","Haptics","_interopRequireWildcard","_jsxRuntime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","_require","describe","mockPlan","id","name","price","duration","features","popular","mockYearlyPlan","savings","mockOnSubscribe","beforeEach","clearAllMocks","useTheme","mockReturnValue","colors","primary","secondary","background","text","card","accent","isDark","it","_render","render","jsx","plan","onSubscribe","getByText","getByTestId","expect","toBeTruthy","_render2","_render3","fireEvent","press","toHaveBeenCalledWith","_render4","props","style","toBeDefined","freePlan","_render5","queryByTestId","toBeNull","customStyle","marginTop","_render6"],"sources":["PremiumCard.test.tsx"],"sourcesContent":["import React from \"react\";\nimport {} from \"@testing-library/react-native\";\nimport \"@testing-library/jest-native/extend-expect\";\nimport PremiumCard from \"../../Premium/PremiumCard\";\nimport {} from \"../../../theme/Provider\";\nimport * as Haptics from \"expo-haptics\";\nimport { Theme } from '../../../theme/unified-theme';\n\n// Mock dependencies\njest.mock(\"../../../theme/Provider\");\njest.mock(\"expo-haptics\", () => ({\n  impactAsync: jest.fn(),\n  ImpactFeedbackStyle: {\n    Medium: \"medium\",\n  },\n}));\n\ndescribe(\"PremiumCard\", () => {\n  const mockPlan = {\n    id: \"premium\",\n    name: \"Premium\",\n    price: 9.99,\n    duration: \"month\",\n    features: [\"Unlimited swipes\", \"See who liked you\", \"Advanced filters\"],\n    popular: true,\n  };\n\n  const mockYearlyPlan = {\n    ...mockPlan,\n    price: 99.99,\n    duration: \"year\",\n    savings: \"15%\",\n  };\n\n  const mockOnSubscribe = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock theme context\n    (useTheme as jest.Mock).mockReturnValue({\n      colors: {\n        primary: \"#7c3aed\",\n        secondary: \"Theme.colors.primary[500]\",\n        background: \"Theme.colors.neutral[0]\",\n        text: \"Theme.colors.neutral[950]\",\n        card: \"Theme.colors.neutral[0]\",\n        accent: \"Theme.colors.secondary[500]\",\n      },\n      isDark: false,\n    });\n  });\n\n  it(\"renders plan details correctly\", () => {\n    const { getByText, getByTestId } = render(\n      <PremiumCard plan={mockPlan} onSubscribe={mockOnSubscribe} />,\n    );\n\n    // Check plan details\n    expect(getByText(\"Premium\")).toBeTruthy();\n    expect(getByText(\"$9.99/month\")).toBeTruthy();\n\n    // Check features\n    expect(getByText(\"Unlimited swipes\")).toBeTruthy();\n    expect(getByText(\"See who liked you\")).toBeTruthy();\n    expect(getByText(\"Advanced filters\")).toBeTruthy();\n\n    // Check popular badge\n    expect(getByTestId(\"popular-badge\")).toBeTruthy();\n  });\n\n  it(\"renders yearly plan with savings correctly\", () => {\n    const { getByText, getByTestId } = render(\n      <PremiumCard plan={mockYearlyPlan} onSubscribe={mockOnSubscribe} />,\n    );\n\n    // Check yearly price\n    expect(getByText(\"$99.99/year\")).toBeTruthy();\n\n    // Check savings badge\n    expect(getByTestId(\"savings-badge\")).toBeTruthy();\n    expect(getByText(\"Save 15%\")).toBeTruthy();\n  });\n\n  it(\"calls onSubscribe when subscribe button is pressed\", () => {\n    const { getByText } = render(\n      <PremiumCard plan={mockPlan} onSubscribe={mockOnSubscribe} />,\n    );\n\n    // Press subscribe button\n    fireEvent.press(getByText(\"Subscribe\"));\n\n    // Check if onSubscribe was called with correct plan\n    expect(mockOnSubscribe).toHaveBeenCalledWith(mockPlan);\n\n    // Check if haptic feedback was triggered\n    expect(Haptics.impactAsync).toHaveBeenCalledWith(\n      Haptics.ImpactFeedbackStyle.Medium,\n    );\n  });\n\n  it(\"renders with dark theme style\", () => {\n    // Mock dark theme\n    (useTheme as jest.Mock).mockReturnValue({\n      colors: {\n        primary: \"#7c3aed\",\n        secondary: \"Theme.colors.primary[500]\",\n        background: \"Theme.colors.neutral[800]\",\n        text: \"Theme.colors.neutral[0]\",\n        card: \"Theme.colors.neutral[700]\",\n        accent: \"Theme.colors.secondary[500]\",\n      },\n      isDark: true,\n    });\n\n    const { getByTestId } = render(\n      <PremiumCard plan={mockPlan} onSubscribe={mockOnSubscribe} />,\n    );\n\n    // Should have dark theme style\n    const card = getByTestId(\"premium-plan-card\");\n    expect(card.props.style).toBeDefined();\n  });\n\n  it(\"renders free plan correctly\", () => {\n    const freePlan = {\n      id: \"basic\",\n      name: \"Basic\",\n      price: 0,\n      duration: \"month\",\n      features: [\"Limited swipes per day\", \"Basic matching\"],\n    };\n\n    const { getByText, queryByTestId } = render(\n      <PremiumCard plan={freePlan} onSubscribe={mockOnSubscribe} />,\n    );\n\n    // Check free plan details\n    expect(getByText(\"Basic\")).toBeTruthy();\n    expect(getByText(\"Free\")).toBeTruthy();\n\n    // Should not have popular or savings badge\n    expect(queryByTestId(\"popular-badge\")).toBeNull();\n    expect(queryByTestId(\"savings-badge\")).toBeNull();\n  });\n\n  it(\"renders with custom styles when provided\", () => {\n    const customStyle = { marginTop: 20 };\n    const { getByTestId } = render(\n      <PremiumCard\n        plan={mockPlan}\n        onSubscribe={mockOnSubscribe}\n        style={customStyle}\n      />,\n    );\n\n    const card = getByTestId(\"premium-plan-card\");\n    expect(card.props.style).toBeDefined();\n    // Additional style-specific assertions could be added here\n  });\n});\n"],"mappings":"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","ignoreList":[]}