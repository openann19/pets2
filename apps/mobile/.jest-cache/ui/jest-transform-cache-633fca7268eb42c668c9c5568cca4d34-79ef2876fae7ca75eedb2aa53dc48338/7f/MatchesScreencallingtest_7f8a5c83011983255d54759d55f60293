65e3a8baf83db13daad09a8bbd8b0224
"use strict";

_getJestObj().mock("../../components/calling/CallManager");
_getJestObj().mock("@pawfectmatch/core");
_getJestObj().mock("expo-linear-gradient", function () {
  return {
    LinearGradient: "LinearGradient"
  };
});
_getJestObj().mock("react-native", function () {
  return {
    Alert: {
      alert: jest.fn()
    },
    View: "View",
    Text: "Text",
    TouchableOpacity: "TouchableOpacity",
    ScrollView: "ScrollView",
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _core = require("@pawfectmatch/core");
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("react-native");
var _CallManager = require("../../components/calling/CallManager");
var _MatchesScreen = _interopRequireDefault(require("../MatchesScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseCallManager = _CallManager.useCallManager;
var mockUseAuthStore = _core.useAuthStore;
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var mockMatches = [{
  _id: "match-1",
  petId: "pet-1",
  petName: "Buddy",
  petPhoto: "https://example.com/buddy.jpg",
  ownerName: "John Doe",
  lastMessage: {
    content: "Hello!",
    timestamp: new Date().toISOString(),
    senderId: "other"
  },
  isOnline: true,
  matchedAt: new Date().toISOString(),
  unreadCount: 1
}, {
  _id: "match-2",
  petId: "pet-2",
  petName: "Luna",
  petPhoto: "https://example.com/luna.jpg",
  ownerName: "Jane Smith",
  lastMessage: {
    content: "How are you?",
    timestamp: new Date().toISOString(),
    senderId: "me"
  },
  isOnline: false,
  matchedAt: new Date().toISOString(),
  unreadCount: 0
}];
describe("MatchesScreen - Calling Features", function () {
  var mockStartCall = jest.fn();
  var mockIsCallActive = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    mockUseCallManager.mockReturnValue({
      startCall: mockStartCall,
      endCall: jest.fn(),
      isCallActive: mockIsCallActive,
      getCallState: jest.fn()
    });
    mockUseAuthStore.mockReturnValue({
      user: {
        id: "test-user-id",
        firstName: "Test",
        lastName: "User"
      }
    });
    mockIsCallActive.mockReturnValue(false);
  });
  it("should render call buttons for each match", (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var voiceButtons = getAllByTestId("voice-call-button");
      var videoButtons = getAllByTestId("video-call-button");
      expect(voiceButtons).toHaveLength(mockMatches.length);
      expect(videoButtons).toHaveLength(mockMatches.length);
    });
  }));
  it("should start voice call when voice button is pressed", (0, _asyncToGenerator2.default)(function* () {
    mockStartCall.mockResolvedValue(true);
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render2.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var voiceButtons = getAllByTestId("voice-call-button");
      _reactNative.fireEvent.press(voiceButtons[0]);
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Voice Call", "Start a voice call with Buddy?", expect.arrayContaining([expect.objectContaining({
      text: "Cancel"
    }), expect.objectContaining({
      text: "Call"
    })]));
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmButton = alertCall[2].find(function (button) {
      return button.text === "Call";
    });
    yield confirmButton.onPress();
    expect(mockStartCall).toHaveBeenCalledWith("match-1", "voice");
  }));
  it("should start video call when video button is pressed", (0, _asyncToGenerator2.default)(function* () {
    mockStartCall.mockResolvedValue(true);
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render3.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var videoButtons = getAllByTestId("video-call-button");
      _reactNative.fireEvent.press(videoButtons[0]);
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Video Call", "Start a video call with Buddy?", expect.arrayContaining([expect.objectContaining({
      text: "Cancel"
    }), expect.objectContaining({
      text: "Call"
    })]));
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmButton = alertCall[2].find(function (button) {
      return button.text === "Call";
    });
    yield confirmButton.onPress();
    expect(mockStartCall).toHaveBeenCalledWith("match-1", "video");
  }));
  it("should prevent call button from triggering match navigation", (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render4.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var voiceButtons = getAllByTestId("voice-call-button");
      _reactNative.fireEvent.press(voiceButtons[0]);
    });
    expect(mockNavigation.navigate).not.toHaveBeenCalledWith("Chat", expect.any(Object));
  }));
  it("should show error when call fails to start", (0, _asyncToGenerator2.default)(function* () {
    mockStartCall.mockResolvedValue(false);
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render5.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var voiceButtons = getAllByTestId("voice-call-button");
      _reactNative.fireEvent.press(voiceButtons[0]);
    });
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmButton = alertCall[2].find(function (button) {
      return button.text === "Call";
    });
    yield confirmButton.onPress();
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Error", "Failed to start call. Please check your permissions and try again.");
  }));
  it("should prevent starting call when another call is active", (0, _asyncToGenerator2.default)(function* () {
    mockIsCallActive.mockReturnValue(true);
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render6.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var voiceButtons = getAllByTestId("voice-call-button");
      _reactNative.fireEvent.press(voiceButtons[0]);
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Call in Progress", "You already have an active call.");
    expect(mockStartCall).not.toHaveBeenCalled();
  }));
  it("should handle different matches correctly", (0, _asyncToGenerator2.default)(function* () {
    mockStartCall.mockResolvedValue(true);
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render7.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var voiceButtons = getAllByTestId("voice-call-button");
      _reactNative.fireEvent.press(voiceButtons[1]);
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Voice Call", "Start a voice call with Luna?", expect.any(Array));
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmButton = alertCall[2].find(function (button) {
      return button.text === "Call";
    });
    yield confirmButton.onPress();
    expect(mockStartCall).toHaveBeenCalledWith("match-2", "voice");
  }));
  it("should style call buttons correctly", (0, _asyncToGenerator2.default)(function* () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render8.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var voiceButtons = getAllByTestId("voice-call-button");
      var videoButtons = getAllByTestId("video-call-button");
      voiceButtons.forEach(function (button) {
        expect(button).toHaveStyle({
          width: 36,
          height: 36,
          borderRadius: 18,
          backgroundColor: "#f8f9fa"
        });
      });
      videoButtons.forEach(function (button) {
        expect(button).toHaveStyle({
          width: 36,
          height: 36,
          borderRadius: 18,
          backgroundColor: "#f8f9fa"
        });
      });
    });
  }));
  it("should show correct icons for call buttons", (0, _asyncToGenerator2.default)(function* () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render9.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var voiceButtons = getAllByTestId("voice-call-button");
      var videoButtons = getAllByTestId("video-call-button");
      voiceButtons.forEach(function (button) {
        expect(button).toBeTruthy();
      });
      videoButtons.forEach(function (button) {
        expect(button).toBeTruthy();
      });
    });
  }));
  it("should handle match card press correctly (not call buttons)", (0, _asyncToGenerator2.default)(function* () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render0.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var matchCard = getByTestId("match-card-0");
      _reactNative.fireEvent.press(matchCard);
    });
    expect(mockNavigation.navigate).toHaveBeenCalledWith("Chat", {
      matchId: "match-1",
      petName: "Buddy"
    });
  }));
  it("should cancel call when user presses cancel", (0, _asyncToGenerator2.default)(function* () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render1.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var voiceButtons = getAllByTestId("voice-call-button");
      _reactNative.fireEvent.press(voiceButtons[0]);
    });
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var cancelButton = alertCall[2].find(function (button) {
      return button.text === "Cancel";
    });
    if (cancelButton.onPress) {
      cancelButton.onPress();
    }
    expect(mockStartCall).not.toHaveBeenCalled();
  }));
  it("should handle empty matches list", function () {
    jest.spyOn(_react.default, "useState").mockImplementationOnce(function () {
      return [[], jest.fn()];
    }).mockImplementationOnce(function () {
      return [false, jest.fn()];
    }).mockImplementationOnce(function () {
      return [false, jest.fn()];
    }).mockImplementationOnce(function () {
      return ["matches", jest.fn()];
    });
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      queryAllByTestId = _render10.queryAllByTestId;
    expect(queryAllByTestId("voice-call-button")).toHaveLength(0);
    expect(queryAllByTestId("video-call-button")).toHaveLength(0);
  });
  it("should handle call manager errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    mockStartCall.mockRejectedValue(new Error("Call manager error"));
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render11.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var voiceButtons = getAllByTestId("voice-call-button");
      _reactNative.fireEvent.press(voiceButtons[0]);
    });
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmButton = alertCall[2].find(function (button) {
      return button.text === "Call";
    });
    yield confirmButton.onPress();
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Error", "Failed to start call. Please check your permissions and try again.");
  }));
  it("should maintain match list functionality with call buttons", (0, _asyncToGenerator2.default)(function* () {
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render12.getByTestId,
      getAllByTestId = _render12.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId("match-name-0")).toHaveTextContent("Buddy");
      expect(getByTestId("match-owner-0")).toHaveTextContent("with John Doe");
      expect(getAllByTestId("voice-call-button")).toHaveLength(2);
      expect(getAllByTestId("video-call-button")).toHaveLength(2);
      expect(getByTestId("match-chevron-0")).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,