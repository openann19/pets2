{"version":3,"names":["_reactNative","require","ImageManipulator","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","FaceDetector","_unused","clamp","v","min","max","Math","padRect","imgW","imgH","padPct","undefined","padX","width","padY","height","x","y","unionRects","rects","minX","_toConsumableArray2","map","minY","maxX","maxY","biggestRect","slice","sort","a","b","ratioToNumber","NaN","parts","split","Number","isNaN","getImageSize","_x","_getImageSize","_asyncToGenerator2","uri","Promise","resolve","RNImage","getSize","w","h","cropForRatio","focus","ratio","ar","padded","cx","cy","focusAR","buildEyeWeightedFocus","faces","eyeWeight","faceRects","bounds","origin","size","haveLandmarks","every","_f$landmarks","_f$landmarks2","LEFT_EYE","RIGHT_EYE","landmarks","leftEye","rightEye","points","_f$landmarks3","_f$landmarks4","le","re","p","merged","rect","method","eyesRect","base","targetW","targetH","baseCx","baseCy","focusCx","upwardBias","focusCy","detectFaces","_x2","_detectFaces","_FaceDetector","options","mode","FaceDetectorMode","accurate","detectLandmarks","FaceDetectorLandmarks","all","runClassifications","FaceDetectorClassifications","none","result","processImageAsync","Array","isArray","_unused2","AutoCropEngine","exports","detect","_detect","_opts$padPct","opts","_yield$getImageSize","_opts$eyeWeight","_buildEyeWeightedFocu","targetAR","_x3","suggestCrops","_suggestCrops","ratios","res","_opts$padPct2","crop","_x4","makeThumbnails","_makeThumbnails","suggestions","thumbOpts","_thumbOpts$size","_thumbOpts$quality","quality","withThumbs","s","manipulateAsync","originX","round","originY","resize","compress","format","SaveFormat","JPEG","thumbUri","_x5","_x6","applyCrop","_applyCrop","_x7","_x8"],"sources":["AutoCropEngine.ts"],"sourcesContent":["// utils/AutoCropEngine.ts\nimport { Image as RNImage } from \"react-native\";\nimport * as ImageManipulator from \"expo-image-manipulator\";\n\nexport type Rect = { x: number; y: number; width: number; height: number };\ntype Suggestion = {\n  ratio: string;            // \"1:1\" | \"4:5\" | \"9:16\" | etc.\n  focus: Rect;              // the subject focus rect (after padding/weighting)\n  crop: Rect;               // final crop rect to apply for this ratio\n  thumbUri?: string;        // small preview (optional, generated via makeThumbnails)\n  method: \"eyes\" | \"face\" | \"fallback\";\n};\n\ntype DetectOpts = {\n  eyeWeight?: number;       // 0..1 (how much to bias toward eyes)\n  padPct?: number;          // extra space around subject focus\n};\n\ntype ThumbOpts = {\n  size?: number;            // width of thumbnail (px)\n  quality?: number;         // 0..1\n};\n\nlet FaceDetector: any = null;\ntry {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  FaceDetector = require(\"expo-face-detector\");\n} catch {\n  FaceDetector = null;\n}\n\nconst clamp = (v: number, min: number, max: number) => Math.max(min, Math.min(max, v));\nconst padRect = (r: Rect, imgW: number, imgH: number, padPct = 0.18): Rect => {\n  const padX = r.width * padPct;\n  const padY = r.height * padPct;\n  const x = clamp(r.x - padX, 0, imgW);\n  const y = clamp(r.y - padY, 0, imgH);\n  const width = clamp(r.width + padX * 2, 1, imgW - x);\n  const height = clamp(r.height + padY * 2, 1, imgH - y);\n  return { x, y, width, height };\n};\nconst unionRects = (rects: Rect[]): Rect => {\n  const minX = Math.min(...rects.map((r) => r.x));\n  const minY = Math.min(...rects.map((r) => r.y));\n  const maxX = Math.max(...rects.map((r) => r.x + r.width));\n  const maxY = Math.max(...rects.map((r) => r.y + r.height));\n  return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\n};\nconst biggestRect = (rects: Rect[]) =>\n  rects.slice().sort((a, b) => b.width * b.height - a.width * a.height)[0];\n\nconst ratioToNumber = (r: string): number => {\n  if (r === \"FREE\") return NaN;\n  const parts = r.split(\":\");\n  if (parts.length !== 2) return NaN;\n  const a = Number(parts[0]);\n  const b = Number(parts[1]);\n  if (isNaN(a) || isNaN(b) || b === 0) return NaN;\n  return a / b;\n};\n\nasync function getImageSize(uri: string): Promise<{ w: number; h: number }> {\n  return new Promise((resolve) => {\n    RNImage.getSize(\n      uri,\n      (w, h) => { resolve({ w, h }); },\n      () => { resolve({ w: 0, h: 0 }); },\n    );\n  });\n}\n\n/** Compute a crop rect of a given aspect ratio that fully contains `focus` with optional padding. */\nfunction cropForRatio(focus: Rect, imgW: number, imgH: number, ratio: string, padPct = 0.12): Rect {\n  const ar = ratioToNumber(ratio);\n  const padded = padRect(focus, imgW, imgH, padPct);\n  const cx = padded.x + padded.width / 2;\n  const cy = padded.y + padded.height / 2;\n\n  // Ensure rect with target AR that fully contains padded\n  let width: number;\n  let height: number;\n  const focusAR = padded.width / padded.height;\n\n  if (isNaN(ar)) {\n    // FREE -> just return padded focus\n    width = padded.width;\n    height = padded.height;\n  } else if (focusAR >= ar) {\n    width = padded.width;\n    height = width / ar;\n  } else {\n    height = padded.height;\n    width = height * ar;\n  }\n\n  // Clamp within image while keeping size\n  width = Math.min(width, imgW);\n  height = Math.min(height, imgH);\n\n  let x = cx - width / 2;\n  let y = cy - height / 2;\n\n  x = clamp(x, 0, imgW - width);\n  y = clamp(y, 0, imgH - height);\n\n  return { x, y, width, height };\n}\n\n/** Eye-weighted focus from faces (if landmarks available). Falls back to face bounds union. */\nfunction buildEyeWeightedFocus(faces: any[], imgW: number, imgH: number, eyeWeight = 0.55): { rect: Rect; method: \"eyes\" | \"face\" } {\n  const faceRects: Rect[] = faces.map((f: any) => ({\n    x: f.bounds.origin.x,\n    y: f.bounds.origin.y,\n    width: f.bounds.size.width,\n    height: f.bounds.size.height,\n  }));\n\n  // landmarks present?\n  const haveLandmarks = faces.every((f) => f.LEFT_EYE || f.RIGHT_EYE || f.landmarks?.leftEye || f.landmarks?.rightEye);\n\n  if (haveLandmarks) {\n    const points: { x: number; y: number }[] = [];\n    faces.forEach((f) => {\n      const le = f.LEFT_EYE || f.landmarks?.leftEye;\n      const re = f.RIGHT_EYE || f.landmarks?.rightEye;\n      if (le) points.push({ x: le.x, y: le.y });\n      if (re) points.push({ x: re.x, y: re.y });\n    });\n\n    if (points.length >= 2) {\n      // BBox around eyes\n      const minX = Math.min(...points.map((p) => p.x));\n      const maxX = Math.max(...points.map((p) => p.x));\n      const minY = Math.min(...points.map((p) => p.y));\n      const maxY = Math.max(...points.map((p) => p.y));\n      // Validate values to ensure they are numbers\n      if (isNaN(minX) || isNaN(maxX) || isNaN(minY) || isNaN(maxY)) {\n        // Fallback to merged face bounds\n        const merged = padRect(unionRects(faceRects), imgW, imgH, 0.18);\n        return { rect: merged, method: \"face\" };\n      }\n      const eyesRect: Rect = { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\n\n      // Expand to include a bit of muzzle/forehead (pets) or nose/forehead (humans)\n      const base = unionRects(faceRects);\n      // Blend eyesRect with faceRect center using eyeWeight\n      const targetW = base.width * (0.55);            // natural head framing\n      const targetH = base.height * (0.55);\n      const cx = eyesRect.x + eyesRect.width / 2;\n      const cy = eyesRect.y + eyesRect.height / 2;\n      const baseCx = base.x + base.width / 2;\n      const baseCy = base.y + base.height / 2;\n\n      const focusCx = baseCx * (1 - eyeWeight) + cx * eyeWeight;\n      // Bias slightly upward (forehead/ears for pets)\n      const upwardBias = Math.max(8, base.height * 0.08);\n      const focusCy = baseCy * (1 - eyeWeight) + (cy - upwardBias) * eyeWeight;\n\n      const rect: Rect = {\n        x: clamp(focusCx - targetW / 2, 0, imgW - targetW),\n        y: clamp(focusCy - targetH / 2, 0, imgH - targetH),\n        width: Math.min(targetW, imgW),\n        height: Math.min(targetH, imgH),\n      };\n\n      return { rect: padRect(rect, imgW, imgH, 0.18), method: \"eyes\" };\n    }\n  }\n\n  // Fallback to merged face bounds\n  const merged = padRect(unionRects(faceRects), imgW, imgH, 0.18);\n  return { rect: merged, method: \"face\" };\n}\n\nasync function detectFaces(uri: string): Promise<any[] | null> {\n  if (!FaceDetector?.FaceDetector) return null;\n  try {\n    const options = {\n      mode: FaceDetector.FaceDetectorMode.accurate,\n      detectLandmarks: FaceDetector.FaceDetectorLandmarks.all,\n      runClassifications: FaceDetector.FaceDetectorClassifications.none,\n    };\n    const result = await FaceDetector.FaceDetector.processImageAsync(uri, options);\n    return Array.isArray(result) ? result : null;\n  } catch {\n    return null;\n  }\n}\n\nexport type AutoCropResult = {\n  focus: Rect;\n  method: \"eyes\" | \"face\" | \"fallback\";\n  size: { w: number; h: number };\n};\n\nexport type SuggestionType = Suggestion;\n\nexport const AutoCropEngine = {\n  /** Return a **focus rect** (subject box) using eyes>face>fallback. */\n  detect: async (uri: string, opts: DetectOpts = {}): Promise<AutoCropResult | null> => {\n    const { w: imgW, h: imgH } = await getImageSize(uri);\n    if (!imgW || !imgH) return null;\n\n    const faces = await detectFaces(uri);\n    if (faces && faces.length > 0) {\n      const { rect, method } = buildEyeWeightedFocus(faces, imgW, imgH, opts.eyeWeight ?? 0.55);\n      return { focus: rect, method, size: { w: imgW, h: imgH } };\n    }\n\n    // Beautiful fallback (center, slight upward bias, 4:5-ish)\n    const targetAR = 4 / 5;\n    const w = Math.min(imgW * 0.7, imgH * targetAR * 0.9);\n    const h = w / targetAR;\n    const focus: Rect = {\n      x: (imgW - w) / 2,\n      y: (imgH - h) / 2 - imgH * 0.06,\n      width: w,\n      height: h,\n    };\n    return { focus: padRect(focus, imgW, imgH, opts.padPct ?? 0.18), method: \"fallback\", size: { w: imgW, h: imgH } };\n  },\n\n  /** Build multi-ratio **suggested crops** (1:1, 4:5, 9:16, etc.) from the focus. */\n  suggestCrops: async (uri: string, ratios: string[] = [\"1:1\", \"4:5\", \"9:16\"], opts: DetectOpts = {}): Promise<Suggestion[]> => {\n    const res = await AutoCropEngine.detect(uri, opts);\n    if (!res) return [];\n    const { focus, method, size } = res;\n\n    return ratios.map((r) => ({\n      ratio: r,\n      focus,\n      crop: cropForRatio(focus, size.w, size.h, r, opts.padPct ?? 0.12),\n      method,\n    }));\n  },\n\n  /** Generate thumbnails for suggestions (optional UI candy). */\n  makeThumbnails: async (uri: string, suggestions: Suggestion[], thumbOpts: ThumbOpts = {}): Promise<Suggestion[]> => {\n    const { size = 240, quality = 0.9 } = thumbOpts;\n    const withThumbs: Suggestion[] = [];\n\n    for (const s of suggestions) {\n      const result = await ImageManipulator.manipulateAsync(\n        uri,\n        [{ crop: { originX: Math.round(s.crop.x), originY: Math.round(s.crop.y), width: Math.round(s.crop.width), height: Math.round(s.crop.height) } },\n         { resize: { width: size } }],\n        { compress: quality, format: ImageManipulator.SaveFormat.JPEG },\n      );\n      withThumbs.push({ ...s, thumbUri: result.uri });\n    }\n    return withThumbs;\n  },\n\n  /** Apply a concrete crop rect to the original and return a new uri. */\n  applyCrop: async (uri: string, rect: Rect, quality = 1): Promise<string> => {\n    const result = await ImageManipulator.manipulateAsync(\n      uri,\n      [{ crop: { originX: Math.round(rect.x), originY: Math.round(rect.y), width: Math.round(rect.width), height: Math.round(rect.height) } }],\n      { compress: quality, format: ImageManipulator.SaveFormat.JPEG },\n    );\n    return result.uri;\n  },\n};\n\n"],"mappings":"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","ignoreList":[]}