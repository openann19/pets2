f62653ff7936f89daf7d3b71f751ec5d
"use strict";

_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: function useNavigation() {
      return mockNavigation;
    }
  };
});
_getJestObj().mock("../../../services/PremiumService", function () {
  return {
    premiumService: {
      createCheckoutSession: mockCreateCheckoutSession,
      getAvailablePlans: mockGetAvailablePlans
    }
  };
});
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      error: jest.fn(),
      info: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _usePremiumScreen = require("../usePremiumScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGoBack = jest.fn();
var mockNavigation = {
  goBack: mockGoBack
};
var mockCreateCheckoutSession = jest.fn();
var mockGetAvailablePlans = jest.fn();
jest.spyOn(_reactNative2.Alert, "alert");
jest.spyOn(_reactNative2.Linking, "openURL").mockResolvedValue(true);
describe("usePremiumScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockGetAvailablePlans.mockReturnValue([{
      id: "premium",
      name: "Premium",
      price: 9.99
    }, {
      id: "ultimate",
      name: "Ultimate",
      price: 19.99
    }]);
  });
  it("should initialize with default values", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook.result;
    expect(result.current.billingPeriod).toBe("monthly");
    expect(result.current.selectedTier).toBe("premium");
    expect(result.current.isLoading).toBe(false);
    expect(result.current.subscriptionTiers).toHaveLength(3);
  });
  it("should provide all subscription tiers", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook2.result;
    expect(result.current.subscriptionTiers).toHaveLength(3);
    expect(result.current.subscriptionTiers[0].id).toBe("basic");
    expect(result.current.subscriptionTiers[1].id).toBe("premium");
    expect(result.current.subscriptionTiers[2].id).toBe("ultimate");
  });
  it("should mark premium tier as popular", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook3.result;
    var premiumTier = result.current.subscriptionTiers.find(function (t) {
      return t.id === "premium";
    });
    expect(premiumTier == null ? void 0 : premiumTier.popular).toBe(true);
  });
  it("should change billing period", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.setBillingPeriod("yearly");
    });
    expect(result.current.billingPeriod).toBe("yearly");
  });
  it("should change selected tier", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.setSelectedTier("ultimate");
    });
    expect(result.current.selectedTier).toBe("ultimate");
  });
  it("should handle subscription for paid tier", (0, _asyncToGenerator2.default)(function* () {
    mockCreateCheckoutSession.mockResolvedValue({
      url: "https://checkout.stripe.com/session123"
    });
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleSubscribe("premium");
    }));
    expect(mockCreateCheckoutSession).toHaveBeenCalledWith("price_premium_monthly", "pawfectmatch://subscription/success", "pawfectmatch://subscription/cancel");
    expect(_reactNative2.Linking.openURL).toHaveBeenCalledWith("https://checkout.stripe.com/session123");
  }));
  it("should use correct price ID for yearly billing", (0, _asyncToGenerator2.default)(function* () {
    mockCreateCheckoutSession.mockResolvedValue({
      url: "https://checkout.stripe.com/session123"
    });
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.setBillingPeriod("yearly");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleSubscribe("premium");
    }));
    expect(mockCreateCheckoutSession).toHaveBeenCalledWith("price_premium_yearly", "pawfectmatch://subscription/success", "pawfectmatch://subscription/cancel");
  }));
  it("should not create checkout for free tier", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleSubscribe("basic");
    }));
    expect(mockCreateCheckoutSession).not.toHaveBeenCalled();
    expect(_reactNative2.Linking.openURL).not.toHaveBeenCalled();
  }));
  it("should set loading state during subscription", (0, _asyncToGenerator2.default)(function* () {
    mockCreateCheckoutSession.mockImplementation(function () {
      return new Promise(function (resolve) {
        return setTimeout(function () {
          return resolve({
            url: "https://checkout.stripe.com/session123"
          });
        }, 100);
      });
    });
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook9.result;
    var subscribePromise = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleSubscribe("premium");
    }));
    expect(result.current.isLoading).toBe(true);
    yield subscribePromise;
    expect(result.current.isLoading).toBe(false);
  }));
  it("should handle subscription error", (0, _asyncToGenerator2.default)(function* () {
    mockCreateCheckoutSession.mockRejectedValue(new Error("Network error"));
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleSubscribe("premium");
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Subscription Error", "Failed to start checkout process. Please try again.", [{
      text: "OK"
    }]);
    expect(result.current.isLoading).toBe(false);
  }));
  it("should handle invalid tier ID", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleSubscribe("invalid-tier");
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Subscription Error", "Failed to start checkout process. Please try again.", [{
      text: "OK"
    }]);
  }));
  it("should handle missing checkout URL", (0, _asyncToGenerator2.default)(function* () {
    mockCreateCheckoutSession.mockResolvedValue({
      url: null
    });
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleSubscribe("premium");
    }));
    expect(_reactNative2.Linking.openURL).not.toHaveBeenCalled();
    expect(result.current.isLoading).toBe(false);
  }));
  it("should navigate back when requested", function () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook11.result;
    (0, _reactNative.act)(function () {
      result.current.handleGoBack();
    });
    expect(mockGoBack).toHaveBeenCalledTimes(1);
  });
  it("should provide available plans from service", function () {
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook12.result;
    expect(result.current.availablePlans).toHaveLength(2);
    expect(mockGetAvailablePlans).toHaveBeenCalled();
  });
  it("should include feature lists for each tier", function () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook13.result;
    var basicTier = result.current.subscriptionTiers.find(function (t) {
      return t.id === "basic";
    });
    var premiumTier = result.current.subscriptionTiers.find(function (t) {
      return t.id === "premium";
    });
    var ultimateTier = result.current.subscriptionTiers.find(function (t) {
      return t.id === "ultimate";
    });
    expect(basicTier == null ? void 0 : basicTier.features).toContain("5 daily swipes");
    expect(premiumTier == null ? void 0 : premiumTier.features).toContain("Unlimited swipes");
    expect(ultimateTier == null ? void 0 : ultimateTier.features).toContain("AI-powered recommendations");
  });
  it("should provide pricing for monthly and yearly periods", function () {
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook14.result;
    var premiumTier = result.current.subscriptionTiers.find(function (t) {
      return t.id === "premium";
    });
    expect(premiumTier == null ? void 0 : premiumTier.price.monthly).toBe(9.99);
    expect(premiumTier == null ? void 0 : premiumTier.price.yearly).toBe(99.99);
  });
  it("should have correct stripe price IDs", function () {
    var _renderHook15 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook15.result;
    var premiumTier = result.current.subscriptionTiers.find(function (t) {
      return t.id === "premium";
    });
    expect(premiumTier == null ? void 0 : premiumTier.stripePriceId.monthly).toBe("price_premium_monthly");
    expect(premiumTier == null ? void 0 : premiumTier.stripePriceId.yearly).toBe("price_premium_yearly");
  });
  it("should return stable function references", function () {
    var _renderHook16 = (0, _reactNative.renderHook)(function () {
        return (0, _usePremiumScreen.usePremiumScreen)();
      }),
      result = _renderHook16.result,
      rerender = _renderHook16.rerender;
    var firstSetBillingPeriod = result.current.setBillingPeriod;
    var firstHandleSubscribe = result.current.handleSubscribe;
    rerender();
    expect(result.current.setBillingPeriod).toBe(firstSetBillingPeriod);
    expect(result.current.handleSubscribe).toBe(firstHandleSubscribe);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,