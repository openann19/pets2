be80169ec8b5d5661f72f3f96fd91633
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTabReselectRefresh = useTabReselectRefresh;
var _react = require("react");
var _native = require("@react-navigation/native");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function scrollToTop(listRef) {
  var node = listRef.current;
  if (!node) return;
  if (typeof node.scrollToOffset === "function") {
    node.scrollToOffset({
      offset: 0,
      animated: true
    });
  } else if (typeof node.scrollTo === "function") {
    node.scrollTo({
      y: 0,
      animated: true
    });
  } else if (typeof node.scrollToIndex === "function") {
    node.scrollToIndex({
      index: 0,
      animated: true
    });
  }
}
function useTabReselectRefresh(opts) {
  var listRef = opts.listRef,
    onRefresh = opts.onRefresh,
    getOffset = opts.getOffset,
    _opts$topThreshold = opts.topThreshold,
    topThreshold = _opts$topThreshold === void 0 ? 120 : _opts$topThreshold,
    _opts$cooldownMs = opts.cooldownMs,
    cooldownMs = _opts$cooldownMs === void 0 ? 700 : _opts$cooldownMs,
    _opts$haptics = opts.haptics,
    haptics = _opts$haptics === void 0 ? true : _opts$haptics,
    _opts$nearTopAction = opts.nearTopAction,
    nearTopAction = _opts$nearTopAction === void 0 ? "refresh" : _opts$nearTopAction;
  var navigation = (0, _native.useNavigation)();
  var isFocused = (0, _native.useIsFocused)();
  var canTrigger = (0, _react.useMemo)(function () {
    var last = 0;
    return function () {
      var now = Date.now();
      if (now - last < cooldownMs) return false;
      last = now;
      return true;
    };
  }, [cooldownMs]);
  (0, _react.useEffect)(function () {
    var handleTabPress = function handleTabPress() {
      var _getOffset;
      if (!isFocused) return;
      if (!canTrigger()) return;
      var offset = (_getOffset = getOffset == null ? void 0 : getOffset()) != null ? _getOffset : 0;
      var farFromTop = offset > topThreshold;
      if (farFromTop) {
        if (haptics) Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        scrollToTop(listRef);
      } else if (nearTopAction === "refresh") {
        if (haptics) Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
        onRefresh();
      }
    };
    var handleTabDoublePress = function handleTabDoublePress() {
      if (!isFocused) return;
      if (!canTrigger()) return;
      if (haptics) Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);
      scrollToTop(listRef);
      onRefresh();
    };
    var sub1 = navigation.addListener == null ? void 0 : navigation.addListener("tabPress", handleTabPress);
    var sub2 = navigation.addListener == null ? void 0 : navigation.addListener("tabDoublePress", handleTabDoublePress);
    return function () {
      if (sub1) sub1();
      if (sub2) sub2();
    };
  }, [navigation, isFocused, listRef, onRefresh, getOffset, topThreshold, canTrigger, haptics, nearTopAction]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,