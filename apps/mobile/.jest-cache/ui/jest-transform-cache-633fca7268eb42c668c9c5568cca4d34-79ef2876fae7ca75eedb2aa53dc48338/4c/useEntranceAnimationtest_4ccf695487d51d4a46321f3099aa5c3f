f7295596aa97d3e7fd756a5f20f3d9c5
"use strict";

var _reactNative = require("@testing-library/react-native");
var _useEntranceAnimation = require("../useEntranceAnimation");
describe('useEntranceAnimation', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('fadeIn animation', function () {
    it('should initialize fadeIn animation correctly', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('fadeIn');
        }),
        result = _renderHook.result;
      expect(result.current.entranceStyle).toBeDefined();
      expect(result.current.start).toBeDefined();
    });
    it('should handle fadeIn with no delay', function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('fadeIn', 0);
        }),
        result = _renderHook2.result;
      expect(result.current.entranceStyle).toBeDefined();
    });
    it('should handle fadeIn with delay', function () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('fadeIn', 300);
        }),
        result = _renderHook3.result;
      expect(result.current.entranceStyle).toBeDefined();
    });
  });
  describe('slideIn animation', function () {
    it('should initialize slideIn animation correctly', function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('slideIn');
        }),
        result = _renderHook4.result;
      expect(result.current.entranceStyle).toBeDefined();
    });
    it('should handle slideIn with delay', function () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('slideIn', 200);
        }),
        result = _renderHook5.result;
      expect(result.current.entranceStyle).toBeDefined();
    });
    it('should provide start function for slideIn', function () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('slideIn');
        }),
        result = _renderHook6.result;
      expect(typeof result.current.start).toBe('function');
      result.current.start();
    });
  });
  describe('scaleIn animation', function () {
    it('should initialize scaleIn animation correctly', function () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('scaleIn');
        }),
        result = _renderHook7.result;
      expect(result.current.entranceStyle).toBeDefined();
    });
    it('should handle scaleIn with delay', function () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('scaleIn', 400);
        }),
        result = _renderHook8.result;
      expect(result.current.entranceStyle).toBeDefined();
    });
    it('should restart scaleIn animation', function () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('scaleIn');
        }),
        result = _renderHook9.result;
      result.current.start();
    });
  });
  describe('bounceIn animation', function () {
    it('should initialize bounceIn animation correctly', function () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('bounceIn');
        }),
        result = _renderHook0.result;
      expect(result.current.entranceStyle).toBeDefined();
    });
    it('should handle bounceIn with delay', function () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('bounceIn', 500);
        }),
        result = _renderHook1.result;
      expect(result.current.entranceStyle).toBeDefined();
    });
    it('should restart bounceIn animation', function () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('bounceIn');
        }),
        result = _renderHook10.result;
      result.current.start();
    });
  });
  describe('animatedStyle compatibility', function () {
    it('should provide both entranceStyle and animatedStyle', function () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('fadeIn');
        }),
        result = _renderHook11.result;
      expect(result.current.entranceStyle).toBeDefined();
      expect(result.current.animatedStyle).toBeDefined();
      expect(result.current.entranceStyle).toBe(result.current.animatedStyle);
    });
  });
  describe('start function', function () {
    it('should restart fadeIn animation when called', function () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('fadeIn');
        }),
        result = _renderHook12.result;
      result.current.start();
      expect(result.current.start).toBeDefined();
    });
    it('should restart slideIn animation when called', function () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('slideIn');
        }),
        result = _renderHook13.result;
      result.current.start();
      expect(result.current.start).toBeDefined();
    });
    it('should restart scaleIn animation when called', function () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('scaleIn');
        }),
        result = _renderHook14.result;
      result.current.start();
      expect(result.current.start).toBeDefined();
    });
    it('should restart bounceIn animation when called', function () {
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useEntranceAnimation.useEntranceAnimation)('bounceIn');
        }),
        result = _renderHook15.result;
      result.current.start();
      expect(result.current.start).toBeDefined();
    });
  });
  describe('rerender behavior', function () {
    it('should maintain consistent API on rerender', function () {
      var _renderHook16 = (0, _reactNative.renderHook)(function (props) {
          return (0, _useEntranceAnimation.useEntranceAnimation)(props.type, props.delay);
        }, {
          initialProps: {
            type: 'fadeIn',
            delay: 0
          }
        }),
        result = _renderHook16.result,
        rerender = _renderHook16.rerender;
      var firstStyle = result.current.entranceStyle;
      var firstStart = result.current.start;
      rerender({
        type: 'fadeIn',
        delay: 0
      });
      expect(result.current.entranceStyle).toBeDefined();
      expect(result.current.start).toBeDefined();
    });
    it('should handle animation type change', function () {
      var _renderHook17 = (0, _reactNative.renderHook)(function (props) {
          return (0, _useEntranceAnimation.useEntranceAnimation)(props.type);
        }, {
          initialProps: {
            type: 'fadeIn'
          }
        }),
        result = _renderHook17.result,
        rerender = _renderHook17.rerender;
      expect(result.current.entranceStyle).toBeDefined();
      rerender({
        type: 'slideIn'
      });
      expect(result.current.entranceStyle).toBeDefined();
    });
    it('should handle delay change', function () {
      var _renderHook18 = (0, _reactNative.renderHook)(function (props) {
          return (0, _useEntranceAnimation.useEntranceAnimation)('fadeIn', props.delay);
        }, {
          initialProps: {
            delay: 0
          }
        }),
        result = _renderHook18.result,
        rerender = _renderHook18.rerender;
      expect(result.current.entranceStyle).toBeDefined();
      rerender({
        delay: 300
      });
      expect(result.current.entranceStyle).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,