1a00599bc6e772c5a40ef311772f7603
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MyPetsScreen;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _vectorIcons = require("@expo/vector-icons");
var _react = require("react");
var _reactNative = require("react-native");
var _ScreenShell = require("../ui/layout/ScreenShell");
var _AdvancedHeader = require("../components/Advanced/AdvancedHeader");
var _haptics = require("../ui/haptics");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _useMyPetsScreen2 = require("../hooks/screens/useMyPetsScreen");
var _DoubleTapLikePlus = require("../components/Gestures/DoubleTapLikePlus");
var _PinchZoomPro = require("../components/Gestures/PinchZoomPro");
var _useInteractionMetrics = require("../hooks/useInteractionMetrics");
var _logger = require("../services/logger");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  _screenWidth = _Dimensions$get.width;
function MyPetsScreen(_ref) {
  var navigation = _ref.navigation;
  var _useMyPetsScreen = (0, _useMyPetsScreen2.useMyPetsScreen)(),
    pets = _useMyPetsScreen.pets,
    isLoading = _useMyPetsScreen.isLoading,
    refreshing = _useMyPetsScreen.refreshing,
    loadPets = _useMyPetsScreen.loadPets,
    onRefresh = _useMyPetsScreen.onRefresh,
    getSpeciesEmoji = _useMyPetsScreen.getSpeciesEmoji,
    getIntentColor = _useMyPetsScreen.getIntentColor,
    getIntentLabel = _useMyPetsScreen.getIntentLabel,
    handleDeletePet = _useMyPetsScreen.handleDeletePet;
  var _useDoubleTapMetrics = (0, _useInteractionMetrics.useDoubleTapMetrics)(),
    startDoubleTap = _useDoubleTapMetrics.startInteraction,
    endDoubleTap = _useDoubleTapMetrics.endInteraction;
  var _usePinchMetrics = (0, _useInteractionMetrics.usePinchMetrics)(),
    startPinch = _usePinchMetrics.startInteraction,
    endPinch = _usePinchMetrics.endInteraction;
  var handlePetLike = function handlePetLike(pet) {
    _haptics.haptic.confirm();
    startDoubleTap('petLike', {
      petId: pet.id,
      petName: pet.name
    });
    _logger.logger.info('Pet like action', {
      petId: pet.id,
      petName: pet.name
    });
    endDoubleTap('petLike', true);
  };
  (0, _react.useEffect)(function () {
    void loadPets();
  }, [loadPets]);
  var renderPetCard = function renderPetCard(_ref2) {
    var _ref3, _item$photos$find$url, _item$photos$find, _item$photos$;
    var item = _ref2.item,
      index = _ref2.index;
    return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      entering: _reactNativeReanimated.FadeInDown.duration(220).delay(index * 50),
      children: (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        style: styles.petCard,
        onPress: function onPress() {
          handleNavigateToPetDetails(item);
        },
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.petImageContainer,
          children: [item.photos && item.photos.length > 0 ? (0, _jsxRuntime.jsx)(_DoubleTapLikePlus.DoubleTapLikePlus, {
            onDoubleTap: function onDoubleTap() {
              handlePetLike(item);
            },
            heartColor: "#ff6b6b",
            particles: 4,
            haptics: {
              enabled: true,
              style: "light"
            },
            children: (0, _jsxRuntime.jsx)(_PinchZoomPro.PinchZoomPro, {
              source: {
                uri: (_ref3 = (_item$photos$find$url = (_item$photos$find = item.photos.find(function (p) {
                  return p.isPrimary;
                })) == null ? void 0 : _item$photos$find.url) != null ? _item$photos$find$url : (_item$photos$ = item.photos[0]) == null ? void 0 : _item$photos$.url) != null ? _ref3 : ""
              },
              width: 120,
              height: 120,
              minScale: 1,
              maxScale: 2.5,
              enableMomentum: false,
              haptics: true,
              onScaleChange: function onScaleChange(scale) {
                if (scale > 1.1) {
                  startPinch('petPhoto', {
                    petId: item.id
                  });
                } else {
                  endPinch('petPhoto', true);
                }
              },
              backgroundColor: "#f0f0f0"
            })
          }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.petImagePlaceholder,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.petImageEmoji,
              children: getSpeciesEmoji(item.species)
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _reactNative.StyleSheet.flatten([styles.statusBadge, {
              backgroundColor: getIntentColor(item.intent)
            }]),
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.statusBadgeText,
              children: getIntentLabel(item.intent)
            })
          }), item.photos && item.photos.length > 1 ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.photoCountBadge,
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "camera",
              size: 12,
              color: "#FFFFFF"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.photoCountText,
              children: item.photos.length
            })]
          }) : null]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.petInfo,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.petHeader,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.petName,
              children: item.name
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.petSpecies,
              children: getSpeciesEmoji(item.species)
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.petBreed,
            children: item.breed
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.petDetails,
            children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.petDetail,
              children: [item.age, " years \u2022 ", item.gender, " \u2022 ", item.size]
            })
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.petStats,
            children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.stat,
              children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "eye",
                size: 14,
                color: "#6B7280"
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.statText,
                children: item.analytics.views
              })]
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.stat,
              children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "heart",
                size: 14,
                color: "#EF4444"
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.statText,
                children: item.analytics.likes
              })]
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.stat,
              children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "people",
                size: 14,
                color: "#8B5CF6"
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.statText,
                children: item.analytics.matches
              })]
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.petActions,
            children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
              style: _reactNative.StyleSheet.flatten([styles.actionButton, styles.viewButton]),
              onPress: function onPress() {
                _haptics.haptic.tap();
                navigation.navigate("PetDetails", {
                  petId: item.id,
                  pet: item
                });
              },
              children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "eye",
                size: 16,
                color: "#6B7280"
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.viewButtonText,
                children: "View"
              })]
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: _reactNative.StyleSheet.flatten([styles.actionButton, styles.editButton]),
              onPress: function onPress() {
                _haptics.haptic.confirm();
                navigation.navigate("EditPet", {
                  petId: item.id,
                  pet: item
                });
              },
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "pencil",
                size: 16,
                color: "#FFFFFF"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: _reactNative.StyleSheet.flatten([styles.actionButton, styles.deleteButton]),
              onPress: function onPress() {
                _haptics.haptic.error();
                handleDeletePet(item._id);
              },
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "trash",
                size: 16,
                color: "#FFFFFF"
              })
            })]
          })]
        })]
      })
    });
  };
  var renderEmptyState = function renderEmptyState() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.emptyContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emptyEmoji,
        children: "\uD83D\uDC3E"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emptyTitle,
        children: "No Pets Yet"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emptyText,
        children: "Start building your pet's profile to find amazing matches and new friends!"
      }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        style: styles.emptyButton,
        onPress: function onPress() {
          _haptics.haptic.confirm();
          navigation.navigate("CreatePet");
        },
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "add-circle",
          size: 20,
          color: "#FFFFFF"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.emptyButtonText,
          children: "Create Your First Pet Profile"
        })]
      })]
    });
  };
  var handleBackPress = function handleBackPress() {
    _haptics.haptic.tap();
    navigation.goBack();
  };
  var handleAddPet = function handleAddPet() {
    _haptics.haptic.confirm();
    navigation.navigate("CreatePet");
  };
  var handleNavigateToPetDetails = function handleNavigateToPetDetails(item) {
    _haptics.haptic.tap();
    navigation.navigate("PetDetails", {
      petId: item.id,
      pet: item
    });
  };
  return (0, _jsxRuntime.jsxs)(_ScreenShell.ScreenShell, {
    header: (0, _jsxRuntime.jsx)(_AdvancedHeader.AdvancedHeader, _objectSpread({}, _AdvancedHeader.HeaderConfigs.glass({
      title: 'My Pets',
      rightButtons: [{
        type: 'add',
        onPress: handleAddPet,
        variant: 'primary',
        haptic: 'light'
      }]
    }))),
    children: [(0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: pets,
      renderItem: renderPetCard,
      keyExtractor: function keyExtractor(item) {
        return item._id;
      },
      contentContainerStyle: styles.listContainer,
      showsVerticalScrollIndicator: false,
      refreshControl: (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
        refreshing: refreshing,
        onRefresh: onRefresh,
        colors: ["#8B5CF6"],
        tintColor: "#8B5CF6"
      }),
      ListEmptyComponent: !isLoading ? (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        entering: _reactNativeReanimated.FadeInDown.duration(220),
        children: renderEmptyState()
      }) : null,
      ListHeaderComponent: pets.length > 0 ? (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        entering: _reactNativeReanimated.FadeInDown.duration(200),
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.listHeader,
          children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.listHeaderText,
            children: [pets.length, " pet", pets.length !== 1 ? "s" : "", " profile", pets.length !== 1 ? "s" : ""]
          })
        })
      }) : null
    }), isLoading && !refreshing && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.loadingOverlay,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.loadingContent,
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "sync",
          size: 32,
          color: "#8B5CF6",
          style: {
            transform: [{
              rotate: "45deg"
            }]
          }
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.loadingText,
          children: "Loading pets..."
        })]
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F9FAFB"
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: "#FFFFFF",
    borderBottomWidth: 1,
    borderBottomColor: "#E5E7EB"
  },
  backButton: {
    padding: 8
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#111827"
  },
  addButton: {
    padding: 8
  },
  listContainer: {
    padding: 20,
    paddingBottom: 40
  },
  listHeader: {
    marginBottom: 16
  },
  listHeaderText: {
    fontSize: 14,
    color: "#6B7280",
    fontWeight: "500"
  },
  petCard: {
    backgroundColor: "#FFFFFF",
    borderRadius: 16,
    marginBottom: 16,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
    overflow: "hidden"
  },
  petImageContainer: {
    height: 200,
    position: "relative"
  },
  petImage: {
    width: "100%",
    height: "100%"
  },
  petImagePlaceholder: {
    width: "100%",
    height: "100%",
    backgroundColor: "#F3F4F6",
    justifyContent: "center",
    alignItems: "center"
  },
  petImageEmoji: {
    fontSize: 48
  },
  statusBadge: {
    position: "absolute",
    top: 12,
    left: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12
  },
  statusBadgeText: {
    fontSize: 10,
    color: "#FFFFFF",
    fontWeight: "bold"
  },
  photoCountBadge: {
    position: "absolute",
    top: 12,
    right: 12,
    backgroundColor: "rgba(0, 0, 0, 0.6)",
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 6,
    paddingVertical: 4,
    borderRadius: 12
  },
  photoCountText: {
    fontSize: 10,
    color: "#FFFFFF",
    marginLeft: 4,
    fontWeight: "bold"
  },
  petInfo: {
    padding: 16
  },
  petHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginBottom: 4
  },
  petName: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#111827"
  },
  petSpecies: {
    fontSize: 24
  },
  petBreed: {
    fontSize: 14,
    color: "#6B7280",
    marginBottom: 8
  },
  petDetails: {
    marginBottom: 12
  },
  petDetail: {
    fontSize: 12,
    color: "#6B7280"
  },
  petStats: {
    flexDirection: "row",
    justifyContent: "space-around",
    backgroundColor: "#F9FAFB",
    padding: 12,
    borderRadius: 8,
    marginBottom: 16
  },
  stat: {
    flexDirection: "row",
    alignItems: "center"
  },
  statText: {
    fontSize: 12,
    color: "#374151",
    marginLeft: 4,
    fontWeight: "600"
  },
  petActions: {
    flexDirection: "row",
    gap: 8
  },
  actionButton: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    padding: 10,
    borderRadius: 8
  },
  viewButton: {
    backgroundColor: "#F3F4F6"
  },
  viewButtonText: {
    fontSize: 14,
    color: "#6B7280",
    marginLeft: 6,
    fontWeight: "500"
  },
  editButton: {
    backgroundColor: "#8B5CF6"
  },
  deleteButton: {
    backgroundColor: "#EF4444"
  },
  emptyContainer: {
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 60,
    paddingHorizontal: 40
  },
  emptyEmoji: {
    fontSize: 64,
    marginBottom: 16
  },
  emptyTitle: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#111827",
    marginBottom: 8,
    textAlign: "center"
  },
  emptyText: {
    fontSize: 16,
    color: "#6B7280",
    textAlign: "center",
    marginBottom: 24,
    lineHeight: 24
  },
  emptyButton: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#8B5CF6",
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 12
  },
  emptyButtonText: {
    fontSize: 16,
    color: "#FFFFFF",
    fontWeight: "bold",
    marginLeft: 8
  },
  loadingOverlay: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(255, 255, 255, 0.9)",
    justifyContent: "center",
    alignItems: "center"
  },
  loadingContent: {
    alignItems: "center"
  },
  loadingText: {
    fontSize: 16,
    color: "#6B7280",
    marginTop: 12,
    fontWeight: "500"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,