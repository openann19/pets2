4c002c4fb48f0983270dfaa27e39c28d
"use strict";

_getJestObj().mock('@react-native-community/accessibility', function () {
  return {
    AccessibilityInfo: {
      announceForAccessibility: mockAccessibilityAnnounce
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _VerificationTierCard = require("../components/VerificationTierCard");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
(0, _globals.describe)('VerificationTierCard', function () {
  var defaultProps = {
    tier: 1,
    status: 'unverified',
    onStartVerification: _globals.jest.fn(),
    onViewDetails: _globals.jest.fn()
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('Status Display', function () {
    (0, _globals.it)('should display unverified status correctly', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "unverified"
        }))),
        getByText = _render.getByText,
        getByTestId = _render.getByTestId;
      (0, _globals.expect)(getByText('Tier 1 Verification')).toBeTruthy();
      (0, _globals.expect)(getByText('Not Started')).toBeTruthy();
      (0, _globals.expect)(getByTestId('status-indicator-unverified')).toBeTruthy();
      (0, _globals.expect)(getByText('Start Verification')).toBeTruthy();
    });
    (0, _globals.it)('should display pending status correctly', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "pending"
        }))),
        getByText = _render2.getByText,
        getByTestId = _render2.getByTestId;
      (0, _globals.expect)(getByText('Tier 1 Verification')).toBeTruthy();
      (0, _globals.expect)(getByText('In Review')).toBeTruthy();
      (0, _globals.expect)(getByTestId('status-indicator-pending')).toBeTruthy();
      (0, _globals.expect)(getByText('View Status')).toBeTruthy();
    });
    (0, _globals.it)('should display approved status with badge correctly', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "approved"
        }))),
        getByText = _render3.getByText,
        getByTestId = _render3.getByTestId;
      (0, _globals.expect)(getByText('Tier 1 Verification')).toBeTruthy();
      (0, _globals.expect)(getByText('Verified')).toBeTruthy();
      (0, _globals.expect)(getByTestId('status-indicator-approved')).toBeTruthy();
      (0, _globals.expect)(getByTestId('verification-badge-id_verified')).toBeTruthy();
      (0, _globals.expect)(getByText('View Details')).toBeTruthy();
    });
    (0, _globals.it)('should display rejected status correctly', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "rejected"
        }))),
        getByText = _render4.getByText,
        getByTestId = _render4.getByTestId;
      (0, _globals.expect)(getByText('Tier 1 Verification')).toBeTruthy();
      (0, _globals.expect)(getByText('Rejected')).toBeTruthy();
      (0, _globals.expect)(getByTestId('status-indicator-rejected')).toBeTruthy();
      (0, _globals.expect)(getByText('Try Again')).toBeTruthy();
    });
    (0, _globals.it)('should display requires_info status correctly', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "requires_info"
        }))),
        getByText = _render5.getByText,
        getByTestId = _render5.getByTestId;
      (0, _globals.expect)(getByText('Tier 1 Verification')).toBeTruthy();
      (0, _globals.expect)(getByText('Additional Info Needed')).toBeTruthy();
      (0, _globals.expect)(getByTestId('status-indicator-requires_info')).toBeTruthy();
      (0, _globals.expect)(getByText('Provide Info')).toBeTruthy();
    });
  });
  (0, _globals.describe)('Badge Mapping', function () {
    (0, _globals.it)('should show id_verified badge for Tier 1 approval', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "approved"
        }))),
        getByTestId = _render6.getByTestId;
      (0, _globals.expect)(getByTestId('verification-badge-id_verified')).toBeTruthy();
    });
    (0, _globals.it)('should show premium_verified badge for Tier 2 approval', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          tier: 2,
          status: "approved"
        }))),
        getByTestId = _render7.getByTestId;
      (0, _globals.expect)(getByTestId('verification-badge-premium_verified')).toBeTruthy();
    });
    (0, _globals.it)('should not show badge when not approved', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "pending"
        }))),
        queryByTestId = _render8.queryByTestId;
      (0, _globals.expect)(queryByTestId('verification-badge-id_verified')).toBeNull();
    });
  });
  (0, _globals.describe)('Tier Differences', function () {
    (0, _globals.it)('should display Tier 1 specific content', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          tier: 1
        }))),
        getByText = _render9.getByText;
      (0, _globals.expect)(getByText('Tier 1 Verification')).toBeTruthy();
      (0, _globals.expect)(getByText('Basic identity verification')).toBeTruthy();
    });
    (0, _globals.it)('should display Tier 2 specific content', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          tier: 2
        }))),
        getByText = _render0.getByText;
      (0, _globals.expect)(getByText('Tier 2 Verification')).toBeTruthy();
      (0, _globals.expect)(getByText('Advanced verification with documents')).toBeTruthy();
    });
  });
  (0, _globals.describe)('Action Buttons', function () {
    (0, _globals.it)('should call onStartVerification for unverified status', function () {
      var mockOnStart = _globals.jest.fn();
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "unverified",
          onStartVerification: mockOnStart
        }))),
        getByText = _render1.getByText;
      _reactNative.fireEvent.press(getByText('Start Verification'));
      (0, _globals.expect)(mockOnStart).toHaveBeenCalledWith(1);
    });
    (0, _globals.it)('should call onViewDetails for pending status', function () {
      var mockOnViewDetails = _globals.jest.fn();
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "pending",
          onViewDetails: mockOnViewDetails
        }))),
        getByText = _render10.getByText;
      _reactNative.fireEvent.press(getByText('View Status'));
      (0, _globals.expect)(mockOnViewDetails).toHaveBeenCalledWith(1, 'pending');
    });
    (0, _globals.it)('should call onViewDetails for approved status', function () {
      var mockOnViewDetails = _globals.jest.fn();
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "approved",
          onViewDetails: mockOnViewDetails
        }))),
        getByText = _render11.getByText;
      _reactNative.fireEvent.press(getByText('View Details'));
      (0, _globals.expect)(mockOnViewDetails).toHaveBeenCalledWith(1, 'approved');
    });
    (0, _globals.it)('should call onStartVerification for rejected status', function () {
      var mockOnStart = _globals.jest.fn();
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "rejected",
          onStartVerification: mockOnStart
        }))),
        getByText = _render12.getByText;
      _reactNative.fireEvent.press(getByText('Try Again'));
      (0, _globals.expect)(mockOnStart).toHaveBeenCalledWith(1);
    });
    (0, _globals.it)('should call onStartVerification for requires_info status', function () {
      var mockOnStart = _globals.jest.fn();
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "requires_info",
          onStartVerification: mockOnStart
        }))),
        getByText = _render13.getByText;
      _reactNative.fireEvent.press(getByText('Provide Info'));
      (0, _globals.expect)(mockOnStart).toHaveBeenCalledWith(1);
    });
  });
  (0, _globals.describe)('Visual Indicators', function () {
    (0, _globals.it)('should show correct status colors', function () {
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "approved"
        }))),
        getByTestId = _render14.getByTestId;
      var indicator = getByTestId('status-indicator-approved');
      (0, _globals.expect)(indicator).toHaveStyle({
        backgroundColor: '#4CAF50'
      });
    });
    (0, _globals.it)('should show progress indicator for pending status', function () {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "pending"
        }))),
        getByTestId = _render15.getByTestId;
      (0, _globals.expect)(getByTestId('status-progress-indicator')).toBeTruthy();
    });
    (0, _globals.it)('should show warning icon for rejected status', function () {
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "rejected"
        }))),
        getByTestId = _render16.getByTestId;
      (0, _globals.expect)(getByTestId('status-warning-icon')).toBeTruthy();
    });
    (0, _globals.it)('should show info icon for requires_info status', function () {
      var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "requires_info"
        }))),
        getByTestId = _render17.getByTestId;
      (0, _globals.expect)(getByTestId('status-info-icon')).toBeTruthy();
    });
  });
  (0, _globals.describe)('Accessibility', function () {
    (0, _globals.it)('should have correct accessibility labels', function () {
      var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "approved"
        }))),
        getByLabelText = _render18.getByLabelText;
      (0, _globals.expect)(getByLabelText('Tier 1 Verification, Verified')).toBeTruthy();
      (0, _globals.expect)(getByLabelText('View verification details')).toBeTruthy();
    });
    (0, _globals.it)('should announce status changes', function () {
      var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "unverified"
        }))),
        rerender = _render19.rerender;
      rerender((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
        status: "approved"
      })));
      (0, _globals.expect)(mockAccessibilityAnnounce).toHaveBeenCalledWith('Verification approved');
    });
    (0, _globals.it)('should support screen reader navigation', function () {
      var _render20 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "pending"
        }))),
        getByA11yHint = _render20.getByA11yHint;
      (0, _globals.expect)(getByA11yHint('Double tap to view verification status')).toBeTruthy();
    });
  });
  (0, _globals.describe)('Loading States', function () {
    (0, _globals.it)('should show loading state during verification start', (0, _asyncToGenerator2.default)(function* () {
      var mockOnStart = _globals.jest.fn().mockImplementation(function () {
        return new Promise(function (resolve) {
          return setTimeout(resolve, 1000);
        });
      });
      var _render21 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "unverified",
          onStartVerification: mockOnStart
        }))),
        getByText = _render21.getByText;
      _reactNative.fireEvent.press(getByText('Start Verification'));
      (0, _globals.expect)(getByText('Starting...')).toBeTruthy();
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(getByText('Start Verification')).toBeTruthy();
      });
    }));
    (0, _globals.it)('should disable buttons during loading', function () {
      var _render22 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          isLoading: true
        }))),
        getByText = _render22.getByText;
      var button = getByText('Start Verification');
      (0, _globals.expect)(button).toBeDisabled();
    });
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should display error messages', function () {
      var _render23 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          error: "Verification service unavailable"
        }))),
        getByText = _render23.getByText;
      (0, _globals.expect)(getByText('Verification service unavailable')).toBeTruthy();
    });
    (0, _globals.it)('should show retry option for errors', function () {
      var _render24 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          error: "Network error",
          onRetry: _globals.jest.fn()
        }))),
        getByText = _render24.getByText;
      (0, _globals.expect)(getByText('Retry')).toBeTruthy();
    });
    (0, _globals.it)('should clear errors when retrying', function () {
      var mockOnRetry = _globals.jest.fn();
      var _render25 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          error: "Network error",
          onRetry: mockOnRetry
        }))),
        getByText = _render25.getByText,
        queryByText = _render25.queryByText;
      _reactNative.fireEvent.press(getByText('Retry'));
      (0, _globals.expect)(mockOnRetry).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle invalid tier numbers', function () {
      var _render26 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          tier: 99
        }))),
        getByText = _render26.getByText;
      (0, _globals.expect)(getByText('Tier 99 Verification')).toBeTruthy();
    });
    (0, _globals.it)('should handle unknown status gracefully', function () {
      var _render27 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "unknown",
          as: true,
          any: true
        }))),
        getByText = _render27.getByText;
      (0, _globals.expect)(getByText('Unknown Status')).toBeTruthy();
    });
    (0, _globals.it)('should handle missing callback functions', function () {
      var _render28 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          onStartVerification: undefined,
          onViewDetails: undefined
        }))),
        getByText = _render28.getByText;
      _reactNative.fireEvent.press(getByText('Start Verification'));
    });
  });
  (0, _globals.describe)('Internationalization', function () {
    (0, _globals.it)('should display localized status text', function () {
      _getJestObj().mock('react-i18next', function () {
        return {
          useTranslation: function useTranslation() {
            return {
              t: function t(key) {
                var translations = {
                  'verification.tier1': 'Tier 1 Verification',
                  'verification.status.approved': 'Verified',
                  'verification.start': 'Start Verification'
                };
                return translations[key] || key;
              }
            };
          }
        };
      });
      var _render29 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "approved"
        }))),
        getByText = _render29.getByText;
      (0, _globals.expect)(getByText('Verified')).toBeTruthy();
    });
    (0, _globals.it)('should support RTL layouts', function () {
      var _render30 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          isRTL: true
        }))),
        getByTestId = _render30.getByTestId;
      var card = getByTestId('verification-card');
      (0, _globals.expect)(card).toHaveStyle({
        flexDirection: 'row-reverse'
      });
    });
  });
  (0, _globals.describe)('Performance', function () {
    (0, _globals.it)('should not re-render unnecessarily', function () {
      var renderCount = _globals.jest.fn();
      var TestWrapper = function TestWrapper(props) {
        renderCount();
        return (0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread({}, props));
      };
      var _render31 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, _objectSpread({}, defaultProps))),
        rerender = _render31.rerender;
      (0, _globals.expect)(renderCount).toHaveBeenCalledTimes(1);
      rerender((0, _jsxRuntime.jsx)(TestWrapper, _objectSpread({}, defaultProps)));
      (0, _globals.expect)(renderCount).toHaveBeenCalledTimes(1);
    });
    (0, _globals.it)('should memoize expensive computations', function () {
      var expensiveComputation = _globals.jest.fn(function () {
        return 'computed-value';
      });
      var _render32 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          expensiveProp: expensiveComputation
        }))),
        rerender = _render32.rerender;
      (0, _globals.expect)(expensiveComputation).toHaveBeenCalledTimes(1);
      rerender((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
        expensiveProp: expensiveComputation
      })));
      (0, _globals.expect)(expensiveComputation).toHaveBeenCalledTimes(1);
    });
  });
  (0, _globals.describe)('Integration with Verification Flow', function () {
    (0, _globals.it)('should update status when verification completes', function () {
      var _render33 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "unverified"
        }))),
        rerender = _render33.rerender;
      rerender((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
        status: "approved"
      })));
      (0, _globals.expect)(screen.getByText('Verified')).toBeTruthy();
      (0, _globals.expect)(screen.getByTestId('verification-badge-id_verified')).toBeTruthy();
    });
    (0, _globals.it)('should handle verification timeout', function () {
      _globals.jest.useFakeTimers();
      var _render34 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "pending"
        }))),
        getByText = _render34.getByText;
      _globals.jest.advanceTimersByTime(300000);
      (0, _globals.expect)(getByText('Verification timed out')).toBeTruthy();
      _globals.jest.useRealTimers();
    });
    (0, _globals.it)('should show estimated completion time', function () {
      var _render35 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_VerificationTierCard.VerificationTierCard, _objectSpread(_objectSpread({}, defaultProps), {}, {
          status: "pending",
          estimatedCompletion: "2024-01-01T15:30:00Z"
        }))),
        getByText = _render35.getByText;
      (0, _globals.expect)(getByText('Estimated completion: 3:30 PM')).toBeTruthy();
    });
  });
});
var mockAccessibilityAnnounce = _globals.jest.fn();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,