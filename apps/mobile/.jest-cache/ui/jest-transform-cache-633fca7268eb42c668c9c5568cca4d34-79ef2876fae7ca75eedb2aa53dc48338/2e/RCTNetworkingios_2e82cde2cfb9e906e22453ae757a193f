b1a92bf7ce7593b227df1f7ac59cd962
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var _convertRequestBody = _interopRequireDefault(require("./convertRequestBody"));
var _NativeNetworkingIOS = _interopRequireDefault(require("./NativeNetworkingIOS"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var RCTNetworking = {
  addListener: function addListener(eventType, listener, context) {
    return _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
  },
  sendRequest: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
    var body = (0, _convertRequestBody.default)(data);
    _NativeNetworkingIOS.default.sendRequest({
      method: method,
      url: url,
      data: _objectSpread(_objectSpread({}, body), {}, {
        trackingName: trackingName
      }),
      headers: headers,
      responseType: responseType,
      incrementalUpdates: incrementalUpdates,
      timeout: timeout,
      withCredentials: withCredentials
    }, callback);
  },
  abortRequest: function abortRequest(requestId) {
    _NativeNetworkingIOS.default.abortRequest(requestId);
  },
  clearCookies: function clearCookies(callback) {
    _NativeNetworkingIOS.default.clearCookies(callback);
  }
};
var _default = exports.default = RCTNetworking;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfUkNURGV2aWNlRXZlbnRFbWl0dGVyIiwiX2NvbnZlcnRSZXF1ZXN0Qm9keSIsIl9OYXRpdmVOZXR3b3JraW5nSU9TIiwib3duS2V5cyIsImUiLCJyIiwidCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJSQ1ROZXR3b3JraW5nIiwiYWRkTGlzdGVuZXIiLCJldmVudFR5cGUiLCJsaXN0ZW5lciIsImNvbnRleHQiLCJSQ1REZXZpY2VFdmVudEVtaXR0ZXIiLCJzZW5kUmVxdWVzdCIsIm1ldGhvZCIsInRyYWNraW5nTmFtZSIsInVybCIsImhlYWRlcnMiLCJkYXRhIiwicmVzcG9uc2VUeXBlIiwiaW5jcmVtZW50YWxVcGRhdGVzIiwidGltZW91dCIsImNhbGxiYWNrIiwid2l0aENyZWRlbnRpYWxzIiwiYm9keSIsImNvbnZlcnRSZXF1ZXN0Qm9keSIsIk5hdGl2ZU5ldHdvcmtpbmdJT1MiLCJhYm9ydFJlcXVlc3QiLCJyZXF1ZXN0SWQiLCJjbGVhckNvb2tpZXMiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIlJDVE5ldHdvcmtpbmcuaW9zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSQ1REZXZpY2VFdmVudEVtaXR0ZXIgZnJvbSAnLi4vRXZlbnRFbWl0dGVyL1JDVERldmljZUV2ZW50RW1pdHRlcic7XG5pbXBvcnQge3R5cGUgRXZlbnRTdWJzY3JpcHRpb259IGZyb20gJy4uL3ZlbmRvci9lbWl0dGVyL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgY29udmVydFJlcXVlc3RCb2R5LCB7dHlwZSBSZXF1ZXN0Qm9keX0gZnJvbSAnLi9jb252ZXJ0UmVxdWVzdEJvZHknO1xuaW1wb3J0IE5hdGl2ZU5ldHdvcmtpbmdJT1MgZnJvbSAnLi9OYXRpdmVOZXR3b3JraW5nSU9TJztcbmltcG9ydCB7dHlwZSBOYXRpdmVSZXNwb25zZVR5cGV9IGZyb20gJy4vWE1MSHR0cFJlcXVlc3QnO1xuXG50eXBlIFJDVE5ldHdvcmtpbmdFdmVudERlZmluaXRpb25zID0gJFJlYWRPbmx5PHtcbiAgZGlkU2VuZE5ldHdvcmtEYXRhOiBbXG4gICAgW1xuICAgICAgbnVtYmVyLCAvLyByZXF1ZXN0SWRcbiAgICAgIG51bWJlciwgLy8gcHJvZ3Jlc3NcbiAgICAgIG51bWJlciwgLy8gdG90YWxcbiAgICBdLFxuICBdLFxuICBkaWRSZWNlaXZlTmV0d29ya1Jlc3BvbnNlOiBbXG4gICAgW1xuICAgICAgbnVtYmVyLCAvLyByZXF1ZXN0SWRcbiAgICAgIG51bWJlciwgLy8gc3RhdHVzXG4gICAgICA/e1tzdHJpbmddOiBzdHJpbmd9LCAvLyByZXNwb25zZUhlYWRlcnNcbiAgICAgID9zdHJpbmcsIC8vIHJlc3BvbnNlVVJMXG4gICAgXSxcbiAgXSxcbiAgZGlkUmVjZWl2ZU5ldHdvcmtEYXRhOiBbXG4gICAgW1xuICAgICAgbnVtYmVyLCAvLyByZXF1ZXN0SWRcbiAgICAgIHN0cmluZywgLy8gcmVzcG9uc2VcbiAgICBdLFxuICBdLFxuICBkaWRSZWNlaXZlTmV0d29ya0luY3JlbWVudGFsRGF0YTogW1xuICAgIFtcbiAgICAgIG51bWJlciwgLy8gcmVxdWVzdElkXG4gICAgICBzdHJpbmcsIC8vIHJlc3BvbnNlVGV4dFxuICAgICAgbnVtYmVyLCAvLyBwcm9ncmVzc1xuICAgICAgbnVtYmVyLCAvLyB0b3RhbFxuICAgIF0sXG4gIF0sXG4gIGRpZFJlY2VpdmVOZXR3b3JrRGF0YVByb2dyZXNzOiBbXG4gICAgW1xuICAgICAgbnVtYmVyLCAvLyByZXF1ZXN0SWRcbiAgICAgIG51bWJlciwgLy8gbG9hZGVkXG4gICAgICBudW1iZXIsIC8vIHRvdGFsXG4gICAgXSxcbiAgXSxcbiAgZGlkQ29tcGxldGVOZXR3b3JrUmVzcG9uc2U6IFtcbiAgICBbXG4gICAgICBudW1iZXIsIC8vIHJlcXVlc3RJZFxuICAgICAgc3RyaW5nLCAvLyBlcnJvclxuICAgICAgYm9vbGVhbiwgLy8gdGltZU91dEVycm9yXG4gICAgXSxcbiAgXSxcbn0+O1xuXG5jb25zdCBSQ1ROZXR3b3JraW5nID0ge1xuICBhZGRMaXN0ZW5lcjxLOiAkS2V5czxSQ1ROZXR3b3JraW5nRXZlbnREZWZpbml0aW9ucz4+KFxuICAgIGV2ZW50VHlwZTogSyxcbiAgICBsaXN0ZW5lcjogKC4uLiRFbGVtZW50VHlwZTxSQ1ROZXR3b3JraW5nRXZlbnREZWZpbml0aW9ucywgSz4pID0+IG1peGVkLFxuICAgIGNvbnRleHQ/OiBtaXhlZCxcbiAgKTogRXZlbnRTdWJzY3JpcHRpb24ge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICAgcmV0dXJuIFJDVERldmljZUV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcihldmVudFR5cGUsIGxpc3RlbmVyLCBjb250ZXh0KTtcbiAgfSxcblxuICBzZW5kUmVxdWVzdChcbiAgICBtZXRob2Q6IHN0cmluZyxcbiAgICB0cmFja2luZ05hbWU6IHN0cmluZyxcbiAgICB1cmw6IHN0cmluZyxcbiAgICBoZWFkZXJzOiB7Li4ufSxcbiAgICBkYXRhOiBSZXF1ZXN0Qm9keSxcbiAgICByZXNwb25zZVR5cGU6IE5hdGl2ZVJlc3BvbnNlVHlwZSxcbiAgICBpbmNyZW1lbnRhbFVwZGF0ZXM6IGJvb2xlYW4sXG4gICAgdGltZW91dDogbnVtYmVyLFxuICAgIGNhbGxiYWNrOiAocmVxdWVzdElkOiBudW1iZXIpID0+IHZvaWQsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBib29sZWFuLFxuICApIHtcbiAgICBjb25zdCBib2R5ID0gY29udmVydFJlcXVlc3RCb2R5KGRhdGEpO1xuICAgIE5hdGl2ZU5ldHdvcmtpbmdJT1Muc2VuZFJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhOiB7Li4uYm9keSwgdHJhY2tpbmdOYW1lfSxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgcmVzcG9uc2VUeXBlLFxuICAgICAgICBpbmNyZW1lbnRhbFVwZGF0ZXMsXG4gICAgICAgIHRpbWVvdXQsXG4gICAgICAgIHdpdGhDcmVkZW50aWFscyxcbiAgICAgIH0sXG4gICAgICBjYWxsYmFjayxcbiAgICApO1xuICB9LFxuXG4gIGFib3J0UmVxdWVzdChyZXF1ZXN0SWQ6IG51bWJlcikge1xuICAgIE5hdGl2ZU5ldHdvcmtpbmdJT1MuYWJvcnRSZXF1ZXN0KHJlcXVlc3RJZCk7XG4gIH0sXG5cbiAgY2xlYXJDb29raWVzKGNhbGxiYWNrOiAocmVzdWx0OiBib29sZWFuKSA9PiB2b2lkKSB7XG4gICAgTmF0aXZlTmV0d29ya2luZ0lPUy5jbGVhckNvb2tpZXMoY2FsbGJhY2spO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUkNUTmV0d29ya2luZztcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBRWIsSUFBQU8sc0JBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFRLG1CQUFBLEdBQUFULHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBUyxvQkFBQSxHQUFBVixzQkFBQSxDQUFBQyxPQUFBO0FBQXdELFNBQUFVLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFaLE1BQUEsQ0FBQWEsSUFBQSxDQUFBSCxDQUFBLE9BQUFWLE1BQUEsQ0FBQWMscUJBQUEsUUFBQUMsQ0FBQSxHQUFBZixNQUFBLENBQUFjLHFCQUFBLENBQUFKLENBQUEsR0FBQUMsQ0FBQSxLQUFBSSxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTCxDQUFBLFdBQUFYLE1BQUEsQ0FBQWlCLHdCQUFBLENBQUFQLENBQUEsRUFBQUMsQ0FBQSxFQUFBTyxVQUFBLE9BQUFOLENBQUEsQ0FBQU8sSUFBQSxDQUFBQyxLQUFBLENBQUFSLENBQUEsRUFBQUcsQ0FBQSxZQUFBSCxDQUFBO0FBQUEsU0FBQVMsY0FBQVgsQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQVcsU0FBQSxDQUFBQyxNQUFBLEVBQUFaLENBQUEsVUFBQUMsQ0FBQSxXQUFBVSxTQUFBLENBQUFYLENBQUEsSUFBQVcsU0FBQSxDQUFBWCxDQUFBLFFBQUFBLENBQUEsT0FBQUYsT0FBQSxDQUFBVCxNQUFBLENBQUFZLENBQUEsT0FBQVksT0FBQSxXQUFBYixDQUFBLFFBQUFOLGdCQUFBLENBQUFELE9BQUEsRUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQSxTQUFBWCxNQUFBLENBQUF5Qix5QkFBQSxHQUFBekIsTUFBQSxDQUFBMEIsZ0JBQUEsQ0FBQWhCLENBQUEsRUFBQVYsTUFBQSxDQUFBeUIseUJBQUEsQ0FBQWIsQ0FBQSxLQUFBSCxPQUFBLENBQUFULE1BQUEsQ0FBQVksQ0FBQSxHQUFBWSxPQUFBLFdBQUFiLENBQUEsSUFBQVgsTUFBQSxDQUFBQyxjQUFBLENBQUFTLENBQUEsRUFBQUMsQ0FBQSxFQUFBWCxNQUFBLENBQUFpQix3QkFBQSxDQUFBTCxDQUFBLEVBQUFELENBQUEsaUJBQUFELENBQUE7QUFpRHhELElBQU1pQixhQUFhLEdBQUc7RUFDcEJDLFdBQVcsV0FBWEEsV0FBV0EsQ0FDVEMsU0FBWSxFQUNaQyxRQUFzRSxFQUN0RUMsT0FBZSxFQUNJO0lBRW5CLE9BQU9DLDhCQUFxQixDQUFDSixXQUFXLENBQUNDLFNBQVMsRUFBRUMsUUFBUSxFQUFFQyxPQUFPLENBQUM7RUFDeEUsQ0FBQztFQUVERSxXQUFXLFdBQVhBLFdBQVdBLENBQ1RDLE1BQWMsRUFDZEMsWUFBb0IsRUFDcEJDLEdBQVcsRUFDWEMsT0FBYyxFQUNkQyxJQUFpQixFQUNqQkMsWUFBZ0MsRUFDaENDLGtCQUEyQixFQUMzQkMsT0FBZSxFQUNmQyxRQUFxQyxFQUNyQ0MsZUFBd0IsRUFDeEI7SUFDQSxJQUFNQyxJQUFJLEdBQUcsSUFBQUMsMkJBQWtCLEVBQUNQLElBQUksQ0FBQztJQUNyQ1EsNEJBQW1CLENBQUNiLFdBQVcsQ0FDN0I7TUFDRUMsTUFBTSxFQUFOQSxNQUFNO01BQ05FLEdBQUcsRUFBSEEsR0FBRztNQUNIRSxJQUFJLEVBQUFqQixhQUFBLENBQUFBLGFBQUEsS0FBTXVCLElBQUk7UUFBRVQsWUFBWSxFQUFaQTtNQUFZLEVBQUM7TUFDN0JFLE9BQU8sRUFBUEEsT0FBTztNQUNQRSxZQUFZLEVBQVpBLFlBQVk7TUFDWkMsa0JBQWtCLEVBQWxCQSxrQkFBa0I7TUFDbEJDLE9BQU8sRUFBUEEsT0FBTztNQUNQRSxlQUFlLEVBQWZBO0lBQ0YsQ0FBQyxFQUNERCxRQUNGLENBQUM7RUFDSCxDQUFDO0VBRURLLFlBQVksV0FBWkEsWUFBWUEsQ0FBQ0MsU0FBaUIsRUFBRTtJQUM5QkYsNEJBQW1CLENBQUNDLFlBQVksQ0FBQ0MsU0FBUyxDQUFDO0VBQzdDLENBQUM7RUFFREMsWUFBWSxXQUFaQSxZQUFZQSxDQUFDUCxRQUFtQyxFQUFFO0lBQ2hESSw0QkFBbUIsQ0FBQ0csWUFBWSxDQUFDUCxRQUFRLENBQUM7RUFDNUM7QUFDRixDQUFDO0FBQUMsSUFBQVEsUUFBQSxHQUFBaEQsT0FBQSxDQUFBRSxPQUFBLEdBRWF1QixhQUFhIiwiaWdub3JlTGlzdCI6W119