{"version":3,"names":["_getJestObj","mock","authService","forgotPassword","jest","fn","Alert","alert","impactAsync","notificationAsync","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_reactNative2","_AuthService","_useForgotPasswordScreen","_require","mockAuthService","describe","mockNavigation","goBack","beforeEach","clearAllMocks","it","_renderHook","renderHook","useForgotPasswordScreen","navigation","result","expect","current","values","email","toBe","loading","default","_renderHook2","act","setValue","waitFor","errors","toBeDefined","_renderHook3","isValid","mockResolvedValue","success","message","_renderHook4","handleSubmit","toHaveBeenCalledWith","toHaveBeenCalled","mockRejectedValue","Error","_renderHook5","_renderHook6","navigateBack"],"sources":["useForgotPasswordScreen.test.ts"],"sourcesContent":["/**\n * useForgotPasswordScreen Tests\n * Unit tests for forgot password functionality\n */\n\nimport { act, renderHook, waitFor } from \"@testing-library/react-native\";\nimport { Alert } from \"react-native\";\nimport { authService } from \"../../../services/AuthService\";\nimport { useForgotPasswordScreen } from \"../useForgotPasswordScreen\";\n\njest.mock(\"../../../services/AuthService\", () => ({\n  authService: {\n    forgotPassword: jest.fn(),\n  },\n}));\n\njest.mock(\"react-native\", () => ({\n  Alert: {\n    alert: jest.fn(),\n  },\n}));\n\njest.mock(\"expo-haptics\", () => ({\n  impactAsync: jest.fn(),\n  notificationAsync: jest.fn(),\n}));\n\nconst mockAuthService = authService as jest.Mocked<typeof authService>;\n\ndescribe(\"useForgotPasswordScreen\", () => {\n  const mockNavigation = {\n    goBack: jest.fn(),\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Initial State\", () => {\n    it(\"should initialize with empty email\", () => {\n      const { result } = renderHook(() =>\n        useForgotPasswordScreen({ navigation: mockNavigation as any })\n      );\n      \n      expect(result.current.values.email).toBe(\"\");\n      expect(result.current.loading).toBe(false);\n    });\n  });\n\n  describe(\"Validation\", () => {\n    it(\"should validate email format\", async () => {\n      const { result } = renderHook(() =>\n        useForgotPasswordScreen({ navigation: mockNavigation as any })\n      );\n      \n      act(() => {\n        result.current.setValue(\"email\", \"invalid-email\");\n      });\n\n      await waitFor(() => {\n        expect(result.current.errors.email).toBeDefined();\n      });\n    });\n\n    it(\"should require email\", () => {\n      const { result } = renderHook(() =>\n        useForgotPasswordScreen({ navigation: mockNavigation as any })\n      );\n      \n      expect(result.current.isValid).toBe(false);\n    });\n  });\n\n  describe(\"handleSubmit\", () => {\n    it(\"should send password reset successfully\", async () => {\n      mockAuthService.forgotPassword.mockResolvedValue({\n        success: true,\n        message: \"Email sent\",\n      } as any);\n      \n      const { result } = renderHook(() =>\n        useForgotPasswordScreen({ navigation: mockNavigation as any })\n      );\n\n      act(() => {\n        result.current.setValue(\"email\", \"test@example.com\");\n      });\n\n      await act(async () => {\n        await result.current.handleSubmit();\n      });\n\n      expect(mockAuthService.forgotPassword).toHaveBeenCalledWith(\"test@example.com\");\n      expect(Alert.alert).toHaveBeenCalled();\n    });\n\n    it(\"should handle API errors\", async () => {\n      mockAuthService.forgotPassword.mockRejectedValue(new Error(\"API Error\"));\n      \n      const { result } = renderHook(() =>\n        useForgotPasswordScreen({ navigation: { goBack: jest.fn() } as any })\n      );\n\n      act(() => {\n        result.current.setValue(\"email\", \"test@example.com\");\n      });\n\n      await act(async () => {\n        await result.current.handleSubmit();\n      });\n\n      expect(Alert.alert).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Navigation\", () => {\n    it(\"should provide navigation handlers\", () => {\n      const { result } = renderHook(() =>\n        useForgotPasswordScreen({ navigation: mockNavigation as any })\n      );\n\n      expect(result.current.navigateBack).toBeDefined();\n      expect(typeof result.current.navigateBack).toBe(\"function\");\n    });\n  });\n});\n\n"],"mappings":"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","ignoreList":[]}