4156ff17717d8f5dde7582edbf76df79
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScrollPersistence = useScrollPersistence;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _logger = require("../../services/logger");
function useScrollPersistence(_ref) {
  var key = _ref.key,
    _ref$enabled = _ref.enabled,
    enabled = _ref$enabled === void 0 ? true : _ref$enabled;
  var listRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    initialOffset = _useState2[0],
    setInitialOffset = _useState2[1];
  var didRestoreRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    var restore = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        if (!enabled) return;
        try {
          var saved = yield _asyncStorage.default.getItem(key);
          if (saved) {
            var offset = Number(saved);
            setInitialOffset(offset);
          }
        } catch (error) {
          var err = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Failed to restore scroll position', {
            key: key,
            error: err
          });
        }
      });
      return function restore() {
        return _ref2.apply(this, arguments);
      };
    }();
    void restore();
  }, [key, enabled]);
  (0, _react.useEffect)(function () {
    if (initialOffset > 0 && !didRestoreRef.current) {
      requestAnimationFrame(function () {
        var _listRef$current;
        (_listRef$current = listRef.current) == null ? void 0 : _listRef$current.scrollToOffset({
          offset: initialOffset,
          animated: false
        });
        didRestoreRef.current = true;
      });
    }
  }, [initialOffset]);
  var handleScroll = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (offset) {
      if (!enabled) return;
      try {
        yield _asyncStorage.default.setItem(key, String(offset));
      } catch (error) {
        var err = error instanceof Error ? error : new Error(String(error));
        _logger.logger.error('Failed to save scroll position', {
          key: key,
          error: err
        });
      }
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [key, enabled]);
  var restoreScroll = (0, _react.useCallback)(function () {
    didRestoreRef.current = false;
    void handleScroll(0);
  }, [handleScroll]);
  return {
    listRef: listRef,
    initialOffset: initialOffset,
    handleScroll: handleScroll,
    restoreScroll: restoreScroll
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbG9nZ2VyIiwidXNlU2Nyb2xsUGVyc2lzdGVuY2UiLCJfcmVmIiwia2V5IiwiX3JlZiRlbmFibGVkIiwiZW5hYmxlZCIsImxpc3RSZWYiLCJ1c2VSZWYiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwiaW5pdGlhbE9mZnNldCIsInNldEluaXRpYWxPZmZzZXQiLCJkaWRSZXN0b3JlUmVmIiwidXNlRWZmZWN0IiwicmVzdG9yZSIsIl9yZWYyIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwic2F2ZWQiLCJBc3luY1N0b3JhZ2UiLCJnZXRJdGVtIiwib2Zmc2V0IiwiTnVtYmVyIiwiZXJyb3IiLCJlcnIiLCJFcnJvciIsIlN0cmluZyIsImxvZ2dlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiY3VycmVudCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9saXN0UmVmJGN1cnJlbnQiLCJzY3JvbGxUb09mZnNldCIsImFuaW1hdGVkIiwiaGFuZGxlU2Nyb2xsIiwidXNlQ2FsbGJhY2siLCJfcmVmMyIsInNldEl0ZW0iLCJfeCIsInJlc3RvcmVTY3JvbGwiXSwic291cmNlcyI6WyJ1c2VTY3JvbGxQZXJzaXN0ZW5jZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gXCJAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZVwiO1xuaW1wb3J0IHR5cGUgeyBGbGF0TGlzdCB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9sb2dnZXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBVc2VTY3JvbGxQZXJzaXN0ZW5jZU9wdGlvbnMge1xuICBrZXk6IHN0cmluZztcbiAgZW5hYmxlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU2Nyb2xsUGVyc2lzdGVuY2VSZXR1cm4ge1xuICBsaXN0UmVmOiBSZWFjdC5SZWZPYmplY3Q8RmxhdExpc3Q8YW55Pj47XG4gIGluaXRpYWxPZmZzZXQ6IG51bWJlcjtcbiAgaGFuZGxlU2Nyb2xsOiAob2Zmc2V0OiBudW1iZXIpID0+IFByb21pc2U8dm9pZD47XG4gIHJlc3RvcmVTY3JvbGw6ICgpID0+IHZvaWQ7XG59XG5cbi8qKlxuICogSG9vayBmb3IgcGVyc2lzdGluZyBzY3JvbGwgcG9zaXRpb24gdG8gQXN5bmNTdG9yYWdlXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHsgbGlzdFJlZiwgaW5pdGlhbE9mZnNldCwgaGFuZGxlU2Nyb2xsLCByZXN0b3JlU2Nyb2xsIH0gPSB1c2VTY3JvbGxQZXJzaXN0ZW5jZSh7XG4gKiAgIGtleTogJ21hdGNoZXNfc2Nyb2xsJyxcbiAqIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2Nyb2xsUGVyc2lzdGVuY2Uoe1xuICBrZXksXG4gIGVuYWJsZWQgPSB0cnVlLFxufTogVXNlU2Nyb2xsUGVyc2lzdGVuY2VPcHRpb25zKTogVXNlU2Nyb2xsUGVyc2lzdGVuY2VSZXR1cm4ge1xuICBjb25zdCBsaXN0UmVmID0gdXNlUmVmPEZsYXRMaXN0PGFueT4+KG51bGwpO1xuICBjb25zdCBbaW5pdGlhbE9mZnNldCwgc2V0SW5pdGlhbE9mZnNldF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xuICBjb25zdCBkaWRSZXN0b3JlUmVmID0gdXNlUmVmKGZhbHNlKTtcblxuICAvLyBSZXN0b3JlIHNjcm9sbCBwb3NpdGlvbiBvbiBtb3VudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHJlc3RvcmUgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoIWVuYWJsZWQpIHJldHVybjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2F2ZWQgPSBhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICBpZiAoc2F2ZWQpIHtcbiAgICAgICAgICBjb25zdCBvZmZzZXQgPSBOdW1iZXIoc2F2ZWQpO1xuICAgICAgICAgIHNldEluaXRpYWxPZmZzZXQob2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAgICAgY29uc3QgZXJyID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFN0cmluZyhlcnJvcikpO1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbicsIHsga2V5LCBlcnJvcjogZXJyIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2b2lkIHJlc3RvcmUoKTtcbiAgfSwgW2tleSwgZW5hYmxlZF0pO1xuXG4gIC8vIFNjcm9sbCB0byBpbml0aWFsIHBvc2l0aW9uIHdoZW4gZGF0YSBsb2Fkc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpbml0aWFsT2Zmc2V0ID4gMCAmJiAhZGlkUmVzdG9yZVJlZi5jdXJyZW50KSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBsaXN0UmVmLmN1cnJlbnQ/LnNjcm9sbFRvT2Zmc2V0KHtcbiAgICAgICAgICBvZmZzZXQ6IGluaXRpYWxPZmZzZXQsXG4gICAgICAgICAgYW5pbWF0ZWQ6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgZGlkUmVzdG9yZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2luaXRpYWxPZmZzZXRdKTtcblxuICBjb25zdCBoYW5kbGVTY3JvbGwgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAob2Zmc2V0OiBudW1iZXIpID0+IHtcbiAgICAgIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBBc3luY1N0b3JhZ2Uuc2V0SXRlbShrZXksIFN0cmluZyhvZmZzZXQpKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihTdHJpbmcoZXJyb3IpKTtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gc2F2ZSBzY3JvbGwgcG9zaXRpb24nLCB7IGtleSwgZXJyb3I6IGVyciB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtrZXksIGVuYWJsZWRdLFxuICApO1xuXG4gIGNvbnN0IHJlc3RvcmVTY3JvbGwgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgZGlkUmVzdG9yZVJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgdm9pZCBoYW5kbGVTY3JvbGwoMCk7XG4gIH0sIFtoYW5kbGVTY3JvbGxdKTtcblxuICByZXR1cm4ge1xuICAgIGxpc3RSZWYsXG4gICAgaW5pdGlhbE9mZnNldCxcbiAgICBoYW5kbGVTY3JvbGwsXG4gICAgcmVzdG9yZVNjcm9sbCxcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBc0JPLFNBQVNJLG9CQUFvQkEsQ0FBQUMsSUFBQSxFQUd3QjtFQUFBLElBRjFEQyxHQUFHLEdBQUFELElBQUEsQ0FBSEMsR0FBRztJQUFBQyxZQUFBLEdBQUFGLElBQUEsQ0FDSEcsT0FBTztJQUFQQSxPQUFPLEdBQUFELFlBQUEsY0FBRyxJQUFJLEdBQUFBLFlBQUE7RUFFZCxJQUFNRSxPQUFPLEdBQUcsSUFBQUMsYUFBTSxFQUFnQixJQUFJLENBQUM7RUFDM0MsSUFBQUMsU0FBQSxHQUEwQyxJQUFBQyxlQUFRLEVBQVMsQ0FBQyxDQUFDO0lBQUFDLFVBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBLEVBQUFKLFNBQUE7SUFBdERLLGFBQWEsR0FBQUgsVUFBQTtJQUFFSSxnQkFBZ0IsR0FBQUosVUFBQTtFQUN0QyxJQUFNSyxhQUFhLEdBQUcsSUFBQVIsYUFBTSxFQUFDLEtBQUssQ0FBQztFQUduQyxJQUFBUyxnQkFBUyxFQUFDLFlBQU07SUFDZCxJQUFNQyxPQUFPO01BQUEsSUFBQUMsS0FBQSxPQUFBQyxrQkFBQSxDQUFBUCxPQUFBLEVBQUcsYUFBWTtRQUMxQixJQUFJLENBQUNQLE9BQU8sRUFBRTtRQUVkLElBQUk7VUFDRixJQUFNZSxLQUFLLFNBQVNDLHFCQUFZLENBQUNDLE9BQU8sQ0FBQ25CLEdBQUcsQ0FBQztVQUM3QyxJQUFJaUIsS0FBSyxFQUFFO1lBQ1QsSUFBTUcsTUFBTSxHQUFHQyxNQUFNLENBQUNKLEtBQUssQ0FBQztZQUM1Qk4sZ0JBQWdCLENBQUNTLE1BQU0sQ0FBQztVQUMxQjtRQUNGLENBQUMsQ0FBQyxPQUFPRSxLQUFjLEVBQUU7VUFDdkIsSUFBTUMsR0FBRyxHQUFHRCxLQUFLLFlBQVlFLEtBQUssR0FBR0YsS0FBSyxHQUFHLElBQUlFLEtBQUssQ0FBQ0MsTUFBTSxDQUFDSCxLQUFLLENBQUMsQ0FBQztVQUNyRUksY0FBTSxDQUFDSixLQUFLLENBQUMsbUNBQW1DLEVBQUU7WUFBRXRCLEdBQUcsRUFBSEEsR0FBRztZQUFFc0IsS0FBSyxFQUFFQztVQUFJLENBQUMsQ0FBQztRQUN4RTtNQUNGLENBQUM7TUFBQSxnQkFiS1QsT0FBT0EsQ0FBQTtRQUFBLE9BQUFDLEtBQUEsQ0FBQVksS0FBQSxPQUFBQyxTQUFBO01BQUE7SUFBQSxHQWFaO0lBRUQsS0FBS2QsT0FBTyxDQUFDLENBQUM7RUFDaEIsQ0FBQyxFQUFFLENBQUNkLEdBQUcsRUFBRUUsT0FBTyxDQUFDLENBQUM7RUFHbEIsSUFBQVcsZ0JBQVMsRUFBQyxZQUFNO0lBQ2QsSUFBSUgsYUFBYSxHQUFHLENBQUMsSUFBSSxDQUFDRSxhQUFhLENBQUNpQixPQUFPLEVBQUU7TUFDL0NDLHFCQUFxQixDQUFDLFlBQU07UUFBQSxJQUFBQyxnQkFBQTtRQUMxQixDQUFBQSxnQkFBQSxHQUFBNUIsT0FBTyxDQUFDMEIsT0FBTyxxQkFBZkUsZ0JBQUEsQ0FBaUJDLGNBQWMsQ0FBQztVQUM5QlosTUFBTSxFQUFFVixhQUFhO1VBQ3JCdUIsUUFBUSxFQUFFO1FBQ1osQ0FBQyxDQUFDO1FBQ0ZyQixhQUFhLENBQUNpQixPQUFPLEdBQUcsSUFBSTtNQUM5QixDQUFDLENBQUM7SUFDSjtFQUNGLENBQUMsRUFBRSxDQUFDbkIsYUFBYSxDQUFDLENBQUM7RUFFbkIsSUFBTXdCLFlBQVksR0FBRyxJQUFBQyxrQkFBVztJQUFBLElBQUFDLEtBQUEsT0FBQXBCLGtCQUFBLENBQUFQLE9BQUEsRUFDOUIsV0FBT1csTUFBYyxFQUFLO01BQ3hCLElBQUksQ0FBQ2xCLE9BQU8sRUFBRTtNQUVkLElBQUk7UUFDRixNQUFNZ0IscUJBQVksQ0FBQ21CLE9BQU8sQ0FBQ3JDLEdBQUcsRUFBRXlCLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDLENBQUM7TUFDakQsQ0FBQyxDQUFDLE9BQU9FLEtBQWMsRUFBRTtRQUN2QixJQUFNQyxHQUFHLEdBQUdELEtBQUssWUFBWUUsS0FBSyxHQUFHRixLQUFLLEdBQUcsSUFBSUUsS0FBSyxDQUFDQyxNQUFNLENBQUNILEtBQUssQ0FBQyxDQUFDO1FBQ3JFSSxjQUFNLENBQUNKLEtBQUssQ0FBQyxnQ0FBZ0MsRUFBRTtVQUFFdEIsR0FBRyxFQUFIQSxHQUFHO1VBQUVzQixLQUFLLEVBQUVDO1FBQUksQ0FBQyxDQUFDO01BQ3JFO0lBQ0YsQ0FBQztJQUFBLGlCQUFBZSxFQUFBO01BQUEsT0FBQUYsS0FBQSxDQUFBVCxLQUFBLE9BQUFDLFNBQUE7SUFBQTtFQUFBLEtBQ0QsQ0FBQzVCLEdBQUcsRUFBRUUsT0FBTyxDQUNmLENBQUM7RUFFRCxJQUFNcUMsYUFBYSxHQUFHLElBQUFKLGtCQUFXLEVBQUMsWUFBTTtJQUN0Q3ZCLGFBQWEsQ0FBQ2lCLE9BQU8sR0FBRyxLQUFLO0lBQzdCLEtBQUtLLFlBQVksQ0FBQyxDQUFDLENBQUM7RUFDdEIsQ0FBQyxFQUFFLENBQUNBLFlBQVksQ0FBQyxDQUFDO0VBRWxCLE9BQU87SUFDTC9CLE9BQU8sRUFBUEEsT0FBTztJQUNQTyxhQUFhLEVBQWJBLGFBQWE7SUFDYndCLFlBQVksRUFBWkEsWUFBWTtJQUNaSyxhQUFhLEVBQWJBO0VBQ0YsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119