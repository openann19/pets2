db438137758ddf16db643bfc2a904646
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Typography = exports.Spacing = exports.Shadows = exports.SPRING = exports.GlobalStyles = exports.EASE = exports.DUR = exports.Colors = exports.BorderRadius = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("react-native");
var _designTokens = require("@pawfectmatch/design-tokens");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DUR = exports.DUR = {
  fast: 150,
  normal: 250,
  slow: 400
};
var EASE = exports.EASE = {
  standard: _reactNative.Easing.bezier(0.4, 0, 0.2, 1),
  out: _reactNative.Easing.bezier(0, 0, 0.2, 1),
  in: _reactNative.Easing.bezier(0.4, 0, 1, 1)
};
var SPRING = exports.SPRING = {
  stiff: {
    stiffness: 300,
    damping: 30,
    mass: 0.9
  },
  soft: {
    stiffness: 180,
    damping: 22,
    mass: 1.0
  }
};
var Spacing = exports.Spacing = _objectSpread(_objectSpread({}, _designTokens.SPACING), {}, {
  xs: 4,
  sm: 8,
  md: 16,
  lg: 24,
  xl: 32,
  "2xl": 64,
  "3xl": 96,
  "4xl": 128
});
var BorderRadius = exports.BorderRadius = _designTokens.RADIUS;
var Colors = exports.Colors = _designTokens.COLORS;
var Typography = exports.Typography = _designTokens.TYPOGRAPHY;
var Shadows = exports.Shadows = _designTokens.SHADOWS;
var GlobalStyles = exports.GlobalStyles = {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2Rlc2lnblRva2VucyIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIkRVUiIsImV4cG9ydHMiLCJmYXN0Iiwibm9ybWFsIiwic2xvdyIsIkVBU0UiLCJzdGFuZGFyZCIsIkVhc2luZyIsImJlemllciIsIm91dCIsImluIiwiU1BSSU5HIiwic3RpZmYiLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwibWFzcyIsInNvZnQiLCJTcGFjaW5nIiwiU1BBQ0lORyIsInhzIiwic20iLCJtZCIsImxnIiwieGwiLCJCb3JkZXJSYWRpdXMiLCJSQURJVVMiLCJDb2xvcnMiLCJDT0xPUlMiLCJUeXBvZ3JhcGh5IiwiVFlQT0dSQVBIWSIsIlNoYWRvd3MiLCJTSEFET1dTIiwiR2xvYmFsU3R5bGVzIl0sInNvdXJjZXMiOlsiaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDwn46sIFVOSUZJRUQgQU5JTUFUSU9OIEFQSVxuICogU2luZ2xlIHNvdXJjZSBvZiB0cnV0aCBmb3IgYWxsIGFuaW1hdGlvbiBjb25zdGFudHMgYW5kIHV0aWxpdGllc1xuICogXG4gKiBBbHNvIHByb3ZpZGVzIGJhY2t3YXJkLWNvbXBhdGlibGUgcmUtZXhwb3J0cyBmb3IgZGVzaWduIHRva2Vuc1xuICovXG5cbmltcG9ydCB7IEVhc2luZyB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCB7IFNQQUNJTkcsIFJBRElVUywgQ09MT1JTLCBTSEFET1dTLCBUWVBPR1JBUEhZIH0gZnJvbSBcIkBwYXdmZWN0bWF0Y2gvZGVzaWduLXRva2Vuc1wiO1xuXG4vLyBBbmltYXRpb24gY29uc3RhbnRzXG5leHBvcnQgY29uc3QgRFVSID0geyBmYXN0OiAxNTAsIG5vcm1hbDogMjUwLCBzbG93OiA0MDAgfSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IEVBU0UgPSB7XG4gIHN0YW5kYXJkOiBFYXNpbmcuYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSxcbiAgb3V0OiBFYXNpbmcuYmV6aWVyKDAsIDAsIDAuMiwgMSksXG4gIGluOiBFYXNpbmcuYmV6aWVyKDAuNCwgMCwgMSwgMSksXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgU1BSSU5HID0ge1xuICBzdGlmZjogeyBzdGlmZm5lc3M6IDMwMCwgZGFtcGluZzogMzAsIG1hc3M6IDAuOSB9LFxuICBzb2Z0OiB7IHN0aWZmbmVzczogMTgwLCBkYW1waW5nOiAyMiwgbWFzczogMS4wIH0sXG59IGFzIGNvbnN0O1xuXG4vLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5IC0gcmUtZXhwb3J0IGRlc2lnbiB0b2tlbnNcbi8vIFRPRE86IENvbXBvbmVudHMgc2hvdWxkIGltcG9ydCB0aGVzZSBmcm9tIEBwYXdmZWN0bWF0Y2gvZGVzaWduLXRva2VucyBkaXJlY3RseVxuZXhwb3J0IGNvbnN0IFNwYWNpbmcgPSB7XG4gIC4uLlNQQUNJTkcsXG4gIHhzOiA0LFxuICBzbTogOCxcbiAgbWQ6IDE2LFxuICBsZzogMjQsXG4gIHhsOiAzMixcbiAgXCIyeGxcIjogNjQsXG4gIFwiM3hsXCI6IDk2LFxuICBcIjR4bFwiOiAxMjgsXG59O1xuZXhwb3J0IGNvbnN0IEJvcmRlclJhZGl1cyA9IFJBRElVUztcbmV4cG9ydCBjb25zdCBDb2xvcnMgPSBDT0xPUlM7IC8vIFJlLWV4cG9ydCBDb2xvcnMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmV4cG9ydCBjb25zdCBUeXBvZ3JhcGh5ID0gVFlQT0dSQVBIWTsgLy8gUmUtZXhwb3J0IFR5cG9ncmFwaHkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmV4cG9ydCBjb25zdCBTaGFkb3dzID0gU0hBRE9XUzsgLy8gUmUtZXhwb3J0IFNoYWRvd3MgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmV4cG9ydCBjb25zdCBHbG9iYWxTdHlsZXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge307IC8vIEFkZCBHbG9iYWxTdHlsZXMgcGxhY2Vob2xkZXIgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcblxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQU9BLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUEyRixTQUFBRSxRQUFBQyxDQUFBLEVBQUFDLENBQUEsUUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQSxPQUFBRyxNQUFBLENBQUFFLHFCQUFBLFFBQUFDLENBQUEsR0FBQUgsTUFBQSxDQUFBRSxxQkFBQSxDQUFBTCxDQUFBLEdBQUFDLENBQUEsS0FBQUssQ0FBQSxHQUFBQSxDQUFBLENBQUFDLE1BQUEsV0FBQU4sQ0FBQSxXQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFSLENBQUEsRUFBQUMsQ0FBQSxFQUFBUSxVQUFBLE9BQUFQLENBQUEsQ0FBQVEsSUFBQSxDQUFBQyxLQUFBLENBQUFULENBQUEsRUFBQUksQ0FBQSxZQUFBSixDQUFBO0FBQUEsU0FBQVUsY0FBQVosQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQVksU0FBQSxDQUFBQyxNQUFBLEVBQUFiLENBQUEsVUFBQUMsQ0FBQSxXQUFBVyxTQUFBLENBQUFaLENBQUEsSUFBQVksU0FBQSxDQUFBWixDQUFBLFFBQUFBLENBQUEsT0FBQUYsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsT0FBQWEsT0FBQSxXQUFBZCxDQUFBLFFBQUFlLGdCQUFBLENBQUFDLE9BQUEsRUFBQWpCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLENBQUFELENBQUEsU0FBQUUsTUFBQSxDQUFBZSx5QkFBQSxHQUFBZixNQUFBLENBQUFnQixnQkFBQSxDQUFBbkIsQ0FBQSxFQUFBRyxNQUFBLENBQUFlLHlCQUFBLENBQUFoQixDQUFBLEtBQUFILE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLEdBQUFhLE9BQUEsV0FBQWQsQ0FBQSxJQUFBRSxNQUFBLENBQUFpQixjQUFBLENBQUFwQixDQUFBLEVBQUFDLENBQUEsRUFBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBTixDQUFBLEVBQUFELENBQUEsaUJBQUFELENBQUE7QUFHcEYsSUFBTXFCLEdBQUcsR0FBQUMsT0FBQSxDQUFBRCxHQUFBLEdBQUc7RUFBRUUsSUFBSSxFQUFFLEdBQUc7RUFBRUMsTUFBTSxFQUFFLEdBQUc7RUFBRUMsSUFBSSxFQUFFO0FBQUksQ0FBVTtBQUUxRCxJQUFNQyxJQUFJLEdBQUFKLE9BQUEsQ0FBQUksSUFBQSxHQUFHO0VBQ2xCQyxRQUFRLEVBQUVDLG1CQUFNLENBQUNDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDdkNDLEdBQUcsRUFBRUYsbUJBQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUNoQ0UsRUFBRSxFQUFFSCxtQkFBTSxDQUFDQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNoQyxDQUFVO0FBRUgsSUFBTUcsTUFBTSxHQUFBVixPQUFBLENBQUFVLE1BQUEsR0FBRztFQUNwQkMsS0FBSyxFQUFFO0lBQUVDLFNBQVMsRUFBRSxHQUFHO0lBQUVDLE9BQU8sRUFBRSxFQUFFO0lBQUVDLElBQUksRUFBRTtFQUFJLENBQUM7RUFDakRDLElBQUksRUFBRTtJQUFFSCxTQUFTLEVBQUUsR0FBRztJQUFFQyxPQUFPLEVBQUUsRUFBRTtJQUFFQyxJQUFJLEVBQUU7RUFBSTtBQUNqRCxDQUFVO0FBSUgsSUFBTUUsT0FBTyxHQUFBaEIsT0FBQSxDQUFBZ0IsT0FBQSxHQUFBMUIsYUFBQSxDQUFBQSxhQUFBLEtBQ2YyQixxQkFBTztFQUNWQyxFQUFFLEVBQUUsQ0FBQztFQUNMQyxFQUFFLEVBQUUsQ0FBQztFQUNMQyxFQUFFLEVBQUUsRUFBRTtFQUNOQyxFQUFFLEVBQUUsRUFBRTtFQUNOQyxFQUFFLEVBQUUsRUFBRTtFQUNOLEtBQUssRUFBRSxFQUFFO0VBQ1QsS0FBSyxFQUFFLEVBQUU7RUFDVCxLQUFLLEVBQUU7QUFBRyxFQUNYO0FBQ00sSUFBTUMsWUFBWSxHQUFBdkIsT0FBQSxDQUFBdUIsWUFBQSxHQUFHQyxvQkFBTTtBQUMzQixJQUFNQyxNQUFNLEdBQUF6QixPQUFBLENBQUF5QixNQUFBLEdBQUdDLG9CQUFNO0FBQ3JCLElBQU1DLFVBQVUsR0FBQTNCLE9BQUEsQ0FBQTJCLFVBQUEsR0FBR0Msd0JBQVU7QUFDN0IsSUFBTUMsT0FBTyxHQUFBN0IsT0FBQSxDQUFBNkIsT0FBQSxHQUFHQyxxQkFBTztBQUN2QixJQUFNQyxZQUFxQyxHQUFBL0IsT0FBQSxDQUFBK0IsWUFBQSxHQUFHLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==