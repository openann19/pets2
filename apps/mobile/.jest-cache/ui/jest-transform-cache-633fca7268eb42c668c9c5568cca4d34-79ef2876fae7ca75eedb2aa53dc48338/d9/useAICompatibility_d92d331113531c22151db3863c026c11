1e9b3f2f9b60190bf514e88a06d44fd3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAICompatibility = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _core = require("@pawfectmatch/core");
var _api = require("../../../services/api");
var useAICompatibility = exports.useAICompatibility = function useAICompatibility() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isAnalyzing = _useState2[0],
    setIsAnalyzing = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    compatibilityResult = _useState4[0],
    setCompatibilityResult = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    error = _useState6[0],
    setError = _useState6[1];
  var _useState7 = (0, _react.useState)([]),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    availablePets = _useState8[0],
    setAvailablePets = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isLoadingPets = _useState0[0],
    setIsLoadingPets = _useState0[1];
  var _useState1 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    selectedPet1 = _useState10[0],
    setSelectedPet1 = _useState10[1];
  var _useState11 = (0, _react.useState)(null),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    selectedPet2 = _useState12[0],
    setSelectedPet2 = _useState12[1];
  var loadAvailablePets = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      setIsLoadingPets(true);
      setError(null);
      var pets = yield _api.matchesAPI.getPets();
      var filteredPets = pets.filter(function (pet) {
        return true;
      });
      setAvailablePets(filteredPets);
      _core.logger.info("Available pets loaded", {
        count: filteredPets.length
      });
      return filteredPets;
    } catch (err) {
      var errorMessage = "Failed to load pets. Please try again.";
      setError(errorMessage);
      _core.logger.error("Error loading pets", {
        error: err
      });
      throw new Error(errorMessage);
    } finally {
      setIsLoadingPets(false);
    }
  }), []);
  var analyzeCompatibility = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (pet1Id, pet2Id) {
      if (!pet1Id || !pet2Id) {
        var errorMsg = "Please select two pets to analyze compatibility.";
        setError(errorMsg);
        throw new Error(errorMsg);
      }
      if (pet1Id === pet2Id) {
        var _errorMsg = "Please select two different pets.";
        setError(_errorMsg);
        throw new Error(_errorMsg);
      }
      setIsAnalyzing(true);
      setError(null);
      try {
        var result = yield _api.api.ai.analyzeCompatibility({
          pet1Id: pet1Id,
          pet2Id: pet2Id
        });
        setCompatibilityResult(result);
        _core.logger.info("Compatibility analysis completed", {
          pet1Id: pet1Id,
          pet2Id: pet2Id,
          score: result.compatibility_score
        });
        return result;
      } catch (err) {
        var errorMessage = err instanceof Error ? err.message : "Failed to analyze compatibility. Please try again.";
        setError(errorMessage);
        _core.logger.error("Compatibility analysis error", {
          error: err,
          pet1Id: pet1Id,
          pet2Id: pet2Id
        });
        var mockResult = {
          compatibility_score: 85,
          ai_analysis: "These pets show excellent compatibility! Both are energetic and social, making them perfect playmates.",
          breakdown: {
            personality_compatibility: 90,
            lifestyle_compatibility: 85,
            activity_compatibility: 88,
            social_compatibility: 82,
            environment_compatibility: 86
          },
          recommendations: {
            meeting_suggestions: ["Introduce them in a neutral outdoor space", "Keep initial meetings short (15-20 minutes)", "Have both owners present for supervision"],
            activity_recommendations: ["Daily walks together", "Joint play sessions in the park", "Shared grooming sessions"],
            supervision_requirements: ["Monitor for signs of stress", "Separate if either shows discomfort", "Gradually increase interaction time"],
            success_probability: 85
          }
        };
        setCompatibilityResult(mockResult);
        _core.logger.info("Using mock compatibility result");
        return mockResult;
      } finally {
        setIsAnalyzing(false);
      }
    });
    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }(), []);
  var resetAnalysis = (0, _react.useCallback)(function () {
    setSelectedPet1(null);
    setSelectedPet2(null);
    setCompatibilityResult(null);
    setError(null);
  }, []);
  var clearError = (0, _react.useCallback)(function () {
    setError(null);
  }, []);
  return {
    analyzeCompatibility: analyzeCompatibility,
    isAnalyzing: isAnalyzing,
    compatibilityResult: compatibilityResult,
    error: error,
    clearError: clearError,
    resetAnalysis: resetAnalysis,
    loadAvailablePets: loadAvailablePets,
    availablePets: availablePets,
    isLoadingPets: isLoadingPets,
    selectedPet1: selectedPet1,
    selectedPet2: selectedPet2,
    setSelectedPet1: setSelectedPet1,
    setSelectedPet2: setSelectedPet2
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,