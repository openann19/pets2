f6723b1b14c3299d7fcbf6a7280fb62e
"use strict";

_getJestObj().mock("../../../services/gdprService");
_getJestObj().mock("react-native", function () {
  return {
    Alert: {
      alert: jest.fn()
    }
  };
});
_getJestObj().mock("expo-haptics", function () {
  return {
    selectionAsync: jest.fn(),
    impactAsync: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _gdprService = _interopRequireDefault(require("../../../services/gdprService"));
var _useDeactivateAccountScreen = require("../useDeactivateAccountScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGdprService = _gdprService.default;
describe("useDeactivateAccountScreen", function () {
  var mockNavigation = {
    goBack: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe("Initial State", function () {
    it("should initialize with empty state", function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useDeactivateAccountScreen.useDeactivateAccountScreen)();
        }),
        result = _renderHook.result;
      expect(result.current.reason).toBe("");
      expect(result.current.confirmText).toBe("");
      expect(result.current.loading).toBe(false);
    });
    it("should provide deactivation reasons", function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useDeactivateAccountScreen.useDeactivateAccountScreen)();
        }),
        result = _renderHook2.result;
      expect(result.current.reasons).toHaveLength(6);
      expect(result.current.reasons[0]).toBe("Taking a break from dating");
    });
  });
  describe("selectReason", function () {
    it("should set selected reason", function () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useDeactivateAccountScreen.useDeactivateAccountScreen)();
        }),
        result = _renderHook3.result;
      (0, _reactNative.act)(function () {
        result.current.selectReason("Found a partner");
      });
      expect(result.current.reason).toBe("Found a partner");
    });
  });
  describe("setConfirmText", function () {
    it("should update confirmation text", function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useDeactivateAccountScreen.useDeactivateAccountScreen)();
        }),
        result = _renderHook4.result;
      (0, _reactNative.act)(function () {
        result.current.setConfirmText("deactivate");
      });
      expect(result.current.confirmText).toBe("deactivate");
    });
  });
  describe("handleDeactivate", function () {
    it("should require reason selection", (0, _asyncToGenerator2.default)(function* () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useDeactivateAccountScreen.useDeactivateAccountScreen)();
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleDeactivate();
      }));
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Required", "Please select a reason for deactivation.");
      expect(mockGdprService.deleteAccount).not.toHaveBeenCalled();
    }));
    it("should require confirmation text", (0, _asyncToGenerator2.default)(function* () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useDeactivateAccountScreen.useDeactivateAccountScreen)();
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.selectReason("Found a partner");
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleDeactivate();
      }));
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Confirmation Required", 'Please type "deactivate" to confirm.');
    }));
    it("should deactivate account successfully", (0, _asyncToGenerator2.default)(function* () {
      mockGdprService.deleteAccount.mockResolvedValue({
        success: true,
        message: "Account deactivated",
        gracePeriodEndsAt: new Date().toISOString()
      });
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useDeactivateAccountScreen.useDeactivateAccountScreen)();
        }),
        result = _renderHook7.result;
      (0, _reactNative.act)(function () {
        result.current.selectReason("Found a partner");
        result.current.setConfirmText("deactivate");
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleDeactivate();
      }));
      expect(mockGdprService.deleteAccount).toHaveBeenCalledWith({
        password: "N/A",
        reason: "Found a partner",
        feedback: "deactivate"
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Account Deactivated", expect.any(String), expect.any(Array));
    }));
  });
  describe("handleGoBack", function () {
    it("should provide navigation handler", function () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useDeactivateAccountScreen.useDeactivateAccountScreen)();
        }),
        result = _renderHook8.result;
      expect(result.current.handleGoBack).toBeDefined();
      expect(typeof result.current.handleGoBack).toBe("function");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,