cb5679fdd51a98a90df0cae930701774
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FXContainerPresets = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireDefault(require("react-native-reanimated"));
var _useUnifiedAnimations = require("../../hooks/useUnifiedAnimations");
var _usePremiumAnimations = require("../../hooks/usePremiumAnimations");
var _unifiedTheme = require("../../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var FXContainer = function FXContainer(_ref) {
  var children = _ref.children,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? "default" : _ref$type,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "medium" : _ref$variant,
    _ref$isAnimated = _ref.isAnimated,
    isAnimated = _ref$isAnimated === void 0 ? true : _ref$isAnimated,
    _ref$hasShimmer = _ref.hasShimmer,
    hasShimmer = _ref$hasShimmer === void 0 ? false : _ref$hasShimmer,
    _ref$hasGlow = _ref.hasGlow,
    hasGlow = _ref$hasGlow === void 0 ? false : _ref$hasGlow,
    _ref$hasEntrance = _ref.hasEntrance,
    hasEntrance = _ref$hasEntrance === void 0 ? false : _ref$hasEntrance,
    _ref$entranceType = _ref.entranceType,
    entranceType = _ref$entranceType === void 0 ? "slideIn" : _ref$entranceType,
    glowColor = _ref.glowColor,
    _ref$glowIntensity = _ref.glowIntensity,
    glowIntensity = _ref$glowIntensity === void 0 ? 1 : _ref$glowIntensity,
    _ref$shimmerDuration = _ref.shimmerDuration,
    shimmerDuration = _ref$shimmerDuration === void 0 ? 2000 : _ref$shimmerDuration,
    gradientName = _ref.gradientName,
    gradientColors = _ref.gradientColors,
    style = _ref.style,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled;
  var baseStyles = (0, _react.useMemo)(function () {
    var styles = {
      borderRadius: _unifiedTheme.Theme.borderRadius.xl,
      overflow: "hidden"
    };
    switch (type) {
      case "glass":
        return _objectSpread(_objectSpread({}, styles), {}, {
          backgroundColor: _unifiedTheme.Theme.glass.light.backgroundColor,
          borderWidth: 1,
          borderColor: `rgba(255, 255, 255, ${variant === "subtle" ? 0.2 : variant === "strong" ? 0.4 : 0.3})`
        }, _unifiedTheme.Theme.shadows.depth.md);
      case "glow":
        return _objectSpread(_objectSpread({}, styles), {}, {
          backgroundColor: _unifiedTheme.Theme.colors.neutral[0]
        }, _unifiedTheme.Theme.glow.md);
      case "holographic":
        return _objectSpread(_objectSpread({}, styles), {}, {
          backgroundColor: "transparent"
        }, _unifiedTheme.Theme.shadows.depth.lg);
      case "neon":
        return _objectSpread(_objectSpread({}, styles), {}, {
          backgroundColor: _unifiedTheme.Theme.colors.neutral[0],
          borderWidth: 2,
          borderColor: "#00f5ff"
        });
      case "gradient":
        return _objectSpread(_objectSpread({}, styles), {}, {
          backgroundColor: "transparent"
        }, _unifiedTheme.Theme.shadows.depth.md);
      default:
        return _objectSpread(_objectSpread({}, styles), {}, {
          backgroundColor: _unifiedTheme.Theme.colors.neutral[0]
        }, _unifiedTheme.Theme.shadows.depth.sm);
    }
  }, [type, variant]);
  var _useGlowAnimation = (0, _useUnifiedAnimations.useGlowAnimation)(disabled ? "transparent" : glowColor || _unifiedTheme.Theme.colors.primary[500], disabled ? 0 : glowIntensity, 2000),
    glowStyle = _useGlowAnimation.animatedStyle;
  var _useShimmerEffect = (0, _usePremiumAnimations.useShimmerEffect)(!disabled && hasShimmer && isAnimated),
    shimmerStyle = _useShimmerEffect.animatedStyle;
  var _useEntranceAnimation = (0, _useUnifiedAnimations.useEntranceAnimation)(entranceType, 0),
    startEntrance = _useEntranceAnimation.start,
    entranceStyle = _useEntranceAnimation.animatedStyle;
  _react.default.useEffect(function () {
    if (hasEntrance && isAnimated && !disabled) {
      startEntrance();
    }
  }, [hasEntrance, isAnimated, disabled, startEntrance]);
  var renderContent = function renderContent() {
    var content = children;
    if (hasShimmer && isAnimated && !disabled) {
      content = (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: _reactNative.StyleSheet.absoluteFill,
        children: [content, (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
          style: _reactNative.StyleSheet.flatten([_reactNative.StyleSheet.absoluteFill, {
            backgroundColor: "rgba(255, 255, 255, 0.1)"
          }, shimmerStyle]),
          pointerEvents: "none"
        })]
      });
    }
    if (type === "gradient") {
      var _Theme$gradients$prim, _Theme$gradients;
      var fallbackGradient = (_Theme$gradients$prim = (_Theme$gradients = _unifiedTheme.Theme.gradients) == null ? void 0 : _Theme$gradients.primary) != null ? _Theme$gradients$prim : [_unifiedTheme.Theme.colors.primary[500], _unifiedTheme.Theme.colors.primary[400]];
      var colors = gradientColors != null ? gradientColors : fallbackGradient;
      content = (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
        colors: colors,
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        },
        style: _reactNative.StyleSheet.absoluteFill,
        children: content
      });
    }
    return content;
  };
  var AnimatedContainer = _reactNativeReanimated.default.View;
  var appliedGlowStyle = hasGlow && !disabled ? glowStyle : undefined;
  var appliedEntranceStyle = hasEntrance && !disabled ? entranceStyle : undefined;
  var animatedContainerStyle = [baseStyles, appliedGlowStyle, appliedEntranceStyle, style != null ? style : null].filter(function (value) {
    return Boolean(value);
  });
  return isAnimated ? (0, _jsxRuntime.jsx)(AnimatedContainer, {
    style: animatedContainerStyle,
    children: renderContent()
  }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([baseStyles, style]),
    children: renderContent()
  });
};
var FXContainerPresets = exports.FXContainerPresets = {
  glass: function glass(props) {
    return (0, _jsxRuntime.jsx)(FXContainer, _objectSpread(_objectSpread({}, props), {}, {
      type: "glass"
    }));
  },
  glow: function glow(props) {
    return (0, _jsxRuntime.jsx)(FXContainer, _objectSpread(_objectSpread({}, props), {}, {
      type: "glow",
      hasGlow: true,
      glowIntensity: 1.5
    }));
  },
  neon: function neon(props) {
    return (0, _jsxRuntime.jsx)(FXContainer, _objectSpread(_objectSpread({}, props), {}, {
      type: "neon",
      hasGlow: true,
      glowColor: "#00f5ff",
      glowIntensity: 2,
      hasShimmer: true,
      shimmerDuration: 1000
    }));
  },
  premium: function premium(props) {
    return (0, _jsxRuntime.jsx)(FXContainer, _objectSpread(_objectSpread({}, props), {}, {
      type: "gradient",
      gradientName: "primary",
      hasGlow: true,
      hasEntrance: true,
      entranceType: "slideIn"
    }));
  }
};
var _default = exports.default = FXContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,