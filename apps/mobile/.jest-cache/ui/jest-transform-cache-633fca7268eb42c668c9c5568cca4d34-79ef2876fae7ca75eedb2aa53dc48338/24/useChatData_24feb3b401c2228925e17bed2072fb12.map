{"version":3,"names":["_react","require","_reactNative","_core","_logger","_api","_useSocket","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","MAX_MESSAGE_LENGTH","TYPING_TIMEOUT","MESSAGE_BATCH_SIZE","useChatData","matchId","_useAuthStore","useAuthStore","user","_useState","useState","_useState2","_slicedToArray2","messages","setMessages","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","isSending","setIsSending","_useState7","_useState8","isOnline","setIsOnline","_useState9","_useState0","otherUserTyping","setOtherUserTyping","_useState1","_useState10","typingUsers","setTypingUsers","_useState11","_useState12","error","setError","typingTimeoutRef","useRef","socket","useSocket","useEffect","logger","debug","info","socketId","id","handleNewMessage","message","prev","concat","_toConsumableArray2","handleUserTyping","data","isTyping","Set","userId","handleUserOnline","handleUserOffline","on","emit","off","convertMessage","useCallback","coreMsg","senderId","sender","_id","content","timestamp","sentAt","read","readBy","type","messageType","replyTo","loadMessages","_asyncToGenerator2","coreMessages","matchesAPI","getMessages","convertedMessages","map","markAsRead","err","errorMessage","Error","String","Alert","alert","sendMessage","_ref2","_user$_id","trim","messageContent","tempId","Date","now","optimisticMessage","toISOString","status","author","text","undefined","sentMessage","convertedSentMessage","msg","connected","setTimeout","response","getIntelligentResponse","Math","random","_x","_x2","retryMessage","_ref3","messageId","find","_x3","clearError","current","clearTimeout","actions","_responses$randomInde","toLowerCase","includes","responses","randomIndex","floor"],"sources":["useChatData.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Alert } from \"react-native\";\nimport { useAuthStore } from \"@pawfectmatch/core\";\nimport type { Message as CoreMessage } from \"@pawfectmatch/core\";\nimport { logger } from \"../services/logger\";\nimport { matchesAPI } from \"../services/api\";\nimport { useSocket } from \"./useSocket\";\n\nexport interface Message {\n  _id: string;\n  matchId?: string;\n  content: string;\n  senderId: string;\n  timestamp: string;\n  read: boolean;\n  type: \"text\" | \"image\" | \"emoji\" | \"voice\";\n  status?: \"sending\" | \"sent\" | \"failed\";\n  error?: boolean;\n  audioUrl?: string;\n  duration?: number;\n  replyTo?: { _id: string; author?: string; text?: string };\n}\n\nexport interface ChatData {\n  messages: Message[];\n  isLoading: boolean;\n  isSending: boolean;\n  isOnline: boolean;\n  otherUserTyping: boolean;\n  typingUsers: string[];\n  error: string | null;\n}\n\nexport interface ChatActions {\n  sendMessage: (content: string, replyTo?: { _id: string; author?: string; text?: string }) => Promise<void>;\n  loadMessages: () => Promise<void>;\n  retryMessage: (messageId: string) => Promise<void>;\n  markAsRead: () => Promise<void>;\n  clearError: () => void;\n}\n\nexport interface UseChatDataReturn {\n  data: ChatData;\n  actions: ChatActions;\n}\n\nconst MAX_MESSAGE_LENGTH = 500;\nconst TYPING_TIMEOUT = 2000;\nconst MESSAGE_BATCH_SIZE = 20;\n\nexport function useChatData(matchId: string): UseChatDataReturn {\n  const { user } = useAuthStore();\n\n  // State\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSending, setIsSending] = useState(false);\n  const [isOnline, setIsOnline] = useState(true);\n  const [otherUserTyping, setOtherUserTyping] = useState(false);\n  const [typingUsers, setTypingUsers] = useState<string[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  // Refs\n  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const socket = useSocket();\n\n  // Setup socket connection and event listeners\n  useEffect(() => {\n    if (!socket) {\n      logger.debug(\"Socket not available yet\", { matchId });\n      return;\n    }\n\n    logger.info(\"Socket connected for chat\", { matchId, socketId: socket.id });\n\n    // Set up event listeners\n    const handleNewMessage = (message: Message) => {\n      logger.debug(\"New message received via socket\", { message });\n      setMessages((prev) => [...prev, message]);\n    };\n\n    const handleUserTyping = (data: {\n      matchId: string;\n      userId: string;\n      isTyping: boolean;\n    }) => {\n      if (data.matchId === matchId) {\n        setOtherUserTyping(data.isTyping);\n        if (data.isTyping) {\n          setTypingUsers((prev) => [...new Set([...prev, data.userId])]);\n        } else {\n          setTypingUsers((prev) => prev.filter((id) => id !== data.userId));\n        }\n      }\n    };\n\n    const handleUserOnline = (data: { userId: string }) => {\n      setIsOnline(true);\n      logger.debug(\"User came online\", { data });\n    };\n\n    const handleUserOffline = (data: { userId: string }) => {\n      setIsOnline(false);\n      logger.debug(\"User went offline\", { data });\n    };\n\n    // Register event listeners\n    socket.on(\"new_message\", handleNewMessage);\n    socket.on(\"typing\", handleUserTyping);\n    socket.on(\"user_online\", handleUserOnline);\n    socket.on(\"user_offline\", handleUserOffline);\n\n    // Join the match room\n    socket.emit(\"join_match\", { matchId });\n\n    // Cleanup on unmount\n    return () => {\n      logger.debug(\"Cleaning up socket listeners\", { matchId });\n      socket.off(\"new_message\", handleNewMessage);\n      socket.off(\"typing\", handleUserTyping);\n      socket.off(\"user_online\", handleUserOnline);\n      socket.off(\"user_offline\", handleUserOffline);\n      socket.emit(\"leave_match\", { matchId });\n    };\n  }, [socket, matchId]);\n\n  // Helper to convert core Message to local Message format\n  const convertMessage = useCallback((coreMsg: CoreMessage): Message => {\n    const senderId = typeof coreMsg.sender === 'string' ? coreMsg.sender : coreMsg.sender._id;\n    return {\n      _id: coreMsg._id,\n      content: coreMsg.content,\n      senderId,\n      timestamp: coreMsg.sentAt,\n      read: coreMsg.readBy.length > 0,\n      type: coreMsg.messageType === 'text' ? 'text' : \n            coreMsg.messageType === 'image' ? 'image' :\n            coreMsg.messageType === 'voice' ? 'voice' : 'text',\n      replyTo: coreMsg.replyTo,\n      error: false,\n    };\n  }, []);\n\n  // Load messages from API\n  const loadMessages = useCallback(async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const coreMessages = await matchesAPI.getMessages(matchId);\n\n      if (coreMessages.length > 0) {\n        const convertedMessages = coreMessages.map(convertMessage);\n        setMessages(convertedMessages);\n        await markAsRead();\n      } else {\n        setMessages([]);\n      }\n    } catch (err) {\n      const errorMessage =\n        \"Failed to load messages. Please check your connection and try again.\";\n      logger.error(\"Failed to load messages\", { error: err instanceof Error ? err : new Error(String(err)), matchId });\n      setError(errorMessage);\n      Alert.alert(\"Connection Error\", errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [matchId, convertMessage]);\n\n  // Send message with optimistic updates\n  const sendMessage = useCallback(\n    async (content: string, replyTo?: { _id: string; author?: string; text?: string }): Promise<void> => {\n      if (!content.trim() || isSending) return;\n\n      const messageContent = content.trim();\n      const tempId = `temp_${Date.now()}`;\n\n      // Optimistic UI update\n      const optimisticMessage: Message = {\n        _id: tempId,\n        content: messageContent,\n        senderId: user?._id ?? \"me\",\n        timestamp: new Date().toISOString(),\n        read: false,\n        type: \"text\",\n        status: \"sending\",\n        replyTo: replyTo ? { _id: replyTo._id, author: replyTo.author, text: replyTo.text } : undefined,\n      };\n\n      setIsSending(true);\n      setMessages((prev) => [...prev, optimisticMessage]);\n\n      try {\n        const sentMessage = await matchesAPI.sendMessage(\n          matchId,\n          messageContent,\n          replyTo,\n        );\n\n        // Convert and replace optimistic message with server response\n        const convertedSentMessage = convertMessage(sentMessage);\n        setMessages((prev) =>\n          prev.map(\n            (msg): Message =>\n              msg._id === tempId ? { ...convertedSentMessage, status: \"sent\" } : msg,\n          ),\n        );\n\n        // Emit to socket for real-time updates\n        if (socket && socket.connected) {\n          socket.emit(\"send_message\", sentMessage);\n          socket.emit(\"typing\", {\n            matchId,\n            userId: user?._id,\n            isTyping: false,\n          });\n        }\n\n        // Simulate realistic response for demo\n        setTimeout(() => {\n          setOtherUserTyping(true);\n          setTimeout(\n            () => {\n              setOtherUserTyping(false);\n              const response: Message = {\n                _id: `response_${Date.now()}`,\n                content: getIntelligentResponse(messageContent),\n                senderId: \"other\",\n                timestamp: new Date().toISOString(),\n                read: false,\n                type: \"text\",\n              };\n\n              setMessages((prev) => [...prev, response]);\n            },\n            1500 + Math.random() * 1000,\n          );\n        }, 800);\n      } catch (err) {\n        logger.error(\"Failed to send message\", {\n          error: err instanceof Error ? err : new Error(String(err)),\n          matchId,\n          content,\n        });\n\n        // Show error state\n        setMessages((prev) =>\n          prev.map((msg) =>\n            msg._id === tempId\n              ? { ...msg, status: \"failed\", error: true }\n              : msg,\n          ),\n        );\n\n        setError(\"Failed to send message. Please try again.\");\n      } finally {\n        setIsSending(false);\n      }\n    },\n    [isSending, user?._id, matchId],\n  );\n\n  // Retry failed message\n  const retryMessage = useCallback(\n    async (messageId: string): Promise<void> => {\n      const message = messages.find((msg) => msg._id === messageId);\n      if (!message) return;\n\n      const retryMessage: Message = {\n        ...message,\n        _id: `retry_${Date.now()}`,\n        status: \"sending\",\n        error: false,\n      };\n\n      setMessages((prev) =>\n        prev.map((msg) => (msg._id === messageId ? retryMessage : msg)),\n      );\n\n      try {\n        await matchesAPI.sendMessage(matchId, message.content);\n        setMessages((prev) =>\n          prev.map((msg) =>\n            msg._id === retryMessage._id\n              ? { ...msg, status: \"sent\", error: false }\n              : msg,\n          ),\n        );\n      } catch (err) {\n        logger.error(\"Failed to retry message\", { error: err instanceof Error ? err : new Error(String(err)), messageId });\n        setMessages((prev) =>\n          prev.map((msg) =>\n            msg._id === retryMessage._id\n              ? { ...msg, status: \"failed\", error: true }\n              : msg,\n          ),\n        );\n      }\n    },\n    [messages, matchId],\n  );\n\n  // Mark messages as read\n  const markAsRead = useCallback(async (): Promise<void> => {\n    try {\n      // API call would be implemented here if endpoint exists\n      logger.debug(\"Messages marked as read\", { matchId });\n      setMessages((prev) => prev.map((msg) => ({ ...msg, read: true })));\n    } catch (err) {\n      logger.error(\"Failed to mark messages as read\", { error: err instanceof Error ? err : new Error(String(err)), matchId });\n    }\n  }, [matchId]);\n\n  // Clear error state\n  const clearError = useCallback((): void => {\n    setError(null);\n  }, []);\n\n  // Load messages on mount\n  useEffect(() => {\n    loadMessages();\n  }, [loadMessages]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    data: {\n      messages,\n      isLoading,\n      isSending,\n      isOnline,\n      otherUserTyping,\n      typingUsers,\n      error,\n    },\n    actions: {\n      sendMessage,\n      loadMessages,\n      retryMessage,\n      markAsRead,\n      clearError,\n    },\n  };\n}\n\n// Intelligent response generation based on message content\nfunction getIntelligentResponse(messageContent: string): string {\n  const content = messageContent.toLowerCase();\n\n  if (\n    content.includes(\"weekend\") ||\n    content.includes(\"saturday\") ||\n    content.includes(\"sunday\")\n  ) {\n    return \"Weekends work perfectly for me! My schedule is pretty flexible then 📅\";\n  }\n  if (content.includes(\"park\") || content.includes(\"dog park\")) {\n    return \"The dog park sounds amazing! My pup absolutely loves meeting new friends there 🌳🐕\";\n  }\n  if (content.includes(\"time\") || content.includes(\"when\")) {\n    return \"I'm pretty flexible with timing! What works best for your schedule? ⏰\";\n  }\n  if (\n    content.includes(\"weather\") ||\n    content.includes(\"sunny\") ||\n    content.includes(\"perfect\")\n  ) {\n    return \"Yes! I checked the forecast too - it's going to be beautiful! Perfect day for our pets to play ☀️\";\n  }\n  if (\n    content.includes(\"excited\") ||\n    content.includes(\"can't wait\") ||\n    content.includes(\"looking forward\")\n  ) {\n    return \"Me too! This is going to be so much fun. I think our pets are going to be best friends! 🐾💕\";\n  }\n  if (\n    content.includes(\"photo\") ||\n    content.includes(\"picture\") ||\n    content.includes(\"pic\")\n  ) {\n    return \"I'd love to see more photos! Your pet is absolutely adorable 📸✨\";\n  }\n\n  // Default contextual responses\n  const responses: string[] = [\n    \"That sounds absolutely perfect! I'm really looking forward to it 🎾\",\n    \"Amazing! My pet is going to be so excited to meet yours 🐕💕\",\n    \"Perfect! I think this is going to be the start of a beautiful friendship 😊\",\n    \"Wonderful! I can already tell our pets are going to get along great 🌟\",\n    \"Fantastic! This is exactly what I was hoping for 🎉\",\n    \"Love it! I have a really good feeling about this playdate ✨\",\n  ];\n  const randomIndex = Math.floor(Math.random() * responses.length);\n  return responses[randomIndex] ?? \"Sounds great!\";\n}\n"],"mappings":"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","ignoreList":[]}