ceeec96eaa71f90686de749f6e3ed9ac
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChatData = useChatData;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var _logger = require("../services/logger");
var _api = require("../services/api");
var _useSocket = require("./useSocket");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var MAX_MESSAGE_LENGTH = 500;
var TYPING_TIMEOUT = 2000;
var MESSAGE_BATCH_SIZE = 20;
function useChatData(matchId) {
  var _useAuthStore = (0, _core.useAuthStore)(),
    user = _useAuthStore.user;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    messages = _useState2[0],
    setMessages = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isSending = _useState6[0],
    setIsSending = _useState6[1];
  var _useState7 = (0, _react.useState)(true),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isOnline = _useState8[0],
    setIsOnline = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    otherUserTyping = _useState0[0],
    setOtherUserTyping = _useState0[1];
  var _useState1 = (0, _react.useState)([]),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    typingUsers = _useState10[0],
    setTypingUsers = _useState10[1];
  var _useState11 = (0, _react.useState)(null),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    error = _useState12[0],
    setError = _useState12[1];
  var typingTimeoutRef = (0, _react.useRef)(null);
  var socket = (0, _useSocket.useSocket)();
  (0, _react.useEffect)(function () {
    if (!socket) {
      _logger.logger.debug("Socket not available yet", {
        matchId: matchId
      });
      return;
    }
    _logger.logger.info("Socket connected for chat", {
      matchId: matchId,
      socketId: socket.id
    });
    var handleNewMessage = function handleNewMessage(message) {
      _logger.logger.debug("New message received via socket", {
        message: message
      });
      setMessages(function (prev) {
        return [].concat((0, _toConsumableArray2.default)(prev), [message]);
      });
    };
    var handleUserTyping = function handleUserTyping(data) {
      if (data.matchId === matchId) {
        setOtherUserTyping(data.isTyping);
        if (data.isTyping) {
          setTypingUsers(function (prev) {
            return (0, _toConsumableArray2.default)(new Set([].concat((0, _toConsumableArray2.default)(prev), [data.userId])));
          });
        } else {
          setTypingUsers(function (prev) {
            return prev.filter(function (id) {
              return id !== data.userId;
            });
          });
        }
      }
    };
    var handleUserOnline = function handleUserOnline(data) {
      setIsOnline(true);
      _logger.logger.debug("User came online", {
        data: data
      });
    };
    var handleUserOffline = function handleUserOffline(data) {
      setIsOnline(false);
      _logger.logger.debug("User went offline", {
        data: data
      });
    };
    socket.on("new_message", handleNewMessage);
    socket.on("typing", handleUserTyping);
    socket.on("user_online", handleUserOnline);
    socket.on("user_offline", handleUserOffline);
    socket.emit("join_match", {
      matchId: matchId
    });
    return function () {
      _logger.logger.debug("Cleaning up socket listeners", {
        matchId: matchId
      });
      socket.off("new_message", handleNewMessage);
      socket.off("typing", handleUserTyping);
      socket.off("user_online", handleUserOnline);
      socket.off("user_offline", handleUserOffline);
      socket.emit("leave_match", {
        matchId: matchId
      });
    };
  }, [socket, matchId]);
  var convertMessage = (0, _react.useCallback)(function (coreMsg) {
    var senderId = typeof coreMsg.sender === 'string' ? coreMsg.sender : coreMsg.sender._id;
    return {
      _id: coreMsg._id,
      content: coreMsg.content,
      senderId: senderId,
      timestamp: coreMsg.sentAt,
      read: coreMsg.readBy.length > 0,
      type: coreMsg.messageType === 'text' ? 'text' : coreMsg.messageType === 'image' ? 'image' : coreMsg.messageType === 'voice' ? 'voice' : 'text',
      replyTo: coreMsg.replyTo,
      error: false
    };
  }, []);
  var loadMessages = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      setIsLoading(true);
      setError(null);
      var coreMessages = yield _api.matchesAPI.getMessages(matchId);
      if (coreMessages.length > 0) {
        var convertedMessages = coreMessages.map(convertMessage);
        setMessages(convertedMessages);
        yield markAsRead();
      } else {
        setMessages([]);
      }
    } catch (err) {
      var errorMessage = "Failed to load messages. Please check your connection and try again.";
      _logger.logger.error("Failed to load messages", {
        error: err instanceof Error ? err : new Error(String(err)),
        matchId: matchId
      });
      setError(errorMessage);
      _reactNative.Alert.alert("Connection Error", errorMessage);
    } finally {
      setIsLoading(false);
    }
  }), [matchId, convertMessage]);
  var sendMessage = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (content, replyTo) {
      var _user$_id;
      if (!content.trim() || isSending) return;
      var messageContent = content.trim();
      var tempId = `temp_${Date.now()}`;
      var optimisticMessage = {
        _id: tempId,
        content: messageContent,
        senderId: (_user$_id = user == null ? void 0 : user._id) != null ? _user$_id : "me",
        timestamp: new Date().toISOString(),
        read: false,
        type: "text",
        status: "sending",
        replyTo: replyTo ? {
          _id: replyTo._id,
          author: replyTo.author,
          text: replyTo.text
        } : undefined
      };
      setIsSending(true);
      setMessages(function (prev) {
        return [].concat((0, _toConsumableArray2.default)(prev), [optimisticMessage]);
      });
      try {
        var sentMessage = yield _api.matchesAPI.sendMessage(matchId, messageContent, replyTo);
        var convertedSentMessage = convertMessage(sentMessage);
        setMessages(function (prev) {
          return prev.map(function (msg) {
            return msg._id === tempId ? _objectSpread(_objectSpread({}, convertedSentMessage), {}, {
              status: "sent"
            }) : msg;
          });
        });
        if (socket && socket.connected) {
          socket.emit("send_message", sentMessage);
          socket.emit("typing", {
            matchId: matchId,
            userId: user == null ? void 0 : user._id,
            isTyping: false
          });
        }
        setTimeout(function () {
          setOtherUserTyping(true);
          setTimeout(function () {
            setOtherUserTyping(false);
            var response = {
              _id: `response_${Date.now()}`,
              content: getIntelligentResponse(messageContent),
              senderId: "other",
              timestamp: new Date().toISOString(),
              read: false,
              type: "text"
            };
            setMessages(function (prev) {
              return [].concat((0, _toConsumableArray2.default)(prev), [response]);
            });
          }, 1500 + Math.random() * 1000);
        }, 800);
      } catch (err) {
        _logger.logger.error("Failed to send message", {
          error: err instanceof Error ? err : new Error(String(err)),
          matchId: matchId,
          content: content
        });
        setMessages(function (prev) {
          return prev.map(function (msg) {
            return msg._id === tempId ? _objectSpread(_objectSpread({}, msg), {}, {
              status: "failed",
              error: true
            }) : msg;
          });
        });
        setError("Failed to send message. Please try again.");
      } finally {
        setIsSending(false);
      }
    });
    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }(), [isSending, user == null ? void 0 : user._id, matchId]);
  var retryMessage = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (messageId) {
      var message = messages.find(function (msg) {
        return msg._id === messageId;
      });
      if (!message) return;
      var retryMessage = _objectSpread(_objectSpread({}, message), {}, {
        _id: `retry_${Date.now()}`,
        status: "sending",
        error: false
      });
      setMessages(function (prev) {
        return prev.map(function (msg) {
          return msg._id === messageId ? retryMessage : msg;
        });
      });
      try {
        yield _api.matchesAPI.sendMessage(matchId, message.content);
        setMessages(function (prev) {
          return prev.map(function (msg) {
            return msg._id === retryMessage._id ? _objectSpread(_objectSpread({}, msg), {}, {
              status: "sent",
              error: false
            }) : msg;
          });
        });
      } catch (err) {
        _logger.logger.error("Failed to retry message", {
          error: err instanceof Error ? err : new Error(String(err)),
          messageId: messageId
        });
        setMessages(function (prev) {
          return prev.map(function (msg) {
            return msg._id === retryMessage._id ? _objectSpread(_objectSpread({}, msg), {}, {
              status: "failed",
              error: true
            }) : msg;
          });
        });
      }
    });
    return function (_x3) {
      return _ref3.apply(this, arguments);
    };
  }(), [messages, matchId]);
  var markAsRead = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      _logger.logger.debug("Messages marked as read", {
        matchId: matchId
      });
      setMessages(function (prev) {
        return prev.map(function (msg) {
          return _objectSpread(_objectSpread({}, msg), {}, {
            read: true
          });
        });
      });
    } catch (err) {
      _logger.logger.error("Failed to mark messages as read", {
        error: err instanceof Error ? err : new Error(String(err)),
        matchId: matchId
      });
    }
  }), [matchId]);
  var clearError = (0, _react.useCallback)(function () {
    setError(null);
  }, []);
  (0, _react.useEffect)(function () {
    loadMessages();
  }, [loadMessages]);
  (0, _react.useEffect)(function () {
    return function () {
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
    };
  }, []);
  return {
    data: {
      messages: messages,
      isLoading: isLoading,
      isSending: isSending,
      isOnline: isOnline,
      otherUserTyping: otherUserTyping,
      typingUsers: typingUsers,
      error: error
    },
    actions: {
      sendMessage: sendMessage,
      loadMessages: loadMessages,
      retryMessage: retryMessage,
      markAsRead: markAsRead,
      clearError: clearError
    }
  };
}
function getIntelligentResponse(messageContent) {
  var _responses$randomInde;
  var content = messageContent.toLowerCase();
  if (content.includes("weekend") || content.includes("saturday") || content.includes("sunday")) {
    return "Weekends work perfectly for me! My schedule is pretty flexible then 📅";
  }
  if (content.includes("park") || content.includes("dog park")) {
    return "The dog park sounds amazing! My pup absolutely loves meeting new friends there 🌳🐕";
  }
  if (content.includes("time") || content.includes("when")) {
    return "I'm pretty flexible with timing! What works best for your schedule? ⏰";
  }
  if (content.includes("weather") || content.includes("sunny") || content.includes("perfect")) {
    return "Yes! I checked the forecast too - it's going to be beautiful! Perfect day for our pets to play ☀️";
  }
  if (content.includes("excited") || content.includes("can't wait") || content.includes("looking forward")) {
    return "Me too! This is going to be so much fun. I think our pets are going to be best friends! 🐾💕";
  }
  if (content.includes("photo") || content.includes("picture") || content.includes("pic")) {
    return "I'd love to see more photos! Your pet is absolutely adorable 📸✨";
  }
  var responses = ["That sounds absolutely perfect! I'm really looking forward to it 🎾", "Amazing! My pet is going to be so excited to meet yours 🐕💕", "Perfect! I think this is going to be the start of a beautiful friendship 😊", "Wonderful! I can already tell our pets are going to get along great 🌟", "Fantastic! This is exactly what I was hoping for 🎉", "Love it! I have a really good feeling about this playdate ✨"];
  var randomIndex = Math.floor(Math.random() * responses.length);
  return (_responses$randomInde = responses[randomIndex]) != null ? _responses$randomInde : "Sounds great!";
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,