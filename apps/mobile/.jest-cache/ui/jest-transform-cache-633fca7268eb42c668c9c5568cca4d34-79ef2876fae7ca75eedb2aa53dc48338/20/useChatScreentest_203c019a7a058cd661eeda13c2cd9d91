618635f375d493e458d0fac4d8240cbe
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../useChatData");
_getJestObj().mock("../../useInteractionMetrics");
_getJestObj().mock("../../../ui/haptics");
_getJestObj().mock("../../../services/api");
_getJestObj().mock("../../../services/logger");
_getJestObj().mock('react-native', function () {
  var RN = _globals.jest.requireActual('react-native');
  var AnimatedMock = require("../../../../__mocks__/Animated.js");
  return _objectSpread(_objectSpread({}, RN), {}, {
    Animated: AnimatedMock,
    Alert: {
      alert: _globals.jest.fn()
    },
    StatusBar: {
      setBarStyle: _globals.jest.fn()
    },
    LayoutAnimation: {
      configureNext: _globals.jest.fn(),
      Presets: {
        easeInEaseOut: {}
      }
    },
    Platform: {
      OS: 'ios',
      Version: '14.0',
      select: _globals.jest.fn(function (obj) {
        return obj.ios || obj.default;
      }),
      isTV: false,
      isTesting: true
    }
  });
});
_getJestObj().mock("../../../theme/Provider", function () {
  return {
    useTheme: function useTheme() {
      return {
        isDark: false
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useChatScreen = require("../useChatScreen");
var _useChatData = require("../../useChatData");
var _useInteractionMetrics = require("../../useInteractionMetrics");
var _haptics = require("../../../ui/haptics");
var _api = require("../../../services/api");
var _logger = require("../../../services/logger");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var AnimatedMock = require("../../../../__mocks__/Animated.js");
var mockUseChatData = _useChatData.useChatData;
var mockUseReactionMetrics = _useInteractionMetrics.useReactionMetrics;
var mockSetItem = _asyncStorage.default.setItem;
var mockGetItem = _asyncStorage.default.getItem;
var mockRemoveItem = _asyncStorage.default.removeItem;
(0, _globals.describe)('useChatScreen Hook', function () {
  var mockNavigation = {
    navigate: _globals.jest.fn(),
    goBack: _globals.jest.fn()
  };
  var mockMatchId = 'match-123';
  var mockPetName = 'Buddy';
  var mockChatData = {
    messages: [],
    isLoading: false,
    error: null,
    hasMore: false
  };
  var mockChatActions = {
    sendMessage: _globals.jest.fn().mockResolvedValue(undefined),
    loadMoreMessages: _globals.jest.fn(),
    refreshMessages: _globals.jest.fn()
  };
  var mockReactionMetrics = {
    startInteraction: _globals.jest.fn(),
    endInteraction: _globals.jest.fn()
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockUseChatData.mockReturnValue({
      data: mockChatData,
      actions: mockChatActions
    });
    mockUseReactionMetrics.mockReturnValue(mockReactionMetrics);
  });
  (0, _globals.afterEach)(function () {
    _globals.jest.clearAllTimers();
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with default values', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.inputText).toBe('');
      (0, _globals.expect)(result.current.isTyping).toBe(false);
      (0, _globals.expect)(result.current.showReactions).toBe(false);
      (0, _globals.expect)(result.current.selectedMessageId).toBeNull();
      (0, _globals.expect)(result.current.data).toBe(mockChatData);
      (0, _globals.expect)(result.current.actions).toBe(mockChatActions);
    });
    (0, _globals.it)('should load draft from AsyncStorage on mount', (0, _asyncToGenerator2.default)(function* () {
      var draftText = 'This is a draft message';
      mockGetItem.mockResolvedValue(draftText);
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockGetItem).toHaveBeenCalledWith(`mobile_chat_draft_${mockMatchId}`);
      });
      (0, _globals.expect)(result.current.inputText).toBe(draftText);
    }));
    (0, _globals.it)('should handle no draft gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockGetItem.mockResolvedValue(null);
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.inputText).toBe('');
      });
    }));
  });
  (0, _globals.describe)('Input Management', function () {
    (0, _globals.it)('should update input text correctly', function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook4.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('New message');
      });
      (0, _globals.expect)(result.current.inputText).toBe('New message');
    });
    (0, _globals.it)('should persist input text to AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('Test message');
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockSetItem).toHaveBeenCalledWith(`mobile_chat_draft_${mockMatchId}`, 'Test message');
      });
    }));
    (0, _globals.it)('should remove draft when input is cleared', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('');
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockRemoveItem).toHaveBeenCalledWith(`mobile_chat_draft_${mockMatchId}`);
      });
    }));
  });
  (0, _globals.describe)('Message Sending', function () {
    (0, _globals.it)('should send message successfully', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook7.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('Test message');
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleSendMessage();
      }));
      (0, _globals.expect)(mockChatActions.sendMessage).toHaveBeenCalledWith('Test message');
      (0, _globals.expect)(result.current.inputText).toBe('');
      (0, _globals.expect)(_haptics.haptic.confirm).toHaveBeenCalled();
    }));
    (0, _globals.it)('should not send empty message', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook8.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('   ');
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleSendMessage();
      }));
      (0, _globals.expect)(mockChatActions.sendMessage).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should trim message content before sending', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook9.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('   Trimmed message   ');
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleSendMessage();
      }));
      (0, _globals.expect)(mockChatActions.sendMessage).toHaveBeenCalledWith('Trimmed message');
    }));
  });
  (0, _globals.describe)('Typing Indicators', function () {
    (0, _globals.it)('should handle typing state changes', (0, _asyncToGenerator2.default)(function* () {
      _globals.jest.useFakeTimers();
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook0.result;
      (0, _reactNative.act)(function () {
        result.current.handleTypingChange(true);
      });
      (0, _globals.expect)(result.current.isTyping).toBe(true);
      (0, _globals.expect)(_api.api.chat.sendTypingIndicator).toHaveBeenCalledWith(mockMatchId, true);
      _globals.jest.advanceTimersByTime(1000);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isTyping).toBe(false);
        (0, _globals.expect)(_api.api.chat.sendTypingIndicator).toHaveBeenCalledWith(mockMatchId, false);
      });
      _globals.jest.useRealTimers();
    }));
    (0, _globals.it)('should clear timeout on unmount', function () {
      _globals.jest.useFakeTimers();
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        unmount = _renderHook1.unmount;
      (0, _reactNative.act)(function () {
        var result = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }).result;
        result.current.handleTypingChange(true);
      });
      unmount();
      _globals.jest.useRealTimers();
    });
  });
  (0, _globals.describe)('Quick Replies', function () {
    (0, _globals.it)('should populate quick replies correctly', function () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook10.result;
      (0, _globals.expect)(result.current.quickReplies).toHaveLength(4);
      (0, _globals.expect)(result.current.quickReplies).toContain('Sounds good! 👍');
      (0, _globals.expect)(result.current.quickReplies).toContain('Let\'s do it! 🎾');
    });
    (0, _globals.it)('should handle quick reply selection', function () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook11.result;
      (0, _reactNative.act)(function () {
        result.current.handleQuickReplySelect('Sounds good! 👍');
      });
      (0, _globals.expect)(result.current.inputText).toBe('Sounds good! 👍');
      (0, _globals.expect)(_haptics.haptic.tap).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Reactions', function () {
    (0, _globals.it)('should handle message long press to show reactions', function () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook12.result;
      (0, _reactNative.act)(function () {
        result.current.handleMessageLongPress('message-123');
      });
      (0, _globals.expect)(result.current.selectedMessageId).toBe('message-123');
      (0, _globals.expect)(result.current.showReactions).toBe(true);
      (0, _globals.expect)(_haptics.haptic.tap).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle reaction selection', function () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook13.result;
      (0, _reactNative.act)(function () {
        result.current.handleMessageLongPress('message-123');
      });
      (0, _reactNative.act)(function () {
        result.current.handleReactionSelect('👍');
      });
      (0, _globals.expect)(result.current.showReactions).toBe(false);
      (0, _globals.expect)(result.current.selectedMessageId).toBeNull();
      (0, _globals.expect)(mockReactionMetrics.startInteraction).toHaveBeenCalled();
      (0, _globals.expect)(mockReactionMetrics.endInteraction).toHaveBeenCalled();
      (0, _globals.expect)(_haptics.haptic.confirm).toHaveBeenCalled();
      (0, _globals.expect)(_logger.logger.info).toHaveBeenCalledWith('Reacted with emoji', {
        emoji: '👍',
        messageId: 'message-123'
      });
    });
    (0, _globals.it)('should handle reaction cancel', function () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook14.result;
      (0, _reactNative.act)(function () {
        result.current.handleMessageLongPress('message-123');
      });
      (0, _reactNative.act)(function () {
        result.current.handleReactionCancel();
      });
      (0, _globals.expect)(result.current.showReactions).toBe(false);
      (0, _globals.expect)(result.current.selectedMessageId).toBeNull();
      (0, _globals.expect)(_haptics.haptic.selection).toHaveBeenCalled();
    });
    (0, _globals.it)('should not react if no message is selected', function () {
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook15.result;
      (0, _reactNative.act)(function () {
        result.current.handleReactionSelect('👍');
      });
      (0, _globals.expect)(mockReactionMetrics.startInteraction).not.toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Call Handlers', function () {
    (0, _globals.it)('should handle voice call alert', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleVoiceCall();
      }));
      (0, _globals.expect)(mockNavigation.navigate).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle video call alert', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleVideoCall();
      }));
      (0, _globals.expect)(mockNavigation.navigate).not.toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Scroll Position', function () {
    (0, _globals.it)('should save scroll position to AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook18.result;
      var mockEvent = {
        nativeEvent: {
          contentOffset: {
            y: 100
          }
        }
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleScroll(mockEvent);
      }));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockSetItem).toHaveBeenCalledWith(`mobile_chat_scroll_${mockMatchId}`, '100');
      });
    }));
  });
  (0, _globals.describe)('Data Integration', function () {
    (0, _globals.it)('should provide chat data and actions', function () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook19.result;
      (0, _globals.expect)(result.current.data).toBe(mockChatData);
      (0, _globals.expect)(result.current.actions).toBe(mockChatActions);
    });
    (0, _globals.it)('should handle loading state from chat data', function () {
      mockUseChatData.mockReturnValue({
        data: _objectSpread(_objectSpread({}, mockChatData), {}, {
          isLoading: true
        }),
        actions: mockChatActions
      });
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook20.result;
      (0, _globals.expect)(result.current.data.isLoading).toBe(true);
    });
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle AsyncStorage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockGetItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook21.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.inputText).toBe('');
      });
    }));
    (0, _globals.it)('should handle empty input text updates', function () {
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatScreen.useChatScreen)({
            matchId: mockMatchId,
            petName: mockPetName,
            navigation: mockNavigation
          });
        }),
        result = _renderHook22.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('');
      });
      (0, _globals.expect)(result.current.inputText).toBe('');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,