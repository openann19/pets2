19d4d094667c33d4e3eb6bf9b1ebce61
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdvancedPhotoEditor = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _expoBlur = require("expo-blur");
var _vectorIcons = require("@expo/vector-icons");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _unifiedTheme = require("../../theme/unified-theme");
var _usePhotoEditor2 = require("../../hooks/usePhotoEditor");
var _PhotoAdjustmentSlider = require("./PhotoAdjustmentSlider");
var _BeforeAfterSlider = require("./BeforeAfterSlider");
var _micro = require("../micro");
var _SmartImage = require("../common/SmartImage");
var _Cropper = require("./Cropper");
var _AutoCropEngine = require("../../utils/AutoCropEngine");
var _SubjectSuggestionsBar = require("./SubjectSuggestionsBar");
var _UltraPublish = require("../../utils/UltraPublish");
var _QualityTargets3 = require("../../utils/QualityTargets");
var _logger = require("../../services/logger");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  width = _Dimensions$get.width,
  height = _Dimensions$get.height;
var PREVIEW_HEIGHT = height * 0.5;
var FILTER_PRESETS = [{
  name: 'Original',
  icon: 'ban-outline',
  adjustments: {
    brightness: 100,
    contrast: 100,
    saturation: 100,
    warmth: 0,
    blur: 0,
    sharpen: 0
  }
}, {
  name: 'Vivid',
  icon: 'flash',
  adjustments: {
    brightness: 105,
    contrast: 110,
    saturation: 130
  }
}, {
  name: 'Warm',
  icon: 'sunny',
  adjustments: {
    warmth: 30,
    brightness: 105,
    saturation: 110
  }
}, {
  name: 'Cool',
  icon: 'snow',
  adjustments: {
    warmth: -20,
    saturation: 90,
    brightness: 100
  }
}, {
  name: 'B/W',
  icon: 'contrast',
  adjustments: {
    saturation: 0,
    contrast: 120
  }
}, {
  name: 'Vintage',
  icon: 'time',
  adjustments: {
    saturation: 80,
    warmth: 20,
    contrast: 90,
    brightness: 95
  }
}, {
  name: 'Dramatic',
  icon: 'cloud',
  adjustments: {
    contrast: 140,
    saturation: 120,
    brightness: 90
  }
}, {
  name: 'Soft',
  icon: 'rainy',
  adjustments: {
    contrast: 90,
    saturation: 95,
    blur: 5
  }
}];
var _worklet_12819323723977_init_data = {
  code: "function anonymous() {\n  const {\n    compare\n  } = this._closure;\n  return {\n    opacity: compare.value\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"compare\",\"_closure\",\"opacity\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx\"],\"mappings\":\"AAuI2C,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC9CC,OAAO,EAAEF,OAAO,CAACG;EACnB,CAAC;AAAA\",\"ignoreList\":[]}"
};
var _worklet_2506830025429_init_data = {
  code: "function anonymous() {\n  const {\n    compare\n  } = this._closure;\n  return {\n    opacity: 1 - compare.value\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"compare\",\"_closure\",\"opacity\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx\"],\"mappings\":\"AA0IyC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC5CC,OAAO,EAAE,CAAC,GAAGF,OAAO,CAACG;EACvB,CAAC;AAAA\",\"ignoreList\":[]}"
};
var _worklet_4533781991606_init_data = {
  code: "function anonymous(e) {\n  const {\n    scale\n  } = this._closure;\n  scale.value = Math.max(1, Math.min(4, e.scale));\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"e\",\"scale\",\"_closure\",\"value\",\"Math\",\"max\",\"min\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx\"],\"mappings\":\"AA8Je,SAACA,SAAKA,CAAAC,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EACfD,KAAK,CAACE,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEN,CAAC,CAACC,KAAK,CAAC,CAAC;AACjD\",\"ignoreList\":[]}"
};
var _worklet_12431198993092_init_data = {
  code: "function anonymous() {\n  const {\n    scale,\n    withSpring,\n    translateX,\n    translateY\n  } = this._closure;\n  if (scale.value <= 1.02) {\n    scale.value = withSpring(1);\n    translateX.value = withSpring(0);\n    translateY.value = withSpring(0);\n  }\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"scale\",\"withSpring\",\"translateX\",\"translateY\",\"_closure\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx\"],\"mappings\":\"AAiKW,SAAAA,SAAMA,CAAA;EAAA;IAAAC,KAAA;IAAAC,UAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EACX,IAAIJ,KAAK,CAACK,KAAK,IAAI,IAAI,EAAE;IAEvBL,KAAK,CAACK,KAAK,GAAGJ,UAAU,CAAC,CAAC,CAAC;IAC3BC,UAAU,CAACG,KAAK,GAAGJ,UAAU,CAAC,CAAC,CAAC;IAChCE,UAAU,CAACE,KAAK,GAAGJ,UAAU,CAAC,CAAC,CAAC;EAClC;AACF\",\"ignoreList\":[]}"
};
var _worklet_13748871800468_init_data = {
  code: "function anonymous(e) {\n  const {\n    scale,\n    translateX,\n    translateY\n  } = this._closure;\n  if (scale.value > 1) {\n    translateX.value = e.translationX;\n    translateY.value = e.translationY;\n  }\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"e\",\"scale\",\"translateX\",\"translateY\",\"_closure\",\"value\",\"translationX\",\"translationY\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx\"],\"mappings\":\"AA2Ke,SAACA,SAAKA,CAAAC,CAAA;EAAA;IAAAC,KAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EACf,IAAIH,KAAK,CAACI,KAAK,GAAG,CAAC,EAAE;IACnBH,UAAU,CAACG,KAAK,GAAGL,CAAC,CAACM,YAAY;IACjCH,UAAU,CAACE,KAAK,GAAGL,CAAC,CAACO,YAAY;EACnC;AACF\",\"ignoreList\":[]}"
};
var _worklet_15584079485280_init_data = {
  code: "function anonymous() {\n  const {\n    translateX,\n    withSpring,\n    translateY\n  } = this._closure;\n  translateX.value = withSpring(translateX.value * 0.9);\n  translateY.value = withSpring(translateY.value * 0.9);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"translateX\",\"withSpring\",\"translateY\",\"_closure\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx\"],\"mappings\":\"AAiLW,SAAAA,SAAMA,CAAA;EAAA;IAAAC,UAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EAEXH,UAAU,CAACI,KAAK,GAAGH,UAAU,CAACD,UAAU,CAACI,KAAK,GAAG,GAAG,CAAC;EACrDF,UAAU,CAACE,KAAK,GAAGH,UAAU,CAACC,UAAU,CAACE,KAAK,GAAG,GAAG,CAAC;AACvD\",\"ignoreList\":[]}"
};
var _worklet_10934072422175_init_data = {
  code: "function anonymous() {\n  const {\n    scale,\n    translateX,\n    translateY\n  } = this._closure;\n  return {\n    transform: [{\n      scale: scale.value\n    }, {\n      translateX: translateX.value\n    }, {\n      translateY: translateY.value\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"scale\",\"translateX\",\"translateY\",\"_closure\",\"transform\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx\"],\"mappings\":\"AAyL4C,SAAAA,UAAA;EAAA;IAAAC,KAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC/CC,SAAS,EAAE,CACT;MAAEJ,KAAK,EAAEA,KAAK,CAACK;IAAM,CAAC,EACtB;MAAEJ,UAAU,EAAEA,UAAU,CAACI;IAAM,CAAC,EAChC;MAAEH,UAAU,EAAEA,UAAU,CAACG;IAAM,CAAC;EAEpC,CAAC;AAAA\",\"ignoreList\":[]}"
};
var AdvancedPhotoEditor = exports.AdvancedPhotoEditor = function AdvancedPhotoEditor(_ref) {
  var imageUri = _ref.imageUri,
    onSave = _ref.onSave,
    onCancel = _ref.onCancel,
    aspectRatio = _ref.aspectRatio,
    _ref$maxWidth = _ref.maxWidth,
    maxWidth = _ref$maxWidth === void 0 ? 1920 : _ref$maxWidth,
    _ref$maxHeight = _ref.maxHeight,
    maxHeight = _ref$maxHeight === void 0 ? 1920 : _ref$maxHeight;
  var _useState = (0, _react.useState)('adjust'),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    activeTab = _useState2[0],
    setActiveTab = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    comparing = _useState4[0],
    setComparing = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showSplit = _useState6[0],
    setShowSplit = _useState6[1];
  var _useState7 = (0, _react.useState)('off'),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    showGrid = _useState8[0],
    setShowGrid = _useState8[1];
  var _useState9 = (0, _react.useState)(null),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    quickMode = _useState0[0],
    setQuickMode = _useState0[1];
  var _useState1 = (0, _react.useState)(imageUri),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    sourceUri = _useState10[0],
    setSourceUri = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    showGuides = _useState12[0],
    setShowGuides = _useState12[1];
  var _useState13 = (0, _react.useState)(false),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    ultraExporting = _useState14[0],
    setUltraExporting = _useState14[1];
  var _useState15 = (0, _react.useState)(0),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    ultraProgress = _useState16[0],
    setUltraProgress = _useState16[1];
  var _useState17 = (0, _react.useState)([]),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    ultraVariants = _useState18[0],
    setUltraVariants = _useState18[1];
  var _useState19 = (0, _react.useState)(false),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    showUltraModal = _useState20[0],
    setShowUltraModal = _useState20[1];
  var cropperRef = (0, _react.useRef)(null);
  var _usePhotoEditor = (0, _usePhotoEditor2.usePhotoEditor)(sourceUri, {
      maxWidth: maxWidth,
      maxHeight: maxHeight
    }),
    editedUri = _usePhotoEditor.uri,
    isProcessing = _usePhotoEditor.isLoading,
    adjustments = _usePhotoEditor.adjustments,
    flipHorizontal = _usePhotoEditor.flipHorizontal,
    flipVertical = _usePhotoEditor.flipVertical,
    updateAdjustment = _usePhotoEditor.updateAdjustment,
    setFlipHorizontal = _usePhotoEditor.setFlipHorizontal,
    setFlipVertical = _usePhotoEditor.setFlipVertical,
    applyFilter = _usePhotoEditor.applyFilter,
    resetAdjustments = _usePhotoEditor.resetAdjustments,
    saveImage = _usePhotoEditor.saveImage,
    rotateLeft = _usePhotoEditor.rotateLeft,
    rotateRight = _usePhotoEditor.rotateRight;
  var handleCropped = (0, _react.useCallback)(function (uri) {
    setSourceUri(uri);
    setActiveTab("adjust");
  }, []);
  var handleAutoCrop = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    var res = yield _AutoCropEngine.AutoCropEngine.detect(editedUri);
    if (res != null && res.focus) {
      var _cropperRef$current;
      (_cropperRef$current = cropperRef.current) == null ? void 0 : _cropperRef$current.focusTo(res.focus);
    }
  }), [editedUri]);
  var handleSuggestionApply = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (crop) {
      try {
        var newUri = yield _AutoCropEngine.AutoCropEngine.applyCrop(editedUri, crop, 1);
        handleCropped(newUri);
      } catch (err) {
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
      }
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [editedUri, handleCropped]);
  var compare = (0, _reactNativeReanimated.useSharedValue)(0);
  var originalOpacity = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        opacity: compare.value
      };
    };
    _f._closure = {
      compare: compare
    };
    _f.__initData = _worklet_12819323723977_init_data;
    _f.__workletHash = 12819323723977;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var editedOpacity = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        opacity: 1 - compare.value
      };
    };
    _f._closure = {
      compare: compare
    };
    _f.__initData = _worklet_2506830025429_init_data;
    _f.__workletHash = 2506830025429;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var onCompareIn = function onCompareIn() {
    setComparing(true);
    Haptics.selectionAsync();
    compare.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 160
    });
  };
  var onCompareOut = function onCompareOut() {
    setComparing(false);
    compare.value = (0, _reactNativeReanimated.withTiming)(0, {
      duration: 160
    });
  };
  var scale = (0, _reactNativeReanimated.useSharedValue)(1);
  var translateX = (0, _reactNativeReanimated.useSharedValue)(0);
  var translateY = (0, _reactNativeReanimated.useSharedValue)(0);
  var pinch = _reactNativeGestureHandler.Gesture.Pinch().onUpdate(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f(e) {
      scale.value = Math.max(1, Math.min(4, e.scale));
    };
    _f._closure = {
      scale: scale
    };
    _f.__initData = _worklet_4533781991606_init_data;
    _f.__workletHash = 4533781991606;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onEnd(function () {
    var _e = [new global.Error(), -5, -27];
    var _f = function _f() {
      if (scale.value <= 1.02) {
        scale.value = (0, _reactNativeReanimated.withSpring)(1);
        translateX.value = (0, _reactNativeReanimated.withSpring)(0);
        translateY.value = (0, _reactNativeReanimated.withSpring)(0);
      }
    };
    _f._closure = {
      scale: scale,
      withSpring: _reactNativeReanimated.withSpring,
      translateX: translateX,
      translateY: translateY
    };
    _f.__initData = _worklet_12431198993092_init_data;
    _f.__workletHash = 12431198993092;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var pan = _reactNativeGestureHandler.Gesture.Pan().onUpdate(function () {
    var _e = [new global.Error(), -4, -27];
    var _f = function _f(e) {
      if (scale.value > 1) {
        translateX.value = e.translationX;
        translateY.value = e.translationY;
      }
    };
    _f._closure = {
      scale: scale,
      translateX: translateX,
      translateY: translateY
    };
    _f.__initData = _worklet_13748871800468_init_data;
    _f.__workletHash = 13748871800468;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onEnd(function () {
    var _e = [new global.Error(), -4, -27];
    var _f = function _f() {
      translateX.value = (0, _reactNativeReanimated.withSpring)(translateX.value * 0.9);
      translateY.value = (0, _reactNativeReanimated.withSpring)(translateY.value * 0.9);
    };
    _f._closure = {
      translateX: translateX,
      withSpring: _reactNativeReanimated.withSpring,
      translateY: translateY
    };
    _f.__initData = _worklet_15584079485280_init_data;
    _f.__workletHash = 15584079485280;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var composed = _reactNativeGestureHandler.Gesture.Simultaneous(pinch, pan);
  var previewTransform = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -4, -27];
    var _f = function _f() {
      return {
        transform: [{
          scale: scale.value
        }, {
          translateX: translateX.value
        }, {
          translateY: translateY.value
        }]
      };
    };
    _f._closure = {
      scale: scale,
      translateX: translateX,
      translateY: translateY
    };
    _f.__initData = _worklet_10934072422175_init_data;
    _f.__workletHash = 10934072422175;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var applyFilterPreset = (0, _react.useCallback)(function (preset) {
    applyFilter(preset.adjustments);
    setActiveTab('adjust');
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
  }, [applyFilter]);
  var handleFlipH = (0, _react.useCallback)(function () {
    return setFlipHorizontal(!flipHorizontal);
  }, [flipHorizontal, setFlipHorizontal]);
  var handleFlipV = (0, _react.useCallback)(function () {
    return setFlipVertical(!flipVertical);
  }, [flipVertical, setFlipVertical]);
  var handleSave = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
    var savedUri = yield saveImage();
    if (savedUri) onSave(savedUri);
  }), [saveImage, onSave]);
  var autoEnhance = (0, _react.useCallback)(function () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    applyFilter({
      brightness: 105,
      contrast: 110,
      saturation: 115,
      sharpen: 20
    });
    setQuickMode('auto');
    setTimeout(function () {
      return setQuickMode(null);
    }, 2000);
  }, [applyFilter]);
  var batchApply = (0, _react.useCallback)(function (preset) {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    var presets = {
      portrait: {
        blur: 2,
        contrast: 110,
        saturation: 105
      },
      vivid: {
        brightness: 115,
        contrast: 120,
        saturation: 135
      },
      film: {
        contrast: 90,
        saturation: 95,
        warmth: 15
      },
      dramatic: {
        contrast: 140,
        saturation: 120,
        brightness: 90
      },
      dehaze: {
        brightness: 110,
        contrast: 105,
        sharpen: 30
      },
      vignette: {
        contrast: 110,
        brightness: 95
      }
    };
    if (presets[preset]) {
      applyFilter(presets[preset]);
      setQuickMode(preset);
      setTimeout(function () {
        return setQuickMode(null);
      }, 2000);
    }
  }, [applyFilter]);
  var handleUltraExport = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    setUltraExporting(true);
    setUltraProgress(0);
    setUltraVariants([]);
    try {
      var variants = yield (0, _UltraPublish.exportUltraVariants)(editedUri, ["1:1", "4:5", "9:16"], {
        onProgress: function onProgress(progress, variant) {
          setUltraProgress(Math.round(progress * 100));
          if (variant) {
            setUltraVariants(function (prev) {
              return [].concat((0, _toConsumableArray2.default)(prev), [variant]);
            });
          }
        }
      });
      setUltraVariants(variants);
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      setShowUltraModal(true);
      _logger.logger.info('[ULTRA Export] Generated variants', {
        count: variants.length,
        byRatio: variants.reduce(function (acc, v) {
          acc[v.ratio] = (acc[v.ratio] || 0) + 1;
          return acc;
        }, {}),
        byKind: variants.reduce(function (acc, v) {
          acc[v.kind] = (acc[v.kind] || 0) + 1;
          return acc;
        }, {})
      });
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('[ULTRA Export] Failed', {
        error: err
      });
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
      _reactNative.Alert.alert('Export Failed', 'Failed to generate ultra variants. Please try again.');
    } finally {
      setUltraExporting(false);
    }
  }), [editedUri]);
  var handleUltraSaveAll = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (ultraVariants.length === 0) return;
    try {
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      _logger.logger.info('[ULTRA] Saving all variants to camera roll or uploading', {
        variantCount: ultraVariants.length
      });
      _reactNative.Alert.alert('Saved!', `Successfully exported ${ultraVariants.length} publish-ready variants.`);
      setShowUltraModal(false);
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Failed to save ultra variants', {
        error: err
      });
      _reactNative.Alert.alert('Save Failed', 'Failed to save variants. Please try again.');
    }
  }), [ultraVariants]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
      style: styles.previewContainer,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.previewHeader,
        children: [(0, _jsxRuntime.jsx)(_micro.BouncePressable, {
          onPress: onCancel,
          style: styles.headerButton,
          accessibilityRole: "button",
          accessibilityLabel: "Close editor",
          children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "close",
            size: 24,
            color: "white"
          })
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: {
            flexDirection: 'row',
            alignItems: 'center',
            gap: 12
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.headerTitle,
            children: "Edit Photo"
          }), (0, _jsxRuntime.jsx)(_micro.BouncePressable, {
            onPress: function onPress() {
              Haptics.selectionAsync();
              setShowSplit(function (s) {
                return !s;
              });
            },
            style: styles.headerButton,
            accessibilityRole: "button",
            accessibilityLabel: "Toggle split compare",
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: showSplit ? 'contract-outline' : 'swap-horizontal',
              size: 22,
              color: _unifiedTheme.Theme.colors.primary[500]
            })
          })]
        }), (0, _jsxRuntime.jsx)(_micro.BouncePressable, {
          onPress: handleSave,
          disabled: isProcessing,
          style: [styles.headerButton, isProcessing && {
            opacity: 0.5
          }],
          accessibilityRole: "button",
          accessibilityLabel: "Save edits",
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.saveButton,
            children: isProcessing ? 'Saving…' : 'Save'
          })
        })]
      }), activeTab === 'crop' ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
        children: [(0, _jsxRuntime.jsx)(_SubjectSuggestionsBar.SubjectSuggestionsBar, {
          uri: editedUri,
          ratios: ["1:1", "4:5", "9:16"],
          onFocus: function onFocus(focus) {
            var _cropperRef$current2;
            return (_cropperRef$current2 = cropperRef.current) == null ? void 0 : _cropperRef$current2.focusTo(focus);
          },
          onApply: handleSuggestionApply
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: {
            flexDirection: "row",
            gap: 12,
            paddingHorizontal: 16,
            marginBottom: 8,
            justifyContent: "space-between"
          },
          children: [(0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
            onPress: handleAutoCrop,
            style: {
              flexDirection: "row",
              alignItems: "center",
              gap: 8,
              paddingVertical: 8,
              paddingHorizontal: 12,
              borderRadius: 10,
              backgroundColor: "rgba(255,255,255,0.08)",
              borderWidth: 1,
              borderColor: "rgba(255,255,255,0.15)"
            },
            accessibilityLabel: "Auto-crop with face detection",
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "sparkles",
              size: 18,
              color: _unifiedTheme.Theme.colors.primary[500]
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: {
                color: "#fff",
                fontWeight: "700",
                fontSize: 13
              },
              children: "Auto"
            })]
          }), (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
            onPress: function onPress() {
              setShowGuides(function (s) {
                return !s;
              });
              Haptics.selectionAsync();
            },
            style: {
              flexDirection: "row",
              alignItems: "center",
              gap: 8,
              paddingVertical: 8,
              paddingHorizontal: 12,
              borderRadius: 10,
              backgroundColor: "rgba(255,255,255,0.08)",
              borderWidth: 1,
              borderColor: "rgba(255,255,255,0.15)"
            },
            accessibilityLabel: "Toggle story mode guides",
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "eye",
              size: 18,
              color: showGuides ? _unifiedTheme.Theme.colors.primary[500] : "#fff"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: {
                color: showGuides ? _unifiedTheme.Theme.colors.primary[500] : "#fff",
                fontWeight: "700",
                fontSize: 13
              },
              children: "Guides"
            })]
          })]
        }), (0, _jsxRuntime.jsx)(_Cropper.Cropper, {
          ref: cropperRef,
          uri: editedUri,
          containerW: width,
          containerH: PREVIEW_HEIGHT - 160,
          defaultRatio: "4:5",
          onCropped: handleCropped,
          showStoryGuides: showGuides
        })]
      }) : (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
        gesture: composed,
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.previewStage,
          onTouchStart: onCompareIn,
          onTouchEnd: onCompareOut,
          accessible: true,
          accessibilityRole: "imagebutton",
          accessibilityHint: "Press and hold to compare with original. Pinch to zoom.",
          children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
            style: [_reactNative.StyleSheet.absoluteFill, editedOpacity, previewTransform],
            children: (0, _jsxRuntime.jsx)(_SmartImage.SmartImage, {
              source: {
                uri: editedUri
              },
              style: styles.previewImage,
              rounded: 0
            })
          }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
            style: [_reactNative.StyleSheet.absoluteFill, originalOpacity, previewTransform],
            children: (0, _jsxRuntime.jsx)(_SmartImage.SmartImage, {
              source: {
                uri: imageUri
              },
              style: styles.previewImage,
              rounded: 0
            })
          }), comparing && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.compareBadge,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.compareText,
              children: "Original"
            })
          }), showGrid !== 'off' && (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: _reactNative.StyleSheet.absoluteFill,
            pointerEvents: "none",
            children: [showGrid === 'thirds' && (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
              children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.gridLine, {
                  left: '33.33%'
                }]
              }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.gridLine, {
                  left: '66.66%'
                }]
              }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.gridLine, {
                  top: '33.33%',
                  left: 0,
                  width: '100%',
                  height: 1
                }]
              }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.gridLine, {
                  top: '66.66%',
                  left: 0,
                  width: '100%',
                  height: 1
                }]
              })]
            }), showGrid === 'golden' && (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
              children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.gridLine, {
                  left: '38.2%'
                }]
              }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.gridLine, {
                  left: '61.8%'
                }]
              }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.gridLine, {
                  top: '38.2%',
                  left: 0,
                  width: '100%',
                  height: 1
                }]
              }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: [styles.gridLine, {
                  top: '61.8%',
                  left: 0,
                  width: '100%',
                  height: 1
                }]
              })]
            })]
          })]
        })
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.tabBar,
      children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        entering: _reactNativeReanimated.FadeInDown.delay(100).springify(),
        exiting: _reactNativeReanimated.FadeOutUp,
        children: (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
          style: [styles.tab, activeTab === 'adjust' && styles.activeTab],
          onPress: function onPress() {
            return setActiveTab('adjust');
          },
          accessibilityRole: "tab",
          accessibilityState: {
            selected: activeTab === 'adjust'
          },
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "options",
            size: 24,
            color: activeTab === 'adjust' ? _unifiedTheme.Theme.colors.primary[500] : 'white'
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.tabText, activeTab === 'adjust' && styles.activeTabText],
            children: "Adjust"
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        entering: _reactNativeReanimated.FadeInDown.delay(150).springify(),
        exiting: _reactNativeReanimated.FadeOutUp,
        children: (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
          style: [styles.tab, activeTab === 'filters' && styles.activeTab],
          onPress: function onPress() {
            return setActiveTab('filters');
          },
          accessibilityRole: "tab",
          accessibilityState: {
            selected: activeTab === 'filters'
          },
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "sparkles",
            size: 24,
            color: activeTab === 'filters' ? _unifiedTheme.Theme.colors.primary[500] : 'white'
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.tabText, activeTab === 'filters' && styles.activeTabText],
            children: "Filters"
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        entering: _reactNativeReanimated.FadeInDown.delay(200).springify(),
        exiting: _reactNativeReanimated.FadeOutUp,
        children: (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
          style: [styles.tab, activeTab === 'crop' && styles.activeTab],
          onPress: function onPress() {
            return setActiveTab('crop');
          },
          accessibilityRole: "tab",
          accessibilityState: {
            selected: activeTab === 'crop'
          },
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "crop",
            size: 24,
            color: activeTab === 'crop' ? _unifiedTheme.Theme.colors.primary[500] : 'white'
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.tabText, activeTab === 'crop' && styles.activeTabText],
            children: "Crop"
          })]
        })
      })]
    }), activeTab === 'adjust' && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.contentContainer,
      children: (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
        contentContainerStyle: {
          padding: 20
        },
        showsVerticalScrollIndicator: false,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: {
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'space-between',
            marginBottom: 14
          },
          children: [(0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
            horizontal: true,
            showsHorizontalScrollIndicator: false,
            contentContainerStyle: {
              gap: 8
            },
            children: [(0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
              onPress: autoEnhance,
              style: [styles.quickAction, quickMode === 'auto' && styles.quickActionActive],
              children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "sparkles",
                size: 16,
                color: quickMode === 'auto' ? _unifiedTheme.Theme.colors.primary[500] : 'white'
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.quickActionText, quickMode === 'auto' && {
                  color: _unifiedTheme.Theme.colors.primary[500]
                }],
                children: "Auto"
              })]
            }), (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
              onPress: function onPress() {
                return batchApply('portrait');
              },
              style: [styles.quickAction, quickMode === 'portrait' && styles.quickActionActive],
              children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "person",
                size: 16,
                color: quickMode === 'portrait' ? _unifiedTheme.Theme.colors.primary[500] : 'white'
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.quickActionText, quickMode === 'portrait' && {
                  color: _unifiedTheme.Theme.colors.primary[500]
                }],
                children: "Portrait"
              })]
            }), (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
              onPress: function onPress() {
                return batchApply('vivid');
              },
              style: [styles.quickAction, quickMode === 'vivid' && styles.quickActionActive],
              children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "flash",
                size: 16,
                color: quickMode === 'vivid' ? _unifiedTheme.Theme.colors.primary[500] : 'white'
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.quickActionText, quickMode === 'vivid' && {
                  color: _unifiedTheme.Theme.colors.primary[500]
                }],
                children: "Vivid+"
              })]
            }), (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
              onPress: function onPress() {
                return batchApply('dramatic');
              },
              style: [styles.quickAction, quickMode === 'dramatic' && styles.quickActionActive],
              children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "contrast",
                size: 16,
                color: quickMode === 'dramatic' ? _unifiedTheme.Theme.colors.primary[500] : 'white'
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.quickActionText, quickMode === 'dramatic' && {
                  color: _unifiedTheme.Theme.colors.primary[500]
                }],
                children: "Dramatic"
              })]
            })]
          }), (0, _jsxRuntime.jsx)(_micro.BouncePressable, {
            onPress: function onPress() {
              return setShowGrid(function (g) {
                return g === 'off' ? 'thirds' : g === 'thirds' ? 'golden' : 'off';
              });
            },
            style: {
              padding: 10
            },
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "grid",
              size: 20,
              color: showGrid === 'off' ? 'rgba(255,255,255,0.5)' : _unifiedTheme.Theme.colors.primary[500]
            })
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.controlRow,
          children: [(0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
            onPress: rotateLeft,
            style: styles.controlButton,
            accessibilityLabel: "Rotate left",
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "refresh",
              size: 26,
              color: "white",
              style: {
                transform: [{
                  scaleX: -1
                }]
              }
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.controlLabel,
              children: "Rotate L"
            })]
          }), (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
            onPress: rotateRight,
            style: styles.controlButton,
            accessibilityLabel: "Rotate right",
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "refresh",
              size: 26,
              color: "white"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.controlLabel,
              children: "Rotate R"
            })]
          }), (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
            onPress: handleFlipH,
            style: styles.controlButton,
            accessibilityLabel: "Flip horizontal",
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "swap-horizontal",
              size: 26,
              color: "white"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.controlLabel,
              children: "Flip H"
            })]
          }), (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
            onPress: handleFlipV,
            style: styles.controlButton,
            accessibilityLabel: "Flip vertical",
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "swap-vertical",
              size: 26,
              color: "white"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.controlLabel,
              children: "Flip V"
            })]
          })]
        }), (0, _jsxRuntime.jsxs)(_expoBlur.BlurView, {
          intensity: 20,
          style: styles.slidersPanel,
          children: [(0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
            label: "Brightness",
            value: adjustments.brightness,
            min: 0,
            max: 200,
            step: 1,
            defaultValue: 100,
            icon: "sunny",
            onValueChange: function onValueChange(v) {
              return updateAdjustment('brightness', v);
            }
          }), (0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
            label: "Contrast",
            value: adjustments.contrast,
            min: 0,
            max: 200,
            step: 1,
            defaultValue: 100,
            icon: "contrast",
            onValueChange: function onValueChange(v) {
              return updateAdjustment('contrast', v);
            }
          }), (0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
            label: "Saturation",
            value: adjustments.saturation,
            min: 0,
            max: 200,
            step: 1,
            defaultValue: 100,
            icon: "color-palette",
            onValueChange: function onValueChange(v) {
              return updateAdjustment('saturation', v);
            }
          }), (0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
            label: "Warmth",
            value: adjustments.warmth,
            min: -100,
            max: 100,
            step: 1,
            defaultValue: 0,
            icon: "flame",
            onValueChange: function onValueChange(v) {
              return updateAdjustment('warmth', v);
            }
          }), (0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
            label: "Blur",
            value: adjustments.blur,
            min: 0,
            max: 20,
            step: 1,
            defaultValue: 0,
            icon: "water",
            onValueChange: function onValueChange(v) {
              return updateAdjustment('blur', v);
            }
          }), (0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
            label: "Clarity",
            value: adjustments.sharpen,
            min: 0,
            max: 100,
            step: 1,
            defaultValue: 0,
            icon: "aperture",
            onValueChange: function onValueChange(v) {
              return updateAdjustment('sharpen', v);
            }
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: {
              height: 10
            }
          }), (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
            onPress: resetAdjustments,
            style: styles.resetButton,
            scaleFrom: 0.95,
            accessibilityLabel: "Reset all adjustments",
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "refresh-circle",
              size: 20,
              color: _unifiedTheme.Theme.colors.status.error
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.resetButtonText,
              children: "Reset All"
            })]
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: {
            marginTop: 24
          },
          children: [(0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
            onPress: handleUltraExport,
            disabled: ultraExporting,
            style: [styles.ultraExportButton, ultraExporting && {
              opacity: 0.6
            }],
            accessibilityRole: "button",
            accessibilityLabel: "Export ultra variants for social media",
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "rocket",
              size: 24,
              color: _unifiedTheme.Theme.colors.primary[500]
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.ultraExportText,
              children: ultraExporting ? `Exporting... ${ultraProgress}%` : 'ULTRA Export (9 Variants)'
            })]
          }), ultraExporting && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.progressBar,
            children: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.progressFill, {
                width: `${ultraProgress}%`
              }]
            })
          })]
        })]
      })
    }), activeTab === 'filters' && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.contentContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.filtersContainer,
        children: FILTER_PRESETS.map(function (preset, index) {
          return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
            entering: _reactNativeReanimated.FadeInDown.delay(50 * (index + 1)).springify(),
            exiting: _reactNativeReanimated.FadeOutUp,
            children: (0, _jsxRuntime.jsxs)(_micro.BouncePressable, {
              style: styles.filterCard,
              onPress: function onPress() {
                return applyFilterPreset(preset);
              },
              accessibilityLabel: `Apply ${preset.name} filter`,
              children: [(0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
                intensity: 20,
                style: styles.filterIcon,
                children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                  name: preset.icon,
                  size: 28,
                  color: "white"
                })
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.filterName,
                children: preset.name
              })]
            })
          }, preset.name);
        })
      })
    }), showSplit && (0, _jsxRuntime.jsx)(_BeforeAfterSlider.BeforeAfterSlider, {
      originalUri: imageUri,
      editedUri: editedUri,
      onClose: function onClose() {
        return setShowSplit(false);
      }
    }), isProcessing && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.loadingOverlay,
      pointerEvents: "none",
      children: (0, _jsxRuntime.jsxs)(_expoBlur.BlurView, {
        intensity: 80,
        style: styles.loadingContent,
        children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "small",
          color: _unifiedTheme.Theme.colors.primary[500]
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.loadingText,
          children: "Processing\u2026"
        })]
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      visible: showUltraModal,
      animationType: "slide",
      transparent: true,
      onRequestClose: function onRequestClose() {
        return setShowUltraModal(false);
      },
      children: (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
        intensity: 80,
        style: styles.modalContainer,
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.modalContent,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.modalHeader,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.modalTitle,
              children: "Export Complete"
            }), (0, _jsxRuntime.jsx)(_micro.BouncePressable, {
              onPress: function onPress() {
                return setShowUltraModal(false);
              },
              style: {
                padding: 8
              },
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "close",
                size: 24,
                color: "white"
              })
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
            style: styles.modalScroll,
            showsVerticalScrollIndicator: false,
            children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.modalSubtitle,
              children: ["Generated ", ultraVariants.length, " publish-ready variants"]
            }), ["1:1", "4:5", "9:16"].map(function (ratio) {
              var _QualityTargets, _QualityTargets2;
              var variants = ultraVariants.filter(function (v) {
                return v.ratio === ratio;
              });
              if (variants.length === 0) return null;
              return (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.ratioSection,
                children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
                  style: styles.ratioTitle,
                  children: [ratio, " - ", (_QualityTargets = _QualityTargets3.QualityTargets[ratio]) == null ? void 0 : _QualityTargets.minW, "x", (_QualityTargets2 = _QualityTargets3.QualityTargets[ratio]) == null ? void 0 : _QualityTargets2.minH]
                }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                  style: styles.variantGrid,
                  children: variants.map(function (variant, idx) {
                    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
                      style: styles.variantCard,
                      children: [(0, _jsxRuntime.jsx)(_SmartImage.SmartImage, {
                        source: {
                          uri: variant.outUri
                        },
                        style: styles.variantImage,
                        rounded: 8
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        style: styles.variantKind,
                        children: variant.kind
                      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                        style: styles.variantMethod,
                        children: variant.method
                      })]
                    }, idx);
                  })
                })]
              }, ratio);
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.modalFooter,
            children: [(0, _jsxRuntime.jsx)(_micro.BouncePressable, {
              onPress: function onPress() {
                return setShowUltraModal(false);
              },
              style: styles.modalButton,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.modalButtonText,
                children: "Cancel"
              })
            }), (0, _jsxRuntime.jsx)(_micro.BouncePressable, {
              onPress: handleUltraSaveAll,
              style: [styles.modalButton, styles.modalButtonPrimary],
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.modalButtonText,
                children: "Save All"
              })
            })]
          })]
        })
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000'
  },
  previewContainer: {
    height: PREVIEW_HEIGHT,
    backgroundColor: '#000'
  },
  previewHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 12
  },
  headerButton: {
    padding: 8
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: 'white'
  },
  saveButton: {
    fontSize: 16,
    fontWeight: '600',
    color: _unifiedTheme.Theme.colors.primary[500]
  },
  previewStage: {
    flex: 1,
    overflow: 'hidden'
  },
  previewImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'contain'
  },
  compareBadge: {
    position: 'absolute',
    top: 12,
    right: 12,
    backgroundColor: 'rgba(0,0,0,0.6)',
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 999
  },
  compareText: {
    color: 'white',
    fontWeight: '700',
    fontSize: 12
  },
  tabBar: {
    flexDirection: 'row',
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)'
  },
  tab: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 16,
    gap: 8
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: _unifiedTheme.Theme.colors.primary[500]
  },
  tabText: {
    fontSize: 14,
    color: 'white'
  },
  activeTabText: {
    color: _unifiedTheme.Theme.colors.primary[500],
    fontWeight: '600'
  },
  contentContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.95)'
  },
  adjustmentSection: {
    padding: 20,
    gap: 16
  },
  controlRow: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 12
  },
  controlButton: {
    width: '100%',
    alignItems: 'center',
    gap: 8,
    padding: 12,
    minWidth: 80
  },
  controlLabel: {
    fontSize: 12,
    color: 'white',
    fontWeight: '500'
  },
  slidersPanel: {
    borderRadius: 16,
    padding: 20,
    marginTop: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.05)'
  },
  resetButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 12,
    backgroundColor: 'rgba(239, 68, 68, 0.2)',
    borderWidth: 1,
    borderColor: _unifiedTheme.Theme.colors.status.error
  },
  resetButtonText: {
    color: _unifiedTheme.Theme.colors.status.error,
    fontSize: 14,
    fontWeight: '600'
  },
  filtersContainer: {
    padding: 20,
    flexDirection: 'row',
    flexWrap: 'nowrap',
    gap: 16
  },
  filterCard: {
    alignItems: 'center',
    marginRight: 16,
    gap: 8
  },
  filterIcon: {
    width: 80,
    height: 80,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center'
  },
  filterName: {
    fontSize: 12,
    color: 'white',
    fontWeight: '600',
    textAlign: 'center'
  },
  loadingOverlay: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {
    backgroundColor: 'rgba(0,0,0,0.4)',
    justifyContent: 'center',
    alignItems: 'center'
  }),
  loadingContent: {
    paddingVertical: 16,
    paddingHorizontal: 18,
    borderRadius: 12,
    alignItems: 'center',
    gap: 10
  },
  loadingText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600'
  },
  quickAction: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    paddingHorizontal: 14,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)'
  },
  quickActionActive: {
    backgroundColor: 'rgba(112, 76, 255, 0.2)',
    borderColor: _unifiedTheme.Theme.colors.primary[500]
  },
  quickActionText: {
    color: 'white',
    fontSize: 13,
    fontWeight: '600'
  },
  gridLine: {
    position: 'absolute',
    width: 1,
    height: '100%',
    backgroundColor: 'rgba(255, 255, 255, 0.3)',
    top: 0
  },
  ultraExportButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 12,
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderRadius: 16,
    backgroundColor: 'rgba(112, 76, 255, 0.15)',
    borderWidth: 2,
    borderColor: _unifiedTheme.Theme.colors.primary[500]
  },
  ultraExportText: {
    color: _unifiedTheme.Theme.colors.primary[500],
    fontSize: 16,
    fontWeight: '700'
  },
  progressBar: {
    height: 4,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 2,
    marginTop: 8,
    overflow: 'hidden'
  },
  progressFill: {
    height: '100%',
    backgroundColor: _unifiedTheme.Theme.colors.primary[500],
    borderRadius: 2
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20
  },
  modalContent: {
    width: '100%',
    maxHeight: '80%',
    backgroundColor: 'rgba(0, 0, 0, 0.95)',
    borderRadius: 24,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)'
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255, 255, 255, 0.1)'
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: 'white'
  },
  modalSubtitle: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.6)',
    textAlign: 'center',
    marginBottom: 20
  },
  modalScroll: {
    flex: 1,
    padding: 20
  },
  ratioSection: {
    marginBottom: 24
  },
  ratioTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: _unifiedTheme.Theme.colors.primary[500],
    marginBottom: 12
  },
  variantGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
    justifyContent: 'space-between'
  },
  variantCard: {
    width: '30%',
    alignItems: 'center',
    gap: 4
  },
  variantImage: {
    width: '100%',
    aspectRatio: 1
  },
  variantKind: {
    fontSize: 11,
    fontWeight: '600',
    color: 'white',
    textTransform: 'capitalize'
  },
  variantMethod: {
    fontSize: 10,
    color: 'rgba(255, 255, 255, 0.5)',
    textTransform: 'capitalize'
  },
  modalFooter: {
    flexDirection: 'row',
    gap: 12,
    padding: 20,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)'
  },
  modalButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 12,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    alignItems: 'center',
    justifyContent: 'center'
  },
  modalButtonPrimary: {
    backgroundColor: _unifiedTheme.Theme.colors.primary[500]
  },
  modalButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: 'white'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,