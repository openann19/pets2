8e5335913072abc7d924995a72bc9b50
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageInput = MessageInput;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _EliteComponents = require("../EliteComponents");
var _GlassMorphism = require("../GlassMorphism");
var _PremiumTypography = require("../PremiumTypography");
var _Provider = require("../../theme/Provider");
var _adapters = require("../../theme/adapters");
var _chatService = require("../../services/chatService");
var _VoiceRecorder = require("./VoiceRecorder");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var MAX_MESSAGE_LENGTH = 500;
function MessageInput(_ref) {
  var value = _ref.value,
    onChangeText = _ref.onChangeText,
    onSend = _ref.onSend,
    onTypingChange = _ref.onTypingChange,
    _ref$isSending = _ref.isSending,
    isSending = _ref$isSending === void 0 ? false : _ref$isSending,
    _ref$maxLength = _ref.maxLength,
    maxLength = _ref$maxLength === void 0 ? MAX_MESSAGE_LENGTH : _ref$maxLength,
    _ref$placeholder = _ref.placeholder,
    placeholder = _ref$placeholder === void 0 ? "Type a message..." : _ref$placeholder,
    inputRef = _ref.inputRef,
    matchId = _ref.matchId,
    onAttachmentSent = _ref.onAttachmentSent,
    onVoiceNoteSent = _ref.onVoiceNoteSent,
    testID = _ref.testID;
  var theme = (0, _Provider.useTheme)();
  var colors = (0, _adapters.getExtendedColors)(theme);
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    characterCount = _useState2[0],
    setCharacterCount = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isTyping = _useState4[0],
    setIsTyping = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isUploading = _useState6[0],
    setIsUploading = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    showVoiceRecorder = _useState8[0],
    setShowVoiceRecorder = _useState8[1];
  var messageEntryAnimation = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var sendButtonScale = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var handleTextChange = (0, _react.useCallback)(function (text) {
    onChangeText(text);
    setCharacterCount(text.length);
    var wasTyping = isTyping;
    var nowTyping = text.length > 0;
    if (wasTyping !== nowTyping) {
      setIsTyping(nowTyping);
      onTypingChange == null ? void 0 : onTypingChange(nowTyping);
    }
  }, [onChangeText, isTyping, onTypingChange]);
  var handleFocus = (0, _react.useCallback)(function () {
    setIsTyping(true);
    onTypingChange == null ? void 0 : onTypingChange(true);
    _reactNative.Animated.timing(messageEntryAnimation, {
      toValue: 1,
      duration: 200,
      useNativeDriver: true
    }).start();
  }, [messageEntryAnimation, onTypingChange]);
  var handleBlur = (0, _react.useCallback)(function () {
    setIsTyping(false);
    onTypingChange == null ? void 0 : onTypingChange(false);
    _reactNative.Animated.timing(messageEntryAnimation, {
      toValue: 0,
      duration: 200,
      useNativeDriver: true
    }).start();
  }, [messageEntryAnimation, onTypingChange]);
  var handleSend = (0, _react.useCallback)(function () {
    if (!value.trim() || isSending) return;
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    _reactNative.Animated.sequence([_reactNative.Animated.timing(sendButtonScale, {
      toValue: 0.8,
      duration: 100,
      useNativeDriver: true
    }), _reactNative.Animated.timing(sendButtonScale, {
      toValue: 1,
      duration: 100,
      useNativeDriver: true
    })]).start();
    onSend();
  }, [value, isSending, onSend, sendButtonScale]);
  var handleAttachPress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (isUploading) return;
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    try {
      var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),
        status = _yield$ImagePicker$re.status;
      if (status !== "granted") {
        _reactNative.Alert.alert("Permission Needed", "Please grant photo library access to send attachments.");
        return;
      }
      _reactNative.Alert.alert("Add Attachment", "Choose an option", [{
        text: "Cancel",
        style: "cancel"
      }, {
        text: "Photo Library",
        onPress: function () {
          var _onPress = (0, _asyncToGenerator2.default)(function* () {
            setIsUploading(true);
            try {
              var result = yield ImagePicker.launchImageLibraryAsync({
                mediaTypes: ImagePicker.MediaTypeOptions.Images,
                allowsEditing: true,
                quality: 0.8,
                allowsMultipleSelection: false
              });
              if (!result.canceled && result.assets && result.assets[0]) {
                var asset = result.assets[0];
                var response = yield fetch(asset.uri);
                var blob = yield response.blob();
                yield _chatService.chatService.sendAttachment({
                  matchId: matchId,
                  attachmentType: "image",
                  file: blob
                });
                Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
                onAttachmentSent == null ? void 0 : onAttachmentSent();
              }
            } catch (error) {
              Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
              _reactNative.Alert.alert("Error", "Failed to send attachment. Please try again.");
            } finally {
              setIsUploading(false);
            }
          });
          function onPress() {
            return _onPress.apply(this, arguments);
          }
          return onPress;
        }()
      }, {
        text: "Take Photo",
        onPress: function () {
          var _onPress2 = (0, _asyncToGenerator2.default)(function* () {
            setIsUploading(true);
            try {
              var _yield$ImagePicker$re2 = yield ImagePicker.requestCameraPermissionsAsync(),
                _status = _yield$ImagePicker$re2.status;
              if (_status !== "granted") {
                _reactNative.Alert.alert("Permission Needed", "Camera access required to take photos.");
                setIsUploading(false);
                return;
              }
              var result = yield ImagePicker.launchCameraAsync({
                allowsEditing: true,
                quality: 0.8
              });
              if (!result.canceled && result.assets && result.assets[0]) {
                var asset = result.assets[0];
                var response = yield fetch(asset.uri);
                var blob = yield response.blob();
                yield _chatService.chatService.sendAttachment({
                  matchId: matchId,
                  attachmentType: "image",
                  file: blob
                });
                Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
                onAttachmentSent == null ? void 0 : onAttachmentSent();
              }
            } catch (error) {
              Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
              _reactNative.Alert.alert("Error", "Failed to take photo. Please try again.");
            } finally {
              setIsUploading(false);
            }
          });
          function onPress() {
            return _onPress2.apply(this, arguments);
          }
          return onPress;
        }()
      }], {
        cancelable: true
      });
    } catch (error) {
      _reactNative.Alert.alert("Error", "Failed to open photo picker.");
    }
  }), [isUploading, matchId, onAttachmentSent]);
  var handleEmojiPress = (0, _react.useCallback)(function () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    _reactNative.Alert.alert("Emoji Picker", "Emoji picker coming soon! ðŸ˜Š");
  }, []);
  var handleVoicePress = (0, _react.useCallback)(function () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    setShowVoiceRecorder(true);
  }, []);
  var handleVoiceNoteSent = (0, _react.useCallback)(function () {
    setShowVoiceRecorder(false);
    onVoiceNoteSent == null ? void 0 : onVoiceNoteSent();
  }, [onVoiceNoteSent]);
  var isNearLimit = characterCount > maxLength * 0.9;
  var isOverLimit = characterCount > maxLength;
  return (0, _jsxRuntime.jsxs)(_GlassMorphism.GlassContainer, {
    intensity: "heavy",
    transparency: "medium",
    border: "light",
    shadow: "medium",
    testID: testID,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(_EliteComponents.EliteButton, {
        testID: "attachment-button",
        title: "",
        variant: "glass",
        size: "sm",
        icon: isUploading ? "hourglass" : "add",
        ripple: true,
        onPress: handleAttachPress,
        disabled: isUploading
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.inputWrapper,
        children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          testID: "message-text-input",
          ref: inputRef,
          style: _reactNative.StyleSheet.flatten([styles.textInput, {
            backgroundColor: "rgba(255,255,255,0.1)",
            borderColor: "rgba(255,255,255,0.2)",
            color: "Theme.colors.neutral[0]"
          }, isTyping && [styles.textInputFocused, {
            borderColor: colors.primary,
            backgroundColor: "rgba(255,255,255,0.2)"
          }], isNearLimit && [styles.textInputWarning, {
            borderColor: colors.warning,
            backgroundColor: "rgba(245,158,11,0.1)"
          }]]),
          value: value,
          onChangeText: handleTextChange,
          placeholder: placeholder,
          placeholderTextColor: "rgba(255,255,255,0.6)",
          multiline: true,
          maxLength: maxLength,
          onFocus: handleFocus,
          onBlur: handleBlur,
          returnKeyType: "send",
          onSubmitEditing: handleSend,
          blurOnSubmit: false
        }), characterCount > maxLength * 0.8 && (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: _reactNative.StyleSheet.flatten([styles.characterCountContainer, {
            opacity: messageEntryAnimation
          }]),
          children: (0, _jsxRuntime.jsxs)(_PremiumTypography.PremiumBody, {
            size: "sm",
            weight: "regular",
            style: {
              color: isOverLimit ? colors.danger : colors.gray500
            },
            children: [characterCount, "/", maxLength]
          })
        })]
      }), (0, _jsxRuntime.jsx)(_EliteComponents.EliteButton, {
        testID: "emoji-button",
        title: "",
        variant: "glass",
        size: "sm",
        icon: "happy-outline",
        ripple: true,
        onPress: handleEmojiPress
      }), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: {
          transform: [{
            scale: sendButtonScale
          }]
        },
        children: (0, _jsxRuntime.jsx)(_EliteComponents.EliteButton, {
          testID: "send-button",
          title: "",
          variant: value.trim() || isUploading ? "primary" : "glass",
          size: "sm",
          icon: isSending || isUploading ? "hourglass" : "send",
          ripple: true,
          glow: !!(value.trim() || isUploading),
          shimmer: !!(isSending || isUploading),
          onPress: handleSend,
          disabled: !value.trim() && !isUploading || isSending || isUploading
        })
      })]
    }), showVoiceRecorder && (0, _jsxRuntime.jsx)(_VoiceRecorder.VoiceRecorder, {
      matchId: matchId,
      onVoiceNoteSent: handleVoiceNoteSent
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: "row",
    alignItems: "flex-end",
    paddingHorizontal: 16,
    paddingVertical: 8,
    gap: 8
  },
  inputWrapper: {
    flex: 1,
    position: "relative",
    minHeight: 36,
    maxHeight: 120
  },
  textInput: {
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 8,
    fontSize: 16,
    lineHeight: 24,
    borderWidth: 1,
    textAlignVertical: "center"
  },
  textInputFocused: {
    shadowColor: "#007AFF",
    shadowOffset: {
      width: 0,
      height: 0
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 2
  },
  textInputWarning: {},
  characterCountContainer: {
    position: "absolute",
    bottom: 4,
    right: 8,
    backgroundColor: "rgba(255,255,255,0.95)",
    paddingHorizontal: 4,
    paddingVertical: 4,
    borderRadius: 4
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,