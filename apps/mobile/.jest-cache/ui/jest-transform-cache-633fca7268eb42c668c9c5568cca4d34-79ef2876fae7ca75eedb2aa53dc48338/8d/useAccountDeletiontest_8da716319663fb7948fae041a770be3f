9adb253e0cc7fee662e9dcb75541851c
"use strict";

_getJestObj().mock("../../../../services/gdprService", function () {
  return {
    gdprService: {
      requestAccountDeletion: jest.fn(),
      cancelDeletion: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useAccountDeletion = require("../useAccountDeletion");
var _gdprService = require("../../../../services/gdprService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGdprService = _gdprService.gdprService;
describe("useAccountDeletion", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockGdprService.requestAccountDeletion.mockResolvedValue({
      success: true,
      message: "Deletion requested successfully",
      gracePeriodEndsAt: "2024-12-26T00:00:00.000Z",
      deletionId: "test-deletion-id"
    });
    mockGdprService.cancelDeletion.mockResolvedValue({
      success: true,
      message: "Deletion cancelled successfully"
    });
  });
  it("should initialize with correct default state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAccountDeletion.useAccountDeletion)();
      }),
      result = _renderHook.result;
    expect(result.current.isDeleting).toBe(false);
    expect(result.current.error).toBe(null);
  });
  it("should request account deletion successfully", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAccountDeletion.useAccountDeletion)();
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.requestDeletion("password123", "Privacy concerns", "Detailed feedback");
    });
    expect(result.current.isDeleting).toBe(true);
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isDeleting).toBe(false);
    });
    expect(mockGdprService.requestAccountDeletion).toHaveBeenCalledWith("password123", "Privacy concerns", "Detailed feedback");
    expect(result.current.error).toBe(null);
  }));
  it("should handle request deletion failure", (0, _asyncToGenerator2.default)(function* () {
    mockGdprService.requestAccountDeletion.mockRejectedValue(new Error("Invalid password"));
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAccountDeletion.useAccountDeletion)();
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.requestDeletion("wrongpassword");
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isDeleting).toBe(false);
    });
    expect(result.current.error).toBe("Invalid password");
  }));
  it("should cancel account deletion successfully", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAccountDeletion.useAccountDeletion)();
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.cancelDeletion();
    });
    expect(result.current.isDeleting).toBe(true);
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isDeleting).toBe(false);
    });
    expect(mockGdprService.cancelDeletion).toHaveBeenCalledTimes(1);
    expect(result.current.error).toBe(null);
  }));
  it("should handle cancel deletion failure", (0, _asyncToGenerator2.default)(function* () {
    mockGdprService.cancelDeletion.mockRejectedValue(new Error("Cancellation failed"));
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAccountDeletion.useAccountDeletion)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.cancelDeletion();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isDeleting).toBe(false);
    });
    expect(result.current.error).toBe("Cancellation failed");
  }));
  it("should request deletion with minimal parameters", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAccountDeletion.useAccountDeletion)();
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.requestDeletion("password123");
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isDeleting).toBe(false);
    });
    expect(mockGdprService.requestAccountDeletion).toHaveBeenCalledWith("password123", undefined, undefined);
  }));
  it("should return stable function references", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAccountDeletion.useAccountDeletion)();
      }),
      result = _renderHook7.result;
    var firstRequest = result.current.requestDeletion;
    var firstCancel = result.current.cancelDeletion;
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAccountDeletion.useAccountDeletion)();
      }),
      result2 = _renderHook8.result;
    expect(result.current.requestDeletion).toBe(firstRequest);
    expect(result.current.cancelDeletion).toBe(firstCancel);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,