{"version":3,"names":["_react","require","_api","_core","useMessageActions","_ref","matchId","onMessageRetried","onMessageDeleted","retryMessage","useCallback","_ref2","_asyncToGenerator2","default","messageId","currentMessages","message","find","msg","_id","matchesAPI","sendMessage","content","logger","info","error","_x","_x2","apply","arguments","deleteMessage","_ref3","_x3"],"sources":["useMessageActions.ts"],"sourcesContent":["import { useCallback } from \"react\";\nimport type { Message } from \"../useChatData\";\nimport { matchesAPI } from \"../../services/api\";\nimport { logger } from \"@pawfectmatch/core\";\n\nexport interface UseMessageActionsOptions {\n  matchId: string;\n  onMessageRetried?: (messageId: string) => void;\n  onMessageDeleted?: (messageId: string) => void;\n}\n\nexport interface UseMessageActionsReturn {\n  retryMessage: (\n    messageId: string,\n    currentMessages: Message[],\n  ) => Promise<void>;\n  deleteMessage: (messageId: string) => Promise<void>;\n}\n\n/**\n * Hook for managing message actions (retry, delete, etc.)\n */\nexport function useMessageActions({\n  matchId,\n  onMessageRetried,\n  onMessageDeleted,\n}: UseMessageActionsOptions): UseMessageActionsReturn {\n  const retryMessage = useCallback(\n    async (messageId: string, currentMessages: Message[]) => {\n      const message = currentMessages.find((msg) => msg._id === messageId);\n      if (!message) return;\n\n      try {\n        await matchesAPI.sendMessage(matchId, message.content);\n        logger.info(\"Message retried\", { messageId, matchId });\n        onMessageRetried?.(messageId);\n      } catch (error) {\n        logger.error(\"Failed to retry message\", { error, messageId });\n        throw error;\n      }\n    },\n    [matchId, onMessageRetried],\n  );\n\n  const deleteMessage = useCallback(\n    async (messageId: string) => {\n      try {\n        await matchesAPI.deleteMessage(matchId, messageId);\n        logger.info(\"Message deleted\", { messageId, matchId });\n        onMessageDeleted?.(messageId);\n      } catch (error) {\n        logger.error(\"Failed to delete message\", { error, messageId });\n        throw error;\n      }\n    },\n    [matchId, onMessageDeleted],\n  );\n\n  return {\n    retryMessage,\n    deleteMessage,\n  };\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,IAAA,GAAAD,OAAA;AACA,IAAAE,KAAA,GAAAF,OAAA;AAmBO,SAASG,iBAAiBA,CAAAC,IAAA,EAIqB;EAAA,IAHpDC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IACPC,gBAAgB,GAAAF,IAAA,CAAhBE,gBAAgB;IAChBC,gBAAgB,GAAAH,IAAA,CAAhBG,gBAAgB;EAEhB,IAAMC,YAAY,GAAG,IAAAC,kBAAW;IAAA,IAAAC,KAAA,OAAAC,kBAAA,CAAAC,OAAA,EAC9B,WAAOC,SAAiB,EAAEC,eAA0B,EAAK;MACvD,IAAMC,OAAO,GAAGD,eAAe,CAACE,IAAI,CAAC,UAACC,GAAG;QAAA,OAAKA,GAAG,CAACC,GAAG,KAAKL,SAAS;MAAA,EAAC;MACpE,IAAI,CAACE,OAAO,EAAE;MAEd,IAAI;QACF,MAAMI,eAAU,CAACC,WAAW,CAACf,OAAO,EAAEU,OAAO,CAACM,OAAO,CAAC;QACtDC,YAAM,CAACC,IAAI,CAAC,iBAAiB,EAAE;UAAEV,SAAS,EAATA,SAAS;UAAER,OAAO,EAAPA;QAAQ,CAAC,CAAC;QACtDC,gBAAgB,oBAAhBA,gBAAgB,CAAGO,SAAS,CAAC;MAC/B,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdF,YAAM,CAACE,KAAK,CAAC,yBAAyB,EAAE;UAAEA,KAAK,EAALA,KAAK;UAAEX,SAAS,EAATA;QAAU,CAAC,CAAC;QAC7D,MAAMW,KAAK;MACb;IACF,CAAC;IAAA,iBAAAC,EAAA,EAAAC,GAAA;MAAA,OAAAhB,KAAA,CAAAiB,KAAA,OAAAC,SAAA;IAAA;EAAA,KACD,CAACvB,OAAO,EAAEC,gBAAgB,CAC5B,CAAC;EAED,IAAMuB,aAAa,GAAG,IAAApB,kBAAW;IAAA,IAAAqB,KAAA,OAAAnB,kBAAA,CAAAC,OAAA,EAC/B,WAAOC,SAAiB,EAAK;MAC3B,IAAI;QACF,MAAMM,eAAU,CAACU,aAAa,CAACxB,OAAO,EAAEQ,SAAS,CAAC;QAClDS,YAAM,CAACC,IAAI,CAAC,iBAAiB,EAAE;UAAEV,SAAS,EAATA,SAAS;UAAER,OAAO,EAAPA;QAAQ,CAAC,CAAC;QACtDE,gBAAgB,oBAAhBA,gBAAgB,CAAGM,SAAS,CAAC;MAC/B,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdF,YAAM,CAACE,KAAK,CAAC,0BAA0B,EAAE;UAAEA,KAAK,EAALA,KAAK;UAAEX,SAAS,EAATA;QAAU,CAAC,CAAC;QAC9D,MAAMW,KAAK;MACb;IACF,CAAC;IAAA,iBAAAO,GAAA;MAAA,OAAAD,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA,KACD,CAACvB,OAAO,EAAEE,gBAAgB,CAC5B,CAAC;EAED,OAAO;IACLC,YAAY,EAAZA,YAAY;IACZqB,aAAa,EAAbA;EACF,CAAC;AACH","ignoreList":[]}