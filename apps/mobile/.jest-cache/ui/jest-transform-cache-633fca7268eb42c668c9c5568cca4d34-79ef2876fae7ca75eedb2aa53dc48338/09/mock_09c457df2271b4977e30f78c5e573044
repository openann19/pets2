3c32a02f421853affa6e66d007f667be
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var NOOP = function NOOP() {};
var ID = function ID(t) {
  return t;
};
var IMMEDIATE_CB_INVOCATION = function IMMEDIATE_CB_INVOCATION(cb) {
  return cb();
};
var BaseAnimationMock = function () {
  function BaseAnimationMock() {
    (0, _classCallCheck2.default)(this, BaseAnimationMock);
  }
  return (0, _createClass2.default)(BaseAnimationMock, [{
    key: "duration",
    value: function duration(_) {
      return this;
    }
  }, {
    key: "delay",
    value: function delay(_) {
      return this;
    }
  }, {
    key: "springify",
    value: function springify(_) {
      return this;
    }
  }, {
    key: "damping",
    value: function damping(_) {
      return this;
    }
  }, {
    key: "stiffness",
    value: function stiffness(_) {
      return this;
    }
  }, {
    key: "withCallback",
    value: function withCallback(_) {
      return this;
    }
  }, {
    key: "randomDelay",
    value: function randomDelay() {
      return this;
    }
  }, {
    key: "withInitialValues",
    value: function withInitialValues() {
      return this;
    }
  }, {
    key: "build",
    value: function build() {
      return function () {
        return {
          initialValues: {},
          animations: {}
        };
      };
    }
  }]);
}();
var ReanimatedV2 = {
  useSharedValue: function useSharedValue(v) {
    return {
      value: v
    };
  },
  useDerivedValue: function useDerivedValue(a) {
    return {
      value: a()
    };
  },
  useAnimatedScrollHandler: function useAnimatedScrollHandler() {
    return NOOP;
  },
  useAnimatedGestureHandler: function useAnimatedGestureHandler() {
    return NOOP;
  },
  useAnimatedStyle: IMMEDIATE_CB_INVOCATION,
  useAnimatedRef: function useAnimatedRef() {
    return {
      current: null
    };
  },
  useAnimatedReaction: NOOP,
  useAnimatedProps: IMMEDIATE_CB_INVOCATION,
  withTiming: function withTiming(toValue, _, cb) {
    cb && cb(true);
    return toValue;
  },
  withSpring: function withSpring(toValue, _, cb) {
    cb && cb(true);
    return toValue;
  },
  withDecay: function withDecay(_, cb) {
    cb && cb(true);
    return 0;
  },
  withDelay: function withDelay(_, animationValue) {
    return animationValue;
  },
  withSequence: function withSequence() {
    return 0;
  },
  withRepeat: function withRepeat(animation) {
    return animation;
  },
  cancelAnimation: NOOP,
  measure: function measure() {
    return {
      x: 0,
      y: 0,
      width: 0,
      height: 0,
      pageX: 0,
      pageY: 0
    };
  },
  Easing: {
    linear: ID,
    ease: ID,
    quad: ID,
    cubic: ID,
    poly: ID,
    sin: ID,
    circle: ID,
    exp: ID,
    elastic: ID,
    back: ID,
    bounce: ID,
    bezier: function bezier() {
      return {
        factory: ID
      };
    },
    bezierFn: ID,
    steps: ID,
    in: ID,
    out: ID,
    inOut: ID
  },
  Extrapolation: {
    EXTEND: 'extend',
    CLAMP: 'clamp',
    IDENTITY: 'identity'
  },
  runOnJS: function runOnJS(fn) {
    return fn;
  },
  runOnUI: function runOnUI(fn) {
    return fn;
  }
};
['FadeIn', 'FadeInRight', 'FadeInLeft', 'FadeInUp', 'FadeInDown', 'FadeOut', 'FadeOutRight', 'FadeOutLeft', 'FadeOutUp', 'FadeOutDown', 'FlipInYLeft', 'FlipInXDown', 'FlipInYRight', 'FlipInEasyX', 'FlipInEasyY', 'FlipOutXUp', 'FlipOutYLeft', 'FlipOutXDown', 'FlipOutYRight', 'FlipOutEasyX', 'FlipOutEasyY', 'StretchInY', 'StretchOutX', 'StretchOutY', 'SlideInLeft', 'SlideOutRight', 'SlideOutLeft', 'SlideInUp', 'SlideInDown', 'SlideOutUp', 'ZoomInRotate', 'ZoomInLeft', 'ZoomInRight', 'ZoomInUp', 'ZoomInDown', 'ZoomInEasyUp', 'ZoomInEasyDown', 'ZoomOut', 'ZoomOutRotate', 'ZoomOutLeft', 'ZoomOutRight', 'ZoomOutUp', 'ZoomOutDown', 'ZoomOutEasyUp', 'ZoomOutEasyDown', 'BounceInDown', 'BounceInUp', 'BounceInLeft', 'BounceInRight', 'BounceOut', 'BounceOutDown', 'BounceOutUp', 'BounceOutLeft', 'BounceOutRight', 'LightSpeedInLeft', 'LightSpeedOutRight', 'LightSpeedOutLeft', 'PinwheelOut', 'RotateInDownRight', 'RotateInUpLeft', 'RotateInUpRight', 'RotateOutDownLeft', 'RotateOutDownRight', 'RotateOutUpLeft', 'RotateOutUpRight', 'RollInRight', 'RollOutLeft', 'RollOutRight', 'Layout', 'CurvedTransition', 'JumpingTransition', 'SequencedTransition', 'FadingTransition', 'EntryExitTransition'].forEach(function (k) {
  return Object.assign(ReanimatedV2, (0, _defineProperty2.default)({}, k, new BaseAnimationMock()));
});
module.exports = _objectSpread({}, ReanimatedV2);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,