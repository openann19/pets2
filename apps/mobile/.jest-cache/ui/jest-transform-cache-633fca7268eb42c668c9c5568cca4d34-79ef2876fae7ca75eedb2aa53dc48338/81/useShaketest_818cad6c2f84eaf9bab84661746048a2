0cb29d9d9b7af6dc0f2717031565ba1b
"use strict";

_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: _globals.jest.fn(),
    ImpactFeedbackStyle: {
      Light: 'light',
      Medium: 'medium',
      Heavy: 'heavy'
    }
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  return {
    useSharedValue: _globals.jest.fn(),
    useAnimatedStyle: _globals.jest.fn(),
    withSequence: _globals.jest.fn(),
    withTiming: _globals.jest.fn(),
    runOnJS: _globals.jest.fn(),
    interpolate: _globals.jest.fn(),
    Extrapolate: {
      CLAMP: 'clamp'
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _useShake = require("../useShake");
var _expoHaptics = require("expo-haptics");
var _reactNativeReanimated = require("react-native-reanimated");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockImpactAsync = _expoHaptics.impactAsync;
var mockUseSharedValue = _reactNativeReanimated.useSharedValue;
var mockUseAnimatedStyle = _reactNativeReanimated.useAnimatedStyle;
var mockWithSequence = _reactNativeReanimated.withSequence;
var mockWithTiming = _reactNativeReanimated.withTiming;
var mockRunOnJS = _reactNativeReanimated.runOnJS;
var mockInterpolate = _reactNativeReanimated.interpolate;
(0, _globals.describe)('useShake', function () {
  var mockSharedValue = {
    value: 0,
    get: _globals.jest.fn(function () {
      return 0;
    }),
    set: _globals.jest.fn()
  };
  var mockAnimatedStyle = {
    transform: [{
      translateX: mockInterpolate()
    }]
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockUseSharedValue.mockReturnValue(mockSharedValue);
    mockUseAnimatedStyle.mockReturnValue(mockAnimatedStyle);
    mockWithSequence.mockReturnValue('shake-sequence');
    mockWithTiming.mockReturnValue('timing-animation');
    mockInterpolate.mockReturnValue(-10);
    mockImpactAsync.mockResolvedValue(undefined);
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with default configuration', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(mockUseSharedValue).toHaveBeenCalledWith(0);
      (0, _globals.expect)(mockUseAnimatedStyle).toHaveBeenCalled();
      (0, _globals.expect)(result.current.isShaking).toBe(false);
      (0, _globals.expect)(result.current.animatedStyle).toBe(mockAnimatedStyle);
    });
    (0, _globals.it)('should initialize with custom configuration', function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            intensity: 20,
            duration: 800,
            enableHaptics: false,
            repeatCount: 3
          });
        }),
        result = _renderHook2.result;
      (0, _globals.expect)(result.current.config.intensity).toBe(20);
      (0, _globals.expect)(result.current.config.duration).toBe(800);
      (0, _globals.expect)(result.current.config.enableHaptics).toBe(false);
      (0, _globals.expect)(result.current.config.repeatCount).toBe(3);
    });
  });
  (0, _globals.describe)('Shake Animation', function () {
    (0, _globals.it)('should trigger shake animation', function () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook3.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(result.current.isShaking).toBe(true);
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalled();
      (0, _globals.expect)(mockSharedValue.set).toHaveBeenCalledWith(0);
    });
    (0, _globals.it)('should create shake sequence with correct pattern', function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            intensity: 15,
            repeatCount: 2
          });
        }),
        result = _renderHook4.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalledWith(_globals.expect.anything(), _globals.expect.anything(), _globals.expect.anything(), _globals.expect.anything(), _globals.expect.anything(), _globals.expect.anything());
    });
    (0, _globals.it)('should use custom duration for shake timing', function () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            duration: 600
          });
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithTiming).toHaveBeenCalledWith(_globals.expect.anything(), _globals.expect.objectContaining({
        duration: 600
      }), _globals.expect.any(Function));
    });
    (0, _globals.it)('should reset shake state when animation completes', function () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(result.current.isShaking).toBe(true);
      var sequenceCall = mockWithSequence.mock.calls[0];
      var onCompleteCallback = sequenceCall[sequenceCall.length - 1];
      if (typeof onCompleteCallback === 'function') {
        (0, _reactNative.act)(function () {
          onCompleteCallback(true);
        });
      }
      (0, _globals.expect)(result.current.isShaking).toBe(false);
    });
  });
  (0, _globals.describe)('Haptic Feedback', function () {
    (0, _globals.it)('should trigger haptic feedback during shake', function () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook7.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockImpactAsync).toHaveBeenCalledWith('medium');
    });
    (0, _globals.it)('should use custom haptic style', function () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            hapticStyle: 'heavy'
          });
        }),
        result = _renderHook8.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockImpactAsync).toHaveBeenCalledWith('heavy');
    });
    (0, _globals.it)('should disable haptic feedback when configured', function () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            enableHaptics: false
          });
        }),
        result = _renderHook9.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockImpactAsync).not.toHaveBeenCalled();
    });
    (0, _globals.it)('should handle haptic feedback errors gracefully', function () {
      mockImpactAsync.mockRejectedValue(new Error('Haptic not available'));
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook0.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockImpactAsync).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Animation Styles', function () {
    (0, _globals.it)('should provide animated style with horizontal translation', function () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook1.result;
      (0, _globals.expect)(result.current.animatedStyle).toEqual({
        transform: [{
          translateX: -10
        }]
      });
      (0, _globals.expect)(mockInterpolate).toHaveBeenCalledWith(_globals.expect.anything(), _globals.expect.arrayContaining([-1, 0, 1]), _globals.expect.arrayContaining([-10, 0, 10]), 'clamp');
    });
    (0, _globals.it)('should use custom intensity in animation', function () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            intensity: 25
          });
        }),
        result = _renderHook10.result;
      (0, _globals.expect)(mockInterpolate).toHaveBeenCalledWith(_globals.expect.anything(), _globals.expect.any(Array), _globals.expect.arrayContaining([-25, 0, 25]), 'clamp');
    });
    (0, _globals.it)('should support vertical shake animation', function () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            direction: 'vertical'
          });
        }),
        result = _renderHook11.result;
      (0, _globals.expect)(result.current.animatedStyle).toEqual({
        transform: [{
          translateY: -10
        }]
      });
    });
  });
  (0, _globals.describe)('Shake Control', function () {
    (0, _globals.it)('should prevent concurrent shakes', function () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook12.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(result.current.isShaking).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalledTimes(1);
    });
    (0, _globals.it)('should allow shake after completion', function () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook13.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      var sequenceCall = mockWithSequence.mock.calls[0];
      var onCompleteCallback = sequenceCall[sequenceCall.length - 1];
      if (typeof onCompleteCallback === 'function') {
        (0, _reactNative.act)(function () {
          onCompleteCallback(true);
        });
      }
      (0, _globals.expect)(result.current.isShaking).toBe(false);
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalledTimes(2);
    });
    (0, _globals.it)('should provide manual control methods', function () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook14.result;
      (0, _reactNative.act)(function () {
        result.current.startShake();
      });
      (0, _globals.expect)(result.current.isShaking).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.stopShake();
      });
      (0, _globals.expect)(result.current.isShaking).toBe(false);
    });
    (0, _globals.it)('should reset animation state', function () {
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook15.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
        result.current.resetShake();
      });
      (0, _globals.expect)(result.current.isShaking).toBe(false);
      (0, _globals.expect)(mockSharedValue.set).toHaveBeenCalledWith(0);
    });
  });
  (0, _globals.describe)('Configuration Validation', function () {
    (0, _globals.it)('should handle invalid intensity values', function () {
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            intensity: -5
          });
        }),
        result = _renderHook16.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle invalid duration values', function () {
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            duration: 0
          });
        }),
        result = _renderHook17.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithTiming).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle invalid repeat count', function () {
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            repeatCount: 0
          });
        }),
        result = _renderHook18.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Platform Compatibility', function () {
    (0, _globals.it)('should work on iOS platform', function () {
      Platform.OS = 'ios';
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook19.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(result.current.getPlatformShakeSupport()).toEqual({
        supported: true,
        hapticAvailable: true,
        animationSupported: true
      });
    });
    (0, _globals.it)('should work on Android platform', function () {
      Platform.OS = 'android';
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook20.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(result.current.getPlatformShakeSupport().supported).toBe(true);
    });
    (0, _globals.it)('should handle web platform limitations', function () {
      Platform.OS = 'web';
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook21.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(result.current.animatedStyle).toBeDefined();
    });
  });
  (0, _globals.describe)('Performance Optimizations', function () {
    (0, _globals.it)('should memoize animated style', function () {
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook22.result,
        rerender = _renderHook22.rerender;
      var firstStyle = result.current.animatedStyle;
      rerender();
      var secondStyle = result.current.animatedStyle;
      (0, _globals.expect)(firstStyle).toBe(secondStyle);
      (0, _globals.expect)(mockUseAnimatedStyle).toHaveBeenCalledTimes(1);
    });
    (0, _globals.it)('should minimize re-renders during animation', function () {
      var renderCount = 0;
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          renderCount++;
          return (0, _useShake.useShake)();
        }),
        result = _renderHook23.result;
      (0, _globals.expect)(renderCount).toBe(1);
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(renderCount).toBeLessThanOrEqual(2);
    });
    (0, _globals.it)('should reuse animation sequences when possible', function () {
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook24.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalledTimes(2);
    });
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle animation setup failures', function () {
      mockUseSharedValue.mockImplementation(function () {
        throw new Error('Shared value creation failed');
      });
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook25.result;
      (0, _globals.expect)(result.current.shake).toBeDefined();
      (0, _globals.expect)(result.current.isShaking).toBeDefined();
    });
    (0, _globals.it)('should handle animation runtime errors', function () {
      mockWithSequence.mockImplementation(function () {
        throw new Error('Animation runtime error');
      });
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook26.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(result.current.isShaking).toBe(true);
    });
    (0, _globals.it)('should handle callback errors gracefully', function () {
      var _renderHook27 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook27.result;
      mockWithSequence.mockImplementationOnce(function () {
        return {
          onComplete: function onComplete(finished) {
            if (finished) {
              throw new Error('Callback error');
            }
          }
        };
      });
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(result.current.isShaking).toBe(true);
    });
  });
  (0, _globals.describe)('Integration with Other Systems', function () {
    (0, _globals.it)('should integrate with gesture handlers', function () {
      var _renderHook28 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook28.result;
      var gestureHandler = result.current.getGestureHandler();
      (0, _globals.expect)(gestureHandler).toEqual({
        onStart: _globals.expect.any(Function),
        onEnd: _globals.expect.any(Function),
        onCancel: _globals.expect.any(Function)
      });
      (0, _reactNative.act)(function () {
        gestureHandler.onStart == null ? void 0 : gestureHandler.onStart({});
      });
      (0, _globals.expect)(result.current.isShaking).toBe(true);
    });
    (0, _globals.it)('should provide shake trigger for external systems', function () {
      var _renderHook29 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook29.result;
      var externalTrigger = result.current.getShakeTrigger();
      (0, _globals.expect)(typeof externalTrigger).toBe('function');
      (0, _reactNative.act)(function () {
        externalTrigger();
      });
      (0, _globals.expect)(result.current.isShaking).toBe(true);
    });
  });
  (0, _globals.describe)('Accessibility Features', function () {
    (0, _globals.it)('should respect reduced motion preferences', function () {
      var _renderHook30 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            respectReducedMotion: true
          });
        }),
        result = _renderHook30.result;
      global.__reducedMotion = true;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalled();
      (0, _globals.expect)(result.current.config.respectReducedMotion).toBe(true);
      delete global.__reducedMotion;
    });
    (0, _globals.it)('should provide accessibility information', function () {
      var _renderHook31 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook31.result;
      var accessibilityInfo = result.current.getAccessibilityInfo();
      (0, _globals.expect)(accessibilityInfo).toEqual({
        isAnimating: false,
        animationType: 'shake',
        canBeDisabled: true,
        alternativeText: 'Shaking animation'
      });
    });
    (0, _globals.it)('should update accessibility info during animation', function () {
      var _renderHook32 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook32.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      var accessibilityInfo = result.current.getAccessibilityInfo();
      (0, _globals.expect)(accessibilityInfo.isAnimating).toBe(true);
    });
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle rapid consecutive shakes', function () {
      var _renderHook33 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook33.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
        result.current.shake();
        result.current.shake();
      });
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalledTimes(1);
    });
    (0, _globals.it)('should handle shake with zero intensity', function () {
      var _renderHook34 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            intensity: 0
          });
        }),
        result = _renderHook34.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle component unmount during shake', function () {
      var _renderHook35 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook35.result,
        unmount = _renderHook35.unmount;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(result.current.isShaking).toBe(true);
      unmount();
      (0, _globals.expect)(mockSharedValue.set).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle extreme configuration values', function () {
      var _renderHook36 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            intensity: 1000,
            duration: 10000,
            repeatCount: 100
          });
        }),
        result = _renderHook36.result;
      (0, _reactNative.act)(function () {
        result.current.shake();
      });
      (0, _globals.expect)(mockWithSequence).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle invalid configuration types', function () {
      var _renderHook37 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)({
            intensity: 'invalid',
            duration: null,
            enableHaptics: 'maybe'
          });
        }),
        result = _renderHook37.result;
      (0, _globals.expect)(result.current.config.intensity).toBeDefined();
      (0, _globals.expect)(result.current.config.duration).toBeDefined();
      (0, _globals.expect)(result.current.config.enableHaptics).toBeDefined();
    });
    (0, _globals.it)('should handle platform-specific animation limitations', function () {
      mockUseSharedValue.mockImplementation(function () {
        throw new Error('Animations not supported');
      });
      var _renderHook38 = (0, _reactNative.renderHook)(function () {
          return (0, _useShake.useShake)();
        }),
        result = _renderHook38.result;
      (0, _globals.expect)(result.current.shake).toBeDefined();
      (0, _globals.expect)(result.current.animatedStyle).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJpbXBhY3RBc3luYyIsImplc3QiLCJmbiIsIkltcGFjdEZlZWRiYWNrU3R5bGUiLCJMaWdodCIsIk1lZGl1bSIsIkhlYXZ5IiwidXNlU2hhcmVkVmFsdWUiLCJ1c2VBbmltYXRlZFN0eWxlIiwid2l0aFNlcXVlbmNlIiwid2l0aFRpbWluZyIsInJ1bk9uSlMiLCJpbnRlcnBvbGF0ZSIsIkV4dHJhcG9sYXRlIiwiQ0xBTVAiLCJsb2dnZXIiLCJpbmZvIiwiZXJyb3IiLCJ3YXJuIiwiX2dsb2JhbHMiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX3VzZVNoYWtlIiwiX2V4cG9IYXB0aWNzIiwiX3JlYWN0TmF0aXZlUmVhbmltYXRlZCIsIl9yZXF1aXJlIiwibW9ja0ltcGFjdEFzeW5jIiwibW9ja1VzZVNoYXJlZFZhbHVlIiwibW9ja1VzZUFuaW1hdGVkU3R5bGUiLCJtb2NrV2l0aFNlcXVlbmNlIiwibW9ja1dpdGhUaW1pbmciLCJtb2NrUnVuT25KUyIsIm1vY2tJbnRlcnBvbGF0ZSIsImRlc2NyaWJlIiwibW9ja1NoYXJlZFZhbHVlIiwidmFsdWUiLCJnZXQiLCJzZXQiLCJtb2NrQW5pbWF0ZWRTdHlsZSIsInRyYW5zZm9ybSIsInRyYW5zbGF0ZVgiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIm1vY2tSZXR1cm5WYWx1ZSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwidW5kZWZpbmVkIiwiaXQiLCJfcmVuZGVySG9vayIsInJlbmRlckhvb2siLCJ1c2VTaGFrZSIsInJlc3VsdCIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwidG9IYXZlQmVlbkNhbGxlZCIsImN1cnJlbnQiLCJpc1NoYWtpbmciLCJ0b0JlIiwiYW5pbWF0ZWRTdHlsZSIsIl9yZW5kZXJIb29rMiIsImludGVuc2l0eSIsImR1cmF0aW9uIiwiZW5hYmxlSGFwdGljcyIsInJlcGVhdENvdW50IiwiY29uZmlnIiwiX3JlbmRlckhvb2szIiwiYWN0Iiwic2hha2UiLCJfcmVuZGVySG9vazQiLCJhbnl0aGluZyIsIl9yZW5kZXJIb29rNSIsIm9iamVjdENvbnRhaW5pbmciLCJhbnkiLCJGdW5jdGlvbiIsIl9yZW5kZXJIb29rNiIsInNlcXVlbmNlQ2FsbCIsImNhbGxzIiwib25Db21wbGV0ZUNhbGxiYWNrIiwibGVuZ3RoIiwiX3JlbmRlckhvb2s3IiwiX3JlbmRlckhvb2s4IiwiaGFwdGljU3R5bGUiLCJfcmVuZGVySG9vazkiLCJub3QiLCJtb2NrUmVqZWN0ZWRWYWx1ZSIsIkVycm9yIiwiX3JlbmRlckhvb2swIiwiX3JlbmRlckhvb2sxIiwidG9FcXVhbCIsImFycmF5Q29udGFpbmluZyIsIl9yZW5kZXJIb29rMTAiLCJBcnJheSIsIl9yZW5kZXJIb29rMTEiLCJkaXJlY3Rpb24iLCJ0cmFuc2xhdGVZIiwiX3JlbmRlckhvb2sxMiIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZW5kZXJIb29rMTMiLCJfcmVuZGVySG9vazE0Iiwic3RhcnRTaGFrZSIsInN0b3BTaGFrZSIsIl9yZW5kZXJIb29rMTUiLCJyZXNldFNoYWtlIiwiX3JlbmRlckhvb2sxNiIsIl9yZW5kZXJIb29rMTciLCJfcmVuZGVySG9vazE4IiwiUGxhdGZvcm0iLCJPUyIsIl9yZW5kZXJIb29rMTkiLCJnZXRQbGF0Zm9ybVNoYWtlU3VwcG9ydCIsInN1cHBvcnRlZCIsImhhcHRpY0F2YWlsYWJsZSIsImFuaW1hdGlvblN1cHBvcnRlZCIsIl9yZW5kZXJIb29rMjAiLCJfcmVuZGVySG9vazIxIiwidG9CZURlZmluZWQiLCJfcmVuZGVySG9vazIyIiwicmVyZW5kZXIiLCJmaXJzdFN0eWxlIiwic2Vjb25kU3R5bGUiLCJyZW5kZXJDb3VudCIsIl9yZW5kZXJIb29rMjMiLCJ0b0JlTGVzc1RoYW5PckVxdWFsIiwiX3JlbmRlckhvb2syNCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIl9yZW5kZXJIb29rMjUiLCJfcmVuZGVySG9vazI2IiwiX3JlbmRlckhvb2syNyIsIm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UiLCJvbkNvbXBsZXRlIiwiZmluaXNoZWQiLCJfcmVuZGVySG9vazI4IiwiZ2VzdHVyZUhhbmRsZXIiLCJnZXRHZXN0dXJlSGFuZGxlciIsIm9uU3RhcnQiLCJvbkVuZCIsIm9uQ2FuY2VsIiwiX3JlbmRlckhvb2syOSIsImV4dGVybmFsVHJpZ2dlciIsImdldFNoYWtlVHJpZ2dlciIsIl9yZW5kZXJIb29rMzAiLCJyZXNwZWN0UmVkdWNlZE1vdGlvbiIsImdsb2JhbCIsIl9fcmVkdWNlZE1vdGlvbiIsIl9yZW5kZXJIb29rMzEiLCJhY2Nlc3NpYmlsaXR5SW5mbyIsImdldEFjY2Vzc2liaWxpdHlJbmZvIiwiaXNBbmltYXRpbmciLCJhbmltYXRpb25UeXBlIiwiY2FuQmVEaXNhYmxlZCIsImFsdGVybmF0aXZlVGV4dCIsIl9yZW5kZXJIb29rMzIiLCJfcmVuZGVySG9vazMzIiwiX3JlbmRlckhvb2szNCIsIl9yZW5kZXJIb29rMzUiLCJ1bm1vdW50IiwiX3JlbmRlckhvb2szNiIsIl9yZW5kZXJIb29rMzciLCJfcmVuZGVySG9vazM4Il0sInNvdXJjZXMiOlsidXNlU2hha2UudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbXByZWhlbnNpdmUgdGVzdHMgZm9yIHVzZVNoYWtlIGhvb2tcbiAqXG4gKiBDb3ZlcmFnZTpcbiAqIC0gU2hha2UgZ2VzdHVyZSBkZXRlY3Rpb24gYW5kIHRyaWdnZXJpbmdcbiAqIC0gSGFwdGljIGZlZWRiYWNrIGludGVncmF0aW9uXG4gKiAtIEFuaW1hdGlvbiBzdGF0ZSBtYW5hZ2VtZW50XG4gKiAtIEN1c3RvbWl6YWJsZSBzaGFrZSBwYXJhbWV0ZXJzXG4gKiAtIFBsYXRmb3JtLXNwZWNpZmljIGJlaGF2aW9yXG4gKiAtIEVycm9yIGhhbmRsaW5nIGFuZCBlZGdlIGNhc2VzXG4gKi9cblxuaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QsIGplc3QsIGJlZm9yZUVhY2gsIGFmdGVyRWFjaCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgdXNlU2hha2UgfSBmcm9tICcuLi91c2VTaGFrZSc7XG5cbi8vIE1vY2sgZXhwby1oYXB0aWNzXG5qZXN0Lm1vY2soJ2V4cG8taGFwdGljcycsICgpID0+ICh7XG4gIGltcGFjdEFzeW5jOiBqZXN0LmZuKCksXG4gIEltcGFjdEZlZWRiYWNrU3R5bGU6IHtcbiAgICBMaWdodDogJ2xpZ2h0JyxcbiAgICBNZWRpdW06ICdtZWRpdW0nLFxuICAgIEhlYXZ5OiAnaGVhdnknLFxuICB9LFxufSkpO1xuXG4vLyBNb2NrIHJlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkJywgKCkgPT4gKHtcbiAgdXNlU2hhcmVkVmFsdWU6IGplc3QuZm4oKSxcbiAgdXNlQW5pbWF0ZWRTdHlsZTogamVzdC5mbigpLFxuICB3aXRoU2VxdWVuY2U6IGplc3QuZm4oKSxcbiAgd2l0aFRpbWluZzogamVzdC5mbigpLFxuICBydW5PbkpTOiBqZXN0LmZuKCksXG4gIGludGVycG9sYXRlOiBqZXN0LmZuKCksXG4gIEV4dHJhcG9sYXRlOiB7XG4gICAgQ0xBTVA6ICdjbGFtcCcsXG4gIH0sXG59KSk7XG5cbi8vIE1vY2sgbG9nZ2VyXG5qZXN0Lm1vY2soJ0BwYXdmZWN0bWF0Y2gvY29yZScsICgpID0+ICh7XG4gIGxvZ2dlcjoge1xuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICBlcnJvcjogamVzdC5mbigpLFxuICAgIHdhcm46IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuaW1wb3J0IHsgaW1wYWN0QXN5bmMsIEltcGFjdEZlZWRiYWNrU3R5bGUgfSBmcm9tICdleHBvLWhhcHRpY3MnO1xuaW1wb3J0IHtcbiAgdXNlU2hhcmVkVmFsdWUsXG4gIHVzZUFuaW1hdGVkU3R5bGUsXG4gIHdpdGhTZXF1ZW5jZSxcbiAgd2l0aFRpbWluZyxcbiAgcnVuT25KUyxcbiAgaW50ZXJwb2xhdGUsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkJztcblxuY29uc3QgbW9ja0ltcGFjdEFzeW5jID0gaW1wYWN0QXN5bmMgYXMgamVzdC5Nb2NrO1xuY29uc3QgbW9ja1VzZVNoYXJlZFZhbHVlID0gdXNlU2hhcmVkVmFsdWUgYXMgamVzdC5Nb2NrO1xuY29uc3QgbW9ja1VzZUFuaW1hdGVkU3R5bGUgPSB1c2VBbmltYXRlZFN0eWxlIGFzIGplc3QuTW9jaztcbmNvbnN0IG1vY2tXaXRoU2VxdWVuY2UgPSB3aXRoU2VxdWVuY2UgYXMgamVzdC5Nb2NrO1xuY29uc3QgbW9ja1dpdGhUaW1pbmcgPSB3aXRoVGltaW5nIGFzIGplc3QuTW9jaztcbmNvbnN0IG1vY2tSdW5PbkpTID0gcnVuT25KUyBhcyBqZXN0Lk1vY2s7XG5jb25zdCBtb2NrSW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZSBhcyBqZXN0Lk1vY2s7XG5cbmRlc2NyaWJlKCd1c2VTaGFrZScsICgpID0+IHtcbiAgY29uc3QgbW9ja1NoYXJlZFZhbHVlID0ge1xuICAgIHZhbHVlOiAwLFxuICAgIGdldDogamVzdC5mbigoKSA9PiAwKSxcbiAgICBzZXQ6IGplc3QuZm4oKSxcbiAgfTtcblxuICBjb25zdCBtb2NrQW5pbWF0ZWRTdHlsZSA9IHtcbiAgICB0cmFuc2Zvcm06IFt7IHRyYW5zbGF0ZVg6IG1vY2tJbnRlcnBvbGF0ZSgpIH1dLFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuXG4gICAgLy8gU2V0dXAgZGVmYXVsdCBtb2Nrc1xuICAgIG1vY2tVc2VTaGFyZWRWYWx1ZS5tb2NrUmV0dXJuVmFsdWUobW9ja1NoYXJlZFZhbHVlKTtcbiAgICBtb2NrVXNlQW5pbWF0ZWRTdHlsZS5tb2NrUmV0dXJuVmFsdWUobW9ja0FuaW1hdGVkU3R5bGUpO1xuICAgIG1vY2tXaXRoU2VxdWVuY2UubW9ja1JldHVyblZhbHVlKCdzaGFrZS1zZXF1ZW5jZScpO1xuICAgIG1vY2tXaXRoVGltaW5nLm1vY2tSZXR1cm5WYWx1ZSgndGltaW5nLWFuaW1hdGlvbicpO1xuICAgIG1vY2tJbnRlcnBvbGF0ZS5tb2NrUmV0dXJuVmFsdWUoLTEwKTtcbiAgICBtb2NrSW1wYWN0QXN5bmMubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0luaXRpYWxpemF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgY29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICBleHBlY3QobW9ja1VzZVNoYXJlZFZhbHVlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgwKTtcbiAgICAgIGV4cGVjdChtb2NrVXNlQW5pbWF0ZWRTdHlsZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzU2hha2luZykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYW5pbWF0ZWRTdHlsZSkudG9CZShtb2NrQW5pbWF0ZWRTdHlsZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBjdXN0b20gY29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+XG4gICAgICAgIHVzZVNoYWtlKHtcbiAgICAgICAgICBpbnRlbnNpdHk6IDIwLFxuICAgICAgICAgIGR1cmF0aW9uOiA4MDAsXG4gICAgICAgICAgZW5hYmxlSGFwdGljczogZmFsc2UsXG4gICAgICAgICAgcmVwZWF0Q291bnQ6IDMsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY29uZmlnLmludGVuc2l0eSkudG9CZSgyMCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY29uZmlnLmR1cmF0aW9uKS50b0JlKDgwMCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY29uZmlnLmVuYWJsZUhhcHRpY3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmNvbmZpZy5yZXBlYXRDb3VudCkudG9CZSgzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1NoYWtlIEFuaW1hdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHRyaWdnZXIgc2hha2UgYW5pbWF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2hha2UoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzU2hha2luZykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChtb2NrV2l0aFNlcXVlbmNlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QobW9ja1NoYXJlZFZhbHVlLnNldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoMCk7IC8vIFJlc2V0IHRvIHN0YXJ0aW5nIHBvc2l0aW9uXG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBzaGFrZSBzZXF1ZW5jZSB3aXRoIGNvcnJlY3QgcGF0dGVybicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+XG4gICAgICAgIHVzZVNoYWtlKHsgaW50ZW5zaXR5OiAxNSwgcmVwZWF0Q291bnQ6IDIgfSlcbiAgICAgICk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU2hvdWxkIGNyZWF0ZSBzZXF1ZW5jZSB3aXRoIGFsdGVybmF0aW5nIG1vdmVtZW50c1xuICAgICAgZXhwZWN0KG1vY2tXaXRoU2VxdWVuY2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3QuYW55dGhpbmcoKSwgLy8gRmlyc3QgbW92ZW1lbnRcbiAgICAgICAgZXhwZWN0LmFueXRoaW5nKCksIC8vIFJldHVybiB0byBjZW50ZXJcbiAgICAgICAgZXhwZWN0LmFueXRoaW5nKCksIC8vIFNlY29uZCBtb3ZlbWVudFxuICAgICAgICBleHBlY3QuYW55dGhpbmcoKSwgLy8gUmV0dXJuIHRvIGNlbnRlclxuICAgICAgICBleHBlY3QuYW55dGhpbmcoKSwgLy8gVGhpcmQgbW92ZW1lbnRcbiAgICAgICAgZXhwZWN0LmFueXRoaW5nKCkgIC8vIEZpbmFsIHJldHVybiB0byBjZW50ZXJcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVzZSBjdXN0b20gZHVyYXRpb24gZm9yIHNoYWtlIHRpbWluZycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+XG4gICAgICAgIHVzZVNoYWtlKHsgZHVyYXRpb246IDYwMCB9KVxuICAgICAgKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja1dpdGhUaW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3QuYW55dGhpbmcoKSxcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBkdXJhdGlvbjogNjAwIH0pLFxuICAgICAgICBleHBlY3QuYW55KEZ1bmN0aW9uKSAvLyBvbkNvbXBsZXRlIGNhbGxiYWNrXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXNldCBzaGFrZSBzdGF0ZSB3aGVuIGFuaW1hdGlvbiBjb21wbGV0ZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTaGFrZSgpKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTaGFraW5nKS50b0JlKHRydWUpO1xuXG4gICAgICAvLyBTaW11bGF0ZSBhbmltYXRpb24gY29tcGxldGlvbiBieSBjYWxsaW5nIHRoZSBvbkNvbXBsZXRlIGNhbGxiYWNrXG4gICAgICBjb25zdCBzZXF1ZW5jZUNhbGwgPSBtb2NrV2l0aFNlcXVlbmNlLm1vY2suY2FsbHNbMF07XG4gICAgICBjb25zdCBvbkNvbXBsZXRlQ2FsbGJhY2sgPSBzZXF1ZW5jZUNhbGxbc2VxdWVuY2VDYWxsLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKHR5cGVvZiBvbkNvbXBsZXRlQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgICBvbkNvbXBsZXRlQ2FsbGJhY2sodHJ1ZSk7IC8vIGZpbmlzaGVkID0gdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzU2hha2luZykudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdIYXB0aWMgRmVlZGJhY2snLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB0cmlnZ2VyIGhhcHRpYyBmZWVkYmFjayBkdXJpbmcgc2hha2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTaGFrZSgpKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja0ltcGFjdEFzeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnbWVkaXVtJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVzZSBjdXN0b20gaGFwdGljIHN0eWxlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT5cbiAgICAgICAgdXNlU2hha2UoeyBoYXB0aWNTdHlsZTogJ2hlYXZ5JyB9KVxuICAgICAgKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja0ltcGFjdEFzeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnaGVhdnknKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGlzYWJsZSBoYXB0aWMgZmVlZGJhY2sgd2hlbiBjb25maWd1cmVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT5cbiAgICAgICAgdXNlU2hha2UoeyBlbmFibGVIYXB0aWNzOiBmYWxzZSB9KVxuICAgICAgKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja0ltcGFjdEFzeW5jKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgaGFwdGljIGZlZWRiYWNrIGVycm9ycyBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgbW9ja0ltcGFjdEFzeW5jLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignSGFwdGljIG5vdCBhdmFpbGFibGUnKSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICAvLyBTaG91bGQgbm90IGNyYXNoXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrSW1wYWN0QXN5bmMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0FuaW1hdGlvbiBTdHlsZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBwcm92aWRlIGFuaW1hdGVkIHN0eWxlIHdpdGggaG9yaXpvbnRhbCB0cmFuc2xhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYW5pbWF0ZWRTdHlsZSkudG9FcXVhbCh7XG4gICAgICAgIHRyYW5zZm9ybTogW3sgdHJhbnNsYXRlWDogLTEwIH1dLCAvLyBNb2NrIGludGVycG9sYXRlIHJldHVybiB2YWx1ZVxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrSW50ZXJwb2xhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3QuYW55dGhpbmcoKSwgLy8gc2hhcmVkVmFsdWVcbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbLTEsIDAsIDFdKSwgLy8gaW5wdXQgcmFuZ2UgZm9yIHNoYWtlIHBhdHRlcm5cbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbLTEwLCAwLCAxMF0pLCAvLyBvdXRwdXQgcmFuZ2UgYmFzZWQgb24gaW50ZW5zaXR5XG4gICAgICAgICdjbGFtcCdcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVzZSBjdXN0b20gaW50ZW5zaXR5IGluIGFuaW1hdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+XG4gICAgICAgIHVzZVNoYWtlKHsgaW50ZW5zaXR5OiAyNSB9KVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KG1vY2tJbnRlcnBvbGF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5hbnl0aGluZygpLFxuICAgICAgICBleHBlY3QuYW55KEFycmF5KSxcbiAgICAgICAgZXhwZWN0LmFycmF5Q29udGFpbmluZyhbLTI1LCAwLCAyNV0pLCAvLyBDdXN0b20gaW50ZW5zaXR5XG4gICAgICAgICdjbGFtcCdcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHN1cHBvcnQgdmVydGljYWwgc2hha2UgYW5pbWF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT5cbiAgICAgICAgdXNlU2hha2UoeyBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcgfSlcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5hbmltYXRlZFN0eWxlKS50b0VxdWFsKHtcbiAgICAgICAgdHJhbnNmb3JtOiBbeyB0cmFuc2xhdGVZOiAtMTAgfV0sIC8vIFZlcnRpY2FsIHRyYW5zbGF0aW9uIGluc3RlYWQgb2YgaG9yaXpvbnRhbFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTaGFrZSBDb250cm9sJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcHJldmVudCBjb25jdXJyZW50IHNoYWtlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc1NoYWtpbmcpLnRvQmUodHJ1ZSk7XG5cbiAgICAgIC8vIFRyeSB0byBzaGFrZSBhZ2FpbiB3aGlsZSBhbHJlYWR5IHNoYWtpbmdcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU2hvdWxkIG9ubHkgaGF2ZSBiZWVuIGNhbGxlZCBvbmNlXG4gICAgICBleHBlY3QobW9ja1dpdGhTZXF1ZW5jZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBzaGFrZSBhZnRlciBjb21wbGV0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2hha2UoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQ29tcGxldGUgdGhlIGFuaW1hdGlvblxuICAgICAgY29uc3Qgc2VxdWVuY2VDYWxsID0gbW9ja1dpdGhTZXF1ZW5jZS5tb2NrLmNhbGxzWzBdO1xuICAgICAgY29uc3Qgb25Db21wbGV0ZUNhbGxiYWNrID0gc2VxdWVuY2VDYWxsW3NlcXVlbmNlQ2FsbC5sZW5ndGggLSAxXTtcbiAgICAgIGlmICh0eXBlb2Ygb25Db21wbGV0ZUNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgICAgb25Db21wbGV0ZUNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzU2hha2luZykudG9CZShmYWxzZSk7XG5cbiAgICAgIC8vIFNob3VsZCBhbGxvdyBuZXcgc2hha2VcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tXaXRoU2VxdWVuY2UpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJvdmlkZSBtYW51YWwgY29udHJvbCBtZXRob2RzJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2hha2UoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnN0YXJ0U2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTaGFraW5nKS50b0JlKHRydWUpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zdG9wU2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTaGFraW5nKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVzZXQgYW5pbWF0aW9uIHN0YXRlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2hha2UoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnJlc2V0U2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTaGFraW5nKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChtb2NrU2hhcmVkVmFsdWUuc2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvbmZpZ3VyYXRpb24gVmFsaWRhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIGludGVuc2l0eSB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PlxuICAgICAgICB1c2VTaGFrZSh7IGludGVuc2l0eTogLTUgfSkgLy8gSW52YWxpZCBuZWdhdGl2ZSBpbnRlbnNpdHlcbiAgICAgICk7XG5cbiAgICAgIC8vIFNob3VsZCB1c2UgZGVmYXVsdCBvciBjbGFtcGVkIHZhbHVlXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrV2l0aFNlcXVlbmNlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIGR1cmF0aW9uIHZhbHVlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+XG4gICAgICAgIHVzZVNoYWtlKHsgZHVyYXRpb246IDAgfSkgLy8gSW52YWxpZCB6ZXJvIGR1cmF0aW9uXG4gICAgICApO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBzdGlsbCB3b3JrIHdpdGggc29tZSBkZWZhdWx0IGR1cmF0aW9uXG4gICAgICBleHBlY3QobW9ja1dpdGhUaW1pbmcpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgcmVwZWF0IGNvdW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT5cbiAgICAgICAgdXNlU2hha2UoeyByZXBlYXRDb3VudDogMCB9KSAvLyBObyByZXBlYXRzXG4gICAgICApO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBjcmVhdGUgbWluaW1hbCBzZXF1ZW5jZVxuICAgICAgZXhwZWN0KG1vY2tXaXRoU2VxdWVuY2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BsYXRmb3JtIENvbXBhdGliaWxpdHknLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB3b3JrIG9uIGlPUyBwbGF0Zm9ybScsICgpID0+IHtcbiAgICAgIFBsYXRmb3JtLk9TID0gJ2lvcyc7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5nZXRQbGF0Zm9ybVNoYWtlU3VwcG9ydCgpKS50b0VxdWFsKHtcbiAgICAgICAgc3VwcG9ydGVkOiB0cnVlLFxuICAgICAgICBoYXB0aWNBdmFpbGFibGU6IHRydWUsXG4gICAgICAgIGFuaW1hdGlvblN1cHBvcnRlZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB3b3JrIG9uIEFuZHJvaWQgcGxhdGZvcm0nLCAoKSA9PiB7XG4gICAgICBQbGF0Zm9ybS5PUyA9ICdhbmRyb2lkJztcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2hha2UoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmdldFBsYXRmb3JtU2hha2VTdXBwb3J0KCkuc3VwcG9ydGVkKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgd2ViIHBsYXRmb3JtIGxpbWl0YXRpb25zJywgKCkgPT4ge1xuICAgICAgUGxhdGZvcm0uT1MgPSAnd2ViJztcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2hha2UoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU2hvdWxkIHN0aWxsIHByb3ZpZGUgYW5pbWF0aW9uIGV2ZW4gb24gd2ViXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYW5pbWF0ZWRTdHlsZSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BlcmZvcm1hbmNlIE9wdGltaXphdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBtZW1vaXplIGFuaW1hdGVkIHN0eWxlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQsIHJlcmVuZGVyIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICBjb25zdCBmaXJzdFN0eWxlID0gcmVzdWx0LmN1cnJlbnQuYW5pbWF0ZWRTdHlsZTtcbiAgICAgIHJlcmVuZGVyKCk7XG4gICAgICBjb25zdCBzZWNvbmRTdHlsZSA9IHJlc3VsdC5jdXJyZW50LmFuaW1hdGVkU3R5bGU7XG5cbiAgICAgIGV4cGVjdChmaXJzdFN0eWxlKS50b0JlKHNlY29uZFN0eWxlKTtcbiAgICAgIGV4cGVjdChtb2NrVXNlQW5pbWF0ZWRTdHlsZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBtaW5pbWl6ZSByZS1yZW5kZXJzIGR1cmluZyBhbmltYXRpb24nLCAoKSA9PiB7XG4gICAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB7XG4gICAgICAgIHJlbmRlckNvdW50Kys7XG4gICAgICAgIHJldHVybiB1c2VTaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZW5kZXJDb3VudCkudG9CZSgxKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTaG91bGQgbm90IGNhdXNlIGV4Y2Vzc2l2ZSByZS1yZW5kZXJzXG4gICAgICBleHBlY3QocmVuZGVyQ291bnQpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldXNlIGFuaW1hdGlvbiBzZXF1ZW5jZXMgd2hlbiBwb3NzaWJsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU2hvdWxkIHJldXNlIHRoZSBzYW1lIGFuaW1hdGlvbiBwYXR0ZXJuXG4gICAgICBleHBlY3QobW9ja1dpdGhTZXF1ZW5jZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXJyb3IgSGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYW5pbWF0aW9uIHNldHVwIGZhaWx1cmVzJywgKCkgPT4ge1xuICAgICAgbW9ja1VzZVNoYXJlZFZhbHVlLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2hhcmVkIHZhbHVlIGNyZWF0aW9uIGZhaWxlZCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICAvLyBTaG91bGQgcHJvdmlkZSBmYWxsYmFjayBmdW5jdGlvbmFsaXR5XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2hha2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTaGFraW5nKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYW5pbWF0aW9uIHJ1bnRpbWUgZXJyb3JzJywgKCkgPT4ge1xuICAgICAgbW9ja1dpdGhTZXF1ZW5jZS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuaW1hdGlvbiBydW50aW1lIGVycm9yJyk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2hha2UoKSk7XG5cbiAgICAgIC8vIFNob3VsZCBub3QgY3Jhc2hcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzU2hha2luZykudG9CZSh0cnVlKTsgLy8gU3RpbGwgdXBkYXRlcyBzdGF0ZVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2FsbGJhY2sgZXJyb3JzIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTaGFrZSgpKTtcblxuICAgICAgLy8gT3ZlcnJpZGUgdGhlIG1vY2sgdG8gc2ltdWxhdGUgY2FsbGJhY2sgZXJyb3JcbiAgICAgIG1vY2tXaXRoU2VxdWVuY2UubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb25Db21wbGV0ZTogKGZpbmlzaGVkOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICBpZiAoZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBlcnJvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTaG91bGQgaGFuZGxlIGNhbGxiYWNrIGVycm9ycyB3aXRob3V0IGNyYXNoaW5nXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTaGFraW5nKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSW50ZWdyYXRpb24gd2l0aCBPdGhlciBTeXN0ZW1zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaW50ZWdyYXRlIHdpdGggZ2VzdHVyZSBoYW5kbGVycycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICBjb25zdCBnZXN0dXJlSGFuZGxlciA9IHJlc3VsdC5jdXJyZW50LmdldEdlc3R1cmVIYW5kbGVyKCk7XG5cbiAgICAgIGV4cGVjdChnZXN0dXJlSGFuZGxlcikudG9FcXVhbCh7XG4gICAgICAgIG9uU3RhcnQ6IGV4cGVjdC5hbnkoRnVuY3Rpb24pLFxuICAgICAgICBvbkVuZDogZXhwZWN0LmFueShGdW5jdGlvbiksXG4gICAgICAgIG9uQ2FuY2VsOiBleHBlY3QuYW55KEZ1bmN0aW9uKSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTaW11bGF0ZSBnZXN0dXJlIHN0YXJ0XG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBnZXN0dXJlSGFuZGxlci5vblN0YXJ0Py4oe30gYXMgYW55KTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTaGFraW5nKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcm92aWRlIHNoYWtlIHRyaWdnZXIgZm9yIGV4dGVybmFsIHN5c3RlbXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTaGFrZSgpKTtcblxuICAgICAgY29uc3QgZXh0ZXJuYWxUcmlnZ2VyID0gcmVzdWx0LmN1cnJlbnQuZ2V0U2hha2VUcmlnZ2VyKCk7XG5cbiAgICAgIGV4cGVjdCh0eXBlb2YgZXh0ZXJuYWxUcmlnZ2VyKS50b0JlKCdmdW5jdGlvbicpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBleHRlcm5hbFRyaWdnZXIoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTaGFraW5nKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQWNjZXNzaWJpbGl0eSBGZWF0dXJlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlc3BlY3QgcmVkdWNlZCBtb3Rpb24gcHJlZmVyZW5jZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PlxuICAgICAgICB1c2VTaGFrZSh7IHJlc3BlY3RSZWR1Y2VkTW90aW9uOiB0cnVlIH0pXG4gICAgICApO1xuXG4gICAgICAvLyBNb2NrIHJlZHVjZWQgbW90aW9uIGVuYWJsZWRcbiAgICAgIChnbG9iYWwgYXMgYW55KS5fX3JlZHVjZWRNb3Rpb24gPSB0cnVlO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBza2lwIGFuaW1hdGlvbiBidXQgc3RpbGwgdHJpZ2dlciBoYXB0aWNzXG4gICAgICBleHBlY3QobW9ja1dpdGhTZXF1ZW5jZSkudG9IYXZlQmVlbkNhbGxlZCgpOyAvLyBTdGlsbCBjYWxsZWQsIGJ1dCBpbXBsZW1lbnRhdGlvbiBoYW5kbGVzIHJlZHVjZWQgbW90aW9uXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY29uZmlnLnJlc3BlY3RSZWR1Y2VkTW90aW9uKS50b0JlKHRydWUpO1xuXG4gICAgICBkZWxldGUgKGdsb2JhbCBhcyBhbnkpLl9fcmVkdWNlZE1vdGlvbjtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJvdmlkZSBhY2Nlc3NpYmlsaXR5IGluZm9ybWF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2hha2UoKSk7XG5cbiAgICAgIGNvbnN0IGFjY2Vzc2liaWxpdHlJbmZvID0gcmVzdWx0LmN1cnJlbnQuZ2V0QWNjZXNzaWJpbGl0eUluZm8oKTtcblxuICAgICAgZXhwZWN0KGFjY2Vzc2liaWxpdHlJbmZvKS50b0VxdWFsKHtcbiAgICAgICAgaXNBbmltYXRpbmc6IGZhbHNlLFxuICAgICAgICBhbmltYXRpb25UeXBlOiAnc2hha2UnLFxuICAgICAgICBjYW5CZURpc2FibGVkOiB0cnVlLFxuICAgICAgICBhbHRlcm5hdGl2ZVRleHQ6ICdTaGFraW5nIGFuaW1hdGlvbicsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXBkYXRlIGFjY2Vzc2liaWxpdHkgaW5mbyBkdXJpbmcgYW5pbWF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2hha2UoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNoYWtlKCk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYWNjZXNzaWJpbGl0eUluZm8gPSByZXN1bHQuY3VycmVudC5nZXRBY2Nlc3NpYmlsaXR5SW5mbygpO1xuXG4gICAgICBleHBlY3QoYWNjZXNzaWJpbGl0eUluZm8uaXNBbmltYXRpbmcpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFZGdlIENhc2VzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJhcGlkIGNvbnNlY3V0aXZlIHNoYWtlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBvbmx5IGV4ZWN1dGUgb25lIHNoYWtlIGF0IGEgdGltZVxuICAgICAgZXhwZWN0KG1vY2tXaXRoU2VxdWVuY2UpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHNoYWtlIHdpdGggemVybyBpbnRlbnNpdHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PlxuICAgICAgICB1c2VTaGFrZSh7IGludGVuc2l0eTogMCB9KVxuICAgICAgKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2hha2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTaG91bGQgc3RpbGwgY3JlYXRlIGFuaW1hdGlvbiBzZXF1ZW5jZVxuICAgICAgZXhwZWN0KG1vY2tXaXRoU2VxdWVuY2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNvbXBvbmVudCB1bm1vdW50IGR1cmluZyBzaGFrZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0LCB1bm1vdW50IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNoYWtlKCkpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc1NoYWtpbmcpLnRvQmUodHJ1ZSk7XG5cbiAgICAgIHVubW91bnQoKTtcblxuICAgICAgLy8gU2hvdWxkIG5vdCBjYXVzZSBtZW1vcnkgbGVha3NcbiAgICAgIGV4cGVjdChtb2NrU2hhcmVkVmFsdWUuc2V0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBleHRyZW1lIGNvbmZpZ3VyYXRpb24gdmFsdWVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT5cbiAgICAgICAgdXNlU2hha2Uoe1xuICAgICAgICAgIGludGVuc2l0eTogMTAwMCwgLy8gVmVyeSBoaWdoIGludGVuc2l0eVxuICAgICAgICAgIGR1cmF0aW9uOiAxMDAwMCwgLy8gVmVyeSBsb25nIGR1cmF0aW9uXG4gICAgICAgICAgcmVwZWF0Q291bnQ6IDEwMCwgLy8gTWFueSByZXBlYXRzXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zaGFrZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBoYW5kbGUgZXh0cmVtZSB2YWx1ZXMgZ3JhY2VmdWxseVxuICAgICAgZXhwZWN0KG1vY2tXaXRoU2VxdWVuY2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgY29uZmlndXJhdGlvbiB0eXBlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+XG4gICAgICAgIHVzZVNoYWtlKHtcbiAgICAgICAgICBpbnRlbnNpdHk6ICdpbnZhbGlkJyBhcyBhbnksXG4gICAgICAgICAgZHVyYXRpb246IG51bGwgYXMgYW55LFxuICAgICAgICAgIGVuYWJsZUhhcHRpY3M6ICdtYXliZScgYXMgYW55LFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgLy8gU2hvdWxkIG5vdCBjcmFzaCwgc2hvdWxkIHVzZSBkZWZhdWx0c1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmNvbmZpZy5pbnRlbnNpdHkpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY29uZmlnLmR1cmF0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmNvbmZpZy5lbmFibGVIYXB0aWNzKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcGxhdGZvcm0tc3BlY2lmaWMgYW5pbWF0aW9uIGxpbWl0YXRpb25zJywgKCkgPT4ge1xuICAgICAgLy8gU2ltdWxhdGUgcGxhdGZvcm0gd2l0aG91dCBhbmltYXRpb24gc3VwcG9ydFxuICAgICAgbW9ja1VzZVNoYXJlZFZhbHVlLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQW5pbWF0aW9ucyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2hha2UoKSk7XG5cbiAgICAgIC8vIFNob3VsZCBwcm92aWRlIGZhbGxiYWNrIGJlaGF2aW9yXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2hha2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYW5pbWF0ZWRTdHlsZSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFpQkFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGNBQWMsRUFBRTtFQUFBLE9BQU87SUFDL0JDLFdBQVcsRUFBRUMsYUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUN0QkMsbUJBQW1CLEVBQUU7TUFDbkJDLEtBQUssRUFBRSxPQUFPO01BQ2RDLE1BQU0sRUFBRSxRQUFRO01BQ2hCQyxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSFIsV0FBQSxHQUFLQyxJQUFJLENBQUMseUJBQXlCLEVBQUU7RUFBQSxPQUFPO0lBQzFDUSxjQUFjLEVBQUVOLGFBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDekJNLGdCQUFnQixFQUFFUCxhQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzNCTyxZQUFZLEVBQUVSLGFBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDdkJRLFVBQVUsRUFBRVQsYUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNyQlMsT0FBTyxFQUFFVixhQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCVSxXQUFXLEVBQUVYLGFBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDdEJXLFdBQVcsRUFBRTtNQUNYQyxLQUFLLEVBQUU7SUFDVDtFQUNGLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSGhCLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFO0VBQUEsT0FBTztJQUNyQ2dCLE1BQU0sRUFBRTtNQUNOQyxJQUFJLEVBQUVmLGFBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDZmUsS0FBSyxFQUFFaEIsYUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNoQmdCLElBQUksRUFBRWpCLGFBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ2hCO0VBQ0YsQ0FBQztBQUFBLENBQUMsQ0FBQztBQWxDSCxJQUFBaUIsUUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsU0FBQSxHQUFBRixPQUFBO0FBa0NBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLHNCQUFBLEdBQUFKLE9BQUE7QUFPaUMsU0FBQXRCLFlBQUE7RUFBQSxJQUFBMkIsUUFBQSxHQUFBTCxPQUFBO0lBQUFuQixJQUFBLEdBQUF3QixRQUFBLENBQUF4QixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUVqQyxJQUFNeUIsZUFBZSxHQUFHMUIsd0JBQXdCO0FBQ2hELElBQU0yQixrQkFBa0IsR0FBR3BCLHFDQUEyQjtBQUN0RCxJQUFNcUIsb0JBQW9CLEdBQUdwQix1Q0FBNkI7QUFDMUQsSUFBTXFCLGdCQUFnQixHQUFHcEIsbUNBQXlCO0FBQ2xELElBQU1xQixjQUFjLEdBQUdwQixpQ0FBdUI7QUFDOUMsSUFBTXFCLFdBQVcsR0FBR3BCLDhCQUFvQjtBQUN4QyxJQUFNcUIsZUFBZSxHQUFHcEIsa0NBQXdCO0FBRWhELElBQUFxQixpQkFBUSxFQUFDLFVBQVUsRUFBRSxZQUFNO0VBQ3pCLElBQU1DLGVBQWUsR0FBRztJQUN0QkMsS0FBSyxFQUFFLENBQUM7SUFDUkMsR0FBRyxFQUFFbkMsYUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNLENBQUM7SUFBQSxFQUFDO0lBQ3JCbUMsR0FBRyxFQUFFcEMsYUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDZixDQUFDO0VBRUQsSUFBTW9DLGlCQUFpQixHQUFHO0lBQ3hCQyxTQUFTLEVBQUUsQ0FBQztNQUFFQyxVQUFVLEVBQUVSLGVBQWUsQ0FBQztJQUFFLENBQUM7RUFDL0MsQ0FBQztFQUVELElBQUFTLG1CQUFVLEVBQUMsWUFBTTtJQUNmeEMsYUFBSSxDQUFDeUMsYUFBYSxDQUFDLENBQUM7SUFHcEJmLGtCQUFrQixDQUFDZ0IsZUFBZSxDQUFDVCxlQUFlLENBQUM7SUFDbkROLG9CQUFvQixDQUFDZSxlQUFlLENBQUNMLGlCQUFpQixDQUFDO0lBQ3ZEVCxnQkFBZ0IsQ0FBQ2MsZUFBZSxDQUFDLGdCQUFnQixDQUFDO0lBQ2xEYixjQUFjLENBQUNhLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQztJQUNsRFgsZUFBZSxDQUFDVyxlQUFlLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDcENqQixlQUFlLENBQUNrQixpQkFBaUIsQ0FBQ0MsU0FBUyxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGLElBQUFaLGlCQUFRLEVBQUMsZ0JBQWdCLEVBQUUsWUFBTTtJQUMvQixJQUFBYSxXQUFFLEVBQUMsOENBQThDLEVBQUUsWUFBTTtNQUN2RCxJQUFBQyxXQUFBLEdBQW1CLElBQUFDLHVCQUFVLEVBQUM7VUFBQSxPQUFNLElBQUFDLGtCQUFRLEVBQUMsQ0FBQztRQUFBLEVBQUM7UUFBdkNDLE1BQU0sR0FBQUgsV0FBQSxDQUFORyxNQUFNO01BRWQsSUFBQUMsZUFBTSxFQUFDeEIsa0JBQWtCLENBQUMsQ0FBQ3lCLG9CQUFvQixDQUFDLENBQUMsQ0FBQztNQUNsRCxJQUFBRCxlQUFNLEVBQUN2QixvQkFBb0IsQ0FBQyxDQUFDeUIsZ0JBQWdCLENBQUMsQ0FBQztNQUMvQyxJQUFBRixlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDQyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEtBQUssQ0FBQztNQUM1QyxJQUFBTCxlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDRyxhQUFhLENBQUMsQ0FBQ0QsSUFBSSxDQUFDbEIsaUJBQWlCLENBQUM7SUFDOUQsQ0FBQyxDQUFDO0lBRUYsSUFBQVEsV0FBRSxFQUFDLDZDQUE2QyxFQUFFLFlBQU07TUFDdEQsSUFBQVksWUFBQSxHQUFtQixJQUFBVix1QkFBVSxFQUFDO1VBQUEsT0FDNUIsSUFBQUMsa0JBQVEsRUFBQztZQUNQVSxTQUFTLEVBQUUsRUFBRTtZQUNiQyxRQUFRLEVBQUUsR0FBRztZQUNiQyxhQUFhLEVBQUUsS0FBSztZQUNwQkMsV0FBVyxFQUFFO1VBQ2YsQ0FBQyxDQUFDO1FBQUEsQ0FDSixDQUFDO1FBUE9aLE1BQU0sR0FBQVEsWUFBQSxDQUFOUixNQUFNO01BU2QsSUFBQUMsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ1MsTUFBTSxDQUFDSixTQUFTLENBQUMsQ0FBQ0gsSUFBSSxDQUFDLEVBQUUsQ0FBQztNQUNoRCxJQUFBTCxlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDUyxNQUFNLENBQUNILFFBQVEsQ0FBQyxDQUFDSixJQUFJLENBQUMsR0FBRyxDQUFDO01BQ2hELElBQUFMLGVBQU0sRUFBQ0QsTUFBTSxDQUFDSSxPQUFPLENBQUNTLE1BQU0sQ0FBQ0YsYUFBYSxDQUFDLENBQUNMLElBQUksQ0FBQyxLQUFLLENBQUM7TUFDdkQsSUFBQUwsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ1MsTUFBTSxDQUFDRCxXQUFXLENBQUMsQ0FBQ04sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRixJQUFBdkIsaUJBQVEsRUFBQyxpQkFBaUIsRUFBRSxZQUFNO0lBQ2hDLElBQUFhLFdBQUUsRUFBQyxnQ0FBZ0MsRUFBRSxZQUFNO01BQ3pDLElBQUFrQixZQUFBLEdBQW1CLElBQUFoQix1QkFBVSxFQUFDO1VBQUEsT0FBTSxJQUFBQyxrQkFBUSxFQUFDLENBQUM7UUFBQSxFQUFDO1FBQXZDQyxNQUFNLEdBQUFjLFlBQUEsQ0FBTmQsTUFBTTtNQUVkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQWYsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDM0MsSUFBQUwsZUFBTSxFQUFDdEIsZ0JBQWdCLENBQUMsQ0FBQ3dCLGdCQUFnQixDQUFDLENBQUM7TUFDM0MsSUFBQUYsZUFBTSxFQUFDakIsZUFBZSxDQUFDRyxHQUFHLENBQUMsQ0FBQ2Usb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQztJQUVGLElBQUFOLFdBQUUsRUFBQyxtREFBbUQsRUFBRSxZQUFNO01BQzVELElBQUFxQixZQUFBLEdBQW1CLElBQUFuQix1QkFBVSxFQUFDO1VBQUEsT0FDNUIsSUFBQUMsa0JBQVEsRUFBQztZQUFFVSxTQUFTLEVBQUUsRUFBRTtZQUFFRyxXQUFXLEVBQUU7VUFBRSxDQUFDLENBQUM7UUFBQSxDQUM3QyxDQUFDO1FBRk9aLE1BQU0sR0FBQWlCLFlBQUEsQ0FBTmpCLE1BQU07TUFJZCxJQUFBZSxnQkFBRyxFQUFDLFlBQU07UUFDUmYsTUFBTSxDQUFDSSxPQUFPLENBQUNZLEtBQUssQ0FBQyxDQUFDO01BQ3hCLENBQUMsQ0FBQztNQUdGLElBQUFmLGVBQU0sRUFBQ3RCLGdCQUFnQixDQUFDLENBQUN1QixvQkFBb0IsQ0FDM0NELGVBQU0sQ0FBQ2lCLFFBQVEsQ0FBQyxDQUFDLEVBQ2pCakIsZUFBTSxDQUFDaUIsUUFBUSxDQUFDLENBQUMsRUFDakJqQixlQUFNLENBQUNpQixRQUFRLENBQUMsQ0FBQyxFQUNqQmpCLGVBQU0sQ0FBQ2lCLFFBQVEsQ0FBQyxDQUFDLEVBQ2pCakIsZUFBTSxDQUFDaUIsUUFBUSxDQUFDLENBQUMsRUFDakJqQixlQUFNLENBQUNpQixRQUFRLENBQUMsQ0FDbEIsQ0FBQztJQUNILENBQUMsQ0FBQztJQUVGLElBQUF0QixXQUFFLEVBQUMsNkNBQTZDLEVBQUUsWUFBTTtNQUN0RCxJQUFBdUIsWUFBQSxHQUFtQixJQUFBckIsdUJBQVUsRUFBQztVQUFBLE9BQzVCLElBQUFDLGtCQUFRLEVBQUM7WUFBRVcsUUFBUSxFQUFFO1VBQUksQ0FBQyxDQUFDO1FBQUEsQ0FDN0IsQ0FBQztRQUZPVixNQUFNLEdBQUFtQixZQUFBLENBQU5uQixNQUFNO01BSWQsSUFBQWUsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JmLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztNQUN4QixDQUFDLENBQUM7TUFFRixJQUFBZixlQUFNLEVBQUNyQixjQUFjLENBQUMsQ0FBQ3NCLG9CQUFvQixDQUN6Q0QsZUFBTSxDQUFDaUIsUUFBUSxDQUFDLENBQUMsRUFDakJqQixlQUFNLENBQUNtQixnQkFBZ0IsQ0FBQztRQUFFVixRQUFRLEVBQUU7TUFBSSxDQUFDLENBQUMsRUFDMUNULGVBQU0sQ0FBQ29CLEdBQUcsQ0FBQ0MsUUFBUSxDQUNyQixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsSUFBQTFCLFdBQUUsRUFBQyxtREFBbUQsRUFBRSxZQUFNO01BQzVELElBQUEyQixZQUFBLEdBQW1CLElBQUF6Qix1QkFBVSxFQUFDO1VBQUEsT0FBTSxJQUFBQyxrQkFBUSxFQUFDLENBQUM7UUFBQSxFQUFDO1FBQXZDQyxNQUFNLEdBQUF1QixZQUFBLENBQU52QixNQUFNO01BRWQsSUFBQWUsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JmLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztNQUN4QixDQUFDLENBQUM7TUFFRixJQUFBZixlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDQyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztNQUczQyxJQUFNa0IsWUFBWSxHQUFHN0MsZ0JBQWdCLENBQUM5QixJQUFJLENBQUM0RSxLQUFLLENBQUMsQ0FBQyxDQUFDO01BQ25ELElBQU1DLGtCQUFrQixHQUFHRixZQUFZLENBQUNBLFlBQVksQ0FBQ0csTUFBTSxHQUFHLENBQUMsQ0FBQztNQUNoRSxJQUFJLE9BQU9ELGtCQUFrQixLQUFLLFVBQVUsRUFBRTtRQUM1QyxJQUFBWCxnQkFBRyxFQUFDLFlBQU07VUFDUlcsa0JBQWtCLENBQUMsSUFBSSxDQUFDO1FBQzFCLENBQUMsQ0FBQztNQUNKO01BRUEsSUFBQXpCLGVBQU0sRUFBQ0QsTUFBTSxDQUFDSSxPQUFPLENBQUNDLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzlDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGLElBQUF2QixpQkFBUSxFQUFDLGlCQUFpQixFQUFFLFlBQU07SUFDaEMsSUFBQWEsV0FBRSxFQUFDLDZDQUE2QyxFQUFFLFlBQU07TUFDdEQsSUFBQWdDLFlBQUEsR0FBbUIsSUFBQTlCLHVCQUFVLEVBQUM7VUFBQSxPQUFNLElBQUFDLGtCQUFRLEVBQUMsQ0FBQztRQUFBLEVBQUM7UUFBdkNDLE1BQU0sR0FBQTRCLFlBQUEsQ0FBTjVCLE1BQU07TUFFZCxJQUFBZSxnQkFBRyxFQUFDLFlBQU07UUFDUmYsTUFBTSxDQUFDSSxPQUFPLENBQUNZLEtBQUssQ0FBQyxDQUFDO01BQ3hCLENBQUMsQ0FBQztNQUVGLElBQUFmLGVBQU0sRUFBQ3pCLGVBQWUsQ0FBQyxDQUFDMEIsb0JBQW9CLENBQUMsUUFBUSxDQUFDO0lBQ3hELENBQUMsQ0FBQztJQUVGLElBQUFOLFdBQUUsRUFBQyxnQ0FBZ0MsRUFBRSxZQUFNO01BQ3pDLElBQUFpQyxZQUFBLEdBQW1CLElBQUEvQix1QkFBVSxFQUFDO1VBQUEsT0FDNUIsSUFBQUMsa0JBQVEsRUFBQztZQUFFK0IsV0FBVyxFQUFFO1VBQVEsQ0FBQyxDQUFDO1FBQUEsQ0FDcEMsQ0FBQztRQUZPOUIsTUFBTSxHQUFBNkIsWUFBQSxDQUFON0IsTUFBTTtNQUlkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQWYsZUFBTSxFQUFDekIsZUFBZSxDQUFDLENBQUMwQixvQkFBb0IsQ0FBQyxPQUFPLENBQUM7SUFDdkQsQ0FBQyxDQUFDO0lBRUYsSUFBQU4sV0FBRSxFQUFDLGdEQUFnRCxFQUFFLFlBQU07TUFDekQsSUFBQW1DLFlBQUEsR0FBbUIsSUFBQWpDLHVCQUFVLEVBQUM7VUFBQSxPQUM1QixJQUFBQyxrQkFBUSxFQUFDO1lBQUVZLGFBQWEsRUFBRTtVQUFNLENBQUMsQ0FBQztRQUFBLENBQ3BDLENBQUM7UUFGT1gsTUFBTSxHQUFBK0IsWUFBQSxDQUFOL0IsTUFBTTtNQUlkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQWYsZUFBTSxFQUFDekIsZUFBZSxDQUFDLENBQUN3RCxHQUFHLENBQUM3QixnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQztJQUVGLElBQUFQLFdBQUUsRUFBQyxpREFBaUQsRUFBRSxZQUFNO01BQzFEcEIsZUFBZSxDQUFDeUQsaUJBQWlCLENBQUMsSUFBSUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7TUFFcEUsSUFBQUMsWUFBQSxHQUFtQixJQUFBckMsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsa0JBQVEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUF2Q0MsTUFBTSxHQUFBbUMsWUFBQSxDQUFObkMsTUFBTTtNQUdkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQWYsZUFBTSxFQUFDekIsZUFBZSxDQUFDLENBQUMyQixnQkFBZ0IsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGLElBQUFwQixpQkFBUSxFQUFDLGtCQUFrQixFQUFFLFlBQU07SUFDakMsSUFBQWEsV0FBRSxFQUFDLDJEQUEyRCxFQUFFLFlBQU07TUFDcEUsSUFBQXdDLFlBQUEsR0FBbUIsSUFBQXRDLHVCQUFVLEVBQUM7VUFBQSxPQUFNLElBQUFDLGtCQUFRLEVBQUMsQ0FBQztRQUFBLEVBQUM7UUFBdkNDLE1BQU0sR0FBQW9DLFlBQUEsQ0FBTnBDLE1BQU07TUFFZCxJQUFBQyxlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDRyxhQUFhLENBQUMsQ0FBQzhCLE9BQU8sQ0FBQztRQUMzQ2hELFNBQVMsRUFBRSxDQUFDO1VBQUVDLFVBQVUsRUFBRSxDQUFDO1FBQUcsQ0FBQztNQUNqQyxDQUFDLENBQUM7TUFFRixJQUFBVyxlQUFNLEVBQUNuQixlQUFlLENBQUMsQ0FBQ29CLG9CQUFvQixDQUMxQ0QsZUFBTSxDQUFDaUIsUUFBUSxDQUFDLENBQUMsRUFDakJqQixlQUFNLENBQUNxQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDbENyQyxlQUFNLENBQUNxQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFDcEMsT0FDRixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsSUFBQTFDLFdBQUUsRUFBQywwQ0FBMEMsRUFBRSxZQUFNO01BQ25ELElBQUEyQyxhQUFBLEdBQW1CLElBQUF6Qyx1QkFBVSxFQUFDO1VBQUEsT0FDNUIsSUFBQUMsa0JBQVEsRUFBQztZQUFFVSxTQUFTLEVBQUU7VUFBRyxDQUFDLENBQUM7UUFBQSxDQUM3QixDQUFDO1FBRk9ULE1BQU0sR0FBQXVDLGFBQUEsQ0FBTnZDLE1BQU07TUFJZCxJQUFBQyxlQUFNLEVBQUNuQixlQUFlLENBQUMsQ0FBQ29CLG9CQUFvQixDQUMxQ0QsZUFBTSxDQUFDaUIsUUFBUSxDQUFDLENBQUMsRUFDakJqQixlQUFNLENBQUNvQixHQUFHLENBQUNtQixLQUFLLENBQUMsRUFDakJ2QyxlQUFNLENBQUNxQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFDcEMsT0FDRixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsSUFBQTFDLFdBQUUsRUFBQyx5Q0FBeUMsRUFBRSxZQUFNO01BQ2xELElBQUE2QyxhQUFBLEdBQW1CLElBQUEzQyx1QkFBVSxFQUFDO1VBQUEsT0FDNUIsSUFBQUMsa0JBQVEsRUFBQztZQUFFMkMsU0FBUyxFQUFFO1VBQVcsQ0FBQyxDQUFDO1FBQUEsQ0FDckMsQ0FBQztRQUZPMUMsTUFBTSxHQUFBeUMsYUFBQSxDQUFOekMsTUFBTTtNQUlkLElBQUFDLGVBQU0sRUFBQ0QsTUFBTSxDQUFDSSxPQUFPLENBQUNHLGFBQWEsQ0FBQyxDQUFDOEIsT0FBTyxDQUFDO1FBQzNDaEQsU0FBUyxFQUFFLENBQUM7VUFBRXNELFVBQVUsRUFBRSxDQUFDO1FBQUcsQ0FBQztNQUNqQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRixJQUFBNUQsaUJBQVEsRUFBQyxlQUFlLEVBQUUsWUFBTTtJQUM5QixJQUFBYSxXQUFFLEVBQUMsa0NBQWtDLEVBQUUsWUFBTTtNQUMzQyxJQUFBZ0QsYUFBQSxHQUFtQixJQUFBOUMsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsa0JBQVEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUF2Q0MsTUFBTSxHQUFBNEMsYUFBQSxDQUFONUMsTUFBTTtNQUVkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQWYsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFHM0MsSUFBQVMsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JmLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztNQUN4QixDQUFDLENBQUM7TUFHRixJQUFBZixlQUFNLEVBQUN0QixnQkFBZ0IsQ0FBQyxDQUFDa0UscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQztJQUVGLElBQUFqRCxXQUFFLEVBQUMscUNBQXFDLEVBQUUsWUFBTTtNQUM5QyxJQUFBa0QsYUFBQSxHQUFtQixJQUFBaEQsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsa0JBQVEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUF2Q0MsTUFBTSxHQUFBOEMsYUFBQSxDQUFOOUMsTUFBTTtNQUVkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BR0YsSUFBTVEsWUFBWSxHQUFHN0MsZ0JBQWdCLENBQUM5QixJQUFJLENBQUM0RSxLQUFLLENBQUMsQ0FBQyxDQUFDO01BQ25ELElBQU1DLGtCQUFrQixHQUFHRixZQUFZLENBQUNBLFlBQVksQ0FBQ0csTUFBTSxHQUFHLENBQUMsQ0FBQztNQUNoRSxJQUFJLE9BQU9ELGtCQUFrQixLQUFLLFVBQVUsRUFBRTtRQUM1QyxJQUFBWCxnQkFBRyxFQUFDLFlBQU07VUFDUlcsa0JBQWtCLENBQUMsSUFBSSxDQUFDO1FBQzFCLENBQUMsQ0FBQztNQUNKO01BRUEsSUFBQXpCLGVBQU0sRUFBQ0QsTUFBTSxDQUFDSSxPQUFPLENBQUNDLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDO01BRzVDLElBQUFTLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQWYsZUFBTSxFQUFDdEIsZ0JBQWdCLENBQUMsQ0FBQ2tFLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUM7SUFFRixJQUFBakQsV0FBRSxFQUFDLHVDQUF1QyxFQUFFLFlBQU07TUFDaEQsSUFBQW1ELGFBQUEsR0FBbUIsSUFBQWpELHVCQUFVLEVBQUM7VUFBQSxPQUFNLElBQUFDLGtCQUFRLEVBQUMsQ0FBQztRQUFBLEVBQUM7UUFBdkNDLE1BQU0sR0FBQStDLGFBQUEsQ0FBTi9DLE1BQU07TUFFZCxJQUFBZSxnQkFBRyxFQUFDLFlBQU07UUFDUmYsTUFBTSxDQUFDSSxPQUFPLENBQUM0QyxVQUFVLENBQUMsQ0FBQztNQUM3QixDQUFDLENBQUM7TUFFRixJQUFBL0MsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFFM0MsSUFBQVMsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JmLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDNkMsU0FBUyxDQUFDLENBQUM7TUFDNUIsQ0FBQyxDQUFDO01BRUYsSUFBQWhELGVBQU0sRUFBQ0QsTUFBTSxDQUFDSSxPQUFPLENBQUNDLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzlDLENBQUMsQ0FBQztJQUVGLElBQUFWLFdBQUUsRUFBQyw4QkFBOEIsRUFBRSxZQUFNO01BQ3ZDLElBQUFzRCxhQUFBLEdBQW1CLElBQUFwRCx1QkFBVSxFQUFDO1VBQUEsT0FBTSxJQUFBQyxrQkFBUSxFQUFDLENBQUM7UUFBQSxFQUFDO1FBQXZDQyxNQUFNLEdBQUFrRCxhQUFBLENBQU5sRCxNQUFNO01BRWQsSUFBQWUsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JmLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztRQUN0QmhCLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDK0MsVUFBVSxDQUFDLENBQUM7TUFDN0IsQ0FBQyxDQUFDO01BRUYsSUFBQWxELGVBQU0sRUFBQ0QsTUFBTSxDQUFDSSxPQUFPLENBQUNDLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDO01BQzVDLElBQUFMLGVBQU0sRUFBQ2pCLGVBQWUsQ0FBQ0csR0FBRyxDQUFDLENBQUNlLG9CQUFvQixDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRixJQUFBbkIsaUJBQVEsRUFBQywwQkFBMEIsRUFBRSxZQUFNO0lBQ3pDLElBQUFhLFdBQUUsRUFBQyx3Q0FBd0MsRUFBRSxZQUFNO01BQ2pELElBQUF3RCxhQUFBLEdBQW1CLElBQUF0RCx1QkFBVSxFQUFDO1VBQUEsT0FDNUIsSUFBQUMsa0JBQVEsRUFBQztZQUFFVSxTQUFTLEVBQUUsQ0FBQztVQUFFLENBQUMsQ0FBQztRQUFBLENBQzdCLENBQUM7UUFGT1QsTUFBTSxHQUFBb0QsYUFBQSxDQUFOcEQsTUFBTTtNQUtkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQWYsZUFBTSxFQUFDdEIsZ0JBQWdCLENBQUMsQ0FBQ3dCLGdCQUFnQixDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDO0lBRUYsSUFBQVAsV0FBRSxFQUFDLHVDQUF1QyxFQUFFLFlBQU07TUFDaEQsSUFBQXlELGFBQUEsR0FBbUIsSUFBQXZELHVCQUFVLEVBQUM7VUFBQSxPQUM1QixJQUFBQyxrQkFBUSxFQUFDO1lBQUVXLFFBQVEsRUFBRTtVQUFFLENBQUMsQ0FBQztRQUFBLENBQzNCLENBQUM7UUFGT1YsTUFBTSxHQUFBcUQsYUFBQSxDQUFOckQsTUFBTTtNQUlkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BR0YsSUFBQWYsZUFBTSxFQUFDckIsY0FBYyxDQUFDLENBQUN1QixnQkFBZ0IsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQztJQUVGLElBQUFQLFdBQUUsRUFBQyxvQ0FBb0MsRUFBRSxZQUFNO01BQzdDLElBQUEwRCxhQUFBLEdBQW1CLElBQUF4RCx1QkFBVSxFQUFDO1VBQUEsT0FDNUIsSUFBQUMsa0JBQVEsRUFBQztZQUFFYSxXQUFXLEVBQUU7VUFBRSxDQUFDLENBQUM7UUFBQSxDQUM5QixDQUFDO1FBRk9aLE1BQU0sR0FBQXNELGFBQUEsQ0FBTnRELE1BQU07TUFJZCxJQUFBZSxnQkFBRyxFQUFDLFlBQU07UUFDUmYsTUFBTSxDQUFDSSxPQUFPLENBQUNZLEtBQUssQ0FBQyxDQUFDO01BQ3hCLENBQUMsQ0FBQztNQUdGLElBQUFmLGVBQU0sRUFBQ3RCLGdCQUFnQixDQUFDLENBQUN3QixnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGLElBQUFwQixpQkFBUSxFQUFDLHdCQUF3QixFQUFFLFlBQU07SUFDdkMsSUFBQWEsV0FBRSxFQUFDLDZCQUE2QixFQUFFLFlBQU07TUFDdEMyRCxRQUFRLENBQUNDLEVBQUUsR0FBRyxLQUFLO01BRW5CLElBQUFDLGFBQUEsR0FBbUIsSUFBQTNELHVCQUFVLEVBQUM7VUFBQSxPQUFNLElBQUFDLGtCQUFRLEVBQUMsQ0FBQztRQUFBLEVBQUM7UUFBdkNDLE1BQU0sR0FBQXlELGFBQUEsQ0FBTnpELE1BQU07TUFFZCxJQUFBZSxnQkFBRyxFQUFDLFlBQU07UUFDUmYsTUFBTSxDQUFDSSxPQUFPLENBQUNZLEtBQUssQ0FBQyxDQUFDO01BQ3hCLENBQUMsQ0FBQztNQUVGLElBQUFmLGVBQU0sRUFBQ0QsTUFBTSxDQUFDSSxPQUFPLENBQUNzRCx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQ3JCLE9BQU8sQ0FBQztRQUN2RHNCLFNBQVMsRUFBRSxJQUFJO1FBQ2ZDLGVBQWUsRUFBRSxJQUFJO1FBQ3JCQyxrQkFBa0IsRUFBRTtNQUN0QixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7SUFFRixJQUFBakUsV0FBRSxFQUFDLGlDQUFpQyxFQUFFLFlBQU07TUFDMUMyRCxRQUFRLENBQUNDLEVBQUUsR0FBRyxTQUFTO01BRXZCLElBQUFNLGFBQUEsR0FBbUIsSUFBQWhFLHVCQUFVLEVBQUM7VUFBQSxPQUFNLElBQUFDLGtCQUFRLEVBQUMsQ0FBQztRQUFBLEVBQUM7UUFBdkNDLE1BQU0sR0FBQThELGFBQUEsQ0FBTjlELE1BQU07TUFFZCxJQUFBZSxnQkFBRyxFQUFDLFlBQU07UUFDUmYsTUFBTSxDQUFDSSxPQUFPLENBQUNZLEtBQUssQ0FBQyxDQUFDO01BQ3hCLENBQUMsQ0FBQztNQUVGLElBQUFmLGVBQU0sRUFBQ0QsTUFBTSxDQUFDSSxPQUFPLENBQUNzRCx1QkFBdUIsQ0FBQyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxDQUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQztJQUN2RSxDQUFDLENBQUM7SUFFRixJQUFBVixXQUFFLEVBQUMsd0NBQXdDLEVBQUUsWUFBTTtNQUNqRDJELFFBQVEsQ0FBQ0MsRUFBRSxHQUFHLEtBQUs7TUFFbkIsSUFBQU8sYUFBQSxHQUFtQixJQUFBakUsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsa0JBQVEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUF2Q0MsTUFBTSxHQUFBK0QsYUFBQSxDQUFOL0QsTUFBTTtNQUVkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BR0YsSUFBQWYsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0csYUFBYSxDQUFDLENBQUN5RCxXQUFXLENBQUMsQ0FBQztJQUNwRCxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRixJQUFBakYsaUJBQVEsRUFBQywyQkFBMkIsRUFBRSxZQUFNO0lBQzFDLElBQUFhLFdBQUUsRUFBQywrQkFBK0IsRUFBRSxZQUFNO01BQ3hDLElBQUFxRSxhQUFBLEdBQTZCLElBQUFuRSx1QkFBVSxFQUFDO1VBQUEsT0FBTSxJQUFBQyxrQkFBUSxFQUFDLENBQUM7UUFBQSxFQUFDO1FBQWpEQyxNQUFNLEdBQUFpRSxhQUFBLENBQU5qRSxNQUFNO1FBQUVrRSxRQUFRLEdBQUFELGFBQUEsQ0FBUkMsUUFBUTtNQUV4QixJQUFNQyxVQUFVLEdBQUduRSxNQUFNLENBQUNJLE9BQU8sQ0FBQ0csYUFBYTtNQUMvQzJELFFBQVEsQ0FBQyxDQUFDO01BQ1YsSUFBTUUsV0FBVyxHQUFHcEUsTUFBTSxDQUFDSSxPQUFPLENBQUNHLGFBQWE7TUFFaEQsSUFBQU4sZUFBTSxFQUFDa0UsVUFBVSxDQUFDLENBQUM3RCxJQUFJLENBQUM4RCxXQUFXLENBQUM7TUFDcEMsSUFBQW5FLGVBQU0sRUFBQ3ZCLG9CQUFvQixDQUFDLENBQUNtRSxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDO0lBRUYsSUFBQWpELFdBQUUsRUFBQyw2Q0FBNkMsRUFBRSxZQUFNO01BQ3RELElBQUl5RSxXQUFXLEdBQUcsQ0FBQztNQUVuQixJQUFBQyxhQUFBLEdBQW1CLElBQUF4RSx1QkFBVSxFQUFDLFlBQU07VUFDbEN1RSxXQUFXLEVBQUU7VUFDYixPQUFPLElBQUF0RSxrQkFBUSxFQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDO1FBSE1DLE1BQU0sR0FBQXNFLGFBQUEsQ0FBTnRFLE1BQU07TUFLZCxJQUFBQyxlQUFNLEVBQUNvRSxXQUFXLENBQUMsQ0FBQy9ELElBQUksQ0FBQyxDQUFDLENBQUM7TUFFM0IsSUFBQVMsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JmLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztNQUN4QixDQUFDLENBQUM7TUFHRixJQUFBZixlQUFNLEVBQUNvRSxXQUFXLENBQUMsQ0FBQ0UsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztJQUVGLElBQUEzRSxXQUFFLEVBQUMsZ0RBQWdELEVBQUUsWUFBTTtNQUN6RCxJQUFBNEUsYUFBQSxHQUFtQixJQUFBMUUsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsa0JBQVEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUF2Q0MsTUFBTSxHQUFBd0UsYUFBQSxDQUFOeEUsTUFBTTtNQUVkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQUQsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JmLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztNQUN4QixDQUFDLENBQUM7TUFHRixJQUFBZixlQUFNLEVBQUN0QixnQkFBZ0IsQ0FBQyxDQUFDa0UscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGLElBQUE5RCxpQkFBUSxFQUFDLGdCQUFnQixFQUFFLFlBQU07SUFDL0IsSUFBQWEsV0FBRSxFQUFDLHdDQUF3QyxFQUFFLFlBQU07TUFDakRuQixrQkFBa0IsQ0FBQ2dHLGtCQUFrQixDQUFDLFlBQU07UUFDMUMsTUFBTSxJQUFJdkMsS0FBSyxDQUFDLDhCQUE4QixDQUFDO01BQ2pELENBQUMsQ0FBQztNQUVGLElBQUF3QyxhQUFBLEdBQW1CLElBQUE1RSx1QkFBVSxFQUFDO1VBQUEsT0FBTSxJQUFBQyxrQkFBUSxFQUFDLENBQUM7UUFBQSxFQUFDO1FBQXZDQyxNQUFNLEdBQUEwRSxhQUFBLENBQU4xRSxNQUFNO01BR2QsSUFBQUMsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUNnRCxXQUFXLENBQUMsQ0FBQztNQUMxQyxJQUFBL0QsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDLENBQUMyRCxXQUFXLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUM7SUFFRixJQUFBcEUsV0FBRSxFQUFDLHdDQUF3QyxFQUFFLFlBQU07TUFDakRqQixnQkFBZ0IsQ0FBQzhGLGtCQUFrQixDQUFDLFlBQU07UUFDeEMsTUFBTSxJQUFJdkMsS0FBSyxDQUFDLHlCQUF5QixDQUFDO01BQzVDLENBQUMsQ0FBQztNQUVGLElBQUF5QyxhQUFBLEdBQW1CLElBQUE3RSx1QkFBVSxFQUFDO1VBQUEsT0FBTSxJQUFBQyxrQkFBUSxFQUFDLENBQUM7UUFBQSxFQUFDO1FBQXZDQyxNQUFNLEdBQUEyRSxhQUFBLENBQU4zRSxNQUFNO01BR2QsSUFBQWUsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JmLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztNQUN4QixDQUFDLENBQUM7TUFFRixJQUFBZixlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDQyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztJQUM3QyxDQUFDLENBQUM7SUFFRixJQUFBVixXQUFFLEVBQUMsMENBQTBDLEVBQUUsWUFBTTtNQUNuRCxJQUFBZ0YsYUFBQSxHQUFtQixJQUFBOUUsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsa0JBQVEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUF2Q0MsTUFBTSxHQUFBNEUsYUFBQSxDQUFONUUsTUFBTTtNQUdkckIsZ0JBQWdCLENBQUNrRyxzQkFBc0IsQ0FBQyxZQUFNO1FBQzVDLE9BQU87VUFDTEMsVUFBVSxFQUFFLFNBQVpBLFVBQVVBLENBQUdDLFFBQWlCLEVBQUs7WUFDakMsSUFBSUEsUUFBUSxFQUFFO2NBQ1osTUFBTSxJQUFJN0MsS0FBSyxDQUFDLGdCQUFnQixDQUFDO1lBQ25DO1VBQ0Y7UUFDRixDQUFDO01BQ0gsQ0FBQyxDQUFDO01BRUYsSUFBQW5CLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BR0YsSUFBQWYsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDN0MsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUYsSUFBQXZCLGlCQUFRLEVBQUMsZ0NBQWdDLEVBQUUsWUFBTTtJQUMvQyxJQUFBYSxXQUFFLEVBQUMsd0NBQXdDLEVBQUUsWUFBTTtNQUNqRCxJQUFBb0YsYUFBQSxHQUFtQixJQUFBbEYsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsa0JBQVEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUF2Q0MsTUFBTSxHQUFBZ0YsYUFBQSxDQUFOaEYsTUFBTTtNQUVkLElBQU1pRixjQUFjLEdBQUdqRixNQUFNLENBQUNJLE9BQU8sQ0FBQzhFLGlCQUFpQixDQUFDLENBQUM7TUFFekQsSUFBQWpGLGVBQU0sRUFBQ2dGLGNBQWMsQ0FBQyxDQUFDNUMsT0FBTyxDQUFDO1FBQzdCOEMsT0FBTyxFQUFFbEYsZUFBTSxDQUFDb0IsR0FBRyxDQUFDQyxRQUFRLENBQUM7UUFDN0I4RCxLQUFLLEVBQUVuRixlQUFNLENBQUNvQixHQUFHLENBQUNDLFFBQVEsQ0FBQztRQUMzQitELFFBQVEsRUFBRXBGLGVBQU0sQ0FBQ29CLEdBQUcsQ0FBQ0MsUUFBUTtNQUMvQixDQUFDLENBQUM7TUFHRixJQUFBUCxnQkFBRyxFQUFDLFlBQU07UUFDUmtFLGNBQWMsQ0FBQ0UsT0FBTyxvQkFBdEJGLGNBQWMsQ0FBQ0UsT0FBTyxDQUFHLENBQUMsQ0FBUSxDQUFDO01BQ3JDLENBQUMsQ0FBQztNQUVGLElBQUFsRixlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDQyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztJQUM3QyxDQUFDLENBQUM7SUFFRixJQUFBVixXQUFFLEVBQUMsbURBQW1ELEVBQUUsWUFBTTtNQUM1RCxJQUFBMEYsYUFBQSxHQUFtQixJQUFBeEYsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsa0JBQVEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUF2Q0MsTUFBTSxHQUFBc0YsYUFBQSxDQUFOdEYsTUFBTTtNQUVkLElBQU11RixlQUFlLEdBQUd2RixNQUFNLENBQUNJLE9BQU8sQ0FBQ29GLGVBQWUsQ0FBQyxDQUFDO01BRXhELElBQUF2RixlQUFNLEVBQUMsT0FBT3NGLGVBQWUsQ0FBQyxDQUFDakYsSUFBSSxDQUFDLFVBQVUsQ0FBQztNQUUvQyxJQUFBUyxnQkFBRyxFQUFDLFlBQU07UUFDUndFLGVBQWUsQ0FBQyxDQUFDO01BQ25CLENBQUMsQ0FBQztNQUVGLElBQUF0RixlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDQyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztJQUM3QyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRixJQUFBdkIsaUJBQVEsRUFBQyx3QkFBd0IsRUFBRSxZQUFNO0lBQ3ZDLElBQUFhLFdBQUUsRUFBQywyQ0FBMkMsRUFBRSxZQUFNO01BQ3BELElBQUE2RixhQUFBLEdBQW1CLElBQUEzRix1QkFBVSxFQUFDO1VBQUEsT0FDNUIsSUFBQUMsa0JBQVEsRUFBQztZQUFFMkYsb0JBQW9CLEVBQUU7VUFBSyxDQUFDLENBQUM7UUFBQSxDQUMxQyxDQUFDO1FBRk8xRixNQUFNLEdBQUF5RixhQUFBLENBQU56RixNQUFNO01BS2IyRixNQUFNLENBQVNDLGVBQWUsR0FBRyxJQUFJO01BRXRDLElBQUE3RSxnQkFBRyxFQUFDLFlBQU07UUFDUmYsTUFBTSxDQUFDSSxPQUFPLENBQUNZLEtBQUssQ0FBQyxDQUFDO01BQ3hCLENBQUMsQ0FBQztNQUdGLElBQUFmLGVBQU0sRUFBQ3RCLGdCQUFnQixDQUFDLENBQUN3QixnQkFBZ0IsQ0FBQyxDQUFDO01BQzNDLElBQUFGLGVBQU0sRUFBQ0QsTUFBTSxDQUFDSSxPQUFPLENBQUNTLE1BQU0sQ0FBQzZFLG9CQUFvQixDQUFDLENBQUNwRixJQUFJLENBQUMsSUFBSSxDQUFDO01BRTdELE9BQVFxRixNQUFNLENBQVNDLGVBQWU7SUFDeEMsQ0FBQyxDQUFDO0lBRUYsSUFBQWhHLFdBQUUsRUFBQywwQ0FBMEMsRUFBRSxZQUFNO01BQ25ELElBQUFpRyxhQUFBLEdBQW1CLElBQUEvRix1QkFBVSxFQUFDO1VBQUEsT0FBTSxJQUFBQyxrQkFBUSxFQUFDLENBQUM7UUFBQSxFQUFDO1FBQXZDQyxNQUFNLEdBQUE2RixhQUFBLENBQU43RixNQUFNO01BRWQsSUFBTThGLGlCQUFpQixHQUFHOUYsTUFBTSxDQUFDSSxPQUFPLENBQUMyRixvQkFBb0IsQ0FBQyxDQUFDO01BRS9ELElBQUE5RixlQUFNLEVBQUM2RixpQkFBaUIsQ0FBQyxDQUFDekQsT0FBTyxDQUFDO1FBQ2hDMkQsV0FBVyxFQUFFLEtBQUs7UUFDbEJDLGFBQWEsRUFBRSxPQUFPO1FBQ3RCQyxhQUFhLEVBQUUsSUFBSTtRQUNuQkMsZUFBZSxFQUFFO01BQ25CLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLElBQUF2RyxXQUFFLEVBQUMsbURBQW1ELEVBQUUsWUFBTTtNQUM1RCxJQUFBd0csYUFBQSxHQUFtQixJQUFBdEcsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsa0JBQVEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUF2Q0MsTUFBTSxHQUFBb0csYUFBQSxDQUFOcEcsTUFBTTtNQUVkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBTThFLGlCQUFpQixHQUFHOUYsTUFBTSxDQUFDSSxPQUFPLENBQUMyRixvQkFBb0IsQ0FBQyxDQUFDO01BRS9ELElBQUE5RixlQUFNLEVBQUM2RixpQkFBaUIsQ0FBQ0UsV0FBVyxDQUFDLENBQUMxRixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2xELENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGLElBQUF2QixpQkFBUSxFQUFDLFlBQVksRUFBRSxZQUFNO0lBQzNCLElBQUFhLFdBQUUsRUFBQyx3Q0FBd0MsRUFBRSxZQUFNO01BQ2pELElBQUF5RyxhQUFBLEdBQW1CLElBQUF2Ryx1QkFBVSxFQUFDO1VBQUEsT0FBTSxJQUFBQyxrQkFBUSxFQUFDLENBQUM7UUFBQSxFQUFDO1FBQXZDQyxNQUFNLEdBQUFxRyxhQUFBLENBQU5yRyxNQUFNO01BRWQsSUFBQWUsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JmLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztRQUN0QmhCLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztRQUN0QmhCLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztNQUN4QixDQUFDLENBQUM7TUFHRixJQUFBZixlQUFNLEVBQUN0QixnQkFBZ0IsQ0FBQyxDQUFDa0UscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQztJQUVGLElBQUFqRCxXQUFFLEVBQUMseUNBQXlDLEVBQUUsWUFBTTtNQUNsRCxJQUFBMEcsYUFBQSxHQUFtQixJQUFBeEcsdUJBQVUsRUFBQztVQUFBLE9BQzVCLElBQUFDLGtCQUFRLEVBQUM7WUFBRVUsU0FBUyxFQUFFO1VBQUUsQ0FBQyxDQUFDO1FBQUEsQ0FDNUIsQ0FBQztRQUZPVCxNQUFNLEdBQUFzRyxhQUFBLENBQU50RyxNQUFNO01BSWQsSUFBQWUsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JmLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQztNQUN4QixDQUFDLENBQUM7TUFHRixJQUFBZixlQUFNLEVBQUN0QixnQkFBZ0IsQ0FBQyxDQUFDd0IsZ0JBQWdCLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUM7SUFFRixJQUFBUCxXQUFFLEVBQUMsOENBQThDLEVBQUUsWUFBTTtNQUN2RCxJQUFBMkcsYUFBQSxHQUE0QixJQUFBekcsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsa0JBQVEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUFoREMsTUFBTSxHQUFBdUcsYUFBQSxDQUFOdkcsTUFBTTtRQUFFd0csT0FBTyxHQUFBRCxhQUFBLENBQVBDLE9BQU87TUFFdkIsSUFBQXpGLGdCQUFHLEVBQUMsWUFBTTtRQUNSZixNQUFNLENBQUNJLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLENBQUM7TUFDeEIsQ0FBQyxDQUFDO01BRUYsSUFBQWYsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFFM0NrRyxPQUFPLENBQUMsQ0FBQztNQUdULElBQUF2RyxlQUFNLEVBQUNqQixlQUFlLENBQUNHLEdBQUcsQ0FBQyxDQUFDZ0IsZ0JBQWdCLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUM7SUFFRixJQUFBUCxXQUFFLEVBQUMsNENBQTRDLEVBQUUsWUFBTTtNQUNyRCxJQUFBNkcsYUFBQSxHQUFtQixJQUFBM0csdUJBQVUsRUFBQztVQUFBLE9BQzVCLElBQUFDLGtCQUFRLEVBQUM7WUFDUFUsU0FBUyxFQUFFLElBQUk7WUFDZkMsUUFBUSxFQUFFLEtBQUs7WUFDZkUsV0FBVyxFQUFFO1VBQ2YsQ0FBQyxDQUFDO1FBQUEsQ0FDSixDQUFDO1FBTk9aLE1BQU0sR0FBQXlHLGFBQUEsQ0FBTnpHLE1BQU07TUFRZCxJQUFBZSxnQkFBRyxFQUFDLFlBQU07UUFDUmYsTUFBTSxDQUFDSSxPQUFPLENBQUNZLEtBQUssQ0FBQyxDQUFDO01BQ3hCLENBQUMsQ0FBQztNQUdGLElBQUFmLGVBQU0sRUFBQ3RCLGdCQUFnQixDQUFDLENBQUN3QixnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztJQUVGLElBQUFQLFdBQUUsRUFBQywyQ0FBMkMsRUFBRSxZQUFNO01BQ3BELElBQUE4RyxhQUFBLEdBQW1CLElBQUE1Ryx1QkFBVSxFQUFDO1VBQUEsT0FDNUIsSUFBQUMsa0JBQVEsRUFBQztZQUNQVSxTQUFTLEVBQUUsU0FBZ0I7WUFDM0JDLFFBQVEsRUFBRSxJQUFXO1lBQ3JCQyxhQUFhLEVBQUU7VUFDakIsQ0FBQyxDQUFDO1FBQUEsQ0FDSixDQUFDO1FBTk9YLE1BQU0sR0FBQTBHLGFBQUEsQ0FBTjFHLE1BQU07TUFTZCxJQUFBQyxlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDUyxNQUFNLENBQUNKLFNBQVMsQ0FBQyxDQUFDdUQsV0FBVyxDQUFDLENBQUM7TUFDckQsSUFBQS9ELGVBQU0sRUFBQ0QsTUFBTSxDQUFDSSxPQUFPLENBQUNTLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDLENBQUNzRCxXQUFXLENBQUMsQ0FBQztNQUNwRCxJQUFBL0QsZUFBTSxFQUFDRCxNQUFNLENBQUNJLE9BQU8sQ0FBQ1MsTUFBTSxDQUFDRixhQUFhLENBQUMsQ0FBQ3FELFdBQVcsQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQztJQUVGLElBQUFwRSxXQUFFLEVBQUMsdURBQXVELEVBQUUsWUFBTTtNQUVoRW5CLGtCQUFrQixDQUFDZ0csa0JBQWtCLENBQUMsWUFBTTtRQUMxQyxNQUFNLElBQUl2QyxLQUFLLENBQUMsMEJBQTBCLENBQUM7TUFDN0MsQ0FBQyxDQUFDO01BRUYsSUFBQXlFLGFBQUEsR0FBbUIsSUFBQTdHLHVCQUFVLEVBQUM7VUFBQSxPQUFNLElBQUFDLGtCQUFRLEVBQUMsQ0FBQztRQUFBLEVBQUM7UUFBdkNDLE1BQU0sR0FBQTJHLGFBQUEsQ0FBTjNHLE1BQU07TUFHZCxJQUFBQyxlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDWSxLQUFLLENBQUMsQ0FBQ2dELFdBQVcsQ0FBQyxDQUFDO01BQzFDLElBQUEvRCxlQUFNLEVBQUNELE1BQU0sQ0FBQ0ksT0FBTyxDQUFDRyxhQUFhLENBQUMsQ0FBQ3lELFdBQVcsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==