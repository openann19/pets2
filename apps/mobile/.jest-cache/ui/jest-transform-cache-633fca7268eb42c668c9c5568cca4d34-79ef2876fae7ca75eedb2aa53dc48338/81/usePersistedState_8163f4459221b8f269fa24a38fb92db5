49daf370e76d9be7b6cf3f939ebec5ff
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePersistedState = usePersistedState;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _logger = require("../../services/logger");
function usePersistedState(_ref) {
  var key = _ref.key,
    initialValue = _ref.initialValue,
    _ref$enabled = _ref.enabled,
    enabled = _ref$enabled === void 0 ? true : _ref$enabled;
  var _useState = (0, _react.useState)(initialValue),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    value = _useState2[0],
    setValueState = _useState2[1];
  var _useState3 = (0, _react.useState)(enabled),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  (0, _react.useEffect)(function () {
    var load = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        if (!enabled) {
          setIsLoading(false);
          return;
        }
        try {
          var saved = yield _asyncStorage.default.getItem(key);
          if (saved !== null) {
            setValueState(JSON.parse(saved));
          }
        } catch (error) {
          var err = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Failed to load persisted state', {
            key: key,
            error: err
          });
        } finally {
          setIsLoading(false);
        }
      });
      return function load() {
        return _ref2.apply(this, arguments);
      };
    }();
    void load();
  }, [key, enabled]);
  var setValue = (0, _react.useCallback)(function (newValue) {
    setValueState(newValue);
    if (!enabled) return;
    try {
      void _asyncStorage.default.setItem(key, JSON.stringify(newValue));
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Failed to persist state', {
        key: key,
        error: err
      });
    }
  }, [key, enabled]);
  var clearStorage = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.removeItem(key);
      setValueState(initialValue);
    } catch (error) {
      var err = error instanceof Error ? error : new Error(String(error));
      _logger.logger.error('Failed to clear persisted state', {
        key: key,
        error: err
      });
    }
  }), [key, initialValue]);
  return {
    value: value,
    setValue: setValue,
    isLoading: isLoading,
    clearStorage: clearStorage
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbG9nZ2VyIiwidXNlUGVyc2lzdGVkU3RhdGUiLCJfcmVmIiwia2V5IiwiaW5pdGlhbFZhbHVlIiwiX3JlZiRlbmFibGVkIiwiZW5hYmxlZCIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJ2YWx1ZSIsInNldFZhbHVlU3RhdGUiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsInVzZUVmZmVjdCIsImxvYWQiLCJfcmVmMiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsInNhdmVkIiwiQXN5bmNTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsImVycm9yIiwiZXJyIiwiRXJyb3IiLCJTdHJpbmciLCJsb2dnZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsInNldFZhbHVlIiwidXNlQ2FsbGJhY2siLCJuZXdWYWx1ZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJjbGVhclN0b3JhZ2UiLCJyZW1vdmVJdGVtIl0sInNvdXJjZXMiOlsidXNlUGVyc2lzdGVkU3RhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSBcIkByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlXCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvbG9nZ2VyXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUGVyc2lzdGVkU3RhdGVPcHRpb25zPFQ+IHtcbiAga2V5OiBzdHJpbmc7XG4gIGluaXRpYWxWYWx1ZTogVDtcbiAgZW5hYmxlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUGVyc2lzdGVkU3RhdGVSZXR1cm48VD4ge1xuICB2YWx1ZTogVDtcbiAgc2V0VmFsdWU6ICh2YWx1ZTogVCkgPT4gdm9pZDtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICBjbGVhclN0b3JhZ2U6ICgpID0+IFByb21pc2U8dm9pZD47XG59XG5cbi8qKlxuICogSG9vayBmb3IgcGVyc2lzdGluZyBzdGF0ZSB0byBBc3luY1N0b3JhZ2VcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgeyB2YWx1ZSwgc2V0VmFsdWUgfSA9IHVzZVBlcnNpc3RlZFN0YXRlKHtcbiAqICAga2V5OiAndXNlcl9wcmVmZXJlbmNlcycsXG4gKiAgIGluaXRpYWxWYWx1ZTogeyB0aGVtZTogJ2xpZ2h0JyB9XG4gKiB9KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVBlcnNpc3RlZFN0YXRlPFQ+KHtcbiAga2V5LFxuICBpbml0aWFsVmFsdWUsXG4gIGVuYWJsZWQgPSB0cnVlLFxufTogVXNlUGVyc2lzdGVkU3RhdGVPcHRpb25zPFQ+KTogVXNlUGVyc2lzdGVkU3RhdGVSZXR1cm48VD4ge1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlU3RhdGVdID0gdXNlU3RhdGU8VD4oaW5pdGlhbFZhbHVlKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGVuYWJsZWQpO1xuXG4gIC8vIExvYWQgZnJvbSBzdG9yYWdlIG9uIG1vdW50XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbG9hZCA9IGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNhdmVkID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgaWYgKHNhdmVkICE9PSBudWxsKSB7XG4gICAgICAgICAgc2V0VmFsdWVTdGF0ZShKU09OLnBhcnNlKHNhdmVkKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihTdHJpbmcoZXJyb3IpKTtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBwZXJzaXN0ZWQgc3RhdGUnLCB7IGtleSwgZXJyb3I6IGVyciB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZvaWQgbG9hZCgpO1xuICB9LCBba2V5LCBlbmFibGVkXSk7XG5cbiAgLy8gU2F2ZSB0byBzdG9yYWdlIHdoZW4gdmFsdWUgY2hhbmdlc1xuICBjb25zdCBzZXRWYWx1ZSA9IHVzZUNhbGxiYWNrKFxuICAgIChuZXdWYWx1ZTogVCkgPT4ge1xuICAgICAgc2V0VmFsdWVTdGF0ZShuZXdWYWx1ZSk7XG5cbiAgICAgIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2b2lkIEFzeW5jU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkobmV3VmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihTdHJpbmcoZXJyb3IpKTtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gcGVyc2lzdCBzdGF0ZScsIHsga2V5LCBlcnJvcjogZXJyIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2tleSwgZW5hYmxlZF0sXG4gICk7XG5cbiAgY29uc3QgY2xlYXJTdG9yYWdlID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgc2V0VmFsdWVTdGF0ZShpbml0aWFsVmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICBjb25zdCBlcnIgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBjbGVhciBwZXJzaXN0ZWQgc3RhdGUnLCB7IGtleSwgZXJyb3I6IGVyciB9KTtcbiAgICB9XG4gIH0sIFtrZXksIGluaXRpYWxWYWx1ZV0pO1xuXG4gIHJldHVybiB7XG4gICAgdmFsdWUsXG4gICAgc2V0VmFsdWUsXG4gICAgaXNMb2FkaW5nLFxuICAgIGNsZWFyU3RvcmFnZSxcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBd0JPLFNBQVNJLGlCQUFpQkEsQ0FBQUMsSUFBQSxFQUkyQjtFQUFBLElBSDFEQyxHQUFHLEdBQUFELElBQUEsQ0FBSEMsR0FBRztJQUNIQyxZQUFZLEdBQUFGLElBQUEsQ0FBWkUsWUFBWTtJQUFBQyxZQUFBLEdBQUFILElBQUEsQ0FDWkksT0FBTztJQUFQQSxPQUFPLEdBQUFELFlBQUEsY0FBRyxJQUFJLEdBQUFBLFlBQUE7RUFFZCxJQUFBRSxTQUFBLEdBQStCLElBQUFDLGVBQVEsRUFBSUosWUFBWSxDQUFDO0lBQUFLLFVBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBLEVBQUFKLFNBQUE7SUFBakRLLEtBQUssR0FBQUgsVUFBQTtJQUFFSSxhQUFhLEdBQUFKLFVBQUE7RUFDM0IsSUFBQUssVUFBQSxHQUFrQyxJQUFBTixlQUFRLEVBQUNGLE9BQU8sQ0FBQztJQUFBUyxVQUFBLE9BQUFMLGVBQUEsQ0FBQUMsT0FBQSxFQUFBRyxVQUFBO0lBQTVDRSxTQUFTLEdBQUFELFVBQUE7SUFBRUUsWUFBWSxHQUFBRixVQUFBO0VBRzlCLElBQUFHLGdCQUFTLEVBQUMsWUFBTTtJQUNkLElBQU1DLElBQUk7TUFBQSxJQUFBQyxLQUFBLE9BQUFDLGtCQUFBLENBQUFWLE9BQUEsRUFBRyxhQUFZO1FBQ3ZCLElBQUksQ0FBQ0wsT0FBTyxFQUFFO1VBQ1pXLFlBQVksQ0FBQyxLQUFLLENBQUM7VUFDbkI7UUFDRjtRQUVBLElBQUk7VUFDRixJQUFNSyxLQUFLLFNBQVNDLHFCQUFZLENBQUNDLE9BQU8sQ0FBQ3JCLEdBQUcsQ0FBQztVQUM3QyxJQUFJbUIsS0FBSyxLQUFLLElBQUksRUFBRTtZQUNsQlQsYUFBYSxDQUFDWSxJQUFJLENBQUNDLEtBQUssQ0FBQ0osS0FBSyxDQUFDLENBQUM7VUFDbEM7UUFDRixDQUFDLENBQUMsT0FBT0ssS0FBYyxFQUFFO1VBQ3ZCLElBQU1DLEdBQUcsR0FBR0QsS0FBSyxZQUFZRSxLQUFLLEdBQUdGLEtBQUssR0FBRyxJQUFJRSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDLENBQUM7VUFDckVJLGNBQU0sQ0FBQ0osS0FBSyxDQUFDLGdDQUFnQyxFQUFFO1lBQUV4QixHQUFHLEVBQUhBLEdBQUc7WUFBRXdCLEtBQUssRUFBRUM7VUFBSSxDQUFDLENBQUM7UUFDckUsQ0FBQyxTQUFTO1VBQ1JYLFlBQVksQ0FBQyxLQUFLLENBQUM7UUFDckI7TUFDRixDQUFDO01BQUEsZ0JBakJLRSxJQUFJQSxDQUFBO1FBQUEsT0FBQUMsS0FBQSxDQUFBWSxLQUFBLE9BQUFDLFNBQUE7TUFBQTtJQUFBLEdBaUJUO0lBRUQsS0FBS2QsSUFBSSxDQUFDLENBQUM7RUFDYixDQUFDLEVBQUUsQ0FBQ2hCLEdBQUcsRUFBRUcsT0FBTyxDQUFDLENBQUM7RUFHbEIsSUFBTTRCLFFBQVEsR0FBRyxJQUFBQyxrQkFBVyxFQUMxQixVQUFDQyxRQUFXLEVBQUs7SUFDZnZCLGFBQWEsQ0FBQ3VCLFFBQVEsQ0FBQztJQUV2QixJQUFJLENBQUM5QixPQUFPLEVBQUU7SUFFZCxJQUFJO01BQ0YsS0FBS2lCLHFCQUFZLENBQUNjLE9BQU8sQ0FBQ2xDLEdBQUcsRUFBRXNCLElBQUksQ0FBQ2EsU0FBUyxDQUFDRixRQUFRLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUMsT0FBT1QsS0FBYyxFQUFFO01BQ3ZCLElBQU1DLEdBQUcsR0FBR0QsS0FBSyxZQUFZRSxLQUFLLEdBQUdGLEtBQUssR0FBRyxJQUFJRSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDLENBQUM7TUFDckVJLGNBQU0sQ0FBQ0osS0FBSyxDQUFDLHlCQUF5QixFQUFFO1FBQUV4QixHQUFHLEVBQUhBLEdBQUc7UUFBRXdCLEtBQUssRUFBRUM7TUFBSSxDQUFDLENBQUM7SUFDOUQ7RUFDRixDQUFDLEVBQ0QsQ0FBQ3pCLEdBQUcsRUFBRUcsT0FBTyxDQUNmLENBQUM7RUFFRCxJQUFNaUMsWUFBWSxHQUFHLElBQUFKLGtCQUFXLE1BQUFkLGtCQUFBLENBQUFWLE9BQUEsRUFBQyxhQUFZO0lBQzNDLElBQUk7TUFDRixNQUFNWSxxQkFBWSxDQUFDaUIsVUFBVSxDQUFDckMsR0FBRyxDQUFDO01BQ2xDVSxhQUFhLENBQUNULFlBQVksQ0FBQztJQUM3QixDQUFDLENBQUMsT0FBT3VCLEtBQWMsRUFBRTtNQUN2QixJQUFNQyxHQUFHLEdBQUdELEtBQUssWUFBWUUsS0FBSyxHQUFHRixLQUFLLEdBQUcsSUFBSUUsS0FBSyxDQUFDQyxNQUFNLENBQUNILEtBQUssQ0FBQyxDQUFDO01BQ3JFSSxjQUFNLENBQUNKLEtBQUssQ0FBQyxpQ0FBaUMsRUFBRTtRQUFFeEIsR0FBRyxFQUFIQSxHQUFHO1FBQUV3QixLQUFLLEVBQUVDO01BQUksQ0FBQyxDQUFDO0lBQ3RFO0VBQ0YsQ0FBQyxHQUFFLENBQUN6QixHQUFHLEVBQUVDLFlBQVksQ0FBQyxDQUFDO0VBRXZCLE9BQU87SUFDTFEsS0FBSyxFQUFMQSxLQUFLO0lBQ0xzQixRQUFRLEVBQVJBLFFBQVE7SUFDUmxCLFNBQVMsRUFBVEEsU0FBUztJQUNUdUIsWUFBWSxFQUFaQTtFQUNGLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==