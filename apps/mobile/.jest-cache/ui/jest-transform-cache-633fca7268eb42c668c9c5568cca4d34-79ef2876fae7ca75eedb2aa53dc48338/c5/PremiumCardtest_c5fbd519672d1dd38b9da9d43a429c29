7f294353e3584afc3ea31c13e9e8f8ee
"use strict";

_getJestObj().mock("../../../theme/Provider");
_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(),
    ImpactFeedbackStyle: {
      Medium: "medium"
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _PremiumCard = _interopRequireDefault(require("../../Premium/PremiumCard"));
require("../../../theme/Provider");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("PremiumCard", function () {
  var mockPlan = {
    id: "premium",
    name: "Premium",
    price: 9.99,
    duration: "month",
    features: ["Unlimited swipes", "See who liked you", "Advanced filters"],
    popular: true
  };
  var mockYearlyPlan = _objectSpread(_objectSpread({}, mockPlan), {}, {
    price: 99.99,
    duration: "year",
    savings: "15%"
  });
  var mockOnSubscribe = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    useTheme.mockReturnValue({
      colors: {
        primary: "#7c3aed",
        secondary: "Theme.colors.primary[500]",
        background: "Theme.colors.neutral[0]",
        text: "Theme.colors.neutral[950]",
        card: "Theme.colors.neutral[0]",
        accent: "Theme.colors.secondary[500]"
      },
      isDark: false
    });
  });
  it("renders plan details correctly", function () {
    var _render = render((0, _jsxRuntime.jsx)(_PremiumCard.default, {
        plan: mockPlan,
        onSubscribe: mockOnSubscribe
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByText("Premium")).toBeTruthy();
    expect(getByText("$9.99/month")).toBeTruthy();
    expect(getByText("Unlimited swipes")).toBeTruthy();
    expect(getByText("See who liked you")).toBeTruthy();
    expect(getByText("Advanced filters")).toBeTruthy();
    expect(getByTestId("popular-badge")).toBeTruthy();
  });
  it("renders yearly plan with savings correctly", function () {
    var _render2 = render((0, _jsxRuntime.jsx)(_PremiumCard.default, {
        plan: mockYearlyPlan,
        onSubscribe: mockOnSubscribe
      })),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    expect(getByText("$99.99/year")).toBeTruthy();
    expect(getByTestId("savings-badge")).toBeTruthy();
    expect(getByText("Save 15%")).toBeTruthy();
  });
  it("calls onSubscribe when subscribe button is pressed", function () {
    var _render3 = render((0, _jsxRuntime.jsx)(_PremiumCard.default, {
        plan: mockPlan,
        onSubscribe: mockOnSubscribe
      })),
      getByText = _render3.getByText;
    fireEvent.press(getByText("Subscribe"));
    expect(mockOnSubscribe).toHaveBeenCalledWith(mockPlan);
    expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Medium);
  });
  it("renders with dark theme style", function () {
    useTheme.mockReturnValue({
      colors: {
        primary: "#7c3aed",
        secondary: "Theme.colors.primary[500]",
        background: "Theme.colors.neutral[800]",
        text: "Theme.colors.neutral[0]",
        card: "Theme.colors.neutral[700]",
        accent: "Theme.colors.secondary[500]"
      },
      isDark: true
    });
    var _render4 = render((0, _jsxRuntime.jsx)(_PremiumCard.default, {
        plan: mockPlan,
        onSubscribe: mockOnSubscribe
      })),
      getByTestId = _render4.getByTestId;
    var card = getByTestId("premium-plan-card");
    expect(card.props.style).toBeDefined();
  });
  it("renders free plan correctly", function () {
    var freePlan = {
      id: "basic",
      name: "Basic",
      price: 0,
      duration: "month",
      features: ["Limited swipes per day", "Basic matching"]
    };
    var _render5 = render((0, _jsxRuntime.jsx)(_PremiumCard.default, {
        plan: freePlan,
        onSubscribe: mockOnSubscribe
      })),
      getByText = _render5.getByText,
      queryByTestId = _render5.queryByTestId;
    expect(getByText("Basic")).toBeTruthy();
    expect(getByText("Free")).toBeTruthy();
    expect(queryByTestId("popular-badge")).toBeNull();
    expect(queryByTestId("savings-badge")).toBeNull();
  });
  it("renders with custom styles when provided", function () {
    var customStyle = {
      marginTop: 20
    };
    var _render6 = render((0, _jsxRuntime.jsx)(_PremiumCard.default, {
        plan: mockPlan,
        onSubscribe: mockOnSubscribe,
        style: customStyle
      })),
      getByTestId = _render6.getByTestId;
    var card = getByTestId("premium-plan-card");
    expect(card.props.style).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,