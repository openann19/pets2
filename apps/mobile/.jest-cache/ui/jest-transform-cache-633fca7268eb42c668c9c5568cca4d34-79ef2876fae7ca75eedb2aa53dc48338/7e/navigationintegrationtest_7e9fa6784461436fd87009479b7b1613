a2d50dbc54286e6b6203630f5b23fa0f
"use strict";

_getJestObj().mock('@react-navigation/native');
_getJestObj().mock('expo-haptics');
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _useTabReselectRefresh = require("../useTabReselectRefresh");
var _useScrollOffsetTracker = require("../useScrollOffsetTracker");
var _useTabDoublePress = require("../useTabDoublePress");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Navigation System Integration', function () {
  var mockNavigation = {
    addListener: jest.fn(function () {
      return jest.fn();
    }),
    emit: jest.fn(),
    navigate: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _native.useNavigation.mockReturnValue(mockNavigation);
    _native.useIsFocused.mockReturnValue(true);
  });
  describe('Complete Flow: Scroll + Reselect', function () {
    it('should handle complete user flow: scroll → tab press → scroll to top', function () {
      var listRef = {
        current: {
          scrollToOffset: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      var tabPressHandler;
      var scrollTracker;
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        scrollResult = _renderHook.result;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        if (event === 'tabPress') tabPressHandler = handler;
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh,
          getOffset: scrollResult.current.getOffset
        });
      });
      (0, _reactNative.act)(function () {
        scrollResult.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 300
            },
            contentSize: {
              width: 375,
              height: 1000
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      expect(scrollResult.current.getOffset()).toBe(300);
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(listRef.current.scrollToOffset).toHaveBeenCalledWith({
        offset: 0,
        animated: true
      });
    });
    it('should handle complete user flow: scroll → tab press near top → refresh', function () {
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      var tabPressHandler;
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        scrollResult = _renderHook2.result;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        if (event === 'tabPress') tabPressHandler = handler;
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh,
          getOffset: scrollResult.current.getOffset
        });
      });
      (0, _reactNative.act)(function () {
        scrollResult.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 50
            },
            contentSize: {
              width: 375,
              height: 1000
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).toHaveBeenCalled();
    });
    it('should handle complete user flow: double tap → scroll + refresh', function () {
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      var doubleTapHandler;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        if (event === 'tabDoublePress') doubleTapHandler = handler;
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh
        });
      });
      (0, _reactNative.act)(function () {
        doubleTapHandler({
          target: 'Home'
        });
      });
      expect(listRef.current.scrollTo).toHaveBeenCalledWith({
        y: 0,
        animated: true
      });
      expect(onRefresh).toHaveBeenCalled();
    });
  });
  describe('Multiple Hooks Integration', function () {
    it('should work with scroll tracker + tab reselect + double press together', function () {
      var listRef = {
        current: {
          scrollToOffset: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      var onDoublePress = jest.fn();
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        scrollResult = _renderHook3.result;
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh,
          getOffset: scrollResult.current.getOffset
        });
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabDoublePress.useTabDoublePress)(onDoublePress);
      });
      (0, _reactNative.act)(function () {
        scrollResult.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 200
            },
            contentSize: {
              width: 375,
              height: 1000
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      expect(scrollResult.current.getOffset()).toBe(200);
    });
  });
  describe('Real-World Scenarios', function () {
    it('should handle rapid tab switching + scrolling', function () {
      var listRef = {
        current: {
          scrollToOffset: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      var tabPressHandler;
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        scrollResult = _renderHook4.result;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        if (event === 'tabPress') tabPressHandler = handler;
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh,
          getOffset: scrollResult.current.getOffset,
          cooldownMs: 300
        });
      });
      (0, _reactNative.act)(function () {
        scrollResult.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 100
            }
          }
        });
        tabPressHandler({
          target: 'Home'
        });
        scrollResult.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 200
            }
          }
        });
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(listRef.current.scrollToOffset).toHaveBeenCalled();
    });
    it('should handle background state correctly', function () {
      _native.useIsFocused.mockReturnValue(false);
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      var tabPressHandler;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        if (event === 'tabPress') tabPressHandler = handler;
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh
        });
      });
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).not.toHaveBeenCalled();
      expect(listRef.current.scrollTo).not.toHaveBeenCalled();
    });
  });
  describe('Performance and Edge Cases', function () {
    it('should handle many rapid scroll events', function () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook5.result;
      var _loop = function _loop(i) {
        (0, _reactNative.act)(function () {
          result.current.onScroll({
            nativeEvent: {
              contentOffset: {
                x: 0,
                y: i * 10
              }
            }
          });
        });
      };
      for (var i = 0; i < 100; i++) {
        _loop(i);
      }
      expect(result.current.getOffset()).toBe(990);
    });
    it('should handle memory leaks with multiple hook instances', function () {
      var hooks = [];
      for (var i = 0; i < 50; i++) {
        var _renderHook6 = (0, _reactNative.renderHook)(function () {
            return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
          }),
          result = _renderHook6.result,
          unmount = _renderHook6.unmount;
        hooks.push({
          result: result,
          unmount: unmount
        });
      }
      (0, _reactNative.act)(function () {
        hooks[0].result.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 100
            }
          }
        });
      });
      expect(hooks[0].result.current.getOffset()).toBe(100);
      expect(hooks[49].result.current.getOffset()).toBe(0);
      hooks.forEach(function (_ref) {
        var unmount = _ref.unmount;
        return unmount();
      });
    });
    it('should handle cleanup and re-initialization', function () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook7.result,
        unmount = _renderHook7.unmount,
        rerender = _renderHook7.rerender;
      (0, _reactNative.act)(function () {
        result.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 100
            }
          }
        });
      });
      unmount();
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        newResult = _renderHook8.result;
      expect(newResult.current.getOffset()).toBe(0);
    });
  });
  describe('Cross-Component Communication', function () {
    it('should emit events that can be consumed by other components', function () {
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      var tabPressHandler;
      var doubleTapHandler;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        if (event === 'tabPress') tabPressHandler = handler;
        if (event === 'tabDoublePress') doubleTapHandler = handler;
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh
        });
      });
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(mockNavigation.emit).toHaveBeenCalledWith({
        type: 'tabReselect',
        target: 'Home'
      });
      mockNavigation.emit.mockClear();
      (0, _reactNative.act)(function () {
        doubleTapHandler({
          target: 'Home'
        });
      });
      expect(mockNavigation.emit).toHaveBeenCalledWith({
        type: 'tabDoublePulse',
        target: 'Home'
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,