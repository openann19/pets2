62d300041db078e401c599385d69cf62
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AIPhotoAnalyzerScreen;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _aiPhotoService = require("../services/aiPhotoService");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function AIPhotoAnalyzerScreen() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    result = _useState4[0],
    setResult = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    photoUri = _useState6[0],
    setPhotoUri = _useState6[1];
  var pickPhoto = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),
        status = _yield$ImagePicker$re.status;
      if (status !== "granted") {
        _reactNative.Alert.alert("Permission needed", "Please grant photo library access");
        return;
      }
      var result = yield ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        quality: 0.8
      });
      if (!result.canceled && result.assets[0]) {
        setPhotoUri(result.assets[0].uri);
        setResult(null);
      }
    });
    return function pickPhoto() {
      return _ref.apply(this, arguments);
    };
  }();
  var takePhoto = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      var _yield$ImagePicker$re2 = yield ImagePicker.requestCameraPermissionsAsync(),
        status = _yield$ImagePicker$re2.status;
      if (status !== "granted") {
        _reactNative.Alert.alert("Permission needed", "Please grant camera access");
        return;
      }
      var result = yield ImagePicker.launchCameraAsync({
        allowsEditing: true,
        quality: 0.8
      });
      if (!result.canceled && result.assets[0]) {
        setPhotoUri(result.assets[0].uri);
        setResult(null);
      }
    });
    return function takePhoto() {
      return _ref2.apply(this, arguments);
    };
  }();
  function onAnalyze() {
    return _onAnalyze.apply(this, arguments);
  }
  function _onAnalyze() {
    _onAnalyze = (0, _asyncToGenerator2.default)(function* () {
      if (!photoUri) return;
      setLoading(true);
      try {
        var r = yield (0, _aiPhotoService.analyzePhotoFromUri)(photoUri, "image/jpeg");
        setResult(r);
      } catch (error) {
        _reactNative.Alert.alert("Analysis Failed", error.message);
      } finally {
        setLoading(false);
      }
    });
    return _onAnalyze.apply(this, arguments);
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: "AI Photo Analyzer"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.subtitle,
        children: "Get insights on your pet's photos"
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.buttonGroup,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.button,
        testID: "AIPhotoAnalyzerScreen-button-2",
        accessibilityLabel: "Interactive element",
        accessibilityRole: "button",
        onPress: pickPhoto,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.buttonText,
          children: "Pick from Library"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.button,
        testID: "AIPhotoAnalyzerScreen-button-2",
        accessibilityLabel: "Interactive element",
        accessibilityRole: "button",
        onPress: takePhoto,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.buttonText,
          children: "Take Photo"
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "AIPhotoAnalyzerScreen-button-2",
      accessibilityLabel: "Interactive element",
      accessibilityRole: "button",
      onPress: onAnalyze,
      disabled: !photoUri || loading,
      style: [styles.analyzeButton, (!photoUri || loading) && styles.disabled],
      testID: "btn-analyze",
      children: loading ? (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        color: "#fff"
      }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.analyzeButtonText,
        children: loading ? "Analyzing..." : "Analyze Photo"
      })
    }), result && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      testID: "analysis-result",
      style: styles.resultCard,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.resultTitle,
        children: "Analysis Results"
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.metricLabel,
          children: "Overall Score:"
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.metricValue,
          children: [result.overall, "/100"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.metricLabel,
          children: "Sharpness:"
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.metricValue,
          children: [(result.quality.sharpness * 100).toFixed(1), "%"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.metricLabel,
          children: "Exposure:"
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.metricValue,
          children: [(result.quality.exposure * 100).toFixed(1), "%"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.metricLabel,
          children: "Contrast:"
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.metricValue,
          children: [(result.quality.contrast * 100).toFixed(1), "%"]
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.sectionTitle,
        children: "Detected Breeds:"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.breeds,
        children: result.breedCandidates.map(function (b) {
          return b.name;
        }).join(", ") || "No breed detected"
      }), result.suggestions.length > 0 && (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.sectionTitle,
          children: "Suggestions:"
        }), result.suggestions.map(function (s, idx) {
          return (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.suggestion,
            children: ["\u2022 ", s]
          }, idx);
        })]
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f5f5f5",
    padding: 16
  },
  header: {
    marginBottom: 24
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 8
  },
  subtitle: {
    fontSize: 16,
    color: "#666"
  },
  buttonGroup: {
    flexDirection: "row",
    gap: 12,
    marginBottom: 16
  },
  button: {
    flex: 1,
    backgroundColor: "#007AFF",
    padding: 16,
    borderRadius: 12,
    alignItems: "center"
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600"
  },
  analyzeButton: {
    backgroundColor: "#34C759",
    padding: 16,
    borderRadius: 12,
    alignItems: "center",
    marginBottom: 24
  },
  disabled: {
    backgroundColor: "#ccc"
  },
  analyzeButtonText: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "600"
  },
  resultCard: {
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 12,
    marginTop: 8
  },
  resultTitle: {
    fontSize: 22,
    fontWeight: "bold",
    marginBottom: 16,
    color: "#333"
  },
  metricRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 12,
    paddingBottom: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#eee"
  },
  metricLabel: {
    fontSize: 16,
    color: "#666"
  },
  metricValue: {
    fontSize: 16,
    fontWeight: "600",
    color: "#333"
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "600",
    marginTop: 16,
    marginBottom: 8,
    color: "#333"
  },
  breeds: {
    fontSize: 16,
    color: "#333",
    marginBottom: 16
  },
  suggestion: {
    fontSize: 14,
    color: "#666",
    marginTop: 4,
    lineHeight: 20
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJJbWFnZVBpY2tlciIsIl9haVBob3RvU2VydmljZSIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90MiIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiQUlQaG90b0FuYWx5emVyU2NyZWVuIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwibG9hZGluZyIsInNldExvYWRpbmciLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsInJlc3VsdCIsInNldFJlc3VsdCIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2IiwicGhvdG9VcmkiLCJzZXRQaG90b1VyaSIsInBpY2tQaG90byIsIl9yZWYiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfeWllbGQkSW1hZ2VQaWNrZXIkcmUiLCJyZXF1ZXN0TWVkaWFMaWJyYXJ5UGVybWlzc2lvbnNBc3luYyIsInN0YXR1cyIsIkFsZXJ0IiwiYWxlcnQiLCJsYXVuY2hJbWFnZUxpYnJhcnlBc3luYyIsIm1lZGlhVHlwZXMiLCJNZWRpYVR5cGVPcHRpb25zIiwiSW1hZ2VzIiwiYWxsb3dzRWRpdGluZyIsInF1YWxpdHkiLCJjYW5jZWxlZCIsImFzc2V0cyIsInVyaSIsImFwcGx5IiwiYXJndW1lbnRzIiwidGFrZVBob3RvIiwiX3JlZjIiLCJfeWllbGQkSW1hZ2VQaWNrZXIkcmUyIiwicmVxdWVzdENhbWVyYVBlcm1pc3Npb25zQXN5bmMiLCJsYXVuY2hDYW1lcmFBc3luYyIsIm9uQW5hbHl6ZSIsIl9vbkFuYWx5emUiLCJhbmFseXplUGhvdG9Gcm9tVXJpIiwiZXJyb3IiLCJtZXNzYWdlIiwianN4cyIsIlNjcm9sbFZpZXciLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwiVmlldyIsImhlYWRlciIsImpzeCIsIlRleHQiLCJ0aXRsZSIsInN1YnRpdGxlIiwiYnV0dG9uR3JvdXAiLCJUb3VjaGFibGVPcGFjaXR5IiwiYnV0dG9uIiwidGVzdElEIiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJvblByZXNzIiwiYnV0dG9uVGV4dCIsImRpc2FibGVkIiwiYW5hbHl6ZUJ1dHRvbiIsIkFjdGl2aXR5SW5kaWNhdG9yIiwiY29sb3IiLCJhbmFseXplQnV0dG9uVGV4dCIsInJlc3VsdENhcmQiLCJyZXN1bHRUaXRsZSIsIm1ldHJpY1JvdyIsIm1ldHJpY0xhYmVsIiwibWV0cmljVmFsdWUiLCJvdmVyYWxsIiwic2hhcnBuZXNzIiwidG9GaXhlZCIsImV4cG9zdXJlIiwiY29udHJhc3QiLCJzZWN0aW9uVGl0bGUiLCJicmVlZHMiLCJicmVlZENhbmRpZGF0ZXMiLCJtYXAiLCJiIiwibmFtZSIsImpvaW4iLCJzdWdnZXN0aW9ucyIsImxlbmd0aCIsIkZyYWdtZW50IiwicyIsImlkeCIsInN1Z2dlc3Rpb24iLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZmxleCIsImJhY2tncm91bmRDb2xvciIsInBhZGRpbmciLCJtYXJnaW5Cb3R0b20iLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJmbGV4RGlyZWN0aW9uIiwiZ2FwIiwiYm9yZGVyUmFkaXVzIiwiYWxpZ25JdGVtcyIsIm1hcmdpblRvcCIsImp1c3RpZnlDb250ZW50IiwicGFkZGluZ0JvdHRvbSIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJsaW5lSGVpZ2h0Il0sInNvdXJjZXMiOlsiQUlQaG90b0FuYWx5emVyU2NyZWVuLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG4gIFZpZXcsXG4gIFRleHQsXG4gIFRvdWNoYWJsZU9wYWNpdHksXG4gIFN0eWxlU2hlZXQsXG4gIFNjcm9sbFZpZXcsXG4gIEFjdGl2aXR5SW5kaWNhdG9yLFxuICBBbGVydCxcbn0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0ICogYXMgSW1hZ2VQaWNrZXIgZnJvbSBcImV4cG8taW1hZ2UtcGlja2VyXCI7XG5pbXBvcnQgeyBhbmFseXplUGhvdG9Gcm9tVXJpLCB0eXBlIFBob3RvQW5hbHlzaXNSZXN1bHQgfSBmcm9tIFwiLi4vc2VydmljZXMvYWlQaG90b1NlcnZpY2VcIjtcbmltcG9ydCB7IHVzZU5hdmlnYXRpb24gfSBmcm9tIFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFJUGhvdG9BbmFseXplclNjcmVlbigpIHtcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcmVzdWx0LCBzZXRSZXN1bHRdID0gdXNlU3RhdGU8UGhvdG9BbmFseXNpc1Jlc3VsdCB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbcGhvdG9VcmksIHNldFBob3RvVXJpXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IHBpY2tQaG90byA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IHN0YXR1cyB9ID0gYXdhaXQgSW1hZ2VQaWNrZXIucmVxdWVzdE1lZGlhTGlicmFyeVBlcm1pc3Npb25zQXN5bmMoKTtcbiAgICBpZiAoc3RhdHVzICE9PSBcImdyYW50ZWRcIikge1xuICAgICAgQWxlcnQuYWxlcnQoXCJQZXJtaXNzaW9uIG5lZWRlZFwiLCBcIlBsZWFzZSBncmFudCBwaG90byBsaWJyYXJ5IGFjY2Vzc1wiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgSW1hZ2VQaWNrZXIubGF1bmNoSW1hZ2VMaWJyYXJ5QXN5bmMoe1xuICAgICAgbWVkaWFUeXBlczogSW1hZ2VQaWNrZXIuTWVkaWFUeXBlT3B0aW9ucy5JbWFnZXMsXG4gICAgICBhbGxvd3NFZGl0aW5nOiB0cnVlLFxuICAgICAgcXVhbGl0eTogMC44LFxuICAgIH0pO1xuICAgIGlmICghcmVzdWx0LmNhbmNlbGVkICYmIHJlc3VsdC5hc3NldHNbMF0pIHtcbiAgICAgIHNldFBob3RvVXJpKHJlc3VsdC5hc3NldHNbMF0udXJpKTtcbiAgICAgIHNldFJlc3VsdChudWxsKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdGFrZVBob3RvID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgc3RhdHVzIH0gPSBhd2FpdCBJbWFnZVBpY2tlci5yZXF1ZXN0Q2FtZXJhUGVybWlzc2lvbnNBc3luYygpO1xuICAgIGlmIChzdGF0dXMgIT09IFwiZ3JhbnRlZFwiKSB7XG4gICAgICBBbGVydC5hbGVydChcIlBlcm1pc3Npb24gbmVlZGVkXCIsIFwiUGxlYXNlIGdyYW50IGNhbWVyYSBhY2Nlc3NcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IEltYWdlUGlja2VyLmxhdW5jaENhbWVyYUFzeW5jKHtcbiAgICAgIGFsbG93c0VkaXRpbmc6IHRydWUsXG4gICAgICBxdWFsaXR5OiAwLjgsXG4gICAgfSk7XG4gICAgaWYgKCFyZXN1bHQuY2FuY2VsZWQgJiYgcmVzdWx0LmFzc2V0c1swXSkge1xuICAgICAgc2V0UGhvdG9VcmkocmVzdWx0LmFzc2V0c1swXS51cmkpO1xuICAgICAgc2V0UmVzdWx0KG51bGwpO1xuICAgIH1cbiAgfTtcblxuICBhc3luYyBmdW5jdGlvbiBvbkFuYWx5emUoKSB7XG4gICAgaWYgKCFwaG90b1VyaSkgcmV0dXJuO1xuICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHIgPSBhd2FpdCBhbmFseXplUGhvdG9Gcm9tVXJpKHBob3RvVXJpLCBcImltYWdlL2pwZWdcIik7XG4gICAgICBzZXRSZXN1bHQocik7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgQWxlcnQuYWxlcnQoXCJBbmFseXNpcyBGYWlsZWRcIiwgZXJyb3IubWVzc2FnZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFNjcm9sbFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5oZWFkZXJ9PlxuICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnRpdGxlfT5BSSBQaG90byBBbmFseXplcjwvVGV4dD5cbiAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5zdWJ0aXRsZX0+R2V0IGluc2lnaHRzIG9uIHlvdXIgcGV0J3MgcGhvdG9zPC9UZXh0PlxuICAgICAgPC9WaWV3PlxuXG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmJ1dHRvbkdyb3VwfT5cbiAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgc3R5bGU9e3N0eWxlcy5idXR0b259ICB0ZXN0SUQ9XCJBSVBob3RvQW5hbHl6ZXJTY3JlZW4tYnV0dG9uLTJcIiBhY2Nlc3NpYmlsaXR5TGFiZWw9XCJJbnRlcmFjdGl2ZSBlbGVtZW50XCIgYWNjZXNzaWJpbGl0eVJvbGU9XCJidXR0b25cIiBvblByZXNzPXtwaWNrUGhvdG99PlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuYnV0dG9uVGV4dH0+UGljayBmcm9tIExpYnJhcnk8L1RleHQ+XG4gICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgc3R5bGU9e3N0eWxlcy5idXR0b259ICB0ZXN0SUQ9XCJBSVBob3RvQW5hbHl6ZXJTY3JlZW4tYnV0dG9uLTJcIiBhY2Nlc3NpYmlsaXR5TGFiZWw9XCJJbnRlcmFjdGl2ZSBlbGVtZW50XCIgYWNjZXNzaWJpbGl0eVJvbGU9XCJidXR0b25cIiBvblByZXNzPXt0YWtlUGhvdG99PlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuYnV0dG9uVGV4dH0+VGFrZSBQaG90bzwvVGV4dD5cbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgPC9WaWV3PlxuXG4gICAgICA8VG91Y2hhYmxlT3BhY2l0eVxuICAgICAgICAgdGVzdElEPVwiQUlQaG90b0FuYWx5emVyU2NyZWVuLWJ1dHRvbi0yXCIgYWNjZXNzaWJpbGl0eUxhYmVsPVwiSW50ZXJhY3RpdmUgZWxlbWVudFwiIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCIgb25QcmVzcz17b25BbmFseXplfVxuICAgICAgICBkaXNhYmxlZD17IXBob3RvVXJpIHx8IGxvYWRpbmd9XG4gICAgICAgIHN0eWxlPXtbc3R5bGVzLmFuYWx5emVCdXR0b24sICghcGhvdG9VcmkgfHwgbG9hZGluZykgJiYgc3R5bGVzLmRpc2FibGVkXX1cbiAgICAgICAgdGVzdElEPVwiYnRuLWFuYWx5emVcIlxuICAgICAgPlxuICAgICAgICB7bG9hZGluZyA/IChcbiAgICAgICAgICA8QWN0aXZpdHlJbmRpY2F0b3IgY29sb3I9XCIjZmZmXCIgLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmFuYWx5emVCdXR0b25UZXh0fT5cbiAgICAgICAgICAgIHtsb2FkaW5nID8gXCJBbmFseXppbmcuLi5cIiA6IFwiQW5hbHl6ZSBQaG90b1wifVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cblxuICAgICAge3Jlc3VsdCAmJiAoXG4gICAgICAgIDxWaWV3IHRlc3RJRD1cImFuYWx5c2lzLXJlc3VsdFwiIHN0eWxlPXtzdHlsZXMucmVzdWx0Q2FyZH0+XG4gICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5yZXN1bHRUaXRsZX0+QW5hbHlzaXMgUmVzdWx0czwvVGV4dD5cbiAgICAgICAgICBcbiAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLm1ldHJpY1Jvd30+XG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLm1ldHJpY0xhYmVsfT5PdmVyYWxsIFNjb3JlOjwvVGV4dD5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubWV0cmljVmFsdWV9PntyZXN1bHQub3ZlcmFsbH0vMTAwPC9UZXh0PlxuICAgICAgICAgIDwvVmlldz5cblxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMubWV0cmljUm93fT5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubWV0cmljTGFiZWx9PlNoYXJwbmVzczo8L1RleHQ+XG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLm1ldHJpY1ZhbHVlfT57KHJlc3VsdC5xdWFsaXR5LnNoYXJwbmVzcyAqIDEwMCkudG9GaXhlZCgxKX0lPC9UZXh0PlxuICAgICAgICAgIDwvVmlldz5cblxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMubWV0cmljUm93fT5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubWV0cmljTGFiZWx9PkV4cG9zdXJlOjwvVGV4dD5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubWV0cmljVmFsdWV9PnsocmVzdWx0LnF1YWxpdHkuZXhwb3N1cmUgKiAxMDApLnRvRml4ZWQoMSl9JTwvVGV4dD5cbiAgICAgICAgICA8L1ZpZXc+XG5cbiAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLm1ldHJpY1Jvd30+XG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLm1ldHJpY0xhYmVsfT5Db250cmFzdDo8L1RleHQ+XG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLm1ldHJpY1ZhbHVlfT57KHJlc3VsdC5xdWFsaXR5LmNvbnRyYXN0ICogMTAwKS50b0ZpeGVkKDEpfSU8L1RleHQ+XG4gICAgICAgICAgPC9WaWV3PlxuXG4gICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5zZWN0aW9uVGl0bGV9PkRldGVjdGVkIEJyZWVkczo8L1RleHQ+XG4gICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5icmVlZHN9PlxuICAgICAgICAgICAge3Jlc3VsdC5icmVlZENhbmRpZGF0ZXMubWFwKGIgPT4gYi5uYW1lKS5qb2luKFwiLCBcIikgfHwgXCJObyBicmVlZCBkZXRlY3RlZFwifVxuICAgICAgICAgIDwvVGV4dD5cblxuICAgICAgICAgIHtyZXN1bHQuc3VnZ2VzdGlvbnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnNlY3Rpb25UaXRsZX0+U3VnZ2VzdGlvbnM6PC9UZXh0PlxuICAgICAgICAgICAgICB7cmVzdWx0LnN1Z2dlc3Rpb25zLm1hcCgocywgaWR4KSA9PiAoXG4gICAgICAgICAgICAgICAgPFRleHQga2V5PXtpZHh9IHN0eWxlPXtzdHlsZXMuc3VnZ2VzdGlvbn0+XG4gICAgICAgICAgICAgICAgICDigKIge3N9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvVmlldz5cbiAgICAgICl9XG4gICAgPC9TY3JvbGxWaWV3PlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGZsZXg6IDEsXG4gICAgYmFja2dyb3VuZENvbG9yOiBcIiNmNWY1ZjVcIixcbiAgICBwYWRkaW5nOiAxNixcbiAgfSxcbiAgaGVhZGVyOiB7XG4gICAgbWFyZ2luQm90dG9tOiAyNCxcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogMjgsXG4gICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgY29sb3I6IFwiIzMzM1wiLFxuICAgIG1hcmdpbkJvdHRvbTogOCxcbiAgfSxcbiAgc3VidGl0bGU6IHtcbiAgICBmb250U2l6ZTogMTYsXG4gICAgY29sb3I6IFwiIzY2NlwiLFxuICB9LFxuICBidXR0b25Hcm91cDoge1xuICAgIGZsZXhEaXJlY3Rpb246IFwicm93XCIsXG4gICAgZ2FwOiAxMixcbiAgICBtYXJnaW5Cb3R0b206IDE2LFxuICB9LFxuICBidXR0b246IHtcbiAgICBmbGV4OiAxLFxuICAgIGJhY2tncm91bmRDb2xvcjogXCIjMDA3QUZGXCIsXG4gICAgcGFkZGluZzogMTYsXG4gICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICB9LFxuICBidXR0b25UZXh0OiB7XG4gICAgY29sb3I6IFwiI2ZmZlwiLFxuICAgIGZvbnRTaXplOiAxNixcbiAgICBmb250V2VpZ2h0OiBcIjYwMFwiLFxuICB9LFxuICBhbmFseXplQnV0dG9uOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcIiMzNEM3NTlcIixcbiAgICBwYWRkaW5nOiAxNixcbiAgICBib3JkZXJSYWRpdXM6IDEyLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgbWFyZ2luQm90dG9tOiAyNCxcbiAgfSxcbiAgZGlzYWJsZWQ6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2NjY1wiLFxuICB9LFxuICBhbmFseXplQnV0dG9uVGV4dDoge1xuICAgIGNvbG9yOiBcIiNmZmZcIixcbiAgICBmb250U2l6ZTogMTgsXG4gICAgZm9udFdlaWdodDogXCI2MDBcIixcbiAgfSxcbiAgcmVzdWx0Q2FyZDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogXCIjZmZmXCIsXG4gICAgcGFkZGluZzogMjAsXG4gICAgYm9yZGVyUmFkaXVzOiAxMixcbiAgICBtYXJnaW5Ub3A6IDgsXG4gIH0sXG4gIHJlc3VsdFRpdGxlOiB7XG4gICAgZm9udFNpemU6IDIyLFxuICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxuICAgIG1hcmdpbkJvdHRvbTogMTYsXG4gICAgY29sb3I6IFwiIzMzM1wiLFxuICB9LFxuICBtZXRyaWNSb3c6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICAgIGp1c3RpZnlDb250ZW50OiBcInNwYWNlLWJldHdlZW5cIixcbiAgICBtYXJnaW5Cb3R0b206IDEyLFxuICAgIHBhZGRpbmdCb3R0b206IDEyLFxuICAgIGJvcmRlckJvdHRvbVdpZHRoOiAxLFxuICAgIGJvcmRlckJvdHRvbUNvbG9yOiBcIiNlZWVcIixcbiAgfSxcbiAgbWV0cmljTGFiZWw6IHtcbiAgICBmb250U2l6ZTogMTYsXG4gICAgY29sb3I6IFwiIzY2NlwiLFxuICB9LFxuICBtZXRyaWNWYWx1ZToge1xuICAgIGZvbnRTaXplOiAxNixcbiAgICBmb250V2VpZ2h0OiBcIjYwMFwiLFxuICAgIGNvbG9yOiBcIiMzMzNcIixcbiAgfSxcbiAgc2VjdGlvblRpdGxlOiB7XG4gICAgZm9udFNpemU6IDE4LFxuICAgIGZvbnRXZWlnaHQ6IFwiNjAwXCIsXG4gICAgbWFyZ2luVG9wOiAxNixcbiAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgY29sb3I6IFwiIzMzM1wiLFxuICB9LFxuICBicmVlZHM6IHtcbiAgICBmb250U2l6ZTogMTYsXG4gICAgY29sb3I6IFwiIzMzM1wiLFxuICAgIG1hcmdpbkJvdHRvbTogMTYsXG4gIH0sXG4gIHN1Z2dlc3Rpb246IHtcbiAgICBmb250U2l6ZTogMTQsXG4gICAgY29sb3I6IFwiIzY2NlwiLFxuICAgIG1hcmdpblRvcDogNCxcbiAgICBsaW5lSGVpZ2h0OiAyMCxcbiAgfSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFTQSxJQUFBRSxXQUFBLEdBQUFILHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxlQUFBLEdBQUFILE9BQUE7QUFBMkYsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBQUEsU0FBQUQsd0JBQUFNLENB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