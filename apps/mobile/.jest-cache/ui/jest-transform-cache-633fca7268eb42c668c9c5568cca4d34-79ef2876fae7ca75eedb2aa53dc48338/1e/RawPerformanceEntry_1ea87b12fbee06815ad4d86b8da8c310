ce35ca4dcecbc0aafeb1c0b35bb5881a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RawPerformanceEntryTypeValues = void 0;
exports.performanceEntryTypeToRaw = performanceEntryTypeToRaw;
exports.rawToPerformanceEntry = rawToPerformanceEntry;
exports.rawToPerformanceEntryType = rawToPerformanceEntryType;
var _PerformanceEntry = require("./PerformanceEntry");
var _PerformanceEventTiming = require("./PerformanceEventTiming");
var RawPerformanceEntryTypeValues = exports.RawPerformanceEntryTypeValues = {
  UNDEFINED: 0,
  MARK: 1,
  MEASURE: 2,
  EVENT: 3
};
function rawToPerformanceEntry(entry) {
  if (entry.entryType === RawPerformanceEntryTypeValues.EVENT) {
    return new _PerformanceEventTiming.PerformanceEventTiming({
      name: entry.name,
      startTime: entry.startTime,
      duration: entry.duration,
      processingStart: entry.processingStart,
      processingEnd: entry.processingEnd,
      interactionId: entry.interactionId
    });
  } else {
    return new _PerformanceEntry.PerformanceEntry({
      name: entry.name,
      entryType: rawToPerformanceEntryType(entry.entryType),
      startTime: entry.startTime,
      duration: entry.duration
    });
  }
}
function rawToPerformanceEntryType(type) {
  switch (type) {
    case RawPerformanceEntryTypeValues.MARK:
      return 'mark';
    case RawPerformanceEntryTypeValues.MEASURE:
      return 'measure';
    case RawPerformanceEntryTypeValues.EVENT:
      return 'event';
    case RawPerformanceEntryTypeValues.UNDEFINED:
      throw new TypeError("rawToPerformanceEntryType: UNDEFINED can't be cast to PerformanceEntryType");
    default:
      throw new TypeError(`rawToPerformanceEntryType: unexpected performance entry type received: ${type}`);
  }
}
function performanceEntryTypeToRaw(type) {
  switch (type) {
    case 'mark':
      return RawPerformanceEntryTypeValues.MARK;
    case 'measure':
      return RawPerformanceEntryTypeValues.MEASURE;
    case 'event':
      return RawPerformanceEntryTypeValues.EVENT;
    default:
      type;
      throw new TypeError(`performanceEntryTypeToRaw: unexpected performance entry type received: ${type}`);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGVyZm9ybWFuY2VFbnRyeSIsInJlcXVpcmUiLCJfUGVyZm9ybWFuY2VFdmVudFRpbWluZyIsIlJhd1BlcmZvcm1hbmNlRW50cnlUeXBlVmFsdWVzIiwiZXhwb3J0cyIsIlVOREVGSU5FRCIsIk1BUksiLCJNRUFTVVJFIiwiRVZFTlQiLCJyYXdUb1BlcmZvcm1hbmNlRW50cnkiLCJlbnRyeSIsImVudHJ5VHlwZSIsIlBlcmZvcm1hbmNlRXZlbnRUaW1pbmciLCJuYW1lIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJwcm9jZXNzaW5nU3RhcnQiLCJwcm9jZXNzaW5nRW5kIiwiaW50ZXJhY3Rpb25JZCIsIlBlcmZvcm1hbmNlRW50cnkiLCJyYXdUb1BlcmZvcm1hbmNlRW50cnlUeXBlIiwidHlwZSIsIlR5cGVFcnJvciIsInBlcmZvcm1hbmNlRW50cnlUeXBlVG9SYXciXSwic291cmNlcyI6WyJSYXdQZXJmb3JtYW5jZUVudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG5pbXBvcnQgdHlwZSB7XG4gIFJhd1BlcmZvcm1hbmNlRW50cnksXG4gIFJhd1BlcmZvcm1hbmNlRW50cnlUeXBlLFxufSBmcm9tICcuL05hdGl2ZVBlcmZvcm1hbmNlT2JzZXJ2ZXInO1xuaW1wb3J0IHR5cGUge1BlcmZvcm1hbmNlRW50cnlUeXBlfSBmcm9tICcuL1BlcmZvcm1hbmNlRW50cnknO1xuXG5pbXBvcnQge1BlcmZvcm1hbmNlRW50cnl9IGZyb20gJy4vUGVyZm9ybWFuY2VFbnRyeSc7XG5pbXBvcnQge1BlcmZvcm1hbmNlRXZlbnRUaW1pbmd9IGZyb20gJy4vUGVyZm9ybWFuY2VFdmVudFRpbWluZyc7XG5cbmV4cG9ydCBjb25zdCBSYXdQZXJmb3JtYW5jZUVudHJ5VHlwZVZhbHVlcyA9IHtcbiAgVU5ERUZJTkVEOiAwLFxuICBNQVJLOiAxLFxuICBNRUFTVVJFOiAyLFxuICBFVkVOVDogMyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByYXdUb1BlcmZvcm1hbmNlRW50cnkoXG4gIGVudHJ5OiBSYXdQZXJmb3JtYW5jZUVudHJ5LFxuKTogUGVyZm9ybWFuY2VFbnRyeSB7XG4gIGlmIChlbnRyeS5lbnRyeVR5cGUgPT09IFJhd1BlcmZvcm1hbmNlRW50cnlUeXBlVmFsdWVzLkVWRU5UKSB7XG4gICAgcmV0dXJuIG5ldyBQZXJmb3JtYW5jZUV2ZW50VGltaW5nKHtcbiAgICAgIG5hbWU6IGVudHJ5Lm5hbWUsXG4gICAgICBzdGFydFRpbWU6IGVudHJ5LnN0YXJ0VGltZSxcbiAgICAgIGR1cmF0aW9uOiBlbnRyeS5kdXJhdGlvbixcbiAgICAgIHByb2Nlc3NpbmdTdGFydDogZW50cnkucHJvY2Vzc2luZ1N0YXJ0LFxuICAgICAgcHJvY2Vzc2luZ0VuZDogZW50cnkucHJvY2Vzc2luZ0VuZCxcbiAgICAgIGludGVyYWN0aW9uSWQ6IGVudHJ5LmludGVyYWN0aW9uSWQsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBQZXJmb3JtYW5jZUVudHJ5KHtcbiAgICAgIG5hbWU6IGVudHJ5Lm5hbWUsXG4gICAgICBlbnRyeVR5cGU6IHJhd1RvUGVyZm9ybWFuY2VFbnRyeVR5cGUoZW50cnkuZW50cnlUeXBlKSxcbiAgICAgIHN0YXJ0VGltZTogZW50cnkuc3RhcnRUaW1lLFxuICAgICAgZHVyYXRpb246IGVudHJ5LmR1cmF0aW9uLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYXdUb1BlcmZvcm1hbmNlRW50cnlUeXBlKFxuICB0eXBlOiBSYXdQZXJmb3JtYW5jZUVudHJ5VHlwZSxcbik6IFBlcmZvcm1hbmNlRW50cnlUeXBlIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSYXdQZXJmb3JtYW5jZUVudHJ5VHlwZVZhbHVlcy5NQVJLOlxuICAgICAgcmV0dXJuICdtYXJrJztcbiAgICBjYXNlIFJhd1BlcmZvcm1hbmNlRW50cnlUeXBlVmFsdWVzLk1FQVNVUkU6XG4gICAgICByZXR1cm4gJ21lYXN1cmUnO1xuICAgIGNhc2UgUmF3UGVyZm9ybWFuY2VFbnRyeVR5cGVWYWx1ZXMuRVZFTlQ6XG4gICAgICByZXR1cm4gJ2V2ZW50JztcbiAgICBjYXNlIFJhd1BlcmZvcm1hbmNlRW50cnlUeXBlVmFsdWVzLlVOREVGSU5FRDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIFwicmF3VG9QZXJmb3JtYW5jZUVudHJ5VHlwZTogVU5ERUZJTkVEIGNhbid0IGJlIGNhc3QgdG8gUGVyZm9ybWFuY2VFbnRyeVR5cGVcIixcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIGByYXdUb1BlcmZvcm1hbmNlRW50cnlUeXBlOiB1bmV4cGVjdGVkIHBlcmZvcm1hbmNlIGVudHJ5IHR5cGUgcmVjZWl2ZWQ6ICR7dHlwZX1gLFxuICAgICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGVyZm9ybWFuY2VFbnRyeVR5cGVUb1JhdyhcbiAgdHlwZTogUGVyZm9ybWFuY2VFbnRyeVR5cGUsXG4pOiBSYXdQZXJmb3JtYW5jZUVudHJ5VHlwZSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ21hcmsnOlxuICAgICAgcmV0dXJuIFJhd1BlcmZvcm1hbmNlRW50cnlUeXBlVmFsdWVzLk1BUks7XG4gICAgY2FzZSAnbWVhc3VyZSc6XG4gICAgICByZXR1cm4gUmF3UGVyZm9ybWFuY2VFbnRyeVR5cGVWYWx1ZXMuTUVBU1VSRTtcbiAgICBjYXNlICdldmVudCc6XG4gICAgICByZXR1cm4gUmF3UGVyZm9ybWFuY2VFbnRyeVR5cGVWYWx1ZXMuRVZFTlQ7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIFZlcmlmeSBleGhhdXN0aXZlIGNoZWNrIHdpdGggRmxvd1xuICAgICAgKHR5cGU6IGVtcHR5KTtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIGBwZXJmb3JtYW5jZUVudHJ5VHlwZVRvUmF3OiB1bmV4cGVjdGVkIHBlcmZvcm1hbmNlIGVudHJ5IHR5cGUgcmVjZWl2ZWQ6ICR7dHlwZX1gLFxuICAgICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkEsSUFBQUEsaUJBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLHVCQUFBLEdBQUFELE9BQUE7QUFFTyxJQUFNRSw2QkFBNkIsR0FBQUMsT0FBQSxDQUFBRCw2QkFBQSxHQUFHO0VBQzNDRSxTQUFTLEVBQUUsQ0FBQztFQUNaQyxJQUFJLEVBQUUsQ0FBQztFQUNQQyxPQUFPLEVBQUUsQ0FBQztFQUNWQyxLQUFLLEVBQUU7QUFDVCxDQUFDO0FBRU0sU0FBU0MscUJBQXFCQSxDQUNuQ0MsS0FBMEIsRUFDUjtFQUNsQixJQUFJQSxLQUFLLENBQUNDLFNBQVMsS0FBS1IsNkJBQTZCLENBQUNLLEtBQUssRUFBRTtJQUMzRCxPQUFPLElBQUlJLDhDQUFzQixDQUFDO01BQ2hDQyxJQUFJLEVBQUVILEtBQUssQ0FBQ0csSUFBSTtNQUNoQkMsU0FBUyxFQUFFSixLQUFLLENBQUNJLFNBQVM7TUFDMUJDLFFBQVEsRUFBRUwsS0FBSyxDQUFDSyxRQUFRO01BQ3hCQyxlQUFlLEVBQUVOLEtBQUssQ0FBQ00sZUFBZTtNQUN0Q0MsYUFBYSxFQUFFUCxLQUFLLENBQUNPLGFBQWE7TUFDbENDLGFBQWEsRUFBRVIsS0FBSyxDQUFDUTtJQUN2QixDQUFDLENBQUM7RUFDSixDQUFDLE1BQU07SUFDTCxPQUFPLElBQUlDLGtDQUFnQixDQUFDO01BQzFCTixJQUFJLEVBQUVILEtBQUssQ0FBQ0csSUFBSTtNQUNoQkYsU0FBUyxFQUFFUyx5QkFBeUIsQ0FBQ1YsS0FBSyxDQUFDQyxTQUFTLENBQUM7TUFDckRHLFNBQVMsRUFBRUosS0FBSyxDQUFDSSxTQUFTO01BQzFCQyxRQUFRLEVBQUVMLEtBQUssQ0FBQ0s7SUFDbEIsQ0FBQyxDQUFDO0VBQ0o7QUFDRjtBQUVPLFNBQVNLLHlCQUF5QkEsQ0FDdkNDLElBQTZCLEVBQ1A7RUFDdEIsUUFBUUEsSUFBSTtJQUNWLEtBQUtsQiw2QkFBNkIsQ0FBQ0csSUFBSTtNQUNyQyxPQUFPLE1BQU07SUFDZixLQUFLSCw2QkFBNkIsQ0FBQ0ksT0FBTztNQUN4QyxPQUFPLFNBQVM7SUFDbEIsS0FBS0osNkJBQTZCLENBQUNLLEtBQUs7TUFDdEMsT0FBTyxPQUFPO0lBQ2hCLEtBQUtMLDZCQUE2QixDQUFDRSxTQUFTO01BQzFDLE1BQU0sSUFBSWlCLFNBQVMsQ0FDakIsNEVBQ0YsQ0FBQztJQUNIO01BQ0UsTUFBTSxJQUFJQSxTQUFTLENBQ2pCLDBFQUEwRUQsSUFBSSxFQUNoRixDQUFDO0VBQ0w7QUFDRjtBQUVPLFNBQVNFLHlCQUF5QkEsQ0FDdkNGLElBQTBCLEVBQ0Q7RUFDekIsUUFBUUEsSUFBSTtJQUNWLEtBQUssTUFBTTtNQUNULE9BQU9sQiw2QkFBNkIsQ0FBQ0csSUFBSTtJQUMzQyxLQUFLLFNBQVM7TUFDWixPQUFPSCw2QkFBNkIsQ0FBQ0ksT0FBTztJQUM5QyxLQUFLLE9BQU87TUFDVixPQUFPSiw2QkFBNkIsQ0FBQ0ssS0FBSztJQUM1QztNQUVHYSxJQUFJO01BQ0wsTUFBTSxJQUFJQyxTQUFTLENBQ2pCLDBFQUEwRUQsSUFBSSxFQUNoRixDQUFDO0VBQ0w7QUFDRiIsImlnbm9yZUxpc3QiOltdfQ==