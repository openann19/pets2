30721d6e94a666c6b343c4108eebd139
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HapticSwitch;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _unifiedTheme = require("../../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var _worklet_17333597386376_init_data = {
  code: "function anonymous() {\n  const {\n    pulse\n  } = this._closure;\n  return {\n    opacity: 1 - pulse.value,\n    transform: [{\n      scale: 1 + 0.35 * (1 - pulse.value)\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/HapticSwitch.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"pulse\",\"_closure\",\"opacity\",\"value\",\"transform\",\"scale\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/HapticSwitch.tsx\"],\"mappings\":\"AAoBgC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IACnCC,OAAO,EAAE,CAAC,GAAGF,KAAK,CAACG,KAAK;IACxBC,SAAS,EAAE,CAAC;MAAEC,KAAK,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,GAAGL,KAAK,CAACG,KAAK;IAAE,CAAC;EACrD,CAAC;AAAA\",\"ignoreList\":[]}"
};
function HapticSwitch(_ref) {
  var value = _ref.value,
    _onValueChange = _ref.onValueChange,
    disabled = _ref.disabled;
  var pulse = (0, _reactNativeReanimated.useSharedValue)(0);
  (0, _react.useEffect)(function () {
    pulse.value = 0;
    pulse.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 450
    });
  }, [value]);
  var ring = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        opacity: 1 - pulse.value,
        transform: [{
          scale: 1 + 0.35 * (1 - pulse.value)
        }]
      };
    };
    _f._closure = {
      pulse: pulse
    };
    _f.__initData = _worklet_17333597386376_init_data;
    _f.__workletHash = 17333597386376;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.wrap,
    children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      pointerEvents: "none",
      style: [styles.ring, {
        borderColor: _unifiedTheme.Theme.colors.primary[500]
      }, ring]
    }), (0, _jsxRuntime.jsx)(_reactNative.Switch, {
      value: value,
      disabled: disabled,
      onValueChange: function onValueChange(v) {
        Haptics.selectionAsync();
        _onValueChange(v);
      },
      trackColor: {
        false: _unifiedTheme.Theme.colors.neutral[200],
        true: "#fce7f3"
      },
      thumbColor: value ? _unifiedTheme.Theme.colors.primary[500] : _unifiedTheme.Theme.colors.neutral[400]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  wrap: {
    alignItems: "center",
    justifyContent: "center"
  },
  ring: {
    position: "absolute",
    width: 52,
    height: 32,
    borderRadius: 20,
    borderWidth: 2
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmVSZWFuaW1hdGVkIiwiSGFwdGljcyIsIl91bmlmaWVkVGhlbWUiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdDIiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl93b3JrbGV0XzE3MzMzNTk3Mzg2Mzc2X2luaXRfZGF0YSIsImNvZGUiLCJsb2NhdGlvbiIsInNvdXJjZU1hcCIsIkhhcHRpY1N3aXRjaCIsIl9yZWYiLCJ2YWx1ZSIsIm9uVmFsdWVDaGFuZ2UiLCJkaXNhYmxlZCIsInB1bHNlIiwidXNlU2hhcmVkVmFsdWUiLCJ1c2VFZmZlY3QiLCJ3aXRoVGltaW5nIiwiZHVyYXRpb24iLCJyaW5nIiwidXNlQW5pbWF0ZWRTdHlsZSIsIl9lIiwiZ2xvYmFsIiwiRXJyb3IiLCJfZiIsIm9wYWNpdHkiLCJ0cmFuc2Zvcm0iLCJzY2FsZSIsIl9jbG9zdXJlIiwiX19pbml0RGF0YSIsIl9fd29ya2xldEhhc2giLCJfX3N0YWNrRGV0YWlscyIsIl9fdmVyc2lvbiIsImpzeHMiLCJWaWV3Iiwic3R5bGUiLCJzdHlsZXMiLCJ3cmFwIiwiY2hpbGRyZW4iLCJqc3giLCJwb2ludGVyRXZlbnRzIiwiYm9yZGVyQ29sb3IiLCJUaGVtZSIsImNvbG9ycyIsInByaW1hcnkiLCJTd2l0Y2giLCJ2Iiwic2VsZWN0aW9uQXN5bmMiLCJ0cmFja0NvbG9yIiwiZmFsc2UiLCJuZXV0cmFsIiwidHJ1ZSIsInRodW1iQ29sb3IiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwicG9zaXRpb24iLCJ3aWR0aCIsImhlaWdodCIsImJvcmRlclJhZGl1cyIsImJvcmRlcldpZHRoIl0sInNvdXJjZXMiOlsiSGFwdGljU3dpdGNoLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBWaWV3LCBTd2l0Y2gsIFN0eWxlU2hlZXQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgQW5pbWF0ZWQsIHsgdXNlU2hhcmVkVmFsdWUsIHVzZUFuaW1hdGVkU3R5bGUsIHdpdGhTcHJpbmcsIHdpdGhUaW1pbmcgfSBmcm9tIFwicmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWRcIjtcbmltcG9ydCAqIGFzIEhhcHRpY3MgZnJvbSBcImV4cG8taGFwdGljc1wiO1xuaW1wb3J0IHsgVGhlbWUgfSBmcm9tIFwiLi4vLi4vdGhlbWUvdW5pZmllZC10aGVtZVwiO1xuXG50eXBlIFByb3BzID0ge1xuICB2YWx1ZTogYm9vbGVhbjtcbiAgb25WYWx1ZUNoYW5nZTogKHY6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhhcHRpY1N3aXRjaCh7IHZhbHVlLCBvblZhbHVlQ2hhbmdlLCBkaXNhYmxlZCB9OiBQcm9wcykge1xuICBjb25zdCBwdWxzZSA9IHVzZVNoYXJlZFZhbHVlKDApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHVsc2UudmFsdWUgPSAwO1xuICAgIHB1bHNlLnZhbHVlID0gd2l0aFRpbWluZygxLCB7IGR1cmF0aW9uOiA0NTAgfSk7XG4gIH0sIFt2YWx1ZV0pO1xuXG4gIGNvbnN0IHJpbmcgPSB1c2VBbmltYXRlZFN0eWxlKCgpID0+ICh7XG4gICAgb3BhY2l0eTogMSAtIHB1bHNlLnZhbHVlLFxuICAgIHRyYW5zZm9ybTogW3sgc2NhbGU6IDEgKyAwLjM1ICogKDEgLSBwdWxzZS52YWx1ZSkgfV0sXG4gIH0pKTtcblxuICByZXR1cm4gKFxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMud3JhcH0+XG4gICAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgICBwb2ludGVyRXZlbnRzPVwibm9uZVwiXG4gICAgICAgIHN0eWxlPXtbc3R5bGVzLnJpbmcsIHsgYm9yZGVyQ29sb3I6IFRoZW1lLmNvbG9ycy5wcmltYXJ5WzUwMF0gfSwgcmluZ119XG4gICAgICAvPlxuICAgICAgPFN3aXRjaFxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgb25WYWx1ZUNoYW5nZT17diA9PiB7XG4gICAgICAgICAgSGFwdGljcy5zZWxlY3Rpb25Bc3luYygpO1xuICAgICAgICAgIG9uVmFsdWVDaGFuZ2Uodik7XG4gICAgICAgIH19XG4gICAgICAgIHRyYWNrQ29sb3I9e3sgZmFsc2U6IFRoZW1lLmNvbG9ycy5uZXV0cmFsWzIwMF0sIHRydWU6IFwiI2ZjZTdmM1wiIH19XG4gICAgICAgIHRodW1iQ29sb3I9e3ZhbHVlID8gVGhlbWUuY29sb3JzLnByaW1hcnlbNTAwXSA6IFRoZW1lLmNvbG9ycy5uZXV0cmFsWzQwMF19XG4gICAgICAvPlxuICAgIDwvVmlldz5cbiAgKTtcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICB3cmFwOiB7IGFsaWduSXRlbXM6IFwiY2VudGVyXCIsIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiIH0sXG4gIHJpbmc6IHtcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIHdpZHRoOiA1MixcbiAgICBoZWlnaHQ6IDMyLFxuICAgIGJvcmRlclJhZGl1czogMjAsXG4gICAgYm9yZGVyV2lkdGg6IDIsXG4gIH0sXG59KTtcblxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxz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QztFQUVILE9BQ0UsSUFBQXhDLFdBQUEsQ0FBQWlELElBQUEsRUFBQ3JELFlBQUEsQ0FBQXNELElBQUk7SUFBQ0MsS0FBSyxFQUFFQyxNQUFNLENBQUNDLElBQUs7SUFBQUMsUUFBQSxHQUN2QixJQUFBdEQsV0FBQSxDQUFBdUQsR0FBQSxFQUFDMUQsc0JBQUEsQ0FBQWMsT0FBUSxDQUFDdUMsSUFBSTtNQUNaTSxhQUFhLEVBQUMsTUFBTTtNQUNwQkwsS0FBSyxFQUFFLENBQUNDLE1BQU0sQ0FBQ2pCLElBQUksRUFBRTtRQUFFc0IsV0FBVyxFQUFFQyxtQkFBSyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBQyxHQUFHO01BQUUsQ0FBQyxFQUFFekIsSUFBSTtJQUFFLENBQ3hFLENBQUMsRUFDRixJQUFBbkMsV0FBQSxDQUFBdUQsR0FBQSxFQUFDM0QsWUFBQSxDQUFBaUUsTUFBTTtNQUNMbEMsS0FBSyxFQUFFQSxLQUFNO01BQ2JFLFFBQVEsRUFBRUEsUUFBUztNQUNuQkQsYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUVrQyxDQUFDLEVBQUk7UUFDbEJoRSxPQUFPLENBQUNpRSxjQUFjLENBQUMsQ0FBQztRQUN4Qm5DLGNBQWEsQ0FBQ2tDLENBQUMsQ0FBQztNQUNsQixDQUFFO01BQ0ZFLFVBQVUsRUFBRTtRQUFFQyxLQUFLLEVBQUVQLG1CQUFLLENBQUNDLE1BQU0sQ0FBQ08sT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUFFQyxJQUFJLEVBQUU7TUFBVSxDQUFFO01BQ2xFQyxVQUFVLEVBQUV6QyxLQUFLLEdBQUcrQixtQkFBSyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBR0YsbUJBQUssQ0FBQ0MsTUFBTSxDQUFDTyxPQUFPLENBQUMsR0FBRztJQUFFLENBQzNFLENBQUM7RUFBQSxDQUNFLENBQUM7QUFFWDtBQUVBLElBQU1kLE1BQU0sR0FBR2lCLHVCQUFVLENBQUNDLE1BQU0sQ0FBQztFQUMvQmpCLElBQUksRUFBRTtJQUFFa0IsVUFBVSxFQUFFLFFBQVE7SUFBRUMsY0FBYyxFQUFFO0VBQVMsQ0FBQztFQUN4RHJDLElBQUksRUFBRTtJQUNKc0MsUUFBUSxFQUFFLFVBQVU7SUFDcEJDLEtBQUssRUFBRSxFQUFFO0lBQ1RDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFlBQVksRUFBRSxFQUFFO0lBQ2hCQyxXQUFXLEVBQUU7RUFDZjtBQUNGLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==