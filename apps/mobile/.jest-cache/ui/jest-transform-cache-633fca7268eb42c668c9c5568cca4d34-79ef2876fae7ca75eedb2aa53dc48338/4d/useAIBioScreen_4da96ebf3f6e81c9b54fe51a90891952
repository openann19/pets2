2027dd8687326f4717c7c5c4b38ee3df
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAIBioScreen = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _native = require("@react-navigation/native");
var _react = require("react");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var _api = require("../../services/api");
var _useAIBio2 = require("../domains/ai/useAIBio");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var TONES = [{
  id: "playful",
  label: "Playful",
  icon: "ðŸŽ¾",
  color: "#ff6b6b"
}, {
  id: "professional",
  label: "Professional",
  icon: "ðŸ’¼",
  color: "#4dabf7"
}, {
  id: "casual",
  label: "Casual",
  icon: "ðŸ˜Š",
  color: "#69db7c"
}, {
  id: "romantic",
  label: "Romantic",
  icon: "ðŸ’•",
  color: "#f783ac"
}, {
  id: "funny",
  label: "Funny",
  icon: "ðŸ˜„",
  color: "#ffd43b"
}];
var useAIBioScreen = exports.useAIBioScreen = function useAIBioScreen() {
  var navigation = (0, _native.useNavigation)();
  var _useAuthStore = (0, _core.useAuthStore)(),
    user = _useAuthStore.user;
  var _useAIBio = (0, _useAIBio2.useAIBio)(),
    generateAIBio = _useAIBio.generateBio,
    isGenerating = _useAIBio.isGenerating,
    lastGeneratedBio = _useAIBio.lastGeneratedBio,
    bioHistory = _useAIBio.bioHistory,
    addToHistory = _useAIBio.addToHistory,
    clearHistory = _useAIBio.clearHistory;
  var _useState = (0, _react.useState)(""),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    petName = _useState2[0],
    setPetName = _useState2[1];
  var _useState3 = (0, _react.useState)(""),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    petBreed = _useState4[0],
    setPetBreed = _useState4[1];
  var _useState5 = (0, _react.useState)(""),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    petAge = _useState6[0],
    setPetAge = _useState6[1];
  var _useState7 = (0, _react.useState)(""),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    petPersonality = _useState8[0],
    setPetPersonality = _useState8[1];
  var _useState9 = (0, _react.useState)("playful"),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    selectedTone = _useState0[0],
    setSelectedTone = _useState0[1];
  var _useState1 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    selectedPhoto = _useState10[0],
    setSelectedPhoto = _useState10[1];
  var pickImage = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),
        status = _yield$ImagePicker$re.status;
      if (status !== "granted") {
        _reactNative.Alert.alert("Permission needed", "We need camera roll permissions to analyze your pet photo");
        return;
      }
      var result = yield ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8
      });
      if (!result.canceled && result.assets && result.assets[0]) {
        setSelectedPhoto(result.assets[0].uri);
      }
    });
    return function pickImage() {
      return _ref.apply(this, arguments);
    };
  }();
  var generateBio = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (!petName.trim()) {
        _reactNative.Alert.alert("Missing Information", "Please enter your pet's name");
        return;
      }
      try {
        var params = {
          petName: petName.trim(),
          keywords: petPersonality.trim().split(",").map(function (p) {
            return p.trim();
          }).filter(function (p) {
            return p.length > 0;
          }),
          tone: selectedTone,
          length: "medium",
          petType: "dog",
          age: parseInt(petAge.trim()) || 1,
          breed: petBreed.trim()
        };
        yield generateAIBio(params);
      } catch (error) {
        _core.logger.error("Bio generation failed", {
          error: error
        });
      }
    });
    return function generateBio() {
      return _ref2.apply(this, arguments);
    };
  }();
  var saveBio = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (!lastGeneratedBio) return;
      try {
        if (user != null && user._id && lastGeneratedBio) {
          var _userPets$;
          var userPets = yield _api.api.getUserPets();
          if (userPets && userPets.length > 0 && (_userPets$ = userPets[0]) != null && _userPets$._id) {
            yield _api.api.updatePet(userPets[0]._id, {
              description: lastGeneratedBio.bio
            });
            _reactNative.Alert.alert("Success", "Pet profile updated successfully!");
            navigation.goBack();
          } else {
            _reactNative.Alert.alert("Saved Locally", "Bio has been saved to your device");
          }
        } else {
          _reactNative.Alert.alert("Saved Locally", "Bio has been saved to your device");
        }
      } catch (error) {
        _reactNative.Alert.alert("Saved Locally", "Bio has been saved to your device");
      }
    });
    return function saveBio() {
      return _ref3.apply(this, arguments);
    };
  }();
  var handleGoBack = function handleGoBack() {
    navigation.goBack();
  };
  var clearForm = function clearForm() {
    setPetName("");
    setPetBreed("");
    setPetAge("");
    setPetPersonality("");
    setSelectedTone("playful");
    setSelectedPhoto(null);
    clearHistory();
  };
  return {
    petName: petName,
    setPetName: setPetName,
    petBreed: petBreed,
    setPetBreed: setPetBreed,
    petAge: petAge,
    setPetAge: setPetAge,
    petPersonality: petPersonality,
    setPetPersonality: setPetPersonality,
    selectedTone: selectedTone,
    setSelectedTone: setSelectedTone,
    selectedPhoto: selectedPhoto,
    setSelectedPhoto: setSelectedPhoto,
    isGenerating: isGenerating,
    generatedBio: lastGeneratedBio,
    bioHistory: bioHistory,
    tones: TONES,
    pickImage: pickImage,
    generateBio: generateBio,
    saveBio: saveBio,
    handleGoBack: handleGoBack,
    clearForm: clearForm
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,