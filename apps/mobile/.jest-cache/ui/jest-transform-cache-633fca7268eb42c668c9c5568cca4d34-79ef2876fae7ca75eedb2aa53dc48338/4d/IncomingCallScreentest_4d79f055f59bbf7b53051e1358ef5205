e5e4f65a0228ea6da75adb06406ab1bd
"use strict";

_getJestObj().mock("react-native", function () {
  var RN = jest.requireActual("react-native");
  var createMockValue = function createMockValue(value) {
    var mockValue = jest.fn(function () {
      return value;
    });
    mockValue._value = value;
    mockValue.setValue = jest.fn();
    mockValue.interpolate = jest.fn(function (config) {
      var mockInterpolated = jest.fn(function () {
        return config.outputRange[0];
      });
      mockInterpolated._config = config;
      mockInterpolated._value = value;
      return mockInterpolated;
    });
    mockValue.addListener = jest.fn();
    mockValue.removeListener = jest.fn();
    mockValue.removeAllListeners = jest.fn();
    return mockValue;
  };
  return _objectSpread(_objectSpread({}, RN), {}, {
    Animated: {
      View: "Animated.View",
      Text: "Animated.Text",
      Value: createMockValue,
      timing: jest.fn(function () {
        return {
          start: jest.fn()
        };
      }),
      spring: jest.fn(function () {
        return {
          start: jest.fn()
        };
      }),
      sequence: jest.fn(function () {
        return {
          start: jest.fn()
        };
      }),
      parallel: jest.fn(function () {
        return {
          start: jest.fn()
        };
      }),
      stagger: jest.fn(function () {
        return {
          start: jest.fn()
        };
      }),
      loop: jest.fn(function () {
        return {
          start: jest.fn(),
          stop: jest.fn()
        };
      })
    }
  });
});
_getJestObj().mock("../../../services/WebRTCService", function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock("expo-linear-gradient", function () {
  return {
    LinearGradient: "LinearGradient"
  };
});
_getJestObj().mock("expo-blur", function () {
  return {
    BlurView: "BlurView"
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("react-native");
var _IncomingCallScreen = _interopRequireDefault(require("../IncomingCallScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
console.log("IncomingCallScreen imported:", typeof _IncomingCallScreen.default);
console.log("IncomingCallScreen:", _IncomingCallScreen.default);
var mockCallData = {
  callId: "test-call-id",
  matchId: "test-match-id",
  callerId: "test-caller-id",
  callerName: "Test Caller",
  callerAvatar: "https://example.com/avatar.jpg",
  callType: "voice",
  timestamp: Date.now()
};
describe("IncomingCallScreen", function () {
  var mockOnAnswer = jest.fn();
  var mockOnReject = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("should render correctly with call data", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: mockCallData,
        onAnswer: mockOnAnswer,
        onReject: mockOnReject
      })),
      getByText = _render.getByText;
    expect(getByText("Incoming Call")).toBeTruthy();
    expect(getByText("Voice Call")).toBeTruthy();
    expect(getByText("Test Caller")).toBeTruthy();
    expect(getByText("PawfectMatch")).toBeTruthy();
  });
  it("should display video call type correctly", function () {
    var videoCallData = _objectSpread(_objectSpread({}, mockCallData), {}, {
      callType: "video"
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: videoCallData,
        onAnswer: mockOnAnswer,
        onReject: mockOnReject
      })),
      getByText = _render2.getByText;
    expect(getByText("Video Call")).toBeTruthy();
  });
  it("should start vibration on mount", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
      callData: mockCallData,
      onAnswer: mockOnAnswer,
      onReject: mockOnReject
    }));
    expect(_reactNative2.Vibration.vibrate).toHaveBeenCalledWith([0, 1000, 500, 1000, 500], true);
  });
  it("should cancel vibration on unmount", function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: mockCallData,
        onAnswer: mockOnAnswer,
        onReject: mockOnReject
      })),
      unmount = _render3.unmount;
    unmount();
    expect(_reactNative2.Vibration.cancel).toHaveBeenCalled();
  });
  it("should call onAnswer when answer button is pressed", function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: mockCallData,
        onAnswer: mockOnAnswer,
        onReject: mockOnReject
      })),
      getByTestId = _render4.getByTestId;
    var answerButton = getByTestId("answer-button");
    _reactNative.fireEvent.press(answerButton);
    expect(_reactNative2.Vibration.cancel).toHaveBeenCalled();
    expect(mockOnAnswer).toHaveBeenCalled();
  });
  it("should call onReject when reject button is pressed", function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: mockCallData,
        onAnswer: mockOnAnswer,
        onReject: mockOnReject
      })),
      getByTestId = _render5.getByTestId;
    var rejectButton = getByTestId("reject-button");
    _reactNative.fireEvent.press(rejectButton);
    expect(_reactNative2.Vibration.cancel).toHaveBeenCalled();
    expect(mockOnReject).toHaveBeenCalled();
  });
  it("should render default avatar when no avatar provided", function () {
    var callDataWithoutAvatar = _objectSpread(_objectSpread({}, mockCallData), {}, {
      callerAvatar: undefined
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: callDataWithoutAvatar,
        onAnswer: mockOnAnswer,
        onReject: mockOnReject
      })),
      getByTestId = _render6.getByTestId;
    var avatar = getByTestId("caller-avatar");
    expect(avatar).toBeTruthy();
  });
  it("should handle animations correctly", (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: mockCallData,
        onAnswer: mockOnAnswer,
        onReject: mockOnReject
      })),
      getByTestId = _render7.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId("incoming-call-container")).toBeTruthy();
    });
    expect(require("react-native").Animated.loop).toHaveBeenCalled();
    expect(require("react-native").Animated.timing).toHaveBeenCalled();
  }));
  it("should format call type correctly", function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: _objectSpread(_objectSpread({}, mockCallData), {}, {
          callType: "voice"
        }),
        onAnswer: mockOnAnswer,
        onReject: mockOnReject
      })),
      rerender = _render8.rerender,
      getByText = _render8.getByText;
    expect(getByText("Voice Call")).toBeTruthy();
    rerender((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
      callData: _objectSpread(_objectSpread({}, mockCallData), {}, {
        callType: "video"
      }),
      onAnswer: mockOnAnswer,
      onReject: mockOnReject
    }));
    expect(getByText("Video Call")).toBeTruthy();
  });
  it("should render additional action buttons", function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: mockCallData,
        onAnswer: mockOnAnswer,
        onReject: mockOnReject
      })),
      getByText = _render9.getByText;
    expect(getByText("Message")).toBeTruthy();
    expect(getByText("Profile")).toBeTruthy();
  });
  it("should apply correct styles for different call states", function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: mockCallData,
        onAnswer: mockOnAnswer,
        onReject: mockOnReject
      })),
      getByTestId = _render0.getByTestId;
    var container = getByTestId("incoming-call-container");
    expect(container).toHaveStyle({
      flex: 1,
      backgroundColor: "Theme.colors.neutral[950]"
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,