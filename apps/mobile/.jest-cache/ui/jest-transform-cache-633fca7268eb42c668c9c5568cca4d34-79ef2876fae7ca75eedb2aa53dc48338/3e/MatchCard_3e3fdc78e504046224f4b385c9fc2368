cf0fea2fe17bee6123e4d2033aebffe9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatchCard = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _vectorIcons = require("@expo/vector-icons");
var _core = require("@pawfectmatch/core");
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _OptimizedImage = _interopRequireDefault(require("../OptimizedImage"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var _worklet_11137576460216_init_data = {
  code: "function anonymous() {\n  const {\n    scale,\n    opacity\n  } = this._closure;\n  return {\n    transform: [{\n      scale: scale.value\n    }],\n    opacity: opacity.value\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/matches/MatchCard.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"scale\",\"opacity\",\"_closure\",\"transform\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/matches/MatchCard.tsx\"],\"mappings\":\"AAoFyC,SAAAA,UAAA;EAAA;IAAAC,KAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC5CC,SAAS,EAAE,CAAC;MAAEH,KAAK,EAAEA,KAAK,CAACI;IAAM,CAAC,CAAC;IACnCH,OAAO,EAAEA,OAAO,CAACG;EACnB,CAAC;AAAA\",\"ignoreList\":[]}"
};
function MatchCardBase(_ref) {
  var match = _ref.match,
    onPress = _ref.onPress,
    onUnmatch = _ref.onUnmatch,
    onArchive = _ref.onArchive,
    onReport = _ref.onReport;
  var scale = (0, _reactNativeReanimated.useSharedValue)(1);
  var opacity = (0, _reactNativeReanimated.useSharedValue)(1);
  var handlePress = function handlePress() {
    void Haptics.selectionAsync();
    onPress == null ? void 0 : onPress();
  };
  var handlePressIn = function handlePressIn() {
    scale.value = (0, _reactNativeReanimated.withSpring)(0.95, {
      stiffness: 300,
      damping: 20
    });
    opacity.value = (0, _reactNativeReanimated.withTiming)(0.8, {
      duration: 100
    });
  };
  var handlePressOut = function handlePressOut() {
    scale.value = (0, _reactNativeReanimated.withSpring)(1, {
      stiffness: 300,
      damping: 20
    });
    opacity.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 100
    });
  };
  var handleUnmatch = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        void Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);
        yield onUnmatch == null ? void 0 : onUnmatch(match._id, match.petName);
      } catch (error) {
        _core.logger.error("Error unmatching:", {
          error: error
        });
      }
    });
    return function handleUnmatch() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleArchive = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        void Haptics.selectionAsync();
        yield onArchive == null ? void 0 : onArchive(match._id, match.petName);
      } catch (error) {
        _core.logger.error("Error archiving:", {
          error: error
        });
      }
    });
    return function handleArchive() {
      return _ref3.apply(this, arguments);
    };
  }();
  var handleReport = function handleReport() {
    _reactNative.Alert.alert("Report Match", `Report this match with ${match.petName}?`, [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Report",
      style: "destructive",
      onPress: function onPress() {
        void Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);
        onReport == null ? void 0 : onReport(match._id, match.petName);
      }
    }]);
  };
  var animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -3, -27];
    var _f = function _f() {
      return {
        transform: [{
          scale: scale.value
        }],
        opacity: opacity.value
      };
    };
    _f._closure = {
      scale: scale,
      opacity: opacity
    };
    _f.__initData = _worklet_11137576460216_init_data;
    _f.__workletHash = 11137576460216;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var petPhoto = match.petPhoto || "";
  var lastMessage = match.lastMessage;
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    style: animatedStyle,
    children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.card,
      activeOpacity: 0.92,
      onPress: handlePress,
      onPressIn: handlePressIn,
      onPressOut: handlePressOut,
      accessibilityLabel: `View match with ${match.petName}`,
      children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
        colors: ["#fceabb", "#f8b500", "Theme.colors.primary[500]", "#a21caf"],
        style: styles.gradient,
        children: [(0, _jsxRuntime.jsx)(_OptimizedImage.default, {
          uri: petPhoto,
          style: styles.photo,
          containerStyle: {},
          accessibilityLabel: `${match.petName} photo`,
          priority: "normal",
          onLoadStart: function onLoadStart() {},
          onLoadEnd: function onLoadEnd() {},
          onError: function onError() {}
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.info,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.name,
            children: match.petName
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.meta,
            children: [match.petBreed, ", ", match.petAge, " years old"]
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.owner,
            children: "Owner information"
          }), lastMessage ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.lastMessage,
            numberOfLines: 1,
            children: lastMessage.content
          }) : null, (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.matchedAt,
            children: ["Matched ", new Date(match.matchedAt).toLocaleDateString()]
          })]
        }), (onUnmatch || onArchive || onReport) && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.actions,
          children: [onReport && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: _reactNative.StyleSheet.flatten([styles.actionButton, styles.reportButton]),
            onPress: handleReport,
            accessibilityLabel: "Report match",
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "flag-outline",
              size: 20,
              color: "Theme.colors.status.warning"
            })
          }), onArchive && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: styles.actionButton,
            onPress: handleArchive,
            accessibilityLabel: "Archive match",
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "archive-outline",
              size: 20,
              color: "#6b21a8"
            })
          }), onUnmatch && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: _reactNative.StyleSheet.flatten([styles.actionButton, styles.unmatchButton]),
            onPress: handleUnmatch,
            accessibilityLabel: "Unmatch",
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "close-circle-outline",
              size: 20,
              color: "#dc2626"
            })
          })]
        })]
      })
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  card: {
    borderRadius: 24,
    margin: 12,
    shadowColor: "Theme.colors.primary[500]",
    shadowOpacity: 0.15,
    shadowRadius: 16,
    elevation: 8
  },
  gradient: {
    borderRadius: 24,
    overflow: "hidden",
    flexDirection: "row",
    alignItems: "center",
    padding: 16
  },
  photo: {
    width: 80,
    height: 80,
    borderRadius: 16,
    backgroundColor: "#f3e8ff",
    marginRight: 16
  },
  info: {
    flex: 1
  },
  name: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#a21caf"
  },
  meta: {
    fontSize: 15,
    color: "#6b21a8",
    marginVertical: 2
  },
  owner: {
    fontSize: 14,
    color: "#7c3aed",
    marginBottom: 2
  },
  lastMessage: {
    fontSize: 13,
    color: "Theme.colors.neutral[500]",
    marginBottom: 2
  },
  matchedAt: {
    fontSize: 12,
    color: "#a21caf",
    marginTop: 4
  },
  actions: {
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    marginLeft: 8
  },
  actionButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: "rgba(255, 255, 255, 0.2)",
    alignItems: "center",
    justifyContent: "center",
    marginVertical: 4
  },
  unmatchButton: {
    backgroundColor: "rgba(220, 38, 38, 0.1)"
  },
  reportButton: {
    backgroundColor: "rgba(245, 158, 11, 0.1)"
  }
});
var MatchCard = exports.MatchCard = (0, _react.memo)(MatchCardBase);
MatchCard.displayName = "MatchCard";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdmVjdG9ySWNvbnMiLCJyZXF1aXJlIiwiX2NvcmUiLCJfZXhwb0xpbmVhckdyYWRpZW50IiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmVSZWFuaW1hdGVkIiwiSGFwdGljcyIsIl9PcHRpbWl6ZWRJbWFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX3dvcmtsZXRfMTExMzc1NzY0NjAyMTZfaW5pdF9kYXRhIiwiY29kZSIsImxvY2F0aW9uIiwic291cmNlTWFwIiwiTWF0Y2hDYXJkQmFzZSIsIl9yZWYiLCJtYXRjaCIsIm9uUHJlc3MiLCJvblVubWF0Y2giLCJvbkFyY2hpdmUiLCJvblJlcG9ydCIsInNjYWxlIiwidXNlU2hhcmVkVmFsdWUiLCJvcGFjaXR5IiwiaGFuZGxlUHJlc3MiLCJzZWxlY3Rpb25Bc3luYyIsImhhbmRsZVByZXNzSW4iLCJ2YWx1ZSIsIndpdGhTcHJpbmciLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwid2l0aFRpbWluZyIsImR1cmF0aW9uIiwiaGFuZGxlUHJlc3NPdXQiLCJoYW5kbGVVbm1hdGNoIiwiX3JlZjIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJub3RpZmljYXRpb25Bc3luYyIsIk5vdGlmaWNhdGlvbkZlZWRiYWNrVHlwZSIsIldhcm5pbmciLCJfaWQiLCJwZXROYW1lIiwiZXJyb3IiLCJsb2dnZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsImhhbmRsZUFyY2hpdmUiLCJfcmVmMyIsImhhbmRsZVJlcG9ydCIsIkFsZXJ0IiwiYWxlcnQiLCJ0ZXh0Iiwic3R5bGUiLCJhbmltYXRlZFN0eWxlIiwidXNlQW5pbWF0ZWRTdHlsZSIsIl9lIiwiZ2xvYmFsIiwiRXJyb3IiLCJfZiIsInRyYW5zZm9ybSIsIl9jbG9zdXJlIiwiX19pbml0RGF0YSIsIl9fd29ya2xldEhhc2giLCJfX3N0YWNrRGV0YWlscyIsIl9fdmVyc2lvbiIsInBldFBob3RvIiwibGFzdE1lc3NhZ2UiLCJqc3giLCJWaWV3IiwiY2hpbGRyZW4iLCJUb3VjaGFibGVPcGFjaXR5Iiwic3R5bGVzIiwiY2FyZCIsImFjdGl2ZU9wYWNpdHkiLCJvblByZXNzSW4iLCJvblByZXNzT3V0IiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwianN4cyIsIkxpbmVhckdyYWRpZW50IiwiY29sb3JzIiwiZ3JhZGllbnQiLCJ1cmkiLCJwaG90byIsImNvbnRhaW5lclN0eWxlIiwicHJpb3JpdHkiLCJvbkxvYWRTdGFydCIsIm9uTG9hZEVuZCIsIm9uRXJyb3IiLCJpbmZvIiwiVGV4dCIsIm5hbWUiLCJtZXRhIiwicGV0QnJlZWQiLCJwZXRBZ2UiLCJvd25lciIsIm51bWJlck9mTGluZXMiLCJjb250ZW50IiwibWF0Y2hlZEF0IiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImFjdGlvbnMiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImFjdGlvbkJ1dHRvbiIsInJlcG9ydEJ1dHRvbiIsIklvbmljb25zIiwic2l6ZSIsImNvbG9yIiwidW5tYXRjaEJ1dHRvbiIsImNyZWF0ZSIsImJvcmRlclJhZGl1cyIsIm1hcmdpbiIsInNoYWRvd0NvbG9yIiwic2hhZG93T3BhY2l0eSIsInNoYWRvd1JhZGl1cyIsImVsZXZhdGlvbiIsIm92ZXJmbG93IiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJwYWRkaW5nIiwid2lkdGgiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJtYXJnaW5SaWdodCIsImZsZXgiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJtYXJnaW5WZXJ0aWNhbCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImp1c3RpZnlDb250ZW50IiwibWFyZ2luTGVmdCIsIk1hdGNoQ2FyZCIsImV4cG9ydHMiLCJtZW1vIiwiZGlzcGxheU5hbWUiXSwic291cmNlcyI6WyJNYXRjaENhcmQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljb25zIH0gZnJvbSBcIkBleHBvL3ZlY3Rvci1pY29uc1wiO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIkBwYXdmZWN0bWF0Y2gvY29yZVwiO1xuaW1wb3J0IHsgTGluZWFyR3JhZGllbnQgfSBmcm9tIFwiZXhwby1saW5lYXItZ3JhZGllbnRcIjtcbmltcG9ydCBSZWFjdCwgeyBtZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBBbGVydCwgU3R5bGVTaGVldCwgVGV4dCwgVG91Y2hhYmxlT3BhY2l0eSwgVmlldyB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBBbmltYXRlZCwge1xuICB1c2VBbmltYXRlZFN0eWxlLFxuICB1c2VTaGFyZWRWYWx1ZSxcbiAgd2l0aFNwcmluZyxcbiAgd2l0aFRpbWluZyxcbn0gZnJvbSBcInJlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkXCI7XG5cbmltcG9ydCB0eXBlIHsgTWF0Y2ggfSBmcm9tIFwiLi4vLi4vaG9va3MvdXNlTWF0Y2hlc0RhdGFcIjtcbmltcG9ydCAqIGFzIEhhcHRpY3MgZnJvbSBcImV4cG8taGFwdGljc1wiO1xuaW1wb3J0IE9wdGltaXplZEltYWdlIGZyb20gXCIuLi9PcHRpbWl6ZWRJbWFnZVwiO1xuaW1wb3J0IHsgVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZS91bmlmaWVkLXRoZW1lJztcblxuaW50ZXJmYWNlIE1hdGNoQ2FyZFByb3BzIHtcbiAgbWF0Y2g6IE1hdGNoO1xuICBvblByZXNzPzogKCkgPT4gdm9pZDtcbiAgb25Vbm1hdGNoPzogKG1hdGNoSWQ6IHN0cmluZywgcGV0TmFtZTogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBvbkFyY2hpdmU/OiAobWF0Y2hJZDogc3RyaW5nLCBwZXROYW1lOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XG4gIG9uUmVwb3J0PzogKG1hdGNoSWQ6IHN0cmluZywgcGV0TmFtZTogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5mdW5jdGlvbiBNYXRjaENhcmRCYXNlKHtcbiAgbWF0Y2gsXG4gIG9uUHJlc3MsXG4gIG9uVW5tYXRjaCxcbiAgb25BcmNoaXZlLFxuICBvblJlcG9ydCxcbn06IE1hdGNoQ2FyZFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBzY2FsZSA9IHVzZVNoYXJlZFZhbHVlKDEpO1xuICBjb25zdCBvcGFjaXR5ID0gdXNlU2hhcmVkVmFsdWUoMSk7XG5cbiAgY29uc3QgaGFuZGxlUHJlc3MgPSAoKSA9PiB7XG4gICAgdm9pZCBIYXB0aWNzLnNlbGVjdGlvbkFzeW5jKCk7XG4gICAgb25QcmVzcz8uKCk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUHJlc3NJbiA9ICgpID0+IHtcbiAgICBzY2FsZS52YWx1ZSA9IHdpdGhTcHJpbmcoMC45NSwgeyBzdGlmZm5lc3M6IDMwMCwgZGFtcGluZzogMjAgfSk7XG4gICAgb3BhY2l0eS52YWx1ZSA9IHdpdGhUaW1pbmcoMC44LCB7IGR1cmF0aW9uOiAxMDAgfSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUHJlc3NPdXQgPSAoKSA9PiB7XG4gICAgc2NhbGUudmFsdWUgPSB3aXRoU3ByaW5nKDEsIHsgc3RpZmZuZXNzOiAzMDAsIGRhbXBpbmc6IDIwIH0pO1xuICAgIG9wYWNpdHkudmFsdWUgPSB3aXRoVGltaW5nKDEsIHsgZHVyYXRpb246IDEwMCB9KTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVVbm1hdGNoID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICB2b2lkIEhhcHRpY3Mubm90aWZpY2F0aW9uQXN5bmMoSGFwdGljcy5Ob3RpZmljYXRpb25GZWVkYmFja1R5cGUuV2FybmluZyk7XG4gICAgICBhd2FpdCBvblVubWF0Y2g/LihtYXRjaC5faWQsIG1hdGNoLnBldE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoXCJFcnJvciB1bm1hdGNoaW5nOlwiLCB7IGVycm9yIH0pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVBcmNoaXZlID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICB2b2lkIEhhcHRpY3Muc2VsZWN0aW9uQXN5bmMoKTtcbiAgICAgIGF3YWl0IG9uQXJjaGl2ZT8uKG1hdGNoLl9pZCwgbWF0Y2gucGV0TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIGFyY2hpdmluZzpcIiwgeyBlcnJvciB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUmVwb3J0ID0gKCkgPT4ge1xuICAgIEFsZXJ0LmFsZXJ0KFwiUmVwb3J0IE1hdGNoXCIsIGBSZXBvcnQgdGhpcyBtYXRjaCB3aXRoICR7bWF0Y2gucGV0TmFtZX0/YCwgW1xuICAgICAgeyB0ZXh0OiBcIkNhbmNlbFwiLCBzdHlsZTogXCJjYW5jZWxcIiB9LFxuICAgICAge1xuICAgICAgICB0ZXh0OiBcIlJlcG9ydFwiLFxuICAgICAgICBzdHlsZTogXCJkZXN0cnVjdGl2ZVwiLFxuICAgICAgICBvblByZXNzOiAoKSA9PiB7XG4gICAgICAgICAgdm9pZCBIYXB0aWNzLm5vdGlmaWNhdGlvbkFzeW5jKFxuICAgICAgICAgICAgSGFwdGljcy5Ob3RpZmljYXRpb25GZWVkYmFja1R5cGUuV2FybmluZyxcbiAgICAgICAgICApO1xuICAgICAgICAgIG9uUmVwb3J0Py4obWF0Y2guX2lkLCBtYXRjaC5wZXROYW1lKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSk7XG4gIH07XG5cbiAgY29uc3QgYW5pbWF0ZWRTdHlsZSA9IHVzZUFuaW1hdGVkU3R5bGUoKCkgPT4gKHtcbiAgICB0cmFuc2Zvcm06IFt7IHNjYWxlOiBzY2FsZS52YWx1ZSB9XSxcbiAgICBvcGFjaXR5OiBvcGFjaXR5LnZhbHVlLFxuICB9KSk7XG5cbiAgLy8gVXNlIHNpbXBsaWZpZWQgbWF0Y2ggZGF0YVxuICBjb25zdCBwZXRQaG90byA9IG1hdGNoLnBldFBob3RvIHx8IFwiXCI7XG4gIGNvbnN0IGxhc3RNZXNzYWdlID0gbWF0Y2gubGFzdE1lc3NhZ2U7XG5cbiAgcmV0dXJuIChcbiAgICA8QW5pbWF0ZWQuVmlldyBzdHlsZT17YW5pbWF0ZWRTdHlsZX0+XG4gICAgICA8VG91Y2hhYmxlT3BhY2l0eVxuICAgICAgICBzdHlsZT17c3R5bGVzLmNhcmR9XG4gICAgICAgIGFjdGl2ZU9wYWNpdHk9ezAuOTJ9XG4gICAgICAgIG9uUHJlc3M9e2hhbmRsZVByZXNzfVxuICAgICAgICBvblByZXNzSW49e2hhbmRsZVByZXNzSW59XG4gICAgICAgIG9uUHJlc3NPdXQ9e2hhbmRsZVByZXNzT3V0fVxuICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2BWaWV3IG1hdGNoIHdpdGggJHttYXRjaC5wZXROYW1lfWB9XG4gICAgICA+XG4gICAgICAgIDxMaW5lYXJHcmFkaWVudFxuICAgICAgICAgIGNvbG9ycz17W1wiI2ZjZWFiYlwiLCBcIiNmOGI1MDBcIiwgXCJUaGVtZS5jb2xvcnMucHJpbWFyeVs1MDBdXCIsIFwiI2EyMWNhZlwiXX1cbiAgICAgICAgICBzdHlsZT17c3R5bGVzLmdyYWRpZW50fVxuICAgICAgICA+XG4gICAgICAgICAgPE9wdGltaXplZEltYWdlXG4gICAgICAgICAgICB1cmk9e3BldFBob3RvfVxuICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5waG90b31cbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlPXt7fX1cbiAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD17YCR7bWF0Y2gucGV0TmFtZX0gcGhvdG9gfVxuICAgICAgICAgICAgcHJpb3JpdHk9XCJub3JtYWxcIlxuICAgICAgICAgICAgb25Mb2FkU3RhcnQ9eygpID0+IHt9fVxuICAgICAgICAgICAgb25Mb2FkRW5kPXsoKSA9PiB7fX1cbiAgICAgICAgICAgIG9uRXJyb3I9eygpID0+IHt9fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5pbmZvfT5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubmFtZX0+e21hdGNoLnBldE5hbWV9PC9UZXh0PlxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5tZXRhfT5cbiAgICAgICAgICAgICAge21hdGNoLnBldEJyZWVkfSwge21hdGNoLnBldEFnZX0geWVhcnMgb2xkXG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLm93bmVyfT5Pd25lciBpbmZvcm1hdGlvbjwvVGV4dD5cbiAgICAgICAgICAgIHtsYXN0TWVzc2FnZSA/IChcbiAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5sYXN0TWVzc2FnZX0gbnVtYmVyT2ZMaW5lcz17MX0+XG4gICAgICAgICAgICAgICAge2xhc3RNZXNzYWdlLmNvbnRlbnR9XG4gICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5tYXRjaGVkQXR9PlxuICAgICAgICAgICAgICBNYXRjaGVkIHtuZXcgRGF0ZShtYXRjaC5tYXRjaGVkQXQpLnRvTG9jYWxlRGF0ZVN0cmluZygpfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICB7KG9uVW5tYXRjaCB8fCBvbkFyY2hpdmUgfHwgb25SZXBvcnQpICYmIChcbiAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuYWN0aW9uc30+XG4gICAgICAgICAgICAgIHtvblJlcG9ydCAmJiAoXG4gICAgICAgICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuYWN0aW9uQnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMucmVwb3J0QnV0dG9uLFxuICAgICAgICAgICAgICAgICAgXSl9XG4gICAgICAgICAgICAgICAgICBvblByZXNzPXtoYW5kbGVSZXBvcnR9XG4gICAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9XCJSZXBvcnQgbWF0Y2hcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJb25pY29ucyBuYW1lPVwiZmxhZy1vdXRsaW5lXCIgc2l6ZT17MjB9IGNvbG9yPVwiVGhlbWUuY29sb3JzLnN0YXR1cy53YXJuaW5nXCIgLz5cbiAgICAgICAgICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtvbkFyY2hpdmUgJiYgKFxuICAgICAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmFjdGlvbkJ1dHRvbn1cbiAgICAgICAgICAgICAgICAgIG9uUHJlc3M9e2hhbmRsZUFyY2hpdmV9XG4gICAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9XCJBcmNoaXZlIG1hdGNoXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8SW9uaWNvbnMgbmFtZT1cImFyY2hpdmUtb3V0bGluZVwiIHNpemU9ezIwfSBjb2xvcj1cIiM2YjIxYThcIiAvPlxuICAgICAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge29uVW5tYXRjaCAmJiAoXG4gICAgICAgICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuYWN0aW9uQnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMudW5tYXRjaEJ1dHRvbixcbiAgICAgICAgICAgICAgICAgIF0pfVxuICAgICAgICAgICAgICAgICAgb25QcmVzcz17aGFuZGxlVW5tYXRjaH1cbiAgICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD1cIlVubWF0Y2hcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJb25pY29uc1xuICAgICAgICAgICAgICAgICAgICBuYW1lPVwiY2xvc2UtY2lyY2xlLW91dGxpbmVcIlxuICAgICAgICAgICAgICAgICAgICBzaXplPXsyMH1cbiAgICAgICAgICAgICAgICAgICAgY29sb3I9XCIjZGMyNjI2XCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTGluZWFyR3JhZGllbnQ+XG4gICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgPC9BbmltYXRlZC5WaWV3PlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNhcmQ6IHtcbiAgICBib3JkZXJSYWRpdXM6IDI0LFxuICAgIG1hcmdpbjogMTIsXG4gICAgc2hhZG93Q29sb3I6IFwiVGhlbWUuY29sb3JzLnByaW1hcnlbNTAwXVwiLFxuICAgIHNoYWRvd09wYWNpdHk6IDAuMTUsXG4gICAgc2hhZG93UmFkaXVzOiAxNixcbiAgICBlbGV2YXRpb246IDgsXG4gIH0sXG4gIGdyYWRpZW50OiB7XG4gICAgYm9yZGVyUmFkaXVzOiAyNCxcbiAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgcGFkZGluZzogMTYsXG4gIH0sXG4gIHBob3RvOiB7XG4gICAgd2lkdGg6IDgwLFxuICAgIGhlaWdodDogODAsXG4gICAgYm9yZGVyUmFkaXVzOiAxNixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2YzZThmZlwiLFxuICAgIG1hcmdpblJpZ2h0OiAxNixcbiAgfSxcbiAgaW5mbzoge1xuICAgIGZsZXg6IDEsXG4gIH0sXG4gIG5hbWU6IHtcbiAgICBmb250U2l6ZTogMjAsXG4gICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gICAgY29sb3I6IFwiI2EyMWNhZlwiLFxuICB9LFxuICBtZXRhOiB7XG4gICAgZm9udFNpemU6IDE1LFxuICAgIGNvbG9yOiBcIiM2YjIxYThcIixcbiAgICBtYXJnaW5WZXJ0aWNhbDogMixcbiAgfSxcbiAgb3duZXI6IHtcbiAgICBmb250U2l6ZTogMTQsXG4gICAgY29sb3I6IFwiIzdjM2FlZFwiLFxuICAgIG1hcmdpbkJvdHRvbTogMixcbiAgfSxcbiAgbGFzdE1lc3NhZ2U6IHtcbiAgICBmb250U2l6ZTogMTMsXG4gICAgY29sb3I6IFwiVGhlbWUuY29sb3JzLm5ldXRyYWxbNTAwXVwiLFxuICAgIG1hcmdpbkJvdHRvbTogMixcbiAgfSxcbiAgbWF0Y2hlZEF0OiB7XG4gICAgZm9udFNpemU6IDEyLFxuICAgIGNvbG9yOiBcIiNhMjFjYWZcIixcbiAgICBtYXJnaW5Ub3A6IDQsXG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgbWFyZ2luTGVmdDogOCxcbiAgfSxcbiAgYWN0aW9uQnV0dG9uOiB7XG4gICAgd2lkdGg6IDM2LFxuICAgIGhlaWdodDogMzYsXG4gICAgYm9yZGVyUmFkaXVzOiAxOCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICBtYXJnaW5WZXJ0aWNhbDogNCxcbiAgfSxcbiAgdW5tYXRjaEJ1dHRvbjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDIyMCwgMzgsIDM4LCAwLjEpXCIsXG4gIH0sXG4gIHJlcG9ydEJ1dHRvbjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI0NSwgMTU4LCAxMSwgMC4xKVwiLFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBNYXRjaENhcmQgPSBtZW1vKE1hdGNoQ2FyZEJhc2UpO1xuTWF0Y2hDYXJkLmRpc3BsYXlOYW1lID0gXCJNYXRjaENhcmRcIjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxtQkFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBQyx1QkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQUssWUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sc0JBQUEsR0FBQUYsdUJBQUEsQ0FBQUosT0FBQTtBQVFBLElBQUFPLE9BQUEsR0FBQUgsdUJBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFRLGVBQUEsR0FBQUMsc0JBQUEsQ0FBQVQsT0FBQTtBQUErQyxJQUFBVSxXQUFBLEdBQUFWLE9BQUE7QUFBQSxTQUFBSSx3QkFBQU8sQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQVQsdUJBQUEsWUFBQUEsd0JBQUFPLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJB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