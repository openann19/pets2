56d4119e32f9d6fe14568d25feebbaf7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var TurboModuleRegistry = _interopRequireWildcard(require("../../TurboModule/TurboModuleRegistry"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
  getConstants: function getConstants() {
    if (constants == null) {
      constants = NativeModule.getConstants();
    }
    return constants;
  },
  setColor: function setColor(color, animated) {
    NativeModule.setColor(color, animated);
  },
  setTranslucent: function setTranslucent(translucent) {
    NativeModule.setTranslucent(translucent);
  },
  setStyle: function setStyle(statusBarStyle) {
    NativeModule.setStyle(statusBarStyle);
  },
  setHidden: function setHidden(hidden) {
    NativeModule.setHidden(hidden);
  }
};
var _default = exports.default = NativeStatusBarManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUdXJib01vZHVsZVJlZ2lzdHJ5IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJOYXRpdmVNb2R1bGUiLCJnZXRFbmZvcmNpbmciLCJjb25zdGFudHMiLCJOYXRpdmVTdGF0dXNCYXJNYW5hZ2VyIiwiZ2V0Q29uc3RhbnRzIiwic2V0Q29sb3IiLCJjb2xvciIsImFuaW1hdGVkIiwic2V0VHJhbnNsdWNlbnQiLCJ0cmFuc2x1Y2VudCIsInNldFN0eWxlIiwic3RhdHVzQmFyU3R5bGUiLCJzZXRIaWRkZW4iLCJoaWRkZW4iLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJOYXRpdmVTdGF0dXNCYXJNYW5hZ2VyQW5kcm9pZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1R1cmJvTW9kdWxlfSBmcm9tICcuLi8uLi9UdXJib01vZHVsZS9SQ1RFeHBvcnQnO1xuXG5pbXBvcnQgKiBhcyBUdXJib01vZHVsZVJlZ2lzdHJ5IGZyb20gJy4uLy4uL1R1cmJvTW9kdWxlL1R1cmJvTW9kdWxlUmVnaXN0cnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWMgZXh0ZW5kcyBUdXJib01vZHVsZSB7XG4gICtnZXRDb25zdGFudHM6ICgpID0+IHt8XG4gICAgK0hFSUdIVDogbnVtYmVyLFxuICAgICtERUZBVUxUX0JBQ0tHUk9VTkRfQ09MT1I6IG51bWJlcixcbiAgfH07XG4gICtzZXRDb2xvcjogKGNvbG9yOiBudW1iZXIsIGFuaW1hdGVkOiBib29sZWFuKSA9PiB2b2lkO1xuICArc2V0VHJhbnNsdWNlbnQ6ICh0cmFuc2x1Y2VudDogYm9vbGVhbikgPT4gdm9pZDtcblxuICAvKipcbiAgICogIC0gc3RhdHVzQmFyU3R5bGVzIGNhbiBiZTpcbiAgICogICAgLSAnZGVmYXVsdCdcbiAgICogICAgLSAnZGFyay1jb250ZW50J1xuICAgKi9cbiAgK3NldFN0eWxlOiAoc3RhdHVzQmFyU3R5bGU/OiA/c3RyaW5nKSA9PiB2b2lkO1xuICArc2V0SGlkZGVuOiAoaGlkZGVuOiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5jb25zdCBOYXRpdmVNb2R1bGUgPSBUdXJib01vZHVsZVJlZ2lzdHJ5LmdldEVuZm9yY2luZzxTcGVjPignU3RhdHVzQmFyTWFuYWdlcicpO1xubGV0IGNvbnN0YW50cyA9IG51bGw7XG5cbmNvbnN0IE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXIgPSB7XG4gIGdldENvbnN0YW50cygpOiB7fFxuICAgICtIRUlHSFQ6IG51bWJlcixcbiAgICArREVGQVVMVF9CQUNLR1JPVU5EX0NPTE9SPzogbnVtYmVyLFxuICB8fSB7XG4gICAgaWYgKGNvbnN0YW50cyA9PSBudWxsKSB7XG4gICAgICBjb25zdGFudHMgPSBOYXRpdmVNb2R1bGUuZ2V0Q29uc3RhbnRzKCk7XG4gICAgfVxuICAgIHJldHVybiBjb25zdGFudHM7XG4gIH0sXG5cbiAgc2V0Q29sb3IoY29sb3I6IG51bWJlciwgYW5pbWF0ZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBOYXRpdmVNb2R1bGUuc2V0Q29sb3IoY29sb3IsIGFuaW1hdGVkKTtcbiAgfSxcblxuICBzZXRUcmFuc2x1Y2VudCh0cmFuc2x1Y2VudDogYm9vbGVhbik6IHZvaWQge1xuICAgIE5hdGl2ZU1vZHVsZS5zZXRUcmFuc2x1Y2VudCh0cmFuc2x1Y2VudCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqICAtIHN0YXR1c0JhclN0eWxlcyBjYW4gYmU6XG4gICAqICAgIC0gJ2RlZmF1bHQnXG4gICAqICAgIC0gJ2RhcmstY29udGVudCdcbiAgICovXG4gIHNldFN0eWxlKHN0YXR1c0JhclN0eWxlPzogP3N0cmluZyk6IHZvaWQge1xuICAgIE5hdGl2ZU1vZHVsZS5zZXRTdHlsZShzdGF0dXNCYXJTdHlsZSk7XG4gIH0sXG5cbiAgc2V0SGlkZGVuKGhpZGRlbjogYm9vbGVhbik6IHZvaWQge1xuICAgIE5hdGl2ZU1vZHVsZS5zZXRIaWRkZW4oaGlkZGVuKTtcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQVlBLElBQUFBLG1CQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBNkUsU0FBQUQsd0JBQUFFLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFKLHVCQUFBLFlBQUFBLHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQW1CN0UsSUFBTW1CLFlBQVksR0FBR3ZCLG1CQUFtQixDQUFDd0IsWUFBWSxDQUFPLGtCQUFrQixDQUFDO0FBQy9FLElBQUlDLFNBQVMsR0FBRyxJQUFJO0FBRXBCLElBQU1DLHNCQUFzQixHQUFHO0VBQzdCQyxZQUFZLFdBQVpBLFlBQVlBLENBQUEsRUFHVDtJQUNELElBQUlGLFNBQVMsSUFBSSxJQUFJLEVBQUU7TUFDckJBLFNBQVMsR0FBR0YsWUFBWSxDQUFDSSxZQUFZLENBQUMsQ0FBQztJQUN6QztJQUNBLE9BQU9GLFNBQVM7RUFDbEIsQ0FBQztFQUVERyxRQUFRLFdBQVJBLFFBQVFBLENBQUNDLEtBQWEsRUFBRUMsUUFBaUIsRUFBUTtJQUMvQ1AsWUFBWSxDQUFDSyxRQUFRLENBQUNDLEtBQUssRUFBRUMsUUFBUSxDQUFDO0VBQ3hDLENBQUM7RUFFREMsY0FBYyxXQUFkQSxjQUFjQSxDQUFDQyxXQUFvQixFQUFRO0lBQ3pDVCxZQUFZLENBQUNRLGNBQWMsQ0FBQ0MsV0FBVyxDQUFDO0VBQzFDLENBQUM7RUFPREMsUUFBUSxXQUFSQSxRQUFRQSxDQUFDQyxjQUF3QixFQUFRO0lBQ3ZDWCxZQUFZLENBQUNVLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDO0VBQ3ZDLENBQUM7RUFFREMsU0FBUyxXQUFUQSxTQUFTQSxDQUFDQyxNQUFlLEVBQVE7SUFDL0JiLFlBQVksQ0FBQ1ksU0FBUyxDQUFDQyxNQUFNLENBQUM7RUFDaEM7QUFDRixDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUF6QixPQUFBLEdBRWFhLHNCQUFzQiIsImlnbm9yZUxpc3QiOltdfQ==