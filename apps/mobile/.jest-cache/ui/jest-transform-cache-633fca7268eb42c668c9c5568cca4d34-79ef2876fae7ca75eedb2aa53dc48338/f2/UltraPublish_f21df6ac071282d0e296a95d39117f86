cd11690b96b96946dfa7b5e15be5df26
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exportUltraVariants = exportUltraVariants;
exports.generateTrioCrops = generateTrioCrops;
exports.previewUltraVariants = previewUltraVariants;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _AutoCropEngine = require("./AutoCropEngine");
var _QualityTargets = require("./QualityTargets");
var _SuperRes = require("./SuperRes");
var _TiledUpscaler = require("./TiledUpscaler");
var _Unsharp = require("./Unsharp");
var _QualityScore = require("./QualityScore");
var _logger = require("../services/logger");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var PAD = {
  tight: 0.06,
  medium: 0.12,
  loose: 0.2
};
function computeCropForRatio(focus, imgW, imgH, ratio, padPct) {
  var ratioToNumber = function ratioToNumber(r) {
    if (r === "FREE") return NaN;
    var parts = r.split(":");
    if (parts.length !== 2) return NaN;
    var a = Number(parts[0]);
    var b = Number(parts[1]);
    if (!a || !b || isNaN(a) || isNaN(b)) return NaN;
    return a / b;
  };
  var padRect = function padRect(r, imgWidth, imgHeight, pad) {
    var clamp = function clamp(v, min, max) {
      return Math.max(min, Math.min(max, v));
    };
    var padX = r.width * pad;
    var padY = r.height * pad;
    var x = clamp(r.x - padX, 0, imgWidth);
    var y = clamp(r.y - padY, 0, imgHeight);
    var width = clamp(r.width + padX * 2, 1, imgWidth - x);
    var height = clamp(r.height + padY * 2, 1, imgHeight - y);
    return {
      x: x,
      y: y,
      width: width,
      height: height
    };
  };
  var ar = ratioToNumber(ratio);
  var padded = padRect(focus, imgW, imgH, padPct);
  var cx = padded.x + padded.width / 2;
  var cy = padded.y + padded.height / 2;
  var width;
  var height;
  var focusAR = padded.width / padded.height;
  if (isNaN(ar)) {
    width = padded.width;
    height = padded.height;
  } else if (focusAR >= ar) {
    width = padded.width;
    height = width / ar;
  } else {
    height = padded.height;
    width = height * ar;
  }
  width = Math.min(width, imgW);
  height = Math.min(height, imgH);
  var clamp = function clamp(v, min, max) {
    return Math.max(min, Math.min(max, v));
  };
  var x = cx - width / 2;
  var y = cy - height / 2;
  x = clamp(x, 0, imgW - width);
  y = clamp(y, 0, imgH - height);
  return {
    x: x,
    y: y,
    width: width,
    height: height
  };
}
function generateTrioCrops(_x, _x2, _x3) {
  return _generateTrioCrops.apply(this, arguments);
}
function _generateTrioCrops() {
  _generateTrioCrops = (0, _asyncToGenerator2.default)(function* (uri, ratio, detection) {
    var focus = detection.focus,
      size = detection.size;
    var crops = [];
    for (var kind of ["tight", "medium", "loose"]) {
      var padPct = PAD[kind];
      var crop = computeCropForRatio(focus, size.w, size.h, ratio, padPct);
      crops.push({
        kind: kind,
        crop: crop
      });
    }
    return crops;
  });
  return _generateTrioCrops.apply(this, arguments);
}
function exportUltraVariants(_x4) {
  return _exportUltraVariants.apply(this, arguments);
}
function _exportUltraVariants() {
  _exportUltraVariants = (0, _asyncToGenerator2.default)(function* (uri) {
    var ratios = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _QualityTargets.DEFAULT_RATIOS;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var onProgress = options.onProgress,
      _options$maxConcurren = options.maxConcurrency,
      maxConcurrency = _options$maxConcurren === void 0 ? 1 : _options$maxConcurren,
      sharpen = options.sharpen,
      _options$tiled = options.tiled,
      tiled = _options$tiled === void 0 ? false : _options$tiled,
      _options$autoPickBest = options.autoPickBestPerRatio,
      autoPickBestPerRatio = _options$autoPickBest === void 0 ? false : _options$autoPickBest,
      _options$quality = options.quality,
      quality = _options$quality === void 0 ? 1 : _options$quality;
    var detection = yield _AutoCropEngine.AutoCropEngine.detect(uri, {
      eyeWeight: 0.6,
      padPct: 0.16
    });
    if (!detection) {
      throw new Error("Failed to detect subject focus");
    }
    var allVariants = [];
    var completed = 0;
    var total = ratios.length * 3;
    var _loop = function* _loop() {
      var target = _QualityTargets.QualityTargets[ratio];
      var trios = yield generateTrioCrops(uri, ratio, detection);
      var candidates = [];
      for (var trio of trios) {
        try {
          var croppedUri = yield _AutoCropEngine.AutoCropEngine.applyCrop(uri, trio.crop, quality);
          var upscaledUri = void 0;
          if (tiled) {
            upscaledUri = yield (0, _TiledUpscaler.tileUpscaleAuto)(croppedUri, {
              targetW: target.minW,
              targetH: target.minH,
              quality: quality
            });
          } else {
            upscaledUri = yield _SuperRes.SuperRes.upscale(croppedUri, target.minW, target.minH);
          }
          var finalUri = sharpen ? yield (0, _Unsharp.unsharpMask)(upscaledUri, _objectSpread(_objectSpread({}, sharpen), {}, {
            quality: quality,
            format: "jpg"
          })) : upscaledUri;
          var variant = {
            ratio: ratio,
            kind: trio.kind,
            crop: trio.crop,
            outUri: finalUri,
            method: detection.method,
            targetW: target.minW,
            targetH: target.minH,
            size: detection.size
          };
          if (autoPickBestPerRatio) {
            candidates.push(variant);
          } else {
            allVariants.push(variant);
          }
          completed++;
          onProgress == null ? void 0 : onProgress(completed / total, variant);
          onProgress == null ? void 0 : onProgress(completed / total, null);
        } catch (error) {
          var err = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error(`Failed to generate variant`, {
            ratio: ratio,
            kind: trio.kind,
            error: err
          });
          completed++;
          onProgress == null ? void 0 : onProgress(completed / total, null);
        }
      }
      if (autoPickBestPerRatio && candidates.length > 0) {
        try {
          var winner = yield (0, _QualityScore.pickSharpest)(candidates.map(function (c) {
            return c.outUri;
          }), 720, 0.72);
          var best = candidates.find(function (c) {
            return c.outUri === winner;
          });
          if (best) {
            allVariants.push(best);
          }
        } catch (error) {
          var _err = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error(`Failed to pick sharpest`, {
            ratio: ratio,
            error: _err
          });
          var fallback = candidates[0];
          if (fallback) {
            allVariants.push(fallback);
          }
        }
      }
    };
    for (var ratio of ratios) {
      yield* _loop();
    }
    return allVariants;
  });
  return _exportUltraVariants.apply(this, arguments);
}
function previewUltraVariants(_x5) {
  return _previewUltraVariants.apply(this, arguments);
}
function _previewUltraVariants() {
  _previewUltraVariants = (0, _asyncToGenerator2.default)(function* (uri) {
    var ratios = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _QualityTargets.DEFAULT_RATIOS;
    var variants = yield exportUltraVariants(uri, ratios, {
      onProgress: function onProgress() {}
    });
    var withThumbs = [];
    for (var variant of variants) {
      try {
        var _yield$import = yield Promise.resolve().then(function () {
            return _interopRequireWildcard(require("expo-image-manipulator"));
          }),
          manipulateAsync = _yield$import.manipulateAsync;
        var _yield$import2 = yield Promise.resolve().then(function () {
            return _interopRequireWildcard(require("expo-image-manipulator"));
          }),
          SaveFormat = _yield$import2.SaveFormat;
        var thumb = yield manipulateAsync(variant.outUri, [{
          resize: {
            width: 240,
            height: 240
          }
        }], {
          compress: 0.9,
          format: SaveFormat.JPEG
        });
        withThumbs.push({
          variant: variant,
          thumbUri: thumb.uri
        });
      } catch (error) {
        var err = error instanceof Error ? error : new Error(String(error));
        _logger.logger.error("Failed to generate thumbnail", {
          error: err
        });
        withThumbs.push({
          variant: variant,
          thumbUri: variant.outUri
        });
      }
    }
    return withThumbs;
  });
  return _previewUltraVariants.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,