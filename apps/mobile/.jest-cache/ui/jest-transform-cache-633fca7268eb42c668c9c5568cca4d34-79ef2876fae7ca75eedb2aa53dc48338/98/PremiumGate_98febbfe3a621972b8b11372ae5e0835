4e0d0847b7b8227d3a4ef5de6426c092
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePremiumGate = exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _vectorIcons = require("@expo/vector-icons");
var _native = require("@react-navigation/native");
var _expoBlur = require("expo-blur");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Provider = require("../../theme/Provider");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  SCREEN_WIDTH = _Dimensions$get.width;
var PremiumGate = function PremiumGate(_ref) {
  var _surface;
  var feature = _ref.feature,
    description = _ref.description,
    icon = _ref.icon,
    visible = _ref.visible,
    onClose = _ref.onClose,
    onUpgrade = _ref.onUpgrade;
  var _useTheme = (0, _Provider.useTheme)(),
    colors = _useTheme.colors;
  var navigation = (0, _native.useNavigation)();
  var handleUpgrade = function handleUpgrade() {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    onClose();
    if (onUpgrade) {
      onUpgrade();
    } else {
      navigation.navigate == null ? void 0 : navigation.navigate("Premium");
    }
  };
  var handleClose = function handleClose() {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    onClose();
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    visible: visible,
    transparent: true,
    animationType: "fade",
    onRequestClose: handleClose,
    children: (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
      intensity: 20,
      style: styles.overlay,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.container,
        children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: styles.backdrop,
          activeOpacity: 1,
          onPress: handleClose
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: _reactNative.StyleSheet.flatten([styles.modal, {
            backgroundColor: (_surface = colors.surface) != null ? _surface : colors.background
          }]),
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.header,
            children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: styles.closeButton,
              onPress: handleClose,
              hitSlop: {
                top: 10,
                bottom: 10,
                left: 10,
                right: 10
              },
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "close",
                size: 24,
                color: colors.textMuted
              })
            })
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.content,
            children: [(0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
              colors: ["#FFD700", "#FFA000"],
              style: styles.iconContainer,
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "star",
                size: 30,
                color: "Theme.colors.neutral[0]"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: _reactNative.StyleSheet.flatten([styles.featureIcon, {
                backgroundColor: `${colors.primary}20`
              }]),
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: icon,
                size: 40,
                color: colors.primary
              })
            }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: _reactNative.StyleSheet.flatten([styles.title, {
                color: colors.text
              }]),
              children: ["Unlock ", feature]
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: _reactNative.StyleSheet.flatten([styles.description, {
                color: colors.textMuted
              }]),
              children: description
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.featuresList,
              children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.featureItem,
                children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                  name: "checkmark-circle",
                  size: 20,
                  color: colors.success
                }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: _reactNative.StyleSheet.flatten([styles.featureText, {
                    color: colors.textMuted
                  }]),
                  children: "Unlimited access to all features"
                })]
              }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.featureItem,
                children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                  name: "checkmark-circle",
                  size: 20,
                  color: colors.success
                }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: _reactNative.StyleSheet.flatten([styles.featureText, {
                    color: colors.textMuted
                  }]),
                  children: "Priority customer support"
                })]
              }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.featureItem,
                children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                  name: "checkmark-circle",
                  size: 20,
                  color: colors.success
                }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: _reactNative.StyleSheet.flatten([styles.featureText, {
                    color: colors.textMuted
                  }]),
                  children: "Advanced AI matching"
                })]
              })]
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.actions,
              children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                style: styles.upgradeButton,
                onPress: handleUpgrade,
                activeOpacity: 0.8,
                children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
                  colors: ["#FF6B6B", "#FF8E8E"],
                  style: styles.upgradeButtonGradient,
                  children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                    name: "star",
                    size: 20,
                    color: "Theme.colors.neutral[0]"
                  }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    style: styles.upgradeButtonText,
                    children: "Upgrade to Premium"
                  })]
                })
              }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                style: _reactNative.StyleSheet.flatten([styles.laterButton, {
                  backgroundColor: colors.background
                }]),
                onPress: handleClose,
                activeOpacity: 0.8,
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: _reactNative.StyleSheet.flatten([styles.laterButtonText, {
                    color: colors.textMuted
                  }]),
                  children: "Maybe Later"
                })
              })]
            })]
          })]
        })]
      })
    })
  });
};
var usePremiumGate = exports.usePremiumGate = function usePremiumGate() {
  var _React$useState = _react.default.useState({
      visible: false,
      feature: "",
      description: "",
      icon: "star"
    }),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    gateConfig = _React$useState2[0],
    setGateConfig = _React$useState2[1];
  var showPremiumGate = function showPremiumGate(config) {
    setGateConfig(function (prev) {
      var _config$icon;
      return _objectSpread(_objectSpread({}, prev), {}, {
        visible: true,
        feature: config.feature,
        description: config.description,
        icon: (_config$icon = config.icon) != null ? _config$icon : "star"
      });
    });
  };
  var hidePremiumGate = function hidePremiumGate() {
    setGateConfig(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, {
        visible: false
      });
    });
  };
  var PremiumGateComponent = function PremiumGateComponent() {
    return (0, _jsxRuntime.jsx)(PremiumGate, {
      visible: gateConfig.visible,
      feature: gateConfig.feature,
      description: gateConfig.description,
      icon: gateConfig.icon,
      onClose: hidePremiumGate
    });
  };
  return {
    showPremiumGate: showPremiumGate,
    hidePremiumGate: hidePremiumGate,
    PremiumGateComponent: PremiumGateComponent
  };
};
var styles = _reactNative.StyleSheet.create({
  overlay: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center"
  },
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingHorizontal: 20
  },
  backdrop: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  modal: {
    width: SCREEN_WIDTH - 40,
    maxWidth: 400,
    borderRadius: 25,
    shadowColor: "Theme.colors.neutral[950]",
    shadowOffset: {
      width: 0,
      height: 10
    },
    shadowOpacity: 0.3,
    shadowRadius: 20,
    elevation: 10
  },
  header: {
    flexDirection: "row",
    justifyContent: "flex-end",
    padding: 20,
    paddingBottom: 0
  },
  closeButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0,0,0,0.1)"
  },
  content: {
    padding: 20,
    paddingTop: 0,
    alignItems: "center"
  },
  iconContainer: {
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 20
  },
  featureIcon: {
    width: 80,
    height: 80,
    borderRadius: 40,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 20
  },
  title: {
    fontSize: 24,
    fontWeight: "800",
    textAlign: "center",
    marginBottom: 10
  },
  description: {
    fontSize: 16,
    textAlign: "center",
    lineHeight: 22,
    marginBottom: 30
  },
  featuresList: {
    width: "100%",
    marginBottom: 30
  },
  featureItem: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 12,
    gap: 12
  },
  featureText: {
    fontSize: 14,
    flex: 1
  },
  actions: {
    width: "100%",
    gap: 12
  },
  upgradeButton: {
    borderRadius: 25,
    overflow: "hidden"
  },
  upgradeButtonGradient: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 16,
    gap: 8
  },
  upgradeButtonText: {
    color: "Theme.colors.neutral[0]",
    fontSize: 18,
    fontWeight: "700"
  },
  laterButton: {
    paddingVertical: 16,
    borderRadius: 25,
    alignItems: "center",
    borderWidth: 1,
    borderColor: "rgba(0,0,0,0.1)"
  },
  laterButtonText: {
    fontSize: 16,
    fontWeight: "600"
  }
});
var _default = exports.default = PremiumGate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,