d1be24b431c4bf43475cec8dbbcf8552
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAICompatibilityScreen = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _native = require("@react-navigation/native");
var _react = require("react");
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var _useAICompatibility2 = require("../domains/ai/useAICompatibility");
var useAICompatibilityScreen = exports.useAICompatibilityScreen = function useAICompatibilityScreen(route) {
  var navigation = (0, _native.useNavigation)();
  var _useAICompatibility = (0, _useAICompatibility2.useAICompatibility)(),
    analyzeCompat = _useAICompatibility.analyzeCompatibility,
    isAnalyzing = _useAICompatibility.isAnalyzing,
    compatibilityResult = _useAICompatibility.compatibilityResult,
    error = _useAICompatibility.error,
    loadAvailablePets = _useAICompatibility.loadAvailablePets,
    availablePets = _useAICompatibility.availablePets,
    isLoadingPets = _useAICompatibility.isLoadingPets,
    selectedPet1 = _useAICompatibility.selectedPet1,
    selectedPet2 = _useAICompatibility.selectedPet2,
    setSelectedPet1 = _useAICompatibility.setSelectedPet1,
    setSelectedPet2 = _useAICompatibility.setSelectedPet2,
    resetAnalysis = _useAICompatibility.resetAnalysis,
    clearError = _useAICompatibility.clearError;
  (0, _react.useEffect)(function () {
    void loadAvailablePets();
    var params = route == null ? void 0 : route.params;
    if (params != null && params.petAId && params != null && params.petBId) {
      loadSpecificPets(params.petAId, params.petBId);
    }
  }, [route == null ? void 0 : route.params]);
  var loadSpecificPets = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (pet1Id, pet2Id) {
      try {
        if (availablePets.length === 0) {
          yield loadAvailablePets();
        }
        var pet1 = availablePets.find(function (p) {
          return p._id === pet1Id;
        });
        var pet2 = availablePets.find(function (p) {
          return p._id === pet2Id;
        });
        if (pet1 && pet2) {
          setSelectedPet1(pet1);
          setSelectedPet2(pet2);
          setTimeout(function () {
            return void handleAnalyzeCompatibility();
          }, 500);
        }
      } catch (err) {
        _core.logger.error("Error loading specific pets", {
          error: err
        });
      }
    });
    return function loadSpecificPets(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  var handleAnalyzeCompatibility = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (!selectedPet1 || !selectedPet2) {
        _reactNative.Alert.alert("Selection Required", "Please select two pets to analyze compatibility.");
        return;
      }
      try {
        yield analyzeCompat(selectedPet1._id, selectedPet2._id);
      } catch (error) {
        _core.logger.error("Compatibility analysis failed", {
          error: error
        });
      }
    });
    return function handleAnalyzeCompatibility() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleGoBack = function handleGoBack() {
    navigation.goBack();
  };
  return {
    isAnalyzing: isAnalyzing,
    compatibilityResult: compatibilityResult,
    error: error,
    availablePets: availablePets,
    isLoadingPets: isLoadingPets,
    selectedPet1: selectedPet1,
    selectedPet2: selectedPet2,
    setSelectedPet1: setSelectedPet1,
    setSelectedPet2: setSelectedPet2,
    analyzeCompatibility: handleAnalyzeCompatibility,
    resetAnalysis: resetAnalysis,
    handleGoBack: handleGoBack,
    clearError: clearError
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,