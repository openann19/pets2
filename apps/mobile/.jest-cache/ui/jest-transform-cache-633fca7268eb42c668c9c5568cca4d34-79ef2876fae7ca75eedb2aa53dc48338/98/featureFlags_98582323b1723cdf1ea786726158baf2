b34bdbf26afcfbc0559787a4e4aa30c8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.featureFlags = exports.FeatureFlagService = void 0;
var defaultFlags = {
  animations: true,
  enhancedMatching: false,
  smartRetries: false,
  prioritySupport: false,
  advancedAnalytics: false,
  premiumAnimations: true,
  animationFrameOptimization: true,
  accessibilityEnhancements: true,
  usageTracking: true,
  subscriptionAnalytics: true
};
var FeatureFlagService = function () {
  function FeatureFlagService() {
    (0, _classCallCheck2.default)(this, FeatureFlagService);
    this.flags = _objectSpread(_objectSpread({}, defaultFlags), this.loadFlagsFromEnvironment());
  }
  return (0, _createClass2.default)(FeatureFlagService, [{
    key: "loadFlagsFromEnvironment",
    value: function loadFlagsFromEnvironment() {
      var flags = {};
      if (process.env['FEATURE_ANIMATIONS'] != null) {
        flags.animations = process.env['FEATURE_ANIMATIONS'] === 'true';
      }
      if (process.env['FEATURE_ENHANCED_MATCHING'] != null) {
        flags.enhancedMatching = process.env['FEATURE_ENHANCED_MATCHING'] === 'true';
      }
      if (process.env['FEATURE_SMART_RETRIES'] != null) {
        flags.smartRetries = process.env['FEATURE_SMART_RETRIES'] === 'true';
      }
      if (process.env['FEATURE_PRIORITY_SUPPORT'] != null) {
        flags.prioritySupport = process.env['FEATURE_PRIORITY_SUPPORT'] === 'true';
      }
      if (process.env['FEATURE_ADVANCED_ANALYTICS'] != null) {
        flags.advancedAnalytics = process.env['FEATURE_ADVANCED_ANALYTICS'] === 'true';
      }
      if (process.env['FEATURE_PREMIUM_ANIMATIONS'] != null) {
        flags.premiumAnimations = process.env['FEATURE_PREMIUM_ANALYTICS'] === 'true';
      }
      if (process.env['FEATURE_ANIMATION_FRAME_OPTIMIZATION'] != null) {
        flags.animationFrameOptimization = process.env['FEATURE_ANIMATION_FRAME_OPTIMIZATION'] === 'true';
      }
      if (process.env['FEATURE_ACCESSIBILITY_ENHANCEMENTS'] != null) {
        flags.accessibilityEnhancements = process.env['FEATURE_ACCESSIBILITY_ENHANCEMENTS'] === 'true';
      }
      if (process.env['FEATURE_USAGE_TRACKING'] != null) {
        flags.usageTracking = process.env['FEATURE_USAGE_TRACKING'] === 'true';
      }
      if (process.env['FEATURE_SUBSCRIPTION_ANALYTICS'] != null) {
        flags.subscriptionAnalytics = process.env['FEATURE_SUBSCRIPTION_ANALYTICS'] === 'true';
      }
      return flags;
    }
  }, {
    key: "isEnabled",
    value: function isEnabled(flag) {
      return this.flags[flag];
    }
  }, {
    key: "enable",
    value: function enable(flag) {
      this.flags[flag] = true;
    }
  }, {
    key: "disable",
    value: function disable(flag) {
      this.flags[flag] = false;
    }
  }, {
    key: "getFlags",
    value: function getFlags() {
      return _objectSpread({}, this.flags);
    }
  }]);
}();
exports.FeatureFlagService = FeatureFlagService;
exports.featureFlags = new FeatureFlagService();
exports.default = exports.featureFlags;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,