78b698cb3b705bf96258afd5b8ee9d90
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(require("./RCTInputAccessoryViewNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var InputAccessoryView = function (_React$Component) {
  function InputAccessoryView() {
    (0, _classCallCheck2.default)(this, InputAccessoryView);
    return _callSuper(this, InputAccessoryView, arguments);
  }
  (0, _inherits2.default)(InputAccessoryView, _React$Component);
  return (0, _createClass2.default)(InputAccessoryView, [{
    key: "render",
    value: function render() {
      if (_Platform.default.OS === 'ios') {
        if (React.Children.count(this.props.children) === 0) {
          return null;
        }
        return (0, _jsxRuntime.jsx)(_RCTInputAccessoryViewNativeComponent.default, {
          style: [this.props.style, styles.container],
          nativeID: this.props.nativeID,
          backgroundColor: this.props.backgroundColor,
          children: this.props.children
        });
      } else {
        console.warn('<InputAccessoryView> is only supported on iOS.');
        return null;
      }
    }
  }]);
}(React.Component);
var styles = _StyleSheet.default.create({
  container: {
    position: 'absolute'
  }
});
module.exports = InputAccessoryView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,