9fb5f232b914f1873b36f17b9b8ad738
"use strict";

_getJestObj().mock("../../useErrorHandler", function () {
  return {
    useErrorHandler: function useErrorHandler() {
      return {
        handleNetworkError: jest.fn(),
        handleOfflineError: jest.fn()
      };
    }
  };
});
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    ImpactFeedbackStyle: {
      Light: "light",
      Medium: "medium",
      Heavy: "heavy"
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useAdminDashboardScreen = require("../useAdminDashboardScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockGoBack = jest.fn();
var mockNavigation = {
  navigate: mockNavigate,
  goBack: mockGoBack
};
describe("useAdminDashboardScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("should initialize with loading state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook.result;
    expect(result.current.isLoading).toBe(true);
    expect(result.current.isRefreshing).toBe(false);
    expect(result.current.metrics).toBeDefined();
    expect(result.current.recentActivity).toEqual([]);
  });
  it("should load dashboard data on mount", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.metrics).toBeDefined();
    expect(result.current.metrics.totalUsers).toBeGreaterThan(0);
    expect(result.current.recentActivity).toHaveLength(4);
    expect(result.current.lastUpdated).toBeInstanceOf(Date);
  }));
  it("should provide metrics data", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    var metrics = result.current.metrics;
    expect(metrics.totalUsers).toBe(15420);
    expect(metrics.activeUsers).toBe(12890);
    expect(metrics.totalPets).toBe(8760);
    expect(metrics.totalMatches).toBe(45230);
    expect(metrics.systemHealth).toBe("healthy");
  }));
  it("should handle refresh", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    (0, _reactNative.act)(function () {
      void result.current.onRefresh();
    });
    expect(result.current.isRefreshing).toBe(true);
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isRefreshing).toBe(false);
    });
  }));
  it("should navigate to users screen", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    (0, _reactNative.act)(function () {
      result.current.onNavigateToUsers();
    });
    expect(mockNavigate).toHaveBeenCalledWith("AdminUsers");
  }));
  it("should navigate to chats screen", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    (0, _reactNative.act)(function () {
      result.current.onNavigateToChats();
    });
    expect(mockNavigate).toHaveBeenCalledWith("AdminChats");
  }));
  it("should navigate to verifications screen", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    (0, _reactNative.act)(function () {
      result.current.onNavigateToVerifications();
    });
    expect(mockNavigate).toHaveBeenCalledWith("AdminVerifications");
  }));
  it("should navigate to uploads screen", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    (0, _reactNative.act)(function () {
      result.current.onNavigateToUploads();
    });
    expect(mockNavigate).toHaveBeenCalledWith("AdminUploads");
  }));
  it("should navigate to analytics screen", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    (0, _reactNative.act)(function () {
      result.current.onNavigateToAnalytics();
    });
    expect(mockNavigate).toHaveBeenCalledWith("AdminAnalytics");
  }));
  it("should navigate to security screen", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    (0, _reactNative.act)(function () {
      result.current.onNavigateToSecurity();
    });
    expect(mockNavigate).toHaveBeenCalledWith("AdminSecurity");
  }));
  it("should navigate to billing screen", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    (0, _reactNative.act)(function () {
      result.current.onNavigateToBilling();
    });
    expect(mockNavigate).toHaveBeenCalledWith("AdminBilling");
  }));
  it("should provide quick actions", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.quickActions).toHaveLength(4);
    expect(result.current.quickActions[0].id).toBe("moderate_reports");
    expect(result.current.quickActions[1].id).toBe("verify_pets");
  }));
  it("should handle quick action execution", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook11.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    (0, _reactNative.act)(function () {
      result.current.onQuickAction("verify_pets");
    });
    expect(mockNavigate).toHaveBeenCalledWith("AdminVerifications");
  }));
  it("should update last updated timestamp", (0, _asyncToGenerator2.default)(function* () {
    var _result$current$lastU, _firstUpdate$getTime;
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook12.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    var firstUpdate = result.current.lastUpdated;
    expect(firstUpdate).toBeInstanceOf(Date);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.onRefresh();
    }));
    expect(result.current.lastUpdated).toBeInstanceOf(Date);
    expect((_result$current$lastU = result.current.lastUpdated) == null ? void 0 : _result$current$lastU.getTime()).toBeGreaterThanOrEqual((_firstUpdate$getTime = firstUpdate == null ? void 0 : firstUpdate.getTime()) != null ? _firstUpdate$getTime : 0);
  }));
  it("should provide recent activity data", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook13.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.recentActivity).toHaveLength(4);
    expect(result.current.recentActivity[0].type).toBe("verification_submitted");
    expect(result.current.recentActivity[0].priority).toBe("medium");
    expect(result.current.recentActivity[1].type).toBe("report_filed");
    expect(result.current.recentActivity[1].priority).toBe("high");
  }));
  it("should return stable function references", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useAdminDashboardScreen.useAdminDashboardScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook14.result,
      rerender = _renderHook14.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    var firstOnRefresh = result.current.onRefresh;
    var firstOnNavigateToUsers = result.current.onNavigateToUsers;
    rerender();
    expect(result.current.onRefresh).toBe(firstOnRefresh);
    expect(result.current.onNavigateToUsers).toBe(firstOnNavigateToUsers);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,