bc6b41450d4ce6d236c2f56191e85dbe
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfettiBurst = ConfettiBurst;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  SCREEN_WIDTH = _Dimensions$get.width,
  SCREEN_HEIGHT = _Dimensions$get.height;
var _worklet_8268852054980_init_data = {
  code: "function anonymous() {\n  const {\n    particle\n  } = this._closure;\n  return {\n    left: particle.left.value,\n    top: particle.top.value,\n    opacity: particle.opacity.value,\n    transform: [{\n      rotate: particle.rotation.value + \"deg\"\n    }, {\n      scale: particle.scale.value\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/swipe/ConfettiBurst.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"particle\",\"_closure\",\"left\",\"value\",\"top\",\"opacity\",\"transform\",\"rotate\",\"rotation\",\"scale\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/swipe/ConfettiBurst.tsx\"],\"mappings\":\"AA+ByC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC5CC,IAAI,EAAEF,QAAQ,CAACE,IAAI,CAACC,KAAK;IACzBC,GAAG,EAAEJ,QAAQ,CAACI,GAAG,CAACD,KAAK;IACvBE,OAAO,EAAEL,QAAQ,CAACK,OAAO,CAACF,KAAK;IAC/BG,SAAS,EAAE,CACT;MAAEC,MAAM,EAAKP,QAAQ,CAACQ,QAAQ,CAACL,KAAK;IAAM,CAAC,EAC3C;MAAEM,KAAK,EAAET,QAAQ,CAACS,KAAK,CAACN;IAAM,CAAC;EAEnC,CAAC;AAAA\",\"ignoreList\":[]}"
};
function AnimatedParticle(_ref) {
  var particle = _ref.particle;
  var animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        left: particle.left.value,
        top: particle.top.value,
        opacity: particle.opacity.value,
        transform: [{
          rotate: `${particle.rotation.value}deg`
        }, {
          scale: particle.scale.value
        }]
      };
    };
    _f._closure = {
      particle: particle
    };
    _f.__initData = _worklet_8268852054980_init_data;
    _f.__workletHash = 8268852054980;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    style: [styles.particle, {
      width: particle.size,
      height: particle.size,
      backgroundColor: particle.color
    }, animatedStyle]
  });
}
function ConfettiBurst(_ref2) {
  var _ref2$show = _ref2.show,
    show = _ref2$show === void 0 ? false : _ref2$show,
    onComplete = _ref2.onComplete,
    _ref2$intensity = _ref2.intensity,
    intensity = _ref2$intensity === void 0 ? 'medium' : _ref2$intensity,
    _ref2$duration = _ref2.duration,
    duration = _ref2$duration === void 0 ? 3000 : _ref2$duration,
    _ref2$colors = _ref2.colors,
    colors = _ref2$colors === void 0 ? ['#FF6B6B', '#4ECDC4', '#FFD700', '#9C27B0', '#3A86FF', '#06FFA5'] : _ref2$colors;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    particles = _useState2[0],
    setParticles = _useState2[1];
  var animationRef = (0, _react.useRef)(null);
  var isPlayingRef = (0, _react.useRef)(false);
  var config = {
    light: {
      count: 40,
      particleSize: 6
    },
    medium: {
      count: 80,
      particleSize: 8
    },
    heavy: {
      count: 150,
      particleSize: 10
    }
  };
  var currentConfig = config[intensity];
  var particleCount = currentConfig.count;
  var particleSize = currentConfig.particleSize;
  (0, _react.useEffect)(function () {
    if (show) {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);
      setTimeout(function () {
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
      }, 200);
    }
  }, [show]);
  (0, _react.useEffect)(function () {
    if (show && !isPlayingRef.current) {
      isPlayingRef.current = true;
      var newParticles = [];
      for (var i = 0; i < particleCount; i++) {
        var _ref3, _colors$Math$floor;
        var startX = Math.random() * SCREEN_WIDTH;
        var startY = SCREEN_HEIGHT * 0.5;
        var endX = startX + (Math.random() - 0.5) * 400;
        var endY = startY + Math.random() * SCREEN_HEIGHT;
        var leftSV = {
          value: startX
        };
        var topSV = {
          value: startY
        };
        var rotationSV = {
          value: 0
        };
        var scaleSV = {
          value: 1
        };
        var opacitySV = {
          value: 1
        };
        var animationDelay = i / particleCount * 100;
        var rotationTarget = (Math.random() * 720 - 360) * 2;
        leftSV.value = (0, _reactNativeReanimated.withDelay)(animationDelay, (0, _reactNativeReanimated.withTiming)(endX, {
          duration: duration + Math.random() * 1000
        }));
        topSV.value = (0, _reactNativeReanimated.withDelay)(animationDelay, (0, _reactNativeReanimated.withTiming)(SCREEN_HEIGHT + 200, {
          duration: duration + Math.random() * 1000
        }));
        rotationSV.value = (0, _reactNativeReanimated.withDelay)(animationDelay, (0, _reactNativeReanimated.withTiming)(rotationTarget, {
          duration: duration + Math.random() * 1000
        }));
        opacitySV.value = (0, _reactNativeReanimated.withDelay)(animationDelay + duration * 0.7, (0, _reactNativeReanimated.withTiming)(0, {
          duration: duration + Math.random() * 500
        }));
        newParticles.push({
          id: i,
          left: leftSV,
          top: topSV,
          rotation: rotationSV,
          scale: scaleSV,
          opacity: opacitySV,
          color: (_ref3 = (_colors$Math$floor = colors[Math.floor(Math.random() * colors.length)]) != null ? _colors$Math$floor : colors[0]) != null ? _ref3 : '#FF6B6B',
          size: particleSize + Math.random() * 4,
          startX: startX,
          startY: startY,
          endX: endX,
          endY: endY
        });
      }
      setParticles(newParticles);
      animationRef.current = setInterval(function () {
        var extraParticles = Math.floor(currentConfig.count * 0.2);
        var burstParticles = [];
        for (var _i2 = 0; _i2 < extraParticles; _i2++) {
          var _ref4, _colors$Math$floor2;
          var _startX = Math.random() * SCREEN_WIDTH;
          var _startY = SCREEN_HEIGHT * 0.3;
          var _endX = _startX + (Math.random() - 0.5) * 300;
          var _leftSV = {
            value: _startX
          };
          var _topSV = {
            value: _startY
          };
          var _rotationSV = {
            value: 0
          };
          var _scaleSV = {
            value: 0
          };
          var _opacitySV = {
            value: 1
          };
          _leftSV.value = (0, _reactNativeReanimated.withTiming)(_endX, {
            duration: 2000
          });
          _topSV.value = (0, _reactNativeReanimated.withTiming)(SCREEN_HEIGHT + 200, {
            duration: 2000
          });
          _opacitySV.value = (0, _reactNativeReanimated.withTiming)(0, {
            duration: 1800
          });
          burstParticles.push({
            id: Date.now() + _i2,
            left: _leftSV,
            top: _topSV,
            rotation: _rotationSV,
            scale: _scaleSV,
            opacity: _opacitySV,
            color: (_ref4 = (_colors$Math$floor2 = colors[Math.floor(Math.random() * colors.length)]) != null ? _colors$Math$floor2 : colors[0]) != null ? _ref4 : '#FF6B6B',
            size: particleSize + Math.random() * 4,
            startX: _startX,
            startY: _startY,
            endX: _endX,
            endY: SCREEN_HEIGHT + 200
          });
        }
        setParticles(function (prev) {
          return [].concat((0, _toConsumableArray2.default)(prev), burstParticles);
        });
      }, 350);
      return function () {
        if (animationRef.current) {
          clearInterval(animationRef.current);
        }
      };
    }
    if (!show) {
      isPlayingRef.current = false;
      setParticles([]);
    }
  }, [show, particleCount, duration, colors, particleSize, currentConfig.count, onComplete]);
  if (!show) return (0, _jsxRuntime.jsx)(_reactNative.View, {});
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    pointerEvents: "none",
    testID: "confetti-container",
    children: particles.map(function (particle) {
      return (0, _jsxRuntime.jsx)(AnimatedParticle, {
        particle: particle
      }, particle.id);
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: 9999
  },
  particle: {
    position: 'absolute',
    borderRadius: 2
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,