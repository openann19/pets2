1610e48de50950c8475b7e400f2cacc3
"use strict";

_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(),
    ImpactFeedbackStyle: {
      Light: "light",
      Medium: "medium",
      Heavy: "heavy"
    }
  };
});
_getJestObj().mock("../../theme/Provider", function () {
  return {
    useTheme: function useTheme() {
      return mockThemeContext;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useThemeToggle = require("../useThemeToggle");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.Alert, "alert");
var mockToggleTheme = jest.fn();
var mockSetThemeMode = jest.fn();
var mockThemeContext = {
  isDark: false,
  themeMode: "light",
  colors: {
    primary: "#FF6B6B",
    background: "#FFFFFF",
    text: "#000000"
  },
  styles: {},
  shadows: {},
  toggleTheme: mockToggleTheme,
  setThemeMode: mockSetThemeMode
};
describe("useThemeToggle", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    Haptics.impactAsync.mockResolvedValue(undefined);
  });
  it("should initialize with theme context values", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook.result;
    expect(result.current.isDark).toBe(false);
    expect(result.current.themeMode).toBe("light");
    expect(result.current.colors).toEqual(mockThemeContext.colors);
    expect(result.current.styles).toEqual(mockThemeContext.styles);
    expect(result.current.shadows).toEqual(mockThemeContext.shadows);
  });
  it("should provide all theme control functions", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook2.result;
    expect(typeof result.current.toggleTheme).toBe("function");
    expect(typeof result.current.setLightTheme).toBe("function");
    expect(typeof result.current.setDarkTheme).toBe("function");
    expect(typeof result.current.setSystemTheme).toBe("function");
    expect(typeof result.current.showThemeSelector).toBe("function");
  });
  it("should toggle theme with haptic feedback", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.toggleTheme();
    }));
    expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Light);
    expect(mockToggleTheme).toHaveBeenCalled();
  }));
  it("should toggle theme even if haptics fail", (0, _asyncToGenerator2.default)(function* () {
    Haptics.impactAsync.mockRejectedValue(new Error("Haptics unavailable"));
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.toggleTheme();
    }));
    expect(mockToggleTheme).toHaveBeenCalled();
  }));
  it("should set light theme", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.setLightTheme();
    });
    expect(mockSetThemeMode).toHaveBeenCalledWith("light");
  });
  it("should set dark theme", function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.setDarkTheme();
    });
    expect(mockSetThemeMode).toHaveBeenCalledWith("dark");
  });
  it("should set system theme", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.setSystemTheme();
    });
    expect(mockSetThemeMode).toHaveBeenCalledWith("system");
  });
  it("should show theme selector with current theme", function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook8.result;
    (0, _reactNative.act)(function () {
      result.current.showThemeSelector();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Select Theme", "Current theme: Light", expect.arrayContaining([expect.objectContaining({
      text: "Light"
    }), expect.objectContaining({
      text: "Dark"
    }), expect.objectContaining({
      text: "System Default"
    }), expect.objectContaining({
      text: "Cancel",
      style: "cancel"
    })]), expect.objectContaining({
      cancelable: true,
      userInterfaceStyle: "light"
    }));
  });
  it("should show theme selector with dark mode UI", function () {
    var mockUseTheme = require("../../theme/Provider").useTheme;
    mockUseTheme.mockReturnValue(_objectSpread(_objectSpread({}, mockThemeContext), {}, {
      isDark: true,
      themeMode: "dark"
    }));
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook9.result;
    (0, _reactNative.act)(function () {
      result.current.showThemeSelector();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Select Theme", "Current theme: Dark", expect.any(Array), expect.objectContaining({
      userInterfaceStyle: "dark"
    }));
  });
  it("should show theme selector with system theme label", function () {
    var mockUseTheme = require("../../theme/Provider").useTheme;
    mockUseTheme.mockReturnValue(_objectSpread(_objectSpread({}, mockThemeContext), {}, {
      themeMode: "system"
    }));
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook0.result;
    (0, _reactNative.act)(function () {
      result.current.showThemeSelector();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Select Theme", "Current theme: System Default", expect.any(Array), expect.any(Object));
  });
  it("should call setLightTheme when Light option selected in selector", function () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook1.result;
    (0, _reactNative.act)(function () {
      result.current.showThemeSelector();
    });
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var buttons = alertCall[2];
    var lightButton = buttons.find(function (btn) {
      return btn.text === "Light";
    });
    (0, _reactNative.act)(function () {
      lightButton.onPress();
    });
    expect(mockSetThemeMode).toHaveBeenCalledWith("light");
  });
  it("should call setDarkTheme when Dark option selected in selector", function () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook10.result;
    (0, _reactNative.act)(function () {
      result.current.showThemeSelector();
    });
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var buttons = alertCall[2];
    var darkButton = buttons.find(function (btn) {
      return btn.text === "Dark";
    });
    (0, _reactNative.act)(function () {
      darkButton.onPress();
    });
    expect(mockSetThemeMode).toHaveBeenCalledWith("dark");
  });
  it("should call setSystemTheme when System Default option selected", function () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook11.result;
    (0, _reactNative.act)(function () {
      result.current.showThemeSelector();
    });
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var buttons = alertCall[2];
    var systemButton = buttons.find(function (btn) {
      return btn.text === "System Default";
    });
    (0, _reactNative.act)(function () {
      systemButton.onPress();
    });
    expect(mockSetThemeMode).toHaveBeenCalledWith("system");
  });
  it("should expose theme colors", function () {
    var customColors = {
      primary: "#007AFF",
      background: "#F5F5F5",
      text: "#333333"
    };
    jest.mocked(require("../../theme/Provider").useTheme).mockReturnValue(_objectSpread(_objectSpread({}, mockThemeContext), {}, {
      colors: customColors
    }));
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook12.result;
    expect(result.current.colors).toEqual(customColors);
  });
  it("should maintain stable function references", function () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook13.result;
    var firstToggle = result.current.toggleTheme;
    var firstSetLight = result.current.setLightTheme;
    var firstSetDark = result.current.setDarkTheme;
    var firstSetSystem = result.current.setSystemTheme;
    expect(result.current.toggleTheme).toBe(firstToggle);
    expect(result.current.setLightTheme).toBe(firstSetLight);
    expect(result.current.setDarkTheme).toBe(firstSetDark);
    expect(result.current.setSystemTheme).toBe(firstSetSystem);
  });
  it("should handle theme mode changes reactively", function () {
    var mockUseTheme = require("../../theme/Provider").useTheme;
    mockUseTheme.mockReturnValue(_objectSpread(_objectSpread({}, mockThemeContext), {}, {
      themeMode: "dark",
      isDark: true
    }));
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook14.result;
    expect(result.current.themeMode).toBe("dark");
    expect(result.current.isDark).toBe(true);
  });
  it("should expose styles from theme context", function () {
    var customStyles = {
      container: {
        padding: 16
      },
      text: {
        fontSize: 14
      }
    };
    var mockUseTheme = require("../../theme/Provider").useTheme;
    mockUseTheme.mockReturnValue(_objectSpread(_objectSpread({}, mockThemeContext), {}, {
      styles: customStyles
    }));
    var _renderHook15 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook15.result;
    expect(result.current.styles).toEqual(customStyles);
  });
  it("should expose shadows from theme context", function () {
    var customShadows = {
      sm: {
        shadowOpacity: 0.1
      },
      md: {
        shadowOpacity: 0.2
      }
    };
    var mockUseTheme = require("../../theme/Provider").useTheme;
    mockUseTheme.mockReturnValue(_objectSpread(_objectSpread({}, mockThemeContext), {}, {
      shadows: customShadows
    }));
    var _renderHook16 = (0, _reactNative.renderHook)(function () {
        return (0, _useThemeToggle.useThemeToggle)();
      }),
      result = _renderHook16.result;
    expect(result.current.shadows).toEqual(customShadows);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,