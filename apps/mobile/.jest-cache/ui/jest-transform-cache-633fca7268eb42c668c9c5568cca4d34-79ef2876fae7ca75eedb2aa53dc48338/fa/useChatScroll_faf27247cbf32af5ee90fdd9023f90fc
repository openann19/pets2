5e5f86d9182fa4761ba575dd3fd4721c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChatScroll = useChatScroll;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _logger = require("../../services/logger");
function useChatScroll(_ref) {
  var matchId = _ref.matchId,
    _ref$enabled = _ref.enabled,
    enabled = _ref$enabled === void 0 ? true : _ref$enabled;
  var flatListRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    initialOffset = _useState2[0],
    setInitialOffset = _useState2[1];
  var didRestoreRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    var restore = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        if (!enabled) return;
        try {
          var saved = yield _asyncStorage.default.getItem(`mobile_chat_scroll_${matchId}`);
          if (saved) {
            setInitialOffset(Number(saved));
          }
        } catch (error) {
          var err = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error("Failed to restore scroll position for chat", {
            matchId: matchId,
            error: err
          });
        }
      });
      return function restore() {
        return _ref2.apply(this, arguments);
      };
    }();
    void restore();
  }, [matchId, enabled]);
  (0, _react.useEffect)(function () {
    if (initialOffset > 0 && !didRestoreRef.current) {
      requestAnimationFrame(function () {
        var _flatListRef$current;
        (_flatListRef$current = flatListRef.current) == null ? void 0 : _flatListRef$current.scrollToOffset({
          offset: initialOffset,
          animated: false
        });
        didRestoreRef.current = true;
      });
    }
  }, [initialOffset]);
  var writeTimer;
  var handleScroll = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (offset) {
      if (!enabled) return;
      if (writeTimer) clearTimeout(writeTimer);
      writeTimer = setTimeout(function () {
        _asyncStorage.default.setItem(`mobile_chat_scroll_${matchId}`, String(offset)).catch(function () {});
      }, 250);
    });
    return function handleScroll(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  return {
    flatListRef: flatListRef,
    initialOffset: initialOffset,
    handleScroll: handleScroll
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbG9nZ2VyIiwidXNlQ2hhdFNjcm9sbCIsIl9yZWYiLCJtYXRjaElkIiwiX3JlZiRlbmFibGVkIiwiZW5hYmxlZCIsImZsYXRMaXN0UmVmIiwidXNlUmVmIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZGVmYXVsdCIsImluaXRpYWxPZmZzZXQiLCJzZXRJbml0aWFsT2Zmc2V0IiwiZGlkUmVzdG9yZVJlZiIsInVzZUVmZmVjdCIsInJlc3RvcmUiLCJfcmVmMiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsInNhdmVkIiwiQXN5bmNTdG9yYWdlIiwiZ2V0SXRlbSIsIk51bWJlciIsImVycm9yIiwiZXJyIiwiRXJyb3IiLCJTdHJpbmciLCJsb2dnZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsImN1cnJlbnQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfZmxhdExpc3RSZWYkY3VycmVudCIsInNjcm9sbFRvT2Zmc2V0Iiwib2Zmc2V0IiwiYW5pbWF0ZWQiLCJ3cml0ZVRpbWVyIiwiaGFuZGxlU2Nyb2xsIiwiX3JlZjMiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Iiwic2V0SXRlbSIsImNhdGNoIiwiX3giXSwic291cmNlcyI6WyJ1c2VDaGF0U2Nyb2xsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUgeyBGbGF0TGlzdCB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSBcIkByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlXCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvbG9nZ2VyXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hhdFNjcm9sbE9wdGlvbnMge1xuICBtYXRjaElkOiBzdHJpbmc7XG4gIGVuYWJsZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUNoYXRTY3JvbGxSZXR1cm4ge1xuICBmbGF0TGlzdFJlZjogUmVhY3QuUmVmT2JqZWN0PEZsYXRMaXN0PjtcbiAgaW5pdGlhbE9mZnNldDogbnVtYmVyO1xuICBoYW5kbGVTY3JvbGw6IChvZmZzZXQ6IG51bWJlcikgPT4gUHJvbWlzZTx2b2lkPjtcbn1cblxuLyoqXG4gKiBIb29rIGZvciBtYW5hZ2luZyBjaGF0IHNjcm9sbCBwb3NpdGlvbiBwZXJzaXN0ZW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2hhdFNjcm9sbCh7XG4gIG1hdGNoSWQsXG4gIGVuYWJsZWQgPSB0cnVlLFxufTogVXNlQ2hhdFNjcm9sbE9wdGlvbnMpOiBVc2VDaGF0U2Nyb2xsUmV0dXJuIHtcbiAgY29uc3QgZmxhdExpc3RSZWYgPSB1c2VSZWY8RmxhdExpc3Q+KG51bGwpO1xuICBjb25zdCBbaW5pdGlhbE9mZnNldCwgc2V0SW5pdGlhbE9mZnNldF0gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgZGlkUmVzdG9yZVJlZiA9IHVzZVJlZihmYWxzZSk7XG5cbiAgLy8gUmVzdG9yZSBzY3JvbGwgcG9zaXRpb24gb24gbW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCByZXN0b3JlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCFlbmFibGVkKSByZXR1cm47XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNhdmVkID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oXG4gICAgICAgICAgYG1vYmlsZV9jaGF0X3Njcm9sbF8ke21hdGNoSWR9YCxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHNhdmVkKSB7XG4gICAgICAgICAgc2V0SW5pdGlhbE9mZnNldChOdW1iZXIoc2F2ZWQpKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAgICAgY29uc3QgZXJyID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFN0cmluZyhlcnJvcikpO1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJGYWlsZWQgdG8gcmVzdG9yZSBzY3JvbGwgcG9zaXRpb24gZm9yIGNoYXRcIiwgeyBtYXRjaElkLCBlcnJvcjogZXJyIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2b2lkIHJlc3RvcmUoKTtcbiAgfSwgW21hdGNoSWQsIGVuYWJsZWRdKTtcblxuICAvLyBTY3JvbGwgdG8gaW5pdGlhbCBwb3NpdGlvbiB3aGVuIGRhdGEgbG9hZHNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaW5pdGlhbE9mZnNldCA+IDAgJiYgIWRpZFJlc3RvcmVSZWYuY3VycmVudCkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgZmxhdExpc3RSZWYuY3VycmVudD8uc2Nyb2xsVG9PZmZzZXQoe1xuICAgICAgICAgIG9mZnNldDogaW5pdGlhbE9mZnNldCxcbiAgICAgICAgICBhbmltYXRlZDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBkaWRSZXN0b3JlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbaW5pdGlhbE9mZnNldF0pO1xuXG4gIGxldCB3cml0ZVRpbWVyOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiB8IHVuZGVmaW5lZDtcbiAgY29uc3QgaGFuZGxlU2Nyb2xsID0gYXN5bmMgKG9mZnNldDogbnVtYmVyKSA9PiB7XG4gICAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gICAgaWYgKHdyaXRlVGltZXIpIGNsZWFyVGltZW91dCh3cml0ZVRpbWVyKTtcbiAgICB3cml0ZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBBc3luY1N0b3JhZ2Uuc2V0SXRlbShgbW9iaWxlX2NoYXRfc2Nyb2xsXyR7bWF0Y2hJZH1gLCBTdHJpbmcob2Zmc2V0KSkuY2F0Y2goKCkgPT4ge30pO1xuICAgIH0sIDI1MCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBmbGF0TGlzdFJlZixcbiAgICBpbml0aWFsT2Zmc2V0LFxuICAgIGhhbmRsZVNjcm9sbCxcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsYUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBZ0JPLFNBQVNJLGFBQWFBLENBQUFDLElBQUEsRUFHaUI7RUFBQSxJQUY1Q0MsT0FBTyxHQUFBRCxJQUFBLENBQVBDLE9BQU87SUFBQUMsWUFBQSxHQUFBRixJQUFBLENBQ1BHLE9BQU87SUFBUEEsT0FBTyxHQUFBRCxZQUFBLGNBQUcsSUFBSSxHQUFBQSxZQUFBO0VBRWQsSUFBTUUsV0FBVyxHQUFHLElBQUFDLGFBQU0sRUFBVyxJQUFJLENBQUM7RUFDMUMsSUFBQUMsU0FBQSxHQUEwQyxJQUFBQyxlQUFRLEVBQUMsQ0FBQyxDQUFDO0lBQUFDLFVBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBLEVBQUFKLFNBQUE7SUFBOUNLLGFBQWEsR0FBQUgsVUFBQTtJQUFFSSxnQkFBZ0IsR0FBQUosVUFBQTtFQUN0QyxJQUFNSyxhQUFhLEdBQUcsSUFBQVIsYUFBTSxFQUFDLEtBQUssQ0FBQztFQUduQyxJQUFBUyxnQkFBUyxFQUFDLFlBQU07SUFDZCxJQUFNQyxPQUFPO01BQUEsSUFBQUMsS0FBQSxPQUFBQyxrQkFBQSxDQUFBUCxPQUFBLEVBQUcsYUFBWTtRQUMxQixJQUFJLENBQUNQLE9BQU8sRUFBRTtRQUVkLElBQUk7VUFDRixJQUFNZSxLQUFLLFNBQVNDLHFCQUFZLENBQUNDLE9BQU8sQ0FDdEMsc0JBQXNCbkIsT0FBTyxFQUMvQixDQUFDO1VBQ0QsSUFBSWlCLEtBQUssRUFBRTtZQUNUTixnQkFBZ0IsQ0FBQ1MsTUFBTSxDQUFDSCxLQUFLLENBQUMsQ0FBQztVQUNqQztRQUNGLENBQUMsQ0FBQyxPQUFPSSxLQUFjLEVBQUU7VUFDdkIsSUFBTUMsR0FBRyxHQUFHRCxLQUFLLFlBQVlFLEtBQUssR0FBR0YsS0FBSyxHQUFHLElBQUlFLEtBQUssQ0FBQ0MsTUFBTSxDQUFDSCxLQUFLLENBQUMsQ0FBQztVQUNyRUksY0FBTSxDQUFDSixLQUFLLENBQUMsNENBQTRDLEVBQUU7WUFBRXJCLE9BQU8sRUFBUEEsT0FBTztZQUFFcUIsS0FBSyxFQUFFQztVQUFJLENBQUMsQ0FBQztRQUNyRjtNQUNGLENBQUM7TUFBQSxnQkFkS1IsT0FBT0EsQ0FBQTtRQUFBLE9BQUFDLEtBQUEsQ0FBQVcsS0FBQSxPQUFBQyxTQUFBO01BQUE7SUFBQSxHQWNaO0lBRUQsS0FBS2IsT0FBTyxDQUFDLENBQUM7RUFDaEIsQ0FBQyxFQUFFLENBQUNkLE9BQU8sRUFBRUUsT0FBTyxDQUFDLENBQUM7RUFHdEIsSUFBQVcsZ0JBQVMsRUFBQyxZQUFNO0lBQ2QsSUFBSUgsYUFBYSxHQUFHLENBQUMsSUFBSSxDQUFDRSxhQUFhLENBQUNnQixPQUFPLEVBQUU7TUFDL0NDLHFCQUFxQixDQUFDLFlBQU07UUFBQSxJQUFBQyxvQkFBQTtRQUMxQixDQUFBQSxvQkFBQSxHQUFBM0IsV0FBVyxDQUFDeUIsT0FBTyxxQkFBbkJFLG9CQUFBLENBQXFCQyxjQUFjLENBQUM7VUFDbENDLE1BQU0sRUFBRXRCLGFBQWE7VUFDckJ1QixRQUFRLEVBQUU7UUFDWixDQUFDLENBQUM7UUFDRnJCLGFBQWEsQ0FBQ2dCLE9BQU8sR0FBRyxJQUFJO01BQzlCLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQyxFQUFFLENBQUNsQixhQUFhLENBQUMsQ0FBQztFQUVuQixJQUFJd0IsVUFBcUQ7RUFDekQsSUFBTUMsWUFBWTtJQUFBLElBQUFDLEtBQUEsT0FBQXBCLGtCQUFBLENBQUFQLE9BQUEsRUFBRyxXQUFPdUIsTUFBYyxFQUFLO01BQzdDLElBQUksQ0FBQzlCLE9BQU8sRUFBRTtNQUNkLElBQUlnQyxVQUFVLEVBQUVHLFlBQVksQ0FBQ0gsVUFBVSxDQUFDO01BQ3hDQSxVQUFVLEdBQUdJLFVBQVUsQ0FBQyxZQUFNO1FBQzVCcEIscUJBQVksQ0FBQ3FCLE9BQU8sQ0FBQyxzQkFBc0J2QyxPQUFPLEVBQUUsRUFBRXdCLE1BQU0sQ0FBQ1EsTUFBTSxDQUFDLENBQUMsQ0FBQ1EsS0FBSyxDQUFDLFlBQU0sQ0FBQyxDQUFDLENBQUM7TUFDdkYsQ0FBQyxFQUFFLEdBQUcsQ0FBQztJQUNULENBQUM7SUFBQSxnQkFOS0wsWUFBWUEsQ0FBQU0sRUFBQTtNQUFBLE9BQUFMLEtBQUEsQ0FBQVYsS0FBQSxPQUFBQyxTQUFBO0lBQUE7RUFBQSxHQU1qQjtFQUVELE9BQU87SUFDTHhCLFdBQVcsRUFBWEEsV0FBVztJQUNYTyxhQUFhLEVBQWJBLGFBQWE7SUFDYnlCLFlBQVksRUFBWkE7RUFDRixDQUFDO0FBQ0giLCJpZ25vcmVMaXN0IjpbXX0=