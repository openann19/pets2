2b850e6bfb2dbc9c8d12618642d381ae
"use strict";

_getJestObj().mock("../../../services/WebRTCService");
_getJestObj().mock("../../../hooks/useSocket");
_getJestObj().mock("react-native", function () {
  return {
    Alert: {
      alert: jest.fn()
    },
    AppState: {
      addEventListener: jest.fn(function () {
        return {
          remove: jest.fn()
        };
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("react-native");
var _useSocket = require("../../../hooks/useSocket");
var _WebRTCService = _interopRequireDefault(require("../../../services/WebRTCService"));
var _CallManager = _interopRequireWildcard(require("../CallManager"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockSocket = {
  on: jest.fn(),
  emit: jest.fn(),
  connected: true
};
var mockWebRTCService = _WebRTCService.default;
var mockUseSocket = _useSocket.useSocket;
describe("CallManager", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockUseSocket.mockReturnValue(mockSocket);
    mockWebRTCService.getCallState.mockReturnValue({
      isActive: false,
      isConnected: false,
      isIncoming: false,
      isMuted: false,
      isVideoEnabled: true,
      callDuration: 0
    });
    mockWebRTCService.on = jest.fn();
    mockWebRTCService.off = jest.fn();
    mockWebRTCService.initialize = jest.fn();
  });
  it("should render children correctly", function () {
    var TestChild = function TestChild() {
      return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "test-child",
        children: "Test Child"
      });
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CallManager.default, {
        children: (0, _jsxRuntime.jsx)(TestChild, {})
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId("test-child")).toBeTruthy();
  });
  it("should initialize WebRTC service with socket", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CallManager.default, {
      children: (0, _jsxRuntime.jsx)("div", {
        children: "Test"
      })
    }));
    expect(mockWebRTCService.initialize).toHaveBeenCalledWith(mockSocket);
  });
  it("should set up event listeners for call state changes", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CallManager.default, {
      children: (0, _jsxRuntime.jsx)("div", {
        children: "Test"
      })
    }));
    expect(mockWebRTCService.on).toHaveBeenCalledWith("callStateChanged", expect.any(Function));
    expect(mockWebRTCService.on).toHaveBeenCalledWith("callError", expect.any(Function));
  });
  it("should show incoming call modal when receiving incoming call", (0, _asyncToGenerator2.default)(function* () {
    var _mockWebRTCService$on;
    var mockCallData = {
      callId: "test-call-id",
      matchId: "test-match-id",
      callerId: "test-caller-id",
      callerName: "Test Caller",
      callType: "voice",
      timestamp: Date.now()
    };
    mockWebRTCService.getCallState.mockReturnValue({
      isActive: true,
      isConnected: false,
      isIncoming: true,
      callData: mockCallData,
      isMuted: false,
      isVideoEnabled: true,
      callDuration: 0
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CallManager.default, {
        children: (0, _jsxRuntime.jsx)("div", {
          children: "Test"
        })
      })),
      rerender = _render2.rerender;
    var callStateHandler = (_mockWebRTCService$on = mockWebRTCService.on.mock.calls.find(function (call) {
      return call[0] === "callStateChanged";
    })) == null ? void 0 : _mockWebRTCService$on[1];
    if (callStateHandler) {
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        callStateHandler({
          isActive: true,
          isConnected: false,
          isIncoming: true,
          callData: mockCallData,
          isMuted: false,
          isVideoEnabled: true,
          callDuration: 0
        });
      }));
    }
    expect(mockWebRTCService.on).toHaveBeenCalled();
  }));
  it("should handle call errors correctly", (0, _asyncToGenerator2.default)(function* () {
    var _mockWebRTCService$on2;
    var mockError = new Error("Test call error");
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CallManager.default, {
      children: (0, _jsxRuntime.jsx)("div", {
        children: "Test"
      })
    }));
    var errorHandler = (_mockWebRTCService$on2 = mockWebRTCService.on.mock.calls.find(function (call) {
      return call[0] === "callError";
    })) == null ? void 0 : _mockWebRTCService$on2[1];
    if (errorHandler) {
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        errorHandler(mockError);
      }));
    }
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Call Error", "There was an issue with the call. Please try again.", [{
      text: "OK"
    }]);
  }));
  it("should clean up event listeners on unmount", function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CallManager.default, {
        children: (0, _jsxRuntime.jsx)("div", {
          children: "Test"
        })
      })),
      unmount = _render3.unmount;
    unmount();
    expect(mockWebRTCService.off).toHaveBeenCalledWith("callStateChanged", expect.any(Function));
    expect(mockWebRTCService.off).toHaveBeenCalledWith("callError", expect.any(Function));
  });
});
describe("useCallManager hook", function () {
  var TestComponent = function TestComponent() {
    var _useCallManager = (0, _CallManager.useCallManager)(),
      startCall = _useCallManager.startCall,
      endCall = _useCallManager.endCall,
      isCallActive = _useCallManager.isCallActive,
      getCallState = _useCallManager.getCallState;
    return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      children: [(0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "start-voice-call",
        onPress: function onPress() {
          return startCall("test-match", "voice");
        },
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Start Voice Call"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "start-video-call",
        onPress: function onPress() {
          return startCall("test-match", "video");
        },
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Start Video Call"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "end-call",
        onPress: endCall,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "End Call"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        testID: "call-active",
        children: isCallActive() ? "Active" : "Inactive"
      })]
    });
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockWebRTCService.startCall = jest.fn();
    mockWebRTCService.endCall = jest.fn();
    mockWebRTCService.isCallActive = jest.fn();
    mockWebRTCService.getCallState = jest.fn();
  });
  it("should start voice call successfully", (0, _asyncToGenerator2.default)(function* () {
    mockWebRTCService.startCall.mockResolvedValue(true);
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
      getByTestId = _render4.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByTestId("start-voice-call"));
    }));
    expect(mockWebRTCService.startCall).toHaveBeenCalledWith("test-match", "voice");
  }));
  it("should start video call successfully", (0, _asyncToGenerator2.default)(function* () {
    mockWebRTCService.startCall.mockResolvedValue(true);
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
      getByTestId = _render5.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByTestId("start-video-call"));
    }));
    expect(mockWebRTCService.startCall).toHaveBeenCalledWith("test-match", "video");
  }));
  it("should handle call start failure", (0, _asyncToGenerator2.default)(function* () {
    mockWebRTCService.startCall.mockResolvedValue(false);
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
      getByTestId = _render6.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByTestId("start-voice-call"));
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Error", "Failed to start call. Please check your permissions and try again.");
  }));
  it("should end call", function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
      getByTestId = _render7.getByTestId;
    _reactNative.fireEvent.press(getByTestId("end-call"));
    expect(mockWebRTCService.endCall).toHaveBeenCalled();
  });
  it("should check if call is active", function () {
    mockWebRTCService.isCallActive.mockReturnValue(true);
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
      getByTestId = _render8.getByTestId;
    expect(getByTestId("call-active")).toHaveTextContent("Active");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,