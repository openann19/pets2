c341d053c91476d4908362acbe28c665
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.useThemeToggle = useThemeToggle;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _react = require("react");
var _reactNative = require("react-native");
var _UnifiedThemeProvider = require("../theme/UnifiedThemeProvider");
var _Provider = require("../theme/Provider");
var _adapters = require("../theme/adapters");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function useThemeToggle() {
  var theme = (0, _Provider.useTheme)();
  var _useThemeContext = (0, _UnifiedThemeProvider.useThemeContext)(),
    isDark = _useThemeContext.isDark,
    mode = _useThemeContext.mode,
    setMode = _useThemeContext.setMode,
    contextToggleTheme = _useThemeContext.toggleTheme;
  var colors = (0, _adapters.getExtendedColors)(theme);
  var styles = {};
  var shadows = {};
  var themeMode = mode;
  var toggleTheme = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      contextToggleTheme();
    } catch (error) {
      contextToggleTheme();
    }
  }), [contextToggleTheme]);
  var setLightTheme = (0, _react.useCallback)(function () {
    setMode("light");
  }, [setMode]);
  var setDarkTheme = (0, _react.useCallback)(function () {
    setMode("dark");
  }, [setMode]);
  var setSystemTheme = (0, _react.useCallback)(function () {
    setMode("system");
  }, [setMode]);
  var showThemeSelector = (0, _react.useCallback)(function () {
    var currentThemeLabel = {
      light: "Light",
      dark: "Dark",
      system: "System Default"
    }[themeMode];
    _reactNative.Alert.alert("Select Theme", `Current theme: ${currentThemeLabel}`, [{
      text: "Light",
      onPress: setLightTheme,
      style: themeMode === "light" ? "default" : "default"
    }, {
      text: "Dark",
      onPress: setDarkTheme,
      style: themeMode === "dark" ? "default" : "default"
    }, {
      text: "System Default",
      onPress: setSystemTheme,
      style: themeMode === "system" ? "default" : "default"
    }, {
      text: "Cancel",
      style: "cancel"
    }], {
      cancelable: true,
      userInterfaceStyle: isDark ? "dark" : "light"
    });
  }, [themeMode, isDark, setLightTheme, setDarkTheme, setSystemTheme]);
  return {
    isDark: isDark != null ? isDark : false,
    themeMode: themeMode,
    colors: colors,
    styles: styles,
    shadows: shadows,
    toggleTheme: toggleTheme,
    setLightTheme: setLightTheme,
    setDarkTheme: setDarkTheme,
    setSystemTheme: setSystemTheme,
    showThemeSelector: showThemeSelector
  };
}
var _default = exports.default = useThemeToggle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIYXB0aWNzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX1VuaWZpZWRUaGVtZVByb3ZpZGVyIiwiX1Byb3ZpZGVyIiwiX2FkYXB0ZXJzIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90MiIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidXNlVGhlbWVUb2dnbGUiLCJ0aGVtZSIsInVzZVRoZW1lIiwiX3VzZVRoZW1lQ29udGV4dCIsInVzZVRoZW1lQ29udGV4dCIsImlzRGFyayIsIm1vZGUiLCJzZXRNb2RlIiwiY29udGV4dFRvZ2dsZVRoZW1lIiwidG9nZ2xlVGhlbWUiLCJjb2xvcnMiLCJnZXRFeHRlbmRlZENvbG9ycyIsInN0eWxlcyIsInNoYWRvd3MiLCJ0aGVtZU1vZGUiLCJ1c2VDYWxsYmFjayIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImltcGFjdEFzeW5jIiwiSW1wYWN0RmVlZGJhY2tTdHlsZSIsIkxpZ2h0IiwiZXJyb3IiLCJzZXRMaWdodFRoZW1lIiwic2V0RGFya1RoZW1lIiwic2V0U3lzdGVtVGhlbWUiLCJzaG93VGhlbWVTZWxlY3RvciIsImN1cnJlbnRUaGVtZUxhYmVsIiwibGlnaHQiLCJkYXJrIiwic3lzdGVtIiwiQWxlcnQiLCJhbGVydCIsInRleHQiLCJvblByZXNzIiwic3R5bGUiLCJjYW5jZWxhYmxlIiwidXNlckludGVyZmFjZVN0eWxlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidXNlVGhlbWVUb2dnbGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSGFwdGljcyBmcm9tIFwiZXhwby1oYXB0aWNzXCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQWxlcnQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5cbmltcG9ydCB0eXBlIHsgVGhlbWVNb2RlIH0gZnJvbSBcIi4uL3N0b3Jlcy91c2VVSVN0b3JlXCI7XG5pbXBvcnQgeyB1c2VUaGVtZUNvbnRleHQgfSBmcm9tIFwiLi4vdGhlbWUvVW5pZmllZFRoZW1lUHJvdmlkZXJcIjtcbmltcG9ydCB7IHVzZVRoZW1lIH0gZnJvbSBcIi4uL3RoZW1lL1Byb3ZpZGVyXCI7XG5pbXBvcnQgdHlwZSB7IFRoZW1lQ29sb3JzIH0gZnJvbSBcIi4uL3RoZW1lL1Byb3ZpZGVyXCI7XG5pbXBvcnQgeyBnZXRFeHRlbmRlZENvbG9ycyB9IGZyb20gXCIuLi90aGVtZS9hZGFwdGVyc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRoZW1lVG9nZ2xlUmV0dXJuIHtcbiAgaXNEYXJrOiBib29sZWFuO1xuICB0aGVtZU1vZGU6IFRoZW1lTW9kZTtcbiAgY29sb3JzOiBUaGVtZUNvbG9ycztcbiAgc3R5bGVzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgc2hhZG93czogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIHRvZ2dsZVRoZW1lOiAoKSA9PiB2b2lkO1xuICBzZXRMaWdodFRoZW1lOiAoKSA9PiB2b2lkO1xuICBzZXREYXJrVGhlbWU6ICgpID0+IHZvaWQ7XG4gIHNldFN5c3RlbVRoZW1lOiAoKSA9PiB2b2lkO1xuICBzaG93VGhlbWVTZWxlY3RvcjogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRoZW1lVG9nZ2xlKCk6IFVzZVRoZW1lVG9nZ2xlUmV0dXJuIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCB7IGlzRGFyaywgbW9kZSwgc2V0TW9kZSwgdG9nZ2xlVGhlbWU6IGNvbnRleHRUb2dnbGVUaGVtZSB9ID0gdXNlVGhlbWVDb250ZXh0KCk7XG4gIFxuICAvLyBHZXQgZXh0ZW5kZWQgY29sb3JzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gIGNvbnN0IGNvbG9ycyA9IGdldEV4dGVuZGVkQ29sb3JzKHRoZW1lKTtcbiAgY29uc3Qgc3R5bGVzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IHt9O1xuICBjb25zdCBzaGFkb3dzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IHt9O1xuICBjb25zdCB0aGVtZU1vZGUgPSBtb2RlIGFzIFRoZW1lTW9kZTtcblxuICAvLyBFbmhhbmNlZCB0b2dnbGUgd2l0aCBoYXB0aWMgZmVlZGJhY2tcbiAgY29uc3QgdG9nZ2xlVGhlbWUgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFByb3ZpZGUgaGFwdGljIGZlZWRiYWNrXG4gICAgICBhd2FpdCBIYXB0aWNzLmltcGFjdEFzeW5jKEhhcHRpY3MuSW1wYWN0RmVlZGJhY2tTdHlsZS5MaWdodCk7XG4gICAgICBjb250ZXh0VG9nZ2xlVGhlbWUoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gRmFsbGJhY2sgaWYgaGFwdGljcyBmYWlsXG4gICAgICBjb250ZXh0VG9nZ2xlVGhlbWUoKTtcbiAgICB9XG4gIH0sIFtjb250ZXh0VG9nZ2xlVGhlbWVdKTtcblxuICAvLyBTZXQgc3BlY2lmaWMgdGhlbWUgbW9kZXNcbiAgY29uc3Qgc2V0TGlnaHRUaGVtZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRNb2RlKFwibGlnaHRcIik7XG4gIH0sIFtzZXRNb2RlXSk7XG5cbiAgY29uc3Qgc2V0RGFya1RoZW1lID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldE1vZGUoXCJkYXJrXCIpO1xuICB9LCBbc2V0TW9kZV0pO1xuXG4gIGNvbnN0IHNldFN5c3RlbVRoZW1lID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldE1vZGUoXCJzeXN0ZW1cIik7XG4gIH0sIFtzZXRNb2RlXSk7XG5cbiAgLy8gU2hvdyB0aGVtZSBzZWxlY3Rpb24gbW9kYWxcbiAgY29uc3Qgc2hvd1RoZW1lU2VsZWN0b3IgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFRoZW1lTGFiZWwgPSB7XG4gICAgICBsaWdodDogXCJMaWdodFwiLFxuICAgICAgZGFyazogXCJEYXJrXCIsXG4gICAgICBzeXN0ZW06IFwiU3lzdGVtIERlZmF1bHRcIixcbiAgICB9W3RoZW1lTW9kZV07XG5cbiAgICBBbGVydC5hbGVydChcbiAgICAgIFwiU2VsZWN0IFRoZW1lXCIsXG4gICAgICBgQ3VycmVudCB0aGVtZTogJHtjdXJyZW50VGhlbWVMYWJlbH1gLFxuICAgICAgW1xuICAgICAgICB7XG4gICAgICAgICAgdGV4dDogXCJMaWdodFwiLFxuICAgICAgICAgIG9uUHJlc3M6IHNldExpZ2h0VGhlbWUsXG4gICAgICAgICAgc3R5bGU6IHRoZW1lTW9kZSA9PT0gXCJsaWdodFwiID8gXCJkZWZhdWx0XCIgOiBcImRlZmF1bHRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRleHQ6IFwiRGFya1wiLFxuICAgICAgICAgIG9uUHJlc3M6IHNldERhcmtUaGVtZSxcbiAgICAgICAgICBzdHlsZTogdGhlbWVNb2RlID09PSBcImRhcmtcIiA/IFwiZGVmYXVsdFwiIDogXCJkZWZhdWx0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0ZXh0OiBcIlN5c3RlbSBEZWZhdWx0XCIsXG4gICAgICAgICAgb25QcmVzczogc2V0U3lzdGVtVGhlbWUsXG4gICAgICAgICAgc3R5bGU6IHRoZW1lTW9kZSA9PT0gXCJzeXN0ZW1cIiA/IFwiZGVmYXVsdFwiIDogXCJkZWZhdWx0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0ZXh0OiBcIkNhbmNlbFwiLFxuICAgICAgICAgIHN0eWxlOiBcImNhbmNlbFwiLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgdXNlckludGVyZmFjZVN0eWxlOiBpc0RhcmsgPyBcImRhcmtcIiA6IFwibGlnaHRcIixcbiAgICAgIH0sXG4gICAgKTtcbiAgfSwgW3RoZW1lTW9kZSwgaXNEYXJrLCBzZXRMaWdodFRoZW1lLCBzZXREYXJrVGhlbWUsIHNldFN5c3RlbVRoZW1lXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBpc0Rhcms6IGlzRGFyayA/PyBmYWxzZSxcbiAgICB0aGVtZU1vZGUsXG4gICAgY29sb3JzLFxuICAgIHN0eWxlcyxcbiAgICBzaGFkb3dzLFxuICAgIHRvZ2dsZVRoZW1lLFxuICAgIHNldExpZ2h0VGhlbWUsXG4gICAgc2V0RGFya1RoZW1lLFxuICAgIHNldFN5c3RlbVRoZW1lLFxuICAgIHNob3dUaGVtZVNlbGVjdG9yLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VUaGVtZVRvZ2dsZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBR0EsSUFBQUcscUJBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFNBQUEsR0FBQUosT0FBQTtBQUVBLElBQUFLLFNBQUEsR0FBQUwsT0FBQTtBQUFzRCxTQUFBRCx3QkFBQU8sQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQVQsdUJBQUEsWUFBQUEsd0JBQUFPLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FB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