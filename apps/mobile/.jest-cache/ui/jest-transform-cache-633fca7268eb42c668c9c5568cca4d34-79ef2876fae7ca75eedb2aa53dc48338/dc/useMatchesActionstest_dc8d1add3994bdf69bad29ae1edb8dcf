6450494fb7181ffd0a5898c9be198f40
"use strict";

_getJestObj().mock("../../services/logger", function () {
  return {
    logger: mockLogger
  };
});
_getJestObj().mock("../../services/api", function () {
  return {
    matchesAPI: {
      unmatch: mockUnmatch,
      block: mockBlock,
      report: mockReport
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useMatchesActions = require("../useMatchesActions");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.Alert, "alert");
var mockLogger = {
  info: jest.fn(),
  error: jest.fn()
};
var mockUnmatch = jest.fn();
var mockBlock = jest.fn();
var mockReport = jest.fn();
describe("useMatchesActions", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("should initialize with action handlers", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook.result;
    expect(result.current.handleUnmatch).toBeDefined();
    expect(result.current.handleBlock).toBeDefined();
    expect(result.current.handleReport).toBeDefined();
  });
  it("should show confirmation dialog for unmatch", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleUnmatch("match123", "Buddy");
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Unmatch", "Are you sure you want to unmatch with Buddy?", expect.arrayContaining([expect.objectContaining({
      text: "Cancel"
    }), expect.objectContaining({
      text: "Unmatch"
    })]));
  }));
  it("should unmatch when confirmed", (0, _asyncToGenerator2.default)(function* () {
    mockUnmatch.mockResolvedValue(undefined);
    var onMatchRemoved = jest.fn();
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var unmatchButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Unmatch";
      });
      if (unmatchButton != null && unmatchButton.onPress) {
        unmatchButton.onPress();
      }
    });
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)({
          onMatchRemoved: onMatchRemoved
        });
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleUnmatch("match123", "Buddy");
    }));
    expect(mockUnmatch).toHaveBeenCalledWith("match123");
    expect(mockLogger.info).toHaveBeenCalledWith("Match removed", {
      matchId: "match123",
      petName: "Buddy"
    });
    expect(onMatchRemoved).toHaveBeenCalledWith("match123");
  }));
  it("should handle unmatch error", (0, _asyncToGenerator2.default)(function* () {
    mockUnmatch.mockRejectedValue(new Error("API error"));
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var unmatchButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Unmatch";
      });
      if (unmatchButton != null && unmatchButton.onPress) {
        unmatchButton.onPress();
      }
    });
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleUnmatch("match123", "Buddy");
    }));
    expect(mockLogger.error).toHaveBeenCalledWith("Failed to unmatch", expect.any(Object));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Error", "Failed to unmatch. Please try again.");
  }));
  it("should show confirmation dialog for block", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleBlock("match123", "Max");
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Block", "Are you sure you want to block Max? This action cannot be undone.", expect.arrayContaining([expect.objectContaining({
      text: "Cancel"
    }), expect.objectContaining({
      text: "Block"
    })]));
  }));
  it("should block user when confirmed", (0, _asyncToGenerator2.default)(function* () {
    mockBlock.mockResolvedValue(undefined);
    var onMatchBlocked = jest.fn();
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var blockButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Block";
      });
      if (blockButton != null && blockButton.onPress) {
        blockButton.onPress();
      }
    });
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)({
          onMatchBlocked: onMatchBlocked
        });
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleBlock("match123", "Max");
    }));
    expect(mockBlock).toHaveBeenCalledWith("match123");
    expect(mockLogger.info).toHaveBeenCalledWith("User blocked", {
      matchId: "match123",
      petName: "Max"
    });
    expect(onMatchBlocked).toHaveBeenCalledWith("match123");
  }));
  it("should handle block error", (0, _asyncToGenerator2.default)(function* () {
    mockBlock.mockRejectedValue(new Error("API error"));
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var blockButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Block";
      });
      if (blockButton != null && blockButton.onPress) {
        blockButton.onPress();
      }
    });
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleBlock("match123", "Max");
    }));
    expect(mockLogger.error).toHaveBeenCalledWith("Failed to block user", expect.any(Object));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Error", "Failed to block user. Please try again.");
  }));
  it("should show report options dialog", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleReport("match123", "Charlie");
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Report", "Why are you reporting Charlie?", expect.arrayContaining([expect.objectContaining({
      text: "Cancel"
    }), expect.objectContaining({
      text: "Spam"
    }), expect.objectContaining({
      text: "Inappropriate Content"
    }), expect.objectContaining({
      text: "Other"
    })]));
  }));
  it("should report as spam when selected", (0, _asyncToGenerator2.default)(function* () {
    mockReport.mockResolvedValue(undefined);
    var onMatchReported = jest.fn();
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var spamButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Spam";
      });
      if (spamButton != null && spamButton.onPress) {
        spamButton.onPress();
      }
    });
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)({
          onMatchReported: onMatchReported
        });
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleReport("match123", "Charlie");
    }));
    expect(mockReport).toHaveBeenCalledWith("match123", "spam");
    expect(mockLogger.info).toHaveBeenCalledWith("User reported", {
      matchId: "match123",
      petName: "Charlie",
      reason: "spam"
    });
    expect(onMatchReported).toHaveBeenCalledWith("match123");
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Reported", "Thank you for reporting. We'll review this.");
  }));
  it("should report as inappropriate when selected", (0, _asyncToGenerator2.default)(function* () {
    mockReport.mockResolvedValue(undefined);
    var onMatchReported = jest.fn();
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var inappropriateButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Inappropriate Content";
      });
      if (inappropriateButton != null && inappropriateButton.onPress) {
        inappropriateButton.onPress();
      }
    });
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)({
          onMatchReported: onMatchReported
        });
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleReport("match123", "Charlie");
    }));
    expect(mockReport).toHaveBeenCalledWith("match123", "inappropriate");
    expect(mockLogger.info).toHaveBeenCalledWith("User reported", {
      matchId: "match123",
      petName: "Charlie",
      reason: "inappropriate"
    });
    expect(onMatchReported).toHaveBeenCalledWith("match123");
  }));
  it("should report as other when selected", (0, _asyncToGenerator2.default)(function* () {
    mockReport.mockResolvedValue(undefined);
    var onMatchReported = jest.fn();
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var otherButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Other";
      });
      if (otherButton != null && otherButton.onPress) {
        otherButton.onPress();
      }
    });
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)({
          onMatchReported: onMatchReported
        });
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleReport("match123", "Charlie");
    }));
    expect(mockReport).toHaveBeenCalledWith("match123", "other");
    expect(mockLogger.info).toHaveBeenCalledWith("User reported", {
      matchId: "match123",
      petName: "Charlie",
      reason: "other"
    });
    expect(onMatchReported).toHaveBeenCalledWith("match123");
  }));
  it("should handle report error", (0, _asyncToGenerator2.default)(function* () {
    mockReport.mockRejectedValue(new Error("API error"));
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var spamButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Spam";
      });
      if (spamButton != null && spamButton.onPress) {
        spamButton.onPress();
      }
    });
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleReport("match123", "Charlie");
    }));
    expect(mockLogger.error).toHaveBeenCalledWith("Failed to report", expect.any(Object));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Error", "Failed to report. Please try again.");
  }));
  it("should work without callbacks", (0, _asyncToGenerator2.default)(function* () {
    mockUnmatch.mockResolvedValue(undefined);
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      var unmatchButton = buttons == null ? void 0 : buttons.find(function (b) {
        return b.text === "Unmatch";
      });
      if (unmatchButton != null && unmatchButton.onPress) {
        unmatchButton.onPress();
      }
    });
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook11.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleUnmatch("match123", "Buddy");
    }));
    expect(mockUnmatch).toHaveBeenCalled();
  }));
  it("should return stable function references", function () {
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook12.result,
      rerender = _renderHook12.rerender;
    var firstHandleUnmatch = result.current.handleUnmatch;
    var firstHandleBlock = result.current.handleBlock;
    var firstHandleReport = result.current.handleReport;
    rerender();
    expect(result.current.handleUnmatch).toBe(firstHandleUnmatch);
    expect(result.current.handleBlock).toBe(firstHandleBlock);
    expect(result.current.handleReport).toBe(firstHandleReport);
  });
  it("should use destructive style for unmatch button", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook13.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleUnmatch("match123", "Buddy");
    }));
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var buttons = alertCall[2];
    var unmatchButton = buttons == null ? void 0 : buttons.find(function (b) {
      return b.text === "Unmatch";
    });
    expect(unmatchButton == null ? void 0 : unmatchButton.style).toBe("destructive");
  }));
  it("should use destructive style for block button", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook14.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleBlock("match123", "Max");
    }));
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var buttons = alertCall[2];
    var blockButton = buttons == null ? void 0 : buttons.find(function (b) {
      return b.text === "Block";
    });
    expect(blockButton == null ? void 0 : blockButton.style).toBe("destructive");
  }));
  it("should have cancel option for all actions", (0, _asyncToGenerator2.default)(function* () {
    var _buttons, _buttons2, _buttons3;
    var _renderHook15 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesActions.useMatchesActions)();
      }),
      result = _renderHook15.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleUnmatch("match123", "Buddy");
    }));
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var buttons = alertCall[2];
    expect((_buttons = buttons) == null ? void 0 : _buttons.find(function (b) {
      return b.text === "Cancel";
    })).toBeDefined();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleBlock("match123", "Max");
    }));
    alertCall = _reactNative2.Alert.alert.mock.calls[1];
    buttons = alertCall[2];
    expect((_buttons2 = buttons) == null ? void 0 : _buttons2.find(function (b) {
      return b.text === "Cancel";
    })).toBeDefined();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleReport("match123", "Charlie");
    }));
    alertCall = _reactNative2.Alert.alert.mock.calls[2];
    buttons = alertCall[2];
    expect((_buttons3 = buttons) == null ? void 0 : _buttons3.find(function (b) {
      return b.text === "Cancel";
    })).toBeDefined();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,