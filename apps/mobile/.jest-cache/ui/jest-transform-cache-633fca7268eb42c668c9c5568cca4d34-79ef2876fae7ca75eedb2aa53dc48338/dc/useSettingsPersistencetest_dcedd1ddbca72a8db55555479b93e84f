dea80a715d6c6a9510a4e61ec748053a
"use strict";

_getJestObj().mock("@react-native-async-storage/async-storage", function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useSettingsPersistence = require("../useSettingsPersistence");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
describe("useSettingsPersistence", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue();
    mockAsyncStorage.removeItem.mockResolvedValue();
  });
  it("should initialize with default options", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useSettingsPersistence.useSettingsPersistence)({
          key: "test-settings"
        });
      }),
      result = _renderHook.result;
    expect(typeof result.current.loadSettings).toBe("function");
    expect(typeof result.current.saveSettings).toBe("function");
    expect(typeof result.current.clearSettings).toBe("function");
  });
  it("should load settings from AsyncStorage", (0, _asyncToGenerator2.default)(function* () {
    var storedSettings = {
      theme: "dark",
      notifications: true
    };
    mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(storedSettings));
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useSettingsPersistence.useSettingsPersistence)({
          key: "user-settings"
        });
      }),
      result = _renderHook2.result;
    var loadedSettings = yield result.current.loadSettings();
    expect(mockAsyncStorage.getItem).toHaveBeenCalledWith("user-settings");
    expect(loadedSettings).toEqual(storedSettings);
  }));
  it("should return initial data when no stored settings", (0, _asyncToGenerator2.default)(function* () {
    var initialData = {
      theme: "light",
      language: "en"
    };
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useSettingsPersistence.useSettingsPersistence)({
          key: "empty-settings",
          initialData: initialData
        });
      }),
      result = _renderHook3.result;
    var loadedSettings = yield result.current.loadSettings();
    expect(loadedSettings).toEqual(initialData);
  }));
  it("should save settings to AsyncStorage", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useSettingsPersistence.useSettingsPersistence)({
          key: "save-test"
        });
      }),
      result = _renderHook4.result;
    var settingsToSave = {
      volume: 75,
      autoPlay: false
    };
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveSettings(settingsToSave);
    }));
    expect(mockAsyncStorage.setItem).toHaveBeenCalledWith("save-test", JSON.stringify(settingsToSave));
  }));
  it("should clear settings from AsyncStorage", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useSettingsPersistence.useSettingsPersistence)({
          key: "clear-test"
        });
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.clearSettings();
    }));
    expect(mockAsyncStorage.removeItem).toHaveBeenCalledWith("clear-test");
  }));
  it("should handle AsyncStorage errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    var consoleSpy = jest.spyOn(console, "error").mockImplementation();
    mockAsyncStorage.getItem.mockRejectedValue(new Error("Storage error"));
    var initialData = {
      fallback: true
    };
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useSettingsPersistence.useSettingsPersistence)({
          key: "error-test",
          initialData: initialData
        });
      }),
      result = _renderHook6.result;
    var loadedSettings = yield result.current.loadSettings();
    expect(loadedSettings).toEqual(initialData);
    expect(consoleSpy).toHaveBeenCalled();
    consoleSpy.mockRestore();
  }));
  it("should handle save errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    var consoleSpy = jest.spyOn(console, "error").mockImplementation();
    mockAsyncStorage.setItem.mockRejectedValue(new Error("Save error"));
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useSettingsPersistence.useSettingsPersistence)({
          key: "save-error-test"
        });
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveSettings({
        test: "data"
      });
    }));
    expect(consoleSpy).toHaveBeenCalled();
    consoleSpy.mockRestore();
  }));
  it("should handle clear errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    var consoleSpy = jest.spyOn(console, "error").mockImplementation();
    mockAsyncStorage.removeItem.mockRejectedValue(new Error("Clear error"));
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useSettingsPersistence.useSettingsPersistence)({
          key: "clear-error-test"
        });
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.clearSettings();
    }));
    expect(consoleSpy).toHaveBeenCalled();
    consoleSpy.mockRestore();
  }));
  it("should work with complex nested objects", (0, _asyncToGenerator2.default)(function* () {
    var complexSettings = {
      profile: {
        name: "John Doe",
        avatar: "avatar.jpg"
      },
      preferences: {
        theme: "dark",
        notifications: {
          email: true,
          push: false,
          sms: true
        }
      },
      history: [1, 2, 3, 4, 5]
    };
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useSettingsPersistence.useSettingsPersistence)({
          key: "complex-settings"
        });
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveSettings(complexSettings);
    }));
    expect(mockAsyncStorage.setItem).toHaveBeenCalledWith("complex-settings", JSON.stringify(complexSettings));
  }));
  it("should return stable function references", function () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useSettingsPersistence.useSettingsPersistence)({
          key: "stable-test"
        });
      }),
      result = _renderHook0.result,
      rerender = _renderHook0.rerender;
    var firstLoad = result.current.loadSettings;
    var firstSave = result.current.saveSettings;
    var firstClear = result.current.clearSettings;
    rerender();
    expect(result.current.loadSettings).toBe(firstLoad);
    expect(result.current.saveSettings).toBe(firstSave);
    expect(result.current.clearSettings).toBe(firstClear);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,