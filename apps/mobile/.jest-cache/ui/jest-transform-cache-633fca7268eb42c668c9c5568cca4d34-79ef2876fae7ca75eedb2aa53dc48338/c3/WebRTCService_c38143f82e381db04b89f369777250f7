8e16e92fc383ade81c76ae7dd0482908
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _events = require("events");
var _reactNativeIncallManager = _interopRequireDefault(require("react-native-incall-manager"));
var _reactNativeWebrtc = require("react-native-webrtc");
var _logger = require("./logger");
var _useAuthStore = require("../stores/useAuthStore");
var _nativeWebrtc = require("../types/native-webrtc");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var WebRTCService = function (_EventEmitter) {
  function WebRTCService() {
    var _this;
    (0, _classCallCheck2.default)(this, WebRTCService);
    _this = _callSuper(this, WebRTCService);
    _this.peerConnection = null;
    _this.localStream = null;
    _this.remoteStream = null;
    _this.socket = null;
    _this.currentCallId = null;
    _this.callStartTime = 0;
    _this.rtcConfiguration = {
      iceServers: function () {
        var servers = [{
          urls: "stun:stun.l.google.com:19302"
        }, {
          urls: "stun:stun1.l.google.com:19302"
        }];
        var turnUrl = process.env.EXPO_PUBLIC_TURN_SERVER_URL;
        var turnUsername = process.env.EXPO_PUBLIC_TURN_USERNAME;
        var turnCredential = process.env.EXPO_PUBLIC_TURN_CREDENTIAL;
        if (turnUrl && turnUsername && turnCredential) {
          var turnServer = {
            urls: turnUrl,
            username: turnUsername,
            credential: turnCredential
          };
          servers.push(turnServer);
          _logger.logger.info("TURN server configured", {
            url: turnUrl
          });
        } else {
          _logger.logger.warn("No TURN server configured. Calls may fail across NAT/firewalls.");
        }
        return servers;
      }(),
      iceCandidatePoolSize: 10
    };
    _this.callState = {
      isActive: false,
      isConnected: false,
      isIncoming: false,
      isMuted: false,
      isVideoEnabled: true,
      callDuration: 0
    };
    _this.setupInCallManager();
    return _this;
  }
  (0, _inherits2.default)(WebRTCService, _EventEmitter);
  return (0, _createClass2.default)(WebRTCService, [{
    key: "setupInCallManager",
    value: function setupInCallManager() {
      try {
        if (typeof _reactNativeIncallManager.default.setKeepScreenOn === "function") {
          _reactNativeIncallManager.default.setKeepScreenOn(true);
          _reactNativeIncallManager.default.setForceSpeakerphoneOn(false);
        }
      } catch (error) {
        _logger.logger.warn("InCallManager not available", {
          error: error instanceof Error ? error : new Error(String(error))
        });
      }
    }
  }, {
    key: "setupSocketListeners",
    value: function setupSocketListeners() {
      var _this2 = this;
      if (this.socket === null) return;
      this.socket.on("incoming-call", function (callData) {
        _this2.handleIncomingCall(callData);
      });
      this.socket.on("call-answered", function (data) {
        void _this2.handleCallAnswered(data);
      });
      this.socket.on("call-ended", function () {
        _this2.endCall();
      });
      this.socket.on("webrtc-offer", function (data) {
        void _this2.handleOffer(data);
      });
      this.socket.on("webrtc-answer", function (data) {
        void _this2.handleAnswer(data);
      });
      this.socket.on("webrtc-ice-candidate", function (data) {
        void _this2.handleIceCandidate(data);
      });
    }
  }, {
    key: "startCall",
    value: function () {
      var _startCall = (0, _asyncToGenerator2.default)(function* (matchId, callType) {
        var _this3 = this;
        try {
          var _ref, _user$_id, _user$firstName;
          var constraints = {
            audio: true,
            video: callType === "video" ? {
              width: {
                min: 640,
                ideal: 1280
              },
              height: {
                min: 480,
                ideal: 720
              },
              frameRate: {
                min: 16,
                ideal: 30
              }
            } : false
          };
          this.localStream = yield _reactNativeWebrtc.mediaDevices.getUserMedia(constraints);
          this.peerConnection = new _reactNativeWebrtc.RTCPeerConnection(this.rtcConfiguration);
          this.setupPeerConnectionListeners();
          this.localStream.getTracks().forEach(function (track) {
            if (_this3.peerConnection !== null && _this3.localStream !== null) {
              _this3.peerConnection.addTrack(track, _this3.localStream);
            }
          });
          var callId = `call_${String(Date.now())}_${Math.random().toString(36).substring(2, 11)}`;
          this.currentCallId = callId;
          var _useAuthStore$getStat = _useAuthStore.useAuthStore.getState(),
            user = _useAuthStore$getStat.user;
          var callerId = (_ref = (_user$_id = user == null ? void 0 : user._id) != null ? _user$_id : user == null ? void 0 : user.id) != null ? _ref : "unknown";
          var callerName = (_user$firstName = user == null ? void 0 : user.firstName) != null ? _user$firstName : "Unknown User";
          var callData = {
            callId: callId,
            matchId: matchId,
            callerId: callerId,
            callerName: callerName,
            callType: callType,
            timestamp: Date.now()
          };
          this.callState = _objectSpread(_objectSpread({}, this.callState), {}, {
            isActive: true,
            isIncoming: false,
            callData: callData,
            localStream: this.localStream
          });
          if (this.socket !== null) {
            this.socket.emit("initiate-call", callData);
          }
          this.emit("callStateChanged", this.callState);
          if (typeof _reactNativeIncallManager.default.start === "function") {
            _reactNativeIncallManager.default.start({
              media: callType === "video" ? "video" : "audio"
            });
          }
          return true;
        } catch (error) {
          _logger.logger.error("Error starting call", {
            error: error instanceof Error ? error : new Error(String(error))
          });
          this.emit("callError", error);
          return false;
        }
      });
      function startCall(_x, _x2) {
        return _startCall.apply(this, arguments);
      }
      return startCall;
    }()
  }, {
    key: "answerCall",
    value: function () {
      var _answerCall = (0, _asyncToGenerator2.default)(function* () {
        var _this4 = this;
        try {
          if (this.callState.callData === undefined) return false;
          var constraints = {
            audio: true,
            video: this.callState.callData.callType === "video" ? {
              width: {
                min: 640,
                ideal: 1280
              },
              height: {
                min: 480,
                ideal: 720
              },
              frameRate: {
                min: 16,
                ideal: 30
              }
            } : false
          };
          this.localStream = yield _reactNativeWebrtc.mediaDevices.getUserMedia(constraints);
          this.peerConnection = new _reactNativeWebrtc.RTCPeerConnection(this.rtcConfiguration);
          this.setupPeerConnectionListeners();
          this.localStream.getTracks().forEach(function (track) {
            if (_this4.peerConnection !== null && _this4.localStream !== null) {
              _this4.peerConnection.addTrack(track, _this4.localStream);
            }
          });
          this.callState = _objectSpread(_objectSpread({}, this.callState), {}, {
            isActive: true,
            isIncoming: false,
            localStream: this.localStream
          });
          if (this.callState.callData !== undefined) {
            if (this.socket !== null) {
              this.socket.emit("answer-call", {
                callId: this.currentCallId,
                matchId: this.callState.callData.matchId
              });
            }
          }
          this.emit("callStateChanged", this.callState);
          this.startCallTimer();
          if (this.callState.callData !== undefined) {
            if (typeof _reactNativeIncallManager.default.start === "function") {
              _reactNativeIncallManager.default.start({
                media: this.callState.callData.callType === "video" ? "video" : "audio"
              });
            }
          }
          return true;
        } catch (error) {
          _logger.logger.error("Error answering call", {
            error: error instanceof Error ? error : new Error(String(error))
          });
          this.emit("callError", error);
          return false;
        }
      });
      function answerCall() {
        return _answerCall.apply(this, arguments);
      }
      return answerCall;
    }()
  }, {
    key: "rejectCall",
    value: function rejectCall() {
      if (this.callState.callData !== undefined) {
        if (this.socket !== null) {
          this.socket.emit("reject-call", {
            callId: this.callState.callData.callId,
            matchId: this.callState.callData.matchId
          });
        }
      }
      this.endCall();
    }
  }, {
    key: "endCall",
    value: function endCall() {
      if (this.peerConnection !== null) {
        this.peerConnection.close();
        this.peerConnection = null;
      }
      try {
        if (this.localStream !== null) {
          this.localStream.getTracks().forEach(function (track) {
            track.stop();
          });
          this.localStream = null;
        }
      } catch (error) {
        _logger.logger.error("Error ending local stream", {
          error: error instanceof Error ? error : new Error(String(error))
        });
      }
      try {
        if (this.remoteStream !== null) {
          this.remoteStream.getTracks().forEach(function (track) {
            track.stop();
          });
          this.remoteStream = null;
        }
      } catch (error) {
        _logger.logger.error("Error ending remote stream", {
          error: error instanceof Error ? error : new Error(String(error))
        });
      }
      this.callState = {
        isActive: false,
        isConnected: false,
        isIncoming: false,
        isMuted: false,
        isVideoEnabled: true,
        callDuration: 0
      };
      if (this.currentCallId !== null) {
        if (this.socket !== null) {
          this.socket.emit("end-call", {
            callId: this.currentCallId
          });
        }
      }
      this.currentCallId = null;
      this.callStartTime = 0;
      if (typeof _reactNativeIncallManager.default.stop === "function") {
        _reactNativeIncallManager.default.stop();
      }
      this.emit("callStateChanged", this.callState);
    }
  }, {
    key: "toggleMute",
    value: function toggleMute() {
      if (this.localStream !== null) {
        var audioTracks = this.localStream.getAudioTracks();
        if (audioTracks.length > 0) {
          var audioTrack = audioTracks[0];
          if (audioTrack !== undefined) {
            audioTrack.enabled = !audioTrack.enabled;
            this.callState.isMuted = !audioTrack.enabled;
            this.emit("callStateChanged", this.callState);
          }
        }
      }
    }
  }, {
    key: "toggleVideo",
    value: function toggleVideo() {
      if (this.localStream !== null) {
        var videoTracks = this.localStream.getVideoTracks();
        if (videoTracks.length > 0) {
          var videoTrack = videoTracks[0];
          if (videoTrack !== undefined) {
            videoTrack.enabled = !videoTrack.enabled;
            this.callState.isVideoEnabled = videoTrack.enabled;
            this.emit("callStateChanged", this.callState);
          }
        }
      }
    }
  }, {
    key: "switchCamera",
    value: function switchCamera() {
      if (this.localStream !== null) {
        var videoTracks = this.localStream.getVideoTracks();
        if (videoTracks.length > 0) {
          var videoTrack = videoTracks[0];
          if (videoTrack && (0, _nativeWebrtc.hasNativeCameraSwitch)(videoTrack)) {
            videoTrack._switchCamera();
          }
        }
      }
    }
  }, {
    key: "toggleSpeaker",
    value: function toggleSpeaker() {
      if (typeof _reactNativeIncallManager.default.setForceSpeakerphoneOn === "function") {
        _reactNativeIncallManager.default.setForceSpeakerphoneOn(true);
      }
    }
  }, {
    key: "setupPeerConnectionListeners",
    value: function setupPeerConnectionListeners() {
      var _this5 = this;
      if (this.peerConnection === null) return;
      var peerConnection = this.peerConnection;
      peerConnection.onicecandidate = function (event) {
        if (event !== null && event.candidate !== null && event.candidate !== undefined) {
          if (_this5.socket !== null) {
            _this5.socket.emit("webrtc-ice-candidate", {
              callId: _this5.currentCallId,
              candidate: event.candidate
            });
          }
        }
      };
      peerConnection.ontrack = function (event) {
        if (event.streams && event.streams.length > 0) {
          var stream = event.streams[0];
          if (stream !== undefined && stream !== null) {
            _this5.remoteStream = stream;
            _this5.callState.remoteStream = stream;
            _this5.emit("callStateChanged", _this5.callState);
          }
        }
      };
      peerConnection.onconnectionstatechange = function () {
        var _this5$peerConnection;
        var state = (_this5$peerConnection = _this5.peerConnection) == null ? void 0 : _this5$peerConnection.connectionState;
        if (state === "connected") {
          _this5.callState.isConnected = true;
          _this5.startCallTimer();
          _this5.emit("callStateChanged", _this5.callState);
        } else if (state === "disconnected" || state === "failed") {
          _this5.endCall();
        }
      };
      var extendedPeerConnection = this.peerConnection;
      extendedPeerConnection.oniceconnectionstatechange = function () {
        var _this5$peerConnection2;
        var iceState = (_this5$peerConnection2 = _this5.peerConnection) == null ? void 0 : _this5$peerConnection2.iceConnectionState;
        _logger.logger.debug("ICE connection state changed", {
          state: iceState
        });
        if (iceState === "failed") {
          _logger.logger.error("ICE connection failed");
          _this5.emit("callError", new Error("ICE connection failed"));
        }
      };
      extendedPeerConnection.onicegatheringstatechange = function () {
        var _this5$peerConnection3;
        var gatheringState = (_this5$peerConnection3 = _this5.peerConnection) == null ? void 0 : _this5$peerConnection3.iceGatheringState;
        _logger.logger.debug("ICE gathering state changed", {
          state: gatheringState
        });
      };
    }
  }, {
    key: "handleIncomingCall",
    value: function handleIncomingCall(callData) {
      this.currentCallId = callData.callId;
      this.callState = _objectSpread(_objectSpread({}, this.callState), {}, {
        isActive: true,
        isIncoming: true,
        callData: callData
      });
      if (typeof _reactNativeIncallManager.default.start === "function") {
        _reactNativeIncallManager.default.start({
          media: callData.callType === "video" ? "video" : "audio",
          ringback: "_DTMF_"
        });
      }
      this.emit("callStateChanged", this.callState);
    }
  }, {
    key: "handleCallAnswered",
    value: function () {
      var _handleCallAnswered = (0, _asyncToGenerator2.default)(function* (data) {
        if (this.peerConnection !== null && data.accepted) {
          var offer = yield this.peerConnection.createOffer();
          yield this.peerConnection.setLocalDescription(offer);
          if (this.socket !== null) {
            this.socket.emit("webrtc-offer", {
              callId: this.currentCallId,
              offer: offer
            });
          }
        }
      });
      function handleCallAnswered(_x3) {
        return _handleCallAnswered.apply(this, arguments);
      }
      return handleCallAnswered;
    }()
  }, {
    key: "handleOffer",
    value: function () {
      var _handleOffer = (0, _asyncToGenerator2.default)(function* (data) {
        if (this.peerConnection !== null) {
          if (data.offer !== undefined) {
            var _data$offer$sdp;
            var offer = new _reactNativeWebrtc.RTCSessionDescription({
              sdp: (_data$offer$sdp = data.offer.sdp) != null ? _data$offer$sdp : '',
              type: data.offer.type
            });
            yield this.peerConnection.setRemoteDescription(offer);
          }
          var answer = yield this.peerConnection.createAnswer();
          yield this.peerConnection.setLocalDescription(answer);
          if (this.socket !== null) {
            this.socket.emit("webrtc-answer", {
              callId: this.currentCallId,
              answer: answer
            });
          }
        }
      });
      function handleOffer(_x4) {
        return _handleOffer.apply(this, arguments);
      }
      return handleOffer;
    }()
  }, {
    key: "handleAnswer",
    value: function () {
      var _handleAnswer = (0, _asyncToGenerator2.default)(function* (data) {
        if (this.peerConnection !== null) {
          if (data.answer !== undefined) {
            var _data$answer$sdp;
            var answer = new _reactNativeWebrtc.RTCSessionDescription({
              sdp: (_data$answer$sdp = data.answer.sdp) != null ? _data$answer$sdp : '',
              type: data.answer.type
            });
            yield this.peerConnection.setRemoteDescription(answer);
          }
        }
      });
      function handleAnswer(_x5) {
        return _handleAnswer.apply(this, arguments);
      }
      return handleAnswer;
    }()
  }, {
    key: "handleIceCandidate",
    value: function () {
      var _handleIceCandidate = (0, _asyncToGenerator2.default)(function* (data) {
        if (this.peerConnection !== null && data.candidate !== undefined) {
          yield this.peerConnection.addIceCandidate(new _reactNativeWebrtc.RTCIceCandidate(data.candidate));
        }
      });
      function handleIceCandidate(_x6) {
        return _handleIceCandidate.apply(this, arguments);
      }
      return handleIceCandidate;
    }()
  }, {
    key: "startCallTimer",
    value: function startCallTimer() {
      var _this6 = this;
      this.callStartTime = Date.now();
      var timer = setInterval(function () {
        if (_this6.callState.isActive && _this6.callState.isConnected) {
          _this6.callState.callDuration = Math.floor((Date.now() - _this6.callStartTime) / 1000);
          _this6.emit("callStateChanged", _this6.callState);
        } else {
          clearInterval(timer);
        }
      }, 1000);
    }
  }, {
    key: "getCallState",
    value: function getCallState() {
      return _objectSpread({}, this.callState);
    }
  }, {
    key: "isCallActive",
    value: function isCallActive() {
      return this.callState.isActive;
    }
  }]);
}(_events.EventEmitter);
var webRTCServiceInstance = new WebRTCService();
var _default = exports.default = webRTCServiceInstance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,