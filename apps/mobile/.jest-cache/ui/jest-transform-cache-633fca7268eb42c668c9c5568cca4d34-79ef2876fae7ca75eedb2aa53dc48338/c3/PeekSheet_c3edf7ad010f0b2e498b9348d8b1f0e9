0270c25bcfdcf4707cf90e305daf2a7c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PeekSheet = PeekSheet;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _unifiedTheme = require("../../theme/unified-theme");
var _ModernSwipeCard = _interopRequireDefault(require("../ModernSwipeCard"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  SCREEN_WIDTH = _Dimensions$get.width;
function PeekSheet(_ref) {
  var nextPet = _ref.nextPet,
    _ref$show = _ref.show,
    show = _ref$show === void 0 ? false : _ref$show;
  var scale = (0, _react.useRef)(new _reactNative.Animated.Value(0.9)).current;
  var opacity = (0, _react.useRef)(new _reactNative.Animated.Value(0.3)).current;
  (0, _react.useEffect)(function () {
    if (show && nextPet) {
      _reactNative.Animated.parallel([_reactNative.Animated.spring(scale, {
        toValue: 1,
        tension: 50,
        friction: 7,
        useNativeDriver: true
      }), _reactNative.Animated.timing(opacity, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true
      })]).start();
    } else {
      _reactNative.Animated.parallel([_reactNative.Animated.timing(scale, {
        toValue: 0.9,
        duration: 200,
        useNativeDriver: true
      }), _reactNative.Animated.timing(opacity, {
        toValue: 0.3,
        duration: 200,
        useNativeDriver: true
      })]).start();
    }
  }, [show, nextPet, scale, opacity]);
  if (!nextPet || !show) return (0, _jsxRuntime.jsx)(_reactNative.View, {});
  return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
    style: [styles.container, {
      opacity: opacity,
      transform: [{
        scale: scale
      }]
    }],
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.cardWrapper,
      children: (0, _jsxRuntime.jsx)(_ModernSwipeCard.default, {
        pet: {
          _id: nextPet._id,
          name: nextPet.name,
          age: nextPet.age,
          breed: nextPet.breed,
          photos: nextPet.photos.map(function (p) {
            return typeof p === 'string' ? p : p.url;
          }).filter(function (p) {
            return typeof p === 'string';
          }),
          bio: nextPet.description || '',
          distance: 2.5,
          compatibility: 85,
          isVerified: true,
          tags: ['Next']
        },
        onSwipeLeft: function onSwipeLeft() {},
        onSwipeRight: function onSwipeRight() {},
        onSwipeUp: function onSwipeUp() {},
        isTopCard: false,
        disabled: true,
        style: styles.nextCard
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.peekIndicator,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.peekDot
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    bottom: 100,
    left: SCREEN_WIDTH / 2 - (SCREEN_WIDTH - _unifiedTheme.Theme.spacing['4xl']) / 4,
    width: (SCREEN_WIDTH - _unifiedTheme.Theme.spacing['4xl']) / 2,
    height: '50%',
    zIndex: 1,
    pointerEvents: 'none'
  },
  cardWrapper: {
    flex: 1,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 8
    },
    shadowOpacity: 0.15,
    shadowRadius: 12,
    elevation: 5
  },
  nextCard: {
    width: '100%',
    height: '100%',
    borderRadius: _unifiedTheme.Theme.borderRadius.xl
  },
  peekIndicator: {
    position: 'absolute',
    top: -20,
    left: '50%',
    marginLeft: -10,
    width: 20,
    height: 4,
    borderRadius: 2,
    backgroundColor: _unifiedTheme.Theme.colors.neutral[400],
    opacity: 0.6
  },
  peekDot: {
    width: '100%',
    height: '100%',
    borderRadius: 2,
    backgroundColor: _unifiedTheme.Theme.colors.primary[500]
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,