09f87a6a5b71d46f7e293bb824844815
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSecureStorage = exports.createAsyncStorage = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _core = require("@pawfectmatch/core");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var SecureStore = _interopRequireWildcard(require("expo-secure-store"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var createSecureStorage = exports.createSecureStorage = function createSecureStorage() {
  return {
    getItem: function () {
      var _getItem = (0, _asyncToGenerator2.default)(function* (name) {
        try {
          var value = yield SecureStore.getItemAsync(name);
          return value;
        } catch (error) {
          var message = error instanceof Error ? error.message : "Unknown error";
          _core.logger.error("secure-storage.getItem.failed", {
            name: name,
            message: message
          });
          return null;
        }
      });
      function getItem(_x) {
        return _getItem.apply(this, arguments);
      }
      return getItem;
    }(),
    setItem: function () {
      var _setItem = (0, _asyncToGenerator2.default)(function* (name, value) {
        try {
          yield SecureStore.setItemAsync(name, value);
        } catch (error) {
          var err = error instanceof Error ? error : new Error("Failed to set secure item");
          _core.logger.error("secure-storage.setItem.failed", {
            name: name,
            message: err.message
          });
          throw err;
        }
      });
      function setItem(_x2, _x3) {
        return _setItem.apply(this, arguments);
      }
      return setItem;
    }(),
    removeItem: function () {
      var _removeItem = (0, _asyncToGenerator2.default)(function* (name) {
        try {
          yield SecureStore.deleteItemAsync(name);
        } catch (error) {
          var err = error instanceof Error ? error : new Error("Failed to remove secure item");
          _core.logger.error("secure-storage.removeItem.failed", {
            name: name,
            message: err.message
          });
          throw err;
        }
      });
      function removeItem(_x4) {
        return _removeItem.apply(this, arguments);
      }
      return removeItem;
    }()
  };
};
var createAsyncStorage = exports.createAsyncStorage = function createAsyncStorage() {
  return {
    getItem: function () {
      var _getItem2 = (0, _asyncToGenerator2.default)(function* (name) {
        try {
          var value = yield _asyncStorage.default.getItem(name);
          return value;
        } catch (error) {
          var message = error instanceof Error ? error.message : "Unknown error";
          _core.logger.error("async-storage.getItem.failed", {
            name: name,
            message: message
          });
          return null;
        }
      });
      function getItem(_x5) {
        return _getItem2.apply(this, arguments);
      }
      return getItem;
    }(),
    setItem: function () {
      var _setItem2 = (0, _asyncToGenerator2.default)(function* (name, value) {
        try {
          yield _asyncStorage.default.setItem(name, value);
        } catch (error) {
          var err = error instanceof Error ? error : new Error("Failed to set async item");
          _core.logger.error("async-storage.setItem.failed", {
            name: name,
            message: err.message
          });
          throw err;
        }
      });
      function setItem(_x6, _x7) {
        return _setItem2.apply(this, arguments);
      }
      return setItem;
    }(),
    removeItem: function () {
      var _removeItem2 = (0, _asyncToGenerator2.default)(function* (name) {
        try {
          yield _asyncStorage.default.removeItem(name);
        } catch (error) {
          var err = error instanceof Error ? error : new Error("Failed to remove async item");
          _core.logger.error("async-storage.removeItem.failed", {
            name: name,
            message: err.message
          });
          throw err;
        }
      });
      function removeItem(_x8) {
        return _removeItem2.apply(this, arguments);
      }
      return removeItem;
    }()
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,