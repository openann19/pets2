{"version":3,"names":["_NativeEventEmitter","_interopRequireDefault","require","_Platform","_NativePushNotificationManagerIOS","_invariant","PushNotificationEmitter","NativeEventEmitter","Platform","OS","NativePushNotificationManagerIOS","_notifHandlers","Map","DEVICE_NOTIF_EVENT","NOTIF_REGISTER_EVENT","NOTIF_REGISTRATION_ERROR_EVENT","DEVICE_LOCAL_NOTIF_EVENT","PushNotificationIOS","nativeNotif","_this","_classCallCheck2","default","_data","_remoteNotificationCompleteCallbackCalled","_isRemote","remote","_notificationId","notificationId","Object","keys","forEach","notifKey","notifVal","_alert","alert","_sound","sound","_badgeCount","badge","_category","category","_contentAvailable","_threadID","applicationIconBadgeNumber","soundName","alertBody","userInfo","_createClass2","key","value","finish","fetchResult","invariant","onFinishRemoteNotification","getMessage","getSound","getCategory","getAlert","getContentAvailable","getBadgeCount","getData","getThreadID","presentLocalNotification","details","scheduleLocalNotification","cancelAllLocalNotifications","removeAllDeliveredNotifications","getDeliveredNotifications","callback","removeDeliveredNotifications","identifiers","setApplicationIconBadgeNumber","number","getApplicationIconBadgeNumber","cancelLocalNotifications","getScheduledLocalNotifications","addEventListener","type","handler","listener","addListener","notifData","registrationInfo","deviceToken","errorInfo","set","removeEventListener","get","remove","delete","requestPermissions","permissions","requestedPermissions","abandonPermissions","checkPermissions","getInitialNotification","then","notification","getAuthorizationStatus","FetchResult","NewData","NoData","ResultFailed","module","exports"],"sources":["PushNotificationIOS.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport Platform from '../Utilities/Platform';\nimport NativePushNotificationManagerIOS from './NativePushNotificationManagerIOS';\nimport invariant from 'invariant';\n\ntype NativePushNotificationIOSEventDefinitions = {\n  remoteNotificationReceived: [\n    {\n      notificationId: string,\n      remote: boolean,\n      ...\n    },\n  ],\n  remoteNotificationsRegistered: [\n    {\n      deviceToken?: ?string,\n      ...\n    },\n  ],\n  remoteNotificationRegistrationError: [\n    {\n      message: string,\n      code: number,\n      details: {...},\n    },\n  ],\n  localNotificationReceived: [{...}],\n};\n\nconst PushNotificationEmitter =\n  new NativeEventEmitter<NativePushNotificationIOSEventDefinitions>(\n    // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n    // If you want to use the native module on other platforms, please remove this condition and test its behavior\n    Platform.OS !== 'ios' ? null : NativePushNotificationManagerIOS,\n  );\n\nconst _notifHandlers = new Map<string, void | EventSubscription>();\n\nconst DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nconst NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nconst NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nconst DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\n\nexport type ContentAvailable = 1 | null | void;\n\nexport type FetchResult = {\n  NewData: string,\n  NoData: string,\n  ResultFailed: string,\n  ...\n};\n\n/**\n * An event emitted by PushNotificationIOS.\n */\nexport type PushNotificationEventName = $Keys<{\n  /**\n   * Fired when a remote notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  notification: string,\n  /**\n   * Fired when a local notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  localNotification: string,\n  /**\n   * Fired when the user registers for remote notifications. The handler will be\n   * invoked with a hex string representing the deviceToken.\n   */\n  register: string,\n  /**\n   * Fired when the user fails to register for remote notifications. Typically\n   * occurs when APNS is having issues, or the device is a simulator. The\n   * handler will be invoked with {message: string, code: number, details: any}.\n   */\n  registrationError: string,\n  ...\n}>;\n\n/**\n *\n * Handle push notifications for your app, including permission handling and\n * icon badge number.\n *\n * See https://reactnative.dev/docs/pushnotificationios\n */\nclass PushNotificationIOS {\n  _data: Object;\n  _alert: string | Object;\n  _sound: string;\n  _category: string;\n  _contentAvailable: ContentAvailable;\n  _badgeCount: number;\n  _notificationId: string;\n  _isRemote: boolean;\n  _remoteNotificationCompleteCallbackCalled: boolean;\n  _threadID: string;\n\n  static FetchResult: FetchResult = {\n    NewData: 'UIBackgroundFetchResultNewData',\n    NoData: 'UIBackgroundFetchResultNoData',\n    ResultFailed: 'UIBackgroundFetchResultFailed',\n  };\n\n  /**\n   * Schedules the localNotification for immediate presentation.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#presentlocalnotification\n   */\n  static presentLocalNotification(details: Object): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.presentLocalNotification(details);\n  }\n\n  /**\n   * Schedules the localNotification for future presentation.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#schedulelocalnotification\n   */\n  static scheduleLocalNotification(details: Object): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.scheduleLocalNotification(details);\n  }\n\n  /**\n   * Cancels all scheduled localNotifications.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#cancelalllocalnotifications\n   */\n  static cancelAllLocalNotifications(): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.cancelAllLocalNotifications();\n  }\n\n  /**\n   * Remove all delivered notifications from Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#removealldeliverednotifications\n   */\n  static removeAllDeliveredNotifications(): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.removeAllDeliveredNotifications();\n  }\n\n  /**\n   * Provides you with a list of the appâ€™s notifications that are still displayed in Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getdeliverednotifications\n   */\n  static getDeliveredNotifications(\n    callback: (notifications: Array<Object>) => void,\n  ): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.getDeliveredNotifications(callback);\n  }\n\n  /**\n   * Removes the specified notifications from Notification Center\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#removedeliverednotifications\n   */\n  static removeDeliveredNotifications(identifiers: Array<string>): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.removeDeliveredNotifications(identifiers);\n  }\n\n  /**\n   * Sets the badge number for the app icon on the home screen.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#setapplicationiconbadgenumber\n   */\n  static setApplicationIconBadgeNumber(number: number): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.setApplicationIconBadgeNumber(number);\n  }\n\n  /**\n   * Gets the current badge number for the app icon on the home screen.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getapplicationiconbadgenumber\n   */\n  static getApplicationIconBadgeNumber(callback: Function): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.getApplicationIconBadgeNumber(callback);\n  }\n\n  /**\n   * Cancel local notifications.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#cancellocalnotification\n   */\n  static cancelLocalNotifications(userInfo: Object): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.cancelLocalNotifications(userInfo);\n  }\n\n  /**\n   * Gets the local notifications that are currently scheduled.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getscheduledlocalnotifications\n   */\n  static getScheduledLocalNotifications(callback: Function): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.getScheduledLocalNotifications(callback);\n  }\n\n  /**\n   * Attaches a listener to remote or local notification events while the app\n   * is running in the foreground or the background.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#addeventlistener\n   */\n  static addEventListener(\n    type: PushNotificationEventName,\n    handler: Function,\n  ): void {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    let listener;\n    if (type === 'notification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_NOTIF_EVENT,\n        notifData => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'localNotification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_LOCAL_NOTIF_EVENT,\n        notifData => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'register') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTER_EVENT,\n        registrationInfo => {\n          handler(registrationInfo.deviceToken);\n        },\n      );\n    } else if (type === 'registrationError') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTRATION_ERROR_EVENT,\n        errorInfo => {\n          handler(errorInfo);\n        },\n      );\n    }\n    _notifHandlers.set(type, listener);\n  }\n\n  /**\n   * Removes the event listener. Do this in `componentWillUnmount` to prevent\n   * memory leaks.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#removeeventlistener\n   */\n  static removeEventListener(\n    type: PushNotificationEventName,\n    handler: Function,\n  ): void {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    const listener = _notifHandlers.get(type);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _notifHandlers.delete(type);\n  }\n\n  /**\n   * Requests notification permissions from iOS, prompting the user's\n   * dialog box. By default, it will request all notification permissions, but\n   * a subset of these can be requested by passing a map of requested\n   * permissions.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#requestpermissions\n   */\n  static requestPermissions(permissions?: {\n    alert?: boolean,\n    badge?: boolean,\n    sound?: boolean,\n    ...\n  }): Promise<{\n    alert: boolean,\n    badge: boolean,\n    sound: boolean,\n    ...\n  }> {\n    let requestedPermissions = {\n      alert: true,\n      badge: true,\n      sound: true,\n    };\n    if (permissions) {\n      requestedPermissions = {\n        alert: !!permissions.alert,\n        badge: !!permissions.badge,\n        sound: !!permissions.sound,\n      };\n    }\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    return NativePushNotificationManagerIOS.requestPermissions(\n      requestedPermissions,\n    );\n  }\n\n  /**\n   * Unregister for all remote notifications received via Apple Push Notification service.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#abandonpermissions\n   */\n  static abandonPermissions(): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.abandonPermissions();\n  }\n\n  /**\n   * See what push permissions are currently enabled. `callback` will be\n   * invoked with a `permissions` object.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#checkpermissions\n   */\n  static checkPermissions(callback: Function): void {\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.checkPermissions(callback);\n  }\n\n  /**\n   * This method returns a promise that resolves to either the notification\n   * object if the app was launched by a push notification, or `null` otherwise.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getinitialnotification\n   */\n  static getInitialNotification(): Promise<?PushNotificationIOS> {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    return NativePushNotificationManagerIOS.getInitialNotification().then(\n      notification => {\n        return notification && new PushNotificationIOS(notification);\n      },\n    );\n  }\n\n  /**\n   * This method returns a promise that resolves to notification authorization status.\n   */\n  static getAuthorizationStatus(\n    callback: (authorizationStatus: number) => void,\n  ): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n\n    NativePushNotificationManagerIOS.getAuthorizationStatus(callback);\n  }\n\n  /**\n   * You will never need to instantiate `PushNotificationIOS` yourself.\n   * Listening to the `notification` event and invoking\n   * `getInitialNotification` is sufficient\n   *\n   */\n  constructor(nativeNotif: Object) {\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n\n    if (nativeNotif.remote) {\n      // Extract data from Apple's `aps` dict as defined:\n      // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService\n      Object.keys(nativeNotif).forEach(notifKey => {\n        const notifVal = nativeNotif[notifKey];\n        if (notifKey === 'aps') {\n          this._alert = notifVal.alert;\n          this._sound = notifVal.sound;\n          this._badgeCount = notifVal.badge;\n          this._category = notifVal.category;\n          this._contentAvailable = notifVal['content-available'];\n          this._threadID = notifVal['thread-id'];\n        } else {\n          this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      // Local notifications aren't being sent down with `aps` dict.\n      this._badgeCount = nativeNotif.applicationIconBadgeNumber;\n      this._sound = nativeNotif.soundName;\n      this._alert = nativeNotif.alertBody;\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n    }\n  }\n\n  /**\n   * This method is available for remote notifications that have been received via:\n   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#finish\n   */\n  finish(fetchResult: string): void {\n    if (\n      !this._isRemote ||\n      !this._notificationId ||\n      this._remoteNotificationCompleteCallbackCalled\n    ) {\n      return;\n    }\n    this._remoteNotificationCompleteCallbackCalled = true;\n\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.onFinishRemoteNotification(\n      this._notificationId,\n      fetchResult,\n    );\n  }\n\n  /**\n   * An alias for `getAlert` to get the notification's main message string\n   */\n  getMessage(): ?string | ?Object {\n    // alias because \"alert\" is an ambiguous name\n    return this._alert;\n  }\n\n  /**\n   * Gets the sound string from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getsound\n   */\n  getSound(): ?string {\n    return this._sound;\n  }\n\n  /**\n   * Gets the category string from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getcategory\n   */\n  getCategory(): ?string {\n    return this._category;\n  }\n\n  /**\n   * Gets the notification's main message from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getalert\n   */\n  getAlert(): ?string | ?Object {\n    return this._alert;\n  }\n\n  /**\n   * Gets the content-available number from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getcontentavailable\n   */\n  getContentAvailable(): ContentAvailable {\n    return this._contentAvailable;\n  }\n\n  /**\n   * Gets the badge count number from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getbadgecount\n   */\n  getBadgeCount(): ?number {\n    return this._badgeCount;\n  }\n\n  /**\n   * Gets the data object on the notif\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getdata\n   */\n  getData(): ?Object {\n    return this._data;\n  }\n\n  /**\n   * Gets the thread ID on the notif\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getthreadid\n   */\n  getThreadID(): ?string {\n    return this._threadID;\n  }\n}\n\nmodule.exports = PushNotificationIOS;\n"],"mappings":"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","ignoreList":[]}