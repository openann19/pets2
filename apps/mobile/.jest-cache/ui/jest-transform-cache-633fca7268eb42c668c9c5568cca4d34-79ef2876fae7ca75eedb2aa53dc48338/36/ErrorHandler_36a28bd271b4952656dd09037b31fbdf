74f4a9843684ec4b2cd5f36e8cf135fd
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorHandler = exports.ErrorHandler = void 0;
var environment_1 = require("../utils/environment");
var isPromiseRejectionEvent = function isPromiseRejectionEvent(event) {
  return 'reason' in event;
};
var isErrorEvent = function isErrorEvent(event) {
  return 'error' in event;
};
var stringifyUnknown = function stringifyUnknown(value) {
  if (value instanceof Error) {
    return value.message;
  }
  if (typeof value === 'object' && value !== null) {
    try {
      return JSON.stringify(value);
    } catch (_unused) {
      return '[unserializable object]';
    }
  }
  return String(value);
};
var isRecordWithMessage = function isRecordWithMessage(value) {
  return typeof value === 'object' && value !== null && 'message' in value;
};
var ErrorHandlerService = function () {
  function ErrorHandlerService() {
    (0, _classCallCheck2.default)(this, ErrorHandlerService);
    this.errorQueue = [];
    this.notificationHandlers = [];
    this.errorLoggers = [];
    this.maxQueueSize = 1000;
    this.isProduction = process.env['NODE_ENV'] === 'production';
    this.setupGlobalErrorHandlers();
  }
  return (0, _createClass2.default)(ErrorHandlerService, [{
    key: "onNotification",
    value: function onNotification(handler) {
      this.notificationHandlers.push(handler);
    }
  }, {
    key: "onErrorLog",
    value: function onErrorLog(handler) {
      this.errorLoggers.push(handler);
    }
  }, {
    key: "handleError",
    value: function handleError(error) {
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var processedError = this.processError(error, context, options);
      this.addToQueue(processedError);
      if (options.logError !== false) {
        this.logError(processedError);
      }
      if (options.showNotification !== false && processedError.notification != null) {
        this.showNotification(processedError.notification);
      }
      return processedError;
    }
  }, {
    key: "handleApiError",
    value: function handleApiError(error) {
      var _options$method, _options$endpoint;
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var apiContext = _objectSpread(_objectSpread({}, context), {}, {
        component: 'API',
        action: `${(_options$method = options.method) != null ? _options$method : 'REQUEST'} ${(_options$endpoint = options.endpoint) != null ? _options$endpoint : 'unknown'}`,
        metadata: _objectSpread(_objectSpread({}, context.metadata), {}, {
          endpoint: options.endpoint,
          method: options.method,
          statusCode: options.statusCode
        })
      });
      this.createApiErrorNotification(error, options);
      this.createApiErrorRecovery(options.statusCode);
      return this.handleError(error, apiContext, {
        showNotification: options.showNotification !== false,
        severity: this.getApiErrorSeverity(options.statusCode)
      });
    }
  }, {
    key: "handleAuthError",
    value: function handleAuthError(error) {
      var _options$authMethod;
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var authContext = _objectSpread(_objectSpread({}, context), {}, {
        component: 'Authentication',
        action: (_options$authMethod = options.authMethod) != null ? _options$authMethod : 'authenticate',
        severity: 'high',
        metadata: _objectSpread(_objectSpread({}, context.metadata), {}, {
          authMethod: options.authMethod
        })
      });
      this.createErrorNotification({
        id: 'auth-error',
        message: this.getAuthErrorMessage(error),
        context: authContext,
        timestamp: new Date()
      });
      return this.handleError(error, authContext, {
        showNotification: options.showNotification !== false,
        severity: 'high'
      });
    }
  }, {
    key: "handlePaymentError",
    value: function handlePaymentError(error) {
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var paymentContext = _objectSpread(_objectSpread({}, context), {}, {
        component: 'Payment',
        action: 'process_payment',
        severity: 'high',
        metadata: _objectSpread(_objectSpread({}, context.metadata), {}, {
          paymentMethod: options.paymentMethod,
          amount: options.amount,
          currency: options.currency
        })
      });
      this.createErrorNotification({
        id: 'payment-error',
        message: this.getPaymentErrorMessage(error),
        context: paymentContext,
        timestamp: new Date()
      });
      return this.handleError(error, paymentContext, {
        showNotification: options.showNotification !== false,
        severity: 'high'
      });
    }
  }, {
    key: "handleNetworkError",
    value: function handleNetworkError(error) {
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var networkContext = _objectSpread(_objectSpread({}, context), {}, {
        component: 'Network',
        action: 'network_request',
        severity: 'medium',
        metadata: _objectSpread(_objectSpread({}, context.metadata), {}, {
          retryable: options.retryable
        })
      });
      this.createErrorNotification({
        id: 'network-error',
        message: 'Please check your internet connection and try again.',
        context: networkContext,
        timestamp: new Date()
      });
      return this.handleError(error, networkContext, {
        showNotification: options.showNotification !== false,
        severity: 'medium'
      });
    }
  }, {
    key: "getErrorStats",
    value: function getErrorStats() {
      var now = new Date();
      var oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
      var recent = this.errorQueue.filter(function (error) {
        return error.timestamp >= oneHourAgo;
      });
      var bySeverity = this.errorQueue.reduce(function (acc, error) {
        var _error$context$severi, _acc$severity;
        var severity = (_error$context$severi = error.context.severity) != null ? _error$context$severi : 'medium';
        acc[severity] = ((_acc$severity = acc[severity]) != null ? _acc$severity : 0) + 1;
        return acc;
      }, {});
      var byComponent = this.errorQueue.reduce(function (acc, error) {
        var _error$context$compon, _acc$component;
        var component = (_error$context$compon = error.context.component) != null ? _error$context$compon : 'unknown';
        acc[component] = ((_acc$component = acc[component]) != null ? _acc$component : 0) + 1;
        return acc;
      }, {});
      return {
        total: this.errorQueue.length,
        bySeverity: bySeverity,
        byComponent: byComponent,
        recent: recent.slice(-10)
      };
    }
  }, {
    key: "clearQueue",
    value: function clearQueue() {
      this.errorQueue = [];
    }
  }, {
    key: "processError",
    value: function processError(error, context) {
      var _ref, _options$severity;
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var errorMessage = typeof error === 'string' ? error : error.message;
      var errorStack = typeof error === 'string' ? undefined : error.stack;
      var processedError = {
        id: this.generateErrorId(),
        message: errorMessage,
        context: _objectSpread(_objectSpread({}, context), {}, {
          timestamp: new Date(),
          severity: (_ref = (_options$severity = options.severity) != null ? _options$severity : context.severity) != null ? _ref : 'medium'
        }),
        stack: errorStack,
        timestamp: new Date()
      };
      if (this.shouldShowNotification(processedError)) {
        processedError.notification = this.createErrorNotification(processedError);
      }
      if (this.canRecover(processedError)) {
        processedError.recovery = this.createRecoveryOptions(processedError);
      }
      return processedError;
    }
  }, {
    key: "addToQueue",
    value: function addToQueue(error) {
      this.errorQueue.push(error);
      if (this.errorQueue.length > this.maxQueueSize) {
        this.errorQueue = this.errorQueue.slice(-this.maxQueueSize);
      }
    }
  }, {
    key: "logError",
    value: function logError(error) {
      this.errorLoggers.forEach(function (logger) {
        try {
          logger(error);
        } catch (logError) {
          console.error('Error logging failed:', logError);
          console.error('Original error:', error);
        }
      });
      if (!this.isProduction) {
        console.error('Error:', error);
      }
    }
  }, {
    key: "showNotification",
    value: function showNotification(notification) {
      this.notificationHandlers.forEach(function (handler) {
        try {
          handler(notification);
        } catch (handlerError) {
          console.error('Notification handler failed:', handlerError);
        }
      });
    }
  }, {
    key: "shouldShowNotification",
    value: function shouldShowNotification(error) {
      var _error$context$severi2;
      var severity = (_error$context$severi2 = error.context.severity) != null ? _error$context$severi2 : 'medium';
      return severity === 'high' || severity === 'critical';
    }
  }, {
    key: "createErrorNotification",
    value: function createErrorNotification(error) {
      var _error$context$severi3;
      var severity = (_error$context$severi3 = error.context.severity) != null ? _error$context$severi3 : 'medium';
      switch (severity) {
        case 'critical':
          return {
            title: 'Critical Error',
            message: 'A critical error occurred. Please contact support if this persists.',
            type: 'error',
            dismissible: false,
            autoHide: false
          };
        case 'high':
          return {
            title: 'Error',
            message: error.message,
            type: 'error',
            dismissible: true,
            autoHide: true,
            duration: 5000
          };
        case 'medium':
          return {
            title: 'Warning',
            message: error.message,
            type: 'warning',
            dismissible: true,
            autoHide: true,
            duration: 3000
          };
        default:
          return {
            title: 'Info',
            message: error.message,
            type: 'info',
            dismissible: true,
            autoHide: true,
            duration: 2000
          };
      }
    }
  }, {
    key: "createApiErrorNotification",
    value: function createApiErrorNotification(error, options) {
      var _options$statusCode;
      var statusCode = (_options$statusCode = options.statusCode) != null ? _options$statusCode : 500;
      if (!isNaN(statusCode) && statusCode >= 500) {
        return {
          title: 'Server Error',
          message: 'Our servers are experiencing issues. Please try again later.',
          type: 'error',
          action: {
            label: 'Retry',
            handler: function handler() {}
          }
        };
      } else if (statusCode === 404) {
        return {
          title: 'Not Found',
          message: 'The requested resource was not found.',
          type: 'error'
        };
      } else if (statusCode === 403) {
        return {
          title: 'Access Denied',
          message: 'You do not have permission to access this resource.',
          type: 'error'
        };
      } else if (statusCode === 401) {
        return {
          title: 'Authentication Required',
          message: 'Please log in to continue.',
          type: 'error',
          action: {
            label: 'Login',
            handler: function handler() {}
          }
        };
      } else {
        return {
          title: 'Request Failed',
          message: error.message.trim() !== '' ? error.message : 'An error occurred while processing your request.',
          type: 'error'
        };
      }
    }
  }, {
    key: "createApiErrorRecovery",
    value: function createApiErrorRecovery(statusCode) {
      if (statusCode != null && statusCode >= 500) {
        return {
          canRetry: true,
          retryDelay: 5000,
          maxRetries: 3
        };
      } else if (statusCode === 429) {
        return {
          canRetry: true,
          retryDelay: 10000,
          maxRetries: 2
        };
      } else {
        return {
          canRetry: false
        };
      }
    }
  }, {
    key: "getApiErrorSeverity",
    value: function getApiErrorSeverity(statusCode) {
      if (statusCode == null) return 'medium';
      if (statusCode >= 500) return 'high';
      if (statusCode === 404) return 'low';
      if (statusCode === 403 || statusCode === 401) return 'high';
      if (statusCode >= 400) return 'medium';
      return 'low';
    }
  }, {
    key: "getAuthErrorMessage",
    value: function getAuthErrorMessage(error) {
      var message = error.message.toLowerCase();
      if (message.includes('invalid') || message.includes('incorrect')) {
        return 'Invalid credentials. Please check your username and password.';
      } else if (message.includes('expired')) {
        return 'Your session has expired. Please log in again.';
      } else if (message.includes('locked') || message.includes('disabled')) {
        return 'Your account has been locked. Please contact support.';
      } else {
        return 'Authentication failed. Please try again.';
      }
    }
  }, {
    key: "getPaymentErrorMessage",
    value: function getPaymentErrorMessage(error) {
      var message = error.message.toLowerCase();
      if (message.includes('card') || message.includes('payment')) {
        return 'Payment failed. Please check your payment method and try again.';
      } else if (message.includes('insufficient') || message.includes('funds')) {
        return 'Insufficient funds. Please use a different payment method.';
      } else if (message.includes('declined')) {
        return 'Payment was declined. Please contact your bank or use a different card.';
      } else {
        return 'Payment processing failed. Please try again or contact support.';
      }
    }
  }, {
    key: "canRecover",
    value: function canRecover(error) {
      var _error$context$severi4;
      var component = error.context.component;
      var severity = (_error$context$severi4 = error.context.severity) != null ? _error$context$severi4 : 'medium';
      if (severity === 'critical') return false;
      if (component === 'Network' || component === 'API') return true;
      if (component === 'Authentication') return true;
      return false;
    }
  }, {
    key: "createRecoveryOptions",
    value: function createRecoveryOptions(error) {
      var component = error.context.component;
      switch (component) {
        case 'Network':
          return {
            canRetry: true,
            retryDelay: 2000,
            maxRetries: 3
          };
        case 'API':
          return {
            canRetry: true,
            retryDelay: 1000,
            maxRetries: 2
          };
        case 'Authentication':
          return {
            canRetry: true,
            retryDelay: 0,
            maxRetries: 1
          };
        default:
          return {
            canRetry: false
          };
      }
    }
  }, {
    key: "generateErrorId",
    value: function generateErrorId() {
      return `error_${String(Date.now())}_${Math.random().toString(36).substring(2, 11)}`;
    }
  }, {
    key: "extractErrorMessage",
    value: function extractErrorMessage(source, fallback) {
      if (typeof source === 'string') {
        return source;
      }
      if (source instanceof Error && typeof source.message === 'string') {
        return source.message;
      }
      if (isRecordWithMessage(source)) {
        var message = source.message;
        if (typeof message === 'string') {
          return message;
        }
      }
      return fallback;
    }
  }, {
    key: "setupGlobalErrorHandlers",
    value: function setupGlobalErrorHandlers() {
      var _this = this;
      var browserWindow = (0, environment_1.getWindowObject)();
      if (browserWindow == null) {
        return;
      }
      var handleUnhandledRejection = function handleUnhandledRejection(event) {
        if (!isPromiseRejectionEvent(event)) {
          return;
        }
        var message = _this.extractErrorMessage(event.reason, 'Unhandled Promise Rejection');
        _this.handleError(new Error(message), {
          component: 'Global',
          action: 'unhandled_promise_rejection',
          severity: 'high',
          metadata: {
            reason: stringifyUnknown(event.reason)
          }
        });
      };
      var handleGlobalError = function handleGlobalError(event) {
        if (!isErrorEvent(event)) {
          return;
        }
        var message = _this.extractErrorMessage(event.error, 'Global Error');
        _this.handleError(new Error(message), {
          component: 'Global',
          action: 'global_error',
          severity: 'high',
          metadata: {
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno,
            error: stringifyUnknown(event.error)
          }
        });
      };
      (0, environment_1.addEventListenerSafely)(browserWindow, 'unhandledrejection', handleUnhandledRejection);
      (0, environment_1.addEventListenerSafely)(browserWindow, 'error', handleGlobalError);
    }
  }]);
}();
exports.ErrorHandler = new ErrorHandlerService();
exports.errorHandler = exports.ErrorHandler;
exports.default = exports.ErrorHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,