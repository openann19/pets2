aa0bc14f944d8def5347132f64459d25
"use strict";

_getJestObj().mock("../../../../services/api", function () {
  return {
    api: {
      ai: {
        generateBio: mockGenerateBio
      }
    }
  };
});
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useAIBio = require("../useAIBio");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGenerateBio = jest.fn();
describe("useAIBio", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("should initialize with default state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook.result;
    expect(result.current.isGenerating).toBe(false);
    expect(result.current.lastGeneratedBio).toBe(null);
    expect(result.current.error).toBe(null);
    expect(result.current.bioHistory).toEqual([]);
  });
  it("should generate bio successfully", (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      bio: "Meet Buddy! A playful golden retriever ready for adventures.",
      keywords: ["friendly", "playful", "energetic"],
      sentiment: {
        score: 0.9,
        label: "positive"
      },
      matchScore: 92
    };
    mockGenerateBio.mockResolvedValue(mockResponse);
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook2.result;
    var params = {
      petName: "Buddy",
      keywords: ["friendly", "playful"],
      tone: "playful",
      length: "medium",
      petType: "dog",
      age: 3,
      breed: "Golden Retriever"
    };
    var generatedBio;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      generatedBio = yield result.current.generateBio(params);
    }));
    expect(mockGenerateBio).toHaveBeenCalledWith(params);
    expect(result.current.isGenerating).toBe(false);
    expect(result.current.lastGeneratedBio).toEqual(mockResponse);
    expect(generatedBio).toEqual(mockResponse);
  }));
  it("should set loading state during generation", (0, _asyncToGenerator2.default)(function* () {
    mockGenerateBio.mockImplementation(function () {
      return new Promise(function (resolve) {
        return setTimeout(function () {
          return resolve({
            bio: "Test bio",
            keywords: [],
            sentiment: {
              score: 0.8,
              label: "positive"
            },
            matchScore: 85
          });
        }, 100);
      });
    });
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook3.result;
    var params = {
      petName: "Buddy",
      keywords: [],
      tone: "casual",
      length: "short",
      petType: "dog",
      age: 2,
      breed: "Labrador"
    };
    var generatePromise = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio(params);
    }));
    expect(result.current.isGenerating).toBe(true);
    yield generatePromise;
    expect(result.current.isGenerating).toBe(false);
  }));
  it("should require pet name", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook4.result;
    var params = {
      petName: "",
      keywords: [],
      tone: "casual",
      length: "short",
      petType: "dog",
      age: 2,
      breed: "Labrador"
    };
    yield expect((0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio(params);
    }))).rejects.toThrow("Pet name is required");
    expect(result.current.error).toBe("Pet name is required");
    expect(mockGenerateBio).not.toHaveBeenCalled();
  }));
  it("should handle API errors with fallback bio", (0, _asyncToGenerator2.default)(function* () {
    mockGenerateBio.mockRejectedValue(new Error("API error"));
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook5.result;
    var params = {
      petName: "Buddy",
      keywords: ["friendly"],
      tone: "playful",
      length: "medium",
      petType: "dog",
      age: 3,
      breed: "Golden Retriever"
    };
    var generatedBio;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      generatedBio = yield result.current.generateBio(params);
    }));
    expect(generatedBio).toBeDefined();
    expect(generatedBio.bio).toContain("Buddy");
    expect(generatedBio.bio).toContain("Golden Retriever");
    expect(result.current.lastGeneratedBio).not.toBe(null);
  }));
  it("should add bio to history", (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      bio: "Test bio",
      keywords: ["test"],
      sentiment: {
        score: 0.8,
        label: "positive"
      },
      matchScore: 85
    };
    mockGenerateBio.mockResolvedValue(mockResponse);
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook6.result;
    var params = {
      petName: "Buddy",
      keywords: [],
      tone: "casual",
      length: "short",
      petType: "dog",
      age: 2,
      breed: "Labrador"
    };
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio(params);
    }));
    expect(result.current.bioHistory).toHaveLength(1);
    expect(result.current.bioHistory[0]).toEqual(mockResponse);
  }));
  it("should maintain history of last 5 bios", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook7.result;
    var _loop = function* _loop() {
      var bio = {
        bio: `Bio ${i}`,
        keywords: [],
        sentiment: {
          score: 0.8,
          label: "positive"
        },
        matchScore: 85
      };
      mockGenerateBio.mockResolvedValue(bio);
      var params = {
        petName: `Pet${i}`,
        keywords: [],
        tone: "casual",
        length: "short",
        petType: "dog",
        age: 2,
        breed: "Labrador"
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.generateBio(params);
      }));
    };
    for (var i = 0; i < 6; i++) {
      yield* _loop();
    }
    expect(result.current.bioHistory).toHaveLength(5);
    expect(result.current.bioHistory[0].bio).toBe("Bio 5");
    expect(result.current.bioHistory[4].bio).toBe("Bio 1");
  }));
  it("should clear history", function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook8.result;
    var bio = {
      bio: "Test bio",
      keywords: [],
      sentiment: {
        score: 0.8,
        label: "positive"
      },
      matchScore: 85
    };
    (0, _reactNative.act)(function () {
      result.current.addToHistory(bio);
    });
    expect(result.current.bioHistory).toHaveLength(1);
    (0, _reactNative.act)(function () {
      result.current.clearHistory();
    });
    expect(result.current.bioHistory).toEqual([]);
  });
  it("should clear error", function () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook9.result;
    var params = {
      petName: "",
      keywords: [],
      tone: "casual",
      length: "short",
      petType: "dog",
      age: 2,
      breed: "Labrador"
    };
    (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      try {
        yield result.current.generateBio(params);
      } catch (_unused) {}
    }));
    expect(result.current.error).toBe("Pet name is required");
    (0, _reactNative.act)(function () {
      result.current.clearError();
    });
    expect(result.current.error).toBe(null);
  });
  it("should handle different tones", (0, _asyncToGenerator2.default)(function* () {
    var tones = ["playful", "professional", "casual", "romantic", "funny"];
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook0.result;
    var _loop2 = function* _loop2() {
      mockGenerateBio.mockResolvedValue({
        bio: `${tone} bio`,
        keywords: [],
        sentiment: {
          score: 0.8,
          label: "positive"
        },
        matchScore: 85
      });
      var params = {
        petName: "Buddy",
        keywords: [],
        tone: tone,
        length: "medium",
        petType: "dog",
        age: 3,
        breed: "Labrador"
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.generateBio(params);
      }));
      expect(mockGenerateBio).toHaveBeenCalledWith(expect.objectContaining({
        tone: tone
      }));
    };
    for (var tone of tones) {
      yield* _loop2();
    }
  }));
  it("should handle different lengths", (0, _asyncToGenerator2.default)(function* () {
    var lengths = ["short", "medium", "long"];
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook1.result;
    var _loop3 = function* _loop3() {
      mockGenerateBio.mockResolvedValue({
        bio: `${length} bio`,
        keywords: [],
        sentiment: {
          score: 0.8,
          label: "positive"
        },
        matchScore: 85
      });
      var params = {
        petName: "Buddy",
        keywords: [],
        tone: "casual",
        length: length,
        petType: "dog",
        age: 3,
        breed: "Labrador"
      };
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.generateBio(params);
      }));
      expect(mockGenerateBio).toHaveBeenCalledWith(expect.objectContaining({
        length: length
      }));
    };
    for (var length of lengths) {
      yield* _loop3();
    }
  }));
  it("should return stable function references", function () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBio.useAIBio)();
      }),
      result = _renderHook10.result,
      rerender = _renderHook10.rerender;
    var firstGenerateBio = result.current.generateBio;
    var firstClearError = result.current.clearError;
    var firstClearHistory = result.current.clearHistory;
    rerender();
    expect(result.current.generateBio).toBe(firstGenerateBio);
    expect(result.current.clearError).toBe(firstClearError);
    expect(result.current.clearHistory).toBe(firstClearHistory);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,