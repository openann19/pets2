b910e1f789f007512d88dc41a9c74da0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useAsyncAction = require("../useAsyncAction");
describe("useAsyncAction", function () {
  var mockSuccessAction = jest.fn(function () {
    return Promise.resolve("success");
  });
  var mockFailureAction = jest.fn(function () {
    return Promise.reject(new Error("failed"));
  });
  beforeEach(function () {
    jest.clearAllMocks();
    mockSuccessAction.mockClear();
    mockFailureAction.mockClear();
    mockSuccessAction.mockImplementation(function () {
      return Promise.resolve("success");
    });
    mockFailureAction.mockImplementation(function () {
      return Promise.reject(new Error("failed"));
    });
  });
  it("should initialize with correct default state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAsyncAction.useAsyncAction)({
          action: mockSuccessAction
        });
      }),
      result = _renderHook.result;
    expect(result.current.isLoading).toBe(false);
    expect(result.current.error).toBe(null);
    expect(result.current.data).toBe(null);
  });
  it("should execute async action successfully", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAsyncAction.useAsyncAction)({
          action: mockSuccessAction
        });
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.execute();
    });
    expect(result.current.isLoading).toBe(true);
    expect(mockSuccessAction).toHaveBeenCalledTimes(1);
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.data).toBe("success");
    expect(result.current.error).toBe(null);
  }));
  it("should handle async action failure", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAsyncAction.useAsyncAction)({
          action: mockFailureAction
        });
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.execute();
    });
    expect(result.current.isLoading).toBe(true);
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.data).toBe(null);
    expect(result.current.error).toBeInstanceOf(Error);
  }));
  it("should reset state", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAsyncAction.useAsyncAction)({
          action: mockSuccessAction
        });
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.reset();
    });
    expect(result.current.isLoading).toBe(false);
    expect(result.current.error).toBe(null);
    expect(result.current.data).toBe(null);
  });
  it("should execute with arguments", (0, _asyncToGenerator2.default)(function* () {
    var actionWithArgs = jest.fn().mockImplementation(function (arg1, arg2) {
      return Promise.resolve(`${arg1}-${arg2}`);
    });
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAsyncAction.useAsyncAction)({
          action: actionWithArgs
        });
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.execute("test", 123);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(actionWithArgs).toHaveBeenCalledWith("test", 123);
    expect(result.current.data).toBe("test-123");
  }));
  it("should not execute if already loading", (0, _asyncToGenerator2.default)(function* () {
    var slowAction = jest.fn(function () {
      return new Promise(function (resolve) {
        return setTimeout(function () {
          return resolve("done");
        }, 100);
      });
    });
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAsyncAction.useAsyncAction)({
          action: slowAction
        });
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.execute();
    });
    (0, _reactNative.act)(function () {
      result.current.execute();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(slowAction).toHaveBeenCalledTimes(1);
  }));
  it("should return stable function references", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAsyncAction.useAsyncAction)({
          action: mockSuccessAction
        });
      }),
      result = _renderHook7.result;
    var firstExecute = result.current.execute;
    var firstReset = result.current.reset;
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAsyncAction.useAsyncAction)({
          action: mockSuccessAction
        });
      }),
      result2 = _renderHook8.result;
    expect(result.current.execute).toBe(firstExecute);
    expect(result.current.reset).toBe(firstReset);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,