4f6d1fc3fb5497580879ebcb410124ca
"use strict";

_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      debug: _globals.jest.fn(),
      info: _globals.jest.fn(),
      warn: _globals.jest.fn(),
      error: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("expo-image-picker", function () {
  return {
    requestMediaLibraryPermissionsAsync: _globals.jest.fn().mockResolvedValue({
      status: "granted"
    }),
    launchImageLibraryAsync: _globals.jest.fn().mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "mock-image-uri"
      }]
    })
  };
});
_getJestObj().mock("../../theme/unified-theme", function () {
  return {
    Theme: {
      colors: {
        text: "Theme.colors.neutral[950]",
        textMuted: "#666666",
        border: "#cccccc",
        error: "#ff0000",
        background: "Theme.colors.neutral[0]",
        surface: "#f9f9f9",
        primary: "#007bff",
        success: "#28a745",
        warning: "#ffc107"
      },
      spacing: {
        xs: 4,
        sm: 8,
        md: 16,
        lg: 24,
        xl: 32
      },
      typography: {
        sizes: {
          xs: 12,
          sm: 14,
          base: 16,
          lg: 18,
          xl: 20,
          "2xl": 24
        },
        weights: {
          normal: "400",
          medium: "500",
          semibold: "600",
          bold: "700"
        },
        lineHeights: {
          normal: 1.5,
          relaxed: 1.625
        }
      },
      borderRadius: {
        md: 8,
        lg: 12,
        full: 9999
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _globals = require("@jest/globals");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require6 = require("@jest/globals"),
    jest = _require6.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("PetInfoForm Component", function () {
  var _require = require("../components/ai/PetInfoForm"),
    PetInfoForm = _require.PetInfoForm;
  var defaultProps = {
    petName: "Buddy",
    setPetName: _globals.jest.fn(),
    petBreed: "Golden Retriever",
    setPetBreed: _globals.jest.fn(),
    petAge: "2 years",
    setPetAge: _globals.jest.fn(),
    petPersonality: "Friendly and energetic",
    setPetPersonality: _globals.jest.fn(),
    validationErrors: {}
  };
  beforeEach(function () {
    _globals.jest.clearAllMocks();
  });
  it("renders all form fields", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(PetInfoForm, _objectSpread({}, defaultProps)));
    expect(_reactNative.screen.getByText("Pet Information")).toBeTruthy();
    expect(_reactNative.screen.getByText("Pet Name *")).toBeTruthy();
    expect(_reactNative.screen.getByText("Pet Breed *")).toBeTruthy();
    expect(_reactNative.screen.getByText("Pet Age *")).toBeTruthy();
    expect(_reactNative.screen.getByText("Pet Personality *")).toBeTruthy();
  });
  it("displays validation errors", function () {
    var propsWithErrors = _objectSpread(_objectSpread({}, defaultProps), {}, {
      validationErrors: {
        petName: "Pet name is required",
        petBreed: "Pet breed is required"
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(PetInfoForm, _objectSpread({}, propsWithErrors)));
    expect(_reactNative.screen.getByText("Pet name is required")).toBeTruthy();
    expect(_reactNative.screen.getByText("Pet breed is required")).toBeTruthy();
  });
  it("shows character count for personality field", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(PetInfoForm, _objectSpread({}, defaultProps)));
    expect(_reactNative.screen.getByText("23/500 characters")).toBeTruthy();
  });
  it("calls setters when inputs change", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(PetInfoForm, _objectSpread({}, defaultProps)));
    var nameInput = _reactNative.screen.getByPlaceholderText("Enter your pet's name");
    _reactNative.fireEvent.changeText(nameInput, "Max");
    expect(defaultProps.setPetName).toHaveBeenCalledWith("Max");
  });
});
describe("ToneSelector Component", function () {
  var _require2 = require("../components/ai/ToneSelector"),
    ToneSelector = _require2.ToneSelector;
  it("renders all tone options", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ToneSelector, {
      selectedTone: "playful",
      onToneSelect: _globals.jest.fn()
    }));
    expect(_reactNative.screen.getByText("Playful")).toBeTruthy();
    expect(_reactNative.screen.getByText("Professional")).toBeTruthy();
    expect(_reactNative.screen.getByText("Casual")).toBeTruthy();
  });
  it("calls onToneSelect when tone is selected", function () {
    var _screen$getByText$par;
    var mockOnSelect = _globals.jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ToneSelector, {
      selectedTone: "playful",
      onToneSelect: mockOnSelect
    }));
    var professionalCard = (_screen$getByText$par = _reactNative.screen.getByText("Professional").parent) == null ? void 0 : _screen$getByText$par.parent;
    if (professionalCard) {
      _reactNative.fireEvent.press(professionalCard);
      expect(mockOnSelect).toHaveBeenCalledWith("professional");
    }
  });
  it("shows selected state", function () {
    var _screen$getByText$par2;
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ToneSelector, {
      selectedTone: "playful",
      onToneSelect: _globals.jest.fn()
    }));
    var playfulCard = (_screen$getByText$par2 = _reactNative.screen.getByText("Playful").parent) == null ? void 0 : _screen$getByText$par2.parent;
    expect(playfulCard).toBeTruthy();
  });
});
describe("BioResults Component", function () {
  var _require3 = require("../components/ai/BioResults"),
    BioResults = _require3.BioResults;
  var mockBio = {
    bio: "Buddy is a friendly Golden Retriever who loves belly rubs and long walks in the park.",
    keywords: ["friendly", "energetic", "loves walks"],
    sentiment: {
      score: 0.8,
      label: "Positive"
    },
    matchScore: 85,
    createdAt: new Date().toISOString()
  };
  beforeEach(function () {
    _globals.jest.clearAllMocks();
  });
  it("renders bio content", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(BioResults, {
      generatedBio: mockBio
    }));
    expect(_reactNative.screen.getByText(mockBio.bio)).toBeTruthy();
  });
  it("displays analysis metrics", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(BioResults, {
      generatedBio: mockBio
    }));
    expect(_reactNative.screen.getByText("Bio Analysis")).toBeTruthy();
    expect(_reactNative.screen.getByText("85/100")).toBeTruthy();
    expect(_reactNative.screen.getByText("Positive")).toBeTruthy();
  });
  it("shows keywords as chips", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(BioResults, {
      generatedBio: mockBio
    }));
    mockBio.keywords.forEach(function (keyword) {
      expect(_reactNative.screen.getByText(keyword)).toBeTruthy();
    });
  });
  it("calls onSave when save button is pressed", function () {
    var mockOnSave = _globals.jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(BioResults, {
      generatedBio: mockBio,
      onSave: mockOnSave
    }));
    expect(true).toBe(true);
  });
});
describe("useAIBio Hook", function () {
  _getJestObj().mock("../services/api", function () {
    return {
      api: mockApi
    };
  });
  var _require4 = require("@testing-library/react-hooks"),
    renderHook = _require4.renderHook,
    act = _require4.act;
  var _require5 = require("../hooks/useAIBio"),
    useAIBio = _require5.useAIBio;
  var mockApi = {
    generatePetBio: _globals.jest.fn()
  };
  beforeEach(function () {
    _globals.jest.clearAllMocks();
    mockApi.generatePetBio.mockResolvedValue({
      success: true,
      data: {
        bio: "Test bio",
        keywords: ["test"],
        sentiment: {
          score: 0.5,
          label: "Neutral"
        },
        matchScore: 75
      }
    });
  });
  it("validates form correctly", function () {
    var _renderHook = renderHook(function () {
        return useAIBio();
      }),
      result = _renderHook.result;
    act(function () {
      result.current.setPetName("Buddy");
      result.current.setPetBreed("Golden Retriever");
      result.current.setPetAge("2 years");
      result.current.setPetPersonality("Friendly");
    });
    expect(result.current.isFormValid).toBe(true);
    expect(result.current.validationErrors).toEqual({});
  });
  it("shows validation errors for empty fields", function () {
    var _renderHook2 = renderHook(function () {
        return useAIBio();
      }),
      result = _renderHook2.result;
    act(function () {
      result.current.generateBio();
    });
    expect(result.current.validationErrors.petName).toBeDefined();
    expect(result.current.validationErrors.petBreed).toBeDefined();
  });
  it("generates bio successfully", (0, _asyncToGenerator2.default)(function* () {
    var _result$current$gener;
    var _renderHook3 = renderHook(function () {
        return useAIBio();
      }),
      result = _renderHook3.result;
    act(function () {
      result.current.setPetName("Buddy");
      result.current.setPetBreed("Golden Retriever");
      result.current.setPetAge("2 years");
      result.current.setPetPersonality("Friendly");
    });
    yield act((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(result.current.generatedBio).toBeTruthy();
    expect((_result$current$gener = result.current.generatedBio) == null ? void 0 : _result$current$gener.bio).toBe("Test bio");
  }));
  it("handles generation errors", (0, _asyncToGenerator2.default)(function* () {
    mockApi.generatePetBio.mockRejectedValue(new Error("API Error"));
    var _renderHook4 = renderHook(function () {
        return useAIBio();
      }),
      result = _renderHook4.result;
    act(function () {
      result.current.setPetName("Buddy");
      result.current.setPetBreed("Golden Retriever");
      result.current.setPetAge("2 years");
      result.current.setPetPersonality("Friendly");
    });
    yield act((0, _asyncToGenerator2.default)(function* () {
      try {
        yield result.current.generateBio();
      } catch (error) {}
    }));
    expect(result.current.validationErrors.submit).toBeDefined();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,