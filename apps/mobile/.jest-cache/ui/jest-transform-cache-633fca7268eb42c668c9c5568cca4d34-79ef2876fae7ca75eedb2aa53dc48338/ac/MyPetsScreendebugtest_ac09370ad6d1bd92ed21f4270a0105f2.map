{"version":3,"names":["_getJestObj","mock","matchesAPI","getMyPets","jest","fn","Promise","resolve","data","deletePet","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_native","_nativeStack","_logger","_jsxRuntime","_require2","spyOn","Alert","Stack","createNativeStackNavigator","describe","it","MyPetsScreen","default","expect","render","jsx","NavigationContainer","children","Navigator","Screen","name","component","options","headerShown","not","toThrow","_require","mockResolvedValue","_id","species","breed","age","gender","size","photos","url","isPrimary","intent","analytics","views","likes","matches","messages","isActive","isVerified","status","listedAt","createdAt","updatedAt","owner","personalityTags","availability","isAvailable","healthInfo","vaccinated","spayedNeutered","microchipped","location","type","coordinates","featured","isFeatured","boostCount","_render","getByText","debug","setTimeout","toBeTruthy","error","logger"],"sources":["MyPetsScreen.debug.test.tsx"],"sourcesContent":["import React from \"react\";\nimport { render } from \"@testing-library/react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { logger } from \"../../services/logger\";\n\n// Mock the API service\njest.mock(\"../../services/api\", () => ({\n  matchesAPI: {\n    getMyPets: jest.fn(() => Promise.resolve({ data: [] })),\n    deletePet: jest.fn(() => Promise.resolve()),\n  },\n}));\n\n// Mock Alert\njest.spyOn(require(\"react-native\").Alert, \"alert\");\n\nconst Stack = createNativeStackNavigator();\n\ndescribe(\"MyPetsScreen Debug\", () => {\n  it(\"should render without crashing\", () => {\n    const MyPetsScreen = require(\"../MyPetsScreen\").default;\n\n    expect(() => {\n      render(\n        <NavigationContainer>\n          <Stack.Navigator>\n            <Stack.Screen\n              name=\"MyPets\"\n              component={MyPetsScreen}\n              options={{ headerShown: false }}\n            />\n          </Stack.Navigator>\n        </NavigationContainer>,\n      );\n    }).not.toThrow();\n  });\n\n  it(\"should render with mock data\", async () => {\n    const { matchesAPI } = require(\"../../services/api\");\n    matchesAPI.getMyPets.mockResolvedValue({\n      data: [\n        {\n          _id: \"1\",\n          name: \"Buddy\",\n          species: \"dog\",\n          breed: \"Golden Retriever\",\n          age: 3,\n          gender: \"male\",\n          size: \"large\",\n          photos: [{ url: \"https://via.placeholder.com/200\", isPrimary: true }],\n          intent: \"playdate\",\n          analytics: { views: 45, likes: 12, matches: 3, messages: 0 },\n          isActive: true,\n          isVerified: true,\n          status: \"active\",\n          listedAt: \"2024-01-01T00:00:00.000Z\",\n          createdAt: \"2024-01-01T00:00:00.000Z\",\n          updatedAt: \"2024-01-01T00:00:00.000Z\",\n          owner: \"owner1\",\n          personalityTags: [],\n          availability: { isAvailable: true },\n          healthInfo: {\n            vaccinated: true,\n            spayedNeutered: true,\n            microchipped: true,\n          },\n          location: {\n            type: \"Point\",\n            coordinates: [0, 0],\n          },\n          featured: {\n            isFeatured: false,\n            boostCount: 0,\n          },\n        },\n      ],\n    });\n\n    const MyPetsScreen = require(\"../MyPetsScreen\").default;\n\n    try {\n      const { getByText, debug } = render(\n        <NavigationContainer>\n          <Stack.Navigator>\n            <Stack.Screen\n              name=\"MyPets\"\n              component={MyPetsScreen}\n              options={{ headerShown: false }}\n            />\n          </Stack.Navigator>\n        </NavigationContainer>,\n      );\n\n      // Wait for the component to load\n      await new Promise((resolve) => setTimeout(resolve, 100));\n\n      // Debug: Log what's actually rendered\n      debug();\n\n      // Check if the header text is rendered\n      expect(getByText(\"My Pets\")).toBeTruthy();\n    } catch (error) {\n      logger.error(\"Error rendering component:\", { error });\n      throw error;\n    }\n  });\n});\n"],"mappings":"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","ignoreList":[]}