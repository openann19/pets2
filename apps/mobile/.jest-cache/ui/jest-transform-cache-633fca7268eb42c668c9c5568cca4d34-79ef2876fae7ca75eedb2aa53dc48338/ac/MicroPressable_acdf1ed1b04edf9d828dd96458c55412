83cd6074d5c2fecdb633397d98a6e277
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MicroPressable;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var _worklet_13026151603687_init_data = {
  code: "function anonymous() {\n  const {\n    layout,\n    y,\n    x,\n    prog,\n    interpolate,\n    rippleColor\n  } = this._closure;\n  const r = Math.max(layout.w, layout.h) * 0.75;\n  return {\n    position: \"absolute\",\n    top: y.value - r,\n    left: x.value - r,\n    width: r * 2,\n    height: r * 2,\n    borderRadius: r,\n    opacity: 1 - prog.value,\n    transform: [{\n      scale: interpolate(prog.value, [0, 1], [0.1, 1.8])\n    }],\n    backgroundColor: rippleColor\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/MicroPressable.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"layout\",\"y\",\"x\",\"prog\",\"interpolate\",\"rippleColor\",\"_closure\",\"r\",\"Math\",\"max\",\"w\",\"h\",\"position\",\"top\",\"value\",\"left\",\"width\",\"height\",\"borderRadius\",\"opacity\",\"transform\",\"scale\",\"backgroundColor\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/MicroPressable.tsx\"],\"mappings\":\"AA+CkC,SAAAA,SAAMA,CAAA;EAAA;IAAAC,MAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,IAAA;IAAAC,WAAA;IAAAC;EAAA,SAAAC,QAAA;EACpC,MAAMC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACT,MAAM,CAACU,CAAC,EAAEV,MAAM,CAACW,CAAC,CAAC,GAAG,IAAI;EAC7C,OAAO;IACLC,QAAQ,EAAE,UAAmB;IAC7BC,GAAG,EAAEZ,CAAC,CAACa,KAAK,GAAGP,CAAC;IAChBQ,IAAI,EAAEb,CAAC,CAACY,KAAK,GAAGP,CAAC;IACjBS,KAAK,EAAET,CAAC,GAAG,CAAC;IACZU,MAAM,EAAEV,CAAC,GAAG,CAAC;IACbW,YAAY,EAAEX,CAAC;IACfY,OAAO,EAAE,CAAC,GAAGhB,IAAI,CAACW,KAAK;IACvBM,SAAS,EAAE,CAAC;MAAEC,KAAK,EAAEjB,WAAW,CAACD,IAAI,CAACW,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;IAAE,CAAC,CAAC;IACnEQ,eAAe,EAAEjB;EACnB,CAAC;AACH\",\"ignoreList\":[]}"
};
var _worklet_6999366343294_init_data = {
  code: "function anonymous() {\n  const {\n    scale\n  } = this._closure;\n  return {\n    transform: [{\n      scale: scale.value\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/MicroPressable.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"scale\",\"_closure\",\"transform\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/MicroPressable.tsx\"],\"mappings\":\"AA8DgC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IACnCC,SAAS,EAAE,CAAC;MAAEF,KAAK,EAAEA,KAAK,CAACG;IAAM,CAAC;EACpC,CAAC;AAAA\",\"ignoreList\":[]}"
};
function MicroPressable(_ref) {
  var children = _ref.children,
    onPress = _ref.onPress,
    style = _ref.style,
    disabled = _ref.disabled,
    _ref$rippleColor = _ref.rippleColor,
    rippleColor = _ref$rippleColor === void 0 ? "rgba(236,72,153,0.35)" : _ref$rippleColor,
    _ref$haptics = _ref.haptics,
    haptics = _ref$haptics === void 0 ? true : _ref$haptics,
    _ref$scaleFrom = _ref.scaleFrom,
    scaleFrom = _ref$scaleFrom === void 0 ? 0.98 : _ref$scaleFrom;
  var _useState = (0, _react.useState)({
      w: 0,
      h: 0
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    layout = _useState2[0],
    setLayout = _useState2[1];
  var x = (0, _reactNativeReanimated.useSharedValue)(0);
  var y = (0, _reactNativeReanimated.useSharedValue)(0);
  var prog = (0, _reactNativeReanimated.useSharedValue)(0);
  var scale = (0, _reactNativeReanimated.useSharedValue)(1);
  var pressingRef = (0, _react.useRef)(false);
  var onPressIn = function onPressIn(e) {
    pressingRef.current = true;
    var _e$nativeEvent = e.nativeEvent,
      locationX = _e$nativeEvent.locationX,
      locationY = _e$nativeEvent.locationY;
    x.value = locationX;
    y.value = locationY;
    prog.value = 0;
    prog.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 450
    });
    scale.value = (0, _reactNativeReanimated.withSpring)(scaleFrom, {
      damping: 18,
      stiffness: 420,
      mass: 0.6
    });
    if (haptics) Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
  };
  var onPressOut = function onPressOut() {
    pressingRef.current = false;
    scale.value = (0, _reactNativeReanimated.withSpring)(1, {
      damping: 18,
      stiffness: 300
    });
  };
  var circle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -7, -27];
    var _f = function _f() {
      var r = Math.max(layout.w, layout.h) * 0.75;
      return {
        position: "absolute",
        top: y.value - r,
        left: x.value - r,
        width: r * 2,
        height: r * 2,
        borderRadius: r,
        opacity: 1 - prog.value,
        transform: [{
          scale: (0, _reactNativeReanimated.interpolate)(prog.value, [0, 1], [0.1, 1.8])
        }],
        backgroundColor: rippleColor
      };
    };
    _f._closure = {
      layout: layout,
      y: y,
      x: x,
      prog: prog,
      interpolate: _reactNativeReanimated.interpolate,
      rippleColor: rippleColor
    };
    _f.__initData = _worklet_13026151603687_init_data;
    _f.__workletHash = 13026151603687;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var wrap = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        transform: [{
          scale: scale.value
        }]
      };
    };
    _f._closure = {
      scale: scale
    };
    _f.__initData = _worklet_6999366343294_init_data;
    _f.__workletHash = 6999366343294;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
    onPress: onPress,
    onPressIn: onPressIn,
    onPressOut: onPressOut,
    disabled: disabled,
    style: style,
    onLayout: function onLayout(e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
        width = _e$nativeEvent$layout.width,
        height = _e$nativeEvent$layout.height;
      setLayout({
        w: width,
        h: height
      });
    },
    children: (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: wrap,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.overflow,
        children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
          style: circle,
          pointerEvents: "none"
        }), children]
      })
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  overflow: {
    overflow: "hidden",
    borderRadius: 9999
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,