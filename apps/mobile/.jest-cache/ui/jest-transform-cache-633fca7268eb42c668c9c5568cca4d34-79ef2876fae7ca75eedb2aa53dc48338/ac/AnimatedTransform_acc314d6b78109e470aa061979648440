b9caa33a246d496017135215a0b9b435
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../NativeAnimatedHelper"));
var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var AnimatedTransform = exports.default = function (_AnimatedWithChildren) {
  function AnimatedTransform(transforms) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedTransform);
    _this = _callSuper(this, AnimatedTransform);
    _this._transforms = transforms;
    return _this;
  }
  (0, _inherits2.default)(AnimatedTransform, _AnimatedWithChildren);
  return (0, _createClass2.default)(AnimatedTransform, [{
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof _AnimatedNode.default) {
            value.__makeNative(platformConfig);
          }
        }
      });
      _superPropGet(AnimatedTransform, "__makeNative", this, 3)([platformConfig]);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return this._get(function (animatedNode) {
        return animatedNode.__getValue();
      });
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      return this._get(function (animatedNode) {
        return animatedNode.__getAnimatedValue();
      });
    }
  }, {
    key: "__attach",
    value: function __attach() {
      var _this2 = this;
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof _AnimatedNode.default) {
            value.__addChild(_this2);
          }
        }
      });
    }
  }, {
    key: "__detach",
    value: function __detach() {
      var _this3 = this;
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof _AnimatedNode.default) {
            value.__removeChild(_this3);
          }
        }
      });
      _superPropGet(AnimatedTransform, "__detach", this, 3)([]);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var transConfigs = [];
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof _AnimatedNode.default) {
            transConfigs.push({
              type: 'animated',
              property: key,
              nodeTag: value.__getNativeTag()
            });
          } else {
            transConfigs.push({
              type: 'static',
              property: key,
              value: _NativeAnimatedHelper.default.transformDataType(value)
            });
          }
        }
      });
      _NativeAnimatedHelper.default.validateTransform(transConfigs);
      return {
        type: 'transform',
        transforms: transConfigs
      };
    }
  }, {
    key: "_get",
    value: function _get(getter) {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof _AnimatedNode.default) {
            result[key] = getter(value);
          } else if (Array.isArray(value)) {
            result[key] = value.map(function (element) {
              if (element instanceof _AnimatedNode.default) {
                return getter(element);
              } else {
                return element;
              }
            });
          } else if (typeof value === 'object') {
            result[key] = {};
            for (var _ref of Object.entries(value)) {
              var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
              var nestedKey = _ref2[0];
              var nestedValue = _ref2[1];
              if (nestedValue instanceof _AnimatedNode.default) {
                result[key][nestedKey] = getter(nestedValue);
              } else {
                result[key][nestedKey] = nestedValue;
              }
            }
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }]);
}(_AnimatedWithChildren2.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,