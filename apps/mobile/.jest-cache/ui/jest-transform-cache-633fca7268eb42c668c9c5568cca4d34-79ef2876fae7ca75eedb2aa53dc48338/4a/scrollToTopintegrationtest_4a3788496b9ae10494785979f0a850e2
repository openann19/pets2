1bab163b65a061b8e99eaa903bee65e2
"use strict";

_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    useAuthStore: function useAuthStore() {
      return {
        user: {
          firstName: 'Test',
          email: 'test@example.com'
        }
      };
    },
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn()
    }
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: _globals.jest.fn().mockResolvedValue(undefined)
  };
});
_getJestObj().mock("../hooks/screens/useHomeScreen", function () {
  return {
    useHomeScreen: function useHomeScreen() {
      return {
        stats: {
          matches: 0,
          messages: 0
        },
        refreshing: false,
        onRefresh: _globals.jest.fn(),
        handleProfilePress: _globals.jest.fn(),
        handleSettingsPress: _globals.jest.fn(),
        handleSwipePress: _globals.jest.fn(),
        handleMatchesPress: _globals.jest.fn(),
        handleMessagesPress: _globals.jest.fn(),
        handleMyPetsPress: _globals.jest.fn(),
        handleCreatePetPress: _globals.jest.fn(),
        handleCommunityPress: _globals.jest.fn()
      };
    }
  };
});
_getJestObj().mock("../../hooks/useMatchesData", function () {
  return {
    useMatchesData: function useMatchesData() {
      return {
        matches: [],
        likedYou: [],
        selectedTab: 'matches',
        refreshing: false,
        onRefresh: _globals.jest.fn(),
        setSelectedTab: _globals.jest.fn(),
        handleScroll: _globals.jest.fn()
      };
    }
  };
});
_getJestObj().mock("../../hooks/screens/useProfileScreen", function () {
  return {
    useProfileScreen: function useProfileScreen() {
      return {
        user: {
          firstName: 'Test',
          email: 'test@example.com'
        },
        notifications: {
          push: true,
          email: true
        },
        privacy: {
          profile: true
        },
        handleLogout: _globals.jest.fn(),
        handleSettingToggle: _globals.jest.fn(),
        handlePrivacyToggle: _globals.jest.fn()
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _bottomTabs = require("@react-navigation/bottom-tabs");
var _HomeScreen = _interopRequireDefault(require("../HomeScreen"));
var _MatchesScreen = _interopRequireDefault(require("../MatchesScreen"));
var _ProfileScreen = _interopRequireDefault(require("../ProfileScreen"));
var _globals = require("@jest/globals");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var Tab = (0, _bottomTabs.createBottomTabNavigator)();
var TestNavigator = function TestNavigator() {
  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsxs)(Tab.Navigator, {
      children: [(0, _jsxRuntime.jsx)(Tab.Screen, {
        name: "Home",
        component: _HomeScreen.default
      }), (0, _jsxRuntime.jsx)(Tab.Screen, {
        name: "Matches",
        component: _MatchesScreen.default
      }), (0, _jsxRuntime.jsx)(Tab.Screen, {
        name: "Profile",
        component: _ProfileScreen.default
      })]
    })
  });
};
(0, _globals.describe)('Scroll-to-Top Integration Tests', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('HomeScreen', function () {
    (0, _globals.it)('should scroll to top when tab is pressed', (0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render.getByText;
      var homeTab = getByText('Home');
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(homeTab).toBeTruthy();
      });
    }));
    (0, _globals.it)('should refresh content on double-tap', (0, _asyncToGenerator2.default)(function* () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render2.getByText;
      var homeTab = getByText('Home');
      _reactNative.fireEvent.press(homeTab);
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(homeTab).toBeTruthy();
      });
    }));
  });
  (0, _globals.describe)('MatchesScreen', function () {
    (0, _globals.it)('should scroll to top when tab is pressed', (0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render3.getByText;
      var matchesTab = getByText('Matches');
      _reactNative.fireEvent.press(matchesTab);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(matchesTab).toBeTruthy();
      });
    }));
    (0, _globals.it)('should refresh content on double-tap', (0, _asyncToGenerator2.default)(function* () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render4.getByText;
      var matchesTab = getByText('Matches');
      _reactNative.fireEvent.press(matchesTab);
      _reactNative.fireEvent.press(matchesTab);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(matchesTab).toBeTruthy();
      });
    }));
  });
  (0, _globals.describe)('ProfileScreen', function () {
    (0, _globals.it)('should scroll to top when tab is pressed', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render5.getByText;
      var profileTab = getByText('Profile');
      _reactNative.fireEvent.press(profileTab);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(profileTab).toBeTruthy();
      });
    }));
    (0, _globals.it)('should scroll to top on double-tap', (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render6.getByText;
      var profileTab = getByText('Profile');
      _reactNative.fireEvent.press(profileTab);
      _reactNative.fireEvent.press(profileTab);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(profileTab).toBeTruthy();
      });
    }));
  });
  (0, _globals.describe)('Cross-tab navigation', function () {
    (0, _globals.it)('should handle navigation between tabs with scroll-to-top', (0, _asyncToGenerator2.default)(function* () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render7.getByText;
      var homeTab = getByText('Home');
      var matchesTab = getByText('Matches');
      var profileTab = getByText('Profile');
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        return (0, _globals.expect)(homeTab).toBeTruthy();
      });
      _reactNative.fireEvent.press(matchesTab);
      yield (0, _reactNative.waitFor)(function () {
        return (0, _globals.expect)(matchesTab).toBeTruthy();
      });
      _reactNative.fireEvent.press(profileTab);
      yield (0, _reactNative.waitFor)(function () {
        return (0, _globals.expect)(profileTab).toBeTruthy();
      });
      _reactNative.fireEvent.press(homeTab);
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        return (0, _globals.expect)(homeTab).toBeTruthy();
      });
    }));
    (0, _globals.it)('should maintain scroll position when switching tabs', (0, _asyncToGenerator2.default)(function* () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render8.getByText;
      var homeTab = getByText('Home');
      var matchesTab = getByText('Matches');
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        return (0, _globals.expect)(homeTab).toBeTruthy();
      });
      _reactNative.fireEvent.press(matchesTab);
      yield (0, _reactNative.waitFor)(function () {
        return (0, _globals.expect)(matchesTab).toBeTruthy();
      });
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        return (0, _globals.expect)(homeTab).toBeTruthy();
      });
    }));
  });
  (0, _globals.describe)('Edge cases', function () {
    (0, _globals.it)('should handle rapid tab switching', (0, _asyncToGenerator2.default)(function* () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render9.getByText;
      var homeTab = getByText('Home');
      var matchesTab = getByText('Matches');
      for (var i = 0; i < 5; i++) {
        _reactNative.fireEvent.press(i % 2 === 0 ? homeTab : matchesTab);
      }
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(homeTab).toBeTruthy();
      });
    }));
    (0, _globals.it)('should handle double-tap during navigation', (0, _asyncToGenerator2.default)(function* () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render0.getByText;
      var homeTab = getByText('Home');
      var matchesTab = getByText('Matches');
      _reactNative.fireEvent.press(homeTab);
      _reactNative.fireEvent.press(homeTab);
      _reactNative.fireEvent.press(matchesTab);
      _reactNative.fireEvent.press(matchesTab);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(homeTab).toBeTruthy();
        (0, _globals.expect)(matchesTab).toBeTruthy();
      });
    }));
  });
  (0, _globals.describe)('Accessibility', function () {
    (0, _globals.it)('should maintain accessibility labels during scroll-to-top', (0, _asyncToGenerator2.default)(function* () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render1.getByText;
      var homeTab = getByText('Home');
      _reactNative.fireEvent.press(homeTab);
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(homeTab).toBeTruthy();
      });
      (0, _globals.expect)(homeTab).toBeTruthy();
    }));
  });
  (0, _globals.describe)('Performance', function () {
    (0, _globals.it)('should handle multiple scroll-to-top actions efficiently', (0, _asyncToGenerator2.default)(function* () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render10.getByText;
      var homeTab = getByText('Home');
      for (var i = 0; i < 10; i++) {
        _reactNative.fireEvent.press(homeTab);
        yield (0, _reactNative.waitFor)(function () {
          (0, _globals.expect)(homeTab).toBeTruthy();
        });
      }
    }));
    (0, _globals.it)('should not cause memory leaks with multiple tab presses', (0, _asyncToGenerator2.default)(function* () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render11.getByText,
        unmount = _render11.unmount;
      var homeTab = getByText('Home');
      for (var i = 0; i < 20; i++) {
        _reactNative.fireEvent.press(homeTab);
      }
      (0, _globals.expect)(function () {
        unmount();
      }).not.toThrow();
    }));
  });
  (0, _globals.describe)('Integration with navigation events', function () {
    (0, _globals.it)('should work correctly with tabPress events', (0, _asyncToGenerator2.default)(function* () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render12.getByText;
      var homeTab = getByText('Home');
      _reactNative.fireEvent.press(homeTab);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(homeTab).toBeTruthy();
      });
    }));
    (0, _globals.it)('should handle tabLongPress events separately', (0, _asyncToGenerator2.default)(function* () {
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {})),
        getByText = _render13.getByText;
      var homeTab = getByText('Home');
      (0, _reactNative.fireEvent)(homeTab, 'onLongPress');
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(homeTab).toBeTruthy();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,