7770fe048e44933dd815e49caef2273e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMessageActions = useMessageActions;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _api = require("../../services/api");
var _core = require("@pawfectmatch/core");
function useMessageActions(_ref) {
  var matchId = _ref.matchId,
    onMessageRetried = _ref.onMessageRetried,
    onMessageDeleted = _ref.onMessageDeleted;
  var retryMessage = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (messageId, currentMessages) {
      var message = currentMessages.find(function (msg) {
        return msg._id === messageId;
      });
      if (!message) return;
      try {
        yield _api.matchesAPI.sendMessage(matchId, message.content);
        _core.logger.info("Message retried", {
          messageId: messageId,
          matchId: matchId
        });
        onMessageRetried == null ? void 0 : onMessageRetried(messageId);
      } catch (error) {
        _core.logger.error("Failed to retry message", {
          error: error,
          messageId: messageId
        });
        throw error;
      }
    });
    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }(), [matchId, onMessageRetried]);
  var deleteMessage = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (messageId) {
      try {
        yield _api.matchesAPI.deleteMessage(matchId, messageId);
        _core.logger.info("Message deleted", {
          messageId: messageId,
          matchId: matchId
        });
        onMessageDeleted == null ? void 0 : onMessageDeleted(messageId);
      } catch (error) {
        _core.logger.error("Failed to delete message", {
          error: error,
          messageId: messageId
        });
        throw error;
      }
    });
    return function (_x3) {
      return _ref3.apply(this, arguments);
    };
  }(), [matchId, onMessageDeleted]);
  return {
    retryMessage: retryMessage,
    deleteMessage: deleteMessage
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FwaSIsIl9jb3JlIiwidXNlTWVzc2FnZUFjdGlvbnMiLCJfcmVmIiwibWF0Y2hJZCIsIm9uTWVzc2FnZVJldHJpZWQiLCJvbk1lc3NhZ2VEZWxldGVkIiwicmV0cnlNZXNzYWdlIiwidXNlQ2FsbGJhY2siLCJfcmVmMiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJtZXNzYWdlSWQiLCJjdXJyZW50TWVzc2FnZXMiLCJtZXNzYWdlIiwiZmluZCIsIm1zZyIsIl9pZCIsIm1hdGNoZXNBUEkiLCJzZW5kTWVzc2FnZSIsImNvbnRlbnQiLCJsb2dnZXIiLCJpbmZvIiwiZXJyb3IiLCJfeCIsIl94MiIsImFwcGx5IiwiYXJndW1lbnRzIiwiZGVsZXRlTWVzc2FnZSIsIl9yZWYzIiwiX3gzIl0sInNvdXJjZXMiOlsidXNlTWVzc2FnZUFjdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB0eXBlIHsgTWVzc2FnZSB9IGZyb20gXCIuLi91c2VDaGF0RGF0YVwiO1xuaW1wb3J0IHsgbWF0Y2hlc0FQSSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9hcGlcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJAcGF3ZmVjdG1hdGNoL2NvcmVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBVc2VNZXNzYWdlQWN0aW9uc09wdGlvbnMge1xuICBtYXRjaElkOiBzdHJpbmc7XG4gIG9uTWVzc2FnZVJldHJpZWQ/OiAobWVzc2FnZUlkOiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9uTWVzc2FnZURlbGV0ZWQ/OiAobWVzc2FnZUlkOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTWVzc2FnZUFjdGlvbnNSZXR1cm4ge1xuICByZXRyeU1lc3NhZ2U6IChcbiAgICBtZXNzYWdlSWQ6IHN0cmluZyxcbiAgICBjdXJyZW50TWVzc2FnZXM6IE1lc3NhZ2VbXSxcbiAgKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBkZWxldGVNZXNzYWdlOiAobWVzc2FnZUlkOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XG59XG5cbi8qKlxuICogSG9vayBmb3IgbWFuYWdpbmcgbWVzc2FnZSBhY3Rpb25zIChyZXRyeSwgZGVsZXRlLCBldGMuKVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVzc2FnZUFjdGlvbnMoe1xuICBtYXRjaElkLFxuICBvbk1lc3NhZ2VSZXRyaWVkLFxuICBvbk1lc3NhZ2VEZWxldGVkLFxufTogVXNlTWVzc2FnZUFjdGlvbnNPcHRpb25zKTogVXNlTWVzc2FnZUFjdGlvbnNSZXR1cm4ge1xuICBjb25zdCByZXRyeU1lc3NhZ2UgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAobWVzc2FnZUlkOiBzdHJpbmcsIGN1cnJlbnRNZXNzYWdlczogTWVzc2FnZVtdKSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gY3VycmVudE1lc3NhZ2VzLmZpbmQoKG1zZykgPT4gbXNnLl9pZCA9PT0gbWVzc2FnZUlkKTtcbiAgICAgIGlmICghbWVzc2FnZSkgcmV0dXJuO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBtYXRjaGVzQVBJLnNlbmRNZXNzYWdlKG1hdGNoSWQsIG1lc3NhZ2UuY29udGVudCk7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiTWVzc2FnZSByZXRyaWVkXCIsIHsgbWVzc2FnZUlkLCBtYXRjaElkIH0pO1xuICAgICAgICBvbk1lc3NhZ2VSZXRyaWVkPy4obWVzc2FnZUlkKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byByZXRyeSBtZXNzYWdlXCIsIHsgZXJyb3IsIG1lc3NhZ2VJZCB9KTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSxcbiAgICBbbWF0Y2hJZCwgb25NZXNzYWdlUmV0cmllZF0sXG4gICk7XG5cbiAgY29uc3QgZGVsZXRlTWVzc2FnZSA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChtZXNzYWdlSWQ6IHN0cmluZykgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgbWF0Y2hlc0FQSS5kZWxldGVNZXNzYWdlKG1hdGNoSWQsIG1lc3NhZ2VJZCk7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiTWVzc2FnZSBkZWxldGVkXCIsIHsgbWVzc2FnZUlkLCBtYXRjaElkIH0pO1xuICAgICAgICBvbk1lc3NhZ2VEZWxldGVkPy4obWVzc2FnZUlkKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byBkZWxldGUgbWVzc2FnZVwiLCB7IGVycm9yLCBtZXNzYWdlSWQgfSk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0sXG4gICAgW21hdGNoSWQsIG9uTWVzc2FnZURlbGV0ZWRdLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgcmV0cnlNZXNzYWdlLFxuICAgIGRlbGV0ZU1lc3NhZ2UsXG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsSUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsS0FBQSxHQUFBRixPQUFBO0FBbUJPLFNBQVNHLGlCQUFpQkEsQ0FBQUMsSUFBQSxFQUlxQjtFQUFBLElBSHBEQyxPQUFPLEdBQUFELElBQUEsQ0FBUEMsT0FBTztJQUNQQyxnQkFBZ0IsR0FBQUYsSUFBQSxDQUFoQkUsZ0JBQWdCO0lBQ2hCQyxnQkFBZ0IsR0FBQUgsSUFBQSxDQUFoQkcsZ0JBQWdCO0VBRWhCLElBQU1DLFlBQVksR0FBRyxJQUFBQyxrQkFBVztJQUFBLElBQUFDLEtBQUEsT0FBQUMsa0JBQUEsQ0FBQUMsT0FBQSxFQUM5QixXQUFPQyxTQUFpQixFQUFFQyxlQUEwQixFQUFLO01BQ3ZELElBQU1DLE9BQU8sR0FBR0QsZUFBZSxDQUFDRSxJQUFJLENBQUMsVUFBQ0MsR0FBRztRQUFBLE9BQUtBLEdBQUcsQ0FBQ0MsR0FBRyxLQUFLTCxTQUFTO01BQUEsRUFBQztNQUNwRSxJQUFJLENBQUNFLE9BQU8sRUFBRTtNQUVkLElBQUk7UUFDRixNQUFNSSxlQUFVLENBQUNDLFdBQVcsQ0FBQ2YsT0FBTyxFQUFFVSxPQUFPLENBQUNNLE9BQU8sQ0FBQztRQUN0REMsWUFBTSxDQUFDQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7VUFBRVYsU0FBUyxFQUFUQSxTQUFTO1VBQUVSLE9BQU8sRUFBUEE7UUFBUSxDQUFDLENBQUM7UUFDdERDLGdCQUFnQixvQkFBaEJBLGdCQUFnQixDQUFHTyxTQUFTLENBQUM7TUFDL0IsQ0FBQyxDQUFDLE9BQU9XLEtBQUssRUFBRTtRQUNkRixZQUFNLENBQUNFLEtBQUssQ0FBQyx5QkFBeUIsRUFBRTtVQUFFQSxLQUFLLEVBQUxBLEtBQUs7VUFBRVgsU0FBUyxFQUFUQTtRQUFVLENBQUMsQ0FBQztRQUM3RCxNQUFNVyxLQUFLO01BQ2I7SUFDRixDQUFDO0lBQUEsaUJBQUFDLEVBQUEsRUFBQUMsR0FBQTtNQUFBLE9BQUFoQixLQUFBLENBQUFpQixLQUFBLE9BQUFDLFNBQUE7SUFBQTtFQUFBLEtBQ0QsQ0FBQ3ZCLE9BQU8sRUFBRUMsZ0JBQWdCLENBQzVCLENBQUM7RUFFRCxJQUFNdUIsYUFBYSxHQUFHLElBQUFwQixrQkFBVztJQUFBLElBQUFxQixLQUFBLE9BQUFuQixrQkFBQSxDQUFBQyxPQUFBLEVBQy9CLFdBQU9DLFNBQWlCLEVBQUs7TUFDM0IsSUFBSTtRQUNGLE1BQU1NLGVBQVUsQ0FBQ1UsYUFBYSxDQUFDeEIsT0FBTyxFQUFFUSxTQUFTLENBQUM7UUFDbERTLFlBQU0sQ0FBQ0MsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1VBQUVWLFNBQVMsRUFBVEEsU0FBUztVQUFFUixPQUFPLEVBQVBBO1FBQVEsQ0FBQyxDQUFDO1FBQ3RERSxnQkFBZ0Isb0JBQWhCQSxnQkFBZ0IsQ0FBR00sU0FBUyxDQUFDO01BQy9CLENBQUMsQ0FBQyxPQUFPVyxLQUFLLEVBQUU7UUFDZEYsWUFBTSxDQUFDRSxLQUFLLENBQUMsMEJBQTBCLEVBQUU7VUFBRUEsS0FBSyxFQUFMQSxLQUFLO1VBQUVYLFNBQVMsRUFBVEE7UUFBVSxDQUFDLENBQUM7UUFDOUQsTUFBTVcsS0FBSztNQUNiO0lBQ0YsQ0FBQztJQUFBLGlCQUFBTyxHQUFBO01BQUEsT0FBQUQsS0FBQSxDQUFBSCxLQUFBLE9BQUFDLFNBQUE7SUFBQTtFQUFBLEtBQ0QsQ0FBQ3ZCLE9BQU8sRUFBRUUsZ0JBQWdCLENBQzVCLENBQUM7RUFFRCxPQUFPO0lBQ0xDLFlBQVksRUFBWkEsWUFBWTtJQUNacUIsYUFBYSxFQUFiQTtFQUNGLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==