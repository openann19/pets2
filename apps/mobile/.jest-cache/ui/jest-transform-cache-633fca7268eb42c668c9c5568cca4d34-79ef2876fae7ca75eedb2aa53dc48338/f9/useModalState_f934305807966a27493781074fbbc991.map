{"version":3,"names":["_react","require","useModalState","initialOpen","arguments","length","undefined","_useState","useState","_useState2","_slicedToArray2","default","isOpen","setIsOpen","open","useCallback","close","toggle","prev"],"sources":["useModalState.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\nexport interface UseModalStateReturn {\n  isOpen: boolean;\n  open: () => void;\n  close: () => void;\n  toggle: () => void;\n}\n\n/**\n * Hook for managing modal open/close state\n *\n * @example\n * const { isOpen, open, close } = useModalState();\n */\nexport function useModalState(\n  initialOpen: boolean = false,\n): UseModalStateReturn {\n  const [isOpen, setIsOpen] = useState(initialOpen);\n\n  const open = useCallback(() => {\n    setIsOpen(true);\n  }, []);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  const toggle = useCallback(() => {\n    setIsOpen((prev) => !prev);\n  }, []);\n\n  return {\n    isOpen,\n    open,\n    close,\n    toggle,\n  };\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAeO,SAASC,aAAaA,CAAA,EAEN;EAAA,IADrBC,WAAoB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAE5B,IAAAG,SAAA,GAA4B,IAAAC,eAAQ,EAACL,WAAW,CAAC;IAAAM,UAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAJ,SAAA;IAA1CK,MAAM,GAAAH,UAAA;IAAEI,SAAS,GAAAJ,UAAA;EAExB,IAAMK,IAAI,GAAG,IAAAC,kBAAW,EAAC,YAAM;IAC7BF,SAAS,CAAC,IAAI,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMG,KAAK,GAAG,IAAAD,kBAAW,EAAC,YAAM;IAC9BF,SAAS,CAAC,KAAK,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMI,MAAM,GAAG,IAAAF,kBAAW,EAAC,YAAM;IAC/BF,SAAS,CAAC,UAACK,IAAI;MAAA,OAAK,CAACA,IAAI;IAAA,EAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLN,MAAM,EAANA,MAAM;IACNE,IAAI,EAAJA,IAAI;IACJE,KAAK,EAALA,KAAK;IACLC,MAAM,EAANA;EACF,CAAC;AACH","ignoreList":[]}