1e43d25ef7c1111c8aa45ba75a4905a3
"use strict";

_getJestObj().mock("../services/uploadHygiene");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _useUploadQueue = require("../hooks/useUploadQueue");
var _uploadHygiene = require("../services/uploadHygiene");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUploadHygieneService = _uploadHygiene.uploadHygieneService;
(0, _globals.describe)('useUploadQueue', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    _globals.jest.useFakeTimers();
    mockUploadHygieneService.uploadWithRetry.mockResolvedValue({
      uploadId: 'upload-123',
      status: 'approved',
      s3Key: 'uploads/test-key'
    });
  });
  (0, _globals.afterEach)(function () {
    _globals.jest.useRealTimers();
  });
  (0, _globals.it)('should enqueue uploads and process them sequentially', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook.result;
    var upload1 = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    var upload2 = {
      id: 'upload2',
      fileUri: 'file://test2.jpg',
      petId: 'pet2'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload1);
      result.current.enqueueUpload(upload2);
    });
    (0, _globals.expect)(result.current.queueLength).toBe(2);
    (0, _globals.expect)(result.current.activeUploads).toBe(0);
    (0, _reactNative.act)(function () {
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(1);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.completedUploads).toBe(1);
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(1);
    (0, _globals.expect)(result.current.queueLength).toBe(1);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.completedUploads).toBe(2);
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(0);
    (0, _globals.expect)(result.current.queueLength).toBe(0);
  }));
  (0, _globals.it)('should enforce concurrency limit of 3 simultaneous uploads', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook2.result;
    var uploads = Array.from({
      length: 5
    }, function (_, i) {
      return {
        id: `upload${i}`,
        fileUri: `file://test${i}.jpg`,
        petId: `pet${i}`
      };
    });
    mockUploadHygieneService.uploadWithRetry.mockImplementation(function () {
      return new Promise(function (resolve) {
        setTimeout(function () {
          return resolve({
            uploadId: 'upload-123',
            status: 'approved',
            s3Key: 'uploads/test-key'
          });
        }, 1000);
      });
    });
    (0, _reactNative.act)(function () {
      uploads.forEach(function (upload) {
        return result.current.enqueueUpload(upload);
      });
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(3);
    (0, _globals.expect)(result.current.queueLength).toBe(2);
    _globals.jest.advanceTimersByTime(1000);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.completedUploads).toBe(1);
      (0, _globals.expect)(result.current.activeUploads).toBe(3);
      (0, _globals.expect)(result.current.queueLength).toBe(1);
    });
  }));
  (0, _globals.it)('should retry failed uploads with exponential backoff', (0, _asyncToGenerator2.default)(function* () {
    var attemptCount = 0;
    mockUploadHygieneService.uploadWithRetry.mockImplementation(function () {
      attemptCount++;
      if (attemptCount < 3) {
        return Promise.reject(new Error('Network error'));
      }
      return Promise.resolve({
        uploadId: 'upload-123',
        status: 'approved',
        s3Key: 'uploads/test-key'
      });
    });
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook3.result;
    var upload = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload);
      result.current.startProcessing();
    });
    _globals.jest.advanceTimersByTime(1000);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(attemptCount).toBe(2);
    });
    _globals.jest.advanceTimersByTime(2000);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(attemptCount).toBe(3);
    });
    _globals.jest.advanceTimersByTime(1000);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.completedUploads).toBe(1);
      (0, _globals.expect)(result.current.failedUploads).toBe(0);
    });
  }));
  (0, _globals.it)('should stop retrying after maximum attempts', (0, _asyncToGenerator2.default)(function* () {
    mockUploadHygieneService.uploadWithRetry.mockRejectedValue(new Error('Persistent network error'));
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook4.result;
    var upload = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload);
      result.current.startProcessing();
    });
    _globals.jest.advanceTimersByTime(1 + 2 + 4 + 8 + 16 + 1000);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.failedUploads).toBe(1);
      (0, _globals.expect)(result.current.activeUploads).toBe(0);
    });
    (0, _globals.expect)(mockUploadHygieneService.uploadWithRetry).toHaveBeenCalledTimes(6);
  }));
  (0, _globals.it)('should allow cancelling individual uploads', (0, _asyncToGenerator2.default)(function* () {
    mockUploadHygieneService.uploadWithRetry.mockImplementation(function () {
      return new Promise(function (resolve) {
        return setTimeout(resolve, 5000);
      });
    });
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook5.result;
    var upload = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload);
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(1);
    (0, _reactNative.act)(function () {
      result.current.cancelUpload('upload1');
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(0);
    (0, _globals.expect)(result.current.cancelledUploads).toBe(1);
    (0, _globals.expect)(result.current.queueLength).toBe(0);
  }));
  (0, _globals.it)('should allow cancelling all pending uploads', (0, _asyncToGenerator2.default)(function* () {
    mockUploadHygieneService.uploadWithRetry.mockImplementation(function () {
      return new Promise(function (resolve) {
        return setTimeout(resolve, 5000);
      });
    });
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook6.result;
    var uploads = Array.from({
      length: 5
    }, function (_, i) {
      return {
        id: `upload${i}`,
        fileUri: `file://test${i}.jpg`,
        petId: `pet${i}`
      };
    });
    (0, _reactNative.act)(function () {
      uploads.forEach(function (upload) {
        return result.current.enqueueUpload(upload);
      });
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(3);
    (0, _globals.expect)(result.current.queueLength).toBe(2);
    (0, _reactNative.act)(function () {
      result.current.cancelAllUploads();
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(0);
    (0, _globals.expect)(result.current.queueLength).toBe(0);
    (0, _globals.expect)(result.current.cancelledUploads).toBe(5);
  }));
  (0, _globals.it)('should pause and resume processing', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook7.result;
    var uploads = Array.from({
      length: 3
    }, function (_, i) {
      return {
        id: `upload${i}`,
        fileUri: `file://test${i}.jpg`,
        petId: `pet${i}`
      };
    });
    (0, _reactNative.act)(function () {
      uploads.forEach(function (upload) {
        return result.current.enqueueUpload(upload);
      });
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(3);
    (0, _globals.expect)(result.current.isProcessing).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.pauseProcessing();
    });
    (0, _globals.expect)(result.current.isProcessing).toBe(false);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.completedUploads).toBe(3);
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(0);
    (0, _reactNative.act)(function () {
      result.current.resumeProcessing();
    });
    (0, _globals.expect)(result.current.isProcessing).toBe(true);
  }));
  (0, _globals.it)('should handle network connectivity changes', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook8.result;
    var upload = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload);
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(1);
    (0, _reactNative.act)(function () {
      result.current.onNetworkChange(false);
    });
    (0, _globals.expect)(result.current.isPaused).toBe(true);
    (0, _globals.expect)(result.current.activeUploads).toBe(0);
    (0, _reactNative.act)(function () {
      result.current.onNetworkChange(true);
    });
    (0, _globals.expect)(result.current.isPaused).toBe(false);
    (0, _globals.expect)(result.current.activeUploads).toBe(1);
  }));
  (0, _globals.it)('should provide progress tracking for individual uploads', (0, _asyncToGenerator2.default)(function* () {
    var progressCallback;
    mockUploadHygieneService.uploadWithRetry.mockImplementation(function (_ref0) {
      var onProgress = _ref0.onProgress;
      progressCallback = onProgress;
      return new Promise(function (resolve) {
        setTimeout(function () {
          if (progressCallback) {
            progressCallback(100);
          }
          resolve({
            uploadId: 'upload-123',
            status: 'approved',
            s3Key: 'uploads/test-key'
          });
        }, 100);
      });
    });
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook9.result;
    var upload = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload);
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.getUploadProgress('upload1')).toBe(0);
    (0, _reactNative.act)(function () {
      if (progressCallback) {
        progressCallback(50);
      }
    });
    (0, _globals.expect)(result.current.getUploadProgress('upload1')).toBe(50);
    _globals.jest.advanceTimersByTime(100);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.getUploadProgress('upload1')).toBe(100);
    });
  }));
  (0, _globals.it)('should handle priority uploads', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook0.result;
    var regularUpload = {
      id: 'regular',
      fileUri: 'file://regular.jpg',
      petId: 'pet1'
    };
    var priorityUpload = {
      id: 'priority',
      fileUri: 'file://priority.jpg',
      petId: 'pet2',
      priority: 'high'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(regularUpload);
      result.current.enqueueUpload(priorityUpload);
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.activeUploadIds).toContain('priority');
    (0, _globals.expect)(result.current.queueLength).toBe(1);
  }));
  (0, _globals.it)('should handle duplicate upload prevention', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook1.result;
    var upload1 = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    var upload2 = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload1);
    });
    (0, _globals.expect)(result.current.queueLength).toBe(1);
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload2);
    });
    (0, _globals.expect)(result.current.queueLength).toBe(1);
    (0, _globals.expect)(result.current.errors).toContain('Upload already queued');
  }));
  (0, _globals.it)('should provide queue statistics', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook10.result;
    var uploads = Array.from({
      length: 10
    }, function (_, i) {
      return {
        id: `upload${i}`,
        fileUri: `file://test${i}.jpg`,
        petId: `pet${i}`
      };
    });
    (0, _reactNative.act)(function () {
      uploads.forEach(function (upload) {
        return result.current.enqueueUpload(upload);
      });
    });
    (0, _globals.expect)(result.current.queueLength).toBe(10);
    (0, _globals.expect)(result.current.totalUploads).toBe(10);
    (0, _reactNative.act)(function () {
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(3);
    (0, _globals.expect)(result.current.queueLength).toBe(7);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.completedUploads).toBe(10);
    });
    (0, _globals.expect)(result.current.queueLength).toBe(0);
    (0, _globals.expect)(result.current.activeUploads).toBe(0);
    (0, _globals.expect)(result.current.totalUploads).toBe(10);
  }));
  (0, _globals.it)('should handle memory pressure by reducing concurrency', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook11.result;
    (0, _globals.expect)(result.current.maxConcurrency).toBe(3);
    (0, _reactNative.act)(function () {
      result.current.onMemoryWarning();
    });
    (0, _globals.expect)(result.current.maxConcurrency).toBe(1);
    (0, _globals.expect)(result.current.isMemoryOptimized).toBe(true);
    var uploads = Array.from({
      length: 5
    }, function (_, i) {
      return {
        id: `upload${i}`,
        fileUri: `file://test${i}.jpg`,
        petId: `pet${i}`
      };
    });
    (0, _reactNative.act)(function () {
      uploads.forEach(function (upload) {
        return result.current.enqueueUpload(upload);
      });
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(1);
    (0, _globals.expect)(result.current.queueLength).toBe(4);
  }));
  (0, _globals.it)('should persist queue state across app restarts', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook12.result,
      rerender = _renderHook12.rerender;
    var upload = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload);
    });
    (0, _globals.expect)(result.current.queueLength).toBe(1);
    rerender();
    (0, _globals.expect)(result.current).toBeDefined();
  }));
  (0, _globals.it)('should provide accessibility announcements', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook13.result;
    var upload = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload);
      result.current.startProcessing();
    });
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.accessibilityAnnouncements).toContain('Upload started');
    });
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.accessibilityAnnouncements).toContain('Upload completed');
    });
  }));
  (0, _globals.it)('should handle app background/foreground transitions', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useUploadQueue.useUploadQueue)();
      }),
      result = _renderHook14.result;
    var upload = {
      id: 'upload1',
      fileUri: 'file://test1.jpg',
      petId: 'pet1'
    };
    (0, _reactNative.act)(function () {
      result.current.enqueueUpload(upload);
      result.current.startProcessing();
    });
    (0, _globals.expect)(result.current.activeUploads).toBe(1);
    (0, _reactNative.act)(function () {
      result.current.onAppStateChange('background');
    });
    (0, _globals.expect)(result.current.isPaused).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.onAppStateChange('active');
    });
    (0, _globals.expect)(result.current.isPaused).toBe(false);
    (0, _globals.expect)(result.current.activeUploads).toBe(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,