3b71bf8a35c65a63ca49daeb8e587902
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _invariant = _interopRequireDefault(require("invariant"));
var customBubblingEventTypes = {};
var customDirectEventTypes = {};
exports.customBubblingEventTypes = customBubblingEventTypes;
exports.customDirectEventTypes = customDirectEventTypes;
var viewConfigCallbacks = new Map();
var viewConfigs = new Map();
function processEventTypes(viewConfig) {
  var bubblingEventTypes = viewConfig.bubblingEventTypes,
    directEventTypes = viewConfig.directEventTypes;
  if (__DEV__) {
    if (bubblingEventTypes != null && directEventTypes != null) {
      for (var topLevelType in directEventTypes) {
        (0, _invariant.default)(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);
      }
    }
  }
  if (bubblingEventTypes != null) {
    for (var _topLevelType in bubblingEventTypes) {
      if (customBubblingEventTypes[_topLevelType] == null) {
        customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
      }
    }
  }
  if (directEventTypes != null) {
    for (var _topLevelType2 in directEventTypes) {
      if (customDirectEventTypes[_topLevelType2] == null) {
        customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
      }
    }
  }
}
exports.register = function (name, callback) {
  (0, _invariant.default)(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
  (0, _invariant.default)(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);
  viewConfigCallbacks.set(name, callback);
  return name;
};
exports.get = function (name) {
  var viewConfig;
  if (!viewConfigs.has(name)) {
    var callback = viewConfigCallbacks.get(name);
    if (typeof callback !== 'function') {
      (0, _invariant.default)(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
    }
    viewConfig = callback();
    processEventTypes(viewConfig);
    viewConfigs.set(name, viewConfig);
    viewConfigCallbacks.set(name, null);
  } else {
    viewConfig = viewConfigs.get(name);
  }
  (0, _invariant.default)(viewConfig, 'View config not found for name %s', name);
  return viewConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9pbnZhcmlhbnQiLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiZXhwb3J0cyIsInZpZXdDb25maWdDYWxsYmFja3MiLCJNYXAiLCJ2aWV3Q29uZmlncyIsInByb2Nlc3NFdmVudFR5cGVzIiwidmlld0NvbmZpZyIsImJ1YmJsaW5nRXZlbnRUeXBlcyIsImRpcmVjdEV2ZW50VHlwZXMiLCJfX0RFVl9fIiwidG9wTGV2ZWxUeXBlIiwiaW52YXJpYW50IiwicmVnaXN0ZXIiLCJuYW1lIiwiY2FsbGJhY2siLCJoYXMiLCJzZXQiLCJnZXQiLCJ0ZXN0Il0sInNvdXJjZXMiOlsiUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBub2Zvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZ2VuZXJhdGVkIFNpZ25lZFNvdXJjZTw8NDdiYTg1ZDdmNDNjOWI1OTFkNjgwNDgyNzMyMmQwMGU+PlxuICpcbiAqIFRoaXMgZmlsZSB3YXMgc3luYydkIGZyb20gdGhlIGZhY2Vib29rL3JlYWN0IHJlcG9zaXRvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge3R5cGUgVmlld0NvbmZpZ30gZnJvbSAnLi9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuLy8gRXZlbnQgY29uZmlnc1xuY29uc3QgY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzOiB7XG4gIFtldmVudE5hbWU6IHN0cmluZ106ICRSZWFkT25seTx7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6ICRSZWFkT25seTx7XG4gICAgICBjYXB0dXJlZDogc3RyaW5nLFxuICAgICAgYnViYmxlZDogc3RyaW5nLFxuICAgICAgc2tpcEJ1YmJsaW5nPzogP2Jvb2xlYW4sXG4gICAgfT4sXG4gIH0+LFxuICAuLi5cbn0gPSB7fTtcbmNvbnN0IGN1c3RvbURpcmVjdEV2ZW50VHlwZXM6IHtcbiAgW2V2ZW50TmFtZTogc3RyaW5nXTogJFJlYWRPbmx5PHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBzdHJpbmcsXG4gIH0+LFxuICAuLi5cbn0gPSB7fTtcblxuZXhwb3J0cy5jdXN0b21CdWJibGluZ0V2ZW50VHlwZXMgPSBjdXN0b21CdWJibGluZ0V2ZW50VHlwZXM7XG5leHBvcnRzLmN1c3RvbURpcmVjdEV2ZW50VHlwZXMgPSBjdXN0b21EaXJlY3RFdmVudFR5cGVzO1xuXG5jb25zdCB2aWV3Q29uZmlnQ2FsbGJhY2tzID0gbmV3IE1hcDxzdHJpbmcsID8oKSA9PiBWaWV3Q29uZmlnPigpO1xuY29uc3Qgdmlld0NvbmZpZ3MgPSBuZXcgTWFwPHN0cmluZywgVmlld0NvbmZpZz4oKTtcblxuZnVuY3Rpb24gcHJvY2Vzc0V2ZW50VHlwZXModmlld0NvbmZpZzogVmlld0NvbmZpZyk6IHZvaWQge1xuICBjb25zdCB7YnViYmxpbmdFdmVudFR5cGVzLCBkaXJlY3RFdmVudFR5cGVzfSA9IHZpZXdDb25maWc7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBpZiAoYnViYmxpbmdFdmVudFR5cGVzICE9IG51bGwgJiYgZGlyZWN0RXZlbnRUeXBlcyAhPSBudWxsKSB7XG4gICAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBkaXJlY3RFdmVudFR5cGVzKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBidWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9PSBudWxsLFxuICAgICAgICAgICdFdmVudCBjYW5ub3QgYmUgYm90aCBkaXJlY3QgYW5kIGJ1YmJsaW5nOiAlcycsXG4gICAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChidWJibGluZ0V2ZW50VHlwZXMgIT0gbnVsbCkge1xuICAgIGZvciAoY29uc3QgdG9wTGV2ZWxUeXBlIGluIGJ1YmJsaW5nRXZlbnRUeXBlcykge1xuICAgICAgaWYgKGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID09IG51bGwpIHtcbiAgICAgICAgY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzW3RvcExldmVsVHlwZV0gPVxuICAgICAgICAgIGJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJlY3RFdmVudFR5cGVzICE9IG51bGwpIHtcbiAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBkaXJlY3RFdmVudFR5cGVzKSB7XG4gICAgICBpZiAoY3VzdG9tRGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID09IG51bGwpIHtcbiAgICAgICAgY3VzdG9tRGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID0gZGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIG5hdGl2ZSB2aWV3L2NvbXBvbmVudCBieSBuYW1lLlxuICogQSBjYWxsYmFjayBpcyBwcm92aWRlZCB0byBsb2FkIHRoZSB2aWV3IGNvbmZpZyBmcm9tIFVJTWFuYWdlci5cbiAqIFRoZSBjYWxsYmFjayBpcyBkZWZlcnJlZCB1bnRpbCB0aGUgdmlldyBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZXhwb3J0cy5yZWdpc3RlciA9IGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiBWaWV3Q29uZmlnKTogc3RyaW5nIHtcbiAgaW52YXJpYW50KFxuICAgICF2aWV3Q29uZmlnQ2FsbGJhY2tzLmhhcyhuYW1lKSxcbiAgICAnVHJpZWQgdG8gcmVnaXN0ZXIgdHdvIHZpZXdzIHdpdGggdGhlIHNhbWUgbmFtZSAlcycsXG4gICAgbmFtZSxcbiAgKTtcbiAgaW52YXJpYW50KFxuICAgIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAnVmlldyBjb25maWcgZ2V0dGVyIGNhbGxiYWNrIGZvciBjb21wb25lbnQgYCVzYCBtdXN0IGJlIGEgZnVuY3Rpb24gKHJlY2VpdmVkIGAlc2ApJyxcbiAgICBuYW1lLFxuICAgIGNhbGxiYWNrID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGNhbGxiYWNrLFxuICApO1xuICB2aWV3Q29uZmlnQ2FsbGJhY2tzLnNldChuYW1lLCBjYWxsYmFjayk7XG4gIHJldHVybiBuYW1lO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBjb25maWcgZm9yIHRoZSBzcGVjaWZpZWQgdmlldy5cbiAqIElmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHZpZXcgaGFzIGJlZW4gdXNlZCxcbiAqIFRoaXMgY29uZmlndXJhdGlvbiB3aWxsIGJlIGxhenktbG9hZGVkIGZyb20gVUlNYW5hZ2VyLlxuICovXG5leHBvcnRzLmdldCA9IGZ1bmN0aW9uIChuYW1lOiBzdHJpbmcpOiBWaWV3Q29uZmlnIHtcbiAgbGV0IHZpZXdDb25maWc7XG4gIGlmICghdmlld0NvbmZpZ3MuaGFzKG5hbWUpKSB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSB2aWV3Q29uZmlnQ2FsbGJhY2tzLmdldChuYW1lKTtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnVmlldyBjb25maWcgZ2V0dGVyIGNhbGxiYWNrIGZvciBjb21wb25lbnQgYCVzYCBtdXN0IGJlIGEgZnVuY3Rpb24gKHJlY2VpdmVkIGAlc2ApLiVzJyxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgY2FsbGJhY2ssXG4gICAgICAgIHR5cGVvZiBuYW1lWzBdID09PSAnc3RyaW5nJyAmJiAvW2Etel0vLnRlc3QobmFtZVswXSlcbiAgICAgICAgICA/ICcgTWFrZSBzdXJlIHRvIHN0YXJ0IGNvbXBvbmVudCBuYW1lcyB3aXRoIGEgY2FwaXRhbCBsZXR0ZXIuJ1xuICAgICAgICAgIDogJycsXG4gICAgICApO1xuICAgIH1cbiAgICB2aWV3Q29uZmlnID0gY2FsbGJhY2soKTtcbiAgICBwcm9jZXNzRXZlbnRUeXBlcyh2aWV3Q29uZmlnKTtcbiAgICB2aWV3Q29uZmlncy5zZXQobmFtZSwgdmlld0NvbmZpZyk7XG5cbiAgICAvLyBDbGVhciB0aGUgY2FsbGJhY2sgYWZ0ZXIgdGhlIGNvbmZpZyBpcyBzZXQgc28gdGhhdFxuICAgIC8vIHdlIGRvbid0IG1hc2sgYW55IGVycm9ycyBkdXJpbmcgcmVnaXN0cmF0aW9uLlxuICAgIHZpZXdDb25maWdDYWxsYmFja3Muc2V0KG5hbWUsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHZpZXdDb25maWcgPSB2aWV3Q29uZmlncy5nZXQobmFtZSk7XG4gIH1cbiAgaW52YXJpYW50KHZpZXdDb25maWcsICdWaWV3IGNvbmZpZyBub3QgZm91bmQgZm9yIG5hbWUgJXMnLCBuYW1lKTtcbiAgcmV0dXJuIHZpZXdDb25maWc7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFhQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFHYixJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFHQSxJQUFNRSx3QkFTTCxHQUFHLENBQUMsQ0FBQztBQUNOLElBQU1DLHNCQUtMLEdBQUcsQ0FBQyxDQUFDO0FBRU5DLE9BQU8sQ0FBQ0Ysd0JBQXdCLEdBQUdBLHdCQUF3QjtBQUMzREUsT0FBTyxDQUFDRCxzQkFBc0IsR0FBR0Esc0JBQXNCO0FBRXZELElBQU1FLG1CQUFtQixHQUFHLElBQUlDLEdBQUcsQ0FBNEIsQ0FBQztBQUNoRSxJQUFNQyxXQUFXLEdBQUcsSUFBSUQsR0FBRyxDQUFxQixDQUFDO0FBRWpELFNBQVNFLGlCQUFpQkEsQ0FBQ0MsVUFBc0IsRUFBUTtFQUN2RCxJQUFPQyxrQkFBa0IsR0FBc0JELFVBQVUsQ0FBbERDLGtCQUFrQjtJQUFFQyxnQkFBZ0IsR0FBSUYsVUFBVSxDQUE5QkUsZ0JBQWdCO0VBRTNDLElBQUlDLE9BQU8sRUFBRTtJQUNYLElBQUlGLGtCQUFrQixJQUFJLElBQUksSUFBSUMsZ0JBQWdCLElBQUksSUFBSSxFQUFFO01BQzFELEtBQUssSUFBTUUsWUFBWSxJQUFJRixnQkFBZ0IsRUFBRTtRQUMzQyxJQUFBRyxrQkFBUyxFQUNQSixrQkFBa0IsQ0FBQ0csWUFBWSxDQUFDLElBQUksSUFBSSxFQUN4Qyw4Q0FBOEMsRUFDOUNBLFlBQ0YsQ0FBQztNQUNIO0lBQ0Y7RUFDRjtFQUVBLElBQUlILGtCQUFrQixJQUFJLElBQUksRUFBRTtJQUM5QixLQUFLLElBQU1HLGFBQVksSUFBSUgsa0JBQWtCLEVBQUU7TUFDN0MsSUFBSVIsd0JBQXdCLENBQUNXLGFBQVksQ0FBQyxJQUFJLElBQUksRUFBRTtRQUNsRFgsd0JBQXdCLENBQUNXLGFBQVksQ0FBQyxHQUNwQ0gsa0JBQWtCLENBQUNHLGFBQVksQ0FBQztNQUNwQztJQUNGO0VBQ0Y7RUFFQSxJQUFJRixnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7SUFDNUIsS0FBSyxJQUFNRSxjQUFZLElBQUlGLGdCQUFnQixFQUFFO01BQzNDLElBQUlSLHNCQUFzQixDQUFDVSxjQUFZLENBQUMsSUFBSSxJQUFJLEVBQUU7UUFDaERWLHNCQUFzQixDQUFDVSxjQUFZLENBQUMsR0FBR0YsZ0JBQWdCLENBQUNFLGNBQVksQ0FBQztNQUN2RTtJQUNGO0VBQ0Y7QUFDRjtBQU9BVCxPQUFPLENBQUNXLFFBQVEsR0FBRyxVQUFVQyxJQUFZLEVBQUVDLFFBQTBCLEVBQVU7RUFDN0UsSUFBQUgsa0JBQVMsRUFDUCxDQUFDVCxtQkFBbUIsQ0FBQ2EsR0FBRyxDQUFDRixJQUFJLENBQUMsRUFDOUIsbURBQW1ELEVBQ25EQSxJQUNGLENBQUM7RUFDRCxJQUFBRixrQkFBUyxFQUNQLE9BQU9HLFFBQVEsS0FBSyxVQUFVLEVBQzlCLG1GQUFtRixFQUNuRkQsSUFBSSxFQUNKQyxRQUFRLEtBQUssSUFBSSxHQUFHLE1BQU0sR0FBRyxPQUFPQSxRQUN0QyxDQUFDO0VBQ0RaLG1CQUFtQixDQUFDYyxHQUFHLENBQUNILElBQUksRUFBRUMsUUFBUSxDQUFDO0VBQ3ZDLE9BQU9ELElBQUk7QUFDYixDQUFDO0FBT0RaLE9BQU8sQ0FBQ2dCLEdBQUcsR0FBRyxVQUFVSixJQUFZLEVBQWM7RUFDaEQsSUFBSVAsVUFBVTtFQUNkLElBQUksQ0FBQ0YsV0FBVyxDQUFDVyxHQUFHLENBQUNGLElBQUksQ0FBQyxFQUFFO0lBQzFCLElBQU1DLFFBQVEsR0FBR1osbUJBQW1CLENBQUNlLEdBQUcsQ0FBQ0osSUFBSSxDQUFDO0lBQzlDLElBQUksT0FBT0MsUUFBUSxLQUFLLFVBQVUsRUFBRTtNQUNsQyxJQUFBSCxrQkFBUyxFQUNQLEtBQUssRUFDTCxzRkFBc0YsRUFDdEZFLElBQUksRUFDSkMsUUFBUSxLQUFLLElBQUksR0FBRyxNQUFNLEdBQUcsT0FBT0EsUUFBUSxFQUM1QyxPQUFPRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDTCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FDaEQsNERBQTRELEdBQzVELEVBQ04sQ0FBQztJQUNIO0lBQ0FQLFVBQVUsR0FBR1EsUUFBUSxDQUFDLENBQUM7SUFDdkJULGlCQUFpQixDQUFDQyxVQUFVLENBQUM7SUFDN0JGLFdBQVcsQ0FBQ1ksR0FBRyxDQUFDSCxJQUFJLEVBQUVQLFVBQVUsQ0FBQztJQUlqQ0osbUJBQW1CLENBQUNjLEdBQUcsQ0FBQ0gsSUFBSSxFQUFFLElBQUksQ0FBQztFQUNyQyxDQUFDLE1BQU07SUFDTFAsVUFBVSxHQUFHRixXQUFXLENBQUNhLEdBQUcsQ0FBQ0osSUFBSSxDQUFDO0VBQ3BDO0VBQ0EsSUFBQUYsa0JBQVMsRUFBQ0wsVUFBVSxFQUFFLG1DQUFtQyxFQUFFTyxJQUFJLENBQUM7RUFDaEUsT0FBT1AsVUFBVTtBQUNuQixDQUFDIiwiaWdub3JlTGlzdCI6W119