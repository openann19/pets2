a0f5a03fb777cbe20b23b49c4bfa9ec0
"use strict";

_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      error: jest.fn(),
      info: jest.fn()
    }
  };
});
_getJestObj().mock("../../../../services/LeaderboardService", function () {
  return {
    __esModule: true,
    default: {
      getCategories: mockGetCategories,
      getLeaderboard: mockGetLeaderboard,
      getUserRank: mockGetUserRank
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useLeaderboard = require("../useLeaderboard");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGetCategories = jest.fn();
var mockGetLeaderboard = jest.fn();
var mockGetUserRank = jest.fn();
var mockCategories = [{
  id: "all",
  name: "All",
  icon: "üèÜ"
}, {
  id: "matches",
  name: "Matches",
  icon: "üíï"
}, {
  id: "chats",
  name: "Chats",
  icon: "üí¨"
}];
var mockLeaderboardEntries = [{
  id: "1",
  userId: "user1",
  username: "alice",
  score: 1000,
  rank: 1,
  avatar: "avatar1.jpg"
}, {
  id: "2",
  userId: "user2",
  username: "bob",
  score: 900,
  rank: 2,
  avatar: "avatar2.jpg"
}, {
  id: "3",
  userId: "user3",
  username: "charlie",
  score: 800,
  rank: 3,
  avatar: "avatar3.jpg"
}];
var mockUserRank = {
  rank: 5,
  entry: {
    id: "current",
    userId: "currentUser",
    username: "me",
    score: 600,
    rank: 5,
    avatar: "myavatar.jpg"
  }
};
describe("useLeaderboard", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockGetCategories.mockResolvedValue(mockCategories);
    mockGetLeaderboard.mockResolvedValue({
      entries: mockLeaderboardEntries,
      hasMore: true
    });
    mockGetUserRank.mockResolvedValue(mockUserRank);
  });
  it("should initialize with default state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook.result;
    expect(result.current.loading).toBe(true);
    expect(result.current.entries).toEqual([]);
    expect(result.current.selectedCategory).toBe("all");
    expect(result.current.selectedPeriod).toBe("weekly");
    expect(result.current.page).toBe(1);
    expect(result.current.showFilters).toBe(false);
  });
  it("should load initial data on mount", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    expect(mockGetCategories).toHaveBeenCalled();
    expect(mockGetLeaderboard).toHaveBeenCalled();
    expect(mockGetUserRank).toHaveBeenCalled();
    expect(result.current.categories).toEqual(mockCategories);
    expect(result.current.entries).toEqual(mockLeaderboardEntries);
    expect(result.current.userRank).toBe(5);
    expect(result.current.userEntry).toEqual(mockUserRank.entry);
  }));
  it("should load leaderboard with default filter", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    expect(mockGetLeaderboard).toHaveBeenCalledWith({
      period: "weekly"
    }, 1, 20);
  }));
  it("should change selected category", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    mockGetLeaderboard.mockClear();
    (0, _reactNative.act)(function () {
      result.current.setSelectedCategory("matches");
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(mockGetLeaderboard).toHaveBeenCalledWith({
        category: "matches",
        period: "weekly"
      }, expect.any(Number), expect.any(Number));
    });
    expect(result.current.selectedCategory).toBe("matches");
  }));
  it("should change selected period", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    mockGetLeaderboard.mockClear();
    (0, _reactNative.act)(function () {
      result.current.setSelectedPeriod("monthly");
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(mockGetLeaderboard).toHaveBeenCalledWith({
        period: "monthly"
      }, expect.any(Number), expect.any(Number));
    });
    expect(result.current.selectedPeriod).toBe("monthly");
  }));
  it("should toggle filters visibility", function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook6.result;
    expect(result.current.showFilters).toBe(false);
    (0, _reactNative.act)(function () {
      result.current.setShowFilters(true);
    });
    expect(result.current.showFilters).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.setShowFilters(false);
    });
    expect(result.current.showFilters).toBe(false);
  });
  it("should refresh data", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    mockGetLeaderboard.mockClear();
    mockGetUserRank.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.refreshData();
    }));
    expect(result.current.refreshing).toBe(false);
    expect(mockGetLeaderboard).toHaveBeenCalledWith({
      period: "weekly"
    }, 1, 20);
    expect(mockGetUserRank).toHaveBeenCalled();
  }));
  it("should set refreshing state during refresh", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    var refreshingDuringCall = false;
    mockGetLeaderboard.mockImplementation(function () {
      refreshingDuringCall = result.current.refreshing;
      return Promise.resolve({
        entries: mockLeaderboardEntries,
        hasMore: true
      });
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.refreshData();
    }));
    expect(refreshingDuringCall).toBe(true);
    expect(result.current.refreshing).toBe(false);
  }));
  it("should load more entries when available", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    var moreEntries = [{
      id: "4",
      userId: "user4",
      username: "dave",
      score: 700,
      rank: 4,
      avatar: "avatar4.jpg"
    }];
    mockGetLeaderboard.mockResolvedValue({
      entries: moreEntries,
      hasMore: false
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.loadMore();
    }));
    expect(mockGetLeaderboard).toHaveBeenCalledWith({
      period: "weekly"
    }, 2, 20);
    expect(result.current.entries).toHaveLength(4);
    expect(result.current.hasMore).toBe(false);
    expect(result.current.page).toBe(2);
  }));
  it("should append entries when loading more", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    var initialEntries = result.current.entries;
    var newEntry = {
      id: "4",
      userId: "user4",
      username: "dave",
      score: 700,
      rank: 4,
      avatar: "avatar4.jpg"
    };
    mockGetLeaderboard.mockResolvedValue({
      entries: [newEntry],
      hasMore: true
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.loadMore();
    }));
    expect(result.current.entries).toEqual([].concat((0, _toConsumableArray2.default)(initialEntries), [newEntry]));
  }));
  it("should not load more when hasMore is false", (0, _asyncToGenerator2.default)(function* () {
    mockGetLeaderboard.mockResolvedValue({
      entries: mockLeaderboardEntries,
      hasMore: false
    });
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    mockGetLeaderboard.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.loadMore();
    }));
    expect(mockGetLeaderboard).not.toHaveBeenCalled();
  }));
  it("should not load more when already loading", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook10.result;
    mockGetLeaderboard.mockClear();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.loadMore();
    }));
    expect(mockGetLeaderboard).not.toHaveBeenCalled();
  }));
  it("should replace entries when loading page 1", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook11.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    var newEntries = [{
      id: "10",
      userId: "user10",
      username: "eve",
      score: 1100,
      rank: 1,
      avatar: "avatar10.jpg"
    }];
    mockGetLeaderboard.mockResolvedValue({
      entries: newEntries,
      hasMore: true
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.refreshData();
    }));
    expect(result.current.entries).toEqual(newEntries);
    expect(result.current.entries).toHaveLength(1);
  }));
  it("should load user rank for specific category", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook12.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    mockGetUserRank.mockClear();
    (0, _reactNative.act)(function () {
      result.current.setSelectedCategory("matches");
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(mockGetUserRank).toHaveBeenCalledWith("matches");
    });
  }));
  it("should load user rank for all categories", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook13.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    expect(mockGetUserRank).toHaveBeenCalledWith(undefined);
  }));
  it("should handle error during initial load", (0, _asyncToGenerator2.default)(function* () {
    mockGetCategories.mockRejectedValue(new Error("API error"));
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook14.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    expect(result.current.loading).toBe(false);
  }));
  it("should provide all periods options", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook15 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook15.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    var periods = ["daily", "weekly", "monthly", "all_time"];
    var _loop = function* _loop(period) {
      mockGetLeaderboard.mockClear();
      (0, _reactNative.act)(function () {
        result.current.setSelectedPeriod(period);
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(mockGetLeaderboard).toHaveBeenCalledWith(expect.objectContaining({
          period: period
        }), expect.any(Number), expect.any(Number));
      });
    };
    for (var period of periods) {
      yield* _loop(period);
    }
  }));
  it("should return stable function references", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook16 = (0, _reactNative.renderHook)(function () {
        return (0, _useLeaderboard.useLeaderboard)();
      }),
      result = _renderHook16.result,
      rerender = _renderHook16.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.loading).toBe(false);
    });
    var firstRefreshData = result.current.refreshData;
    var firstLoadMore = result.current.loadMore;
    var firstSetSelectedCategory = result.current.setSelectedCategory;
    rerender();
    expect(result.current.refreshData).toBe(firstRefreshData);
    expect(result.current.loadMore).toBe(firstLoadMore);
    expect(result.current.setSelectedCategory).toBe(firstSetSelectedCategory);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,