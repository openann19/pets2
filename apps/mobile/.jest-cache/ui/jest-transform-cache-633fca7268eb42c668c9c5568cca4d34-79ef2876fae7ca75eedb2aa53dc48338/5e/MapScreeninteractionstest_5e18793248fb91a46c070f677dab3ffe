f7bf81fe9cc08e3cbcdc2170895bb7e4
"use strict";

_getJestObj().mock("react-native-maps");
_getJestObj().mock("expo-linear-gradient", function () {
  var React = require("react");
  var _require = require("react-native"),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, _objectSpread(_objectSpread({
        accessibilityLabel: "LinearGradient"
      }, rest), {}, {
        children: children
      }));
    }
  };
});
_getJestObj().mock("../../components/map", function () {
  var React = require("react");
  var _require2 = require("react-native"),
    View = _require2.View,
    Text = _require2.Text,
    TouchableOpacity = _require2.TouchableOpacity;
  return {
    MapFiltersModal: function MapFiltersModal() {
      return (0, _jsxRuntime.jsx)(View, {
        testID: "MapFiltersModal"
      });
    },
    MapStatsPanel: function MapStatsPanel() {
      return (0, _jsxRuntime.jsx)(View, {
        testID: "MapStatsPanel",
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "stats"
        })
      });
    },
    PinDetailsModal: function PinDetailsModal(_ref2) {
      var visible = _ref2.visible,
        onClose = _ref2.onClose;
      return visible ? (0, _jsxRuntime.jsx)(View, {
        testID: "PinDetailsModal",
        children: (0, _jsxRuntime.jsx)(TouchableOpacity, {
          accessibilityLabel: "close-pin",
          onPress: onClose,
          children: (0, _jsxRuntime.jsx)(Text, {
            children: "Close Pin"
          })
        })
      }) : null;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _testUtils = require("./test-utils");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var baseHook = {
  region: {
    latitude: 42.6977,
    longitude: 23.3219,
    latitudeDelta: 0.05,
    longitudeDelta: 0.05
  },
  userLocation: {
    latitude: 42.6977,
    longitude: 23.3219
  },
  filters: {
    radius: 500,
    types: {
      walk: true
    }
  },
  stats: {
    activeDogs: 3,
    activeCats: 1,
    hotspots: 2
  },
  filterPanelHeight: {},
  statsOpacity: {},
  activityTypes: ["walk", "play", "lost_pet"],
  setSelectedPin: jest.fn(),
  setFilters: jest.fn(),
  getCurrentLocation: jest.fn(),
  toggleFilterPanel: jest.fn(),
  toggleActivity: jest.fn(),
  getMarkerColor: function getMarkerColor(activity, isMatch) {
    return isMatch ? "#00ff88" : activity === "walk" ? "#4da6ff" : "#fff";
  },
  getStableMatchFlag: function getStableMatchFlag(pin) {
    return pin.activity === "walk";
  }
};
describe("MapScreen (interactions)", function () {
  afterEach(function () {
    jest.resetModules();
    jest.clearAllMocks();
  });
  it("tapping a Marker calls setSelectedPin and opens PinDetailsModal; close hides it", (0, _asyncToGenerator2.default)(function* () {
    jest.doMock("../../hooks/screens/useMapScreen", function () {
      return {
        useMapScreen: function useMapScreen() {
          return _objectSpread(_objectSpread({}, baseHook), {}, {
            filteredPins: [{
              _id: "pin-1",
              latitude: 1,
              longitude: 1,
              activity: "walk",
              message: "hello",
              title: "Pin #1"
            }],
            selectedPin: {
              _id: "pin-1"
            }
          });
        }
      };
    });
    var _yield$import = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("../MapScreen"));
      }),
      MapScreen = _yield$import.default;
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(MapScreen, {
        navigation: {
          navigate: _testUtils.mockNavigate
        },
        as: true,
        any: true
      })),
      getAllByTestId = _renderWithProviders.getAllByTestId,
      getByTestId = _renderWithProviders.getByTestId,
      getByLabelText = _renderWithProviders.getByLabelText,
      queryByTestId = _renderWithProviders.queryByTestId;
    var markers = getAllByTestId("Marker");
    expect(markers.length).toBeGreaterThan(0);
    _reactNative.fireEvent.press(markers[0]);
    expect(getByTestId("PinDetailsModal")).toBeTruthy();
    _reactNative.fireEvent.press(getByLabelText("close-pin"));
    expect(queryByTestId("PinDetailsModal")).toBeFalsy();
  }));
  it("AR FAB is disabled when userLocation is missing (no navigation occurs)", (0, _asyncToGenerator2.default)(function* () {
    var navSpy = _testUtils.mockNavigate;
    jest.doMock("../../hooks/screens/useMapScreen", function () {
      return {
        useMapScreen: function useMapScreen() {
          return _objectSpread(_objectSpread({}, baseHook), {}, {
            userLocation: null,
            filteredPins: [{
              _id: "pin-1",
              latitude: 1,
              longitude: 1,
              activity: "walk",
              title: "Pin #1"
            }],
            selectedPin: null
          });
        }
      };
    });
    var _yield$import2 = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("../MapScreen"));
      }),
      MapScreen = _yield$import2.default;
    var _renderWithProviders2 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(MapScreen, {
        navigation: {
          navigate: _testUtils.mockNavigate
        },
        as: true,
        any: true
      })),
      getAllByText = _renderWithProviders2.getAllByText;
    _reactNative.fireEvent.press(getAllByText("👁️")[0]);
    expect(navSpy).not.toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,