6e8e4b67247badcb4c0dbbdb23bfbfbc
"use strict";

_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _native = require("@testing-library/react-hooks/native");
var _reactNative = require("react-native");
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var _usePhotoEditor = require("../usePhotoEditor");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("usePhotoEditor", function () {
  var mockUri = "file:///test-image.jpg";
  var mockOptions = {
    maxWidth: 1920,
    maxHeight: 1920,
    quality: 0.9
  };
  beforeEach(function () {
    jest.clearAllMocks();
    ImageManipulator.manipulateAsync.mockResolvedValue({
      uri: mockUri,
      width: 1920,
      height: 1920
    });
  });
  it("initializes with correct default values", function () {
    var _renderHook = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook.result;
    expect(result.current.uri).toBe(mockUri);
    expect(result.current.isLoading).toBe(false);
    expect(result.current.adjustments).toEqual(_usePhotoEditor.DEFAULT_ADJUSTMENTS);
    expect(result.current.rotation).toBe(0);
    expect(result.current.flipHorizontal).toBe(false);
    expect(result.current.flipVertical).toBe(false);
  });
  it("initializes with custom options", function () {
    var customOptions = {
      maxWidth: 1080,
      maxHeight: 1080,
      quality: 0.8
    };
    var _renderHook2 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, customOptions);
      }),
      result = _renderHook2.result;
    expect(result.current.uri).toBe(mockUri);
  });
  it("updates adjustment values", function () {
    var _renderHook3 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook3.result;
    (0, _native.act)(function () {
      result.current.updateAdjustment("brightness", 120);
    });
    expect(result.current.adjustments.brightness).toBe(120);
  });
  it("updates multiple adjustments", function () {
    var _renderHook4 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook4.result;
    (0, _native.act)(function () {
      result.current.updateAdjustment("brightness", 110);
      result.current.updateAdjustment("contrast", 115);
      result.current.updateAdjustment("saturation", 105);
    });
    expect(result.current.adjustments.brightness).toBe(110);
    expect(result.current.adjustments.contrast).toBe(115);
    expect(result.current.adjustments.saturation).toBe(105);
  });
  it("rotates left correctly", function () {
    var _renderHook5 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook5.result;
    (0, _native.act)(function () {
      result.current.rotateLeft();
    });
    expect(result.current.rotation).toBe(270);
  });
  it("rotates right correctly", function () {
    var _renderHook6 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook6.result;
    (0, _native.act)(function () {
      result.current.rotateRight();
    });
    expect(result.current.rotation).toBe(90);
  });
  it("handles multiple rotations", function () {
    var _renderHook7 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook7.result;
    (0, _native.act)(function () {
      result.current.rotateRight();
      result.current.rotateRight();
    });
    expect(result.current.rotation).toBe(180);
  });
  it("flips horizontally", function () {
    var _renderHook8 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook8.result;
    (0, _native.act)(function () {
      result.current.setFlipHorizontal(true);
    });
    expect(result.current.flipHorizontal).toBe(true);
  });
  it("flips vertically", function () {
    var _renderHook9 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook9.result;
    (0, _native.act)(function () {
      result.current.setFlipVertical(true);
    });
    expect(result.current.flipVertical).toBe(true);
  });
  it("applies filter preset", function () {
    var _renderHook0 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook0.result;
    (0, _native.act)(function () {
      result.current.applyFilter({
        brightness: 110,
        contrast: 115
      });
    });
    expect(result.current.adjustments.brightness).toBe(110);
    expect(result.current.adjustments.contrast).toBe(115);
  });
  it("resets all adjustments", function () {
    var _renderHook1 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook1.result;
    (0, _native.act)(function () {
      result.current.updateAdjustment("brightness", 120);
      result.current.rotateRight();
      result.current.setFlipHorizontal(true);
    });
    (0, _native.act)(function () {
      result.current.resetAdjustments();
    });
    expect(result.current.adjustments).toEqual(_usePhotoEditor.DEFAULT_ADJUSTMENTS);
    expect(result.current.rotation).toBe(0);
    expect(result.current.flipHorizontal).toBe(false);
    expect(result.current.flipVertical).toBe(false);
  });
  it("saves image successfully", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook10 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook10.result;
    var savedUri = null;
    yield (0, _native.act)((0, _asyncToGenerator2.default)(function* () {
      savedUri = yield result.current.saveImage();
    }));
    expect(savedUri).toBeDefined();
    expect(ImageManipulator.manipulateAsync).toHaveBeenCalled();
    expect(result.current.isLoading).toBe(false);
  }));
  it("applies rotation to saved image", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook11 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook11.result;
    (0, _native.act)(function () {
      result.current.rotateRight();
    });
    yield (0, _native.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveImage();
    }));
    expect(ImageManipulator.manipulateAsync).toHaveBeenCalled();
  }));
  it("applies flips to saved image", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook12 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook12.result;
    (0, _native.act)(function () {
      result.current.setFlipHorizontal(true);
    });
    yield (0, _native.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveImage();
    }));
    expect(ImageManipulator.manipulateAsync).toHaveBeenCalled();
  }));
  it("handles save failure gracefully", (0, _asyncToGenerator2.default)(function* () {
    ImageManipulator.manipulateAsync.mockRejectedValue(new Error("Save failed"));
    var _renderHook13 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook13.result;
    var savedUri = null;
    yield (0, _native.act)((0, _asyncToGenerator2.default)(function* () {
      savedUri = yield result.current.saveImage();
    }));
    expect(savedUri).toBeNull();
    expect(_reactNative.Alert.alert).toHaveBeenCalled();
    expect(result.current.isLoading).toBe(false);
  }));
  it("sets loading state during save", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook14 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook14.result;
    var savePromise = (0, _native.act)((0, _asyncToGenerator2.default)(function* () {
      return result.current.saveImage();
    }));
    expect(result.current.isLoading).toBe(true);
    yield savePromise;
    expect(result.current.isLoading).toBe(false);
  }));
  it("maintains manipulation history", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook15 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook15.result;
    yield (0, _native.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveImage();
    }));
    expect(ImageManipulator.manipulateAsync).toHaveBeenCalled();
  }));
  it("handles edge case rotation values", function () {
    var _renderHook16 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook16.result;
    (0, _native.act)(function () {
      result.current.rotateRight();
      result.current.rotateRight();
      result.current.rotateRight();
      result.current.rotateRight();
    });
    expect(result.current.rotation).toBe(0);
  });
  it("handles negative rotation (rotate left)", function () {
    var _renderHook17 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook17.result;
    (0, _native.act)(function () {
      result.current.rotateLeft();
    });
    expect(result.current.rotation).toBe(270);
  });
  it("prevents repeated flip toggles", function () {
    var _renderHook18 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook18.result;
    (0, _native.act)(function () {
      result.current.setFlipHorizontal(true);
      result.current.setFlipHorizontal(true);
    });
    expect(result.current.flipHorizontal).toBe(true);
  });
  it("applies combined transformations", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook19 = (0, _native.renderHook)(function () {
        return (0, _usePhotoEditor.usePhotoEditor)(mockUri, mockOptions);
      }),
      result = _renderHook19.result;
    (0, _native.act)(function () {
      result.current.rotateRight();
      result.current.setFlipHorizontal(true);
      result.current.setFlipVertical(true);
      result.current.updateAdjustment("brightness", 110);
    });
    yield (0, _native.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveImage();
    }));
    expect(ImageManipulator.manipulateAsync).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,