11271da32e5ca767c2d20ccebdb0fb25
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePremiumScreen = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _native = require("@react-navigation/native");
var _react = require("react");
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var _PremiumService = require("../../services/PremiumService");
var SUBSCRIPTION_TIERS = [{
  id: "basic",
  name: "Basic",
  price: {
    monthly: 0,
    yearly: 0
  },
  stripePriceId: {
    monthly: "",
    yearly: ""
  },
  features: ["5 daily swipes", "Basic matching", "Standard chat", "Weather updates", "Community support"]
}, {
  id: "premium",
  name: "Premium",
  price: {
    monthly: 9.99,
    yearly: 99.99
  },
  stripePriceId: {
    monthly: "price_premium_monthly",
    yearly: "price_premium_yearly"
  },
  features: ["Unlimited swipes", "See who liked you", "Advanced filters", "Ad-free experience", "Advanced matching algorithm", "Priority in search results", "Read receipts", "Video calls"],
  popular: true
}, {
  id: "ultimate",
  name: "Ultimate",
  price: {
    monthly: 19.99,
    yearly: 199.99
  },
  stripePriceId: {
    monthly: "price_ultimate_monthly",
    yearly: "price_ultimate_yearly"
  },
  features: ["All Premium features", "AI-powered recommendations", "Exclusive events access", "Priority support", "Profile boost", "Unlimited Super Likes", "Advanced analytics", "VIP status"]
}];
var usePremiumScreen = exports.usePremiumScreen = function usePremiumScreen() {
  var navigation = (0, _native.useNavigation)();
  var _useState = (0, _react.useState)("monthly"),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    billingPeriod = _useState2[0],
    setBillingPeriod = _useState2[1];
  var _useState3 = (0, _react.useState)("premium"),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    selectedTier = _useState4[0],
    setSelectedTier = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  var handleSubscribe = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (tierId) {
      setIsLoading(true);
      try {
        var tier = SUBSCRIPTION_TIERS.find(function (t) {
          return t.id === tierId;
        });
        if (!tier) {
          throw new Error("Invalid subscription tier");
        }
        var priceId = tier.stripePriceId[billingPeriod];
        if (!priceId) {
          return;
        }
        var session = yield _PremiumService.premiumService.createCheckoutSession(priceId, "pawfectmatch://subscription/success", "pawfectmatch://subscription/cancel");
        if (session != null && session.url) {
          yield _reactNative.Linking.openURL(session.url);
        }
      } catch (error) {
        _core.logger.error("Subscription error:", {
          error: error
        });
        _reactNative.Alert.alert("Subscription Error", "Failed to start checkout process. Please try again.", [{
          text: "OK"
        }]);
      } finally {
        setIsLoading(false);
      }
    });
    return function handleSubscribe(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var handleGoBack = function handleGoBack() {
    navigation.goBack();
  };
  var availablePlans = _PremiumService.premiumService.getAvailablePlans();
  return {
    billingPeriod: billingPeriod,
    selectedTier: selectedTier,
    isLoading: isLoading,
    subscriptionTiers: SUBSCRIPTION_TIERS,
    availablePlans: availablePlans,
    setBillingPeriod: setBillingPeriod,
    setSelectedTier: setSelectedTier,
    handleSubscribe: handleSubscribe,
    handleGoBack: handleGoBack
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,