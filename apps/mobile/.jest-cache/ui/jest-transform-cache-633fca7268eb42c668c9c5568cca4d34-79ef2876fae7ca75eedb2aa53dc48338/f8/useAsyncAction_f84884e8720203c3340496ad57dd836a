34c8817344d463f73720757e1b84952a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAsyncAction = useAsyncAction;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
function useAsyncAction(_ref) {
  var action = _ref.action,
    onSuccess = _ref.onSuccess,
    onError = _ref.onError,
    _ref$immediate = _ref.immediate,
    immediate = _ref$immediate === void 0 ? false : _ref$immediate;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    data = _useState2[0],
    setData = _useState2[1];
  var _useState3 = (0, _react.useState)(immediate),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    error = _useState6[0],
    setError = _useState6[1];
  var execute = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (isLoading) {
      return undefined;
    }
    setIsLoading(true);
    setError(null);
    try {
      var result = yield action.apply(void 0, arguments);
      setData(result);
      onSuccess == null ? void 0 : onSuccess(result);
      return result;
    } catch (err) {
      var _error = err instanceof Error ? err : new Error(String(err));
      setError(_error);
      onError == null ? void 0 : onError(_error);
      throw _error;
    } finally {
      setIsLoading(false);
    }
  }), [action, onSuccess, onError, isLoading]);
  var reset = (0, _react.useCallback)(function () {
    setData(null);
    setError(null);
    setIsLoading(false);
  }, []);
  return {
    data: data,
    isLoading: isLoading,
    error: error,
    execute: execute,
    reset: reset
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwidXNlQXN5bmNBY3Rpb24iLCJfcmVmIiwiYWN0aW9uIiwib25TdWNjZXNzIiwib25FcnJvciIsIl9yZWYkaW1tZWRpYXRlIiwiaW1tZWRpYXRlIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZGVmYXVsdCIsImRhdGEiLCJzZXREYXRhIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJfdXNlU3RhdGU1IiwiX3VzZVN0YXRlNiIsImVycm9yIiwic2V0RXJyb3IiLCJleGVjdXRlIiwidXNlQ2FsbGJhY2siLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJ1bmRlZmluZWQiLCJyZXN1bHQiLCJhcHBseSIsImFyZ3VtZW50cyIsImVyciIsIkVycm9yIiwiU3RyaW5nIiwicmVzZXQiXSwic291cmNlcyI6WyJ1c2VBc3luY0FjdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGludGVyZmFjZSBVc2VBc3luY0FjdGlvbk9wdGlvbnM8VFJlc3VsdCwgVEFyZ3MgZXh0ZW5kcyBhbnlbXSA9IFtdPiB7XG4gIGFjdGlvbjogKC4uLmFyZ3M6IFRBcmdzKSA9PiBQcm9taXNlPFRSZXN1bHQ+O1xuICBvblN1Y2Nlc3M/OiAocmVzdWx0OiBUUmVzdWx0KSA9PiB2b2lkO1xuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZDtcbiAgaW1tZWRpYXRlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VBc3luY0FjdGlvblJldHVybjxUUmVzdWx0LCBUQXJncyBleHRlbmRzIGFueVtdID0gW10+IHtcbiAgZGF0YTogVFJlc3VsdCB8IG51bGw7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgZXJyb3I6IEVycm9yIHwgbnVsbDtcbiAgZXhlY3V0ZTogKC4uLmFyZ3M6IFRBcmdzKSA9PiBQcm9taXNlPFRSZXN1bHQgfCB1bmRlZmluZWQ+O1xuICByZXNldDogKCkgPT4gdm9pZDtcbn1cblxuLyoqXG4gKiBIb29rIGZvciBtYW5hZ2luZyBhc3luYyBhY3Rpb25zIHdpdGggbG9hZGluZywgZXJyb3IsIGFuZCBzdWNjZXNzIHN0YXRlc1xuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCB7IGRhdGEsIGlzTG9hZGluZywgZXJyb3IsIGV4ZWN1dGUgfSA9IHVzZUFzeW5jQWN0aW9uKHtcbiAqICAgYWN0aW9uOiBhc3luYyAodXNlcklkOiBzdHJpbmcpID0+IGF3YWl0IGFwaS5nZXRVc2VyKHVzZXJJZCksXG4gKiAgIG9uU3VjY2VzczogKHVzZXIpID0+IGxvZ2dlci5pbmZvKCdVc2VyIGxvYWRlZCcsIHsgdXNlcklkOiB1c2VyLmlkIH0pLFxuICogICBvbkVycm9yOiAoZXJyb3IpID0+IGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGxvYWQgdXNlcicsIHsgZXJyb3IgfSlcbiAqIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXN5bmNBY3Rpb248VFJlc3VsdCwgVEFyZ3MgZXh0ZW5kcyBhbnlbXSA9IFtdPih7XG4gIGFjdGlvbixcbiAgb25TdWNjZXNzLFxuICBvbkVycm9yLFxuICBpbW1lZGlhdGUgPSBmYWxzZSxcbn06IFVzZUFzeW5jQWN0aW9uT3B0aW9uczxUUmVzdWx0LCBUQXJncz4pOiBVc2VBc3luY0FjdGlvblJldHVybjxcbiAgVFJlc3VsdCxcbiAgVEFyZ3Ncbj4ge1xuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZTxUUmVzdWx0IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShpbW1lZGlhdGUpO1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPEVycm9yIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgZXhlY3V0ZSA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICguLi5hcmdzOiBUQXJncyk6IFByb21pc2U8VFJlc3VsdCB8IHVuZGVmaW5lZD4gPT4ge1xuICAgICAgLy8gUHJldmVudCBkdXBsaWNhdGUgZXhlY3V0aW9uIHdoaWxlIGxvYWRpbmdcbiAgICAgIGlmIChpc0xvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgc2V0RXJyb3IobnVsbCk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFjdGlvbiguLi5hcmdzKTtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQpO1xuICAgICAgICBvblN1Y2Nlc3M/LihyZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xuICAgICAgICBzZXRFcnJvcihlcnJvcik7XG4gICAgICAgIG9uRXJyb3I/LihlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFthY3Rpb24sIG9uU3VjY2Vzcywgb25FcnJvciwgaXNMb2FkaW5nXSxcbiAgKTtcblxuICBjb25zdCByZXNldCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXREYXRhKG51bGwpO1xuICAgIHNldEVycm9yKG51bGwpO1xuICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4ge1xuICAgIGRhdGEsXG4gICAgaXNMb2FkaW5nLFxuICAgIGVycm9yLFxuICAgIGV4ZWN1dGUsXG4gICAgcmVzZXQsXG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7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