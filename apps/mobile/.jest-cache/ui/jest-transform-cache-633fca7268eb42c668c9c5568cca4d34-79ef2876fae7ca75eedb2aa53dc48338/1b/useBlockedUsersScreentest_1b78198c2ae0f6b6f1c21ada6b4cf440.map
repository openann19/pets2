{"version":3,"names":["_getJestObj","mock","Alert","alert","jest","fn","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_reactNative2","_api","_useBlockedUsersScreen","_require","mockMatchesAPI","matchesAPI","describe","beforeEach","clearAllMocks","it","_renderHook","renderHook","useBlockedUsersScreen","result","expect","current","blockedUsers","toEqual","loading","toBe","refreshing","default","mockUsers","_id","name","email","getBlockedUsers","mockResolvedValue","_renderHook2","waitFor","toHaveLength","toHaveBeenCalled","mockRejectedValue","Error","_renderHook3","toHaveBeenCalledWith","_renderHook4","refreshBlockedUsers","toHaveBeenCalledTimes","unblockUser","undefined","_renderHook5","_renderHook6"],"sources":["useBlockedUsersScreen.test.ts"],"sourcesContent":["/**\n * useBlockedUsersScreen Tests\n * Comprehensive unit tests for blocked users functionality\n */\n\nimport { renderHook, waitFor } from \"@testing-library/react-native\";\nimport { Alert } from \"react-native\";\nimport { matchesAPI } from \"../../../services/api\";\nimport { useBlockedUsersScreen } from \"../useBlockedUsersScreen\";\n\n// Mock dependencies\njest.mock(\"../../../services/api\");\njest.mock(\"react-native\", () => ({\n  Alert: {\n    alert: jest.fn(),\n  },\n}));\n\nconst mockMatchesAPI = matchesAPI as jest.Mocked<typeof matchesAPI>;\n\ndescribe(\"useBlockedUsersScreen\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Initial State\", () => {\n    it(\"should initialize with empty blocked users list\", () => {\n      const { result } = renderHook(() => useBlockedUsersScreen());\n      \n      expect(result.current.blockedUsers).toEqual([]);\n      expect(result.current.loading).toBe(true);\n      expect(result.current.refreshing).toBe(false);\n    });\n  });\n\n  describe(\"loadBlockedUsers\", () => {\n    it(\"should load blocked users successfully\", async () => {\n      const mockUsers = [\n        { _id: \"1\", name: \"User 1\", email: \"user1@test.com\" },\n        { _id: \"2\", name: \"User 2\", email: \"user2@test.com\" },\n      ];\n      \n      mockMatchesAPI.getBlockedUsers.mockResolvedValue(mockUsers as any);\n\n      const { result } = renderHook(() => useBlockedUsersScreen());\n\n      await waitFor(() => expect(result.current.loading).toBe(false));\n\n      expect(result.current.blockedUsers).toHaveLength(2);\n      expect(mockMatchesAPI.getBlockedUsers).toHaveBeenCalled();\n    });\n\n    it(\"should handle API errors gracefully\", async () => {\n      mockMatchesAPI.getBlockedUsers.mockRejectedValue(\n        new Error(\"API Error\")\n      );\n\n      const { result } = renderHook(() => useBlockedUsersScreen());\n\n      await waitFor(() => expect(result.current.loading).toBe(false));\n\n      expect(Alert.alert).toHaveBeenCalledWith(\n        \"Error\",\n        \"Failed to load blocked users. Please try again.\"\n      );\n    });\n  });\n\n  describe(\"refreshBlockedUsers\", () => {\n    it(\"should refresh blocked users list\", async () => {\n      const mockUsers = [{ _id: \"1\", name: \"User 1\", email: \"user1@test.com\" }];\n      mockMatchesAPI.getBlockedUsers.mockResolvedValue(mockUsers as any);\n\n      const { result } = renderHook(() => useBlockedUsersScreen());\n\n      await waitFor(() => expect(result.current.loading).toBe(false));\n\n      result.current.refreshBlockedUsers();\n\n      await waitFor(() => expect(result.current.refreshing).toBe(false));\n      expect(mockMatchesAPI.getBlockedUsers).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe(\"unblockUser\", () => {\n    it(\"should unblock user successfully\", async () => {\n      mockMatchesAPI.unblockUser.mockResolvedValue(undefined);\n      mockMatchesAPI.getBlockedUsers.mockResolvedValue([] as any);\n\n      const { result } = renderHook(() => useBlockedUsersScreen());\n\n      await result.current.unblockUser(\"user123\");\n\n      expect(mockMatchesAPI.unblockUser).toHaveBeenCalledWith(\"user123\");\n      expect(Alert.alert).toHaveBeenCalledWith(\n        \"Success\",\n        \"User has been unblocked\"\n      );\n    });\n\n    it(\"should handle unblock errors\", async () => {\n      mockMatchesAPI.unblockUser.mockRejectedValue(new Error(\"Failed\"));\n\n      const { result } = renderHook(() => useBlockedUsersScreen());\n\n      await result.current.unblockUser(\"user123\");\n\n      expect(Alert.alert).toHaveBeenCalledWith(\n        \"Error\",\n        \"Failed to unblock user. Please try again.\"\n      );\n    });\n  });\n});\n\n"],"mappings":"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","ignoreList":[]}