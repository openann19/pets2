fea7d4ea0a1f706984c86e4988ad3fa5
"use strict";

_getJestObj().mock("../../../services/api");
_getJestObj().mock("react-native", function () {
  return {
    Alert: {
      alert: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _api = require("../../../services/api");
var _useBlockedUsersScreen = require("../useBlockedUsersScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockMatchesAPI = _api.matchesAPI;
describe("useBlockedUsersScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe("Initial State", function () {
    it("should initialize with empty blocked users list", function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useBlockedUsersScreen.useBlockedUsersScreen)();
        }),
        result = _renderHook.result;
      expect(result.current.blockedUsers).toEqual([]);
      expect(result.current.loading).toBe(true);
      expect(result.current.refreshing).toBe(false);
    });
  });
  describe("loadBlockedUsers", function () {
    it("should load blocked users successfully", (0, _asyncToGenerator2.default)(function* () {
      var mockUsers = [{
        _id: "1",
        name: "User 1",
        email: "user1@test.com"
      }, {
        _id: "2",
        name: "User 2",
        email: "user2@test.com"
      }];
      mockMatchesAPI.getBlockedUsers.mockResolvedValue(mockUsers);
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useBlockedUsersScreen.useBlockedUsersScreen)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.loading).toBe(false);
      });
      expect(result.current.blockedUsers).toHaveLength(2);
      expect(mockMatchesAPI.getBlockedUsers).toHaveBeenCalled();
    }));
    it("should handle API errors gracefully", (0, _asyncToGenerator2.default)(function* () {
      mockMatchesAPI.getBlockedUsers.mockRejectedValue(new Error("API Error"));
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useBlockedUsersScreen.useBlockedUsersScreen)();
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.loading).toBe(false);
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Error", "Failed to load blocked users. Please try again.");
    }));
  });
  describe("refreshBlockedUsers", function () {
    it("should refresh blocked users list", (0, _asyncToGenerator2.default)(function* () {
      var mockUsers = [{
        _id: "1",
        name: "User 1",
        email: "user1@test.com"
      }];
      mockMatchesAPI.getBlockedUsers.mockResolvedValue(mockUsers);
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useBlockedUsersScreen.useBlockedUsersScreen)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.loading).toBe(false);
      });
      result.current.refreshBlockedUsers();
      yield (0, _reactNative.waitFor)(function () {
        return expect(result.current.refreshing).toBe(false);
      });
      expect(mockMatchesAPI.getBlockedUsers).toHaveBeenCalledTimes(2);
    }));
  });
  describe("unblockUser", function () {
    it("should unblock user successfully", (0, _asyncToGenerator2.default)(function* () {
      mockMatchesAPI.unblockUser.mockResolvedValue(undefined);
      mockMatchesAPI.getBlockedUsers.mockResolvedValue([]);
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useBlockedUsersScreen.useBlockedUsersScreen)();
        }),
        result = _renderHook5.result;
      yield result.current.unblockUser("user123");
      expect(mockMatchesAPI.unblockUser).toHaveBeenCalledWith("user123");
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Success", "User has been unblocked");
    }));
    it("should handle unblock errors", (0, _asyncToGenerator2.default)(function* () {
      mockMatchesAPI.unblockUser.mockRejectedValue(new Error("Failed"));
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useBlockedUsersScreen.useBlockedUsersScreen)();
        }),
        result = _renderHook6.result;
      yield result.current.unblockUser("user123");
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Error", "Failed to unblock user. Please try again.");
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,