{"version":3,"names":["global","TextEncoder","require","TextDecoder","Alert","alert","jest","fn","Platform","OS","Version","select","obj","ios","default","isTV","isTesting","Dimensions","get","width","height","scale","fontScale","addEventListener","removeEventListener","Linking","openURL","Promise","resolve","canOpenURL","getInitialURL","remove","Keyboard","addListener","removeListener","removeAllListeners","dismiss","scheduleLayoutAnimation","Animated","Value","value","_classCallCheck2","_value","_listeners","Set","_createClass2","key","setValue","getValue","ValueXY","xy","x","y","timing","start","stop","spring","sequence","parallel","stagger","loop","decay","delay","testStartMemory","beforeEach","clearAllMocks","gc","process","memoryUsage","heapUsed","afterEach","isMockFunction","setTimeout","setInterval","timerCount","getTimerCount","runOnlyPendingTimers","e","clearAllTimers","useRealTimers","testEndMemory","memoryGrowth","console","warn","toFixed"],"sources":["jest.setup.core.ts"],"sourcesContent":["/**\n * Core Jest setup - Essential polyfills and global setup\n * Minimal setup loaded for all tests\n */\n\n// Polyfill for TextEncoder/TextDecoder (Node.js 18+ has it built-in, but Jest may not)\nglobal.TextEncoder = global.TextEncoder || require('util').TextEncoder;\nglobal.TextDecoder = global.TextDecoder || require('util').TextDecoder;\n\n// Global React Native mocks (to prevent tests from mocking react-native directly)\n(global as any).Alert = {\n  alert: jest.fn(),\n};\n\n(global as any).Platform = {\n  OS: 'ios',\n  Version: '14.0',\n  select: jest.fn((obj) => obj.ios || obj.default),\n  isTV: false,\n  isTesting: true,\n};\n\n(global as any).Dimensions = {\n  get: jest.fn(() => ({ width: 375, height: 812, scale: 2, fontScale: 1 })),\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n};\n\n(global as any).Linking = {\n  openURL: jest.fn(() => Promise.resolve()),\n  canOpenURL: jest.fn(() => Promise.resolve(true)),\n  getInitialURL: jest.fn(() => Promise.resolve(null)),\n  addEventListener: jest.fn(() => ({ remove: jest.fn() })),\n};\n\n(global as any).Keyboard = {\n  addListener: jest.fn(() => ({ remove: jest.fn() })),\n  removeListener: jest.fn(),\n  removeAllListeners: jest.fn(),\n  dismiss: jest.fn(),\n  scheduleLayoutAnimation: jest.fn(),\n};\n\n// Mock Animated API\n(global as any).Animated = {\n  Value: class Value {\n    _value: number;\n    _listeners: Set<Function>;\n    \n    constructor(value: number) {\n      this._value = value;\n      this._listeners = new Set();\n    }\n    \n    addListener() {}\n    removeListener() {}\n    removeAllListeners() {}\n    setValue(value: number) { this._value = value; }\n    getValue() { return this._value; }\n  },\n  \n  ValueXY: class ValueXY {\n    x: Animated.Value;\n    y: Animated.Value;\n    \n    constructor(xy?: {x: number, y: number}) {\n      this.x = new (global as any).Animated.Value(xy?.x || 0);\n      this.y = new (global as any).Animated.Value(xy?.y || 0);\n    }\n    \n    setValue() {}\n    getValue() { return { x: 0, y: 0 }; }\n  },\n  \n  timing: jest.fn(() => ({ start: jest.fn(), stop: jest.fn() })),\n  spring: jest.fn(() => ({ start: jest.fn(), stop: jest.fn() })),\n  sequence: jest.fn(() => ({ start: jest.fn(), stop: jest.fn() })),\n  parallel: jest.fn(() => ({ start: jest.fn(), stop: jest.fn() })),\n  stagger: jest.fn(() => ({ start: jest.fn(), stop: jest.fn() })),\n  loop: jest.fn(() => ({ start: jest.fn(), stop: jest.fn() })),\n  decay: jest.fn(() => ({ start: jest.fn(), stop: jest.fn() })),\n  delay: jest.fn(() => ({ start: jest.fn(), stop: jest.fn() })),\n};\n\n// Global test setup with memory tracking\nlet testStartMemory: number | null = null;\n\nbeforeEach(() => {\n  jest.clearAllMocks();\n  \n  // Track memory usage at test start (if available)\n  if ((global as any).gc) {\n    (global as any).gc();\n    testStartMemory = process.memoryUsage().heapUsed;\n  }\n});\n\n// Global test cleanup with proper timer handling and memory leak detection\nafterEach(() => {\n  try {\n    // Only check timers if fake timers are active\n    // This check avoids errors when tests use real timers\n    if (jest.isMockFunction(setTimeout) || jest.isMockFunction(setInterval)) {\n      const timerCount = jest.getTimerCount();\n      if (timerCount > 0) {\n        jest.runOnlyPendingTimers();\n      }\n    }\n  } catch (e) {\n    // Ignore errors from timer operations\n  }\n  \n  // Clear all timers\n  jest.clearAllTimers();\n  \n  // Clear all mocks\n  jest.clearAllMocks();\n  \n  // Always restore real timers to prevent leakage\n  try {\n    jest.useRealTimers();\n  } catch (e) {\n    // Timer may not be mocked, ignore\n  }\n  \n  // Memory leak detection (if gc is available)\n  if ((global as any).gc && testStartMemory !== null) {\n    (global as any).gc();\n    const testEndMemory = process.memoryUsage().heapUsed;\n    const memoryGrowth = testEndMemory - testStartMemory;\n    \n    // Warn if memory grew more than 5MB during a single test\n    if (memoryGrowth > 5 * 1024 * 1024) {\n      console.warn(`Potential memory leak detected: ${(memoryGrowth / 1024 / 1024).toFixed(2)}MB growth`);\n    }\n    \n    testStartMemory = null;\n  }\n});\n\n// Note: Console mocking removed to allow proper debugging\n// If needed, tests can mock console individually\n\n"],"mappings":"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","ignoreList":[]}