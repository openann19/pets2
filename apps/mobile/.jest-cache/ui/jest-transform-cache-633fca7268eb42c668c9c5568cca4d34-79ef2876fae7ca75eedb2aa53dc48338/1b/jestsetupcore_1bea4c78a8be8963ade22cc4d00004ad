de81c41584137e02cb26e636facde977
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
global.TextEncoder = global.TextEncoder || require('util').TextEncoder;
global.TextDecoder = global.TextDecoder || require('util').TextDecoder;
global.Alert = {
  alert: jest.fn()
};
global.Platform = {
  OS: 'ios',
  Version: '14.0',
  select: jest.fn(function (obj) {
    return obj.ios || obj.default;
  }),
  isTV: false,
  isTesting: true
};
global.Dimensions = {
  get: jest.fn(function () {
    return {
      width: 375,
      height: 812,
      scale: 2,
      fontScale: 1
    };
  }),
  addEventListener: jest.fn(),
  removeEventListener: jest.fn()
};
global.Linking = {
  openURL: jest.fn(function () {
    return Promise.resolve();
  }),
  canOpenURL: jest.fn(function () {
    return Promise.resolve(true);
  }),
  getInitialURL: jest.fn(function () {
    return Promise.resolve(null);
  }),
  addEventListener: jest.fn(function () {
    return {
      remove: jest.fn()
    };
  })
};
global.Keyboard = {
  addListener: jest.fn(function () {
    return {
      remove: jest.fn()
    };
  }),
  removeListener: jest.fn(),
  removeAllListeners: jest.fn(),
  dismiss: jest.fn(),
  scheduleLayoutAnimation: jest.fn()
};
global.Animated = {
  Value: function () {
    function Value(value) {
      (0, _classCallCheck2.default)(this, Value);
      this._value = value;
      this._listeners = new Set();
    }
    return (0, _createClass2.default)(Value, [{
      key: "addListener",
      value: function addListener() {}
    }, {
      key: "removeListener",
      value: function removeListener() {}
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {}
    }, {
      key: "setValue",
      value: function setValue(value) {
        this._value = value;
      }
    }, {
      key: "getValue",
      value: function getValue() {
        return this._value;
      }
    }]);
  }(),
  ValueXY: function () {
    function ValueXY(xy) {
      (0, _classCallCheck2.default)(this, ValueXY);
      this.x = new global.Animated.Value((xy == null ? void 0 : xy.x) || 0);
      this.y = new global.Animated.Value((xy == null ? void 0 : xy.y) || 0);
    }
    return (0, _createClass2.default)(ValueXY, [{
      key: "setValue",
      value: function setValue() {}
    }, {
      key: "getValue",
      value: function getValue() {
        return {
          x: 0,
          y: 0
        };
      }
    }]);
  }(),
  timing: jest.fn(function () {
    return {
      start: jest.fn(),
      stop: jest.fn()
    };
  }),
  spring: jest.fn(function () {
    return {
      start: jest.fn(),
      stop: jest.fn()
    };
  }),
  sequence: jest.fn(function () {
    return {
      start: jest.fn(),
      stop: jest.fn()
    };
  }),
  parallel: jest.fn(function () {
    return {
      start: jest.fn(),
      stop: jest.fn()
    };
  }),
  stagger: jest.fn(function () {
    return {
      start: jest.fn(),
      stop: jest.fn()
    };
  }),
  loop: jest.fn(function () {
    return {
      start: jest.fn(),
      stop: jest.fn()
    };
  }),
  decay: jest.fn(function () {
    return {
      start: jest.fn(),
      stop: jest.fn()
    };
  }),
  delay: jest.fn(function () {
    return {
      start: jest.fn(),
      stop: jest.fn()
    };
  })
};
var testStartMemory = null;
beforeEach(function () {
  jest.clearAllMocks();
  if (global.gc) {
    global.gc();
    testStartMemory = process.memoryUsage().heapUsed;
  }
});
afterEach(function () {
  try {
    if (jest.isMockFunction(setTimeout) || jest.isMockFunction(setInterval)) {
      var timerCount = jest.getTimerCount();
      if (timerCount > 0) {
        jest.runOnlyPendingTimers();
      }
    }
  } catch (e) {}
  jest.clearAllTimers();
  jest.clearAllMocks();
  try {
    jest.useRealTimers();
  } catch (e) {}
  if (global.gc && testStartMemory !== null) {
    global.gc();
    var testEndMemory = process.memoryUsage().heapUsed;
    var memoryGrowth = testEndMemory - testStartMemory;
    if (memoryGrowth > 5 * 1024 * 1024) {
      console.warn(`Potential memory leak detected: ${(memoryGrowth / 1024 / 1024).toFixed(2)}MB growth`);
    }
    testStartMemory = null;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,