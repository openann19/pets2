a0b57acbe1f5e660f359f0497025c2fd
"use strict";

_getJestObj().mock("@pawfectmatch/core");
_getJestObj().mock("../../../theme/Provider");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _PremiumGate = _interopRequireDefault(require("../../Premium/PremiumGate"));
require("@pawfectmatch/core");
require("../../../theme/Provider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  navigate: jest.fn()
};
describe("PremiumGate", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    useTheme.mockReturnValue({
      colors: {
        primary: "#7c3aed",
        secondary: "Theme.colors.primary[500]",
        background: "Theme.colors.neutral[0]",
        text: "Theme.colors.neutral[950]"
      },
      isDark: false
    });
  });
  it("renders premium content when user is premium", function () {
    useAuthStore.mockReturnValue({
      user: {
        id: "user-123",
        firstName: "Test",
        premium: {
          isActive: true,
          plan: "premium"
        }
      }
    });
    var mockPremiumContent = jest.fn(function () {
      return (0, _jsxRuntime.jsx)(_react.default.Fragment, {
        children: "Premium Content"
      });
    });
    var _render = render((0, _jsxRuntime.jsx)(_PremiumGate.default, {
        navigation: mockNavigation,
        premiumContent: mockPremiumContent,
        featureDescription: "This feature"
      })),
      getByText = _render.getByText,
      queryByText = _render.queryByText;
    expect(getByText("Premium Content")).toBeTruthy();
    expect(queryByText("Premium Feature")).toBeNull();
  });
  it("renders paywall when user is not premium", function () {
    useAuthStore.mockReturnValue({
      user: {
        id: "user-123",
        firstName: "Test",
        premium: {
          isActive: false
        }
      }
    });
    var mockPremiumContent = jest.fn(function () {
      return (0, _jsxRuntime.jsx)(_react.default.Fragment, {
        children: "Premium Content"
      });
    });
    var _render2 = render((0, _jsxRuntime.jsx)(_PremiumGate.default, {
        navigation: mockNavigation,
        premiumContent: mockPremiumContent,
        featureDescription: "Advanced filters"
      })),
      getByText = _render2.getByText,
      queryByText = _render2.queryByText,
      getByTestId = _render2.getByTestId;
    expect(getByText("Premium Feature")).toBeTruthy();
    expect(getByText("Advanced filters requires a premium subscription")).toBeTruthy();
    expect(queryByText("Premium Content")).toBeNull();
    expect(getByTestId("upgrade-button")).toBeTruthy();
  });
  it("navigates to Premium screen when upgrade button is pressed", function () {
    useAuthStore.mockReturnValue({
      user: {
        id: "user-123",
        firstName: "Test",
        premium: {
          isActive: false
        }
      }
    });
    var mockPremiumContent = jest.fn(function () {
      return (0, _jsxRuntime.jsx)(_react.default.Fragment, {
        children: "Premium Content"
      });
    });
    var _render3 = render((0, _jsxRuntime.jsx)(_PremiumGate.default, {
        navigation: mockNavigation,
        premiumContent: mockPremiumContent,
        featureDescription: "Advanced filters"
      })),
      getByText = _render3.getByText;
    fireEvent.press(getByText("Upgrade to Premium"));
    expect(mockNavigation.navigate).toHaveBeenCalledWith("Premium");
  });
  it("renders custom message when provided", function () {
    useAuthStore.mockReturnValue({
      user: {
        id: "user-123",
        firstName: "Test",
        premium: {
          isActive: false
        }
      }
    });
    var mockPremiumContent = jest.fn(function () {
      return (0, _jsxRuntime.jsx)(_react.default.Fragment, {
        children: "Premium Content"
      });
    });
    var _render4 = render((0, _jsxRuntime.jsx)(_PremiumGate.default, {
        navigation: mockNavigation,
        premiumContent: mockPremiumContent,
        featureDescription: "Advanced filters",
        customMessage: "Get premium to unlock advanced filters!"
      })),
      getByText = _render4.getByText;
    expect(getByText("Get premium to unlock advanced filters!")).toBeTruthy();
  });
  it("renders with dark theme style", function () {
    useTheme.mockReturnValue({
      colors: {
        primary: "#7c3aed",
        secondary: "Theme.colors.primary[500]",
        background: "Theme.colors.neutral[800]",
        text: "Theme.colors.neutral[0]",
        card: "Theme.colors.neutral[700]"
      },
      isDark: true
    });
    useAuthStore.mockReturnValue({
      user: {
        id: "user-123",
        firstName: "Test",
        premium: {
          isActive: false
        }
      }
    });
    var mockPremiumContent = jest.fn(function () {
      return (0, _jsxRuntime.jsx)(_react.default.Fragment, {
        children: "Premium Content"
      });
    });
    var _render5 = render((0, _jsxRuntime.jsx)(_PremiumGate.default, {
        navigation: mockNavigation,
        premiumContent: mockPremiumContent,
        featureDescription: "Advanced filters"
      })),
      getByTestId = _render5.getByTestId;
    var container = getByTestId("premium-gate-container");
    expect(container.props.style).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,