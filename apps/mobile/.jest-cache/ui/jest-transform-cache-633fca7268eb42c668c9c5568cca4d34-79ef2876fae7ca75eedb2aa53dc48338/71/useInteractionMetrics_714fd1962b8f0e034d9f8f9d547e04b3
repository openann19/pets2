e9e3eb8d519d116daa98e835fcf1ca8f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDoubleTapMetrics = useDoubleTapMetrics;
exports.useInteractionMetrics = useInteractionMetrics;
exports.usePinchMetrics = usePinchMetrics;
exports.useReactionMetrics = useReactionMetrics;
exports.useSwipeMetrics = useSwipeMetrics;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("react");
var _core = require("@pawfectmatch/core");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useInteractionMetrics(_ref) {
  var name = _ref.name,
    _ref$enableLogging = _ref.enableLogging,
    enableLogging = _ref$enableLogging === void 0 ? true : _ref$enableLogging,
    _ref$threshold = _ref.threshold,
    threshold = _ref$threshold === void 0 ? 50 : _ref$threshold;
  var metricsRef = (0, _react.useRef)(new Map());
  var startInteraction = (0, _react.useCallback)(function () {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
    var metadata = arguments.length > 1 ? arguments[1] : undefined;
    var metric = {
      name: name,
      startTime: performance.now(),
      success: false,
      metadata: metadata
    };
    metricsRef.current.set(id, metric);
    if (enableLogging) {
      _core.logger.debug(`🎯 Interaction started: ${name}`, {
        id: id,
        metadata: metadata
      });
    }
  }, [name, enableLogging]);
  var endInteraction = (0, _react.useCallback)(function () {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
    var success = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var metadata = arguments.length > 2 ? arguments[2] : undefined;
    var metric = metricsRef.current.get(id);
    if (!metric) {
      _core.logger.warn(`⚠️ No interaction found for id: ${id}`);
      return;
    }
    var endTime = performance.now();
    var duration = endTime - metric.startTime;
    var completedMetric = _objectSpread(_objectSpread({}, metric), {}, {
      endTime: endTime,
      duration: duration,
      success: success,
      metadata: _objectSpread(_objectSpread({}, metric.metadata), metadata)
    });
    metricsRef.current.set(id, completedMetric);
    if (enableLogging) {
      var emoji = success ? '✅' : '❌';
      var speedEmoji = duration > threshold ? '🐌' : '⚡';
      _core.logger.info(`${emoji}${speedEmoji} Interaction completed: ${name}`, {
        id: id,
        duration: `${duration.toFixed(2)}ms`,
        success: success,
        threshold: duration > threshold ? 'SLOW' : 'FAST',
        metadata: completedMetric.metadata
      });
      if (duration > threshold) {
        _core.logger.warn(`🐌 Slow interaction detected: ${name} took ${duration.toFixed(2)}ms (threshold: ${threshold}ms)`, {
          id: id,
          duration: duration,
          metadata: completedMetric.metadata
        });
      }
    }
    return completedMetric;
  }, [name, enableLogging, threshold]);
  var getMetrics = (0, _react.useCallback)(function () {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
    return metricsRef.current.get(id);
  }, []);
  var getAllMetrics = (0, _react.useCallback)(function () {
    return Array.from(metricsRef.current.values());
  }, []);
  var clearMetrics = (0, _react.useCallback)(function () {
    metricsRef.current.clear();
  }, []);
  var measureFunction = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (fn) {
      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
      var metadata = arguments.length > 2 ? arguments[2] : undefined;
      startInteraction(id, metadata);
      try {
        var result = yield fn();
        var metric = endInteraction(id, true);
        return {
          result: result,
          metric: metric
        };
      } catch (error) {
        var _metric = endInteraction(id, false, {
          error: error instanceof Error ? error.message : 'Unknown error'
        });
        throw error;
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [startInteraction, endInteraction]);
  return {
    startInteraction: startInteraction,
    endInteraction: endInteraction,
    getMetrics: getMetrics,
    getAllMetrics: getAllMetrics,
    clearMetrics: clearMetrics,
    measureFunction: measureFunction
  };
}
function useDoubleTapMetrics() {
  return useInteractionMetrics({
    name: 'doubleTap',
    threshold: 50
  });
}
function usePinchMetrics() {
  return useInteractionMetrics({
    name: 'pinch',
    threshold: 16
  });
}
function useSwipeMetrics() {
  return useInteractionMetrics({
    name: 'swipe',
    threshold: 100
  });
}
function useReactionMetrics() {
  return useInteractionMetrics({
    name: 'reaction',
    threshold: 80
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,