7a8bdc3e6f86e398df8cd74aa56dc04c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ModernSwipeScreen;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _vectorIcons = require("@expo/vector-icons");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _components = require("../components");
var _useModernSwipeScreen2 = require("../hooks/screens/useModernSwipeScreen");
var _swipe = require("../components/swipe");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  screenWidth = _Dimensions$get.width,
  screenHeight = _Dimensions$get.height;
function ModernSwipeScreen(_ref) {
  var navigation = _ref.navigation;
  var _useModernSwipeScreen = (0, _useModernSwipeScreen2.useModernSwipeScreen)(),
    pets = _useModernSwipeScreen.pets,
    currentPet = _useModernSwipeScreen.currentPet,
    isLoading = _useModernSwipeScreen.isLoading,
    error = _useModernSwipeScreen.error,
    currentIndex = _useModernSwipeScreen.currentIndex,
    showMatchModal = _useModernSwipeScreen.showMatchModal,
    matchedPet = _useModernSwipeScreen.matchedPet,
    showFilters = _useModernSwipeScreen.showFilters,
    filters = _useModernSwipeScreen.filters,
    setCurrentIndex = _useModernSwipeScreen.setCurrentIndex,
    setShowMatchModal = _useModernSwipeScreen.setShowMatchModal,
    setShowFilters = _useModernSwipeScreen.setShowFilters,
    setFilters = _useModernSwipeScreen.setFilters,
    loadPets = _useModernSwipeScreen.loadPets,
    handleButtonSwipe = _useModernSwipeScreen.handleButtonSwipe,
    handleSwipeLeft = _useModernSwipeScreen.handleSwipeLeft,
    handleSwipeRight = _useModernSwipeScreen.handleSwipeRight,
    handleSwipeUp = _useModernSwipeScreen.handleSwipeUp;
  if (isLoading && pets.length === 0) {
    return (0, _jsxRuntime.jsx)(_components.EliteContainer, {
      gradient: "primary",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsxs)(_components.FXContainerPresets.glass, {
          style: styles.loadingCard,
          children: [(0, _jsxRuntime.jsx)(_components.Heading1, {
            animated: true,
            style: styles.loadingTitle,
            children: "Finding Matches"
          }), (0, _jsxRuntime.jsx)(_components.Body, {
            style: styles.loadingSubtitle,
            children: "Discovering your perfect pet companions..."
          })]
        })
      })
    });
  }
  if (error) {
    return (0, _jsxRuntime.jsx)(_components.EliteContainer, {
      gradient: "primary",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.emptyContainer,
        children: (0, _jsxRuntime.jsxs)(_components.FXContainer, {
          type: "glow",
          hasGlow: true,
          glowColor: _components.Theme.colors.status.error,
          style: styles.errorCard,
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "alert-circle-outline",
            size: 80,
            color: _components.Theme.colors.status.error
          }), (0, _jsxRuntime.jsx)(_components.Heading2, {
            style: styles.errorTitle,
            children: "Error loading pets"
          }), (0, _jsxRuntime.jsx)(_components.Body, {
            style: styles.errorMessage,
            children: error
          }), (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.premium, {
            title: "Try Again",
            leftIcon: "refresh",
            onPress: loadPets
          })]
        })
      })
    });
  }
  if (!currentPet) {
    return (0, _jsxRuntime.jsx)(_components.EliteContainer, {
      gradient: "primary",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.emptyContainer,
        children: (0, _jsxRuntime.jsxs)(_components.FXContainerPresets.glass, {
          style: styles.emptyCard,
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "heart-outline",
            size: 80,
            color: _components.Theme.colors.primary[500]
          }), (0, _jsxRuntime.jsx)(_components.Heading2, {
            style: styles.emptyTitle,
            children: "No more pets!"
          }), (0, _jsxRuntime.jsx)(_components.Body, {
            style: styles.emptySubtitle,
            children: "Check back later for more matches"
          }), (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.premium, {
            title: "Refresh",
            leftIcon: "refresh",
            onPress: loadPets
          })]
        })
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_components.EliteContainer, {
    gradient: "primary",
    children: [(0, _jsxRuntime.jsx)(_components.EliteHeader, {
      title: "Discover",
      subtitle: "Find your perfect match",
      blur: true,
      onBack: function onBack() {
        return navigation.goBack();
      },
      rightComponent: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.headerActions,
        children: [(0, _jsxRuntime.jsx)(_components.EliteButtonPresets.glass, {
          title: "Filter",
          size: "sm",
          leftIcon: "options-outline",
          onPress: function onPress() {
            setShowFilters(!showFilters);
          }
        }), (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.glass, {
          title: "",
          size: "sm",
          leftIcon: "heart",
          onPress: function onPress() {
            return navigation.navigate("Matches");
          }
        })]
      })
    }), showFilters && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.filterContainer,
      children: (0, _jsxRuntime.jsx)(_swipe.FilterPanel, {
        filters: filters,
        onFilterChange: function onFilterChange(newFilters) {
          setFilters(_objectSpread(_objectSpread({}, filters), newFilters));
        }
      })
    }), (0, _jsxRuntime.jsx)(_swipe.SwipeGestureHints, {}), (0, _jsxRuntime.jsx)(_swipe.SwipeGestureHintOverlay, {}), (0, _jsxRuntime.jsx)(_swipe.CardStack, {
      currentPet: currentPet,
      nextPet: pets[currentIndex + 1],
      currentIndex: currentIndex,
      onSwipeLeft: function onSwipeLeft() {
        handleSwipeLeft(currentPet);
      },
      onSwipeRight: function onSwipeRight() {
        handleSwipeRight(currentPet);
      },
      onSwipeUp: function onSwipeUp() {
        handleSwipeUp(currentPet);
      }
    }), pets[currentIndex + 1] && (0, _jsxRuntime.jsx)(_swipe.PeekSheet, {
      nextPet: pets[currentIndex + 1],
      show: true
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.actionButtons,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        children: (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.glass, {
          title: "",
          size: "xl",
          leftIcon: "close",
          onPress: function onPress() {
            handleButtonSwipe("pass");
          },
          style: styles.actionButton
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        children: (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.holographic, {
          title: "",
          size: "lg",
          leftIcon: "star",
          onPress: function onPress() {
            handleButtonSwipe("superlike");
          },
          style: styles.actionButton
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        children: (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.premium, {
          title: "",
          size: "xl",
          leftIcon: "heart",
          onPress: function onPress() {
            handleButtonSwipe("like");
          },
          style: styles.actionButton
        })
      })]
    }), showMatchModal && matchedPet && (0, _jsxRuntime.jsx)(_swipe.MatchModal, {
      pet: matchedPet,
      show: showMatchModal,
      onKeepSwiping: function onKeepSwiping() {
        return setShowMatchModal(false);
      },
      onSendMessage: function onSendMessage() {
        setShowMatchModal(false);
        navigation.navigate("Chat", {
          matchId: matchedPet._id,
          petName: matchedPet.name
        });
      }
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: _components.Theme.spacing.xl
  },
  loadingCard: {
    padding: _components.Theme.spacing["4xl"],
    alignItems: "center"
  },
  loadingTitle: {
    textAlign: "center",
    marginBottom: _components.Theme.spacing.lg
  },
  loadingSubtitle: {
    textAlign: "center",
    color: _components.Theme.colors.text.secondary
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: _components.Theme.spacing.xl
  },
  errorCard: {
    padding: _components.Theme.spacing["4xl"],
    alignItems: "center"
  },
  errorTitle: {
    textAlign: "center",
    marginTop: _components.Theme.spacing.lg,
    marginBottom: _components.Theme.spacing.md,
    color: _components.Theme.colors.status.error
  },
  errorMessage: {
    textAlign: "center",
    marginBottom: _components.Theme.spacing.xl,
    color: _components.Theme.colors.text.secondary
  },
  emptyCard: {
    padding: _components.Theme.spacing["4xl"],
    alignItems: "center"
  },
  emptyTitle: {
    textAlign: "center",
    marginTop: _components.Theme.spacing.lg,
    marginBottom: _components.Theme.spacing.md
  },
  emptySubtitle: {
    textAlign: "center",
    marginBottom: _components.Theme.spacing.xl,
    color: _components.Theme.colors.text.secondary
  },
  headerActions: {
    flexDirection: "row",
    gap: _components.Theme.spacing.sm
  },
  filterContainer: {
    padding: _components.Theme.spacing.lg
  },
  filterPanel: {
    padding: _components.Theme.spacing.xl
  },
  filterTitle: {
    marginBottom: _components.Theme.spacing.lg,
    textAlign: "center"
  },
  filterSection: {
    marginBottom: _components.Theme.spacing.lg
  },
  filterLabel: {
    marginBottom: _components.Theme.spacing.sm,
    fontWeight: _components.Theme.typography.fontWeight.semibold
  },
  filterButtons: {
    flexDirection: "row",
    flexWrap: "wrap",
    gap: _components.Theme.spacing.sm
  },
  cardContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingHorizontal: _components.Theme.spacing.xl
  },
  nextCardContainer: {
    position: "absolute",
    zIndex: -1
  },
  nextCard: {
    width: screenWidth - _components.Theme.spacing["4xl"] - _components.Theme.spacing.lg,
    height: screenHeight * 0.65,
    transform: [{
      scale: 0.95
    }],
    opacity: 0.8
  },
  actionButtons: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    paddingVertical: _components.Theme.spacing.xl,
    paddingHorizontal: _components.Theme.spacing["4xl"],
    gap: _components.Theme.spacing.lg
  },
  actionButton: {
    width: 60,
    height: 60,
    borderRadius: 30
  },
  matchModal: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(0,0,0,0.8)",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 1000
  },
  matchModalContent: {
    width: screenWidth - _components.Theme.spacing["4xl"],
    padding: _components.Theme.spacing["4xl"],
    alignItems: "center"
  },
  matchTitle: {
    textAlign: "center",
    marginBottom: _components.Theme.spacing.xl
  },
  matchPhotos: {
    flexDirection: "row",
    marginBottom: _components.Theme.spacing.xl,
    gap: _components.Theme.spacing.lg
  },
  matchPhotoContainer: {
    width: 80,
    height: 80,
    borderRadius: 40
  },
  matchText: {
    textAlign: "center",
    marginBottom: _components.Theme.spacing.xl,
    color: _components.Theme.colors.text.secondary
  },
  matchButtons: {
    flexDirection: "row",
    gap: _components.Theme.spacing.lg
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdmVjdG9ySWNvbnMiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdE5hdGl2ZSIsIl9jb21wb25lbnRzIiwiX3VzZU1vZGVyblN3aXBlU2NyZWVuMiIsIl9zd2lwZSIsIl9qc3hSdW50aW1lIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX0RpbWVuc2lvbnMkZ2V0IiwiRGltZW5zaW9ucyIsImdldCIsInNjcmVlbldpZHRoIiwid2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJoZWlnaHQiLCJNb2Rlcm5Td2lwZVNjcmVlbiIsIl9yZWYiLCJuYXZpZ2F0aW9uIiwiX3VzZU1vZGVyblN3aXBlU2NyZWVuIiwidXNlTW9kZXJuU3dpcGVTY3JlZW4iLCJwZXRzIiwiY3VycmVudFBldCIsImlzTG9hZGluZyIsImVycm9yIiwiY3VycmVudEluZGV4Iiwic2hvd01hdGNoTW9kYWwiLCJtYXRjaGVkUGV0Iiwic2hvd0ZpbHRlcnMiLCJmaWx0ZXJzIiwic2V0Q3VycmVudEluZGV4Iiwic2V0U2hvd01hdGNoTW9kYWwiLCJzZXRTaG93RmlsdGVycyIsInNldEZpbHRlcnMiLCJsb2FkUGV0cyIsImhhbmRsZUJ1dHRvblN3aXBlIiwiaGFuZGxlU3dpcGVMZWZ0IiwiaGFuZGxlU3dpcGVSaWdodCIsImhhbmRsZVN3aXBlVXAiLCJqc3giLCJFbGl0ZUNvbnRhaW5lciIsImdyYWRpZW50IiwiY2hpbGRyZW4iLCJWaWV3Iiwic3R5bGUiLCJzdHlsZXMiLCJsb2FkaW5nQ29udGFpbmVyIiwianN4cyIsIkZYQ29udGFpbmVyUHJlc2V0cyIsImdsYXNzIiwibG9hZGluZ0NhcmQiLCJIZWFkaW5nMSIsImFuaW1hdGVkIiwibG9hZGluZ1RpdGxlIiwiQm9keSIsImxvYWRpbmdTdWJ0aXRsZSIsImVtcHR5Q29udGFpbmVyIiwiRlhDb250YWluZXIiLCJ0eXBlIiwiaGFzR2xvdyIsImdsb3dDb2xvciIsIlRoZW1lIiwiY29sb3JzIiwic3RhdHVzIiwiZXJyb3JDYXJkIiwiSW9uaWNvbnMiLCJuYW1lIiwic2l6ZSIsImNvbG9yIiwiSGVhZGluZzIiLCJlcnJvclRpdGxlIiwiZXJyb3JNZXNzYWdlIiwiRWxpdGVCdXR0b25QcmVzZXRzIiwicHJlbWl1bSIsInRpdGxlIiwibGVmdEljb24iLCJvblByZXNzIiwiZW1wdHlDYXJkIiwicHJpbWFyeSIsImVtcHR5VGl0bGUiLCJlbXB0eVN1YnRpdGxlIiwiRWxpdGVIZWFkZXIiLCJzdWJ0aXRsZSIsImJsdXIiLCJvbkJhY2siLCJnb0JhY2siLCJyaWdodENvbXBvbmVudCIsImhlYWRlckFjdGlvbnMiLCJuYXZpZ2F0ZSIsImZpbHRlckNvbnRhaW5lciIsIkZpbHRlclBhbmVsIiwib25GaWx0ZXJDaGFuZ2UiLCJuZXdGaWx0ZXJzIiwiU3dpcGVHZXN0dXJlSGludHMiLCJTd2lwZUdlc3R1cmVIaW50T3ZlcmxheSIsIkNhcmRTdGFjayIsIm5leHRQZXQiLCJvblN3aXBlTGVmdCIsIm9uU3dpcGVSaWdodCIsIm9uU3dpcGVVcCIsIlBlZWtTaGVldCIsInNob3ciLCJhY3Rpb25CdXR0b25zIiwiYWN0aW9uQnV0dG9uIiwiaG9sb2dyYXBoaWMiLCJNYXRjaE1vZGFsIiwicGV0Iiwib25LZWVwU3dpcGluZyIsIm9uU2VuZE1lc3NhZ2UiLCJtYXRjaElkIiwiX2lkIiwicGV0TmFtZSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJmbGV4IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwicGFkZGluZyIsInNwYWNpbmciLCJ4bCIsInRleHRBbGlnbiIsIm1hcmdpbkJvdHRvbSIsImxnIiwidGV4dCIsInNlY29uZGFyeSIsIm1hcmdpblRvcCIsIm1kIiwiZmxleERpcmVjdGlvbiIsImdhcCIsInNtIiwiZmlsdGVyUGFuZWwiLCJmaWx0ZXJUaXRsZSIsImZpbHRlclNlY3Rpb24iLCJmaWx0ZXJMYWJlbCIsImZvbnRXZWlnaHQiLCJ0eXBvZ3JhcGh5Iiwic2VtaWJvbGQiLCJmaWx0ZXJCdXR0b25zIiwiZmxleFdyYXAiLCJjYXJkQ29udGFpbmVyIiwicGFkZGluZ0hvcml6b250YWwiLCJuZXh0Q2FyZENvbnRhaW5lciIsInBvc2l0aW9uIiwiekluZGV4IiwibmV4dENhcmQiLCJ0cmFuc2Zvcm0iLCJzY2FsZSIsIm9wYWNpdHkiLCJwYWRkaW5nVmVydGljYWwiLCJib3JkZXJSYWRpdXMiLCJtYXRjaE1vZGFsIiwidG9wIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwiYmFja2dyb3VuZENvbG9yIiwibWF0Y2hNb2RhbENvbnRlbnQiLCJtYXRjaFRpdGxlIiwibWF0Y2hQaG90b3MiLCJtYXRjaFBob3RvQ29udGFpbmVyIiwibWF0Y2hUZXh0IiwibWF0Y2hCdXR0b25zIl0sInNvdXJjZXMiOlsiTW9kZXJuU3dpcGVTY3JlZW4udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUFJPSkVDVCBIWVBFUklPTjogTU9ERVJOSVpFRCBTV0lQRSBTQ1JFRU5cbiAqXG4gKiBUaGlzIGRlbW9uc3RyYXRlcyB0aGUgbmV3IGFyY2hpdGVjdHVyZSBpbiBhY3Rpb246XG4gKiAtIFVzZXMgTW9kZXJuU3dpcGVDYXJkIHdpdGggcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlclxuICogLSBJbXBsZW1lbnRzIEVsaXRlQnV0dG9uIHdpdGggY29tcG9zaXRpb24gcGF0dGVyblxuICogLSBBcHBsaWVzIEZYQ29udGFpbmVyIGZvciB2aXN1YWwgZWZmZWN0c1xuICogLSBVc2VzIHVuaWZpZWQgZGVzaWduIHN5c3RlbSB0aHJvdWdob3V0XG4gKiAtIFBlcmZvcm1hbmNlIG9wdGltaXplZCB3aXRoIHByb3BlciBtZW1vaXphdGlvblxuICovXG5cbmltcG9ydCB7IElvbmljb25zIH0gZnJvbSBcIkBleHBvL3ZlY3Rvci1pY29uc1wiO1xuaW1wb3J0IHsgdHlwZSBQZXQgfSBmcm9tIFwiQHBhd2ZlY3RtYXRjaC9jb3JlXCI7XG5pbXBvcnQgdHlwZSB7IE5hdGl2ZVN0YWNrU2NyZWVuUHJvcHMgfSBmcm9tIFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBWaWV3LCBTdHlsZVNoZWV0LCBEaW1lbnNpb25zIH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuXG4vLyBJbXBvcnQgbmV3IGFyY2hpdGVjdHVyZSBjb21wb25lbnRzXG5pbXBvcnQge1xuICBUaGVtZSxcbiAgTW9kZXJuU3dpcGVDYXJkLFxuICBFbGl0ZUJ1dHRvbixcbiAgRWxpdGVCdXR0b25QcmVzZXRzLFxuICBGWENvbnRhaW5lcixcbiAgRlhDb250YWluZXJQcmVzZXRzLFxuICBIZWFkaW5nMSxcbiAgSGVhZGluZzIsXG4gIEJvZHksXG4gIEJvZHlTbWFsbCxcbn0gZnJvbSBcIi4uL2NvbXBvbmVudHNcIjtcblxuLy8gSW1wb3J0IGxlZ2FjeSBjb21wb25lbnRzIGZvciBncmFkdWFsIG1pZ3JhdGlvblxuaW1wb3J0IHsgRWxpdGVDb250YWluZXIsIEVsaXRlSGVhZGVyIH0gZnJvbSBcIi4uL2NvbXBvbmVudHNcIjtcbmltcG9ydCB7IHVzZVRoZW1lIH0gZnJvbSBcIi4uL3RoZW1lL1Byb3ZpZGVyXCI7XG5pbXBvcnQgeyB1c2VNb2Rlcm5Td2lwZVNjcmVlbiB9IGZyb20gXCIuLi9ob29rcy9zY3JlZW5zL3VzZU1vZGVyblN3aXBlU2NyZWVuXCI7XG5pbXBvcnQgdHlwZSB7IFJvb3RTdGFja1NjcmVlblByb3BzIH0gZnJvbSBcIi4uL25hdmlnYXRpb24vdHlwZXNcIjtcbmltcG9ydCB7IENhcmRTdGFjaywgRmlsdGVyUGFuZWwsIE1hdGNoTW9kYWwsIFN3aXBlR2VzdHVyZUhpbnRzLCBTd2lwZUdlc3R1cmVIaW50T3ZlcmxheSwgUGVla1NoZWV0IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvc3dpcGVcIjtcblxuY29uc3QgeyB3aWR0aDogc2NyZWVuV2lkdGgsIGhlaWdodDogc2NyZWVuSGVpZ2h0IH0gPSBEaW1lbnNpb25zLmdldChcIndpbmRvd1wiKTtcblxudHlwZSBTd2lwZVNjcmVlblByb3BzID0gUm9vdFN0YWNrU2NyZWVuUHJvcHM8XCJTd2lwZVwiPjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW9kZXJuU3dpcGVTY3JlZW4oeyBuYXZpZ2F0aW9uIH06IFN3aXBlU2NyZWVuUHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHBldHMsXG4gICAgY3VycmVudFBldCxcbiAgICBpc0xvYWRpbmcsXG4gICAgZXJyb3IsXG4gICAgY3VycmVudEluZGV4LFxuICAgIHNob3dNYXRjaE1vZGFsLFxuICAgIG1hdGNoZWRQZXQsXG4gICAgc2hvd0ZpbHRlcnMsXG4gICAgZmlsdGVycyxcbiAgICBzZXRDdXJyZW50SW5kZXgsXG4gICAgc2V0U2hvd01hdGNoTW9kYWwsXG4gICAgc2V0U2hvd0ZpbHRlcnMsXG4gICAgc2V0RmlsdGVycyxcbiAgICBsb2FkUGV0cyxcbiAgICBoYW5kbGVCdXR0b25Td2lwZSxcbiAgICBoYW5kbGVTd2lwZUxlZnQsXG4gICAgaGFuZGxlU3dpcGVSaWdodCxcbiAgICBoYW5kbGVTd2lwZVVwLFxuICB9ID0gdXNlTW9kZXJuU3dpcGVTY3JlZW4oKTtcblxuICAvLyBMb2FkaW5nIHN0YXRlXG4gIGlmIChpc0xvYWRpbmcgJiYgcGV0cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEVsaXRlQ29udGFpbmVyIGdyYWRpZW50PVwicHJpbWFyeVwiPlxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmxvYWRpbmdDb250YWluZXJ9PlxuICAgICAgICAgIDxGWENvbnRhaW5lclByZXNldHMuZ2xhc3Mgc3R5bGU9e3N0eWxlcy5sb2FkaW5nQ2FyZH0+XG4gICAgICAgICAgICA8SGVhZGluZzEgYW5pbWF0ZWQ9e3RydWV9IHN0eWxlPXtzdHlsZXMubG9hZGluZ1RpdGxlfT5cbiAgICAgICAgICAgICAgRmluZGluZyBNYXRjaGVzXG4gICAgICAgICAgICA8L0hlYWRpbmcxPlxuICAgICAgICAgICAgPEJvZHkgc3R5bGU9e3N0eWxlcy5sb2FkaW5nU3VidGl0bGV9PlxuICAgICAgICAgICAgICBEaXNjb3ZlcmluZyB5b3VyIHBlcmZlY3QgcGV0IGNvbXBhbmlvbnMuLi5cbiAgICAgICAgICAgIDwvQm9keT5cbiAgICAgICAgICA8L0ZYQ29udGFpbmVyUHJlc2V0cy5nbGFzcz5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9FbGl0ZUNvbnRhaW5lcj5cbiAgICApO1xuICB9XG5cbiAgLy8gRXJyb3Igc3RhdGVcbiAgaWYgKGVycm9yKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxFbGl0ZUNvbnRhaW5lciBncmFkaWVudD1cInByaW1hcnlcIj5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5lbXB0eUNvbnRhaW5lcn0+XG4gICAgICAgICAgPEZYQ29udGFpbmVyXG4gICAgICAgICAgICB0eXBlPVwiZ2xvd1wiXG4gICAgICAgICAgICBoYXNHbG93PXt0cnVlfVxuICAgICAgICAgICAgZ2xvd0NvbG9yPXtUaGVtZS5jb2xvcnMuc3RhdHVzLmVycm9yfVxuICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5lcnJvckNhcmR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPElvbmljb25zXG4gICAgICAgICAgICAgIG5hbWU9XCJhbGVydC1jaXJjbGUtb3V0bGluZVwiXG4gICAgICAgICAgICAgIHNpemU9ezgwfVxuICAgICAgICAgICAgICBjb2xvcj17VGhlbWUuY29sb3JzLnN0YXR1cy5lcnJvcn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8SGVhZGluZzIgc3R5bGU9e3N0eWxlcy5lcnJvclRpdGxlfT5FcnJvciBsb2FkaW5nIHBldHM8L0hlYWRpbmcyPlxuICAgICAgICAgICAgPEJvZHkgc3R5bGU9e3N0eWxlcy5lcnJvck1lc3NhZ2V9PntlcnJvcn08L0JvZHk+XG4gICAgICAgICAgICA8RWxpdGVCdXR0b25QcmVzZXRzLnByZW1pdW1cbiAgICAgICAgICAgICAgdGl0bGU9XCJUcnkgQWdhaW5cIlxuICAgICAgICAgICAgICBsZWZ0SWNvbj1cInJlZnJlc2hcIlxuICAgICAgICAgICAgICBvblByZXNzPXtsb2FkUGV0c31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9GWENvbnRhaW5lcj5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9FbGl0ZUNvbnRhaW5lcj5cbiAgICApO1xuICB9XG5cbiAgLy8gTm8gbW9yZSBwZXRzIHN0YXRlXG4gIGlmICghY3VycmVudFBldCkge1xuICAgIHJldHVybiAoXG4gICAgICA8RWxpdGVDb250YWluZXIgZ3JhZGllbnQ9XCJwcmltYXJ5XCI+XG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuZW1wdHlDb250YWluZXJ9PlxuICAgICAgICAgIDxGWENvbnRhaW5lclByZXNldHMuZ2xhc3Mgc3R5bGU9e3N0eWxlcy5lbXB0eUNhcmR9PlxuICAgICAgICAgICAgPElvbmljb25zXG4gICAgICAgICAgICAgIG5hbWU9XCJoZWFydC1vdXRsaW5lXCJcbiAgICAgICAgICAgICAgc2l6ZT17ODB9XG4gICAgICAgICAgICAgIGNvbG9yPXtUaGVtZS5jb2xvcnMucHJpbWFyeVs1MDBdfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxIZWFkaW5nMiBzdHlsZT17c3R5bGVzLmVtcHR5VGl0bGV9Pk5vIG1vcmUgcGV0cyE8L0hlYWRpbmcyPlxuICAgICAgICAgICAgPEJvZHkgc3R5bGU9e3N0eWxlcy5lbXB0eVN1YnRpdGxlfT5cbiAgICAgICAgICAgICAgQ2hlY2sgYmFjayBsYXRlciBmb3IgbW9yZSBtYXRjaGVzXG4gICAgICAgICAgICA8L0JvZHk+XG4gICAgICAgICAgICA8RWxpdGVCdXR0b25QcmVzZXRzLnByZW1pdW1cbiAgICAgICAgICAgICAgdGl0bGU9XCJSZWZyZXNoXCJcbiAgICAgICAgICAgICAgbGVmdEljb249XCJyZWZyZXNoXCJcbiAgICAgICAgICAgICAgb25QcmVzcz17bG9hZFBldHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRlhDb250YWluZXJQcmVzZXRzLmdsYXNzPlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L0VsaXRlQ29udGFpbmVyPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxFbGl0ZUNvbnRhaW5lciBncmFkaWVudD1cInByaW1hcnlcIj5cbiAgICAgIHsvKiBNb2Rlcm4gSGVhZGVyICovfVxuICAgICAgPEVsaXRlSGVhZGVyXG4gICAgICAgIHRpdGxlPVwiRGlzY292ZXJcIlxuICAgICAgICBzdWJ0aXRsZT1cIkZpbmQgeW91ciBwZXJmZWN0IG1hdGNoXCJcbiAgICAgICAgYmx1cj17dHJ1ZX1cbiAgICAgICAgb25CYWNrPXsoKSA9PiBuYXZpZ2F0aW9uLmdvQmFjaygpfVxuICAgICAgICByaWdodENvbXBvbmVudD17XG4gICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5oZWFkZXJBY3Rpb25zfT5cbiAgICAgICAgICAgIDxFbGl0ZUJ1dHRvblByZXNldHMuZ2xhc3NcbiAgICAgICAgICAgICAgdGl0bGU9XCJGaWx0ZXJcIlxuICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICBsZWZ0SWNvbj1cIm9wdGlvbnMtb3V0bGluZVwiXG4gICAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRTaG93RmlsdGVycyghc2hvd0ZpbHRlcnMpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxFbGl0ZUJ1dHRvblByZXNldHMuZ2xhc3NcbiAgICAgICAgICAgICAgdGl0bGU9XCJcIlxuICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICBsZWZ0SWNvbj1cImhlYXJ0XCJcbiAgICAgICAgICAgICAgb25QcmVzcz17KCkgPT4gbmF2aWdhdGlvbi5uYXZpZ2F0ZShcIk1hdGNoZXNcIil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgfVxuICAgICAgLz5cblxuICAgICAgey8qIEZpbHRlciBQYW5lbCAqL31cbiAgICAgIHtzaG93RmlsdGVycyAmJiAoXG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuZmlsdGVyQ29udGFpbmVyfT5cbiAgICAgICAgICA8RmlsdGVyUGFuZWxcbiAgICAgICAgICAgIGZpbHRlcnM9e2ZpbHRlcnN9XG4gICAgICAgICAgICBvbkZpbHRlckNoYW5nZT17KG5ld0ZpbHRlcnMpID0+IHtcbiAgICAgICAgICAgICAgc2V0RmlsdGVycyh7IC4uLmZpbHRlcnMsIC4uLm5ld0ZpbHRlcnMgfSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVmlldz5cbiAgICAgICl9XG5cbiAgICAgIHsvKiBHZXN0dXJlIEhpbnRzICovfVxuICAgICAgPFN3aXBlR2VzdHVyZUhpbnRzIC8+XG4gICAgICBcbiAgICAgIHsvKiBGaXJzdC10aW1lIHVzZXIgZ2VzdHVyZSBoaW50cyBvdmVybGF5ICovfVxuICAgICAgPFN3aXBlR2VzdHVyZUhpbnRPdmVybGF5IC8+XG5cbiAgICAgIHsvKiBDYXJkIFN0YWNrICovfVxuICAgICAgPENhcmRTdGFja1xuICAgICAgICBjdXJyZW50UGV0PXtjdXJyZW50UGV0fVxuICAgICAgICBuZXh0UGV0PXtwZXRzW2N1cnJlbnRJbmRleCArIDFdfVxuICAgICAgICBjdXJyZW50SW5kZXg9e2N1cnJlbnRJbmRleH1cbiAgICAgICAgb25Td2lwZUxlZnQ9eygpID0+IHtcbiAgICAgICAgICBoYW5kbGVTd2lwZUxlZnQoY3VycmVudFBldCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uU3dpcGVSaWdodD17KCkgPT4ge1xuICAgICAgICAgIGhhbmRsZVN3aXBlUmlnaHQoY3VycmVudFBldCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uU3dpcGVVcD17KCkgPT4ge1xuICAgICAgICAgIGhhbmRsZVN3aXBlVXAoY3VycmVudFBldCk7XG4gICAgICAgIH19XG4gICAgICAvPlxuXG4gICAgICB7LyogUGVlayBTaGVldCAtIFNob3cgbmV4dCBjYXJkICovfVxuICAgICAge3BldHNbY3VycmVudEluZGV4ICsgMV0gJiYgKFxuICAgICAgICA8UGVla1NoZWV0IG5leHRQZXQ9e3BldHNbY3VycmVudEluZGV4ICsgMV19IHNob3c9e3RydWV9IC8+XG4gICAgICApfVxuXG4gICAgICB7LyogQWN0aW9uIEJ1dHRvbnMgKi99XG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmFjdGlvbkJ1dHRvbnN9PlxuICAgICAgICA8Vmlldz5cbiAgICAgICAgICA8RWxpdGVCdXR0b25QcmVzZXRzLmdsYXNzXG4gICAgICAgICAgICB0aXRsZT1cIlwiXG4gICAgICAgICAgICBzaXplPVwieGxcIlxuICAgICAgICAgICAgbGVmdEljb249XCJjbG9zZVwiXG4gICAgICAgICAgICBvblByZXNzPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGhhbmRsZUJ1dHRvblN3aXBlKFwicGFzc1wiKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBzdHlsZT17c3R5bGVzLmFjdGlvbkJ1dHRvbn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1ZpZXc+XG5cbiAgICAgICAgPFZpZXc+XG4gICAgICAgICAgPEVsaXRlQnV0dG9uUHJlc2V0cy5ob2xvZ3JhcGhpY1xuICAgICAgICAgICAgdGl0bGU9XCJcIlxuICAgICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgICAgIGxlZnRJY29uPVwic3RhclwiXG4gICAgICAgICAgICBvblByZXNzPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGhhbmRsZUJ1dHRvblN3aXBlKFwic3VwZXJsaWtlXCIpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuYWN0aW9uQnV0dG9ufVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVmlldz5cblxuICAgICAgICA8Vmlldz5cbiAgICAgICAgICA8RWxpdGVCdXR0b25QcmVzZXRzLnByZW1pdW1cbiAgICAgICAgICAgIHRpdGxlPVwiXCJcbiAgICAgICAgICAgIHNpemU9XCJ4bFwiXG4gICAgICAgICAgICBsZWZ0SWNvbj1cImhlYXJ0XCJcbiAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IHtcbiAgICAgICAgICAgICAgaGFuZGxlQnV0dG9uU3dpcGUoXCJsaWtlXCIpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuYWN0aW9uQnV0dG9ufVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvVmlldz5cblxuICAgICAgey8qIE1hdGNoIE1vZGFsICovfVxuICAgICAge3Nob3dNYXRjaE1vZGFsICYmIG1hdGNoZWRQZXQgJiYgKFxuICAgICAgICA8TWF0Y2hNb2RhbFxuICAgICAgICAgIHBldD17bWF0Y2hlZFBldH1cbiAgICAgICAgICBzaG93PXtzaG93TWF0Y2hNb2RhbH1cbiAgICAgICAgICBvbktlZXBTd2lwaW5nPXsoKSA9PiBzZXRTaG93TWF0Y2hNb2RhbChmYWxzZSl9XG4gICAgICAgICAgb25TZW5kTWVzc2FnZT17KCkgPT4ge1xuICAgICAgICAgICAgc2V0U2hvd01hdGNoTW9kYWwoZmFsc2UpO1xuICAgICAgICAgICAgbmF2aWdhdGlvbi5uYXZpZ2F0ZShcIkNoYXRcIiwge1xuICAgICAgICAgICAgICBtYXRjaElkOiBtYXRjaGVkUGV0Ll9pZCxcbiAgICAgICAgICAgICAgcGV0TmFtZTogbWF0Y2hlZFBldC5uYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC9FbGl0ZUNvbnRhaW5lcj5cbiAgKTtcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBsb2FkaW5nQ29udGFpbmVyOiB7XG4gICAgZmxleDogMSxcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIHBhZGRpbmc6IFRoZW1lLnNwYWNpbmcueGwsXG4gIH0sXG4gIGxvYWRpbmdDYXJkOiB7XG4gICAgcGFkZGluZzogVGhlbWUuc3BhY2luZ1tcIjR4bFwiXSxcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICB9LFxuICBsb2FkaW5nVGl0bGU6IHtcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgbWFyZ2luQm90dG9tOiBUaGVtZS5zcGFjaW5nLmxnLFxuICB9LFxuICBsb2FkaW5nU3VidGl0bGU6IHtcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgY29sb3I6IFRoZW1lLmNvbG9ycy50ZXh0LnNlY29uZGFyeSxcbiAgfSxcbiAgZW1wdHlDb250YWluZXI6IHtcbiAgICBmbGV4OiAxLFxuICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgcGFkZGluZzogVGhlbWUuc3BhY2luZy54bCxcbiAgfSxcbiAgZXJyb3JDYXJkOiB7XG4gICAgcGFkZGluZzogVGhlbWUuc3BhY2luZ1tcIjR4bFwiXSxcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICB9LFxuICBlcnJvclRpdGxlOiB7XG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIG1hcmdpblRvcDogVGhlbWUuc3BhY2luZy5sZyxcbiAgICBtYXJnaW5Cb3R0b206IFRoZW1lLnNwYWNpbmcubWQsXG4gICAgY29sb3I6IFRoZW1lLmNvbG9ycy5zdGF0dXMuZXJyb3IsXG4gIH0sXG4gIGVycm9yTWVzc2FnZToge1xuICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICBtYXJnaW5Cb3R0b206IFRoZW1lLnNwYWNpbmcueGwsXG4gICAgY29sb3I6IFRoZW1lLmNvbG9ycy50ZXh0LnNlY29uZGFyeSxcbiAgfSxcbiAgZW1wdHlDYXJkOiB7XG4gICAgcGFkZGluZzogVGhlbWUuc3BhY2luZ1tcIjR4bFwiXSxcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICB9LFxuICBlbXB0eVRpdGxlOiB7XG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIG1hcmdpblRvcDogVGhlbWUuc3BhY2luZy5sZyxcbiAgICBtYXJnaW5Cb3R0b206IFRoZW1lLnNwYWNpbmcubWQsXG4gIH0sXG4gIGVtcHR5U3VidGl0bGU6IHtcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgbWFyZ2luQm90dG9tOiBUaGVtZS5zcGFjaW5nLnhsLFxuICAgIGNvbG9yOiBUaGVtZS5jb2xvcnMudGV4dC5zZWNvbmRhcnksXG4gIH0sXG4gIGhlYWRlckFjdGlvbnM6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICAgIGdhcDogVGhlbWUuc3BhY2luZy5zbSxcbiAgfSxcbiAgZmlsdGVyQ29udGFpbmVyOiB7XG4gICAgcGFkZGluZzogVGhlbWUuc3BhY2luZy5sZyxcbiAgfSxcbiAgZmlsdGVyUGFuZWw6IHtcbiAgICBwYWRkaW5nOiBUaGVtZS5zcGFjaW5nLnhsLFxuICB9LFxuICBmaWx0ZXJUaXRsZToge1xuICAgIG1hcmdpbkJvdHRvbTogVGhlbWUuc3BhY2luZy5sZyxcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gIH0sXG4gIGZpbHRlclNlY3Rpb246IHtcbiAgICBtYXJnaW5Cb3R0b206IFRoZW1lLnNwYWNpbmcubGcsXG4gIH0sXG4gIGZpbHRlckxhYmVsOiB7XG4gICAgbWFyZ2luQm90dG9tOiBUaGVtZS5zcGFjaW5nLnNtLFxuICAgIGZvbnRXZWlnaHQ6IFRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodC5zZW1pYm9sZCxcbiAgfSxcbiAgZmlsdGVyQnV0dG9uczoge1xuICAgIGZsZXhEaXJlY3Rpb246IFwicm93XCIsXG4gICAgZmxleFdyYXA6IFwid3JhcFwiLFxuICAgIGdhcDogVGhlbWUuc3BhY2luZy5zbSxcbiAgfSxcbiAgY2FyZENvbnRhaW5lcjoge1xuICAgIGZsZXg6IDEsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogVGhlbWUuc3BhY2luZy54bCxcbiAgfSxcbiAgbmV4dENhcmRDb250YWluZXI6IHtcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIHpJbmRleDogLTEsXG4gIH0sXG4gIG5leHRDYXJkOiB7XG4gICAgd2lkdGg6IHNjcmVlbldpZHRoIC0gVGhlbWUuc3BhY2luZ1tcIjR4bFwiXSAtIFRoZW1lLnNwYWNpbmcubGcsXG4gICAgaGVpZ2h0OiBzY3JlZW5IZWlnaHQgKiAwLjY1LFxuICAgIHRyYW5zZm9ybTogW3sgc2NhbGU6IDAuOTUgfV0sXG4gICAgb3BhY2l0eTogMC44LFxuICB9LFxuICBhY3Rpb25CdXR0b25zOiB7XG4gICAgZmxleERpcmVjdGlvbjogXCJyb3dcIixcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIHBhZGRpbmdWZXJ0aWNhbDogVGhlbWUuc3BhY2luZy54bCxcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogVGhlbWUuc3BhY2luZ1tcIjR4bFwiXSxcbiAgICBnYXA6IFRoZW1lLnNwYWNpbmcubGcsXG4gIH0sXG4gIGFjdGlvbkJ1dHRvbjoge1xuICAgIHdpZHRoOiA2MCxcbiAgICBoZWlnaHQ6IDYwLFxuICAgIGJvcmRlclJhZGl1czogMzAsXG4gIH0sXG4gIG1hdGNoTW9kYWw6IHtcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLDAsMCwwLjgpXCIsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICB6SW5kZXg6IDEwMDAsXG4gIH0sXG4gIG1hdGNoTW9kYWxDb250ZW50OiB7XG4gICAgd2lkdGg6IHNjcmVlbldpZHRoIC0gVGhlbWUuc3BhY2luZ1tcIjR4bFwiXSxcbiAgICBwYWRkaW5nOiBUaGVtZS5zcGFjaW5nW1wiNHhsXCJdLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gIH0sXG4gIG1hdGNoVGl0bGU6IHtcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgbWFyZ2luQm90dG9tOiBUaGVtZS5zcGFjaW5nLnhsLFxuICB9LFxuICBtYXRjaFBob3Rvczoge1xuICAgIGZsZXhEaXJlY3Rpb246IFwicm93XCIsXG4gICAgbWFyZ2luQm90dG9tOiBUaGVtZS5zcGFjaW5nLnhsLFxuICAgIGdhcDogVGhlbWUuc3BhY2luZy5sZyxcbiAgfSxcbiAgbWF0Y2hQaG90b0NvbnRhaW5lcjoge1xuICAgIHdpZHRoOiA4MCxcbiAgICBoZWlnaHQ6IDgwLFxuICAgIGJvcmRlclJhZGl1czogNDAsXG4gIH0sXG4gIG1hdGNoVGV4dDoge1xuICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICBtYXJnaW5Cb3R0b206IFRoZW1lLnNwYWNpbmcueGwsXG4gICAgY29sb3I6IFRoZW1lLmNvbG9ycy50ZXh0LnNlY29uZGFyeSxcbiAgfSxcbiAgbWF0Y2hCdXR0b25zOiB7XG4gICAgZmxleERpcmVjdGlvbjogXCJyb3dcIixcbiAgICBnYXA6IFRoZW1lLnNwYWNpbmcubGcsXG4gIH0sXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFXQSxJQUFBQSxZQUFBLEdB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