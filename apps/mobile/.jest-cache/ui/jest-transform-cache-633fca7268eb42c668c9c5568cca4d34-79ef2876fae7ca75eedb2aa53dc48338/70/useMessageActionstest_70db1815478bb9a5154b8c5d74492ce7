ccfda94de6653d23d43b4d3be717d133
"use strict";

_getJestObj().mock("../../../services/api");
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _useMessageActions = require("../useMessageActions");
var _api = require("../../../services/api");
var _core = require("@pawfectmatch/core");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockMatchesAPI = _api.matchesAPI;
var mockLogger = _core.logger;
(0, _globals.describe)('useMessageActions', function () {
  var matchId = 'test-match-123';
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockMatchesAPI.sendMessage = _globals.jest.fn().mockResolvedValue(undefined);
    mockMatchesAPI.deleteMessage = _globals.jest.fn().mockResolvedValue(undefined);
  });
  var mockMessages = [{
    _id: 'msg-1',
    content: 'Hello',
    senderId: 'user-1',
    receiverId: 'user-2',
    createdAt: new Date().toISOString(),
    status: 'sent'
  }, {
    _id: 'msg-2',
    content: 'World',
    senderId: 'user-1',
    receiverId: 'user-2',
    createdAt: new Date().toISOString(),
    status: 'sent'
  }];
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with retry and delete functions', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useMessageActions.useMessageActions)({
            matchId: matchId
          });
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.retryMessage).toBeDefined();
      (0, _globals.expect)(result.current.deleteMessage).toBeDefined();
    });
  });
  (0, _globals.describe)('Retry Message', function () {
    (0, _globals.it)('should retry an existing message', (0, _asyncToGenerator2.default)(function* () {
      var onMessageRetried = _globals.jest.fn();
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useMessageActions.useMessageActions)({
            matchId: matchId,
            onMessageRetried: onMessageRetried
          });
        }),
        result = _renderHook2.result;
      yield result.current.retryMessage('msg-1', mockMessages);
      (0, _globals.expect)(mockMatchesAPI.sendMessage).toHaveBeenCalledWith(matchId, 'Hello');
      (0, _globals.expect)(onMessageRetried).toHaveBeenCalledWith('msg-1');
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Message retried', {
        messageId: 'msg-1',
        matchId: matchId
      });
    }));
    (0, _globals.it)('should not retry non-existent message', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useMessageActions.useMessageActions)({
            matchId: matchId
          });
        }),
        result = _renderHook3.result;
      yield result.current.retryMessage('msg-999', mockMessages);
      (0, _globals.expect)(mockMatchesAPI.sendMessage).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle retry errors', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Network error');
      mockMatchesAPI.sendMessage.mockRejectedValue(error);
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useMessageActions.useMessageActions)({
            matchId: matchId
          });
        }),
        result = _renderHook4.result;
      yield (0, _globals.expect)(result.current.retryMessage('msg-1', mockMessages)).rejects.toThrow(error);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to retry message', {
        error: error,
        messageId: 'msg-1'
      });
    }));
    (0, _globals.it)('should work without callback', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useMessageActions.useMessageActions)({
            matchId: matchId
          });
        }),
        result = _renderHook5.result;
      yield result.current.retryMessage('msg-2', mockMessages);
      (0, _globals.expect)(mockMatchesAPI.sendMessage).toHaveBeenCalledWith(matchId, 'World');
    }));
  });
  (0, _globals.describe)('Delete Message', function () {
    (0, _globals.it)('should delete a message', (0, _asyncToGenerator2.default)(function* () {
      var onMessageDeleted = _globals.jest.fn();
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useMessageActions.useMessageActions)({
            matchId: matchId,
            onMessageDeleted: onMessageDeleted
          });
        }),
        result = _renderHook6.result;
      yield result.current.deleteMessage('msg-1');
      (0, _globals.expect)(mockMatchesAPI.deleteMessage).toHaveBeenCalledWith(matchId, 'msg-1');
      (0, _globals.expect)(onMessageDeleted).toHaveBeenCalledWith('msg-1');
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Message deleted', {
        messageId: 'msg-1',
        matchId: matchId
      });
    }));
    (0, _globals.it)('should handle delete errors', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Network error');
      mockMatchesAPI.deleteMessage.mockRejectedValue(error);
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useMessageActions.useMessageActions)({
            matchId: matchId
          });
        }),
        result = _renderHook7.result;
      yield (0, _globals.expect)(result.current.deleteMessage('msg-1')).rejects.toThrow(error);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to delete message', {
        error: error,
        messageId: 'msg-1'
      });
    }));
    (0, _globals.it)('should work without callback', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useMessageActions.useMessageActions)({
            matchId: matchId
          });
        }),
        result = _renderHook8.result;
      yield result.current.deleteMessage('msg-2');
      (0, _globals.expect)(mockMatchesAPI.deleteMessage).toHaveBeenCalledWith(matchId, 'msg-2');
    }));
  });
  (0, _globals.describe)('Integration', function () {
    (0, _globals.it)('should retry then delete message', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useMessageActions.useMessageActions)({
            matchId: matchId
          });
        }),
        result = _renderHook9.result;
      yield result.current.retryMessage('msg-1', mockMessages);
      yield result.current.deleteMessage('msg-1');
      (0, _globals.expect)(mockMatchesAPI.sendMessage).toHaveBeenCalledWith(matchId, 'Hello');
      (0, _globals.expect)(mockMatchesAPI.deleteMessage).toHaveBeenCalledWith(matchId, 'msg-1');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,