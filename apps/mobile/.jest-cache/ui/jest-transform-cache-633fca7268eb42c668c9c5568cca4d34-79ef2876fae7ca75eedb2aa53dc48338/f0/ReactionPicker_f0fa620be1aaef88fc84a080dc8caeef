caf80815df45a9de601affd4a54eb798
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactionPicker = ReactionPicker;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Provider = require("../../theme/Provider");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var REACTIONS = [{
  emoji: "‚ù§Ô∏è",
  label: "Love"
}, {
  emoji: "üòÇ",
  label: "Laugh"
}, {
  emoji: "üòÆ",
  label: "Wow"
}, {
  emoji: "üò¢",
  label: "Sad"
}, {
  emoji: "üî•",
  label: "Fire"
}, {
  emoji: "üéâ",
  label: "Party"
}, {
  emoji: "üëç",
  label: "Like"
}, {
  emoji: "üëè",
  label: "Clap"
}];
function ReactionPicker(_ref) {
  var visible = _ref.visible,
    onClose = _ref.onClose,
    onSelect = _ref.onSelect,
    position = _ref.position;
  var _useTheme = (0, _Provider.useTheme)(),
    colors = _useTheme.colors;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedReaction = _useState2[0],
    setSelectedReaction = _useState2[1];
  var handleSelect = function handleSelect(reaction) {
    setSelectedReaction(reaction);
    onSelect(reaction);
    setTimeout(function () {
      onClose();
      setSelectedReaction(null);
    }, 300);
  };
  var renderReaction = function renderReaction(_ref2) {
    var item = _ref2.item;
    return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: _reactNative.StyleSheet.flatten([styles.reactionButton, selectedReaction === item.emoji && styles.selectedReaction]),
      onPress: function onPress() {
        handleSelect(item.emoji);
      },
      accessibilityLabel: `React with ${item.label}`,
      accessibilityRole: "button",
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emoji,
        children: item.emoji
      })
    });
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    visible: visible,
    transparent: true,
    animationType: "fade",
    onRequestClose: onClose,
    children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.overlay,
      activeOpacity: 1,
      onPress: onClose,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, position && {
          position: "absolute",
          top: position.y,
          left: position.x
        }]),
        children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
          data: REACTIONS,
          renderItem: renderReaction,
          keyExtractor: function keyExtractor(item) {
            return item.emoji;
          },
          horizontal: true,
          showsHorizontalScrollIndicator: false,
          contentContainerStyle: styles.reactionsList
        })
      })
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.3)"
  },
  container: {
    backgroundColor: "#ffffff",
    borderRadius: 20,
    paddingVertical: 10,
    paddingHorizontal: 5,
    shadowColor: "#0a0a0a",
    shadowOffset: {
      width: 0,
      height: 4
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 10
  },
  reactionsList: {
    paddingHorizontal: 5,
    gap: 5
  },
  reactionButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#f5f5f5"
  },
  selectedReaction: {
    backgroundColor: "#e3f2fd",
    transform: [{
      scale: 1.1
    }]
  },
  emoji: {
    fontSize: 24
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfUHJvdmlkZXIiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdDIiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJFQUNUSU9OUyIsImVtb2ppIiwibGFiZWwiLCJSZWFjdGlvblBpY2tlciIsIl9yZWYiLCJ2aXNpYmxlIiwib25DbG9zZSIsIm9uU2VsZWN0IiwicG9zaXRpb24iLCJfdXNlVGhlbWUiLCJ1c2VUaGVtZSIsImNvbG9ycyIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsInNlbGVjdGVkUmVhY3Rpb24iLCJzZXRTZWxlY3RlZFJlYWN0aW9uIiwiaGFuZGxlU2VsZWN0IiwicmVhY3Rpb24iLCJzZXRUaW1lb3V0IiwicmVuZGVyUmVhY3Rpb24iLCJfcmVmMiIsIml0ZW0iLCJqc3giLCJUb3VjaGFibGVPcGFjaXR5Iiwic3R5bGUiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsInJlYWN0aW9uQnV0dG9uIiwib25QcmVzcyIsImFjY2Vzc2liaWxpdHlMYWJlbCIsImFjY2Vzc2liaWxpdHlSb2xlIiwiY2hpbGRyZW4iLCJUZXh0IiwiTW9kYWwiLCJ0cmFuc3BhcmVudCIsImFuaW1hdGlvblR5cGUiLCJvblJlcXVlc3RDbG9zZSIsIm92ZXJsYXkiLCJhY3RpdmVPcGFjaXR5IiwiVmlldyIsImNvbnRhaW5lciIsInRvcCIsInkiLCJsZWZ0IiwieCIsIkZsYXRMaXN0IiwiZGF0YSIsInJlbmRlckl0ZW0iLCJrZXlFeHRyYWN0b3IiLCJob3Jpem9udGFsIiwic2hvd3NIb3Jpem9udGFsU2Nyb2xsSW5kaWNhdG9yIiwiY29udGVudENvbnRhaW5lclN0eWxlIiwicmVhY3Rpb25zTGlzdCIsImNyZWF0ZSIsImZsZXgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJwYWRkaW5nVmVydGljYWwiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJzaGFkb3dPcGFjaXR5Iiwic2hhZG93UmFkaXVzIiwiZWxldmF0aW9uIiwiZ2FwIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwidHJhbnNmb3JtIiwic2NhbGUiLCJmb250U2l6ZSJdLCJzb3VyY2VzIjpbIlJlYWN0aW9uUGlja2VyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlYWN0aW9uIFBpY2tlciBDb21wb25lbnRcbiAqIERpc3BsYXlzIGVtb2ppIHJlYWN0aW9ucyBmb3IgbWVzc2FnZXNcbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgVmlldyxcbiAgVGV4dCxcbiAgTW9kYWwsXG4gIFN0eWxlU2hlZXQsXG4gIFRvdWNoYWJsZU9wYWNpdHksXG4gIEZsYXRMaXN0LFxuICB0eXBlIExpc3RSZW5kZXJJdGVtLFxufSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gXCIuLi8uLi90aGVtZS9Qcm92aWRlclwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlYWN0aW9uIHtcbiAgZW1vamk6IHN0cmluZztcbiAgbGFiZWw6IHN0cmluZztcbn1cblxuY29uc3QgUkVBQ1RJT05TOiBSZWFjdGlvbltdID0gW1xuICB7IGVtb2ppOiBcIuKdpO+4j1wiLCBsYWJlbDogXCJMb3ZlXCIgfSxcbiAgeyBlbW9qaTogXCLwn5iCXCIsIGxhYmVsOiBcIkxhdWdoXCIgfSxcbiAgeyBlbW9qaTogXCLwn5iuXCIsIGxhYmVsOiBcIldvd1wiIH0sXG4gIHsgZW1vamk6IFwi8J+YolwiLCBsYWJlbDogXCJTYWRcIiB9LFxuICB7IGVtb2ppOiBcIvCflKVcIiwgbGFiZWw6IFwiRmlyZVwiIH0sXG4gIHsgZW1vamk6IFwi8J+OiVwiLCBsYWJlbDogXCJQYXJ0eVwiIH0sXG4gIHsgZW1vamk6IFwi8J+RjVwiLCBsYWJlbDogXCJMaWtlXCIgfSxcbiAgeyBlbW9qaTogXCLwn5GPXCIsIGxhYmVsOiBcIkNsYXBcIiB9LFxuXTtcblxuaW50ZXJmYWNlIFJlYWN0aW9uUGlja2VyUHJvcHMge1xuICB2aXNpYmxlOiBib29sZWFuO1xuICBvbkNsb3NlOiAoKSA9PiB2b2lkO1xuICBvblNlbGVjdDogKHJlYWN0aW9uOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHBvc2l0aW9uPzogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVhY3Rpb25QaWNrZXIoe1xuICB2aXNpYmxlLFxuICBvbkNsb3NlLFxuICBvblNlbGVjdCxcbiAgcG9zaXRpb24sXG59OiBSZWFjdGlvblBpY2tlclByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCB7IGNvbG9ycyB9ID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgW3NlbGVjdGVkUmVhY3Rpb24sIHNldFNlbGVjdGVkUmVhY3Rpb25dID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgaGFuZGxlU2VsZWN0ID0gKHJlYWN0aW9uOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICBzZXRTZWxlY3RlZFJlYWN0aW9uKHJlYWN0aW9uKTtcbiAgICBvblNlbGVjdChyZWFjdGlvbik7XG4gICAgLy8gQXV0byBjbG9zZSBhZnRlciBzZWxlY3Rpb25cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICAgIHNldFNlbGVjdGVkUmVhY3Rpb24obnVsbCk7XG4gICAgfSwgMzAwKTtcbiAgfTtcblxuICBjb25zdCByZW5kZXJSZWFjdGlvbjogTGlzdFJlbmRlckl0ZW08UmVhY3Rpb24+ID0gKHsgaXRlbSB9KSA9PiAoXG4gICAgPFRvdWNoYWJsZU9wYWNpdHlcbiAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBzdHlsZXMucmVhY3Rpb25CdXR0b24sXG4gICAgICAgIHNlbGVjdGVkUmVhY3Rpb24gPT09IGl0ZW0uZW1vamkgJiYgc3R5bGVzLnNlbGVjdGVkUmVhY3Rpb24sXG4gICAgICBdKX1cbiAgICAgIG9uUHJlc3M9eygpID0+IHsgaGFuZGxlU2VsZWN0KGl0ZW0uZW1vamkpOyB9fVxuICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPXtgUmVhY3Qgd2l0aCAke2l0ZW0ubGFiZWx9YH1cbiAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCJcbiAgICA+XG4gICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmVtb2ppfT57aXRlbS5lbW9qaX08L1RleHQ+XG4gICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsXG4gICAgICB2aXNpYmxlPXt2aXNpYmxlfVxuICAgICAgdHJhbnNwYXJlbnRcbiAgICAgIGFuaW1hdGlvblR5cGU9XCJmYWRlXCJcbiAgICAgIG9uUmVxdWVzdENsb3NlPXtvbkNsb3NlfVxuICAgID5cbiAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgIHN0eWxlPXtzdHlsZXMub3ZlcmxheX1cbiAgICAgICAgYWN0aXZlT3BhY2l0eT17MX1cbiAgICAgICAgb25QcmVzcz17b25DbG9zZX1cbiAgICAgID5cbiAgICAgICAgPFZpZXdcbiAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgICAgICBwb3NpdGlvbiAmJiB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICAgIHRvcDogcG9zaXRpb24ueSxcbiAgICAgICAgICAgICAgbGVmdDogcG9zaXRpb24ueCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSl9XG4gICAgICAgID5cbiAgICAgICAgICA8RmxhdExpc3RcbiAgICAgICAgICAgIGRhdGE9e1JFQUNUSU9OU31cbiAgICAgICAgICAgIHJlbmRlckl0ZW09e3JlbmRlclJlYWN0aW9ufVxuICAgICAgICAgICAga2V5RXh0cmFjdG9yPXsoaXRlbSkgPT4gaXRlbS5lbW9qaX1cbiAgICAgICAgICAgIGhvcml6b250YWxcbiAgICAgICAgICAgIHNob3dzSG9yaXpvbnRhbFNjcm9sbEluZGljYXRvcj17ZmFsc2V9XG4gICAgICAgICAgICBjb250ZW50Q29udGFpbmVyU3R5bGU9e3N0eWxlcy5yZWFjdGlvbnNMaXN0fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICA8L01vZGFsPlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIG92ZXJsYXk6IHtcbiAgICBmbGV4OiAxLFxuICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuMylcIixcbiAgfSxcbiAgY29udGFpbmVyOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcIiNmZmZmZmZcIixcbiAgICBib3JkZXJSYWRpdXM6IDIwLFxuICAgIHBhZGRpbmdWZXJ0aWNhbDogMTAsXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDUsXG4gICAgc2hhZG93Q29sb3I6IFwiIzBhMGEwYVwiLFxuICAgIHNoYWRvd09mZnNldDogeyB3aWR0aDogMCwgaGVpZ2h0OiA0IH0sXG4gICAgc2hhZG93T3BhY2l0eTogMC4zLFxuICAgIHNoYWRvd1JhZGl1czogOCxcbiAgICBlbGV2YXRpb246IDEwLFxuICB9LFxuICByZWFjdGlvbnNMaXN0OiB7XG4gICAgcGFkZGluZ0hvcml6b250YWw6IDUsXG4gICAgZ2FwOiA1LFxuICB9LFxuICByZWFjdGlvbkJ1dHRvbjoge1xuICAgIHdpZHRoOiA0MCxcbiAgICBoZWlnaHQ6IDQwLFxuICAgIGJvcmRlclJhZGl1czogMjAsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2Y1ZjVmNVwiLFxuICB9LFxuICBzZWxlY3RlZFJlYWN0aW9uOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcIiNlM2YyZmRcIixcbiAgICB0cmFuc2Zvcm06IFt7IHNjYWxlOiAxLjEgfV0sXG4gIH0sXG4gIGVtb2ppOiB7XG4gICAgZm9udFNpemU6IDI0LFxuICB9LFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBS0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBU0EsSUFBQUUsU0FBQSxHQUFBRixPQUFBO0FBQWdELElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUFBLFNBQUFELHdCQUFBSyxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBUCx1QkFBQSxZQUFBQSx3QkFBQUssQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFi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