f471b9494098ac9f1c6f4fd980602d1b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarImage = AvatarImage;
exports.HighPriorityImage = HighPriorityImage;
exports.LowPriorityImage = LowPriorityImage;
exports.OptimizedImage = OptimizedImage;
exports.preloadImages = exports.getCacheSize = exports.default = exports.clearImageCache = exports.clearDiskCache = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _core = require("@pawfectmatch/core");
var _reactNative = require("react-native");
var _reactNativeFastImage = _interopRequireDefault(require("react-native-fast-image"));
var _vectorIcons = require("@expo/vector-icons");
var _Provider = require("../theme/Provider");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["uri", "style", "containerStyle", "showLoadingIndicator", "showErrorState", "fallbackIcon", "priority", "resizeMode", "cache", "onLoadStart", "onLoadEnd", "onError", "accessible", "accessibilityLabel"],
  _excluded2 = ["size", "style"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function OptimizedImage(props) {
  var uri = props.uri,
    style = props.style,
    containerStyle = props.containerStyle,
    _props$showLoadingInd = props.showLoadingIndicator,
    showLoadingIndicator = _props$showLoadingInd === void 0 ? true : _props$showLoadingInd,
    _props$showErrorState = props.showErrorState,
    showErrorState = _props$showErrorState === void 0 ? true : _props$showErrorState,
    _props$fallbackIcon = props.fallbackIcon,
    fallbackIcon = _props$fallbackIcon === void 0 ? "image-outline" : _props$fallbackIcon,
    _props$priority = props.priority,
    priority = _props$priority === void 0 ? "normal" : _props$priority,
    _props$resizeMode = props.resizeMode,
    resizeMode = _props$resizeMode === void 0 ? "cover" : _props$resizeMode,
    _props$cache = props.cache,
    cache = _props$cache === void 0 ? "immutable" : _props$cache,
    onLoadStart = props.onLoadStart,
    onLoadEnd = props.onLoadEnd,
    onError = props.onError,
    _props$accessible = props.accessible,
    accessible = _props$accessible === void 0 ? true : _props$accessible,
    accessibilityLabel = props.accessibilityLabel,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _useTheme = (0, _Provider.useTheme)(),
    colors = _useTheme.colors;
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isLoading = _useState2[0],
    setIsLoading = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    hasError = _useState4[0],
    setHasError = _useState4[1];
  var handleLoadStart = (0, _react.useCallback)(function () {
    setIsLoading(true);
    setHasError(false);
    onLoadStart == null ? void 0 : onLoadStart();
  }, [onLoadStart]);
  var handleLoadEnd = (0, _react.useCallback)(function () {
    setIsLoading(false);
    onLoadEnd == null ? void 0 : onLoadEnd();
  }, [onLoadEnd]);
  var handleError = (0, _react.useCallback)(function (error) {
    setIsLoading(false);
    setHasError(true);
    onError == null ? void 0 : onError(error);
    if (__DEV__) {
      _core.logger.warn("OptimizedImage load error:", {
        error: error
      });
    }
  }, [onError]);
  var imageSource = {
    uri: uri,
    priority: priority != null ? priority : "normal",
    cache: cache != null ? cache : "immutable"
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.container, containerStyle]),
    children: [(0, _jsxRuntime.jsx)(_reactNativeFastImage.default, _objectSpread(_objectSpread({}, restProps), {}, {
      source: imageSource,
      style: [styles.image, style],
      resizeMode: resizeMode != null ? resizeMode : "cover",
      onLoadStart: handleLoadStart,
      onLoadEnd: handleLoadEnd,
      onError: handleError,
      accessible: accessible,
      accessibilityLabel: accessibilityLabel || `Image: ${uri}`,
      accessibilityRole: "image"
    })), isLoading && showLoadingIndicator && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.overlay, styles.loadingOverlay]),
      children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        size: "small",
        color: colors.primary,
        accessible: true,
        accessibilityLabel: "Loading image"
      })
    }), hasError && showErrorState && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.overlay, styles.errorOverlay, {
        backgroundColor: colors.bgElevated
      }]),
      accessible: true,
      accessibilityLabel: "Image failed to load",
      accessibilityRole: "alert",
      children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: fallbackIcon,
        size: 32,
        color: colors.text,
        style: styles.errorIcon
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _reactNative.StyleSheet.flatten([styles.errorText, {
          color: colors.text
        }]),
        children: "Image unavailable"
      })]
    })]
  });
}
var preloadImages = exports.preloadImages = function preloadImages(uris) {
  var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _reactNativeFastImage.default.priority.low;
  var sources = uris.map(function (uri) {
    return {
      uri: uri,
      priority: priority,
      cache: "immutable"
    };
  });
  _reactNativeFastImage.default.preload(sources);
};
var clearImageCache = exports.clearImageCache = function clearImageCache() {
  return _reactNativeFastImage.default.clearMemoryCache();
};
var clearDiskCache = exports.clearDiskCache = function clearDiskCache() {
  return _reactNativeFastImage.default.clearDiskCache();
};
var getCacheSize = exports.getCacheSize = function getCacheSize() {
  return Promise.resolve({
    memoryCache: 0,
    diskCache: 0
  });
};
function HighPriorityImage(props) {
  return (0, _jsxRuntime.jsx)(OptimizedImage, _objectSpread(_objectSpread({}, props), {}, {
    priority: _reactNativeFastImage.default.priority.high
  }));
}
function LowPriorityImage(props) {
  return (0, _jsxRuntime.jsx)(OptimizedImage, _objectSpread(_objectSpread({}, props), {}, {
    priority: _reactNativeFastImage.default.priority.low
  }));
}
function AvatarImage(_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? 40 : _ref$size,
    style = _ref.style,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded2);
  return (0, _jsxRuntime.jsx)(OptimizedImage, _objectSpread(_objectSpread({}, props), {}, {
    style: _reactNative.StyleSheet.flatten([{
      width: size,
      height: size,
      borderRadius: size / 2
    }, style]),
    resizeMode: _reactNativeFastImage.default.resizeMode.cover,
    cache: "web"
  }));
}
var styles = _reactNative.StyleSheet.create({
  container: {
    position: "relative"
  },
  image: {
    width: "100%",
    height: "100%"
  },
  overlay: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: "center",
    alignItems: "center"
  },
  loadingOverlay: {
    backgroundColor: "rgba(0, 0, 0, 0.1)"
  },
  errorOverlay: {
    backgroundColor: "#f8f9fa",
    borderWidth: 1,
    borderColor: "#e9ecef",
    borderStyle: "dashed"
  },
  errorIcon: {
    marginBottom: 8,
    opacity: 0.6
  },
  errorText: {
    fontSize: 12,
    textAlign: "center",
    opacity: 0.6
  }
});
var _default = exports.default = OptimizedImage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,