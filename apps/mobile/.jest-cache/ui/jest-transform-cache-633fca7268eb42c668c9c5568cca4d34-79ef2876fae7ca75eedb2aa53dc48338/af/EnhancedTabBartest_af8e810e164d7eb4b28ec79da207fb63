f6079867f83ed2bdbb67f11326ed642b
"use strict";

_getJestObj().mock('@react-navigation/native');
_getJestObj().mock('react-native-safe-area-context');
_getJestObj().mock('expo-haptics');
_getJestObj().mock('expo-blur');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _EnhancedTabBar = require("../EnhancedTabBar");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseTheme = _native.useTheme;
var mockUseSafeAreaInsets = _reactNativeSafeAreaContext.useSafeAreaInsets;
var mockHaptics = Haptics;
describe('EnhancedTabBar', function () {
  var mockNavigation = {
    navigate: jest.fn(),
    emit: jest.fn(),
    state: {
      routes: [],
      index: 0
    }
  };
  var mockDescriptors = {
    route1: {
      options: {},
      navigation: mockNavigation
    },
    route2: {
      options: {},
      navigation: mockNavigation
    },
    route3: {
      options: {},
      navigation: mockNavigation
    }
  };
  var mockState = {
    index: 0,
    routes: [{
      key: 'route1',
      name: 'Home'
    }, {
      key: 'route2',
      name: 'Swipe'
    }, {
      key: 'route3',
      name: 'Matches'
    }]
  };
  var defaultProps = {
    state: mockState,
    descriptors: mockDescriptors,
    navigation: mockNavigation
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockUseTheme.mockReturnValue({
      colors: {
        background: '#ffffff',
        text: '#000000',
        primary: '#007AFF',
        border: '#e0e0e0',
        card: '#ffffff',
        notification: '#ff0000'
      },
      dark: false
    });
    mockUseSafeAreaInsets.mockReturnValue({
      top: 0,
      right: 0,
      bottom: 20,
      left: 0
    });
    Haptics.impactAsync.mockResolvedValue(undefined);
  });
  describe('Basic Rendering', function () {
    it('should render tab bar with all routes', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render.getByText;
      expect(getByText('Home')).toBeTruthy();
      expect(getByText('Swipe')).toBeTruthy();
      expect(getByText('Matches')).toBeTruthy();
    });
    it('should render with correct initial focus', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render2.getByText;
      var homeTab = getByText('Home');
      expect(homeTab).toBeTruthy();
    });
    it('should handle empty routes array', function () {
      var emptyState = {
        index: 0,
        routes: []
      };
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread(_objectSpread({}, defaultProps), {}, {
          state: emptyState
        }))),
        container = _render3.container;
      expect(container).toBeTruthy();
    });
  });
  describe('Double-Tap Detection', function () {
    it('should detect double-tap within 300ms window', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render4.getByText;
      var homeTab = getByText('Home');
      _reactNative.fireEvent.press(homeTab);
      expect(mockNavigation.emit).toHaveBeenCalledWith(expect.objectContaining({
        type: 'tabPress'
      }));
      jest.advanceTimersByTime(150);
      _reactNative.fireEvent.press(homeTab);
      expect(mockNavigation.emit).toHaveBeenCalledWith(expect.objectContaining({
        type: 'tabDoublePress'
      }));
    });
    it('should NOT detect double-tap after 300ms window', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render5.getByText;
      var homeTab = getByText('Home');
      _reactNative.fireEvent.press(homeTab);
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(350);
      });
      _reactNative.fireEvent.press(homeTab);
      var calls = mockNavigation.emit.mock.calls;
      var doublePressCalls = calls.filter(function (call) {
        return call[0].type === 'tabDoublePress';
      });
      expect(doublePressCalls.length).toBe(0);
    });
    it('should emit double-tap only on focused tab', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render6.getByText;
      var homeTab = getByText('Home');
      var swipeTab = getByText('Swipe');
      _reactNative.fireEvent.press(homeTab);
      jest.advanceTimersByTime(150);
      _reactNative.fireEvent.press(homeTab);
      var doublePressCalls = mockNavigation.emit.mock.calls.filter(function (call) {
        var _call$;
        return ((_call$ = call[0]) == null ? void 0 : _call$.type) === 'tabDoublePress';
      });
      expect(doublePressCalls.length).toBeGreaterThan(0);
    });
  });
  describe('Tab Navigation', function () {
    it('should navigate when pressing unfocused tab', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render7.getByText;
      var swipeTab = getByText('Swipe');
      _reactNative.fireEvent.press(swipeTab);
      expect(mockNavigation.navigate).toHaveBeenCalledWith('Swipe');
    });
    it('should NOT navigate when pressing focused tab', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render8.getByText;
      var homeTab = getByText('Home');
      _reactNative.fireEvent.press(homeTab);
      expect(mockNavigation.navigate).not.toHaveBeenCalled();
    });
    it('should emit tabPress event on all taps', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render9.getByText;
      var homeTab = getByText('Home');
      _reactNative.fireEvent.press(homeTab);
      expect(mockNavigation.emit).toHaveBeenCalledWith(expect.objectContaining({
        type: 'tabPress',
        target: 'route1',
        canPreventDefault: true
      }));
    });
  });
  describe('Haptics Feedback', function () {
    it('should trigger haptics on iOS', function () {
      var _require = require('react-native'),
        Platform = _require.Platform;
      Platform.OS = 'ios';
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render0.getByText;
      var homeTab = getByText('Home');
      _reactNative.fireEvent.press(homeTab);
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Light);
    });
    it('should not trigger haptics on Android', function () {
      var _require2 = require('react-native'),
        Platform = _require2.Platform;
      Platform.OS = 'android';
      mockHaptics.impactAsync.mockClear();
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render1.getByText;
      var homeTab = getByText('Home');
      _reactNative.fireEvent.press(homeTab);
      expect(Haptics.impactAsync).not.toHaveBeenCalled();
    });
  });
  describe('Badge Display', function () {
    it('should show badge when count > 0', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render10.getByText;
      var matchesTab = getByText('Matches');
      expect(matchesTab).toBeTruthy();
    });
    it('should format badge text correctly', function () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        queryByText = _render11.queryByText;
      expect(queryByText('99+')).toBeTruthy();
    });
    it('should handle zero badge count', function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render12.getByText;
      var swipeTab = getByText('Swipe');
      expect(swipeTab).toBeTruthy();
    });
  });
  describe('Long Press', function () {
    it('should emit tabLongPress on long press', function () {
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render13.getByText;
      var homeTab = getByText('Home');
      (0, _reactNative.fireEvent)(homeTab, 'onLongPress');
      expect(mockNavigation.emit).toHaveBeenCalledWith({
        type: 'tabLongPress',
        target: 'route1'
      });
    });
  });
  describe('Accessibility', function () {
    it('should have correct accessibility role', function () {
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render14.getByText;
      var homeTab = getByText('Home');
      expect(homeTab.props.accessibilityRole).toBe('tab');
    });
    it('should have correct accessibility state for focused tab', function () {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render15.getByText;
      var homeTab = getByText('Home');
      expect(homeTab.props.accessibilityState.selected).toBe(true);
    });
    it('should have correct accessibility hint', function () {
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render16.getByText;
      var homeTab = getByText('Home');
      expect(homeTab.props.accessibilityHint).toContain('Currently selected');
    });
    it('should have correct accessibility label', function () {
      var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render17.getByText;
      var homeTab = getByText('Home');
      expect(homeTab.props.accessibilityLabel).toContain('Home tab');
    });
  });
  describe('Tab State Changes', function () {
    it('should update when active tab changes', function () {
      var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        rerender = _render18.rerender,
        getByText = _render18.getByText;
      var homeTab = getByText('Home');
      expect(homeTab).toBeTruthy();
      var newState = _objectSpread(_objectSpread({}, mockState), {}, {
        index: 1
      });
      rerender((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread(_objectSpread({}, defaultProps), {}, {
        state: newState
      })));
      var swipeTab = getByText('Swipe');
      expect(swipeTab).toBeTruthy();
    });
    it('should handle index out of bounds', function () {
      var invalidState = _objectSpread(_objectSpread({}, mockState), {}, {
        index: 999
      });
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread(_objectSpread({}, defaultProps), {}, {
          state: invalidState
        })));
      }).not.toThrow();
    });
  });
  describe('Edge Cases', function () {
    it('should handle missing descriptors gracefully', function () {
      var invalidDescriptors = {};
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread(_objectSpread({}, defaultProps), {}, {
          descriptors: invalidDescriptors
        })));
      }).not.toThrow();
    });
    it('should handle navigation without methods', function () {
      var brokenNavigation = {};
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread(_objectSpread({}, defaultProps), {}, {
          navigation: brokenNavigation
        })));
      }).not.toThrow();
    });
    it('should handle rapid tab switching', function () {
      var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        getByText = _render19.getByText;
      var homeTab = getByText('Home');
      var swipeTab = getByText('Swipe');
      _reactNative.fireEvent.press(swipeTab);
      jest.advanceTimersByTime(50);
      _reactNative.fireEvent.press(homeTab);
      jest.advanceTimersByTime(50);
      _reactNative.fireEvent.press(swipeTab);
      expect(mockNavigation.navigate).toHaveBeenCalled();
    });
  });
  describe('Animation State', function () {
    it('should render with animation values', function () {
      var _render20 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        container = _render20.container;
      expect(container).toBeTruthy();
    });
    it('should update animations on state changes', function () {
      var _render21 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        rerender = _render21.rerender,
        container = _render21.container;
      var newState = _objectSpread(_objectSpread({}, mockState), {}, {
        index: 2
      });
      rerender((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread(_objectSpread({}, defaultProps), {}, {
        state: newState
      })));
      expect(container).toBeTruthy();
    });
  });
  describe('Theme Support', function () {
    it('should handle dark theme', function () {
      mockUseTheme.mockReturnValueOnce({
        colors: {
          background: '#000000',
          text: '#ffffff',
          primary: '#0A84FF',
          border: '#333333',
          card: '#1c1c1e',
          notification: '#ff0000'
        },
        dark: true
      });
      var _render22 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        container = _render22.container;
      expect(container).toBeTruthy();
    });
    it('should handle custom colors', function () {
      mockUseTheme.mockReturnValueOnce({
        colors: {
          background: '#FF5733',
          text: '#FFFFFF',
          primary: '#C70039',
          border: '#900C3F',
          card: '#FFC300',
          notification: '#FF5733'
        },
        dark: false
      });
      var _render23 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        container = _render23.container;
      expect(container).toBeTruthy();
    });
  });
  describe('Safe Area Insets', function () {
    it('should handle different safe area insets', function () {
      mockUseSafeAreaInsets.mockReturnValueOnce({
        top: 44,
        right: 0,
        bottom: 34,
        left: 0
      });
      var _render24 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        container = _render24.container;
      expect(container).toBeTruthy();
    });
    it('should handle zero insets', function () {
      mockUseSafeAreaInsets.mockReturnValueOnce({
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      });
      var _render25 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread({}, defaultProps))),
        container = _render25.container;
      expect(container).toBeTruthy();
    });
  });
  describe('Icon Selection', function () {
    it('should select correct icons for each route', function () {
      var routes = [{
        key: 'route1',
        name: 'Home'
      }, {
        key: 'route2',
        name: 'Swipe'
      }, {
        key: 'route3',
        name: 'Map'
      }, {
        key: 'route4',
        name: 'Matches'
      }, {
        key: 'route5',
        name: 'Profile'
      }, {
        key: 'route6',
        name: 'AdoptionManager'
      }, {
        key: 'route7',
        name: 'Premium'
      }];
      var _render26 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread(_objectSpread({}, defaultProps), {}, {
          state: _objectSpread(_objectSpread({}, mockState), {}, {
            routes: routes
          })
        }))),
        container = _render26.container;
      expect(container).toBeTruthy();
    });
    it('should handle unknown route names', function () {
      var routes = [{
        key: 'route1',
        name: 'UnknownRoute'
      }];
      var _render27 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EnhancedTabBar.EnhancedTabBar, _objectSpread(_objectSpread({}, defaultProps), {}, {
          state: _objectSpread(_objectSpread({}, mockState), {}, {
            routes: routes
          })
        }))),
        container = _render27.container;
      expect(container).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,