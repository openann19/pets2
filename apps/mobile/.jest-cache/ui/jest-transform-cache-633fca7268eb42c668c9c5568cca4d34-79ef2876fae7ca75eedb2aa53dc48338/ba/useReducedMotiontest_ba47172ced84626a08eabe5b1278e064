0e7a87ed5669e2d4524d0ab4f00bdb7a
"use strict";

_getJestObj().mock("react-native", function () {
  var RN = jest.requireActual("react-native");
  return _objectSpread(_objectSpread({}, RN), {}, {
    AccessibilityInfo: {
      isReduceMotionEnabled: jest.fn()
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useReducedMotion = require("../useReducedMotion");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("useReducedMotion", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("returns false initially when motion is not reduced", function () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(false);
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook.result;
    expect(result.current).toBe(false);
  });
  it("returns true when motion is reduced", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(true);
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook2.result,
      waitForNextUpdate = _renderHook2.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(result.current).toBe(true);
  }));
  it("detects reduced motion preference", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(true);
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook3.result,
      waitForNextUpdate = _renderHook3.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(_reactNative2.AccessibilityInfo.isReduceMotionEnabled).toHaveBeenCalled();
    expect(result.current).toBe(true);
  }));
  it("handles reduced motion disabled", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(false);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook4.result,
      waitForNextUpdate = _renderHook4.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(result.current).toBe(false);
  }));
  it("initializes state to false before async check", function () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockImplementation(function () {
      return new Promise(function (resolve) {
        return setTimeout(function () {
          return resolve(false);
        }, 100);
      });
    });
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook5.result;
    expect(result.current).toBe(false);
  });
  it("updates state after async check completes", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(true);
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook6.result,
      waitForNextUpdate = _renderHook6.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(result.current).toBe(true);
  }));
  it("calls AccessibilityInfo only once per mount", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(false);
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      waitForNextUpdate = _renderHook7.waitForNextUpdate;
    yield waitForNextUpdate();
    expect(_reactNative2.AccessibilityInfo.isReduceMotionEnabled).toHaveBeenCalledTimes(1);
  }));
  it("handles promise rejection gracefully", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockRejectedValue(new Error("Accessibility API unavailable"));
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook8.result;
    expect(result.current).toBe(false);
  }));
  it("works with concurrent component usage", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(true);
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result1 = _renderHook9.result;
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result2 = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
    }));
    expect(result1.current).toBe(true);
    expect(result2.current).toBe(true);
  }));
  it("maintains consistent value across re-renders", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(false);
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook1.result,
      rerender = _renderHook1.rerender;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
    }));
    rerender();
    expect(result.current).toBe(false);
  }));
  it("can be used to conditionally disable animations", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(true);
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook10.result,
      waitForNextUpdate = _renderHook10.waitForNextUpdate;
    yield waitForNextUpdate();
    var animationConfig = result.current ? {
      duration: 0
    } : {
      duration: 500
    };
    expect(animationConfig).toEqual({
      duration: 0
    });
  }));
  it("can be used to enable full animations when motion not reduced", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(false);
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook11.result,
      waitForNextUpdate = _renderHook11.waitForNextUpdate;
    yield waitForNextUpdate();
    var animationConfig = result.current ? {
      duration: 0
    } : {
      duration: 500
    };
    expect(animationConfig).toEqual({
      duration: 500
    });
  }));
  it("integrates with BouncePressable haptics", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(true);
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook12.result,
      waitForNextUpdate = _renderHook12.waitForNextUpdate;
    yield waitForNextUpdate();
    var hapticsEnabled = !result.current;
    expect(hapticsEnabled).toBe(false);
  }));
  it("integrates with animation libraries", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(true);
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useReducedMotion.useReducedMotion)();
      }),
      result = _renderHook13.result,
      waitForNextUpdate = _renderHook13.waitForNextUpdate;
    yield waitForNextUpdate();
    var springConfig = result.current ? {
      damping: 100,
      stiffness: 0
    } : {
      damping: 15,
      stiffness: 200
    };
    expect(springConfig.damping).toBe(100);
    expect(springConfig.stiffness).toBe(0);
  }));
  it("handles rapid mount/unmount cycles", (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.AccessibilityInfo.isReduceMotionEnabled.mockResolvedValue(true);
    for (var i = 0; i < 5; i++) {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useReducedMotion.useReducedMotion)();
        }),
        unmount = _renderHook14.unmount;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 10);
        });
      }));
      unmount();
    }
    expect(_reactNative2.AccessibilityInfo.isReduceMotionEnabled).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiX29iamVjdFNwcmVhZCIsIkFjY2Vzc2liaWxpdHlJbmZvIiwiaXNSZWR1Y2VNb3Rpb25FbmFibGVkIiwiZm4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX3VzZVJlZHVjZWRNb3Rpb24iLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIl9yZW5kZXJIb29rIiwicmVuZGVySG9vayIsInVzZVJlZHVjZWRNb3Rpb24iLCJyZXN1bHQiLCJleHBlY3QiLCJjdXJyZW50IiwidG9CZSIsIl9yZW5kZXJIb29rMiIsIndhaXRGb3JOZXh0VXBkYXRlIiwiX3JlbmRlckhvb2szIiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXJIb29rNCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIl9yZW5kZXJIb29rNSIsIl9yZW5kZXJIb29rNiIsIl9yZW5kZXJIb29rNyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIm1vY2tSZWplY3RlZFZhbHVlIiwiRXJyb3IiLCJfcmVuZGVySG9vazgiLCJfcmVuZGVySG9vazkiLCJyZXN1bHQxIiwiX3JlbmRlckhvb2swIiwicmVzdWx0MiIsImFjdCIsIl9yZW5kZXJIb29rMSIsInJlcmVuZGVyIiwiX3JlbmRlckhvb2sxMCIsImFuaW1hdGlvbkNvbmZpZyIsImR1cmF0aW9uIiwidG9FcXVhbCIsIl9yZW5kZXJIb29rMTEiLCJfcmVuZGVySG9vazEyIiwiaGFwdGljc0VuYWJsZWQiLCJfcmVuZGVySG9vazEzIiwic3ByaW5nQ29uZmlnIiwiZGFtcGluZyIsInN0aWZmbmVzcyIsImkiLCJfcmVuZGVySG9vazE0IiwidW5tb3VudCJdLCJzb3VyY2VzIjpbInVzZVJlZHVjZWRNb3Rpb24udGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBqZXN0LWVudmlyb25tZW50IGpzZG9tXG4gKi9cbmltcG9ydCB7IHJlbmRlckhvb2ssIGFjdCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgQWNjZXNzaWJpbGl0eUluZm8gfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyB1c2VSZWR1Y2VkTW90aW9uIH0gZnJvbSBcIi4uL3VzZVJlZHVjZWRNb3Rpb25cIjtcblxuLy8gTW9jayBBY2Nlc3NpYmlsaXR5SW5mb1xuamVzdC5tb2NrKFwicmVhY3QtbmF0aXZlXCIsICgpID0+IHtcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoXCJyZWFjdC1uYXRpdmVcIik7XG4gIHJldHVybiB7XG4gICAgLi4uUk4sXG4gICAgQWNjZXNzaWJpbGl0eUluZm86IHtcbiAgICAgIGlzUmVkdWNlTW90aW9uRW5hYmxlZDogamVzdC5mbigpLFxuICAgIH0sXG4gIH07XG59KTtcblxuZGVzY3JpYmUoXCJ1c2VSZWR1Y2VkTW90aW9uXCIsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KFwicmV0dXJucyBmYWxzZSBpbml0aWFsbHkgd2hlbiBtb3Rpb24gaXMgbm90IHJlZHVjZWRcIiwgKCkgPT4ge1xuICAgIChBY2Nlc3NpYmlsaXR5SW5mby5pc1JlZHVjZU1vdGlvbkVuYWJsZWQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShcbiAgICAgIGZhbHNlLFxuICAgICk7XG5cbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VSZWR1Y2VkTW90aW9uKCkpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgaXQoXCJyZXR1cm5zIHRydWUgd2hlbiBtb3Rpb24gaXMgcmVkdWNlZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgKEFjY2Vzc2liaWxpdHlJbmZvLmlzUmVkdWNlTW90aW9uRW5hYmxlZCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuXG4gICAgY29uc3QgeyByZXN1bHQsIHdhaXRGb3JOZXh0VXBkYXRlIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlZHVjZWRNb3Rpb24oKSk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yTmV4dFVwZGF0ZSgpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0JlKHRydWUpO1xuICB9KTtcblxuICBpdChcImRldGVjdHMgcmVkdWNlZCBtb3Rpb24gcHJlZmVyZW5jZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgKEFjY2Vzc2liaWxpdHlJbmZvLmlzUmVkdWNlTW90aW9uRW5hYmxlZCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuXG4gICAgY29uc3QgeyByZXN1bHQsIHdhaXRGb3JOZXh0VXBkYXRlIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlZHVjZWRNb3Rpb24oKSk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yTmV4dFVwZGF0ZSgpO1xuXG4gICAgZXhwZWN0KEFjY2Vzc2liaWxpdHlJbmZvLmlzUmVkdWNlTW90aW9uRW5hYmxlZCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudCkudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoXCJoYW5kbGVzIHJlZHVjZWQgbW90aW9uIGRpc2FibGVkXCIsIGFzeW5jICgpID0+IHtcbiAgICAoQWNjZXNzaWJpbGl0eUluZm8uaXNSZWR1Y2VNb3Rpb25FbmFibGVkIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoZmFsc2UpO1xuXG4gICAgY29uc3QgeyByZXN1bHQsIHdhaXRGb3JOZXh0VXBkYXRlIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlZHVjZWRNb3Rpb24oKSk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yTmV4dFVwZGF0ZSgpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgaXQoXCJpbml0aWFsaXplcyBzdGF0ZSB0byBmYWxzZSBiZWZvcmUgYXN5bmMgY2hlY2tcIiwgKCkgPT4ge1xuICAgIChBY2Nlc3NpYmlsaXR5SW5mby5pc1JlZHVjZU1vdGlvbkVuYWJsZWQgYXMgamVzdC5Nb2NrKS5tb2NrSW1wbGVtZW50YXRpb24oXG4gICAgICAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKGZhbHNlKSwgMTAwKSksXG4gICAgKTtcblxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlZHVjZWRNb3Rpb24oKSk7XG5cbiAgICAvLyBJbml0aWFsbHkgc2hvdWxkIGJlIGZhbHNlXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgaXQoXCJ1cGRhdGVzIHN0YXRlIGFmdGVyIGFzeW5jIGNoZWNrIGNvbXBsZXRlc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgKEFjY2Vzc2liaWxpdHlJbmZvLmlzUmVkdWNlTW90aW9uRW5hYmxlZCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuXG4gICAgY29uc3QgeyByZXN1bHQsIHdhaXRGb3JOZXh0VXBkYXRlIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlZHVjZWRNb3Rpb24oKSk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yTmV4dFVwZGF0ZSgpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0JlKHRydWUpO1xuICB9KTtcblxuICBpdChcImNhbGxzIEFjY2Vzc2liaWxpdHlJbmZvIG9ubHkgb25jZSBwZXIgbW91bnRcIiwgYXN5bmMgKCkgPT4ge1xuICAgIChBY2Nlc3NpYmlsaXR5SW5mby5pc1JlZHVjZU1vdGlvbkVuYWJsZWQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShmYWxzZSk7XG5cbiAgICBjb25zdCB7IHdhaXRGb3JOZXh0VXBkYXRlIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlZHVjZWRNb3Rpb24oKSk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yTmV4dFVwZGF0ZSgpO1xuXG4gICAgZXhwZWN0KEFjY2Vzc2liaWxpdHlJbmZvLmlzUmVkdWNlTW90aW9uRW5hYmxlZCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdChcImhhbmRsZXMgcHJvbWlzZSByZWplY3Rpb24gZ3JhY2VmdWxseVwiLCBhc3luYyAoKSA9PiB7XG4gICAgKEFjY2Vzc2liaWxpdHlJbmZvLmlzUmVkdWNlTW90aW9uRW5hYmxlZCBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlKFxuICAgICAgbmV3IEVycm9yKFwiQWNjZXNzaWJpbGl0eSBBUEkgdW5hdmFpbGFibGVcIiksXG4gICAgKTtcblxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlZHVjZWRNb3Rpb24oKSk7XG5cbiAgICAvLyBTaG91bGQgbm90IHRocm93IGFuZCBzaG91bGQgZGVmYXVsdCB0byBmYWxzZVxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudCkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KFwid29ya3Mgd2l0aCBjb25jdXJyZW50IGNvbXBvbmVudCB1c2FnZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgKEFjY2Vzc2liaWxpdHlJbmZvLmlzUmVkdWNlTW90aW9uRW5hYmxlZCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuXG4gICAgY29uc3QgeyByZXN1bHQ6IHJlc3VsdDEgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUmVkdWNlZE1vdGlvbigpKTtcbiAgICBjb25zdCB7IHJlc3VsdDogcmVzdWx0MiB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VSZWR1Y2VkTW90aW9uKCkpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCkpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdDEuY3VycmVudCkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QocmVzdWx0Mi5jdXJyZW50KS50b0JlKHRydWUpO1xuICB9KTtcblxuICBpdChcIm1haW50YWlucyBjb25zaXN0ZW50IHZhbHVlIGFjcm9zcyByZS1yZW5kZXJzXCIsIGFzeW5jICgpID0+IHtcbiAgICAoQWNjZXNzaWJpbGl0eUluZm8uaXNSZWR1Y2VNb3Rpb25FbmFibGVkIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoZmFsc2UpO1xuXG4gICAgY29uc3QgeyByZXN1bHQsIHJlcmVuZGVyIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlZHVjZWRNb3Rpb24oKSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XG4gICAgfSk7XG5cbiAgICByZXJlbmRlcigpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgaXQoXCJjYW4gYmUgdXNlZCB0byBjb25kaXRpb25hbGx5IGRpc2FibGUgYW5pbWF0aW9uc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgKEFjY2Vzc2liaWxpdHlJbmZvLmlzUmVkdWNlTW90aW9uRW5hYmxlZCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpO1xuXG4gICAgY29uc3QgeyByZXN1bHQsIHdhaXRGb3JOZXh0VXBkYXRlIH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlZHVjZWRNb3Rpb24oKSk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yTmV4dFVwZGF0ZSgpO1xuXG4gICAgY29uc3QgYW5pbWF0aW9uQ29uZmlnID0gcmVzdWx0LmN1cnJlbnRcbiAgICAgID8geyBkdXJhdGlvbjogMCB9XG4gICAgICA6IHsgZHVyYXRpb246IDUwMCB9O1xuXG4gICAgZXhwZWN0KGFuaW1hdGlvbkNvbmZpZykudG9FcXVhbCh7IGR1cmF0aW9uOiAwIH0pO1xuICB9KTtcblxuICBpdChcImNhbiBiZSB1c2VkIHRvIGVuYWJsZSBmdWxsIGFuaW1hdGlvbnMgd2hlbiBtb3Rpb24gbm90IHJlZHVjZWRcIiwgYXN5bmMgKCkgPT4ge1xuICAgIChBY2Nlc3NpYmlsaXR5SW5mby5pc1JlZHVjZU1vdGlvbkVuYWJsZWQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShmYWxzZSk7XG5cbiAgICBjb25zdCB7IHJlc3VsdCwgd2FpdEZvck5leHRVcGRhdGUgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUmVkdWNlZE1vdGlvbigpKTtcblxuICAgIGF3YWl0IHdhaXRGb3JOZXh0VXBkYXRlKCk7XG5cbiAgICBjb25zdCBhbmltYXRpb25Db25maWcgPSByZXN1bHQuY3VycmVudFxuICAgICAgPyB7IGR1cmF0aW9uOiAwIH1cbiAgICAgIDogeyBkdXJhdGlvbjogNTAwIH07XG5cbiAgICBleHBlY3QoYW5pbWF0aW9uQ29uZmlnKS50b0VxdWFsKHsgZHVyYXRpb246IDUwMCB9KTtcbiAgfSk7XG5cbiAgaXQoXCJpbnRlZ3JhdGVzIHdpdGggQm91bmNlUHJlc3NhYmxlIGhhcHRpY3NcIiwgYXN5bmMgKCkgPT4ge1xuICAgIChBY2Nlc3NpYmlsaXR5SW5mby5pc1JlZHVjZU1vdGlvbkVuYWJsZWQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKTtcblxuICAgIGNvbnN0IHsgcmVzdWx0LCB3YWl0Rm9yTmV4dFVwZGF0ZSB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VSZWR1Y2VkTW90aW9uKCkpO1xuXG4gICAgYXdhaXQgd2FpdEZvck5leHRVcGRhdGUoKTtcblxuICAgIGNvbnN0IGhhcHRpY3NFbmFibGVkID0gIXJlc3VsdC5jdXJyZW50O1xuICAgIGV4cGVjdChoYXB0aWNzRW5hYmxlZCkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KFwiaW50ZWdyYXRlcyB3aXRoIGFuaW1hdGlvbiBsaWJyYXJpZXNcIiwgYXN5bmMgKCkgPT4ge1xuICAgIChBY2Nlc3NpYmlsaXR5SW5mby5pc1JlZHVjZU1vdGlvbkVuYWJsZWQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKTtcblxuICAgIGNvbnN0IHsgcmVzdWx0LCB3YWl0Rm9yTmV4dFVwZGF0ZSB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VSZWR1Y2VkTW90aW9uKCkpO1xuXG4gICAgYXdhaXQgd2FpdEZvck5leHRVcGRhdGUoKTtcblxuICAgIC8vIEV4YW1wbGU6IHVzZSB3aXRoIHJlYW5pbWF0ZWRcbiAgICBjb25zdCBzcHJpbmdDb25maWcgPSByZXN1bHQuY3VycmVudFxuICAgICAgPyB7IGRhbXBpbmc6IDEwMCwgc3RpZmZuZXNzOiAwIH1cbiAgICAgIDogeyBkYW1waW5nOiAxNSwgc3RpZmZuZXNzOiAyMDAgfTtcblxuICAgIGV4cGVjdChzcHJpbmdDb25maWcuZGFtcGluZykudG9CZSgxMDApO1xuICAgIGV4cGVjdChzcHJpbmdDb25maWcuc3RpZmZuZXNzKS50b0JlKDApO1xuICB9KTtcblxuICBpdChcImhhbmRsZXMgcmFwaWQgbW91bnQvdW5tb3VudCBjeWNsZXNcIiwgYXN5bmMgKCkgPT4ge1xuICAgIChBY2Nlc3NpYmlsaXR5SW5mby5pc1JlZHVjZU1vdGlvbkVuYWJsZWQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICBjb25zdCB7IHVubW91bnQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUmVkdWNlZE1vdGlvbigpKTtcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwKSk7XG4gICAgICB9KTtcbiAgICAgIHVubW91bnQoKTtcbiAgICB9XG5cbiAgICBleHBlY3QoQWNjZXNzaWJpbGl0eUluZm8uaXNSZWR1Y2VNb3Rpb25FbmFibGVkKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG5cbiJdLCJtYXBwaW5ncyI6Ijs7QUFRQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDOUIsSUFBTUMsRUFBRSxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7RUFDN0MsT0FBQUMsYUFBQSxDQUFBQSxhQUFBLEtBQ0tILEVBQUU7SUFDTEksaUJBQWlCLEVBQUU7TUFDakJDLHFCQUFxQixFQUFFSixJQUFJLENBQUNLLEVBQUUsQ0FBQztJQUNqQztFQUFDO0FBRUwsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSxnQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBYkgsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksYUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssaUJBQUEsR0FBQUwsT0FBQTtBQUF1RCxTQUFBTSxRQUFBQyxD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