95e58f1bda72d525a0db964f36571e8f
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get3 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get3.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.APIError = exports.UnifiedAPIClient = void 0;
var logger_1 = require("../utils/logger");
var CircuitBreaker_1 = require("./CircuitBreaker");
var RequestRetryStrategy_1 = require("./RequestRetryStrategy");
var OfflineQueueManager_1 = require("./OfflineQueueManager");
var APIErrorClassifier_1 = require("./APIErrorClassifier");
var RecoveryStrategies_1 = require("./RecoveryStrategies");
var UnifiedAPIClient = function (_OfflineQueueManager_) {
  function UnifiedAPIClient(config) {
    var _this;
    (0, _classCallCheck2.default)(this, UnifiedAPIClient);
    _this = _callSuper(this, UnifiedAPIClient, [config.queueConfig]);
    _this.token = null;
    _this.cache = new Map();
    _this.clientConfig = config;
    _this.circuitBreaker = new CircuitBreaker_1.CircuitBreaker(config.circuitBreakerConfig);
    _this.retryStrategy = new RequestRetryStrategy_1.RequestRetryStrategy(config.retryConfig);
    _this.errorClassifier = new APIErrorClassifier_1.APIErrorClassifier();
    _this.recoveryStrategies = new RecoveryStrategies_1.RecoveryStrategies();
    return _this;
  }
  (0, _inherits2.default)(UnifiedAPIClient, _OfflineQueueManager_);
  return (0, _createClass2.default)(UnifiedAPIClient, [{
    key: "setToken",
    value: function setToken(token) {
      this.token = token;
    }
  }, {
    key: "setTokenRefreshFn",
    value: function setTokenRefreshFn(fn) {
      this.tokenRefreshFn = fn;
    }
  }, {
    key: "request",
    value: (function () {
      var _request = (0, _asyncToGenerator2.default)(function* (endpoint) {
        var _config$requireOnline,
          _this2 = this;
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var method = config.method || 'GET';
        var requireOnline = (_config$requireOnline = config.requireOnline) != null ? _config$requireOnline : false;
        if (!this.circuitBreaker.isHealthy()) {
          var error = new Error('Circuit breaker is OPEN');
          return this.handleError(error, endpoint, config);
        }
        if (requireOnline && !this.isOnline) {
          var _this$clientConfig$re;
          yield this.enqueue({
            endpoint: endpoint,
            method: method,
            data: config.body,
            headers: config.headers,
            priority: config.priority || 'normal',
            maxRetries: ((_this$clientConfig$re = this.clientConfig.retryConfig) == null ? void 0 : _this$clientConfig$re.maxRetries) || 3,
            conflictResolution: 'overwrite'
          });
          return {
            success: false,
            error: 'Request queued for offline processing'
          };
        }
        try {
          var result = yield this.circuitBreaker.execute((0, _asyncToGenerator2.default)(function* () {
            return yield _this2.retryStrategy.execute((0, _asyncToGenerator2.default)(function* () {
              return yield _this2.makeRequest(endpoint, config);
            }));
          }));
          return {
            success: true,
            data: result
          };
        } catch (error) {
          return this.handleError(error, endpoint, config);
        }
      });
      function request(_x) {
        return _request.apply(this, arguments);
      }
      return request;
    }())
  }, {
    key: "get",
    value: (function () {
      var _get2 = (0, _asyncToGenerator2.default)(function* (endpoint, config) {
        return this.request(endpoint, _objectSpread(_objectSpread({}, config), {}, {
          method: 'GET'
        }));
      });
      function get(_x2, _x3) {
        return _get2.apply(this, arguments);
      }
      return get;
    }())
  }, {
    key: "post",
    value: (function () {
      var _post = (0, _asyncToGenerator2.default)(function* (endpoint, data, config) {
        return this.request(endpoint, _objectSpread(_objectSpread({}, config), {}, {
          method: 'POST',
          body: data
        }));
      });
      function post(_x4, _x5, _x6) {
        return _post.apply(this, arguments);
      }
      return post;
    }())
  }, {
    key: "put",
    value: (function () {
      var _put = (0, _asyncToGenerator2.default)(function* (endpoint, data, config) {
        return this.request(endpoint, _objectSpread(_objectSpread({}, config), {}, {
          method: 'PUT',
          body: data
        }));
      });
      function put(_x7, _x8, _x9) {
        return _put.apply(this, arguments);
      }
      return put;
    }())
  }, {
    key: "patch",
    value: (function () {
      var _patch = (0, _asyncToGenerator2.default)(function* (endpoint, data, config) {
        return this.request(endpoint, _objectSpread(_objectSpread({}, config), {}, {
          method: 'PATCH',
          body: data
        }));
      });
      function patch(_x0, _x1, _x10) {
        return _patch.apply(this, arguments);
      }
      return patch;
    }())
  }, {
    key: "delete",
    value: (function () {
      var _delete2 = (0, _asyncToGenerator2.default)(function* (endpoint, config) {
        return this.request(endpoint, _objectSpread(_objectSpread({}, config), {}, {
          method: 'DELETE'
        }));
      });
      function _delete(_x11, _x12) {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }())
  }, {
    key: "makeRequest",
    value: (function () {
      var _makeRequest = (0, _asyncToGenerator2.default)(function* (endpoint, config) {
        var url = `${this.clientConfig.baseURL}${endpoint}`;
        var method = config.method || 'GET';
        var timeout = config.timeout || this.clientConfig.timeout || 30000;
        var headers = _objectSpread({
          'Content-Type': 'application/json'
        }, config.headers);
        if (this.token) {
          headers['Authorization'] = `Bearer ${this.token}`;
        }
        var fetchConfig = {
          method: method,
          headers: headers,
          signal: AbortSignal.timeout(timeout)
        };
        if (config.body && method !== 'GET') {
          fetchConfig.body = JSON.stringify(config.body);
        }
        var response = yield fetch(url, fetchConfig);
        if (!response.ok) {
          var errorData = yield response.json().catch(function () {
            return {
              message: response.statusText
            };
          });
          var error = new APIError(errorData.message || 'Request failed', response.status);
          throw error;
        }
        var data = yield response.json().catch(function () {
          return null;
        });
        return data;
      });
      function makeRequest(_x13, _x14) {
        return _makeRequest.apply(this, arguments);
      }
      return makeRequest;
    }())
  }, {
    key: "handleError",
    value: (function () {
      var _handleError = (0, _asyncToGenerator2.default)(function* (error, endpoint, config) {
        var _this3 = this;
        var classification = this.errorClassifier.classify(error, {
          endpoint: endpoint,
          method: config.method
        });
        logger_1.logger.error('API request failed', {
          endpoint: endpoint,
          method: config.method,
          error: classification.type,
          retryable: classification.retryable
        });
        if (classification.retryable) {
          try {
            var _this$clientConfig$re2;
            var recoveryResult = yield this.recoveryStrategies.combinedRecovery(function () {
              return _this3.makeRequest(endpoint, config);
            }, {
              retry: true,
              refreshToken: this.tokenRefreshFn,
              useCache: function useCache() {
                return _this3.getCache(endpoint);
              },
              queue: function () {
                var _queue = (0, _asyncToGenerator2.default)(function* (data) {
                  var _this3$clientConfig$r;
                  yield _this3.enqueue({
                    endpoint: endpoint,
                    method: config.method || 'GET',
                    data: data,
                    headers: config.headers,
                    priority: config.priority || 'normal',
                    maxRetries: ((_this3$clientConfig$r = _this3.clientConfig.retryConfig) == null ? void 0 : _this3$clientConfig$r.maxRetries) || 3,
                    conflictResolution: 'overwrite'
                  });
                });
                function queue(_x18) {
                  return _queue.apply(this, arguments);
                }
                return queue;
              }()
            }, {
              maxRetries: ((_this$clientConfig$re2 = this.clientConfig.retryConfig) == null ? void 0 : _this$clientConfig$re2.maxRetries) || 3
            });
            if (recoveryResult.success) {
              return {
                success: true,
                data: recoveryResult.data
              };
            }
          } catch (recoveryError) {
            logger_1.logger.error('Recovery failed', {
              error: recoveryError
            });
          }
        }
        return {
          success: false,
          error: this.errorClassifier.getUserMessage(error, {
            endpoint: endpoint,
            method: config.method
          }),
          statusCode: classification.statusCode
        };
      });
      function handleError(_x15, _x16, _x17) {
        return _handleError.apply(this, arguments);
      }
      return handleError;
    }())
  }, {
    key: "processItem",
    value: (function () {
      var _processItem = (0, _asyncToGenerator2.default)(function* (item) {
        var result = yield this.makeRequest(item.endpoint, {
          method: item.method,
          body: item.data,
          headers: item.headers
        });
        if (item.method === 'GET') {
          this.setCache(item.endpoint, result);
        }
      });
      function processItem(_x19) {
        return _processItem.apply(this, arguments);
      }
      return processItem;
    }())
  }, {
    key: "getCache",
    value: (function () {
      var _getCache = (0, _asyncToGenerator2.default)(function* (endpoint) {
        var cached = this.cache.get(endpoint);
        if (!cached) {
          return null;
        }
        if (Date.now() - cached.timestamp > cached.ttl) {
          this.cache.delete(endpoint);
          return null;
        }
        return cached.data;
      });
      function getCache(_x20) {
        return _getCache.apply(this, arguments);
      }
      return getCache;
    }())
  }, {
    key: "setCache",
    value: function setCache(endpoint, data) {
      var ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300000;
      this.cache.set(endpoint, {
        data: data,
        timestamp: Date.now(),
        ttl: ttl
      });
    }
  }, {
    key: "getCircuitBreakerMetrics",
    value: function getCircuitBreakerMetrics() {
      return this.circuitBreaker.getMetrics();
    }
  }, {
    key: "getQueueStats",
    value: function getQueueStats() {
      return this.getStats();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _superPropGet(UnifiedAPIClient, "destroy", this, 3)([]);
      this.circuitBreaker.destroy();
      this.cache.clear();
    }
  }]);
}(OfflineQueueManager_1.OfflineQueueManager);
exports.UnifiedAPIClient = UnifiedAPIClient;
var APIError = function (_Error) {
  function APIError(message, statusCode) {
    var _this4;
    (0, _classCallCheck2.default)(this, APIError);
    _this4 = _callSuper(this, APIError, [message]);
    _this4.statusCode = statusCode;
    _this4.name = 'APIError';
    return _this4;
  }
  (0, _inherits2.default)(APIError, _Error);
  return (0, _createClass2.default)(APIError);
}((0, _wrapNativeSuper2.default)(Error));
exports.APIError = APIError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,