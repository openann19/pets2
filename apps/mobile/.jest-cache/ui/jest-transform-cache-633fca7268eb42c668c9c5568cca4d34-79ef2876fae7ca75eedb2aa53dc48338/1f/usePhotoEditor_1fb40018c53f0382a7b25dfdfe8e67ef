00223e82d66f15e460f0d337c1a9b85e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ADJUSTMENTS = void 0;
exports.usePhotoEditor = usePhotoEditor;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DEFAULT_ADJUSTMENTS = exports.DEFAULT_ADJUSTMENTS = {
  brightness: 100,
  contrast: 100,
  saturation: 100,
  warmth: 0,
  blur: 0,
  sharpen: 0
};
function usePhotoEditor(initialUri) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$maxWidth = options.maxWidth,
    maxWidth = _options$maxWidth === void 0 ? 1920 : _options$maxWidth,
    _options$maxHeight = options.maxHeight,
    maxHeight = _options$maxHeight === void 0 ? 1920 : _options$maxHeight,
    _options$quality = options.quality,
    quality = _options$quality === void 0 ? 0.9 : _options$quality;
  var _useState = (0, _react.useState)(initialUri),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    uri = _useState2[0],
    setUri = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(DEFAULT_ADJUSTMENTS),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    adjustments = _useState6[0],
    setAdjustments = _useState6[1];
  var _useState7 = (0, _react.useState)(0),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    rotation = _useState8[0],
    setRotation = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    flipHorizontal = _useState0[0],
    setFlipHorizontal = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    flipVertical = _useState10[0],
    setFlipVertical = _useState10[1];
  var manipulationHistoryRef = (0, _react.useRef)([initialUri]);
  var updateAdjustment = (0, _react.useCallback)(function (key, value) {
    setAdjustments(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, key, value));
    });
  }, []);
  var rotateLeft = (0, _react.useCallback)(function () {
    setRotation(function (prev) {
      var newRotation = (prev - 90) % 360;
      return newRotation < 0 ? 360 + newRotation : newRotation;
    });
  }, []);
  var rotateRight = (0, _react.useCallback)(function () {
    setRotation(function (prev) {
      return (prev + 90) % 360;
    });
  }, []);
  var applyFilter = (0, _react.useCallback)(function (filter) {
    setAdjustments(function (prev) {
      return _objectSpread(_objectSpread({}, prev), filter);
    });
  }, []);
  var resetAdjustments = (0, _react.useCallback)(function () {
    setAdjustments(DEFAULT_ADJUSTMENTS);
    setRotation(0);
    setFlipHorizontal(false);
    setFlipVertical(false);
    setUri(initialUri);
    manipulationHistoryRef.current = [initialUri];
  }, [initialUri]);
  var saveImage = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setIsLoading(true);
    try {
      var actions = [];
      if (rotation !== 0) {
        actions.push({
          rotate: rotation
        });
      }
      if (flipHorizontal) {
        actions.push({
          flip: ImageManipulator.FlipType.Horizontal
        });
      }
      if (flipVertical) {
        actions.push({
          flip: ImageManipulator.FlipType.Vertical
        });
      }
      actions.push({
        resize: {
          width: maxWidth,
          height: maxHeight
        }
      });
      var result;
      if (actions.length > 0) {
        result = yield ImageManipulator.manipulateAsync(uri, actions, {
          compress: quality,
          format: ImageManipulator.SaveFormat.JPEG
        });
      } else {
        result = yield ImageManipulator.manipulateAsync(uri, [], {
          compress: quality,
          format: ImageManipulator.SaveFormat.JPEG
        });
      }
      var adjustmentsParam = encodeURIComponent(JSON.stringify(adjustments));
      var finalUri = `${result.uri}?adjustments=${adjustmentsParam}`;
      manipulationHistoryRef.current.push(finalUri);
      _core.logger.info('Photo saved with adjustments', {
        finalUri: finalUri
      });
      return finalUri;
    } catch (error) {
      _core.logger.error('Photo save failed', {
        error: error
      });
      _reactNative.Alert.alert('Error', 'Failed to save image. Please try again.');
      return null;
    } finally {
      setIsLoading(false);
    }
  }), [uri, rotation, flipHorizontal, flipVertical, adjustments, maxWidth, maxHeight, quality]);
  return {
    uri: uri,
    isLoading: isLoading,
    adjustments: adjustments,
    rotation: rotation,
    flipHorizontal: flipHorizontal,
    flipVertical: flipVertical,
    updateAdjustment: updateAdjustment,
    setRotation: setRotation,
    setFlipHorizontal: setFlipHorizontal,
    setFlipVertical: setFlipVertical,
    applyFilter: applyFilter,
    resetAdjustments: resetAdjustments,
    saveImage: saveImage,
    rotateLeft: rotateLeft,
    rotateRight: rotateRight
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,