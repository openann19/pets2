f88c025a2fa43a99dc7d5c7efc254649
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactNative = require("react-native");
var _index = require("./index");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var NOOP = function NOOP() {};
var NOOP_FACTORY = function NOOP_FACTORY() {
  return NOOP;
};
var ID = function ID(t) {
  return t;
};
var IMMEDIATE_CALLBACK_INVOCATION = function IMMEDIATE_CALLBACK_INVOCATION(callback) {
  return callback();
};
var hook = {
  useAnimatedProps: IMMEDIATE_CALLBACK_INVOCATION,
  useEvent: function useEvent(_handler, _eventNames, _rebuild) {
    return NOOP;
  },
  useWorkletCallback: ID,
  useSharedValue: function useSharedValue(init) {
    var value = {
      value: init
    };
    return new Proxy(value, {
      get: function get(target, prop) {
        if (prop === 'value') {
          return target.value;
        }
        if (prop === 'get') {
          return function () {
            return target.value;
          };
        }
        if (prop === 'set') {
          return function (newValue) {
            if (typeof newValue === 'function') {
              target.value = newValue(target.value);
            } else {
              target.value = newValue;
            }
          };
        }
      },
      set: function set(target, prop, newValue) {
        if (prop === 'value') {
          target.value = newValue;
          return true;
        }
        return false;
      }
    });
  },
  useAnimatedStyle: IMMEDIATE_CALLBACK_INVOCATION,
  useAnimatedGestureHandler: NOOP_FACTORY,
  useAnimatedReaction: NOOP,
  useAnimatedRef: function useAnimatedRef() {
    return {
      current: null
    };
  },
  useAnimatedScrollHandler: NOOP_FACTORY,
  useDerivedValue: function useDerivedValue(processor) {
    var result = processor();
    return {
      value: result,
      get: function get() {
        return result;
      }
    };
  },
  useAnimatedSensor: function useAnimatedSensor() {
    return {
      sensor: {
        value: {
          x: 0,
          y: 0,
          z: 0,
          interfaceOrientation: 0,
          qw: 0,
          qx: 0,
          qy: 0,
          qz: 0,
          yaw: 0,
          pitch: 0,
          roll: 0
        }
      },
      unregister: NOOP,
      isAvailable: false,
      config: {
        interval: 0,
        adjustToInterfaceOrientation: false,
        iosReferenceFrame: 0
      }
    };
  },
  useAnimatedKeyboard: function useAnimatedKeyboard() {
    return {
      height: 0,
      state: 0
    };
  }
};
var animation = {
  cancelAnimation: NOOP,
  withDecay: function withDecay(_userConfig, callback) {
    callback == null ? void 0 : callback(true);
    return 0;
  },
  withDelay: function withDelay(_delayMs, nextAnimation) {
    return nextAnimation;
  },
  withRepeat: ID,
  withSequence: function withSequence() {
    return 0;
  },
  withSpring: function withSpring(toValue, _userConfig, callback) {
    callback == null ? void 0 : callback(true);
    return toValue;
  },
  withTiming: function withTiming(toValue, _userConfig, callback) {
    callback == null ? void 0 : callback(true);
    return toValue;
  }
};
var interpolation = {
  Extrapolation: _index.Extrapolation,
  interpolate: NOOP,
  clamp: NOOP
};
var interpolateColor = {
  Extrapolate: _index.Extrapolation,
  Extrapolation: _index.Extrapolation,
  ColorSpace: _index.ColorSpace,
  interpolateColor: NOOP
};
var Easing = {
  Easing: {
    linear: ID,
    ease: ID,
    quad: ID,
    cubic: ID,
    poly: ID,
    sin: ID,
    circle: ID,
    exp: ID,
    elastic: ID,
    back: ID,
    bounce: ID,
    bezier: function bezier() {
      return {
        factory: ID
      };
    },
    bezierFn: ID,
    steps: ID,
    in: ID,
    out: ID,
    inOut: ID
  }
};
var platformFunctions = {
  measure: function measure() {
    return {
      x: 0,
      y: 0,
      width: 0,
      height: 0,
      pageX: 0,
      pageY: 0
    };
  },
  scrollTo: NOOP
};
var Colors = {
  processColor: _reactNative.processColor
};
var PropAdapters = {};
var BaseAnimationMock = function () {
  function BaseAnimationMock() {
    (0, _classCallCheck2.default)(this, BaseAnimationMock);
  }
  return (0, _createClass2.default)(BaseAnimationMock, [{
    key: "duration",
    value: function duration() {
      return this;
    }
  }, {
    key: "delay",
    value: function delay() {
      return this;
    }
  }, {
    key: "springify",
    value: function springify() {
      return this;
    }
  }, {
    key: "damping",
    value: function damping() {
      return this;
    }
  }, {
    key: "stiffness",
    value: function stiffness() {
      return this;
    }
  }, {
    key: "withCallback",
    value: function withCallback() {
      return this;
    }
  }, {
    key: "randomDelay",
    value: function randomDelay() {
      return this;
    }
  }, {
    key: "withInitialValues",
    value: function withInitialValues() {
      return this;
    }
  }, {
    key: "easing",
    value: function easing(_) {
      return this;
    }
  }, {
    key: "rotate",
    value: function rotate(_) {
      return this;
    }
  }, {
    key: "mass",
    value: function mass(_) {
      return this;
    }
  }, {
    key: "restDisplacementThreshold",
    value: function restDisplacementThreshold(_) {
      return this;
    }
  }, {
    key: "restSpeedThreshold",
    value: function restSpeedThreshold(_) {
      return this;
    }
  }, {
    key: "overshootClamping",
    value: function overshootClamping(_) {
      return this;
    }
  }, {
    key: "dampingRatio",
    value: function dampingRatio(_) {
      return this;
    }
  }, {
    key: "getDelay",
    value: function getDelay() {
      return 0;
    }
  }, {
    key: "getDelayFunction",
    value: function getDelayFunction() {
      return NOOP;
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 300;
    }
  }, {
    key: "getReduceMotion",
    value: function getReduceMotion() {
      return _index.ReduceMotion.System;
    }
  }, {
    key: "getAnimationAndConfig",
    value: function getAnimationAndConfig() {
      return [NOOP, {}];
    }
  }, {
    key: "build",
    value: function build() {
      return function () {
        return {
          initialValues: {},
          animations: {}
        };
      };
    }
  }, {
    key: "reduceMotion",
    value: function reduceMotion() {
      return this;
    }
  }]);
}();
var core = {
  runOnJS: ID,
  runOnUI: ID,
  createWorkletRuntime: NOOP,
  runOnRuntime: NOOP,
  makeMutable: ID,
  makeShareableCloneRecursive: ID,
  isReanimated3: function isReanimated3() {
    return true;
  },
  enableLayoutAnimations: NOOP
};
var layoutReanimation = {
  BaseAnimationBuilder: new BaseAnimationMock(),
  ComplexAnimationBuilder: new BaseAnimationMock(),
  Keyframe: new BaseAnimationMock(),
  FlipInXUp: new BaseAnimationMock(),
  FlipInYLeft: new BaseAnimationMock(),
  FlipInXDown: new BaseAnimationMock(),
  FlipInYRight: new BaseAnimationMock(),
  FlipInEasyX: new BaseAnimationMock(),
  FlipInEasyY: new BaseAnimationMock(),
  FlipOutXUp: new BaseAnimationMock(),
  FlipOutYLeft: new BaseAnimationMock(),
  FlipOutXDown: new BaseAnimationMock(),
  FlipOutYRight: new BaseAnimationMock(),
  FlipOutEasyX: new BaseAnimationMock(),
  FlipOutEasyY: new BaseAnimationMock(),
  StretchInX: new BaseAnimationMock(),
  StretchInY: new BaseAnimationMock(),
  StretchOutX: new BaseAnimationMock(),
  StretchOutY: new BaseAnimationMock(),
  FadeIn: new BaseAnimationMock(),
  FadeInRight: new BaseAnimationMock(),
  FadeInLeft: new BaseAnimationMock(),
  FadeInUp: new BaseAnimationMock(),
  FadeInDown: new BaseAnimationMock(),
  FadeOut: new BaseAnimationMock(),
  FadeOutRight: new BaseAnimationMock(),
  FadeOutLeft: new BaseAnimationMock(),
  FadeOutUp: new BaseAnimationMock(),
  FadeOutDown: new BaseAnimationMock(),
  SlideInRight: new BaseAnimationMock(),
  SlideInLeft: new BaseAnimationMock(),
  SlideOutRight: new BaseAnimationMock(),
  SlideOutLeft: new BaseAnimationMock(),
  SlideInUp: new BaseAnimationMock(),
  SlideInDown: new BaseAnimationMock(),
  SlideOutUp: new BaseAnimationMock(),
  SlideOutDown: new BaseAnimationMock(),
  ZoomIn: new BaseAnimationMock(),
  ZoomInRotate: new BaseAnimationMock(),
  ZoomInLeft: new BaseAnimationMock(),
  ZoomInRight: new BaseAnimationMock(),
  ZoomInUp: new BaseAnimationMock(),
  ZoomInDown: new BaseAnimationMock(),
  ZoomInEasyUp: new BaseAnimationMock(),
  ZoomInEasyDown: new BaseAnimationMock(),
  ZoomOut: new BaseAnimationMock(),
  ZoomOutRotate: new BaseAnimationMock(),
  ZoomOutLeft: new BaseAnimationMock(),
  ZoomOutRight: new BaseAnimationMock(),
  ZoomOutUp: new BaseAnimationMock(),
  ZoomOutDown: new BaseAnimationMock(),
  ZoomOutEasyUp: new BaseAnimationMock(),
  ZoomOutEasyDown: new BaseAnimationMock(),
  BounceIn: new BaseAnimationMock(),
  BounceInDown: new BaseAnimationMock(),
  BounceInUp: new BaseAnimationMock(),
  BounceInLeft: new BaseAnimationMock(),
  BounceInRight: new BaseAnimationMock(),
  BounceOut: new BaseAnimationMock(),
  BounceOutDown: new BaseAnimationMock(),
  BounceOutUp: new BaseAnimationMock(),
  BounceOutLeft: new BaseAnimationMock(),
  BounceOutRight: new BaseAnimationMock(),
  LightSpeedInRight: new BaseAnimationMock(),
  LightSpeedInLeft: new BaseAnimationMock(),
  LightSpeedOutRight: new BaseAnimationMock(),
  LightSpeedOutLeft: new BaseAnimationMock(),
  PinwheelIn: new BaseAnimationMock(),
  PinwheelOut: new BaseAnimationMock(),
  RotateInDownLeft: new BaseAnimationMock(),
  RotateInDownRight: new BaseAnimationMock(),
  RotateInUpLeft: new BaseAnimationMock(),
  RotateInUpRight: new BaseAnimationMock(),
  RotateOutDownLeft: new BaseAnimationMock(),
  RotateOutDownRight: new BaseAnimationMock(),
  RotateOutUpLeft: new BaseAnimationMock(),
  RotateOutUpRight: new BaseAnimationMock(),
  RollInLeft: new BaseAnimationMock(),
  RollInRight: new BaseAnimationMock(),
  RollOutLeft: new BaseAnimationMock(),
  RollOutRight: new BaseAnimationMock(),
  Layout: new BaseAnimationMock(),
  LinearTransition: new BaseAnimationMock(),
  FadingTransition: new BaseAnimationMock(),
  SequencedTransition: new BaseAnimationMock(),
  JumpingTransition: new BaseAnimationMock(),
  CurvedTransition: new BaseAnimationMock(),
  EntryExitTransition: new BaseAnimationMock(),
  SharedTransitionType: _index.SharedTransitionType
};
var isSharedValue = {};
var commonTypes = {
  SensorType: _index.SensorType,
  IOSReferenceFrame: _index.IOSReferenceFrame,
  InterfaceOrientation: _index.InterfaceOrientation,
  KeyboardState: _index.KeyboardState,
  ReduceMotion: _index.ReduceMotion
};
var pluginUtils = {};
var jestUtils = {
  withReanimatedTimer: _index.withReanimatedTimer,
  advanceAnimationByTime: _index.advanceAnimationByTime,
  advanceAnimationByFrame: _index.advanceAnimationByFrame,
  setUpTests: _index.setUpTests,
  getAnimatedStyle: _index.getAnimatedStyle
};
var LayoutAnimationConfig = {};
var mappers = {};
var Animated = {
  View: _reactNative.View,
  Text: _reactNative.Text,
  Image: _reactNative.Image,
  ScrollView: _reactNative.Animated.ScrollView,
  FlatList: _reactNative.Animated.FlatList,
  Extrapolate: _index.Extrapolation,
  interpolate: NOOP,
  interpolateColor: NOOP,
  clamp: NOOP,
  createAnimatedComponent: ID,
  addWhitelistedUIProps: NOOP,
  addWhitelistedNativeProps: NOOP
};
var Reanimated = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, core), hook), animation), interpolation), interpolateColor), Easing), platformFunctions), Colors), PropAdapters), layoutReanimation), isSharedValue), commonTypes), pluginUtils), jestUtils), LayoutAnimationConfig), mappers);
module.exports = _objectSpread(_objectSpread({
  __esModule: true
}, Reanimated), {}, {
  default: Animated
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,