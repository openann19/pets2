{"version":3,"names":["ImageManipulator","_interopRequireWildcard","require","_TiledUpscaler","_Unsharp","_logger4","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","BicubicAdapter","name","available","_available","_asyncToGenerator2","apply","arguments","upscale","_upscale","uri","targetW","targetH","opts","length","undefined","_opts$sharpen","sharpen","useTiles","_opts$pickBest","pickBest","shouldUseTiles","result","tileUpscaleAuto","Math","round","tile","overlap","quality","format","manipResult","manipulateAsync","resize","width","height","compress","SaveFormat","JPEG","unsharpMask","amount","radius","threshold","error","err","Error","String","_yield$import","Promise","resolve","then","logger","warn","_x","_x2","_x3","ServerAdapter","_available2","__DEV__","_upscale2","_x4","_x5","_x6","LocalTFLiteAdapter","_available3","_unused","_upscale3","_x7","_x8","_x9","ADAPTERS","SuperRes","exports","_upscale4","adapter","_yield$import2","info","dimensions","_yield$import3","_x0","_x1","_x10","_x11","adapters","getActiveAdapter","_getActiveAdapter"],"sources":["SuperRes.ts"],"sourcesContent":["/**\n * Super-Resolution Pipeline with Pluggable Adapters\n * Supports multiple backends with graceful fallback to bicubic\n */\n\nimport * as ImageManipulator from \"expo-image-manipulator\";\nimport { Platform } from \"react-native\";\nimport { tileUpscaleAuto } from \"./TiledUpscaler\";\nimport { unsharpMask } from \"./Unsharp\";\nimport { logger } from \"../services/logger\";\n\nexport interface SuperResAdapter {\n  name: string;\n  available(): Promise<boolean>;\n  upscale(uri: string, targetW: number, targetH: number, opts?: SuperResOptions): Promise<string>;\n}\n\nexport interface SuperResOptions {\n  /** Apply unsharp mask after upscale (default: true) */\n  sharpen?: boolean;\n  /** Use tile-based upscaling for large images (default: true for 4K+) */\n  useTiles?: boolean;\n  /** Apply quality scoring to pick sharpest result */\n  pickBest?: boolean;\n}\n\n/**\n * Fallback bicubic upscaler (always available via ImageManipulator)\n * This uses expo-image-manipulator's resize which implements decent bicubic interpolation\n */\nconst BicubicAdapter: SuperResAdapter = {\n  name: \"bicubic\",\n  async available() {\n    return true;\n  },\n  async upscale(uri, targetW, targetH, opts = {}) {\n    const { sharpen = true, useTiles, pickBest = false } = opts;\n    \n    // Use tile-based upscaling for large images (4K+)\n    const shouldUseTiles = useTiles ?? (targetW >= 1920 || targetH >= 1920);\n    \n    let result: string;\n    if (shouldUseTiles) {\n      result = await tileUpscaleAuto(uri, {\n        targetW: Math.round(targetW),\n        targetH: Math.round(targetH),\n        tile: 1024,\n        overlap: 12,\n        quality: 1,\n        format: \"jpg\",\n      });\n    } else {\n      const manipResult = await ImageManipulator.manipulateAsync(\n        uri,\n        [{ resize: { width: Math.round(targetW), height: Math.round(targetH) } }],\n        { compress: 1, format: ImageManipulator.SaveFormat.JPEG }\n      );\n      result = manipResult.uri;\n    }\n    \n    // Apply unsharp mask if requested\n    if (sharpen) {\n      try {\n        result = await unsharpMask(result, {\n          amount: 0.6,\n          radius: 1.2,\n          threshold: 0.02,\n          quality: 1,\n          format: \"jpg\",\n        });\n      } catch (error: unknown) {\n        const err = error instanceof Error ? error : new Error(String(error));\n        const { logger } = await import('../services/logger');\n        logger.warn('SuperRes: Unsharp mask failed', { error: err });\n      }\n    }\n    \n    return result;\n  },\n};\n\n/**\n * Optional: Server ESRGAN / Real-ESRGAN (HTTP)\n * This adapter calls your backend API for AI-powered upscaling\n * Toggle available() return value when backend is ready\n */\nconst ServerAdapter: SuperResAdapter = {\n  name: \"server-esrgan\",\n  async available() {\n    // Flip to true when your backend upscaler endpoint is ready\n    // You can also check environment variables, feature flags, etc.\n    if (__DEV__) {\n      return false; // Disable in dev until backend is ready\n    }\n    return false; // Set to true when production endpoint is ready\n  },\n  async upscale(uri, targetW, targetH, opts = {}) {\n    // TODO: Replace with your actual backend endpoint\n    // Example implementation:\n    // const formData = new FormData();\n    // formData.append('image', { uri, name: 'image.jpg', type: 'image/jpeg' });\n    // formData.append('targetW', targetW.toString());\n    // formData.append('targetH', targetH.toString());\n    //\n    // const res = await fetch('https://your-backend.com/api/upscale', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Authorization': `Bearer ${await getAuthToken()}`,\n    //   },\n    //   body: formData,\n    // });\n    //\n    // if (!res.ok) throw new Error(`Upscale failed: ${res.statusText}`);\n    // const { upscaledUrl } = await res.json();\n    // return upscaledUrl;\n\n    // Fallback (should never be called if available=false)\n    return uri;\n  },\n};\n\n/**\n * Optional: On-device TFLite adapter\n * This would use TensorFlow Lite mobile models for AI upscaling on device\n * Requires react-native-tflite or similar bridge\n */\nconst LocalTFLiteAdapter: SuperResAdapter = {\n  name: \"tflite-esrgan\",\n  async available() {\n    // Set to true when TFLite bridge is integrated\n    try {\n      // Example check:\n      // const TFModule = require('react-native-tflite');\n      // return TFModule.isReady();\n      return false;\n    } catch {\n      return false;\n    }\n  },\n  async upscale(uri, targetW, targetH, opts = {}) {\n    // Example implementation:\n    // const TFModule = require('react-native-tflite');\n    // const input = await ImageManipulator.manipulateAsync(uri, [], { format: ImageManipulator.SaveFormat.PNG });\n    // const output = await TFModule.upscale(input.uri, targetW, targetH);\n    // return output.uri;\n\n    // Fallback\n    return uri;\n  },\n};\n\n// Priority order: try TFLite first (fastest), then server (highest quality), then bicubic (always works)\nconst ADAPTERS: SuperResAdapter[] = [LocalTFLiteAdapter, ServerAdapter, BicubicAdapter];\n\nexport const SuperRes = {\n  /**\n   * Upscale image to target dimensions using the best available backend\n   * Always resolves (Bicubic adapter is always available as fallback)\n   * @param uri - Source image URI\n   * @param targetW - Target width in pixels\n   * @param targetH - Target height in pixels\n   * @param opts - Super-resolution options\n   * @returns URI of upscaled image\n   */\n  async upscale(uri: string, targetW: number, targetH: number, opts?: SuperResOptions): Promise<string> {\n    for (const adapter of ADAPTERS) {\n      if (await adapter.available()) {\n        try {\n          const { logger } = await import('../services/logger');\n        logger.info('SuperRes: Using adapter for upscaling', { adapter: adapter.name, dimensions: `${targetW}x${targetH}` });\n          const result = await adapter.upscale(uri, targetW, targetH, opts);\n          return result;\n        } catch (error: unknown) {\n          const err = error instanceof Error ? error : new Error(String(error));\n          const { logger } = await import('../services/logger');\n          logger.warn(`SuperRes: ${adapter.name} failed, trying fallback`, { error: err });\n          // Continue to next adapter on error\n        }\n      }\n    }\n    \n    // This should never be reached since BicubicAdapter is always available\n    logger.error(\"[SuperRes] All adapters failed, returning original URI\");\n    return uri;\n  },\n\n  /**\n   * Get list of all adapters (for debugging/monitoring)\n   */\n  adapters: ADAPTERS,\n\n  /**\n   * Check which adapter would be used for next upscale\n   * Useful for UI indicators\n   */\n  async getActiveAdapter(): Promise<string> {\n    for (const adapter of ADAPTERS) {\n      if (await adapter.available()) {\n        return adapter.name;\n      }\n    }\n    return \"none\";\n  },\n};\n\n"],"mappings":"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","ignoreList":[]}