6eb4947b598bcfb742d23b9f614052f7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSettingsScreen = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var _gdprService = _interopRequireDefault(require("../../services/gdprService"));
var useSettingsScreen = exports.useSettingsScreen = function useSettingsScreen() {
  var _useAuthStore = (0, _core.useAuthStore)(),
    logout = _useAuthStore.logout,
    user = _useAuthStore.user;
  var _useState = (0, _react.useState)({
      email: true,
      push: true,
      matches: true,
      messages: true
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    notifications = _useState2[0],
    setNotifications = _useState2[1];
  var _useState3 = (0, _react.useState)({
      maxDistance: 50,
      ageRange: {
        min: 0,
        max: 30
      },
      species: [],
      intents: []
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    preferences = _useState4[0],
    setPreferences = _useState4[1];
  var _useState5 = (0, _react.useState)({
      isPending: false,
      daysRemaining: null
    }),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    deletionStatus = _useState6[0],
    setDeletionStatus = _useState6[1];
  (0, _react.useEffect)(function () {
    var checkDeletionStatus = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        try {
          var status = yield _gdprService.default.getAccountStatus();
          if (status.success && status.status === 'pending') {
            var _status$daysRemaining;
            setDeletionStatus({
              isPending: true,
              daysRemaining: (_status$daysRemaining = status.daysRemaining) != null ? _status$daysRemaining : null
            });
          } else {
            setDeletionStatus({
              isPending: false,
              daysRemaining: null
            });
          }
        } catch (error) {
          _core.logger.error("Failed to check deletion status:", {
            error: error
          });
        }
      });
      return function checkDeletionStatus() {
        return _ref.apply(this, arguments);
      };
    }();
    void checkDeletionStatus();
  }, []);
  var handleLogout = (0, _react.useCallback)(function () {
    _reactNative.Alert.alert("Logout", "Are you sure you want to logout?", [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Logout",
      style: "destructive",
      onPress: function onPress() {
        logout();
      }
    }]);
  }, [logout]);
  var handleDeleteAccount = (0, _react.useCallback)(function () {
    _reactNative.Alert.prompt("Delete Account", "Enter your password to confirm account deletion.\n\nYour account will be deleted in 30 days unless you cancel.", [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Delete",
      style: "destructive",
      onPress: function () {
        var _onPress = (0, _asyncToGenerator2.default)(function* (password) {
          if (!password) {
            _reactNative.Alert.alert("Error", "Password is required to delete your account.");
            return;
          }
          try {
            var response = yield _gdprService.default.deleteAccount({
              password: password,
              reason: "User requested from settings"
            });
            if (response.success) {
              setDeletionStatus({
                isPending: true,
                daysRemaining: 30
              });
              _reactNative.Alert.alert("Account Deletion Requested", "Your account will be deleted in 30 days. You can cancel this anytime from settings.");
            } else {
              _reactNative.Alert.alert("Error", response.message || "Failed to delete account.");
            }
          } catch (error) {
            _core.logger.error("Failed to request account deletion:", {
              error: error
            });
            _reactNative.Alert.alert("Error", "Failed to delete account. Please try again.");
          }
        });
        function onPress(_x) {
          return _onPress.apply(this, arguments);
        }
        return onPress;
      }()
    }], "secure-text");
  }, []);
  var handleExportData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      var response = yield _gdprService.default.exportUserData();
      if (response.success && response.exportData) {
        _reactNative.Alert.alert("Data Export Ready", `Your data export is ready! Export ID: ${response.exportId}. You will receive an email when it's available for download.`);
      } else {
        _reactNative.Alert.alert("Export Started", response.message || "Your data export is being prepared.");
      }
    } catch (error) {
      _core.logger.error("Failed to export data:", {
        error: error
      });
      _reactNative.Alert.alert("Error", "Failed to export data. Please try again.");
    }
  }), []);
  var handleExportDataComplete = (0, _react.useCallback)(function () {
    _reactNative.Alert.alert("Export Complete", "Your data has been exported successfully.");
  }, []);
  return {
    notifications: notifications,
    preferences: preferences,
    deletionStatus: deletionStatus,
    setNotifications: setNotifications,
    setPreferences: setPreferences,
    handleLogout: handleLogout,
    handleDeleteAccount: handleDeleteAccount,
    handleExportData: handleExportData,
    handleExportDataComplete: handleExportDataComplete
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,