98b2ae50a1fa4ae3d6998360f0e27d27
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../../services/homeAPI", function () {
  return {
    homeAPI: {
      getHomeData: _globals.jest.fn(),
      getActivityFeed: _globals.jest.fn(),
      getRecommendations: _globals.jest.fn(),
      markActivityRead: _globals.jest.fn(),
      getQuickActions: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../../../services/analyticsService", function () {
  return {
    analyticsService: {
      trackEvent: _globals.jest.fn(),
      trackScreenView: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../../../hooks/useColorScheme", function () {
  return {
    useColorScheme: _globals.jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useHomeScreen = require("../useHomeScreen");
var _homeAPI = require("../../../services/homeAPI");
var _analyticsService = require("../../../services/analyticsService");
var _useColorScheme = require("../../../hooks/useColorScheme");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockHomeAPI = _homeAPI.homeAPI;
var mockAnalyticsService = _analyticsService.analyticsService;
var mockUseColorScheme = _useColorScheme.useColorScheme;
var mockAsyncStorage = _asyncStorage.default;
(0, _globals.describe)('useHomeScreen', function () {
  var mockHomeData = {
    user: {
      id: 'user123',
      name: 'John Doe',
      profileImage: 'profile.jpg',
      isPremium: true
    },
    stats: {
      matchesToday: 3,
      messagesUnread: 5,
      profileViews: 12,
      superLikes: 2
    },
    recommendations: [{
      id: 'pet1',
      name: 'Buddy',
      breed: 'Golden Retriever',
      distance: 2.5,
      images: ['buddy1.jpg', 'buddy2.jpg'],
      compatibilityScore: 85
    }, {
      id: 'pet2',
      name: 'Luna',
      breed: 'Siamese Cat',
      distance: 1.8,
      images: ['luna1.jpg'],
      compatibilityScore: 92
    }],
    quickActions: [{
      id: 'boost_profile',
      title: 'Boost Profile',
      icon: 'rocket',
      action: 'boost',
      available: true
    }, {
      id: 'view_likes',
      title: 'View Likes',
      icon: 'heart',
      action: 'navigate',
      available: true
    }]
  };
  var mockActivityFeed = [{
    id: 'activity1',
    type: 'match',
    title: 'New Match!',
    description: 'You matched with Buddy',
    timestamp: new Date(Date.now() - 3600000),
    isRead: false,
    data: {
      matchId: 'match123'
    }
  }, {
    id: 'activity2',
    type: 'message',
    title: 'New Message',
    description: 'Luna sent you a message',
    timestamp: new Date(Date.now() - 7200000),
    isRead: true,
    data: {
      chatId: 'chat456'
    }
  }];
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockHomeAPI.getHomeData.mockResolvedValue(mockHomeData);
    mockHomeAPI.getActivityFeed.mockResolvedValue(mockActivityFeed);
    mockHomeAPI.getQuickActions.mockResolvedValue(mockHomeData.quickActions);
    mockUseColorScheme.mockReturnValue('light');
    mockAnalyticsService.trackScreenView.mockResolvedValue(undefined);
  });
  (0, _globals.describe)('Initial State and Data Loading', function () {
    (0, _globals.it)('should initialize with loading state', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.isLoading).toBe(true);
      (0, _globals.expect)(result.current.homeData).toBeNull();
      (0, _globals.expect)(result.current.activityFeed).toEqual([]);
      (0, _globals.expect)(result.current.error).toBeNull();
    });
    (0, _globals.it)('should load home data on mount', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.homeData).toEqual(mockHomeData);
      (0, _globals.expect)(result.current.activityFeed).toEqual(mockActivityFeed);
      (0, _globals.expect)(mockHomeAPI.getHomeData).toHaveBeenCalled();
      (0, _globals.expect)(mockHomeAPI.getActivityFeed).toHaveBeenCalled();
      (0, _globals.expect)(mockAnalyticsService.trackScreenView).toHaveBeenCalledWith('HomeScreen');
    }));
    (0, _globals.it)('should load cached data when available', (0, _asyncToGenerator2.default)(function* () {
      var cachedData = {
        homeData: mockHomeData,
        activityFeed: mockActivityFeed,
        lastUpdated: Date.now() - 5 * 60 * 1000
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(cachedData));
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.homeData).toEqual(mockHomeData);
      });
      (0, _globals.expect)(mockHomeAPI.getHomeData).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should refresh expired cache', (0, _asyncToGenerator2.default)(function* () {
      var expiredCache = {
        homeData: mockHomeData,
        activityFeed: mockActivityFeed,
        lastUpdated: Date.now() - 30 * 60 * 1000
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(expiredCache));
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockHomeAPI.getHomeData).toHaveBeenCalled();
      });
    }));
  });
  (0, _globals.describe)('Data Refresh and Pull-to-Refresh', function () {
    (0, _globals.it)('should refresh data on demand', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$homeD;
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var updatedData = _objectSpread(_objectSpread({}, mockHomeData), {}, {
        stats: _objectSpread(_objectSpread({}, mockHomeData.stats), {}, {
          matchesToday: 5
        })
      });
      mockHomeAPI.getHomeData.mockResolvedValue(updatedData);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshData();
      }));
      (0, _globals.expect)((_result$current$homeD = result.current.homeData) == null ? void 0 : _result$current$homeD.stats.matchesToday).toBe(5);
      (0, _globals.expect)(mockHomeAPI.getHomeData).toHaveBeenCalledTimes(2);
    }));
    (0, _globals.it)('should handle refresh loading state', (0, _asyncToGenerator2.default)(function* () {
      var resolveRefresh;
      var refreshPromise = new Promise(function (resolve) {
        resolveRefresh = resolve;
      });
      mockHomeAPI.getHomeData.mockReturnValue(refreshPromise);
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.refreshData();
      });
      (0, _globals.expect)(result.current.isRefreshing).toBe(true);
      (0, _reactNative.act)(function () {
        resolveRefresh(mockHomeData);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isRefreshing).toBe(false);
      });
    }));
    (0, _globals.it)('should handle refresh errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockHomeAPI.getHomeData.mockRejectedValueOnce(new Error('Network error'));
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockHomeAPI.getHomeData.mockRejectedValueOnce(new Error('Refresh failed'));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshData();
      }));
      (0, _globals.expect)(result.current.error).toBe('Refresh failed');
      (0, _globals.expect)(result.current.homeData).toEqual(mockHomeData);
    }));
  });
  (0, _globals.describe)('Activity Feed Management', function () {
    (0, _globals.it)('should mark activity as read', (0, _asyncToGenerator2.default)(function* () {
      mockHomeAPI.markActivityRead.mockResolvedValue({
        success: true
      });
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.markActivityRead('activity1');
      }));
      (0, _globals.expect)(mockHomeAPI.markActivityRead).toHaveBeenCalledWith('activity1');
      var unreadActivity = result.current.activityFeed.find(function (a) {
        return a.id === 'activity1';
      });
      (0, _globals.expect)(unreadActivity == null ? void 0 : unreadActivity.isRead).toBe(true);
    }));
    (0, _globals.it)('should get unread activity count', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.getUnreadActivityCount()).toBe(1);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.markActivityRead('activity1');
      }));
      (0, _globals.expect)(result.current.getUnreadActivityCount()).toBe(0);
    }));
    (0, _globals.it)('should filter activities by type', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var matches = result.current.getActivitiesByType('match');
      var messages = result.current.getActivitiesByType('message');
      (0, _globals.expect)(matches).toHaveLength(1);
      (0, _globals.expect)(matches[0].type).toBe('match');
      (0, _globals.expect)(messages).toHaveLength(1);
      (0, _globals.expect)(messages[0].type).toBe('message');
    }));
  });
  (0, _globals.describe)('Quick Actions', function () {
    (0, _globals.it)('should load and provide quick actions', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook1.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.quickActions).toEqual(mockHomeData.quickActions);
    }));
    (0, _globals.it)('should execute quick actions', (0, _asyncToGenerator2.default)(function* () {
      var mockNavigate = _globals.jest.fn();
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook10.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.executeQuickAction(mockHomeData.quickActions[1], mockNavigate);
      }));
      (0, _globals.expect)(mockNavigate).toHaveBeenCalledWith('Likes');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.executeQuickAction(mockHomeData.quickActions[0], mockNavigate);
      }));
      (0, _globals.expect)(mockNavigate).toHaveBeenCalledTimes(1);
    }));
    (0, _globals.it)('should check action availability', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook11.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.isActionAvailable('boost_profile')).toBe(true);
      (0, _globals.expect)(result.current.isActionAvailable('unknown_action')).toBe(false);
    }));
  });
  (0, _globals.describe)('Recommendations', function () {
    (0, _globals.it)('should provide recommendations data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook12.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.recommendations).toEqual(mockHomeData.recommendations);
      (0, _globals.expect)(result.current.getTopRecommendations(1)).toEqual([mockHomeData.recommendations[1]]);
    }));
    (0, _globals.it)('should sort recommendations by compatibility', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook13.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var sorted = result.current.getRecommendationsSortedBy('compatibility');
      (0, _globals.expect)(sorted[0].compatibilityScore).toBeGreaterThanOrEqual(sorted[1].compatibilityScore);
    }));
    (0, _globals.it)('should sort recommendations by distance', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook14.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var sorted = result.current.getRecommendationsSortedBy('distance');
      (0, _globals.expect)(sorted[0].distance).toBeLessThanOrEqual(sorted[1].distance);
    }));
  });
  (0, _globals.describe)('User Stats and Analytics', function () {
    (0, _globals.it)('should provide user statistics', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.getUserStats()).toEqual(mockHomeData.stats);
      (0, _globals.expect)(result.current.hasNewMatches()).toBe(true);
      (0, _globals.expect)(result.current.hasUnreadMessages()).toBe(true);
      (0, _globals.expect)(result.current.getTotalEngagement()).toBe(22);
    }));
    (0, _globals.it)('should track user interactions', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('recommendation_tap', {
          petId: 'pet1'
        });
      });
      (0, _globals.expect)(mockAnalyticsService.trackEvent).toHaveBeenCalledWith('user_interaction', {
        element: 'recommendation_tap',
        action: 'tap',
        petId: 'pet1'
      }, 'user123');
    }));
  });
  (0, _globals.describe)('Real-time Updates', function () {
    (0, _globals.it)('should handle real-time activity updates', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var newActivity = {
        id: 'activity3',
        type: 'super_like',
        title: 'Super Like!',
        description: 'Someone super liked your pet',
        timestamp: new Date(),
        isRead: false,
        data: {
          petId: 'pet789'
        }
      };
      (0, _reactNative.act)(function () {
        result.current.addRealTimeActivity(newActivity);
      });
      (0, _globals.expect)(result.current.activityFeed).toContain(newActivity);
      (0, _globals.expect)(result.current.getUnreadActivityCount()).toBe(2);
    }));
    (0, _globals.it)('should update stats in real-time', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$homeD2, _result$current$homeD3;
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook18.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _reactNative.act)(function () {
        result.current.updateStats({
          messagesUnread: 10,
          superLikes: 5
        });
      });
      (0, _globals.expect)((_result$current$homeD2 = result.current.homeData) == null ? void 0 : _result$current$homeD2.stats.messagesUnread).toBe(10);
      (0, _globals.expect)((_result$current$homeD3 = result.current.homeData) == null ? void 0 : _result$current$homeD3.stats.superLikes).toBe(5);
    }));
  });
  (0, _globals.describe)('Cache Management', function () {
    (0, _globals.it)('should cache home data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook19.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('home_screen_cache', _globals.expect.any(String));
    }));
    (0, _globals.it)('should clear cache when requested', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook20.result;
      (0, _reactNative.act)(function () {
        result.current.homeData = mockHomeData;
        result.current.activityFeed = mockActivityFeed;
      });
      (0, _reactNative.act)(function () {
        result.current.clearCache();
      });
      (0, _globals.expect)(result.current.homeData).toBeNull();
      (0, _globals.expect)(result.current.activityFeed).toEqual([]);
      (0, _globals.expect)(mockAsyncStorage.removeItem).toHaveBeenCalledWith('home_screen_cache');
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle initial data loading errors', (0, _asyncToGenerator2.default)(function* () {
      mockHomeAPI.getHomeData.mockRejectedValue(new Error('API unavailable'));
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook21.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.error).toBe('API unavailable');
      (0, _globals.expect)(result.current.homeData).toBeNull();
    }));
    (0, _globals.it)('should handle activity feed loading errors', (0, _asyncToGenerator2.default)(function* () {
      mockHomeAPI.getActivityFeed.mockRejectedValue(new Error('Feed unavailable'));
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook22.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.activityFeed).toEqual([]);
      (0, _globals.expect)(result.current.homeData).toEqual(mockHomeData);
    }));
    (0, _globals.it)('should handle AsyncStorage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook23.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.homeData).toEqual(mockHomeData);
    }));
    (0, _globals.it)('should reset error state on successful operations', (0, _asyncToGenerator2.default)(function* () {
      mockHomeAPI.getHomeData.mockRejectedValueOnce(new Error('First error'));
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook24.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.error).toBe('First error');
      });
      mockHomeAPI.getHomeData.mockResolvedValueOnce(mockHomeData);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshData();
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.homeData).toEqual(mockHomeData);
    }));
  });
  (0, _globals.describe)('Performance and Analytics', function () {
    (0, _globals.it)('should track screen performance', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook25.result;
      (0, _reactNative.act)(function () {
        result.current.trackPerformance({
          loadTime: 1250,
          apiCalls: 3
        });
      });
      (0, _globals.expect)(mockAnalyticsService.trackEvent).toHaveBeenCalledWith('performance_metric', {
        loadTime: 1250,
        apiCalls: 3
      }, 'user123');
    }));
    (0, _globals.it)('should track user engagement metrics', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook26.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _reactNative.act)(function () {
        result.current.trackEngagement('recommendations_view', {
          count: 5
        });
      });
      (0, _globals.expect)(mockAnalyticsService.trackEvent).toHaveBeenCalledWith('user_engagement', {
        feature: 'recommendations_view',
        count: 5,
        timeSpent: _globals.expect.any(Number)
      }, 'user123');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty recommendations', (0, _asyncToGenerator2.default)(function* () {
      var emptyData = _objectSpread(_objectSpread({}, mockHomeData), {}, {
        recommendations: []
      });
      mockHomeAPI.getHomeData.mockResolvedValue(emptyData);
      var _renderHook27 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook27.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.recommendations).toEqual([]);
      (0, _globals.expect)(result.current.getTopRecommendations(5)).toEqual([]);
    }));
    (0, _globals.it)('should handle empty activity feed', (0, _asyncToGenerator2.default)(function* () {
      mockHomeAPI.getActivityFeed.mockResolvedValue([]);
      var _renderHook28 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook28.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.activityFeed).toEqual([]);
      (0, _globals.expect)(result.current.getUnreadActivityCount()).toBe(0);
    }));
    (0, _globals.it)('should handle missing user data', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$homeD4;
      var dataWithoutUser = _objectSpread({}, mockHomeData);
      delete dataWithoutUser.user;
      mockHomeAPI.getHomeData.mockResolvedValue(dataWithoutUser);
      var _renderHook29 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook29.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)((_result$current$homeD4 = result.current.homeData) == null ? void 0 : _result$current$homeD4.user).toBeUndefined();
    }));
    (0, _globals.it)('should handle very large datasets', (0, _asyncToGenerator2.default)(function* () {
      var largeRecommendations = Array.from({
        length: 100
      }, function (_, i) {
        return {
          id: `pet${i}`,
          name: `Pet ${i}`,
          breed: 'Mixed',
          distance: Math.random() * 50,
          images: [`pet${i}.jpg`],
          compatibilityScore: Math.floor(Math.random() * 100)
        };
      });
      var largeData = _objectSpread(_objectSpread({}, mockHomeData), {}, {
        recommendations: largeRecommendations
      });
      mockHomeAPI.getHomeData.mockResolvedValue(largeData);
      var _renderHook30 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook30.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.recommendations).toHaveLength(100);
      (0, _globals.expect)(result.current.getTopRecommendations(10)).toHaveLength(10);
    }));
    (0, _globals.it)('should handle malformed cached data', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('{invalid json}');
      var _renderHook31 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook31.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.homeData).toEqual(mockHomeData);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,