4f7907ad6599563e226fae8e053a34c7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _PeekSheet = require("../PeekSheet");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var mockPet = {
  _id: 'pet1',
  name: 'Buddy',
  age: 3,
  breed: 'Golden Retriever',
  photos: [{
    url: 'photo1.jpg',
    order: 1
  }, {
    url: 'photo2.jpg',
    order: 2
  }],
  description: 'Friendly and playful',
  owner: 'user1',
  species: 'dog',
  createdAt: new Date(),
  updatedAt: new Date()
};
describe('PeekSheet', function () {
  describe('Rendering', function () {
    it('should render nothing when show is false', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: false
        })),
        container = _render.container;
      expect(container).toBeTruthy();
    });
    it('should render nothing when nextPet is undefined', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: undefined,
          show: true
        })),
        container = _render2.container;
      expect(container).toBeTruthy();
    });
    it('should render nothing when nextPet is null', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: null,
          show: true
        })),
        container = _render3.container;
      expect(container).toBeTruthy();
    });
    it('should render when show is true and nextPet is provided', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getByType = _render4.UNSAFE_getByType;
      var container = UNSAFE_getByType('Animated.View');
      expect(container).toBeTruthy();
    });
  });
  describe('Animation', function () {
    it('should animate scale on show', (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: false
        })),
        UNSAFE_getByType = _render5.UNSAFE_getByType,
        rerender = _render5.rerender;
      rerender((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
        nextPet: mockPet,
        show: true
      }));
      yield (0, _reactNative.waitFor)(function () {
        var animatedView = UNSAFE_getByType('Animated.View');
        expect(animatedView).toBeTruthy();
      });
      jest.useRealTimers();
    }));
    it('should animate opacity on show', (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: false
        })),
        UNSAFE_getByType = _render6.UNSAFE_getByType,
        rerender = _render6.rerender;
      rerender((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
        nextPet: mockPet,
        show: true
      }));
      yield (0, _reactNative.waitFor)(function () {
        var animatedView = UNSAFE_getByType('Animated.View');
        expect(animatedView).toBeTruthy();
      });
      jest.useRealTimers();
    }));
    it('should use spring animation', (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getByType = _render7.UNSAFE_getByType;
      var animatedView = UNSAFE_getByType('Animated.View');
      expect(animatedView).toBeTruthy();
      jest.useRealTimers();
    }));
  });
  describe('Pet Data Display', function () {
    it('should display next pet name', (0, _asyncToGenerator2.default)(function* () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        findByText = _render8.findByText;
      yield (0, _reactNative.waitFor)((0, _asyncToGenerator2.default)(function* () {
        var card = yield findByText('Buddy');
        expect(card).toBeTruthy();
      }));
    }));
    it('should handle pets with no photos', function () {
      var petWithoutPhotos = _objectSpread(_objectSpread({}, mockPet), {}, {
        photos: []
      });
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: petWithoutPhotos,
          show: true
        })),
        container = _render9.container;
      expect(container).toBeTruthy();
    });
    it('should handle pets with single photo', function () {
      var petWithOnePhoto = _objectSpread(_objectSpread({}, mockPet), {}, {
        photos: [{
          url: 'photo1.jpg',
          order: 1
        }]
      });
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: petWithOnePhoto,
          show: true
        })),
        container = _render0.container;
      expect(container).toBeTruthy();
    });
    it('should handle pets with many photos', function () {
      var petWithManyPhotos = _objectSpread(_objectSpread({}, mockPet), {}, {
        photos: Array.from({
          length: 10
        }, function (_, i) {
          return {
            url: `photo${i}.jpg`,
            order: i + 1
          };
        })
      });
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: petWithManyPhotos,
          show: true
        })),
        container = _render1.container;
      expect(container).toBeTruthy();
    });
  });
  describe('Positioning', function () {
    it('should position at bottom of screen', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getByType = _render10.UNSAFE_getByType;
      var container = UNSAFE_getByType('Animated.View');
      expect(container).toBeTruthy();
    });
    it('should have correct z-index for layering', function () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getByType = _render11.UNSAFE_getByType;
      var container = UNSAFE_getByType('Animated.View');
      expect(container).toBeTruthy();
    });
    it('should center horizontally', function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getByType = _render12.UNSAFE_getByType;
      var animatedView = UNSAFE_getByType('Animated.View');
      expect(animatedView).toBeTruthy();
    });
  });
  describe('Interaction', function () {
    it('should not be interactive (pointerEvents="none")', function () {
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getByType = _render13.UNSAFE_getByType;
      var container = UNSAFE_getByType('View');
      var hasPointerEvents = container.props.style.some(function (style) {
        return style && style.pointerEvents === 'none';
      });
      expect(hasPointerEvents).toBeTruthy();
    });
    it('should disable card interactions', (0, _asyncToGenerator2.default)(function* () {
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getByType = _render14.UNSAFE_getByType;
      yield (0, _reactNative.waitFor)(function () {
        var animatedView = UNSAFE_getByType('Animated.View');
        expect(animatedView).toBeTruthy();
      });
    }));
  });
  describe('Visual Indicator', function () {
    it('should show peek indicator', function () {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getAllByType = _render15.UNSAFE_getAllByType;
      var indicators = UNSAFE_getAllByType('View');
      var hasIndicator = indicators.some(function (view) {
        var _view$props$style;
        return (_view$props$style = view.props.style) == null ? void 0 : _view$props$style.some(function (style) {
          return (style == null ? void 0 : style.position) === 'absolute';
        });
      });
      expect(hasIndicator).toBeTruthy();
    });
  });
  describe('Edge Cases', function () {
    it('should handle undefined pet gracefully', function () {
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: undefined,
          show: true
        }));
      }).not.toThrow();
    });
    it('should handle missing pet properties', function () {
      var incompletePet = {
        _id: 'pet1',
        name: 'Buddy'
      };
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: incompletePet,
          show: true
        }));
      }).not.toThrow();
    });
    it('should handle rapid show/hide toggles', function () {
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: false
        })),
        rerender = _render16.rerender;
      rerender((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
        nextPet: mockPet,
        show: true
      }));
      rerender((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
        nextPet: mockPet,
        show: false
      }));
      rerender((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
        nextPet: mockPet,
        show: true
      }));
      expect(function () {}).not.toThrow();
    });
    it('should handle pet change during animation', function () {
      var newPet = _objectSpread(_objectSpread({}, mockPet), {}, {
        name: 'Max',
        _id: 'pet2'
      });
      var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        rerender = _render17.rerender;
      rerender((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
        nextPet: newPet,
        show: true
      }));
      rerender((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
        nextPet: undefined,
        show: true
      }));
      rerender((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
        nextPet: mockPet,
        show: true
      }));
      expect(function () {}).not.toThrow();
    });
    it('should unmount cleanly', function () {
      var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        unmount = _render18.unmount;
      expect(function () {
        unmount();
      }).not.toThrow();
    });
  });
  describe('Performance', function () {
    it('should not re-render unnecessarily', function () {
      var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        rerender = _render19.rerender;
      rerender((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
        nextPet: mockPet,
        show: true
      }));
      expect(function () {}).not.toThrow();
    });
    it('should handle multiple peek sheets simultaneously', function () {
      var _render20 = (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [(0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
            nextPet: mockPet,
            show: true
          }), (0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
            nextPet: mockPet,
            show: false
          })]
        })),
        container = _render20.container;
      expect(container).toBeTruthy();
    });
  });
  describe('Integration', function () {
    it('should work within swipe screen context', function () {
      var _render21 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        container = _render21.container;
      expect(container).toBeTruthy();
    });
    it('should coordinate with card stack', function () {
      var _render22 = (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [(0, _jsxRuntime.jsx)(View, {
            testID: "card-stack"
          }), (0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
            nextPet: mockPet,
            show: true
          })]
        })),
        container = _render22.container;
      expect(container).toBeTruthy();
    });
  });
  describe('Accessibility', function () {
    it('should have pointerEvents="none" for accessibility', function () {
      var _render23 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getAllByType = _render23.UNSAFE_getAllByType;
      var views = UNSAFE_getAllByType('View');
      var mainContainer = views.find(function (view) {
        var _view$props$style2;
        return (_view$props$style2 = view.props.style) == null ? void 0 : _view$props$style2.some(function (style) {
          return (style == null ? void 0 : style.pointerEvents) === 'none';
        });
      });
      expect(mainContainer).toBeTruthy();
    });
  });
  describe('Styling', function () {
    it('should have correct card dimensions', function () {
      var _render24 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getByType = _render24.UNSAFE_getByType;
      var container = UNSAFE_getByType('View');
      expect(container).toBeTruthy();
    });
    it('should apply correct border radius', function () {
      var _render25 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getAllByType = _render25.UNSAFE_getAllByType;
      var views = UNSAFE_getAllByType('View');
      expect(views.length).toBeGreaterThan(0);
    });
    it('should have shadow/elevation effects', function () {
      var _render26 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PeekSheet.PeekSheet, {
          nextPet: mockPet,
          show: true
        })),
        UNSAFE_getAllByType = _render26.UNSAFE_getAllByType;
      var views = UNSAFE_getAllByType('View');
      expect(views.length).toBeGreaterThan(0);
    });
  });
});
var View = function View(_ref7) {
  var testID = _ref7.testID,
    children = _ref7.children;
  return children;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,