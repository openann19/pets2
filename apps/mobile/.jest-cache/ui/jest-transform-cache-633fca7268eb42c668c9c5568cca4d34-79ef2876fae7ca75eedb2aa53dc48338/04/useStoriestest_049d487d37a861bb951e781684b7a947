03730237211bd3198f59a7a409846da7
"use strict";

_getJestObj().mock("@tanstack/react-query", function () {
  return {
    useQuery: jest.fn(function () {
      return {
        data: mockStoryGroups,
        isLoading: false,
        error: null,
        refetch: mockRefetch
      };
    }),
    useMutation: jest.fn(function () {
      return {
        mutate: jest.fn(),
        mutateAsync: mockMutateAsync
      };
    })
  };
});
_getJestObj().mock("../../../useSocket", function () {
  return {
    useSocket: function useSocket() {
      return mockSocket;
    }
  };
});
_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    ImpactFeedbackStyle: {
      Light: "light",
      Medium: "medium"
    }
  };
});
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useStories = require("../useStories");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRefetch = jest.fn();
var mockMutateAsync = jest.fn();
var mockSocket = {
  on: jest.fn(),
  off: jest.fn(),
  emit: jest.fn()
};
var mockStoryGroups = [{
  userId: "user1",
  user: {
    _id: "user1",
    username: "alice",
    profilePhoto: "photo1.jpg"
  },
  stories: [{
    _id: "story1",
    userId: "user1",
    mediaType: "photo",
    mediaUrl: "story1.jpg",
    duration: 5,
    viewCount: 10,
    createdAt: new Date().toISOString()
  }, {
    _id: "story2",
    userId: "user1",
    mediaType: "video",
    mediaUrl: "story2.mp4",
    duration: 10,
    viewCount: 5,
    createdAt: new Date().toISOString()
  }],
  storyCount: 2
}, {
  userId: "user2",
  user: {
    _id: "user2",
    username: "bob"
  },
  stories: [{
    _id: "story3",
    userId: "user2",
    mediaType: "photo",
    mediaUrl: "story3.jpg",
    duration: 5,
    viewCount: 20,
    createdAt: new Date().toISOString()
  }],
  storyCount: 1
}];
describe("useStories", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it("should initialize with default state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook.result;
    expect(result.current.currentGroupIndex).toBe(0);
    expect(result.current.currentStoryIndex).toBe(0);
    expect(result.current.isPaused).toBe(false);
    expect(result.current.isMuted).toBe(false);
    expect(result.current.progress).toBe(0);
  });
  it("should provide story data", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook2.result;
    expect(result.current.storyGroups).toEqual(mockStoryGroups);
    expect(result.current.currentGroup).toEqual(mockStoryGroups[0]);
    expect(result.current.currentStory).toEqual(mockStoryGroups[0].stories[0]);
  });
  it("should navigate to next story in same group", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.goToNextStory();
    });
    expect(result.current.currentGroupIndex).toBe(0);
    expect(result.current.currentStoryIndex).toBe(1);
    expect(result.current.currentStory).toEqual(mockStoryGroups[0].stories[1]);
  });
  it("should navigate to next group when stories end", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)(0);
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.goToStory(0, 1);
    });
    expect(result.current.currentStoryIndex).toBe(1);
    (0, _reactNative.act)(function () {
      result.current.goToNextStory();
    });
    expect(result.current.currentGroupIndex).toBe(1);
    expect(result.current.currentStoryIndex).toBe(0);
    expect(result.current.currentStory).toEqual(mockStoryGroups[1].stories[0]);
  });
  it("should navigate to previous story", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.goToNextStory();
    });
    expect(result.current.currentStoryIndex).toBe(1);
    (0, _reactNative.act)(function () {
      result.current.goToPreviousStory();
    });
    expect(result.current.currentStoryIndex).toBe(0);
  });
  it("should navigate to previous group when at start of stories", function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)(1);
      }),
      result = _renderHook6.result;
    expect(result.current.currentGroupIndex).toBe(1);
    (0, _reactNative.act)(function () {
      result.current.goToPreviousStory();
    });
    expect(result.current.currentGroupIndex).toBe(0);
    expect(result.current.currentStoryIndex).toBe(1);
  });
  it("should navigate to specific group", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.goToGroup(1);
    });
    expect(result.current.currentGroupIndex).toBe(1);
    expect(result.current.currentStoryIndex).toBe(0);
    expect(result.current.currentGroup).toEqual(mockStoryGroups[1]);
  });
  it("should navigate to specific story", function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook8.result;
    (0, _reactNative.act)(function () {
      result.current.goToStory(0, 1);
    });
    expect(result.current.currentGroupIndex).toBe(0);
    expect(result.current.currentStoryIndex).toBe(1);
    expect(result.current.currentStory).toEqual(mockStoryGroups[0].stories[1]);
  });
  it("should pause and unpause playback", function () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook9.result;
    (0, _reactNative.act)(function () {
      result.current.setPaused(true);
    });
    expect(result.current.isPaused).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.setPaused(false);
    });
    expect(result.current.isPaused).toBe(false);
  });
  it("should toggle mute state", function () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook0.result;
    (0, _reactNative.act)(function () {
      result.current.setMuted(true);
    });
    expect(result.current.isMuted).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.setMuted(false);
    });
    expect(result.current.isMuted).toBe(false);
  });
  it("should mark story as viewed", (0, _asyncToGenerator2.default)(function* () {
    mockMutateAsync.mockResolvedValue({
      success: true,
      viewCount: 15
    });
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.markAsViewed("story1");
    }));
    expect(mockMutateAsync).toHaveBeenCalledWith("story1");
  }));
  it("should refresh stories", (0, _asyncToGenerator2.default)(function* () {
    mockRefetch.mockResolvedValue({
      data: mockStoryGroups
    });
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.refreshStories();
    }));
    expect(mockRefetch).toHaveBeenCalled();
  }));
  it("should handle socket events for view updates", function () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook11.result;
    expect(mockSocket.on).toHaveBeenCalledWith("story:viewed", expect.any(Function));
  });
  it("should reset progress when navigating", function () {
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook12.result;
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(2000);
    });
    (0, _reactNative.act)(function () {
      result.current.goToNextStory();
    });
    expect(result.current.progress).toBe(0);
  });
  it("should provide timer refs", function () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook13.result;
    expect(result.current.timerRef).toBeDefined();
    expect(result.current.progressIntervalRef).toBeDefined();
    expect(result.current.longPressTimer).toBeDefined();
  });
  it("should not navigate beyond last story", function () {
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)(1);
      }),
      result = _renderHook14.result;
    expect(result.current.currentGroupIndex).toBe(1);
    expect(result.current.currentStoryIndex).toBe(0);
    (0, _reactNative.act)(function () {
      result.current.goToNextStory();
    });
    expect(result.current.currentGroupIndex).toBe(1);
    expect(result.current.currentStoryIndex).toBe(0);
  });
  it("should return stable function references", function () {
    var _renderHook15 = (0, _reactNative.renderHook)(function () {
        return (0, _useStories.useStories)();
      }),
      result = _renderHook15.result,
      rerender = _renderHook15.rerender;
    var firstGoToNextStory = result.current.goToNextStory;
    var firstSetPaused = result.current.setPaused;
    rerender();
    expect(result.current.goToNextStory).toBe(firstGoToNextStory);
    expect(result.current.setPaused).toBe(firstSetPaused);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VRdWVyeSIsImplc3QiLCJmbiIsImRhdGEiLCJtb2NrU3RvcnlHcm91cHMiLCJpc0xvYWRpbmciLCJlcnJvciIsInJlZmV0Y2giLCJtb2NrUmVmZXRjaCIsInVzZU11dGF0aW9uIiwibXV0YXRlIiwibXV0YXRlQXN5bmMiLCJtb2NrTXV0YXRlQXN5bmMiLCJ1c2VTb2NrZXQiLCJtb2NrU29ja2V0IiwiaW1wYWN0QXN5bmMiLCJQcm9taXNlIiwicmVzb2x2ZSIsIkltcGFjdEZlZWRiYWNrU3R5bGUiLCJMaWdodCIsIk1lZGl1bSIsImxvZ2dlciIsImluZm8iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdE5hdGl2ZSIsIl91c2VTdG9yaWVzIiwiX3JlcXVpcmUiLCJvbiIsIm9mZiIsImVtaXQiLCJ1c2VySWQiLCJ1c2VyIiwiX2lkIiwidXNlcm5hbWUiLCJwcm9maWxlUGhvdG8iLCJzdG9yaWVzIiwibWVkaWFUeXBlIiwibWVkaWFVcmwiLCJkdXJhdGlvbiIsInZpZXdDb3VudCIsImNyZWF0ZWRBdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInN0b3J5Q291bnQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwidXNlRmFrZVRpbWVycyIsImFmdGVyRWFjaCIsInJ1bk9ubHlQZW5kaW5nVGltZXJzIiwidXNlUmVhbFRpbWVycyIsIml0IiwiX3JlbmRlckhvb2siLCJyZW5kZXJIb29rIiwidXNlU3RvcmllcyIsInJlc3VsdCIsImV4cGVjdCIsImN1cnJlbnQiLCJjdXJyZW50R3JvdXBJbmRleCIsInRvQmUiLCJjdXJyZW50U3RvcnlJbmRleCIsImlzUGF1c2VkIiwiaXNNdXRlZCIsInByb2dyZXNzIiwiX3JlbmRlckhvb2syIiwic3RvcnlHcm91cHMiLCJ0b0VxdWFsIiwiY3VycmVudEdyb3VwIiwiY3VycmVudFN0b3J5IiwiX3JlbmRlckhvb2szIiwiYWN0IiwiZ29Ub05leHRTdG9yeSIsIl9yZW5kZXJIb29rNCIsImdvVG9TdG9yeSIsIl9yZW5kZXJIb29rNSIsImdvVG9QcmV2aW91c1N0b3J5IiwiX3JlbmRlckhvb2s2IiwiX3JlbmRlckhvb2s3IiwiZ29Ub0dyb3VwIiwiX3JlbmRlckhvb2s4IiwiX3JlbmRlckhvb2s5Iiwic2V0UGF1c2VkIiwiX3JlbmRlckhvb2swIiwic2V0TXV0ZWQiLCJkZWZhdWx0IiwibW9ja1Jlc29sdmVkVmFsdWUiLCJzdWNjZXNzIiwiX3JlbmRlckhvb2sxIiwibWFya0FzVmlld2VkIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJfcmVuZGVySG9vazEwIiwicmVmcmVzaFN0b3JpZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlckhvb2sxMSIsImFueSIsIkZ1bmN0aW9uIiwiX3JlbmRlckhvb2sxMiIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJfcmVuZGVySG9vazEzIiwidGltZXJSZWYiLCJ0b0JlRGVmaW5lZCIsInByb2dyZXNzSW50ZXJ2YWxSZWYiLCJsb25nUHJlc3NUaW1lciIsIl9yZW5kZXJIb29rMTQiLCJfcmVuZGVySG9vazE1IiwicmVyZW5kZXIiLCJmaXJzdEdvVG9OZXh0U3RvcnkiLCJmaXJzdFNldFBhdXNlZCJdLCJzb3VyY2VzIjpbInVzZVN0b3JpZXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBqZXN0LWVudmlyb25tZW50IGpzZG9tXG4gKi9cbmltcG9ydCB7IHJlbmRlckhvb2ssIGFjdCwgd2FpdEZvciB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgdXNlU3RvcmllcyB9IGZyb20gXCIuLi91c2VTdG9yaWVzXCI7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5jb25zdCBtb2NrUmVmZXRjaCA9IGplc3QuZm4oKTtcbmNvbnN0IG1vY2tNdXRhdGVBc3luYyA9IGplc3QuZm4oKTtcbmNvbnN0IG1vY2tTb2NrZXQgPSB7XG4gIG9uOiBqZXN0LmZuKCksXG4gIG9mZjogamVzdC5mbigpLFxuICBlbWl0OiBqZXN0LmZuKCksXG59O1xuXG5qZXN0Lm1vY2soXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIiwgKCkgPT4gKHtcbiAgdXNlUXVlcnk6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBkYXRhOiBtb2NrU3RvcnlHcm91cHMsXG4gICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICBlcnJvcjogbnVsbCxcbiAgICByZWZldGNoOiBtb2NrUmVmZXRjaCxcbiAgfSkpLFxuICB1c2VNdXRhdGlvbjogamVzdC5mbigoKSA9PiAoe1xuICAgIG11dGF0ZTogamVzdC5mbigpLFxuICAgIG11dGF0ZUFzeW5jOiBtb2NrTXV0YXRlQXN5bmMsXG4gIH0pKSxcbn0pKTtcblxuamVzdC5tb2NrKFwiLi4vLi4vLi4vdXNlU29ja2V0XCIsICgpID0+ICh7XG4gIHVzZVNvY2tldDogKCkgPT4gbW9ja1NvY2tldCxcbn0pKTtcblxuamVzdC5tb2NrKFwiZXhwby1oYXB0aWNzXCIsICgpID0+ICh7XG4gIGltcGFjdEFzeW5jOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcbiAgSW1wYWN0RmVlZGJhY2tTdHlsZToge1xuICAgIExpZ2h0OiBcImxpZ2h0XCIsXG4gICAgTWVkaXVtOiBcIm1lZGl1bVwiLFxuICB9LFxufSkpO1xuXG5qZXN0Lm1vY2soXCJAcGF3ZmVjdG1hdGNoL2NvcmVcIiwgKCkgPT4gKHtcbiAgbG9nZ2VyOiB7XG4gICAgaW5mbzogamVzdC5mbigpLFxuICAgIGVycm9yOiBqZXN0LmZuKCksXG4gIH0sXG59KSk7XG5cbmNvbnN0IG1vY2tTdG9yeUdyb3VwcyA9IFtcbiAge1xuICAgIHVzZXJJZDogXCJ1c2VyMVwiLFxuICAgIHVzZXI6IHtcbiAgICAgIF9pZDogXCJ1c2VyMVwiLFxuICAgICAgdXNlcm5hbWU6IFwiYWxpY2VcIixcbiAgICAgIHByb2ZpbGVQaG90bzogXCJwaG90bzEuanBnXCIsXG4gICAgfSxcbiAgICBzdG9yaWVzOiBbXG4gICAgICB7XG4gICAgICAgIF9pZDogXCJzdG9yeTFcIixcbiAgICAgICAgdXNlcklkOiBcInVzZXIxXCIsXG4gICAgICAgIG1lZGlhVHlwZTogXCJwaG90b1wiIGFzIGNvbnN0LFxuICAgICAgICBtZWRpYVVybDogXCJzdG9yeTEuanBnXCIsXG4gICAgICAgIGR1cmF0aW9uOiA1LFxuICAgICAgICB2aWV3Q291bnQ6IDEwLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIF9pZDogXCJzdG9yeTJcIixcbiAgICAgICAgdXNlcklkOiBcInVzZXIxXCIsXG4gICAgICAgIG1lZGlhVHlwZTogXCJ2aWRlb1wiIGFzIGNvbnN0LFxuICAgICAgICBtZWRpYVVybDogXCJzdG9yeTIubXA0XCIsXG4gICAgICAgIGR1cmF0aW9uOiAxMCxcbiAgICAgICAgdmlld0NvdW50OiA1LFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdG9yeUNvdW50OiAyLFxuICB9LFxuICB7XG4gICAgdXNlcklkOiBcInVzZXIyXCIsXG4gICAgdXNlcjoge1xuICAgICAgX2lkOiBcInVzZXIyXCIsXG4gICAgICB1c2VybmFtZTogXCJib2JcIixcbiAgICB9LFxuICAgIHN0b3JpZXM6IFtcbiAgICAgIHtcbiAgICAgICAgX2lkOiBcInN0b3J5M1wiLFxuICAgICAgICB1c2VySWQ6IFwidXNlcjJcIixcbiAgICAgICAgbWVkaWFUeXBlOiBcInBob3RvXCIgYXMgY29uc3QsXG4gICAgICAgIG1lZGlhVXJsOiBcInN0b3J5My5qcGdcIixcbiAgICAgICAgZHVyYXRpb246IDUsXG4gICAgICAgIHZpZXdDb3VudDogMjAsXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0b3J5Q291bnQ6IDEsXG4gIH0sXG5dO1xuXG5kZXNjcmliZShcInVzZVN0b3JpZXNcIiwgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJ1bk9ubHlQZW5kaW5nVGltZXJzKCk7XG4gICAgamVzdC51c2VSZWFsVGltZXJzKCk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGluaXRpYWxpemUgd2l0aCBkZWZhdWx0IHN0YXRlXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yaWVzKCkpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmN1cnJlbnRHcm91cEluZGV4KS50b0JlKDApO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50U3RvcnlJbmRleCkudG9CZSgwKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNQYXVzZWQpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc011dGVkKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucHJvZ3Jlc3MpLnRvQmUoMCk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHByb3ZpZGUgc3RvcnkgZGF0YVwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU3RvcmllcygpKTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zdG9yeUdyb3VwcykudG9FcXVhbChtb2NrU3RvcnlHcm91cHMpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50R3JvdXApLnRvRXF1YWwobW9ja1N0b3J5R3JvdXBzWzBdKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY3VycmVudFN0b3J5KS50b0VxdWFsKG1vY2tTdG9yeUdyb3Vwc1swXS5zdG9yaWVzWzBdKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgbmF2aWdhdGUgdG8gbmV4dCBzdG9yeSBpbiBzYW1lIGdyb3VwXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yaWVzKCkpO1xuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50LmdvVG9OZXh0U3RvcnkoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50R3JvdXBJbmRleCkudG9CZSgwKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY3VycmVudFN0b3J5SW5kZXgpLnRvQmUoMSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmN1cnJlbnRTdG9yeSkudG9FcXVhbChtb2NrU3RvcnlHcm91cHNbMF0uc3Rvcmllc1sxXSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIG5hdmlnYXRlIHRvIG5leHQgZ3JvdXAgd2hlbiBzdG9yaWVzIGVuZFwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU3RvcmllcygwKSk7XG5cbiAgICAvLyBHbyB0byBsYXN0IHN0b3J5IG9mIGZpcnN0IGdyb3VwXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50LmdvVG9TdG9yeSgwLCAxKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50U3RvcnlJbmRleCkudG9CZSgxKTtcblxuICAgIC8vIE5hdmlnYXRlIHRvIG5leHQgKHNob3VsZCBtb3ZlIHRvIG5leHQgZ3JvdXApXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50LmdvVG9OZXh0U3RvcnkoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50R3JvdXBJbmRleCkudG9CZSgxKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY3VycmVudFN0b3J5SW5kZXgpLnRvQmUoMCk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmN1cnJlbnRTdG9yeSkudG9FcXVhbChtb2NrU3RvcnlHcm91cHNbMV0uc3Rvcmllc1swXSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIG5hdmlnYXRlIHRvIHByZXZpb3VzIHN0b3J5XCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yaWVzKCkpO1xuXG4gICAgLy8gR28gdG8gc2Vjb25kIHN0b3J5XG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50LmdvVG9OZXh0U3RvcnkoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50U3RvcnlJbmRleCkudG9CZSgxKTtcblxuICAgIC8vIEdvIGJhY2tcbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuZ29Ub1ByZXZpb3VzU3RvcnkoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50U3RvcnlJbmRleCkudG9CZSgwKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgbmF2aWdhdGUgdG8gcHJldmlvdXMgZ3JvdXAgd2hlbiBhdCBzdGFydCBvZiBzdG9yaWVzXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yaWVzKDEpKTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50R3JvdXBJbmRleCkudG9CZSgxKTtcblxuICAgIC8vIEdvIHRvIHByZXZpb3VzIChzaG91bGQgbW92ZSB0byBwcmV2aW91cyBncm91cCwgbGFzdCBzdG9yeSlcbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuZ29Ub1ByZXZpb3VzU3RvcnkoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50R3JvdXBJbmRleCkudG9CZSgwKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY3VycmVudFN0b3J5SW5kZXgpLnRvQmUoMSk7IC8vIExhc3Qgc3Rvcnkgb2YgcHJldmlvdXMgZ3JvdXBcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgbmF2aWdhdGUgdG8gc3BlY2lmaWMgZ3JvdXBcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVN0b3JpZXMoKSk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuZ29Ub0dyb3VwKDEpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmN1cnJlbnRHcm91cEluZGV4KS50b0JlKDEpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50U3RvcnlJbmRleCkudG9CZSgwKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY3VycmVudEdyb3VwKS50b0VxdWFsKG1vY2tTdG9yeUdyb3Vwc1sxXSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIG5hdmlnYXRlIHRvIHNwZWNpZmljIHN0b3J5XCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yaWVzKCkpO1xuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50LmdvVG9TdG9yeSgwLCAxKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50R3JvdXBJbmRleCkudG9CZSgwKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY3VycmVudFN0b3J5SW5kZXgpLnRvQmUoMSk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmN1cnJlbnRTdG9yeSkudG9FcXVhbChtb2NrU3RvcnlHcm91cHNbMF0uc3Rvcmllc1sxXSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHBhdXNlIGFuZCB1bnBhdXNlIHBsYXliYWNrXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yaWVzKCkpO1xuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50LnNldFBhdXNlZCh0cnVlKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc1BhdXNlZCkudG9CZSh0cnVlKTtcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5zZXRQYXVzZWQoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzUGF1c2VkKS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgdG9nZ2xlIG11dGUgc3RhdGVcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVN0b3JpZXMoKSk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0TXV0ZWQodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNNdXRlZCkudG9CZSh0cnVlKTtcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5zZXRNdXRlZChmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNNdXRlZCkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIG1hcmsgc3RvcnkgYXMgdmlld2VkXCIsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrTXV0YXRlQXN5bmMubW9ja1Jlc29sdmVkVmFsdWUoeyBzdWNjZXNzOiB0cnVlLCB2aWV3Q291bnQ6IDE1IH0pO1xuXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU3RvcmllcygpKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5tYXJrQXNWaWV3ZWQoXCJzdG9yeTFcIik7XG4gICAgfSk7XG5cbiAgICBleHBlY3QobW9ja011dGF0ZUFzeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcInN0b3J5MVwiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcmVmcmVzaCBzdG9yaWVzXCIsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrUmVmZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IG1vY2tTdG9yeUdyb3VwcyB9KTtcblxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVN0b3JpZXMoKSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQucmVmcmVzaFN0b3JpZXMoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrUmVmZXRjaCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBoYW5kbGUgc29ja2V0IGV2ZW50cyBmb3IgdmlldyB1cGRhdGVzXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yaWVzKCkpO1xuXG4gICAgZXhwZWN0KG1vY2tTb2NrZXQub24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgXCJzdG9yeTp2aWV3ZWRcIixcbiAgICAgIGV4cGVjdC5hbnkoRnVuY3Rpb24pLFxuICAgICk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHJlc2V0IHByb2dyZXNzIHdoZW4gbmF2aWdhdGluZ1wiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU3RvcmllcygpKTtcblxuICAgIC8vIFNldCBzb21lIHByb2dyZXNzXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgyMDAwKTtcbiAgICB9KTtcblxuICAgIC8vIE5hdmlnYXRlXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50LmdvVG9OZXh0U3RvcnkoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wcm9ncmVzcykudG9CZSgwKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcHJvdmlkZSB0aW1lciByZWZzXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yaWVzKCkpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRpbWVyUmVmKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wcm9ncmVzc0ludGVydmFsUmVmKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5sb25nUHJlc3NUaW1lcikudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgbm90IG5hdmlnYXRlIGJleW9uZCBsYXN0IHN0b3J5XCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yaWVzKDEpKTtcblxuICAgIC8vIEdvIHRvIGxhc3Qgc3Rvcnkgb2YgbGFzdCBncm91cFxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50R3JvdXBJbmRleCkudG9CZSgxKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY3VycmVudFN0b3J5SW5kZXgpLnRvQmUoMCk7XG5cbiAgICAvLyBUcnkgdG8gZ28gbmV4dCAoc2hvdWxkIHN0YXkgYXQgc2FtZSBwb3NpdGlvbilcbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuZ29Ub05leHRTdG9yeSgpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmN1cnJlbnRHcm91cEluZGV4KS50b0JlKDEpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jdXJyZW50U3RvcnlJbmRleCkudG9CZSgwKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcmV0dXJuIHN0YWJsZSBmdW5jdGlvbiByZWZlcmVuY2VzXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCwgcmVyZW5kZXIgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU3RvcmllcygpKTtcblxuICAgIGNvbnN0IGZpcnN0R29Ub05leHRTdG9yeSA9IHJlc3VsdC5jdXJyZW50LmdvVG9OZXh0U3Rvcnk7XG4gICAgY29uc3QgZmlyc3RTZXRQYXVzZWQgPSByZXN1bHQuY3VycmVudC5zZXRQYXVzZWQ7XG5cbiAgICByZXJlbmRlcigpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmdvVG9OZXh0U3RvcnkpLnRvQmUoZmlyc3RHb1RvTmV4dFN0b3J5KTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2V0UGF1c2VkKS50b0JlKGZpcnN0U2V0UGF1c2VkKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFlQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsdUJBQXVCLEVBQUU7RUFBQSxPQUFPO0lBQ3hDQyxRQUFRLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTztRQUN2QkMsSUFBSSxFQUFFQyxlQUFlO1FBQ3JCQyxTQUFTLEVBQUUsS0FBSztRQUNoQkMsS0FBSyxFQUFFLElBQUk7UUFDWEMsT0FBTyxFQUFFQztNQUNYLENBQUM7SUFBQSxDQUFDLENBQUM7SUFDSEMsV0FBVyxFQUFFUixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDMUJRLE1BQU0sRUFBRVQsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUNqQlMsV0FBVyxFQUFFQztNQUNmLENBQUM7SUFBQSxDQUFDO0VBQ0osQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVIZCxXQUFBLEdBQUtDLElBQUksdUJBQXVCO0VBQUEsT0FBTztJQUNyQ2MsU0FBUyxFQUFFLFNBQVhBLFNBQVNBLENBQUE7TUFBQSxPQUFRQyxVQUFVO0lBQUE7RUFDN0IsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVIaEIsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFO0VBQUEsT0FBTztJQUMvQmdCLFdBQVcsRUFBRWQsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNYyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQUEsRUFBQztJQUM3Q0MsbUJBQW1CLEVBQUU7TUFDbkJDLEtBQUssRUFBRSxPQUFPO01BQ2RDLE1BQU0sRUFBRTtJQUNWO0VBQ0YsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVIdEIsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7RUFBQSxPQUFPO0lBQ3JDc0IsTUFBTSxFQUFFO01BQ05DLElBQUksRUFBRXJCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDZkksS0FBSyxFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNqQjtFQUNGLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBcUIsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUExQ0osSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBQTJDLFNBQUExQixZQUFBO0VBQUEsSUFBQThCLFFBQUEsR0FBQUosT0FBQTtJQUFBdkIsSUFBQSxHQUFBMkIsUUFBQSxDQUFBM0IsSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFHM0MsSUFBTU8sV0FBVyxHQUFHUCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0FBQzdCLElBQU1VLGVBQWUsR0FBR1gsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztBQUNqQyxJQUFNWSxVQUFVLEdBQUc7RUFDakJlLEVBQUUsRUFBRTVCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDYjRCLEdBQUcsRUFBRTdCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDZDZCLElBQUksRUFBRTlCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0FBQ2hCLENBQUM7QUFrQ0QsSUFBTUUsZUFBZSxHQUFHLENBQ3RCO0VBQ0U0QixNQUFNLEVBQUUsT0FBTztFQUNmQyxJQUFJLEVBQUU7SUFDSkMsR0FBRyxFQUFFLE9BQU87SUFDWkMsUUFBUSxFQUFFLE9BQU87SUFDakJDLFlBQVksRUFBRTtFQUNoQixDQUFDO0VBQ0RDLE9BQU8sRUFBRSxDQUNQO0lBQ0VILEdBQUcsRUFBRSxRQUFRO0lBQ2JGLE1BQU0sRUFBRSxPQUFPO0lBQ2ZNLFNBQVMsRUFBRSxPQUFnQjtJQUMzQkMsUUFBUSxFQUFFLFlBQVk7SUFDdEJDLFFBQVEsRUFBRSxDQUFDO0lBQ1hDLFNBQVMsRUFBRSxFQUFFO0lBQ2JDLFNBQVMsRUFBRSxJQUFJQyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUM7RUFDcEMsQ0FBQyxFQUNEO0lBQ0VWLEdBQUcsRUFBRSxRQUFRO0lBQ2JGLE1BQU0sRUFBRSxPQUFPO0lBQ2ZNLFNBQVMsRUFBRSxPQUFnQjtJQUMzQkMsUUFBUSxFQUFFLFlBQVk7SUFDdEJDLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFNBQVMsRUFBRSxDQUFDO0lBQ1pDLFNBQVMsRUFBRSxJQUFJQyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUM7RUFDcEMsQ0FBQyxDQUNGO0VBQ0RDLFVBQVUsRUFBRTtBQUNkLENBQUMsRUFDRDtFQUNFYixNQUFNLEVBQUUsT0FBTztFQUNmQyxJQUFJLEVBQUU7SUFDSkMsR0FBRyxFQUFFLE9BQU87SUFDWkMsUUFBUSxFQUFFO0VBQ1osQ0FBQztFQUNERSxPQUFPLEVBQUUsQ0FDUDtJQUNFSCxHQUFHLEVBQUUsUUFBUTtJQUNiRixNQUFNLEVBQUUsT0FBTztJQUNmTSxTQUFTLEVBQUUsT0FBZ0I7SUFDM0JDLFFBQVEsRUFBRSxZQUFZO0lBQ3RCQyxRQUFRLEVBQUUsQ0FBQztJQUNYQyxTQUFTLEVBQUUsRUFBRTtJQUNiQyxTQUFTLEVBQUUsSUFBSUMsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDO0VBQ3BDLENBQUMsQ0FDRjtFQUNEQyxVQUFVLEVBQUU7QUFDZCxDQUFDLENBQ0Y7QUFFREMsUUFBUSxDQUFDLFlBQVksRUFBRSxZQUFNO0VBQzNCQyxVQUFVLENBQUMsWUFBTTtJQUNmOUMsSUFBSSxDQUFDK0MsYUFBYSxDQUFDLENBQUM7SUFDcEIvQyxJQUFJLENBQUNnRCxhQUFhLENBQUMsQ0FBQztFQUN0QixDQUFDLENBQUM7RUFFRkMsU0FBUyxDQUFDLFlBQU07SUFDZGpELElBQUksQ0FBQ2tELG9CQUFvQixDQUFDLENBQUM7SUFDM0JsRCxJQUFJLENBQUNtRCxhQUFhLENBQUMsQ0FBQztFQUN0QixDQUFDLENBQUM7RUFFRkMsRUFBRSxDQUFDLHNDQUFzQyxFQUFFLFlBQU07SUFDL0MsSUFBQUMsV0FBQSxHQUFtQixJQUFBQyx1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxzQkFBVSxFQUFDLENBQUM7TUFBQSxFQUFDO01BQXpDQyxNQUFNLEdBQUFILFdBQUEsQ0FBTkcsTUFBTTtJQUVkQyxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hESCxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDRyxpQkFBaUIsQ0FBQyxDQUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hESCxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDSSxRQUFRLENBQUMsQ0FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUMzQ0gsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDLENBQUNILElBQUksQ0FBQyxLQUFLLENBQUM7SUFDMUNILE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNNLFFBQVEsQ0FBQyxDQUFDSixJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ3pDLENBQUMsQ0FBQztFQUVGUixFQUFFLENBQUMsMkJBQTJCLEVBQUUsWUFBTTtJQUNwQyxJQUFBYSxZQUFBLEdBQW1CLElBQUFYLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLHNCQUFVLEVBQUMsQ0FBQztNQUFBLEVBQUM7TUFBekNDLE1BQU0sR0FBQVMsWUFBQSxDQUFOVCxNQUFNO0lBRWRDLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNRLFdBQVcsQ0FBQyxDQUFDQyxPQUFPLENBQUNoRSxlQUFlLENBQUM7SUFDM0RzRCxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDVSxZQUFZLENBQUMsQ0FBQ0QsT0FBTyxDQUFDaEUsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9Ec0QsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ1csWUFBWSxDQUFDLENBQUNGLE9BQU8sQ0FBQ2hFLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQ2lDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM1RSxDQUFDLENBQUM7RUFFRmdCLEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxZQUFNO0lBQ3RELElBQUFrQixZQUFBLEdBQW1CLElBQUFoQix1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxzQkFBVSxFQUFDLENBQUM7TUFBQSxFQUFDO01BQXpDQyxNQUFNLEdBQUFjLFlBQUEsQ0FBTmQsTUFBTTtJQUVkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtNQUNSZixNQUFNLENBQUNFLE9BQU8sQ0FBQ2MsYUFBYSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0lBRUZmLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNDLGlCQUFpQixDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaERILE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNHLGlCQUFpQixDQUFDLENBQUNELElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaERILE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNXLFlBQVksQ0FBQyxDQUFDRixPQUFPLENBQUNoRSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUNpQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUUsQ0FBQyxDQUFDO0VBRUZnQixFQUFFLENBQUMsZ0RBQWdELEVBQUUsWUFBTTtJQUN6RCxJQUFBcUIsWUFBQSxHQUFtQixJQUFBbkIsdUJBQVUsRUFBQztRQUFBLE9BQU0sSUFBQUMsc0JBQVUsRUFBQyxDQUFDLENBQUM7TUFBQSxFQUFDO01BQTFDQyxNQUFNLEdBQUFpQixZQUFBLENBQU5qQixNQUFNO0lBR2QsSUFBQWUsZ0JBQUcsRUFBQyxZQUFNO01BQ1JmLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDZ0IsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0lBRUZqQixNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDRyxpQkFBaUIsQ0FBQyxDQUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBR2hELElBQUFXLGdCQUFHLEVBQUMsWUFBTTtNQUNSZixNQUFNLENBQUNFLE9BQU8sQ0FBQ2MsYUFBYSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0lBRUZmLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNDLGlCQUFpQixDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaERILE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNHLGlCQUFpQixDQUFDLENBQUNELElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaERILE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNXLFlBQVksQ0FBQyxDQUFDRixPQUFPLENBQUNoRSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUNpQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUUsQ0FBQyxDQUFDO0VBRUZnQixFQUFFLENBQUMsbUNBQW1DLEVBQUUsWUFBTTtJQUM1QyxJQUFBdUIsWUFBQSxHQUFtQixJQUFBckIsdUJBQVUsRUFBQztRQUFBLE9BQU0sSUFBQUMsc0JBQVUsRUFBQyxDQUFDO01BQUEsRUFBQztNQUF6Q0MsTUFBTSxHQUFBbUIsWUFBQSxDQUFObkIsTUFBTTtJQUdkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtNQUNSZixNQUFNLENBQUNFLE9BQU8sQ0FBQ2MsYUFBYSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0lBRUZmLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNHLGlCQUFpQixDQUFDLENBQUNELElBQUksQ0FBQyxDQUFDLENBQUM7SUFHaEQsSUFBQVcsZ0JBQUcsRUFBQyxZQUFNO01BQ1JmLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDa0IsaUJBQWlCLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUM7SUFFRm5CLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNHLGlCQUFpQixDQUFDLENBQUNELElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEQsQ0FBQyxDQUFDO0VBRUZSLEVBQUUsQ0FBQyw0REFBNEQsRUFBRSxZQUFNO0lBQ3JFLElBQUF5QixZQUFBLEdBQW1CLElBQUF2Qix1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxzQkFBVSxFQUFDLENBQUMsQ0FBQztNQUFBLEVBQUM7TUFBMUNDLE1BQU0sR0FBQXFCLFlBQUEsQ0FBTnJCLE1BQU07SUFFZEMsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUdoRCxJQUFBVyxnQkFBRyxFQUFDLFlBQU07TUFDUmYsTUFBTSxDQUFDRSxPQUFPLENBQUNrQixpQkFBaUIsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQztJQUVGbkIsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoREgsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0csaUJBQWlCLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUNsRCxDQUFDLENBQUM7RUFFRlIsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07SUFDNUMsSUFBQTBCLFlBQUEsR0FBbUIsSUFBQXhCLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLHNCQUFVLEVBQUMsQ0FBQztNQUFBLEVBQUM7TUFBekNDLE1BQU0sR0FBQXNCLFlBQUEsQ0FBTnRCLE1BQU07SUFFZCxJQUFBZSxnQkFBRyxFQUFDLFlBQU07TUFDUmYsTUFBTSxDQUFDRSxPQUFPLENBQUNxQixTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQztJQUVGdEIsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoREgsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0csaUJBQWlCLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoREgsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ1UsWUFBWSxDQUFDLENBQUNELE9BQU8sQ0FBQ2hFLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNqRSxDQUFDLENBQUM7RUFFRmlELEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxZQUFNO0lBQzVDLElBQUE0QixZQUFBLEdBQW1CLElBQUExQix1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxzQkFBVSxFQUFDLENBQUM7TUFBQSxFQUFDO01BQXpDQyxNQUFNLEdBQUF3QixZQUFBLENBQU54QixNQUFNO0lBRWQsSUFBQWUsZ0JBQUcsRUFBQyxZQUFNO01BQ1JmLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDZ0IsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0lBRUZqQixNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hESCxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDRyxpQkFBaUIsQ0FBQyxDQUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hESCxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDVyxZQUFZLENBQUMsQ0FBQ0YsT0FBTyxDQUFDaEUsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDaUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzVFLENBQUMsQ0FBQztFQUVGZ0IsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07SUFDNUMsSUFBQTZCLFlBQUEsR0FBbUIsSUFBQTNCLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLHNCQUFVLEVBQUMsQ0FBQztNQUFBLEVBQUM7TUFBekNDLE1BQU0sR0FBQXlCLFlBQUEsQ0FBTnpCLE1BQU07SUFFZCxJQUFBZSxnQkFBRyxFQUFDLFlBQU07TUFDUmYsTUFBTSxDQUFDRSxPQUFPLENBQUN3QixTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUMsQ0FBQztJQUVGekIsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0ksUUFBUSxDQUFDLENBQUNGLElBQUksQ0FBQyxJQUFJLENBQUM7SUFFMUMsSUFBQVcsZ0JBQUcsRUFBQyxZQUFNO01BQ1JmLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDd0IsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDLENBQUM7SUFFRnpCLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNJLFFBQVEsQ0FBQyxDQUFDRixJQUFJLENBQUMsS0FBSyxDQUFDO0VBQzdDLENBQUMsQ0FBQztFQUVGUixFQUFFLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtJQUNuQyxJQUFBK0IsWUFBQSxHQUFtQixJQUFBN0IsdUJBQVUsRUFBQztRQUFBLE9BQU0sSUFBQUMsc0JBQVUsRUFBQyxDQUFDO01BQUEsRUFBQztNQUF6Q0MsTUFBTSxHQUFBMkIsWUFBQSxDQUFOM0IsTUFBTTtJQUVkLElBQUFlLGdCQUFHLEVBQUMsWUFBTTtNQUNSZixNQUFNLENBQUNFLE9BQU8sQ0FBQzBCLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDL0IsQ0FBQyxDQUFDO0lBRUYzQixNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDSyxPQUFPLENBQUMsQ0FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQztJQUV6QyxJQUFBVyxnQkFBRyxFQUFDLFlBQU07TUFDUmYsTUFBTSxDQUFDRSxPQUFPLENBQUMwQixRQUFRLENBQUMsS0FBSyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztJQUVGM0IsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDLENBQUNILElBQUksQ0FBQyxLQUFLLENBQUM7RUFDNUMsQ0FBQyxDQUFDO0VBRUZSLEVBQUUsQ0FBQyw2QkFBNkIsTUFBQTVCLGtCQUFBLENBQUE2RCxPQUFBLEVBQUUsYUFBWTtJQUM1QzFFLGVBQWUsQ0FBQzJFLGlCQUFpQixDQUFDO01BQUVDLE9BQU8sRUFBRSxJQUFJO01BQUUvQyxTQUFTLEVBQUU7SUFBRyxDQUFDLENBQUM7SUFFbkUsSUFBQWdELFlBQUEsR0FBbUIsSUFBQWxDLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLHNCQUFVLEVBQUMsQ0FBQztNQUFBLEVBQUM7TUFBekNDLE1BQU0sR0FBQWdDLFlBQUEsQ0FBTmhDLE1BQU07SUFFZCxNQUFNLElBQUFlLGdCQUFHLE1BQUEvQyxrQkFBQSxDQUFBNkQsT0FBQSxFQUFDLGFBQVk7TUFDcEIsTUFBTTdCLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDK0IsWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUM3QyxDQUFDLEVBQUM7SUFFRmhDLE1BQU0sQ0FBQzlDLGVBQWUsQ0FBQyxDQUFDK0Usb0JBQW9CLENBQUMsUUFBUSxDQUFDO0VBQ3hELENBQUMsRUFBQztFQUVGdEMsRUFBRSxDQUFDLHdCQUF3QixNQUFBNUIsa0JBQUEsQ0FBQTZELE9BQUEsRUFBRSxhQUFZO0lBQ3ZDOUUsV0FBVyxDQUFDK0UsaUJBQWlCLENBQUM7TUFBRXBGLElBQUksRUFBRUM7SUFBZ0IsQ0FBQyxDQUFDO0lBRXhELElBQUF3RixhQUFBLEdBQW1CLElBQUFyQyx1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxzQkFBVSxFQUFDLENBQUM7TUFBQSxFQUFDO01BQXpDQyxNQUFNLEdBQUFtQyxhQUFBLENBQU5uQyxNQUFNO0lBRWQsTUFBTSxJQUFBZSxnQkFBRyxNQUFBL0Msa0JBQUEsQ0FBQTZELE9BQUEsRUFBQyxhQUFZO01BQ3BCLE1BQU03QixNQUFNLENBQUNFLE9BQU8sQ0FBQ2tDLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsRUFBQztJQUVGbkMsTUFBTSxDQUFDbEQsV0FBVyxDQUFDLENBQUNzRixnQkFBZ0IsQ0FBQyxDQUFDO0VBQ3hDLENBQUMsRUFBQztFQUVGekMsRUFBRSxDQUFDLDhDQUE4QyxFQUFFLFlBQU07SUFDdkQsSUFBQTBDLGFBQUEsR0FBbUIsSUFBQXhDLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLHNCQUFVLEVBQUMsQ0FBQztNQUFBLEVBQUM7TUFBekNDLE1BQU0sR0FBQXNDLGFBQUEsQ0FBTnRDLE1BQU07SUFFZEMsTUFBTSxDQUFDNUMsVUFBVSxDQUFDZSxFQUFFLENBQUMsQ0FBQzhELG9CQUFvQixDQUN4QyxjQUFjLEVBQ2RqQyxNQUFNLENBQUNzQyxHQUFHLENBQUNDLFFBQVEsQ0FDckIsQ0FBQztFQUNILENBQUMsQ0FBQztFQUVGNUMsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLFlBQU07SUFDaEQsSUFBQTZDLGFBQUEsR0FBbUIsSUFBQTNDLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLHNCQUFVLEVBQUMsQ0FBQztNQUFBLEVBQUM7TUFBekNDLE1BQU0sR0FBQXlDLGFBQUEsQ0FBTnpDLE1BQU07SUFHZCxJQUFBZSxnQkFBRyxFQUFDLFlBQU07TUFDUnZFLElBQUksQ0FBQ2tHLG1CQUFtQixDQUFDLElBQUksQ0FBQztJQUNoQyxDQUFDLENBQUM7SUFHRixJQUFBM0IsZ0JBQUcsRUFBQyxZQUFNO01BQ1JmLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDYyxhQUFhLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUM7SUFFRmYsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ00sUUFBUSxDQUFDLENBQUNKLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDekMsQ0FBQyxDQUFDO0VBRUZSLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxZQUFNO0lBQ3BDLElBQUErQyxhQUFBLEdBQW1CLElBQUE3Qyx1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxzQkFBVSxFQUFDLENBQUM7TUFBQSxFQUFDO01BQXpDQyxNQUFNLEdBQUEyQyxhQUFBLENBQU4zQyxNQUFNO0lBRWRDLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUMwQyxRQUFRLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7SUFDN0M1QyxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDNEMsbUJBQW1CLENBQUMsQ0FBQ0QsV0FBVyxDQUFDLENBQUM7SUFDeEQ1QyxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDNkMsY0FBYyxDQUFDLENBQUNGLFdBQVcsQ0FBQyxDQUFDO0VBQ3JELENBQUMsQ0FBQztFQUVGakQsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLFlBQU07SUFDaEQsSUFBQW9ELGFBQUEsR0FBbUIsSUFBQWxELHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLHNCQUFVLEVBQUMsQ0FBQyxDQUFDO01BQUEsRUFBQztNQUExQ0MsTUFBTSxHQUFBZ0QsYUFBQSxDQUFOaEQsTUFBTTtJQUdkQyxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hESCxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDRyxpQkFBaUIsQ0FBQyxDQUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBR2hELElBQUFXLGdCQUFHLEVBQUMsWUFBTTtNQUNSZixNQUFNLENBQUNFLE9BQU8sQ0FBQ2MsYUFBYSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0lBRUZmLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNDLGlCQUFpQixDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaERILE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUNHLGlCQUFpQixDQUFDLENBQUNELElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEQsQ0FBQyxDQUFDO0VBRUZSLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxZQUFNO0lBQ25ELElBQUFxRCxhQUFBLEdBQTZCLElBQUFuRCx1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxzQkFBVSxFQUFDLENBQUM7TUFBQSxFQUFDO01BQW5EQyxNQUFNLEdBQUFpRCxhQUFBLENBQU5qRCxNQUFNO01BQUVrRCxRQUFRLEdBQUFELGFBQUEsQ0FBUkMsUUFBUTtJQUV4QixJQUFNQyxrQkFBa0IsR0FBR25ELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDYyxhQUFhO0lBQ3ZELElBQU1vQyxjQUFjLEdBQUdwRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ3dCLFNBQVM7SUFFL0N3QixRQUFRLENBQUMsQ0FBQztJQUVWakQsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ2MsYUFBYSxDQUFDLENBQUNaLElBQUksQ0FBQytDLGtCQUFrQixDQUFDO0lBQzdEbEQsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ3dCLFNBQVMsQ0FBQyxDQUFDdEIsSUFBSSxDQUFDZ0QsY0FBYyxDQUFDO0VBQ3ZELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==