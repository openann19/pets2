1022d7d4828dc55c9df5fa58a40a4248
"use strict";

_getJestObj().mock('react-native-reanimated', function () {
  return require('react-native-reanimated/mock');
});
_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: _globals.jest.fn().mockResolvedValue(undefined),
    notificationAsync: _globals.jest.fn().mockResolvedValue(undefined),
    selectionAsync: _globals.jest.fn().mockResolvedValue(undefined),
    ImpactFeedbackStyle: {
      Light: 'light',
      Medium: 'medium',
      Heavy: 'heavy'
    }
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  var React = require('react');
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref) {
      var children = _ref.children;
      return React.createElement(React.Fragment, null, children);
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };
    }
  };
});
_getJestObj().mock('expo-modules-core', function () {
  return {
    NativeModulesProxy: {},
    EventEmitter: function () {
      function MockEventEmitter() {
        (0, _classCallCheck2.default)(this, MockEventEmitter);
      }
      return (0, _createClass2.default)(MockEventEmitter, [{
        key: "addListener",
        value: function addListener() {}
      }, {
        key: "removeListener",
        value: function removeListener() {}
      }, {
        key: "removeAllListeners",
        value: function removeAllListeners() {}
      }]);
    }(),
    requireNativeViewManager: _globals.jest.fn(function () {
      return {};
    })
  };
});
_getJestObj().mock('expo-font', function () {
  return {
    loadAsync: _globals.jest.fn().mockResolvedValue(undefined),
    isLoaded: _globals.jest.fn().mockReturnValue(true),
    FontSource: {
      GoogleSans: {}
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  return {
    Ionicons: 'Ionicons',
    MaterialIcons: 'MaterialIcons',
    FontAwesome: 'FontAwesome',
    Feather: 'Feather'
  };
});
_getJestObj().mock('@sentry/react-native', function () {
  return {
    addBreadcrumb: _globals.jest.fn(),
    addIntegration: _globals.jest.fn(),
    captureException: _globals.jest.fn(),
    captureEvent: _globals.jest.fn(),
    captureFeedback: _globals.jest.fn(),
    captureMessage: _globals.jest.fn(),
    Scope: _globals.jest.fn(),
    setContext: _globals.jest.fn(),
    setExtra: _globals.jest.fn(),
    setExtras: _globals.jest.fn(),
    setTag: _globals.jest.fn(),
    setTags: _globals.jest.fn(),
    setUser: _globals.jest.fn(),
    startInactiveSpan: _globals.jest.fn(),
    startSpan: _globals.jest.fn(),
    startSpanManual: _globals.jest.fn(),
    getActiveSpan: _globals.jest.fn(),
    getRootSpan: _globals.jest.fn(),
    withActiveSpan: _globals.jest.fn(),
    suppressTracing: _globals.jest.fn(),
    spanToJSON: _globals.jest.fn(),
    spanIsSampled: _globals.jest.fn(),
    setMeasurement: _globals.jest.fn(),
    getCurrentScope: _globals.jest.fn(),
    getGlobalScope: _globals.jest.fn(),
    getIsolationScope: _globals.jest.fn(),
    getClient: _globals.jest.fn(),
    setCurrentClient: _globals.jest.fn(),
    addEventProcessor: _globals.jest.fn(),
    lastEventId: _globals.jest.fn()
  };
});
_getJestObj().mock('react-native-keychain', function () {
  return {
    setInternetCredentials: _globals.jest.fn(),
    getInternetCredentials: _globals.jest.fn(),
    resetInternetCredentials: _globals.jest.fn(),
    canImplyAuthentication: _globals.jest.fn(),
    getSupportedBiometryType: _globals.jest.fn(),
    ACCESS_CONTROL: {},
    ACCESSIBLE: {},
    AUTHENTICATION_TYPE: {},
    BIOMETRY_TYPE: {}
  };
});
_getJestObj().mock('react-native-aes-crypto', function () {
  return {
    encrypt: _globals.jest.fn(),
    decrypt: _globals.jest.fn(),
    generateKey: _globals.jest.fn(),
    hash: _globals.jest.fn()
  };
});
_getJestObj().mock('react-native-encrypted-storage', function () {
  return {
    setItem: _globals.jest.fn(),
    getItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn(),
    clear: _globals.jest.fn(),
    getAllKeys: _globals.jest.fn()
  };
});
_getJestObj().mock("react-native", function () {
  return {
    View: "View",
    Text: "Text",
    StyleSheet: {
      create: _globals.jest.fn(function () {
        return {};
      }),
      flatten: _globals.jest.fn(function (style) {
        return style;
      })
    },
    Animated: {
      View: "Animated.View",
      Text: "Animated.Text",
      timing: _globals.jest.fn(function () {
        return {
          start: _globals.jest.fn(),
          stop: _globals.jest.fn()
        };
      }),
      spring: _globals.jest.fn(function () {
        return {
          start: _globals.jest.fn(),
          stop: _globals.jest.fn()
        };
      }),
      sequence: _globals.jest.fn(function () {
        return {
          start: _globals.jest.fn(),
          stop: _globals.jest.fn()
        };
      }),
      parallel: _globals.jest.fn(function () {
        return {
          start: _globals.jest.fn(),
          stop: _globals.jest.fn()
        };
      }),
      delay: _globals.jest.fn(function () {
        return {
          start: _globals.jest.fn(),
          stop: _globals.jest.fn()
        };
      }),
      Value: _globals.jest.fn(function () {
        return {
          setValue: _globals.jest.fn(),
          addListener: _globals.jest.fn()
        };
      })
    },
    Platform: {
      OS: "ios",
      select: _globals.jest.fn(function (obj) {
        return obj.ios || obj.default;
      })
    },
    Dimensions: {
      get: _globals.jest.fn(function () {
        return {
          width: 375,
          height: 812
        };
      })
    },
    NativeModules: {
      RNKeychainManager: {}
    }
  };
});
_getJestObj().mock('react-native-linear-gradient', function () {
  return 'LinearGradient';
});
_getJestObj().mock('@react-navigation/native', function () {
  var actual = _globals.jest.requireActual('@react-navigation/native');
  return _objectSpread(_objectSpread({}, actual), {}, {
    useNavigation: function useNavigation() {
      return {
        navigate: _globals.jest.fn(),
        goBack: _globals.jest.fn(),
        dispatch: _globals.jest.fn()
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _globals = require("@jest/globals");
require("@testing-library/jest-native/extend-expect");
var _util = require("util");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.IS_REACT_ACT_ENVIRONMENT = true;
global.TextEncoder = _util.TextEncoder;
global.TextDecoder = _util.TextDecoder;
var originalError = console.error;
beforeAll(function () {
  console.error = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (typeof args[0] === 'string' && (args[0].includes('Warning: An update to') || args[0].includes('Warning: ReactDOM.render is no longer supported'))) {
      return;
    }
    originalError.call.apply(originalError, [console].concat(args));
  };
});
afterAll(function () {
  console.error = originalError;
});
global.IS_REACT_ACT_ENVIRONMENT = true;
_globals.jest.useFakeTimers({
  legacyFakeTimers: false
});
_globals.jest.setSystemTime(new Date('2024-01-01T00:00:00Z'));
var fixedRandom = function fixedRandom() {
  return 0.421337;
};
Math.random = fixedRandom;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,