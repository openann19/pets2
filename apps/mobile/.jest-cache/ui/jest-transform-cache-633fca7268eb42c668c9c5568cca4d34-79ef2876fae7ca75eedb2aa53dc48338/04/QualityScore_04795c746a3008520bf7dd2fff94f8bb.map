{"version":3,"names":["FileSystem","_interopRequireWildcard","require","ImageManipulator","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","jpegByteSize","_x","_jpegByteSize","apply","arguments","_asyncToGenerator2","uri","sampleW","length","undefined","quality","_yield$ImageManipulat","manipulateAsync","resize","width","compress","format","SaveFormat","JPEG","tmp","info","getInfoAsync","deleteAsync","idempotent","_unused","exists","size","err","_yield$import","Promise","resolve","then","logger","warn","error","Error","String","pickSharpest","_x2","_pickSharpest","uris","bestUri","bestSize","compareSharpness","_x3","_x4","_compareSharpness","uri1","uri2","_yield$Promise$all","all","_yield$Promise$all2","_slicedToArray2","size1","size2"],"sources":["QualityScore.ts"],"sourcesContent":["/**\n * Quality Score\n * JPEG byte-size heuristic for sharpness detection\n * Sharper images compress worse â†’ bigger file size at fixed dimensions/quality\n */\n\nimport * as FileSystem from \"expo-file-system\";\nimport * as ImageManipulator from \"expo-image-manipulator\";\n\n/**\n * Returns byte length of JPEG at fixed quality/dimensions\n * Bigger size = sharper image (reliable proxy)\n * \n * @param uri - Image URI\n * @param sampleW - Sample width for encoding (default 720)\n * @param quality - JPEG quality 0..1 (default 0.72)\n * @returns Size in bytes\n */\nexport async function jpegByteSize(\n  uri: string,\n  sampleW = 720,\n  quality = 0.72\n): Promise<number> {\n  try {\n    const { uri: tmp } = await ImageManipulator.manipulateAsync(\n      uri,\n      [{ resize: { width: sampleW } }],\n      { compress: quality, format: ImageManipulator.SaveFormat.JPEG }\n    );\n    \n    const info = await FileSystem.getInfoAsync(tmp);\n    \n    // Best-effort cleanup (ignore errors)\n    try {\n      await FileSystem.deleteAsync(tmp, { idempotent: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n    \n    return (info.exists && typeof (info as any).size === 'number') ? (info as any).size : 0;\n  } catch (err) {\n    const { logger } = await import('../services/logger');\n    logger.warn('QualityScore: Failed to compute size', { error: err instanceof Error ? err : new Error(String(err)) });\n    return 0;\n  }\n}\n\n/**\n * Pick the sharpest URI among candidates using JPEG-size heuristic\n * Uses a fast, deterministic method that works well on mobile\n * \n * @param uris - Array of candidate URIs\n * @param sampleW - Sample width for encoding (default 720)\n * @param quality - JPEG quality 0..1 (default 0.72)\n * @returns URI of the sharpest image\n */\nexport async function pickSharpest(\n  uris: string[],\n  sampleW = 720,\n  quality = 0.72\n): Promise<string> {\n  if (uris.length === 0) {\n    throw new Error(\"No URIs provided to pickSharpest\");\n  }\n\n  if (uris.length === 1) {\n    const uri = uris[0];\n    if (!uri) {\n      throw new Error(\"Empty URI provided\");\n    }\n    return uri;\n  }\n\n  let bestUri = uris[0];\n  if (!bestUri) {\n    throw new Error(\"No valid URI found\");\n  }\n  let bestSize = -1;\n\n  for (const uri of uris) {\n    if (!uri) continue;\n    const size = await jpegByteSize(uri, sampleW, quality);\n    \n    if (size > bestSize) {\n      bestSize = size;\n      bestUri = uri;\n    }\n  }\n\n  if (!bestUri) {\n    throw new Error(\"Failed to determine best URI\");\n  }\n\n  return bestUri;\n}\n\n/**\n * Compare two images and return the sharper one\n * \n * @param uri1 - First image URI\n * @param uri2 - Second image URI\n * @param sampleW - Sample width for encoding (default 720)\n * @param quality - JPEG quality 0..1 (default 0.72)\n * @returns URI of the sharper image\n */\nexport async function compareSharpness(\n  uri1: string,\n  uri2: string,\n  sampleW = 720,\n  quality = 0.72\n): Promise<string> {\n  const [size1, size2] = await Promise.all([\n    jpegByteSize(uri1, sampleW, quality),\n    jpegByteSize(uri2, sampleW, quality),\n  ]);\n\n  return size1 > size2 ? uri1 : uri2;\n}\n\n\n"],"mappings":"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","ignoreList":[]}