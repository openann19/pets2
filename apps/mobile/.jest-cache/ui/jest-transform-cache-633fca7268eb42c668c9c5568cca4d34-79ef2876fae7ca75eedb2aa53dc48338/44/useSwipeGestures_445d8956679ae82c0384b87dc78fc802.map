{"version":3,"names":["_react","require","_reactNative","_Dimensions$get","Dimensions","get","screenWidth","width","screenHeight","height","useSwipeGestures","_ref","onSwipeRight","onSwipeLeft","onSwipeUp","position","useRef","Animated","ValueXY","current","rotate","x","interpolate","inputRange","outputRange","extrapolate","likeOpacity","nopeOpacity","resetPosition","useCallback","spring","toValue","y","useNativeDriver","start","panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderMove","e","gestureState","setValue","dx","dy","onPanResponderRelease","_evt","swipeThreshold"],"sources":["useSwipeGestures.ts"],"sourcesContent":["import { useRef, useCallback } from \"react\";\nimport { Animated, Dimensions, PanResponder } from \"react-native\";\nimport type { PanResponderInstance } from \"react-native\";\n\nconst { width: screenWidth, height: screenHeight } = Dimensions.get(\"window\");\n\nexport interface SwipeGestureState {\n  position: Animated.ValueXY;\n  rotate: Animated.AnimatedInterpolation<string>;\n  likeOpacity: Animated.AnimatedInterpolation<string | number>;\n  nopeOpacity: Animated.AnimatedInterpolation<string | number>;\n  panResponder: PanResponderInstance;\n}\n\nexport interface UseSwipeGesturesOptions {\n  onSwipeRight: () => void;\n  onSwipeLeft: () => void;\n  onSwipeUp: () => void;\n}\n\n/**\n * Hook for managing swipe gestures and animations\n */\nexport function useSwipeGestures({\n  onSwipeRight,\n  onSwipeLeft,\n  onSwipeUp,\n}: UseSwipeGesturesOptions): SwipeGestureState {\n  // Animation values\n  const position = useRef(new Animated.ValueXY()).current;\n\n  // Rotate interpolation\n  const rotate = position.x.interpolate({\n    inputRange: [-screenWidth / 2, 0, screenWidth / 2],\n    outputRange: [\"-30deg\", \"0deg\", \"30deg\"],\n    extrapolate: \"clamp\",\n  });\n\n  // Like opacity (right swipe)\n  const likeOpacity = position.x.interpolate({\n    inputRange: [0, screenWidth / 4],\n    outputRange: [0, 1],\n    extrapolate: \"clamp\",\n  });\n\n  // Nope opacity (left swipe)\n  const nopeOpacity = position.x.interpolate({\n    inputRange: [-screenWidth / 4, 0],\n    outputRange: [1, 0],\n    extrapolate: \"clamp\",\n  });\n\n  // Reset position animation\n  const resetPosition = useCallback(() => {\n    Animated.spring(position, {\n      toValue: { x: 0, y: 0 },\n      useNativeDriver: false,\n    }).start();\n  }, [position]);\n\n  // Pan responder for swipe gestures\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponder: () => true,\n      onPanResponderMove: (e, gestureState) => {\n        position.setValue({\n          x: gestureState.dx,\n          y: gestureState.dy,\n        });\n      },\n      onPanResponderRelease: (_evt, gestureState) => {\n      const { dx, dy } = gestureState;\n      const swipeThreshold = screenWidth * 0.3;\n\n      if (dx > swipeThreshold) {\n        // Swipe right - like\n        onSwipeRight();\n      } else if (dx < -swipeThreshold) {\n        // Swipe left - pass\n        onSwipeLeft();\n      } else if (dy < -swipeThreshold) {\n        // Swipe up - super like\n        onSwipeUp();\n      } else {\n        // Snap back\n        resetPosition();\n      }\n    },\n    })\n  ).current;\n\n  return {\n    position,\n    rotate,\n    likeOpacity,\n    nopeOpacity,\n    panResponder,\n  };\n}\n"],"mappings":"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","ignoreList":[]}