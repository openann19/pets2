518443d44f1d42af00255f10b4134873
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAIBio = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _core = require("@pawfectmatch/core");
var _api = require("../../../services/api");
var useAIBio = exports.useAIBio = function useAIBio() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isGenerating = _useState2[0],
    setIsGenerating = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    lastGeneratedBio = _useState4[0],
    setLastGeneratedBio = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    error = _useState6[0],
    setError = _useState6[1];
  var _useState7 = (0, _react.useState)([]),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    bioHistory = _useState8[0],
    setBioHistory = _useState8[1];
  var generateBio = (0, _react.useCallback)(function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (params) {
      if (!params.petName.trim()) {
        var errorMsg = "Pet name is required";
        setError(errorMsg);
        throw new Error(errorMsg);
      }
      setIsGenerating(true);
      setError(null);
      try {
        var _bioData$keywords, _bioData$sentiment, _bioData$matchScore;
        var bioData = yield _api.api.ai.generateBio(params);
        var generatedBio = {
          bio: bioData.bio,
          keywords: (_bioData$keywords = bioData.keywords) != null ? _bioData$keywords : [],
          sentiment: (_bioData$sentiment = bioData.sentiment) != null ? _bioData$sentiment : {
            score: 0.8,
            label: "positive"
          },
          matchScore: (_bioData$matchScore = bioData.matchScore) != null ? _bioData$matchScore : 85
        };
        setLastGeneratedBio(generatedBio);
        addToHistory(generatedBio);
        _core.logger.info("AI bio generated successfully", {
          petName: params.petName,
          keywordsCount: generatedBio.keywords.length,
          matchScore: generatedBio.matchScore
        });
        return generatedBio;
      } catch (err) {
        var fallbackBio = {
          bio: `Meet ${params.petName}! This adorable ${params.breed || "furry friend"} is ${params.age || "young"} and full of personality. ${params.keywords.join(", ") || "They love making new friends"} and would be perfect for someone looking for a ${params.tone} companion. Ready for adventures and lots of love! üêæ`,
          keywords: ["friendly", "playful", "loving", "adventurous"],
          sentiment: {
            score: 0.9,
            label: "positive"
          },
          matchScore: 88
        };
        setLastGeneratedBio(fallbackBio);
        addToHistory(fallbackBio);
        _core.logger.info("Using fallback bio generation", {
          error: err,
          petName: params.petName
        });
        return fallbackBio;
      } finally {
        setIsGenerating(false);
      }
    });
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), []);
  var addToHistory = (0, _react.useCallback)(function (bio) {
    setBioHistory(function (prev) {
      return [bio].concat((0, _toConsumableArray2.default)(prev.slice(0, 4)));
    });
  }, []);
  var clearHistory = (0, _react.useCallback)(function () {
    setBioHistory([]);
  }, []);
  var clearError = (0, _react.useCallback)(function () {
    setError(null);
  }, []);
  return {
    generateBio: generateBio,
    isGenerating: isGenerating,
    lastGeneratedBio: lastGeneratedBio,
    error: error,
    clearError: clearError,
    bioHistory: bioHistory,
    addToHistory: addToHistory,
    clearHistory: clearHistory
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,