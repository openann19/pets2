0f92fb7812646dcdde084866e3b15876
"use strict";

_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: function useNavigation() {
      return mockNavigation;
    }
  };
});
_getJestObj().mock("expo-image-picker", function () {
  return {
    requestMediaLibraryPermissionsAsync: jest.fn(),
    launchImageLibraryAsync: jest.fn(),
    MediaTypeOptions: {
      Images: "Images"
    }
  };
});
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    useAuthStore: function useAuthStore() {
      return {
        user: mockUser
      };
    },
    logger: {
      error: jest.fn(),
      info: jest.fn()
    }
  };
});
_getJestObj().mock("../../../services/api", function () {
  return {
    api: {
      getUserPets: mockGetUserPets,
      updatePet: mockUpdatePet
    }
  };
});
_getJestObj().mock("../../domains/ai/useAIBio", function () {
  return {
    useAIBio: function useAIBio() {
      return {
        generateBio: mockGenerateAIBio,
        isGenerating: false,
        lastGeneratedBio: mockLastGeneratedBio,
        bioHistory: [],
        addToHistory: mockAddToHistory,
        clearHistory: mockClearHistory
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useAIBioScreen = require("../useAIBioScreen");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGoBack = jest.fn();
var mockNavigation = {
  goBack: mockGoBack
};
jest.spyOn(_reactNative2.Alert, "alert");
var mockUser = {
  _id: "user123",
  name: "Test User"
};
var mockGetUserPets = jest.fn();
var mockUpdatePet = jest.fn();
var mockGenerateAIBio = jest.fn();
var mockAddToHistory = jest.fn();
var mockClearHistory = jest.fn();
var mockLastGeneratedBio = {
  bio: "Meet Buddy! A friendly dog.",
  keywords: ["friendly", "playful"],
  sentiment: {
    score: 0.9,
    label: "positive"
  },
  matchScore: 88
};
describe("useAIBioScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockGetUserPets.mockResolvedValue([{
      _id: "pet1",
      name: "Buddy"
    }]);
    mockUpdatePet.mockResolvedValue({
      success: true
    });
  });
  it("should initialize with default form state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook.result;
    expect(result.current.petName).toBe("");
    expect(result.current.petBreed).toBe("");
    expect(result.current.petAge).toBe("");
    expect(result.current.petPersonality).toBe("");
    expect(result.current.selectedTone).toBe("playful");
    expect(result.current.selectedPhoto).toBe(null);
  });
  it("should provide available tones", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook2.result;
    expect(result.current.tones).toHaveLength(5);
    expect(result.current.tones[0].id).toBe("playful");
    expect(result.current.tones[1].id).toBe("professional");
    expect(result.current.tones[2].id).toBe("casual");
    expect(result.current.tones[3].id).toBe("romantic");
    expect(result.current.tones[4].id).toBe("funny");
  });
  it("should update pet name", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Max");
    });
    expect(result.current.petName).toBe("Max");
  });
  it("should update pet breed", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.setPetBreed("Golden Retriever");
    });
    expect(result.current.petBreed).toBe("Golden Retriever");
  });
  it("should update pet age", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.setPetAge("3");
    });
    expect(result.current.petAge).toBe("3");
  });
  it("should update pet personality", function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.setPetPersonality("friendly, playful");
    });
    expect(result.current.petPersonality).toBe("friendly, playful");
  });
  it("should update selected tone", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.setSelectedTone("professional");
    });
    expect(result.current.selectedTone).toBe("professional");
  });
  it("should request image picker permissions", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://test.jpg"
      }]
    });
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(ImagePicker.requestMediaLibraryPermissionsAsync).toHaveBeenCalled();
    expect(result.current.selectedPhoto).toBe("file://test.jpg");
  }));
  it("should show alert when permissions denied", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "denied"
    });
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Permission needed", "We need camera roll permissions to analyze your pet photo");
    expect(result.current.selectedPhoto).toBe(null);
  }));
  it("should handle canceled image picker", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: true
    });
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.selectedPhoto).toBe(null);
  }));
  it("should require pet name for bio generation", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Missing Information", "Please enter your pet's name");
    expect(mockGenerateAIBio).not.toHaveBeenCalled();
  }));
  it("should generate bio with form data", (0, _asyncToGenerator2.default)(function* () {
    mockGenerateAIBio.mockResolvedValue(mockLastGeneratedBio);
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook10.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Buddy");
      result.current.setPetBreed("Golden Retriever");
      result.current.setPetAge("3");
      result.current.setPetPersonality("friendly, playful");
      result.current.setSelectedTone("playful");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(mockGenerateAIBio).toHaveBeenCalledWith({
      petName: "Buddy",
      keywords: ["friendly", "playful"],
      tone: "playful",
      length: "medium",
      petType: "dog",
      age: 3,
      breed: "Golden Retriever"
    });
  }));
  it("should parse age as integer", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook11.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Max");
      result.current.setPetAge("5");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(mockGenerateAIBio).toHaveBeenCalledWith(expect.objectContaining({
      age: 5
    }));
  }));
  it("should handle invalid age", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook12.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Max");
      result.current.setPetAge("invalid");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(mockGenerateAIBio).toHaveBeenCalledWith(expect.objectContaining({
      age: 1
    }));
  }));
  it("should save bio to pet profile", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook13.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveBio();
    }));
    expect(mockGetUserPets).toHaveBeenCalled();
    expect(mockUpdatePet).toHaveBeenCalledWith("pet1", {
      description: mockLastGeneratedBio.bio
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Success", "Pet profile updated successfully!");
    expect(mockGoBack).toHaveBeenCalled();
  }));
  it("should handle save when no pets exist", (0, _asyncToGenerator2.default)(function* () {
    mockGetUserPets.mockResolvedValue([]);
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook14.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveBio();
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Saved Locally", "Bio has been saved to your device");
  }));
  it("should handle save errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    mockGetUserPets.mockRejectedValue(new Error("API error"));
    var _renderHook15 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook15.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveBio();
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Saved Locally", "Bio has been saved to your device");
  }));
  it("should navigate back", function () {
    var _renderHook16 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook16.result;
    (0, _reactNative.act)(function () {
      result.current.handleGoBack();
    });
    expect(mockGoBack).toHaveBeenCalled();
  });
  it("should clear form", function () {
    var _renderHook17 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook17.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Max");
      result.current.setPetBreed("Labrador");
      result.current.setPetAge("2");
      result.current.setPetPersonality("energetic");
      result.current.setSelectedTone("funny");
      result.current.setSelectedPhoto("photo.jpg");
    });
    (0, _reactNative.act)(function () {
      result.current.clearForm();
    });
    expect(result.current.petName).toBe("");
    expect(result.current.petBreed).toBe("");
    expect(result.current.petAge).toBe("");
    expect(result.current.petPersonality).toBe("");
    expect(result.current.selectedTone).toBe("playful");
    expect(result.current.selectedPhoto).toBe(null);
    expect(mockClearHistory).toHaveBeenCalled();
  });
  it("should provide generated bio from domain hook", function () {
    var _renderHook18 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook18.result;
    expect(result.current.generatedBio).toEqual(mockLastGeneratedBio);
  });
  it("should provide isGenerating state", function () {
    var _renderHook19 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook19.result;
    expect(result.current.isGenerating).toBe(false);
  });
  it("should provide bio history", function () {
    var _renderHook20 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook20.result;
    expect(result.current.bioHistory).toEqual([]);
  });
  it("should split personality keywords correctly", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook21 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook21.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Buddy");
      result.current.setPetPersonality("  friendly,  playful,  energetic  ");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(mockGenerateAIBio).toHaveBeenCalledWith(expect.objectContaining({
      keywords: ["friendly", "playful", "energetic"]
    }));
  }));
  it("should filter empty keywords", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook22 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook22.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Buddy");
      result.current.setPetPersonality("friendly,  ,  , playful");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(mockGenerateAIBio).toHaveBeenCalledWith(expect.objectContaining({
      keywords: ["friendly", "playful"]
    }));
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,