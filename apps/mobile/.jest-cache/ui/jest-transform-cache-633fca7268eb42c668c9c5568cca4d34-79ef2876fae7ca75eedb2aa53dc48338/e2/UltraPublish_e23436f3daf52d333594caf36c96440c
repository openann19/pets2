0755cb7b8f87257ff7cc83813b09bfdd
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exportUltraVariants = exportUltraVariants;
exports.generateTrioCrops = generateTrioCrops;
exports.previewUltraVariants = previewUltraVariants;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _AutoCropEngine = require("./AutoCropEngine");
var _QualityTargets = require("./QualityTargets");
var _SuperRes = require("./SuperRes");
var _TiledUpscaler = require("./TiledUpscaler");
var _Unsharp = require("./Unsharp");
var _QualityScore = require("./QualityScore");
var _logger = require("../services/logger");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var PAD = {
  tight: 0.06,
  medium: 0.12,
  loose: 0.2
};
function computeCropForRatio(focus, imgW, imgH, ratio, padPct) {
  var ratioToNumber = function ratioToNumber(r) {
    if (r === "FREE") return NaN;
    var parts = r.split(":");
    if (parts.length !== 2) return NaN;
    var a = Number(parts[0]);
    var b = Number(parts[1]);
    if (!a || !b || isNaN(a) || isNaN(b)) return NaN;
    return a / b;
  };
  var padRect = function padRect(r, imgWidth, imgHeight, pad) {
    var clamp = function clamp(v, min, max) {
      return Math.max(min, Math.min(max, v));
    };
    var padX = r.width * pad;
    var padY = r.height * pad;
    var x = clamp(r.x - padX, 0, imgWidth);
    var y = clamp(r.y - padY, 0, imgHeight);
    var width = clamp(r.width + padX * 2, 1, imgWidth - x);
    var height = clamp(r.height + padY * 2, 1, imgHeight - y);
    return {
      x: x,
      y: y,
      width: width,
      height: height
    };
  };
  var ar = ratioToNumber(ratio);
  var padded = padRect(focus, imgW, imgH, padPct);
  var cx = padded.x + padded.width / 2;
  var cy = padded.y + padded.height / 2;
  var width;
  var height;
  var focusAR = padded.width / padded.height;
  if (isNaN(ar)) {
    width = padded.width;
    height = padded.height;
  } else if (focusAR >= ar) {
    width = padded.width;
    height = width / ar;
  } else {
    height = padded.height;
    width = height * ar;
  }
  width = Math.min(width, imgW);
  height = Math.min(height, imgH);
  var clamp = function clamp(v, min, max) {
    return Math.max(min, Math.min(max, v));
  };
  var x = cx - width / 2;
  var y = cy - height / 2;
  x = clamp(x, 0, imgW - width);
  y = clamp(y, 0, imgH - height);
  return {
    x: x,
    y: y,
    width: width,
    height: height
  };
}
function generateTrioCrops(_x, _x2, _x3) {
  return _generateTrioCrops.apply(this, arguments);
}
function _generateTrioCrops() {
  _generateTrioCrops = (0, _asyncToGenerator2.default)(function* (uri, ratio, detection) {
    var focus = detection.focus,
      size = detection.size;
    var crops = [];
    for (var kind of ["tight", "medium", "loose"]) {
      var padPct = PAD[kind];
      var crop = computeCropForRatio(focus, size.w, size.h, ratio, padPct);
      crops.push({
        kind: kind,
        crop: crop
      });
    }
    return crops;
  });
  return _generateTrioCrops.apply(this, arguments);
}
function exportUltraVariants(_x4) {
  return _exportUltraVariants.apply(this, arguments);
}
function _exportUltraVariants() {
  _exportUltraVariants = (0, _asyncToGenerator2.default)(function* (uri) {
    var ratios = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _QualityTargets.DEFAULT_RATIOS;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var onProgress = options.onProgress,
      _options$maxConcurren = options.maxConcurrency,
      maxConcurrency = _options$maxConcurren === void 0 ? 1 : _options$maxConcurren,
      sharpen = options.sharpen,
      _options$tiled = options.tiled,
      tiled = _options$tiled === void 0 ? false : _options$tiled,
      _options$autoPickBest = options.autoPickBestPerRatio,
      autoPickBestPerRatio = _options$autoPickBest === void 0 ? false : _options$autoPickBest,
      _options$quality = options.quality,
      quality = _options$quality === void 0 ? 1 : _options$quality;
    var detection = yield _AutoCropEngine.AutoCropEngine.detect(uri, {
      eyeWeight: 0.6,
      padPct: 0.16
    });
    if (!detection) {
      throw new Error("Failed to detect subject focus");
    }
    var allVariants = [];
    var completed = 0;
    var total = ratios.length * 3;
    var _loop = function* _loop() {
      var target = _QualityTargets.QualityTargets[ratio];
      var trios = yield generateTrioCrops(uri, ratio, detection);
      var candidates = [];
      for (var trio of trios) {
        try {
          var croppedUri = yield _AutoCropEngine.AutoCropEngine.applyCrop(uri, trio.crop, quality);
          var upscaledUri = void 0;
          if (tiled) {
            upscaledUri = yield (0, _TiledUpscaler.tileUpscaleAuto)(croppedUri, {
              targetW: target.minW,
              targetH: target.minH,
              quality: quality
            });
          } else {
            upscaledUri = yield _SuperRes.SuperRes.upscale(croppedUri, target.minW, target.minH);
          }
          var finalUri = sharpen ? yield (0, _Unsharp.unsharpMask)(upscaledUri, _objectSpread(_objectSpread({}, sharpen), {}, {
            quality: quality,
            format: "jpg"
          })) : upscaledUri;
          var variant = {
            ratio: ratio,
            kind: trio.kind,
            crop: trio.crop,
            outUri: finalUri,
            method: detection.method,
            targetW: target.minW,
            targetH: target.minH,
            size: detection.size
          };
          if (autoPickBestPerRatio) {
            candidates.push(variant);
          } else {
            allVariants.push(variant);
          }
          completed++;
          onProgress == null ? void 0 : onProgress(completed / total, variant);
          onProgress == null ? void 0 : onProgress(completed / total, null);
        } catch (error) {
          var err = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error(`Failed to generate variant`, {
            ratio: ratio,
            kind: trio.kind,
            error: err
          });
          completed++;
          onProgress == null ? void 0 : onProgress(completed / total, null);
        }
      }
      if (autoPickBestPerRatio && candidates.length > 0) {
        try {
          var winner = yield (0, _QualityScore.pickSharpest)(candidates.map(function (c) {
            return c.outUri;
          }), 720, 0.72);
          var best = candidates.find(function (c) {
            return c.outUri === winner;
          });
          if (best) {
            allVariants.push(best);
          }
        } catch (error) {
          var _err = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error(`Failed to pick sharpest`, {
            ratio: ratio,
            error: _err
          });
          var fallback = candidates[0];
          if (fallback) {
            allVariants.push(fallback);
          }
        }
      }
    };
    for (var ratio of ratios) {
      yield* _loop();
    }
    return allVariants;
  });
  return _exportUltraVariants.apply(this, arguments);
}
function previewUltraVariants(_x5) {
  return _previewUltraVariants.apply(this, arguments);
}
function _previewUltraVariants() {
  _previewUltraVariants = (0, _asyncToGenerator2.default)(function* (uri) {
    var ratios = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _QualityTargets.DEFAULT_RATIOS;
    var variants = yield exportUltraVariants(uri, ratios, {
      onProgress: function onProgress() {}
    });
    var withThumbs = [];
    for (var variant of variants) {
      try {
        var _yield$import = yield Promise.resolve().then(function () {
            return _interopRequireWildcard(require("expo-image-manipulator"));
          }),
          manipulateAsync = _yield$import.manipulateAsync;
        var _yield$import2 = yield Promise.resolve().then(function () {
            return _interopRequireWildcard(require("expo-image-manipulator"));
          }),
          SaveFormat = _yield$import2.SaveFormat;
        var thumb = yield manipulateAsync(variant.outUri, [{
          resize: {
            width: 240,
            height: 240
          }
        }], {
          compress: 0.9,
          format: SaveFormat.JPEG
        });
        withThumbs.push({
          variant: variant,
          thumbUri: thumb.uri
        });
      } catch (error) {
        var err = error instanceof Error ? error : new Error(String(error));
        _logger.logger.error("Failed to generate thumbnail", {
          error: err
        });
        withThumbs.push({
          variant: variant,
          thumbUri: variant.outUri
        });
      }
    }
    return withThumbs;
  });
  return _previewUltraVariants.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQXV0b0Nyb3BFbmdpbmUiLCJyZXF1aXJlIiwiX1F1YWxpdHlUYXJnZXRzIiwiX1N1cGVyUmVzIiwiX1RpbGVkVXBzY2FsZXIiLCJfVW5zaGFycCIsIl9RdWFsaXR5U2NvcmUiLCJfbG9nZ2VyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QyIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIlBBRCIsInRpZ2h0IiwibWVkaXVtIiwibG9vc2UiLCJjb21wdXRlQ3JvcEZvclJhdGlvIiwiZm9jdXMiLCJpbWdXIiwiaW1nSCIsInJhdGlvIiwicGFkUGN0IiwicmF0aW9Ub051bWJlciIsIk5hTiIsInBhcnRzIiwic3BsaXQiLCJhIiwiTnVtYmVyIiwiYiIsImlzTmFOIiwicGFkUmVjdCIsImltZ1dpZHRoIiwiaW1nSGVpZ2h0IiwicGFkIiwiY2xhbXAiLCJ2IiwibWluIiwibWF4IiwiTWF0aCIsInBhZFgiLCJ3aWR0aCIsInBhZFkiLCJoZWlnaHQiLCJ4IiwieSIsImFyIiwicGFkZGVkIiwiY3giLCJjeSIsImZvY3VzQVIiLCJnZW5lcmF0ZVRyaW9Dcm9wcyIsIl94IiwiX3gyIiwiX3gzIiwiX2dlbmVyYXRlVHJpb0Nyb3BzIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwidXJpIiwiZGV0ZWN0aW9uIiwic2l6ZSIsImNyb3BzIiwia2luZCIsImNyb3AiLCJ3IiwiaCIsImV4cG9ydFVsdHJhVmFyaWFudHMiLCJfeDQiLCJfZXhwb3J0VWx0cmFWYXJpYW50cyIsInJhdGlvcyIsInVuZGVmaW5lZCIsIkRFRkFVTFRfUkFUSU9TIiwib3B0aW9ucyIsIm9uUHJvZ3Jlc3MiLCJfb3B0aW9ucyRtYXhDb25jdXJyZW4iLCJtYXhDb25jdXJyZW5jeSIsInNoYXJwZW4iLCJfb3B0aW9ucyR0aWxlZCIsInRpbGVkIiwiX29wdGlvbnMkYXV0b1BpY2tCZXN0IiwiYXV0b1BpY2tCZXN0UGVyUmF0aW8iLCJfb3B0aW9ucyRxdWFsaXR5IiwicXVhbGl0eSIsIkF1dG9Dcm9wRW5naW5lIiwiZGV0ZWN0IiwiZXllV2VpZ2h0IiwiRXJyb3IiLCJhbGxWYXJpYW50cyIsImNvbXBsZXRlZCIsInRvdGFsIiwiX2xvb3AiLCJ0YXJnZXQiLCJRdWFsaXR5VGFyZ2V0cyIsInRyaW9zIiwiY2FuZGlkYXRlcyIsInRyaW8iLCJjcm9wcGVkVXJpIiwiYXBwbHlDcm9wIiwidXBzY2FsZWRVcmkiLCJ0aWxlVXBzY2FsZUF1dG8iLCJ0YXJnZXRXIiwibWluVyIsInRhcmdldEgiLCJtaW5IIiwiU3VwZXJSZXMiLCJ1cHNjYWxlIiwiZmluYWxVcmkiLCJ1bnNoYXJwTWFzayIsImZvcm1hdCIsInZhcmlhbnQiLCJvdXRVcmkiLCJtZXRob2QiLCJlcnJvciIsImVyciIsIlN0cmluZyIsImxvZ2dlciIsIndpbm5lciIsInBpY2tTaGFycGVzdCIsIm1hcCIsImMiLCJiZXN0IiwiZmluZCIsImZhbGxiYWNrIiwicHJldmlld1VsdHJhVmFyaWFudHMiLCJfeDUiLCJfcHJldmlld1VsdHJhVmFyaWFudHMiLCJ2YXJpYW50cyIsIndpdGhUaHVtYnMiLCJfeWllbGQkaW1wb3J0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwibWFuaXB1bGF0ZUFzeW5jIiwiX3lpZWxkJGltcG9ydDIiLCJTYXZlRm9ybWF0IiwidGh1bWIiLCJyZXNpemUiLCJjb21wcmVzcyIsIkpQRUciLCJ0aHVtYlVyaSJdLCJzb3VyY2VzIjpbIlVsdHJhUHVibGlzaC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVsdHJhIFB1Ymxpc2ggUGlwZWxpbmVcbiAqIEV4cG9ydHMgbXVsdGlwbGUgY3JvcCB2YXJpYW50cyAodGlnaHQvbWVkaXVtL2xvb3NlKSBhY3Jvc3MgcmF0aW9zIHdpdGggc3VwZXItcmVzb2x1dGlvblxuICogTm93IHdpdGggdGlsZS1iYXNlZCB1cHNjYWxpbmcsIHVuc2hhcnAgbWFzaywgYW5kIGF1dG9tYXRpYyBxdWFsaXR5IHNlbGVjdGlvblxuICovXG5cbmltcG9ydCB7IEF1dG9Dcm9wRW5naW5lLCB0eXBlIEF1dG9Dcm9wUmVzdWx0IH0gZnJvbSBcIi4vQXV0b0Nyb3BFbmdpbmVcIjtcbmltcG9ydCB7IFF1YWxpdHlUYXJnZXRzLCBERUZBVUxUX1JBVElPUywgdHlwZSBLbm93blJhdGlvIH0gZnJvbSBcIi4vUXVhbGl0eVRhcmdldHNcIjtcbmltcG9ydCB7IFN1cGVyUmVzIH0gZnJvbSBcIi4vU3VwZXJSZXNcIjtcbmltcG9ydCB7IHRpbGVVcHNjYWxlQXV0byB9IGZyb20gXCIuL1RpbGVkVXBzY2FsZXJcIjtcbmltcG9ydCB7IHVuc2hhcnBNYXNrLCB0eXBlIFVuc2hhcnBPcHRzIH0gZnJvbSBcIi4vVW5zaGFycFwiO1xuaW1wb3J0IHsgcGlja1NoYXJwZXN0IH0gZnJvbSBcIi4vUXVhbGl0eVNjb3JlXCI7XG5pbXBvcnQgKiBhcyBJbWFnZU1hbmlwdWxhdG9yIGZyb20gXCJleHBvLWltYWdlLW1hbmlwdWxhdG9yXCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvbG9nZ2VyXCI7XG5cbnR5cGUgUmVjdCA9IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH07XG50eXBlIFRyaW9LaW5kID0gXCJ0aWdodFwiIHwgXCJtZWRpdW1cIiB8IFwibG9vc2VcIjtcblxuZXhwb3J0IHR5cGUgVWx0cmFWYXJpYW50ID0ge1xuICByYXRpbzogS25vd25SYXRpbztcbiAga2luZDogVHJpb0tpbmQ7XG4gIGNyb3A6IFJlY3Q7XG4gIG91dFVyaTogc3RyaW5nO1xuICBtZXRob2Q6IFwiZXllc1wiIHwgXCJmYWNlXCIgfCBcImZhbGxiYWNrXCI7XG4gIHRhcmdldFc6IG51bWJlcjtcbiAgdGFyZ2V0SDogbnVtYmVyO1xuICBzaXplOiB7IHc6IG51bWJlcjsgaDogbnVtYmVyIH07XG4gIHByb2dyZXNzPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBVbHRyYU9wdGlvbnMge1xuICAvKiogUG9zdC11cHNjYWxlIHVuc2hhcnAgbWFzayBzZXR0aW5ncyAqL1xuICBzaGFycGVuPzogVW5zaGFycE9wdHM7XG4gIC8qKiBVc2UgdGlsZS1iYXNlZCB1cHNjYWxlciBpZiBhdmFpbGFibGUgKGRlZmF1bHQ6IGZhbHNlLCB1c2VzIFN1cGVyUmVzKSAqL1xuICB0aWxlZD86IGJvb2xlYW47XG4gIC8qKiBGb3IgZWFjaCByYXRpbywgcGljayB0aGUgc2hhcnBlc3QgYW1vbmcgdGlnaHQvbWVkaXVtL2xvb3NlIGFuZCByZXR1cm4gb25seSB0aGUgd2lubmVyICovXG4gIGF1dG9QaWNrQmVzdFBlclJhdGlvPzogYm9vbGVhbjtcbiAgLyoqIEpQRUcgcXVhbGl0eSAoMC4uMSkgZm9yIGZpbmFsIHNhdmUgKGRlZmF1bHQ6IDEpICovXG4gIHF1YWxpdHk/OiBudW1iZXI7XG59XG5cbi8vIFBhZGRpbmcgcGVyY2VudGFnZXMgZm9yIHRyaW8gdmFyaWFudHNcbmNvbnN0IFBBRCA9IHsgdGlnaHQ6IDAuMDYsIG1lZGl1bTogMC4xMiwgbG9vc2U6IDAuMiB9O1xuXG4vLyBUaGlzIGZ1bmN0aW9uIHdhcyByZW1vdmVkIGFuZCByZXBsYWNlZCB3aXRoIGdlbmVyYXRlVHJpb0Nyb3BzIHdoaWNoIGhhcyBjbGVhbmVyIGltcGxlbWVudGF0aW9uXG5cbi8qKlxuICogSW50ZXJuYWwgaGVscGVyIHRvIGNvbXB1dGUgY3JvcCBmb3IgcmF0aW8gKGlmIGV4cG9zZWQgYnkgQXV0b0Nyb3BFbmdpbmUpXG4gKiBUaGlzIHJldXNlcyB0aGUgbG9naWMgZnJvbSBBdXRvQ3JvcEVuZ2luZSBidXQgd2l0aCBjdXN0b20gcGFkZGluZ1xuICovXG5mdW5jdGlvbiBjb21wdXRlQ3JvcEZvclJhdGlvKFxuICBmb2N1czogUmVjdCxcbiAgaW1nVzogbnVtYmVyLFxuICBpbWdIOiBudW1iZXIsXG4gIHJhdGlvOiBzdHJpbmcsXG4gIHBhZFBjdDogbnVtYmVyXG4pOiBSZWN0IHtcbiAgY29uc3QgcmF0aW9Ub051bWJlciA9IChyOiBzdHJpbmcpOiBudW1iZXIgPT4ge1xuICAgIGlmIChyID09PSBcIkZSRUVcIikgcmV0dXJuIE5hTjtcbiAgICBjb25zdCBwYXJ0cyA9IHIuc3BsaXQoXCI6XCIpO1xuICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDIpIHJldHVybiBOYU47XG4gICAgY29uc3QgYSA9IE51bWJlcihwYXJ0c1swXSk7XG4gICAgY29uc3QgYiA9IE51bWJlcihwYXJ0c1sxXSk7XG4gICAgaWYgKCFhIHx8ICFiIHx8IGlzTmFOKGEpIHx8IGlzTmFOKGIpKSByZXR1cm4gTmFOO1xuICAgIHJldHVybiBhIC8gYjtcbiAgfTtcblxuICBjb25zdCBwYWRSZWN0ID0gKHI6IFJlY3QsIGltZ1dpZHRoOiBudW1iZXIsIGltZ0hlaWdodDogbnVtYmVyLCBwYWQ6IG51bWJlcik6IFJlY3QgPT4ge1xuICAgIGNvbnN0IGNsYW1wID0gKHY6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKSA9PiBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgdikpO1xuICAgIGNvbnN0IHBhZFggPSByLndpZHRoICogcGFkO1xuICAgIGNvbnN0IHBhZFkgPSByLmhlaWdodCAqIHBhZDtcbiAgICBjb25zdCB4ID0gY2xhbXAoci54IC0gcGFkWCwgMCwgaW1nV2lkdGgpO1xuICAgIGNvbnN0IHkgPSBjbGFtcChyLnkgLSBwYWRZLCAwLCBpbWdIZWlnaHQpO1xuICAgIGNvbnN0IHdpZHRoID0gY2xhbXAoci53aWR0aCArIHBhZFggKiAyLCAxLCBpbWdXaWR0aCAtIHgpO1xuICAgIGNvbnN0IGhlaWdodCA9IGNsYW1wKHIuaGVpZ2h0ICsgcGFkWSAqIDIsIDEsIGltZ0hlaWdodCAtIHkpO1xuICAgIHJldHVybiB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfTtcbiAgfTtcblxuICBjb25zdCBhciA9IHJhdGlvVG9OdW1iZXIocmF0aW8pO1xuICBjb25zdCBwYWRkZWQgPSBwYWRSZWN0KGZvY3VzLCBpbWdXLCBpbWdILCBwYWRQY3QpO1xuICBjb25zdCBjeCA9IHBhZGRlZC54ICsgcGFkZGVkLndpZHRoIC8gMjtcbiAgY29uc3QgY3kgPSBwYWRkZWQueSArIHBhZGRlZC5oZWlnaHQgLyAyO1xuXG4gIGxldCB3aWR0aDogbnVtYmVyO1xuICBsZXQgaGVpZ2h0OiBudW1iZXI7XG4gIGNvbnN0IGZvY3VzQVIgPSBwYWRkZWQud2lkdGggLyBwYWRkZWQuaGVpZ2h0O1xuXG4gIGlmIChpc05hTihhcikpIHtcbiAgICB3aWR0aCA9IHBhZGRlZC53aWR0aDtcbiAgICBoZWlnaHQgPSBwYWRkZWQuaGVpZ2h0O1xuICB9IGVsc2UgaWYgKGZvY3VzQVIgPj0gYXIpIHtcbiAgICB3aWR0aCA9IHBhZGRlZC53aWR0aDtcbiAgICBoZWlnaHQgPSB3aWR0aCAvIGFyO1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9IHBhZGRlZC5oZWlnaHQ7XG4gICAgd2lkdGggPSBoZWlnaHQgKiBhcjtcbiAgfVxuXG4gIHdpZHRoID0gTWF0aC5taW4od2lkdGgsIGltZ1cpO1xuICBoZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIGltZ0gpO1xuXG4gIGNvbnN0IGNsYW1wID0gKHY6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKSA9PiBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgdikpO1xuICBsZXQgeCA9IGN4IC0gd2lkdGggLyAyO1xuICBsZXQgeSA9IGN5IC0gaGVpZ2h0IC8gMjtcblxuICB4ID0gY2xhbXAoeCwgMCwgaW1nVyAtIHdpZHRoKTtcbiAgeSA9IGNsYW1wKHksIDAsIGltZ0ggLSBoZWlnaHQpO1xuXG4gIHJldHVybiB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSB0cmlvIGNyb3BzICh0aWdodC9tZWRpdW0vbG9vc2UpIGZvciBhIGdpdmVuIHJhdGlvIGFuZCBmb2N1c1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVUcmlvQ3JvcHMoXG4gIHVyaTogc3RyaW5nLFxuICByYXRpbzogS25vd25SYXRpbyxcbiAgZGV0ZWN0aW9uOiBBdXRvQ3JvcFJlc3VsdFxuKTogUHJvbWlzZTxBcnJheTx7IGtpbmQ6IFRyaW9LaW5kOyBjcm9wOiBSZWN0IH0+PiB7XG4gIGNvbnN0IHsgZm9jdXMsIHNpemUgfSA9IGRldGVjdGlvbjtcblxuICAvLyBCdWlsZCB0cmlvIGNyb3BzIHdpdGggdmFyaWVkIHBhZGRpbmdcbiAgY29uc3QgY3JvcHM6IEFycmF5PHsga2luZDogVHJpb0tpbmQ7IGNyb3A6IFJlY3QgfT4gPSBbXTtcbiAgXG4gIGZvciAoY29uc3Qga2luZCBvZiBbXCJ0aWdodFwiLCBcIm1lZGl1bVwiLCBcImxvb3NlXCJdIGFzIFRyaW9LaW5kW10pIHtcbiAgICBjb25zdCBwYWRQY3QgPSBQQURba2luZF07XG4gICAgY29uc3QgY3JvcCA9IGNvbXB1dGVDcm9wRm9yUmF0aW8oZm9jdXMsIHNpemUudywgc2l6ZS5oLCByYXRpbywgcGFkUGN0KTtcbiAgICBjcm9wcy5wdXNoKHsga2luZCwgY3JvcCB9KTtcbiAgfVxuXG4gIHJldHVybiBjcm9wcztcbn1cblxuLyoqXG4gKiBFeHBvcnQgdWx0cmEgdmFyaWFudHMgZm9yIG11bHRpcGxlIHJhdGlvc1xuICogUHJvZHVjZXMgMyBjcm9wcyAodGlnaHQvbWVkaXVtL2xvb3NlKSBmb3IgZWFjaCByYXRpbywgdXBzY2FsZWQgdG8gdGFyZ2V0IHJlc29sdXRpb25cbiAqIE5vdyBzdXBwb3J0cyB0aWxlLWJhc2VkIHVwc2NhbGluZywgdW5zaGFycCBtYXNrLCBhbmQgYXV0b21hdGljIHF1YWxpdHkgc2VsZWN0aW9uXG4gKiBcbiAqIEBwYXJhbSB1cmkgLSBTb3VyY2UgaW1hZ2UgVVJJXG4gKiBAcGFyYW0gcmF0aW9zIC0gQXNwZWN0IHJhdGlvcyB0byBnZW5lcmF0ZSAoZGVmYXVsdHMgdG8gREVGQVVMVF9SQVRJT1MpXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucyBpbmNsdWRpbmcgc2hhcnBlbiwgdGlsZWQsIGF1dG9QaWNrQmVzdFBlclJhdGlvXG4gKiBAcmV0dXJucyBBcnJheSBvZiBVbHRyYVZhcmlhbnQgb2JqZWN0c1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhwb3J0VWx0cmFWYXJpYW50cyhcbiAgdXJpOiBzdHJpbmcsXG4gIHJhdGlvczogS25vd25SYXRpb1tdID0gREVGQVVMVF9SQVRJT1MsXG4gIG9wdGlvbnM6IFVsdHJhT3B0aW9ucyAmIHtcbiAgICBvblByb2dyZXNzPzogKHByb2dyZXNzOiBudW1iZXIsIHZhcmlhbnQ6IFVsdHJhVmFyaWFudCB8IG51bGwpID0+IHZvaWQ7XG4gICAgbWF4Q29uY3VycmVuY3k/OiBudW1iZXI7XG4gIH0gPSB7fVxuKTogUHJvbWlzZTxVbHRyYVZhcmlhbnRbXT4ge1xuICBjb25zdCB7XG4gICAgb25Qcm9ncmVzcyxcbiAgICBtYXhDb25jdXJyZW5jeSA9IDEsXG4gICAgc2hhcnBlbixcbiAgICB0aWxlZCA9IGZhbHNlLFxuICAgIGF1dG9QaWNrQmVzdFBlclJhdGlvID0gZmFsc2UsXG4gICAgcXVhbGl0eSA9IDEsXG4gIH0gPSBvcHRpb25zO1xuXG4gIC8vIERldGVjdCBmb2N1cyBvbmNlIGZvciBhbGwgcmF0aW9zXG4gIGNvbnN0IGRldGVjdGlvbiA9IGF3YWl0IEF1dG9Dcm9wRW5naW5lLmRldGVjdCh1cmksIHsgZXllV2VpZ2h0OiAwLjYsIHBhZFBjdDogMC4xNiB9KTtcbiAgaWYgKCFkZXRlY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGV0ZWN0IHN1YmplY3QgZm9jdXNcIik7XG4gIH1cblxuICBjb25zdCBhbGxWYXJpYW50czogVWx0cmFWYXJpYW50W10gPSBbXTtcbiAgbGV0IGNvbXBsZXRlZCA9IDA7XG4gIGNvbnN0IHRvdGFsID0gcmF0aW9zLmxlbmd0aCAqIDM7IC8vIDMgdmFyaWFudHMgcGVyIHJhdGlvXG5cbiAgLy8gUHJvY2VzcyByYXRpb3Mgc2VxdWVudGlhbGx5IHRvIGF2b2lkIG92ZXJ3aGVsbWluZyBtZW1vcnlcbiAgZm9yIChjb25zdCByYXRpbyBvZiByYXRpb3MpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBRdWFsaXR5VGFyZ2V0c1tyYXRpb107XG4gICAgXG4gICAgLy8gR2VuZXJhdGUgdHJpbyBjcm9wcyBmb3IgdGhpcyByYXRpb1xuICAgIGNvbnN0IHRyaW9zID0gYXdhaXQgZ2VuZXJhdGVUcmlvQ3JvcHModXJpLCByYXRpbywgZGV0ZWN0aW9uKTtcbiAgICBcbiAgICAvLyBDb2xsZWN0IGNhbmRpZGF0ZXMgZm9yIHRoaXMgcmF0aW8gaWYgYXV0by1waWNraW5nXG4gICAgY29uc3QgY2FuZGlkYXRlczogVWx0cmFWYXJpYW50W10gPSBbXTtcbiAgICBcbiAgICAvLyBQcm9jZXNzIGVhY2ggdHJpbyB2YXJpYW50XG4gICAgZm9yIChjb25zdCB0cmlvIG9mIHRyaW9zKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBBcHBseSBjcm9wXG4gICAgICAgIGNvbnN0IGNyb3BwZWRVcmkgPSBhd2FpdCBBdXRvQ3JvcEVuZ2luZS5hcHBseUNyb3AodXJpLCB0cmlvLmNyb3AsIHF1YWxpdHkpO1xuICAgICAgICBcbiAgICAgICAgLy8gVXBzY2FsZSB0byB0YXJnZXQgcmVzb2x1dGlvblxuICAgICAgICBsZXQgdXBzY2FsZWRVcmk6IHN0cmluZztcbiAgICAgICAgXG4gICAgICAgIGlmICh0aWxlZCkge1xuICAgICAgICAgIC8vIFVzZSB0aWxlLWJhc2VkIHVwc2NhbGVyIGZvciBsYXJnZSBpbWFnZXNcbiAgICAgICAgICB1cHNjYWxlZFVyaSA9IGF3YWl0IHRpbGVVcHNjYWxlQXV0byhjcm9wcGVkVXJpLCB7XG4gICAgICAgICAgICB0YXJnZXRXOiB0YXJnZXQubWluVyxcbiAgICAgICAgICAgIHRhcmdldEg6IHRhcmdldC5taW5ILFxuICAgICAgICAgICAgcXVhbGl0eSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBVc2UgU3VwZXJSZXMgcGlwZWxpbmUgKHN1cHBvcnRzIG11bHRpcGxlIGJhY2tlbmRzKVxuICAgICAgICAgIHVwc2NhbGVkVXJpID0gYXdhaXQgU3VwZXJSZXMudXBzY2FsZShjcm9wcGVkVXJpLCB0YXJnZXQubWluVywgdGFyZ2V0Lm1pbkgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBBcHBseSB1bnNoYXJwIG1hc2sgaWYgcmVxdWVzdGVkXG4gICAgICAgIGNvbnN0IGZpbmFsVXJpID0gc2hhcnBlblxuICAgICAgICAgID8gYXdhaXQgdW5zaGFycE1hc2sodXBzY2FsZWRVcmksIHsgLi4uc2hhcnBlbiwgcXVhbGl0eSwgZm9ybWF0OiBcImpwZ1wiIH0pXG4gICAgICAgICAgOiB1cHNjYWxlZFVyaTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHZhcmlhbnQ6IFVsdHJhVmFyaWFudCA9IHtcbiAgICAgICAgICByYXRpbyxcbiAgICAgICAgICBraW5kOiB0cmlvLmtpbmQsXG4gICAgICAgICAgY3JvcDogdHJpby5jcm9wLFxuICAgICAgICAgIG91dFVyaTogZmluYWxVcmksXG4gICAgICAgICAgbWV0aG9kOiBkZXRlY3Rpb24ubWV0aG9kLFxuICAgICAgICAgIHRhcmdldFc6IHRhcmdldC5taW5XLFxuICAgICAgICAgIHRhcmdldEg6IHRhcmdldC5taW5ILFxuICAgICAgICAgIHNpemU6IGRldGVjdGlvbi5zaXplLFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgaWYgKGF1dG9QaWNrQmVzdFBlclJhdGlvKSB7XG4gICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHZhcmlhbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFsbFZhcmlhbnRzLnB1c2godmFyaWFudCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbXBsZXRlZCsrO1xuICAgICAgICBvblByb2dyZXNzPy4oY29tcGxldGVkIC8gdG90YWwsIHZhcmlhbnQpO1xuICAgICAgICBvblByb2dyZXNzPy4oY29tcGxldGVkIC8gdG90YWwsIG51bGwpO1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAgICAgY29uc3QgZXJyID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFN0cmluZyhlcnJvcikpO1xuICAgICAgICBsb2dnZXIuZXJyb3IoYEZhaWxlZCB0byBnZW5lcmF0ZSB2YXJpYW50YCwgeyByYXRpbywga2luZDogdHJpby5raW5kLCBlcnJvcjogZXJyIH0pO1xuICAgICAgICAvLyBDb250aW51ZSB3aXRoIG5leHQgdmFyaWFudFxuICAgICAgICBjb21wbGV0ZWQrKztcbiAgICAgICAgb25Qcm9ncmVzcz8uKGNvbXBsZXRlZCAvIHRvdGFsLCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gQXV0by1waWNrIHRoZSBzaGFycGVzdCBpZiBlbmFibGVkXG4gICAgaWYgKGF1dG9QaWNrQmVzdFBlclJhdGlvICYmIGNhbmRpZGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgd2lubmVyID0gYXdhaXQgcGlja1NoYXJwZXN0KFxuICAgICAgICAgIGNhbmRpZGF0ZXMubWFwKChjKSA9PiBjLm91dFVyaSksXG4gICAgICAgICAgNzIwLFxuICAgICAgICAgIDAuNzJcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgYmVzdCA9IGNhbmRpZGF0ZXMuZmluZCgoYykgPT4gYy5vdXRVcmkgPT09IHdpbm5lcik7XG4gICAgICAgIFxuICAgICAgICBpZiAoYmVzdCkge1xuICAgICAgICAgIGFsbFZhcmlhbnRzLnB1c2goYmVzdCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihTdHJpbmcoZXJyb3IpKTtcbiAgICAgICAgbG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gcGljayBzaGFycGVzdGAsIHsgcmF0aW8sIGVycm9yOiBlcnIgfSk7XG4gICAgICAgIC8vIEZhbGxiYWNrOiBwdXNoIGZpcnN0IGNhbmRpZGF0ZVxuICAgICAgICBjb25zdCBmYWxsYmFjayA9IGNhbmRpZGF0ZXNbMF07XG4gICAgICAgIGlmIChmYWxsYmFjaykge1xuICAgICAgICAgIGFsbFZhcmlhbnRzLnB1c2goZmFsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFsbFZhcmlhbnRzO1xufVxuXG4vKipcbiAqIEdldCBwcmV2aWV3IFVSSXMgZm9yIHVsdHJhIHZhcmlhbnRzIChzbWFsbCB0aHVtYm5haWxzKVxuICogVXNlZnVsIGZvciBVSSBwcmV2aWV3IGJlZm9yZSBmdWxsIGV4cG9ydFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJldmlld1VsdHJhVmFyaWFudHMoXG4gIHVyaTogc3RyaW5nLFxuICByYXRpb3M6IEtub3duUmF0aW9bXSA9IERFRkFVTFRfUkFUSU9TXG4pOiBQcm9taXNlPEFycmF5PHsgdmFyaWFudDogVWx0cmFWYXJpYW50OyB0aHVtYlVyaTogc3RyaW5nIH0+PiB7XG4gIGNvbnN0IHZhcmlhbnRzID0gYXdhaXQgZXhwb3J0VWx0cmFWYXJpYW50cyh1cmksIHJhdGlvcywgeyBvblByb2dyZXNzOiAoKSA9PiB7fSB9KTtcbiAgXG4gIC8vIEdlbmVyYXRlIHRodW1ibmFpbHMgKHNtYWxsIHByZXZpZXdzKVxuICBjb25zdCB3aXRoVGh1bWJzOiBBcnJheTx7IHZhcmlhbnQ6IFVsdHJhVmFyaWFudDsgdGh1bWJVcmk6IHN0cmluZyB9PiA9IFtdO1xuICBcbiAgZm9yIChjb25zdCB2YXJpYW50IG9mIHZhcmlhbnRzKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIENyZWF0ZSBzbWFsbCB0aHVtYm5haWwgZm9yIHByZXZpZXdcbiAgICAgIGNvbnN0IHsgbWFuaXB1bGF0ZUFzeW5jIH0gPSBhd2FpdCBpbXBvcnQoXCJleHBvLWltYWdlLW1hbmlwdWxhdG9yXCIpO1xuICAgICAgY29uc3QgeyBTYXZlRm9ybWF0IH0gPSBhd2FpdCBpbXBvcnQoXCJleHBvLWltYWdlLW1hbmlwdWxhdG9yXCIpO1xuICAgICAgXG4gICAgICBjb25zdCB0aHVtYiA9IGF3YWl0IG1hbmlwdWxhdGVBc3luYyhcbiAgICAgICAgdmFyaWFudC5vdXRVcmksXG4gICAgICAgIFt7IHJlc2l6ZTogeyB3aWR0aDogMjQwLCBoZWlnaHQ6IDI0MCB9IH1dLFxuICAgICAgICB7IGNvbXByZXNzOiAwLjksIGZvcm1hdDogU2F2ZUZvcm1hdC5KUEVHIH1cbiAgICAgICk7XG4gICAgICBcbiAgICAgIHdpdGhUaHVtYnMucHVzaCh7IHZhcmlhbnQsIHRodW1iVXJpOiB0aHVtYi51cmkgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAgIGNvbnN0IGVyciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihTdHJpbmcoZXJyb3IpKTtcbiAgICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byBnZW5lcmF0ZSB0aHVtYm5haWxcIiwgeyBlcnJvcjogZXJyIH0pO1xuICAgICAgd2l0aFRodW1icy5wdXNoKHsgdmFyaWFudCwgdGh1bWJVcmk6IHZhcmlhbnQub3V0VXJpIH0pO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHdpdGhUaHVtYnM7XG59XG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFNQSxJQUFBQSxlQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxlQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxjQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxhQUFBLEdBQUFMLE9BQUE7QUFFQSxJQUFBTSxPQUFBLEdBQUFOLE9BQUE7QUFBNEMsU0FBQU8sd0JBQUFDLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFILHVCQUFBLFlBQUFBLHdCQUFBQyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEdBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsR0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsR0FBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsR0FBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxHQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxHQUFBLElBQUFkLENBQUEsQ0FBQWMsR0FBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQUFBLFNBQUFtQixRQUFBcEIsQ0FBQSxFQUFBRyxDQUFBLFFBQUFGLENBQUEsR0FBQWdCLE1BQUEsQ0FBQUksSUFBQSxDQUFBckIsQ0FBQSxPQUFBaUIsTUFBQSxDQUFBSyxxQkFBQSxRQUFBaEIsQ0FBQSxHQUFBVyxNQUFBLENBQUFLLHFCQUFBLENBQUF0QixDQUFBLEdBQUFHLENBQUEsS0FBQUcsQ0FBQSxHQUFBQSxDQUFBLENBQUFpQixNQUFBLFdBQUFwQixDQUFBLFdBQUFjLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQUcsQ0FBQSxFQUFBcUIsVUFBQSxPQUFBdkIsQ0FBQSxDQUFBd0IsSUFBQSxDQUFBQyxLQUFBLENBQUF6QixDQUFBLEVBQUFLLENBQUEsWUFBQUwsQ0FBQTtBQUFBLFNBQUEwQixjQUFBM0IsQ0FBQSxhQUFBRyxDQUFBLE1BQUFBLENBQUEsR0FBQXlCLFNBQUEsQ0FBQUMsTUFBQSxFQUFBMUIsQ0FBQSxVQUFBRixDQUFBLFdBQUEyQixTQUFBLENBQUF6QixDQUFBLElBQUF5QixTQUFBLENBQUF6QixDQUFBLFFBQUFBLENBQUEsT0FBQWlCLE9BQUEsQ0FBQUgsTUFBQSxDQUFBaEIsQ0FBQSxPQUFBNkIsT0FBQSxXQUFBM0IsQ0FBQSxRQUFBNEIsZ0JBQUEsQ0FBQXJCLE9BQUEsRUFBQVYsQ0FBQSxFQUFBRyxDQUFBLEVBQUFGLENBQUEsQ0FBQUUsQ0FBQSxTQUFBYyxNQUFBLENBQUFlLHlCQUFBLEdBQUFmLE1BQUEsQ0FBQWdCLGdCQUFBLENBQUFqQyxDQUFBLEVBQUFpQixNQUFBLENBQUFlLHlCQUFBLENBQUEvQixDQUFBLEtBQUFtQixPQUFBLENBQUFILE1BQUEsQ0FBQWhCLENBQUEsR0FBQTZCLE9BQUEsV0FBQTNCLENBQUEsSUFBQWMsTUFBQSxDQUFBQyxjQUFBLENBQUFsQixDQUFBLEVBQUFHLENBQUEsRUFBQWMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBbEIsQ0FBQSxFQUFBRSxDQUFBLGlCQUFBSCxDQUFBO0FBNkI1QyxJQUFNa0MsR0FBRyxHQUFHO0VBQUVDLEtBQUssRUFBRSxJQUFJO0VBQUVDLE1BQU0sRUFBRSxJQUFJO0VBQUVDLEtBQUssRUFBRTtBQUFJLENBQUM7QUFRckQsU0FBU0MsbUJBQW1CQSxDQUMxQkMsS0FBVyxFQUNYQyxJQUFZLEVBQ1pDLElBQVksRUFDWkMsS0FBYSxFQUNiQyxNQUFjLEVBQ1I7RUFDTixJQUFNQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUl6QyxDQUFTLEVBQWE7SUFDM0MsSUFBSUEsQ0FBQyxLQUFLLE1BQU0sRUFBRSxPQUFPMEMsR0FBRztJQUM1QixJQUFNQyxLQUFLLEdBQUczQyxDQUFDLENBQUM0QyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzFCLElBQUlELEtBQUssQ0FBQ2pCLE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBT2dCLEdBQUc7SUFDbEMsSUFBTUcsQ0FBQyxHQUFHQyxNQUFNLENBQUNILEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixJQUFNSSxDQUFDLEdBQUdELE1BQU0sQ0FBQ0gsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQ0UsQ0FBQyxJQUFJLENBQUNFLENBQUMsSUFBSUMsS0FBSyxDQUFDSCxDQUFDLENBQUMsSUFBSUcsS0FBSyxDQUFDRCxDQUFDLENBQUMsRUFBRSxPQUFPTCxHQUFHO0lBQ2hELE9BQU9HLENBQUMsR0FBR0UsQ0FBQztFQUNkLENBQUM7RUFFRCxJQUFNRSxPQUFPLEdBQUcsU0FBVkEsT0FBT0EsQ0FBSWpELENBQU8sRUFBRWtELFFBQWdCLEVBQUVDLFNBQWlCLEVBQUVDLEdBQVcsRUFBVztJQUNuRixJQUFNQyxLQUFLLEdBQUcsU0FBUkEsS0FBS0EsQ0FBSUMsQ0FBUyxFQUFFQyxHQUFXLEVBQUVDLEdBQVc7TUFBQSxPQUFLQyxJQUFJLENBQUNELEdBQUcsQ0FBQ0QsR0FBRyxFQUFFRSxJQUFJLENBQUNGLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFRixDQUFDLENBQUMsQ0FBQztJQUFBO0lBQ3RGLElBQU1JLElBQUksR0FBRzFELENBQUMsQ0FBQzJELEtBQUssR0FBR1AsR0FBRztJQUMxQixJQUFNUSxJQUFJLEdBQUc1RCxDQUFDLENBQUM2RCxNQUFNLEdBQUdULEdBQUc7SUFDM0IsSUFBTVUsQ0FBQyxHQUFHVCxLQUFLLENBQUNyRCxDQUFDLENBQUM4RCxDQUFDLEdBQUdKLElBQUksRUFBRSxDQUFDLEVBQUVSLFFBQVEsQ0FBQztJQUN4QyxJQUFNYSxDQUFDLEdBQUdWLEtBQUssQ0FBQ3JELENBQUMsQ0FBQytELENBQUMsR0FBR0gsSUFBSSxFQUFFLENBQUMsRUFBRVQsU0FBUyxDQUFDO0lBQ3pDLElBQU1RLEtBQUssR0FBR04sS0FBSyxDQUFDckQsQ0FBQyxDQUFDMkQsS0FBSyxHQUFHRCxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRVIsUUFBUSxHQUFHWSxDQUFDLENBQUM7SUFDeEQsSUFBTUQsTUFBTSxHQUFHUixLQUFLLENBQUNyRCxDQUFDLENBQUM2RCxNQUFNLEdBQUdELElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFVCxTQUFTLEdBQUdZLENBQUMsQ0FBQztJQUMzRCxPQUFPO01BQUVELENBQUMsRUFBREEsQ0FBQztNQUFFQyxDQUFDLEVBQURBLENBQUM7TUFBRUosS0FBSyxFQUFMQSxLQUFLO01BQUVFLE1BQU0sRUFBTkE7SUFBTyxDQUFDO0VBQ2hDLENBQUM7RUFFRCxJQUFNRyxFQUFFLEdBQUd2QixhQUFhLENBQUNGLEtBQUssQ0FBQztFQUMvQixJQUFNMEIsTUFBTSxHQUFHaEIsT0FBTyxDQUFDYixLQUFLLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFRSxNQUFNLENBQUM7RUFDakQsSUFBTTBCLEVBQUUsR0FBR0QsTUFBTSxDQUFDSCxDQUFDLEdBQUdHLE1BQU0sQ0FBQ04sS0FBSyxHQUFHLENBQUM7RUFDdEMsSUFBTVEsRUFBRSxHQUFHRixNQUFNLENBQUNGLENBQUMsR0FBR0UsTUFBTSxDQUFDSixNQUFNLEdBQUcsQ0FBQztFQUV2QyxJQUFJRixLQUFhO0VBQ2pCLElBQUlFLE1BQWM7RUFDbEIsSUFBTU8sT0FBTyxHQUFHSCxNQUFNLENBQUNOLEtBQUssR0FBR00sTUFBTSxDQUFDSixNQUFNO0VBRTVDLElBQUliLEtBQUssQ0FBQ2dCLEVBQUUsQ0FBQyxFQUFFO0lBQ2JMLEtBQUssR0FBR00sTUFBTSxDQUFDTixLQUFLO0lBQ3BCRSxNQUFNLEdBQUdJLE1BQU0sQ0FBQ0osTUFBTTtFQUN4QixDQUFDLE1BQU0sSUFBSU8sT0FBTyxJQUFJSixFQUFFLEVBQUU7SUFDeEJMLEtBQUssR0FBR00sTUFBTSxDQUFDTixLQUFLO0lBQ3BCRSxNQUFNLEdBQUdGLEtBQUssR0FBR0ssRUFBRTtFQUNyQixDQUFDLE1BQU07SUFDTEgsTUFBTSxHQUFHSSxNQUFNLENBQUNKLE1BQU07SUFDdEJGLEtBQUssR0FBR0UsTUFBTSxHQUFHRyxFQUFFO0VBQ3JCO0VBRUFMLEtBQUssR0FBR0YsSUFBSSxDQUFDRixHQUFHLENBQUNJLEtBQUssRUFBRXRCLElBQUksQ0FBQztFQUM3QndCLE1BQU0sR0FBR0osSUFBSSxDQUFDRixHQUFHLENBQUNNLE1BQU0sRUFBRXZCLElBQUksQ0FBQztFQUUvQixJQUFNZSxLQUFLLEdBQUcsU0FBUkEsS0FBS0EsQ0FBSUMsQ0FBUyxFQUFFQyxHQUFXLEVBQUVDLEdBQVc7SUFBQSxPQUFLQyxJQUFJLENBQUNELEdBQUcsQ0FBQ0QsR0FBRyxFQUFFRSxJQUFJLENBQUNGLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFRixDQUFDLENBQUMsQ0FBQztFQUFBO0VBQ3RGLElBQUlRLENBQUMsR0FBR0ksRUFBRSxHQUFHUCxLQUFLLEdBQUcsQ0FBQztFQUN0QixJQUFJSSxDQUFDLEdBQUdJLEVBQUUsR0FBR04sTUFBTSxHQUFHLENBQUM7RUFFdkJDLENBQUMsR0FBR1QsS0FBSyxDQUFDUyxDQUFDLEVBQUUsQ0FBQyxFQUFFekIsSUFBSSxHQUFHc0IsS0FBSyxDQUFDO0VBQzdCSSxDQUFDLEdBQUdWLEtBQUssQ0FBQ1UsQ0FBQyxFQUFFLENBQUMsRUFBRXpCLElBQUksR0FBR3VCLE1BQU0sQ0FBQztFQUU5QixPQUFPO0lBQUVDLENBQUMsRUFBREEsQ0FBQztJQUFFQyxDQUFDLEVBQURBLENBQUM7SUFBRUosS0FBSyxFQUFMQSxLQUFLO0lBQUVFLE1BQU0sRUFBTkE7RUFBTyxDQUFDO0FBQ2hDO0FBQUMsU0FLcUJRLGlCQUFpQkEsQ0FBQUMsRUFBQSxFQUFBQyxHQUFBLEVBQUFDLEdBQUE7RUFBQSxPQUFBQyxrQkFBQSxDQUFBbEQsS0FBQSxPQUFBRSxTQUFBO0FBQUE7QUFBQSxTQUFBZ0QsbUJBQUE7RUFBQUEsa0JBQUEsT0FBQUMsa0JBQUEsQ0FBQW5FLE9BQUEsRUFBaEMsV0FDTG9FLEdBQVcsRUFDWHBDLEtBQWlCLEVBQ2pCcUMsU0FBeUIsRUFDdUI7SUFDaEQsSUFBUXhDLEtBQUssR0FBV3dDLFNBQVMsQ0FBekJ4QyxLQUFLO01BQUV5QyxJQUFJLEdBQUtELFNBQVMsQ0FBbEJDLElBQUk7SUFHbkIsSUFBTUMsS0FBNEMsR0FBRyxFQUFFO0lBRXZELEtBQUssSUFBTUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBZ0I7TUFDN0QsSUFBTXZDLE1BQU0sR0FBR1QsR0FBRyxDQUFDZ0QsSUFBSSxDQUFDO01BQ3hCLElBQU1DLElBQUksR0FBRzdDLG1CQUFtQixDQUFDQyxLQUFLLEVBQUV5QyxJQUFJLENBQUNJLENBQUMsRUFBRUosSUFBSSxDQUFDSyxDQUFDLEVBQUUzQyxLQUFLLEVBQUVDLE1BQU0sQ0FBQztNQUN0RXNDLEtBQUssQ0FBQ3hELElBQUksQ0FBQztRQUFFeUQsSUFBSSxFQUFKQSxJQUFJO1FBQUVDLElBQUksRUFBSkE7TUFBSyxDQUFDLENBQUM7SUFDNUI7SUFFQSxPQUFPRixLQUFLO0VBQ2QsQ0FBQztFQUFBLE9BQUFMLGtCQUFBLENBQUFsRCxLQUFBLE9BQUFFLFNBQUE7QUFBQTtBQUFBLFNBWXFCMEQsbUJBQW1CQSxDQUFBQyxHQUFBO0VBQUEsT0FBQUMsb0JBQUEsQ0FBQTlELEtBQUEsT0FBQUUsU0FBQTtBQUFBO0FBQUEsU0FBQTRELHFCQUFBO0VBQUFBLG9CQUFBLE9BQUFYLGtCQUFBLENBQUFuRSxPQUFBLEVBQWxDLFdBQ0xvRSxHQUFXLEVBTWM7SUFBQSxJQUx6QlcsTUFBb0IsR0FBQTdELFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUE4RCxTQUFBLEdBQUE5RCxTQUFBLE1BQUcrRCw4QkFBYztJQUFBLElBQ3JDQyxPQUdDLEdBQUFoRSxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBOEQsU0FBQSxHQUFBOUQsU0FBQSxNQUFHLENBQUMsQ0FBQztJQUVOLElBQ0VpRSxVQUFVLEdBTVJELE9BQU8sQ0FOVEMsVUFBVTtNQUFBQyxxQkFBQSxHQU1SRixPQUFPLENBTFRHLGNBQWM7TUFBZEEsY0FBYyxHQUFBRCxxQkFBQSxjQUFHLENBQUMsR0FBQUEscUJBQUE7TUFDbEJFLE9BQU8sR0FJTEosT0FBTyxDQUpUSSxPQUFPO01BQUFDLGNBQUEsR0FJTEwsT0FBTyxDQUhUTSxLQUFLO01BQUxBLEtBQUssR0FBQUQsY0FBQSxjQUFHLEtBQUssR0FBQUEsY0FBQTtNQUFBRSxxQkFBQSxHQUdYUCxPQUFPLENBRlRRLG9CQUFvQjtNQUFwQkEsb0JBQW9CLEdBQUFELHFCQUFBLGNBQUcsS0FBSyxHQUFBQSxxQkFBQTtNQUFBRSxnQkFBQSxHQUUxQlQsT0FBTyxDQURUVSxPQUFPO01BQVBBLE9BQU8sR0FBQUQsZ0JBQUEsY0FBRyxDQUFDLEdBQUFBLGdCQUFBO0lBSWIsSUFBTXRCLFNBQVMsU0FBU3dCLDhCQUFjLENBQUNDLE1BQU0sQ0FBQzFCLEdBQUcsRUFBRTtNQUFFMkIsU0FBUyxFQUFFLEdBQUc7TUFBRTlELE1BQU0sRUFBRTtJQUFLLENBQUMsQ0FBQztJQUNwRixJQUFJLENBQUNvQyxTQUFTLEVBQUU7TUFDZCxNQUFNLElBQUkyQixLQUFLLENBQUMsZ0NBQWdDLENBQUM7SUFDbkQ7SUFFQSxJQUFNQyxXQUEyQixHQUFHLEVBQUU7SUFDdEMsSUFBSUMsU0FBUyxHQUFHLENBQUM7SUFDakIsSUFBTUMsS0FBSyxHQUFHcEIsTUFBTSxDQUFDNUQsTUFBTSxHQUFHLENBQUM7SUFBQyxJQUFBaUYsS0FBQSxhQUFBQSxNQUFBLEVBR0o7TUFDMUIsSUFBTUMsTUFBTSxHQUFHQyw4QkFBYyxDQUFDdEUsS0FBSyxDQUFDO01BR3BDLElBQU11RSxLQUFLLFNBQVN6QyxpQkFBaUIsQ0FBQ00sR0FBRyxFQUFFcEMsS0FBSyxFQUFFcUMsU0FBUyxDQUFDO01BRzVELElBQU1tQyxVQUEwQixHQUFHLEVBQUU7TUFHckMsS0FBSyxJQUFNQyxJQUFJLElBQUlGLEtBQUssRUFBRTtRQUN4QixJQUFJO1VBRUYsSUFBTUcsVUFBVSxTQUFTYiw4QkFBYyxDQUFDYyxTQUFTLENBQUN2QyxHQUFHLEVBQUVxQyxJQUFJLENBQUNoQyxJQUFJLEVBQUVtQixPQUFPLENBQUM7VUFHMUUsSUFBSWdCLFdBQW1CO1VBRXZCLElBQUlwQixLQUFLLEVBQUU7WUFFVG9CLFdBQVcsU0FBUyxJQUFBQyw4QkFBZSxFQUFDSCxVQUFVLEVBQUU7Y0FDOUNJLE9BQU8sRUFBRVQsTUFBTSxDQUFDVSxJQUFJO2NBQ3BCQyxPQUFPLEVBQUVYLE1BQU0sQ0FBQ1ksSUFBSTtjQUNwQnJCLE9BQU8sRUFBUEE7WUFDRixDQUFDLENBQUM7VUFDSixDQUFDLE1BQU07WUFFTGdCLFdBQVcsU0FBU00sa0JBQVEsQ0FBQ0MsT0FBTyxDQUFDVCxVQUFVLEVBQUVMLE1BQU0sQ0FBQ1UsSUFBSSxFQUFFVixNQUFNLENBQUNZLElBQUksQ0FBQztVQUM1RTtVQUdBLElBQU1HLFFBQVEsR0FBRzlCLE9BQU8sU0FDZCxJQUFBK0Isb0JBQVcsRUFBQ1QsV0FBVyxFQUFBM0YsYUFBQSxDQUFBQSxhQUFBLEtBQU9xRSxPQUFPO1lBQUVNLE9BQU8sRUFBUEEsT0FBTztZQUFFMEIsTUFBTSxFQUFFO1VBQUssRUFBRSxDQUFDLEdBQ3RFVixXQUFXO1VBRWYsSUFBTVcsT0FBcUIsR0FBRztZQUM1QnZGLEtBQUssRUFBTEEsS0FBSztZQUNMd0MsSUFBSSxFQUFFaUMsSUFBSSxDQUFDakMsSUFBSTtZQUNmQyxJQUFJLEVBQUVnQyxJQUFJLENBQUNoQyxJQUFJO1lBQ2YrQyxNQUFNLEVBQUVKLFFBQVE7WUFDaEJLLE1BQU0sRUFBRXBELFNBQVMsQ0FBQ29ELE1BQU07WUFDeEJYLE9BQU8sRUFBRVQsTUFBTSxDQUFDVSxJQUFJO1lBQ3BCQyxPQUFPLEVBQUVYLE1BQU0sQ0FBQ1ksSUFBSTtZQUNwQjNDLElBQUksRUFBRUQsU0FBUyxDQUFDQztVQUNsQixDQUFDO1VBRUQsSUFBSW9CLG9CQUFvQixFQUFFO1lBQ3hCYyxVQUFVLENBQUN6RixJQUFJLENBQUN3RyxPQUFPLENBQUM7VUFDMUIsQ0FBQyxNQUFNO1lBQ0x0QixXQUFXLENBQUNsRixJQUFJLENBQUN3RyxPQUFPLENBQUM7VUFDM0I7VUFFQXJCLFNBQVMsRUFBRTtVQUNYZixVQUFVLG9CQUFWQSxVQUFVLENBQUdlLFNBQVMsR0FBR0MsS0FBSyxFQUFFb0IsT0FBTyxDQUFDO1VBQ3hDcEMsVUFBVSxvQkFBVkEsVUFBVSxDQUFHZSxTQUFTLEdBQUdDLEtBQUssRUFBRSxJQUFJLENBQUM7UUFDdkMsQ0FBQyxDQUFDLE9BQU91QixLQUFjLEVBQUU7VUFDdkIsSUFBTUMsR0FBRyxHQUFHRCxLQUFLLFlBQVkxQixLQUFLLEdBQUcwQixLQUFLLEdBQUcsSUFBSTFCLEtBQUssQ0FBQzRCLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDLENBQUM7VUFDckVHLGNBQU0sQ0FBQ0gsS0FBSyxDQUFDLDRCQUE0QixFQUFFO1lBQUUxRixLQUFLLEVBQUxBLEtBQUs7WUFBRXdDLElBQUksRUFBRWlDLElBQUksQ0FBQ2pDLElBQUk7WUFBRWtELEtBQUssRUFBRUM7VUFBSSxDQUFDLENBQUM7VUFFbEZ6QixTQUFTLEVBQUU7VUFDWGYsVUFBVSxvQkFBVkEsVUFBVSxDQUFHZSxTQUFTLEdBQUdDLEtBQUssRUFBRSxJQUFJLENBQUM7UUFDdkM7TUFDRjtNQUdBLElBQUlULG9CQUFvQixJQUFJYyxVQUFVLENBQUNyRixNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2pELElBQUk7VUFDRixJQUFNMkcsTUFBTSxTQUFTLElBQUFDLDBCQUFZLEVBQy9CdkIsVUFBVSxDQUFDd0IsR0FBRyxDQUFDLFVBQUNDLENBQUM7WUFBQSxPQUFLQSxDQUFDLENBQUNULE1BQU07VUFBQSxFQUFDLEVBQy9CLEdBQUcsRUFDSCxJQUNGLENBQUM7VUFDRCxJQUFNVSxJQUFJLEdBQUcxQixVQUFVLENBQUMyQixJQUFJLENBQUMsVUFBQ0YsQ0FBQztZQUFBLE9BQUtBLENBQUMsQ0FBQ1QsTUFBTSxLQUFLTSxNQUFNO1VBQUEsRUFBQztVQUV4RCxJQUFJSSxJQUFJLEVBQUU7WUFDUmpDLFdBQVcsQ0FBQ2xGLElBQUksQ0FBQ21ILElBQUksQ0FBQztVQUN4QjtRQUNGLENBQUMsQ0FBQyxPQUFPUixLQUFjLEVBQUU7VUFDdkIsSUFBTUMsSUFBRyxHQUFHRCxLQUFLLFlBQVkxQixLQUFLLEdBQUcwQixLQUFLLEdBQUcsSUFBSTFCLEtBQUssQ0FBQzRCLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDLENBQUM7VUFDckVHLGNBQU0sQ0FBQ0gsS0FBSyxDQUFDLHlCQUF5QixFQUFFO1lBQUUxRixLQUFLLEVBQUxBLEtBQUs7WUFBRTBGLEtBQUssRUFBRUM7VUFBSSxDQUFDLENBQUM7VUFFOUQsSUFBTVMsUUFBUSxHQUFHNUIsVUFBVSxDQUFDLENBQUMsQ0FBQztVQUM5QixJQUFJNEIsUUFBUSxFQUFFO1lBQ1puQyxXQUFXLENBQUNsRixJQUFJLENBQUNxSCxRQUFRLENBQUM7VUFDNUI7UUFDRjtNQUNGO0lBQ0YsQ0FBQztJQXZGRCxLQUFLLElBQU1wRyxLQUFLLElBQUkrQyxNQUFNO01BQUEsT0FBQXFCLEtBQUE7SUFBQTtJQXlGMUIsT0FBT0gsV0FBVztFQUNwQixDQUFDO0VBQUEsT0FBQW5CLG9CQUFBLENBQUE5RCxLQUFBLE9BQUFFLFNBQUE7QUFBQTtBQUFBLFNBTXFCbUgsb0JBQW9CQSxDQUFBQyxHQUFBO0VBQUEsT0FBQUMscUJBQUEsQ0FBQXZILEtBQUEsT0FBQUUsU0FBQTtBQUFBO0FBQUEsU0FBQXFILHNCQUFBO0VBQUFBLHFCQUFBLE9BQUFwRSxrQkFBQSxDQUFBbkUsT0FBQSxFQUFuQyxXQUNMb0UsR0FBVyxFQUVrRDtJQUFBLElBRDdEVyxNQUFvQixHQUFBN0QsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQThELFNBQUEsR0FBQTlELFNBQUEsTUFBRytELDhCQUFjO0lBRXJDLElBQU11RCxRQUFRLFNBQVM1RCxtQkFBbUIsQ0FBQ1IsR0FBRyxFQUFFVyxNQUFNLEVBQUU7TUFBRUksVUFBVSxFQUFFLFNBQVpBLFVBQVVBLENBQUEsRUFBUSxDQUFDO0lBQUUsQ0FBQyxDQUFDO0lBR2pGLElBQU1zRCxVQUE4RCxHQUFHLEVBQUU7SUFFekUsS0FBSyxJQUFNbEIsT0FBTyxJQUFJaUIsUUFBUSxFQUFFO01BQzlCLElBQUk7UUFFRixJQUFBRSxhQUFBLFNBQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUFBQyxJQUFBO1lBQUEsT0FBQXhKLHVCQUFBLENBQUFQLE9BQUEsQ0FBeUMsd0JBQXdCO1VBQUE7VUFBekRnSyxlQUFlLEdBQUFKLGFBQUEsQ0FBZkksZUFBZTtRQUN2QixJQUFBQyxjQUFBLFNBQUFKLE9BQUEsQ0FBQUMsT0FBQSxHQUFBQyxJQUFBO1lBQUEsT0FBQXhKLHVCQUFBLENBQUFQLE9BQUEsQ0FBb0Msd0JBQXdCO1VBQUE7VUFBcERrSyxVQUFVLEdBQUFELGNBQUEsQ0FBVkMsVUFBVTtRQUVsQixJQUFNQyxLQUFLLFNBQVNILGVBQWUsQ0FDakN2QixPQUFPLENBQUNDLE1BQU0sRUFDZCxDQUFDO1VBQUUwQixNQUFNLEVBQUU7WUFBRTlGLEtBQUssRUFBRSxHQUFHO1lBQUVFLE1BQU0sRUFBRTtVQUFJO1FBQUUsQ0FBQyxDQUFDLEVBQ3pDO1VBQUU2RixRQUFRLEVBQUUsR0FBRztVQUFFN0IsTUFBTSxFQUFFMEIsVUFBVSxDQUFDSTtRQUFLLENBQzNDLENBQUM7UUFFRFgsVUFBVSxDQUFDMUgsSUFBSSxDQUFDO1VBQUV3RyxPQUFPLEVBQVBBLE9BQU87VUFBRThCLFFBQVEsRUFBRUosS0FBSyxDQUFDN0U7UUFBSSxDQUFDLENBQUM7TUFDbkQsQ0FBQyxDQUFDLE9BQU9zRCxLQUFjLEVBQUU7UUFDdkIsSUFBTUMsR0FBRyxHQUFHRCxLQUFLLFlBQVkxQixLQUFLLEdBQUcwQixLQUFLLEdBQUcsSUFBSTFCLEtBQUssQ0FBQzRCLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDLENBQUM7UUFDckVHLGNBQU0sQ0FBQ0gsS0FBSyxDQUFDLDhCQUE4QixFQUFFO1VBQUVBLEtBQUssRUFBRUM7UUFBSSxDQUFDLENBQUM7UUFDNURjLFVBQVUsQ0FBQzFILElBQUksQ0FBQztVQUFFd0csT0FBTyxFQUFQQSxPQUFPO1VBQUU4QixRQUFRLEVBQUU5QixPQUFPLENBQUNDO1FBQU8sQ0FBQyxDQUFDO01BQ3hEO0lBQ0Y7SUFFQSxPQUFPaUIsVUFBVTtFQUNuQixDQUFDO0VBQUEsT0FBQUYscUJBQUEsQ0FBQXZILEtBQUEsT0FBQUUsU0FBQTtBQUFBIiwiaWdub3JlTGlzdCI6W119