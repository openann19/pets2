{"version":3,"names":["_AutoCropEngine","require","_QualityTargets","_SuperRes","_TiledUpscaler","_Unsharp","_QualityScore","_logger","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","PAD","tight","medium","loose","computeCropForRatio","focus","imgW","imgH","ratio","padPct","ratioToNumber","NaN","parts","split","a","Number","b","isNaN","padRect","imgWidth","imgHeight","pad","clamp","v","min","max","Math","padX","width","padY","height","x","y","ar","padded","cx","cy","focusAR","generateTrioCrops","_x","_x2","_x3","_generateTrioCrops","_asyncToGenerator2","uri","detection","size","crops","kind","crop","w","h","exportUltraVariants","_x4","_exportUltraVariants","ratios","undefined","DEFAULT_RATIOS","options","onProgress","_options$maxConcurren","maxConcurrency","sharpen","_options$tiled","tiled","_options$autoPickBest","autoPickBestPerRatio","_options$quality","quality","AutoCropEngine","detect","eyeWeight","Error","allVariants","completed","total","_loop","target","QualityTargets","trios","candidates","trio","croppedUri","applyCrop","upscaledUri","tileUpscaleAuto","targetW","minW","targetH","minH","SuperRes","upscale","finalUri","unsharpMask","format","variant","outUri","method","error","err","String","logger","winner","pickSharpest","map","c","best","find","fallback","previewUltraVariants","_x5","_previewUltraVariants","variants","withThumbs","_yield$import","Promise","resolve","then","manipulateAsync","_yield$import2","SaveFormat","thumb","resize","compress","JPEG","thumbUri"],"sources":["UltraPublish.ts"],"sourcesContent":["/**\n * Ultra Publish Pipeline\n * Exports multiple crop variants (tight/medium/loose) across ratios with super-resolution\n * Now with tile-based upscaling, unsharp mask, and automatic quality selection\n */\n\nimport { AutoCropEngine, type AutoCropResult } from \"./AutoCropEngine\";\nimport { QualityTargets, DEFAULT_RATIOS, type KnownRatio } from \"./QualityTargets\";\nimport { SuperRes } from \"./SuperRes\";\nimport { tileUpscaleAuto } from \"./TiledUpscaler\";\nimport { unsharpMask, type UnsharpOpts } from \"./Unsharp\";\nimport { pickSharpest } from \"./QualityScore\";\nimport * as ImageManipulator from \"expo-image-manipulator\";\nimport { logger } from \"../services/logger\";\n\ntype Rect = { x: number; y: number; width: number; height: number };\ntype TrioKind = \"tight\" | \"medium\" | \"loose\";\n\nexport type UltraVariant = {\n  ratio: KnownRatio;\n  kind: TrioKind;\n  crop: Rect;\n  outUri: string;\n  method: \"eyes\" | \"face\" | \"fallback\";\n  targetW: number;\n  targetH: number;\n  size: { w: number; h: number };\n  progress?: number;\n};\n\nexport interface UltraOptions {\n  /** Post-upscale unsharp mask settings */\n  sharpen?: UnsharpOpts;\n  /** Use tile-based upscaler if available (default: false, uses SuperRes) */\n  tiled?: boolean;\n  /** For each ratio, pick the sharpest among tight/medium/loose and return only the winner */\n  autoPickBestPerRatio?: boolean;\n  /** JPEG quality (0..1) for final save (default: 1) */\n  quality?: number;\n}\n\n// Padding percentages for trio variants\nconst PAD = { tight: 0.06, medium: 0.12, loose: 0.2 };\n\n// This function was removed and replaced with generateTrioCrops which has cleaner implementation\n\n/**\n * Internal helper to compute crop for ratio (if exposed by AutoCropEngine)\n * This reuses the logic from AutoCropEngine but with custom padding\n */\nfunction computeCropForRatio(\n  focus: Rect,\n  imgW: number,\n  imgH: number,\n  ratio: string,\n  padPct: number\n): Rect {\n  const ratioToNumber = (r: string): number => {\n    if (r === \"FREE\") return NaN;\n    const parts = r.split(\":\");\n    if (parts.length !== 2) return NaN;\n    const a = Number(parts[0]);\n    const b = Number(parts[1]);\n    if (!a || !b || isNaN(a) || isNaN(b)) return NaN;\n    return a / b;\n  };\n\n  const padRect = (r: Rect, imgWidth: number, imgHeight: number, pad: number): Rect => {\n    const clamp = (v: number, min: number, max: number) => Math.max(min, Math.min(max, v));\n    const padX = r.width * pad;\n    const padY = r.height * pad;\n    const x = clamp(r.x - padX, 0, imgWidth);\n    const y = clamp(r.y - padY, 0, imgHeight);\n    const width = clamp(r.width + padX * 2, 1, imgWidth - x);\n    const height = clamp(r.height + padY * 2, 1, imgHeight - y);\n    return { x, y, width, height };\n  };\n\n  const ar = ratioToNumber(ratio);\n  const padded = padRect(focus, imgW, imgH, padPct);\n  const cx = padded.x + padded.width / 2;\n  const cy = padded.y + padded.height / 2;\n\n  let width: number;\n  let height: number;\n  const focusAR = padded.width / padded.height;\n\n  if (isNaN(ar)) {\n    width = padded.width;\n    height = padded.height;\n  } else if (focusAR >= ar) {\n    width = padded.width;\n    height = width / ar;\n  } else {\n    height = padded.height;\n    width = height * ar;\n  }\n\n  width = Math.min(width, imgW);\n  height = Math.min(height, imgH);\n\n  const clamp = (v: number, min: number, max: number) => Math.max(min, Math.min(max, v));\n  let x = cx - width / 2;\n  let y = cy - height / 2;\n\n  x = clamp(x, 0, imgW - width);\n  y = clamp(y, 0, imgH - height);\n\n  return { x, y, width, height };\n}\n\n/**\n * Generate trio crops (tight/medium/loose) for a given ratio and focus\n */\nexport async function generateTrioCrops(\n  uri: string,\n  ratio: KnownRatio,\n  detection: AutoCropResult\n): Promise<Array<{ kind: TrioKind; crop: Rect }>> {\n  const { focus, size } = detection;\n\n  // Build trio crops with varied padding\n  const crops: Array<{ kind: TrioKind; crop: Rect }> = [];\n  \n  for (const kind of [\"tight\", \"medium\", \"loose\"] as TrioKind[]) {\n    const padPct = PAD[kind];\n    const crop = computeCropForRatio(focus, size.w, size.h, ratio, padPct);\n    crops.push({ kind, crop });\n  }\n\n  return crops;\n}\n\n/**\n * Export ultra variants for multiple ratios\n * Produces 3 crops (tight/medium/loose) for each ratio, upscaled to target resolution\n * Now supports tile-based upscaling, unsharp mask, and automatic quality selection\n * \n * @param uri - Source image URI\n * @param ratios - Aspect ratios to generate (defaults to DEFAULT_RATIOS)\n * @param options - Additional options including sharpen, tiled, autoPickBestPerRatio\n * @returns Array of UltraVariant objects\n */\nexport async function exportUltraVariants(\n  uri: string,\n  ratios: KnownRatio[] = DEFAULT_RATIOS,\n  options: UltraOptions & {\n    onProgress?: (progress: number, variant: UltraVariant | null) => void;\n    maxConcurrency?: number;\n  } = {}\n): Promise<UltraVariant[]> {\n  const {\n    onProgress,\n    maxConcurrency = 1,\n    sharpen,\n    tiled = false,\n    autoPickBestPerRatio = false,\n    quality = 1,\n  } = options;\n\n  // Detect focus once for all ratios\n  const detection = await AutoCropEngine.detect(uri, { eyeWeight: 0.6, padPct: 0.16 });\n  if (!detection) {\n    throw new Error(\"Failed to detect subject focus\");\n  }\n\n  const allVariants: UltraVariant[] = [];\n  let completed = 0;\n  const total = ratios.length * 3; // 3 variants per ratio\n\n  // Process ratios sequentially to avoid overwhelming memory\n  for (const ratio of ratios) {\n    const target = QualityTargets[ratio];\n    \n    // Generate trio crops for this ratio\n    const trios = await generateTrioCrops(uri, ratio, detection);\n    \n    // Collect candidates for this ratio if auto-picking\n    const candidates: UltraVariant[] = [];\n    \n    // Process each trio variant\n    for (const trio of trios) {\n      try {\n        // Apply crop\n        const croppedUri = await AutoCropEngine.applyCrop(uri, trio.crop, quality);\n        \n        // Upscale to target resolution\n        let upscaledUri: string;\n        \n        if (tiled) {\n          // Use tile-based upscaler for large images\n          upscaledUri = await tileUpscaleAuto(croppedUri, {\n            targetW: target.minW,\n            targetH: target.minH,\n            quality,\n          });\n        } else {\n          // Use SuperRes pipeline (supports multiple backends)\n          upscaledUri = await SuperRes.upscale(croppedUri, target.minW, target.minH);\n        }\n        \n        // Apply unsharp mask if requested\n        const finalUri = sharpen\n          ? await unsharpMask(upscaledUri, { ...sharpen, quality, format: \"jpg\" })\n          : upscaledUri;\n        \n        const variant: UltraVariant = {\n          ratio,\n          kind: trio.kind,\n          crop: trio.crop,\n          outUri: finalUri,\n          method: detection.method,\n          targetW: target.minW,\n          targetH: target.minH,\n          size: detection.size,\n        };\n        \n        if (autoPickBestPerRatio) {\n          candidates.push(variant);\n        } else {\n          allVariants.push(variant);\n        }\n        \n        completed++;\n        onProgress?.(completed / total, variant);\n        onProgress?.(completed / total, null);\n      } catch (error: unknown) {\n        const err = error instanceof Error ? error : new Error(String(error));\n        logger.error(`Failed to generate variant`, { ratio, kind: trio.kind, error: err });\n        // Continue with next variant\n        completed++;\n        onProgress?.(completed / total, null);\n      }\n    }\n    \n    // Auto-pick the sharpest if enabled\n    if (autoPickBestPerRatio && candidates.length > 0) {\n      try {\n        const winner = await pickSharpest(\n          candidates.map((c) => c.outUri),\n          720,\n          0.72\n        );\n        const best = candidates.find((c) => c.outUri === winner);\n        \n        if (best) {\n          allVariants.push(best);\n        }\n      } catch (error: unknown) {\n        const err = error instanceof Error ? error : new Error(String(error));\n        logger.error(`Failed to pick sharpest`, { ratio, error: err });\n        // Fallback: push first candidate\n        const fallback = candidates[0];\n        if (fallback) {\n          allVariants.push(fallback);\n        }\n      }\n    }\n  }\n\n  return allVariants;\n}\n\n/**\n * Get preview URIs for ultra variants (small thumbnails)\n * Useful for UI preview before full export\n */\nexport async function previewUltraVariants(\n  uri: string,\n  ratios: KnownRatio[] = DEFAULT_RATIOS\n): Promise<Array<{ variant: UltraVariant; thumbUri: string }>> {\n  const variants = await exportUltraVariants(uri, ratios, { onProgress: () => {} });\n  \n  // Generate thumbnails (small previews)\n  const withThumbs: Array<{ variant: UltraVariant; thumbUri: string }> = [];\n  \n  for (const variant of variants) {\n    try {\n      // Create small thumbnail for preview\n      const { manipulateAsync } = await import(\"expo-image-manipulator\");\n      const { SaveFormat } = await import(\"expo-image-manipulator\");\n      \n      const thumb = await manipulateAsync(\n        variant.outUri,\n        [{ resize: { width: 240, height: 240 } }],\n        { compress: 0.9, format: SaveFormat.JPEG }\n      );\n      \n      withThumbs.push({ variant, thumbUri: thumb.uri });\n    } catch (error: unknown) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      logger.error(\"Failed to generate thumbnail\", { error: err });\n      withThumbs.push({ variant, thumbUri: variant.outUri });\n    }\n  }\n  \n  return withThumbs;\n}\n\n"],"mappings":"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","ignoreList":[]}