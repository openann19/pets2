8fec813fa8599b86b637f3e738e96b27
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDeactivateAccountScreen = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _native = require("@react-navigation/native");
var _react = require("react");
var _reactNative = require("react-native");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _core = require("@pawfectmatch/core");
var _gdprService = _interopRequireDefault(require("../../services/gdprService"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var DEACTIVATION_REASONS = ["Taking a break from dating", "Found a partner", "Not enjoying the app", "Privacy concerns", "Too many notifications", "Other"];
var useDeactivateAccountScreen = exports.useDeactivateAccountScreen = function useDeactivateAccountScreen() {
  var navigation = (0, _native.useNavigation)();
  var _useState = (0, _react.useState)(""),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    reason = _useState2[0],
    setReason = _useState2[1];
  var _useState3 = (0, _react.useState)(""),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    confirmText = _useState4[0],
    setConfirmText = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    loading = _useState6[0],
    setLoading = _useState6[1];
  var selectReason = (0, _react.useCallback)(function (selectedReason) {
    Haptics.selectionAsync().catch(function () {});
    setReason(selectedReason);
  }, []);
  var handleDeactivate = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (!reason) {
      _reactNative.Alert.alert("Required", "Please select a reason for deactivation.");
      return;
    }
    if (confirmText.toLowerCase() !== "deactivate") {
      _reactNative.Alert.alert("Confirmation Required", 'Please type "deactivate" to confirm.');
      return;
    }
    setLoading(true);
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy).catch(function () {});
    try {
      yield _gdprService.default.deleteAccount({
        password: "N/A",
        reason: reason,
        feedback: confirmText
      });
      _core.logger.info("Account deactivated", {
        reason: reason
      });
      _reactNative.Alert.alert("Account Deactivated", "Your account has been temporarily deactivated. You can reactivate it anytime by logging back in.", [{
        text: "OK",
        onPress: function onPress() {
          navigation.goBack();
        }
      }]);
    } catch (error) {
      _core.logger.error("Failed to deactivate account", {
        error: error
      });
      _reactNative.Alert.alert("Error", "Failed to deactivate account. Please try again.");
    } finally {
      setLoading(false);
    }
  }), [reason, confirmText, navigation]);
  var handleGoBack = (0, _react.useCallback)(function () {
    navigation.goBack();
  }, [navigation]);
  return {
    reason: reason,
    confirmText: confirmText,
    loading: loading,
    reasons: DEACTIVATION_REASONS,
    selectReason: selectReason,
    setConfirmText: setConfirmText,
    handleDeactivate: handleDeactivate,
    handleGoBack: handleGoBack
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,