4672cea05d1da0afceb45f2d1fea373f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var _worklet_12604643036491_init_data = {
  code: "function anonymous() {\n  const {\n    t,\n    interpolate,\n    color,\n    size,\n    stroke\n  } = this._closure;\n  return {\n    opacity: 1 - t.value,\n    transform: [{\n      scale: interpolate(t.value, [0, 1], [0.4, 2])\n    }],\n    borderColor: color,\n    width: size,\n    height: size,\n    borderWidth: stroke,\n    borderRadius: size / 2,\n    position: \"absolute\"\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/RippleIcon.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"t\",\"interpolate\",\"color\",\"size\",\"stroke\",\"_closure\",\"opacity\",\"value\",\"transform\",\"scale\",\"borderColor\",\"width\",\"height\",\"borderWidth\",\"borderRadius\",\"position\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/RippleIcon.tsx\"],\"mappings\":\"AAS6B,SAAAA,UAAA;EAAA;IAAAC,CAAA;IAAAC,WAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAChCC,OAAO,EAAE,CAAC,GAAGN,CAAC,CAACO,KAAK;IACpBC,SAAS,EAAE,CAAC;MAAEC,KAAK,EAAER,WAAW,CAACD,CAAC,CAACO,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;IAAE,CAAC,CAAC;IAC9DG,WAAW,EAAER,KAAK;IAClBS,KAAK,EAAER,IAAI;IAAES,MAAM,EAAET,IAAI;IAAEU,WAAW,EAAET,MAAM;IAAEU,YAAY,EAAEX,IAAI,GAAG,CAAC;IAAEY,QAAQ,EAAE;EACpF,CAAC;AAAA\",\"ignoreList\":[]}"
};
var RippleIcon = (0, _react.memo)(function RippleIcon(_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? 36 : _ref$size,
    _ref$stroke = _ref.stroke,
    stroke = _ref$stroke === void 0 ? 2 : _ref$stroke,
    trigger = _ref.trigger,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? "rgba(236,72,153,0.35)" : _ref$color;
  var t = (0, _reactNativeReanimated.useSharedValue)(0);
  (0, _react.useEffect)(function () {
    t.value = 0;
    t.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 450
    });
  }, [trigger]);
  var s = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -6, -27];
    var _f = function _f() {
      return {
        opacity: 1 - t.value,
        transform: [{
          scale: (0, _reactNativeReanimated.interpolate)(t.value, [0, 1], [0.4, 2])
        }],
        borderColor: color,
        width: size,
        height: size,
        borderWidth: stroke,
        borderRadius: size / 2,
        position: "absolute"
      };
    };
    _f._closure = {
      t: t,
      interpolate: _reactNativeReanimated.interpolate,
      color: color,
      size: size,
      stroke: stroke
    };
    _f.__initData = _worklet_12604643036491_init_data;
    _f.__workletHash = 12604643036491;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    pointerEvents: "none",
    style: s
  });
});
var _default = exports.default = RippleIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmVSZWFuaW1hdGVkIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl93b3JrbGV0XzEyNjA0NjQzMDM2NDkxX2luaXRfZGF0YSIsImNvZGUiLCJsb2NhdGlvbiIsInNvdXJjZU1hcCIsIlJpcHBsZUljb24iLCJtZW1vIiwiX3JlZiIsIl9yZWYkc2l6ZSIsInNpemUiLCJfcmVmJHN0cm9rZSIsInN0cm9rZSIsInRyaWdnZXIiLCJfcmVmJGNvbG9yIiwiY29sb3IiLCJ1c2VTaGFyZWRWYWx1ZSIsInVzZUVmZmVjdCIsInZhbHVlIiwid2l0aFRpbWluZyIsImR1cmF0aW9uIiwicyIsInVzZUFuaW1hdGVkU3R5bGUiLCJfZSIsImdsb2JhbCIsIkVycm9yIiwiX2YiLCJvcGFjaXR5IiwidHJhbnNmb3JtIiwic2NhbGUiLCJpbnRlcnBvbGF0ZSIsImJvcmRlckNvbG9yIiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJXaWR0aCIsImJvcmRlclJhZGl1cyIsInBvc2l0aW9uIiwiX2Nsb3N1cmUiLCJfX2luaXREYXRhIiwiX193b3JrbGV0SGFzaCIsIl9fc3RhY2tEZXRhaWxzIiwiX192ZXJzaW9uIiwianN4IiwiVmlldyIsInBvaW50ZXJFdmVudHMiLCJzdHlsZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlJpcHBsZUljb24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBtZW1vLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFZpZXcsIFN0eWxlU2hlZXQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgQW5pbWF0ZWQsIHsgaW50ZXJwb2xhdGUsIHVzZUFuaW1hdGVkU3R5bGUsIHVzZVNoYXJlZFZhbHVlLCB3aXRoVGltaW5nIH0gZnJvbSBcInJlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkXCI7XG5cbnR5cGUgUHJvcHMgPSB7IHNpemU/OiBudW1iZXI7IHN0cm9rZT86IG51bWJlcjsgdHJpZ2dlcjogbnVtYmVyOyBjb2xvcj86IHN0cmluZyB9O1xuXG5jb25zdCBSaXBwbGVJY29uID0gbWVtbyhmdW5jdGlvbiBSaXBwbGVJY29uKHsgc2l6ZSA9IDM2LCBzdHJva2UgPSAyLCB0cmlnZ2VyLCBjb2xvciA9IFwicmdiYSgyMzYsNzIsMTUzLDAuMzUpXCIgfTogUHJvcHMpIHtcbiAgY29uc3QgdCA9IHVzZVNoYXJlZFZhbHVlKDApO1xuICB1c2VFZmZlY3QoKCkgPT4geyB0LnZhbHVlID0gMDsgdC52YWx1ZSA9IHdpdGhUaW1pbmcoMSwgeyBkdXJhdGlvbjogNDUwIH0pOyB9LCBbdHJpZ2dlcl0pO1xuICBjb25zdCBzID0gdXNlQW5pbWF0ZWRTdHlsZSgoKSA9PiAoe1xuICAgIG9wYWNpdHk6IDEgLSB0LnZhbHVlLFxuICAgIHRyYW5zZm9ybTogW3sgc2NhbGU6IGludGVycG9sYXRlKHQudmFsdWUsIFswLCAxXSwgWzAuNCwgMl0pIH1dLFxuICAgIGJvcmRlckNvbG9yOiBjb2xvcixcbiAgICB3aWR0aDogc2l6ZSwgaGVpZ2h0OiBzaXplLCBib3JkZXJXaWR0aDogc3Ryb2tlLCBib3JkZXJSYWRpdXM6IHNpemUgLyAyLCBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiIGFzIGNvbnN0LFxuICB9KSk7XG4gIHJldHVybiA8QW5pbWF0ZWQuVmlldyBwb2ludGVyRXZlbnRzPVwibm9uZVwiIHN0eWxlPXtzfSAvPjtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBSaXBwbGVJY29uO1xuXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztB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