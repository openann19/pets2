f274eefad7e8e227b8b83f1183d5cd5b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _core = require("@react-navigation/core");
var React = _interopRequireWildcard(require("react"));
var _ServerContext = _interopRequireDefault(require("./ServerContext"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var _default = React.forwardRef(function ServerContainer(_ref, ref) {
  var children = _ref.children,
    location = _ref.location;
  React.useEffect(function () {
    console.error("'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.");
  }, []);
  var current = {};
  if (ref) {
    var value = {
      getCurrentOptions: function getCurrentOptions() {
        return current.options;
      }
    };
    if (typeof ref === 'function') {
      ref(value);
    } else {
      ref.current = value;
    }
  }
  return React.createElement(_ServerContext.default.Provider, {
    value: {
      location: location
    }
  }, React.createElement(_core.CurrentRenderContext.Provider, {
    value: current
  }, children));
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX1NlcnZlckNvbnRleHQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9kZWZhdWx0IiwiZm9yd2FyZFJlZiIsIlNlcnZlckNvbnRhaW5lciIsIl9yZWYiLCJyZWYiLCJjaGlsZHJlbiIsImxvY2F0aW9uIiwidXNlRWZmZWN0IiwiY29uc29sZSIsImVycm9yIiwiY3VycmVudCIsInZhbHVlIiwiZ2V0Q3VycmVudE9wdGlvbnMiLCJvcHRpb25zIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwiQ3VycmVudFJlbmRlckNvbnRleHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL1NlcnZlckNvbnRhaW5lci50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQUVBLElBQUFHLGNBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUFtRSxTQUFBSSx1QkFBQUMsR0FBQTtFQUFBLE9BQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUE7SUFBQUUsT0FBQSxFQUFBRjtFQUFBO0FB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