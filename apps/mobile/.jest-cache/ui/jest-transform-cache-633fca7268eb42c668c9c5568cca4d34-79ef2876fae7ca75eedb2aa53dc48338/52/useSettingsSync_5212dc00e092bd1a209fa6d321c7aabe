27b349ae15c681a4c7ce33f5947ae9cf
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSettingsSync = useSettingsSync;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _api = require("../../../services/api");
var _core = require("@pawfectmatch/core");
function useSettingsSync() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    onSyncSuccess = _ref.onSyncSuccess,
    onSyncError = _ref.onSyncError;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isSyncing = _useState2[0],
    setIsSyncing = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    error = _useState4[0],
    setError = _useState4[1];
  var syncSettings = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (settings) {
      setIsSyncing(true);
      setError(null);
      try {
        yield _api.matchesAPI.updateUserSettings(settings);
        _core.logger.info("Settings synced successfully", {
          settings: settings
        });
        onSyncSuccess == null ? void 0 : onSyncSuccess();
        return true;
      } catch (err) {
        var errorMessage = err instanceof Error ? err.message : "Failed to sync settings";
        setError(errorMessage);
        _core.logger.error("Failed to sync settings", {
          error: errorMessage
        });
        onSyncError == null ? void 0 : onSyncError(err instanceof Error ? err : new Error(errorMessage));
        return false;
      } finally {
        setIsSyncing(false);
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [onSyncSuccess, onSyncError]);
  return {
    isSyncing: isSyncing,
    syncSettings: syncSettings,
    error: error
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FwaSIsIl9jb3JlIiwidXNlU2V0dGluZ3NTeW5jIiwiX3JlZiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm9uU3luY1N1Y2Nlc3MiLCJvblN5bmNFcnJvciIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJpc1N5bmNpbmciLCJzZXRJc1N5bmNpbmciLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsImVycm9yIiwic2V0RXJyb3IiLCJzeW5jU2V0dGluZ3MiLCJ1c2VDYWxsYmFjayIsIl9yZWYyIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwic2V0dGluZ3MiLCJtYXRjaGVzQVBJIiwidXBkYXRlVXNlclNldHRpbmdzIiwibG9nZ2VyIiwiaW5mbyIsImVyciIsImVycm9yTWVzc2FnZSIsIkVycm9yIiwibWVzc2FnZSIsIl94IiwiYXBwbHkiXSwic291cmNlcyI6WyJ1c2VTZXR0aW5nc1N5bmMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBtYXRjaGVzQVBJIH0gZnJvbSBcIi4uLy4uLy4uL3NlcnZpY2VzL2FwaVwiO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIkBwYXdmZWN0bWF0Y2gvY29yZVwiO1xuaW1wb3J0IHR5cGUgeyBVc2VyIH0gZnJvbSBcIkBwYXdmZWN0bWF0Y2gvY29yZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVNldHRpbmdzU3luY09wdGlvbnMge1xuICBvblN5bmNTdWNjZXNzPzogKCkgPT4gdm9pZDtcbiAgb25TeW5jRXJyb3I/OiAoZXJyb3I6IEVycm9yKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVNldHRpbmdzU3luY1JldHVybiB7XG4gIGlzU3luY2luZzogYm9vbGVhbjtcbiAgc3luY1NldHRpbmdzOiAoc2V0dGluZ3M6IFVzZXJbXCJwcmVmZXJlbmNlc1wiXSkgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgZXJyb3I6IHN0cmluZyB8IG51bGw7XG59XG5cbi8qKlxuICogSG9vayBmb3Igc3luY2luZyBzZXR0aW5ncyB3aXRoIGJhY2tlbmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNldHRpbmdzU3luYyh7XG4gIG9uU3luY1N1Y2Nlc3MsXG4gIG9uU3luY0Vycm9yLFxufTogVXNlU2V0dGluZ3NTeW5jT3B0aW9ucyA9IHt9KTogVXNlU2V0dGluZ3NTeW5jUmV0dXJuIHtcbiAgY29uc3QgW2lzU3luY2luZywgc2V0SXNTeW5jaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcblxuICBjb25zdCBzeW5jU2V0dGluZ3MgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoc2V0dGluZ3M6IFVzZXJbXCJwcmVmZXJlbmNlc1wiXSk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgICAgc2V0SXNTeW5jaW5nKHRydWUpO1xuICAgICAgc2V0RXJyb3IobnVsbCk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IG1hdGNoZXNBUEkudXBkYXRlVXNlclNldHRpbmdzKHNldHRpbmdzKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCJTZXR0aW5ncyBzeW5jZWQgc3VjY2Vzc2Z1bGx5XCIsIHsgc2V0dGluZ3MgfSk7XG4gICAgICAgIG9uU3luY1N1Y2Nlc3M/LigpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICAgIGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBcIkZhaWxlZCB0byBzeW5jIHNldHRpbmdzXCI7XG4gICAgICAgIHNldEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byBzeW5jIHNldHRpbmdzXCIsIHsgZXJyb3I6IGVycm9yTWVzc2FnZSB9KTtcbiAgICAgICAgb25TeW5jRXJyb3I/LihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyciA6IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNTeW5jaW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtvblN5bmNTdWNjZXNzLCBvblN5bmNFcnJvcl0sXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBpc1N5bmNpbmcsXG4gICAgc3luY1NldHRpbmdzLFxuICAgIGVycm9yLFxuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxJQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxLQUFBLEdBQUFGLE9BQUE7QUFpQk8sU0FBU0csZUFBZUEsQ0FBQSxFQUd3QjtFQUFBLElBQUFDLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQTNCLENBQUMsQ0FBQztJQUY1QkcsYUFBYSxHQUFBSixJQUFBLENBQWJJLGFBQWE7SUFDYkMsV0FBVyxHQUFBTCxJQUFBLENBQVhLLFdBQVc7RUFFWCxJQUFBQyxTQUFBLEdBQWtDLElBQUFDLGVBQVEsRUFBQyxLQUFLLENBQUM7SUFBQUMsVUFBQSxPQUFBQyxlQUFBLENBQUFDLE9BQUEsRUFBQUosU0FBQTtJQUExQ0ssU0FBUyxHQUFBSCxVQUFBO0lBQUVJLFlBQVksR0FBQUosVUFBQTtFQUM5QixJQUFBSyxVQUFBLEdBQTBCLElBQUFOLGVBQVEsRUFBZ0IsSUFBSSxDQUFDO0lBQUFPLFVBQUEsT0FBQUwsZUFBQSxDQUFBQyxPQUFBLEVBQUFHLFVBQUE7SUFBaERFLEtBQUssR0FBQUQsVUFBQTtJQUFFRSxRQUFRLEdBQUFGLFVBQUE7RUFFdEIsSUFBTUcsWUFBWSxHQUFHLElBQUFDLGtCQUFXO0lBQUEsSUFBQUMsS0FBQSxPQUFBQyxrQkFBQSxDQUFBVixPQUFBLEVBQzlCLFdBQU9XLFFBQTZCLEVBQXVCO01BQ3pEVCxZQUFZLENBQUMsSUFBSSxDQUFDO01BQ2xCSSxRQUFRLENBQUMsSUFBSSxDQUFDO01BRWQsSUFBSTtRQUNGLE1BQU1NLGVBQVUsQ0FBQ0Msa0JBQWtCLENBQUNGLFFBQVEsQ0FBQztRQUM3Q0csWUFBTSxDQUFDQyxJQUFJLENBQUMsOEJBQThCLEVBQUU7VUFBRUosUUFBUSxFQUFSQTtRQUFTLENBQUMsQ0FBQztRQUN6RGpCLGFBQWEsb0JBQWJBLGFBQWEsQ0FBRyxDQUFDO1FBQ2pCLE9BQU8sSUFBSTtNQUNiLENBQUMsQ0FBQyxPQUFPc0IsR0FBRyxFQUFFO1FBQ1osSUFBTUMsWUFBWSxHQUNoQkQsR0FBRyxZQUFZRSxLQUFLLEdBQUdGLEdBQUcsQ0FBQ0csT0FBTyxHQUFHLHlCQUF5QjtRQUNoRWIsUUFBUSxDQUFDVyxZQUFZLENBQUM7UUFDdEJILFlBQU0sQ0FBQ1QsS0FBSyxDQUFDLHlCQUF5QixFQUFFO1VBQUVBLEtBQUssRUFBRVk7UUFBYSxDQUFDLENBQUM7UUFDaEV0QixXQUFXLG9CQUFYQSxXQUFXLENBQUdxQixHQUFHLFlBQVlFLEtBQUssR0FBR0YsR0FBRyxHQUFHLElBQUlFLEtBQUssQ0FBQ0QsWUFBWSxDQUFDLENBQUM7UUFDbkUsT0FBTyxLQUFLO01BQ2QsQ0FBQyxTQUFTO1FBQ1JmLFlBQVksQ0FBQyxLQUFLLENBQUM7TUFDckI7SUFDRixDQUFDO0lBQUEsaUJBQUFrQixFQUFBO01BQUEsT0FBQVgsS0FBQSxDQUFBWSxLQUFBLE9BQUE5QixTQUFBO0lBQUE7RUFBQSxLQUNELENBQUNHLGFBQWEsRUFBRUMsV0FBVyxDQUM3QixDQUFDO0VBRUQsT0FBTztJQUNMTSxTQUFTLEVBQVRBLFNBQVM7SUFDVE0sWUFBWSxFQUFaQSxZQUFZO0lBQ1pGLEtBQUssRUFBTEE7RUFDRixDQUFDO0FBQ0giLCJpZ25vcmVMaXN0IjpbXX0=