4cefaa3062a1f883c54404d307b4c259
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatchCard = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _vectorIcons = require("@expo/vector-icons");
var _core = require("@pawfectmatch/core");
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _OptimizedImage = _interopRequireDefault(require("../OptimizedImage"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var _worklet_11137576460216_init_data = {
  code: "function anonymous() {\n  const {\n    scale,\n    opacity\n  } = this._closure;\n  return {\n    transform: [{\n      scale: scale.value\n    }],\n    opacity: opacity.value\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/matches/MatchCard.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"scale\",\"opacity\",\"_closure\",\"transform\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/matches/MatchCard.tsx\"],\"mappings\":\"AAoFyC,SAAAA,UAAA;EAAA;IAAAC,KAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC5CC,SAAS,EAAE,CAAC;MAAEH,KAAK,EAAEA,KAAK,CAACI;IAAM,CAAC,CAAC;IACnCH,OAAO,EAAEA,OAAO,CAACG;EACnB,CAAC;AAAA\",\"ignoreList\":[]}"
};
function MatchCardBase(_ref) {
  var match = _ref.match,
    onPress = _ref.onPress,
    onUnmatch = _ref.onUnmatch,
    onArchive = _ref.onArchive,
    onReport = _ref.onReport;
  var scale = (0, _reactNativeReanimated.useSharedValue)(1);
  var opacity = (0, _reactNativeReanimated.useSharedValue)(1);
  var handlePress = function handlePress() {
    void Haptics.selectionAsync();
    onPress == null ? void 0 : onPress();
  };
  var handlePressIn = function handlePressIn() {
    scale.value = (0, _reactNativeReanimated.withSpring)(0.95, {
      stiffness: 300,
      damping: 20
    });
    opacity.value = (0, _reactNativeReanimated.withTiming)(0.8, {
      duration: 100
    });
  };
  var handlePressOut = function handlePressOut() {
    scale.value = (0, _reactNativeReanimated.withSpring)(1, {
      stiffness: 300,
      damping: 20
    });
    opacity.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 100
    });
  };
  var handleUnmatch = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        void Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);
        yield onUnmatch == null ? void 0 : onUnmatch(match._id, match.petName);
      } catch (error) {
        _core.logger.error("Error unmatching:", {
          error: error
        });
      }
    });
    return function handleUnmatch() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleArchive = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        void Haptics.selectionAsync();
        yield onArchive == null ? void 0 : onArchive(match._id, match.petName);
      } catch (error) {
        _core.logger.error("Error archiving:", {
          error: error
        });
      }
    });
    return function handleArchive() {
      return _ref3.apply(this, arguments);
    };
  }();
  var handleReport = function handleReport() {
    _reactNative.Alert.alert("Report Match", `Report this match with ${match.petName}?`, [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Report",
      style: "destructive",
      onPress: function onPress() {
        void Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);
        onReport == null ? void 0 : onReport(match._id, match.petName);
      }
    }]);
  };
  var animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -3, -27];
    var _f = function _f() {
      return {
        transform: [{
          scale: scale.value
        }],
        opacity: opacity.value
      };
    };
    _f._closure = {
      scale: scale,
      opacity: opacity
    };
    _f.__initData = _worklet_11137576460216_init_data;
    _f.__workletHash = 11137576460216;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var petPhoto = match.petPhoto || "";
  var lastMessage = match.lastMessage;
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    style: animatedStyle,
    children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.card,
      activeOpacity: 0.92,
      onPress: handlePress,
      onPressIn: handlePressIn,
      onPressOut: handlePressOut,
      accessibilityLabel: `View match with ${match.petName}`,
      children: (0, _jsxRuntime.jsxs)(_expoLinearGradient.LinearGradient, {
        colors: ["#fceabb", "#f8b500", "Theme.colors.primary[500]", "#a21caf"],
        style: styles.gradient,
        children: [(0, _jsxRuntime.jsx)(_OptimizedImage.default, {
          uri: petPhoto,
          style: styles.photo,
          containerStyle: {},
          accessibilityLabel: `${match.petName} photo`,
          priority: "normal",
          onLoadStart: function onLoadStart() {},
          onLoadEnd: function onLoadEnd() {},
          onError: function onError() {}
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.info,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.name,
            children: match.petName
          }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.meta,
            children: [match.petBreed, ", ", match.petAge, " years old"]
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.owner,
            children: "Owner information"
          }), lastMessage ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.lastMessage,
            numberOfLines: 1,
            children: lastMessage.content
          }) : null, (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.matchedAt,
            children: ["Matched ", new Date(match.matchedAt).toLocaleDateString()]
          })]
        }), (onUnmatch || onArchive || onReport) && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.actions,
          children: [onReport && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: _reactNative.StyleSheet.flatten([styles.actionButton, styles.reportButton]),
            onPress: handleReport,
            accessibilityLabel: "Report match",
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "flag-outline",
              size: 20,
              color: "Theme.colors.status.warning"
            })
          }), onArchive && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: styles.actionButton,
            onPress: handleArchive,
            accessibilityLabel: "Archive match",
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "archive-outline",
              size: 20,
              color: "#6b21a8"
            })
          }), onUnmatch && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: _reactNative.StyleSheet.flatten([styles.actionButton, styles.unmatchButton]),
            onPress: handleUnmatch,
            accessibilityLabel: "Unmatch",
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "close-circle-outline",
              size: 20,
              color: "#dc2626"
            })
          })]
        })]
      })
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  card: {
    borderRadius: 24,
    margin: 12,
    shadowColor: "Theme.colors.primary[500]",
    shadowOpacity: 0.15,
    shadowRadius: 16,
    elevation: 8
  },
  gradient: {
    borderRadius: 24,
    overflow: "hidden",
    flexDirection: "row",
    alignItems: "center",
    padding: 16
  },
  photo: {
    width: 80,
    height: 80,
    borderRadius: 16,
    backgroundColor: "#f3e8ff",
    marginRight: 16
  },
  info: {
    flex: 1
  },
  name: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#a21caf"
  },
  meta: {
    fontSize: 15,
    color: "#6b21a8",
    marginVertical: 2
  },
  owner: {
    fontSize: 14,
    color: "#7c3aed",
    marginBottom: 2
  },
  lastMessage: {
    fontSize: 13,
    color: "Theme.colors.neutral[500]",
    marginBottom: 2
  },
  matchedAt: {
    fontSize: 12,
    color: "#a21caf",
    marginTop: 4
  },
  actions: {
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    marginLeft: 8
  },
  actionButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: "rgba(255, 255, 255, 0.2)",
    alignItems: "center",
    justifyContent: "center",
    marginVertical: 4
  },
  unmatchButton: {
    backgroundColor: "rgba(220, 38, 38, 0.1)"
  },
  reportButton: {
    backgroundColor: "rgba(245, 158, 11, 0.1)"
  }
});
var MatchCard = exports.MatchCard = (0, _react.memo)(MatchCardBase);
MatchCard.displayName = "MatchCard";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,