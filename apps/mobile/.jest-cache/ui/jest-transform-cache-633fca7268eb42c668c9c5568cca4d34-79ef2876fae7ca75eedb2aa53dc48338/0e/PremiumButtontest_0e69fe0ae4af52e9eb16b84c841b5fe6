fdf96904ac15f161bb096dd65fad6976
"use strict";

_getJestObj().mock("../../../theme/Provider");
_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(),
    ImpactFeedbackStyle: {
      Light: "light",
      Medium: "medium"
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _PremiumButton = _interopRequireDefault(require("../../Premium/PremiumButton"));
require("../../../theme/Provider");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  navigate: jest.fn()
};
describe("PremiumButton", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    useTheme.mockReturnValue({
      colors: {
        primary: "#7c3aed",
        secondary: "Theme.colors.primary[500]",
        background: "Theme.colors.neutral[0]",
        text: "Theme.colors.neutral[950]"
      },
      isDark: false
    });
  });
  it("renders correctly with default props", function () {
    var _render = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByText("Upgrade")).toBeTruthy();
    expect(getByTestId("premium-button")).toBeTruthy();
  });
  it("renders with custom text", function () {
    var _render2 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation,
        text: "Go Premium"
      })),
      getByText = _render2.getByText;
    expect(getByText("Go Premium")).toBeTruthy();
  });
  it("handles press with haptic feedback", function () {
    var _render3 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render3.getByTestId;
    fireEvent.press(getByTestId("premium-button"));
    expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Medium);
    expect(mockNavigation.navigate).toHaveBeenCalledWith("Premium");
  });
  it("renders with gradient style in light theme", function () {
    var _render4 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render4.getByTestId;
    var button = getByTestId("premium-button");
    expect(button.props.style).toBeDefined();
  });
  it("renders with dark theme style", function () {
    useTheme.mockReturnValue({
      colors: {
        primary: "#7c3aed",
        secondary: "Theme.colors.primary[500]",
        background: "Theme.colors.neutral[800]",
        text: "Theme.colors.neutral[0]"
      },
      isDark: true
    });
    var _render5 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render5.getByTestId;
    var button = getByTestId("premium-button");
    expect(button.props.style).toBeDefined();
  });
  it("renders with custom size", function () {
    var _render6 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation,
        size: "large"
      })),
      getByTestId = _render6.getByTestId;
    var button = getByTestId("premium-button");
    expect(button.props.style).toBeDefined();
  });
  it("renders with icon", function () {
    var _render7 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation,
        showIcon: true
      })),
      getByTestId = _render7.getByTestId;
    expect(getByTestId("premium-icon")).toBeTruthy();
  });
  it("applies custom style when provided", function () {
    var customStyle = {
      marginTop: 20
    };
    var _render8 = render((0, _jsxRuntime.jsx)(_PremiumButton.default, {
        navigation: mockNavigation,
        style: customStyle
      })),
      getByTestId = _render8.getByTestId;
    var button = getByTestId("premium-button");
    expect(button.props.style).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJpbXBhY3RBc3luYyIsImplc3QiLCJmbiIsIkltcGFjdEZlZWRiYWNrU3R5bGUiLCJMaWdodCIsIk1lZGl1bSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX1ByZW1pdW1CdXR0b24iLCJIYXB0aWNzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX3JlcXVpcmUiLCJtb2NrTmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInVzZVRoZW1lIiwibW9ja1JldHVyblZhbHVlIiwiY29sb3JzIiwicHJpbWFyeSIsInNlY29uZGFyeSIsImJhY2tncm91bmQiLCJ0ZXh0IiwiaXNEYXJrIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwibmF2aWdhdGlvbiIsImdldEJ5VGV4dCIsImdldEJ5VGVzdElkIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiX3JlbmRlcjMiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiX3JlbmRlcjQiLCJidXR0b24iLCJwcm9wcyIsInN0eWxlIiwidG9CZURlZmluZWQiLCJfcmVuZGVyNSIsIl9yZW5kZXI2Iiwic2l6ZSIsIl9yZW5kZXI3Iiwic2hvd0ljb24iLCJjdXN0b21TdHlsZSIsIm1hcmdpblRvcCIsIl9yZW5kZXI4Il0sInNvdXJjZXMiOlsiUHJlbWl1bUJ1dHRvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge30gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtbmF0aXZlL2V4dGVuZC1leHBlY3RcIjtcbmltcG9ydCBQcmVtaXVtQnV0dG9uIGZyb20gXCIuLi8uLi9QcmVtaXVtL1ByZW1pdW1CdXR0b25cIjtcbmltcG9ydCB7fSBmcm9tIFwiLi4vLi4vLi4vdGhlbWUvUHJvdmlkZXJcIjtcbmltcG9ydCAqIGFzIEhhcHRpY3MgZnJvbSBcImV4cG8taGFwdGljc1wiO1xuaW1wb3J0IHsgVGhlbWUgfSBmcm9tICcuLi8uLi8uLi90aGVtZS91bmlmaWVkLXRoZW1lJztcblxuLy8gTW9jayBkZXBlbmRlbmNpZXNcbmplc3QubW9jayhcIi4uLy4uLy4uL3RoZW1lL1Byb3ZpZGVyXCIpO1xuamVzdC5tb2NrKFwiZXhwby1oYXB0aWNzXCIsICgpID0+ICh7XG4gIGltcGFjdEFzeW5jOiBqZXN0LmZuKCksXG4gIEltcGFjdEZlZWRiYWNrU3R5bGU6IHtcbiAgICBMaWdodDogXCJsaWdodFwiLFxuICAgIE1lZGl1bTogXCJtZWRpdW1cIixcbiAgfSxcbn0pKTtcblxuY29uc3QgbW9ja05hdmlnYXRpb24gPSB7XG4gIG5hdmlnYXRlOiBqZXN0LmZuKCksXG59O1xuXG5kZXNjcmliZShcIlByZW1pdW1CdXR0b25cIiwgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcblxuICAgIC8vIE1vY2sgdGhlbWUgY29udGV4dFxuICAgICh1c2VUaGVtZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBjb2xvcnM6IHtcbiAgICAgICAgcHJpbWFyeTogXCIjN2MzYWVkXCIsXG4gICAgICAgIHNlY29uZGFyeTogXCJUaGVtZS5jb2xvcnMucHJpbWFyeVs1MDBdXCIsXG4gICAgICAgIGJhY2tncm91bmQ6IFwiVGhlbWUuY29sb3JzLm5ldXRyYWxbMF1cIixcbiAgICAgICAgdGV4dDogXCJUaGVtZS5jb2xvcnMubmV1dHJhbFs5NTBdXCIsXG4gICAgICB9LFxuICAgICAgaXNEYXJrOiBmYWxzZSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoXCJyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGRlZmF1bHQgcHJvcHNcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPFByZW1pdW1CdXR0b24gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+LFxuICAgICk7XG5cbiAgICAvLyBTaG91bGQgcmVuZGVyIHByZW1pdW0gYnV0dG9uIHdpdGggZGVmYXVsdCB0ZXh0XG4gICAgZXhwZWN0KGdldEJ5VGV4dChcIlVwZ3JhZGVcIikpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoXCJwcmVtaXVtLWJ1dHRvblwiKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdChcInJlbmRlcnMgd2l0aCBjdXN0b20gdGV4dFwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxQcmVtaXVtQnV0dG9uIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSB0ZXh0PVwiR28gUHJlbWl1bVwiIC8+LFxuICAgICk7XG5cbiAgICAvLyBTaG91bGQgcmVuZGVyIGJ1dHRvbiB3aXRoIGN1c3RvbSB0ZXh0XG4gICAgZXhwZWN0KGdldEJ5VGV4dChcIkdvIFByZW1pdW1cIikpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoXCJoYW5kbGVzIHByZXNzIHdpdGggaGFwdGljIGZlZWRiYWNrXCIsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8UHJlbWl1bUJ1dHRvbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz4sXG4gICAgKTtcblxuICAgIC8vIFByZXNzIHRoZSBidXR0b25cbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoXCJwcmVtaXVtLWJ1dHRvblwiKSk7XG5cbiAgICAvLyBTaG91bGQgdHJpZ2dlciBoYXB0aWMgZmVlZGJhY2tcbiAgICBleHBlY3QoSGFwdGljcy5pbXBhY3RBc3luYykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBIYXB0aWNzLkltcGFjdEZlZWRiYWNrU3R5bGUuTWVkaXVtLFxuICAgICk7XG5cbiAgICAvLyBTaG91bGQgbmF2aWdhdGUgdG8gUHJlbWl1bSBzY3JlZW5cbiAgICBleHBlY3QobW9ja05hdmlnYXRpb24ubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwiUHJlbWl1bVwiKTtcbiAgfSk7XG5cbiAgaXQoXCJyZW5kZXJzIHdpdGggZ3JhZGllbnQgc3R5bGUgaW4gbGlnaHQgdGhlbWVcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxQcmVtaXVtQnV0dG9uIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPixcbiAgICApO1xuXG4gICAgLy8gU2hvdWxkIGhhdmUgZ3JhZGllbnQgc3R5bGVcbiAgICBjb25zdCBidXR0b24gPSBnZXRCeVRlc3RJZChcInByZW1pdW0tYnV0dG9uXCIpO1xuICAgIGV4cGVjdChidXR0b24ucHJvcHMuc3R5bGUpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KFwicmVuZGVycyB3aXRoIGRhcmsgdGhlbWUgc3R5bGVcIiwgKCkgPT4ge1xuICAgIC8vIE1vY2sgZGFyayB0aGVtZVxuICAgICh1c2VUaGVtZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBjb2xvcnM6IHtcbiAgICAgICAgcHJpbWFyeTogXCIjN2MzYWVkXCIsXG4gICAgICAgIHNlY29uZGFyeTogXCJUaGVtZS5jb2xvcnMucHJpbWFyeVs1MDBdXCIsXG4gICAgICAgIGJhY2tncm91bmQ6IFwiVGhlbWUuY29sb3JzLm5ldXRyYWxbODAwXVwiLFxuICAgICAgICB0ZXh0OiBcIlRoZW1lLmNvbG9ycy5uZXV0cmFsWzBdXCIsXG4gICAgICB9LFxuICAgICAgaXNEYXJrOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPFByZW1pdW1CdXR0b24gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+LFxuICAgICk7XG5cbiAgICAvLyBTaG91bGQgaGF2ZSBkYXJrIHRoZW1lIHN0eWxlXG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoXCJwcmVtaXVtLWJ1dHRvblwiKTtcbiAgICBleHBlY3QoYnV0dG9uLnByb3BzLnN0eWxlKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBpdChcInJlbmRlcnMgd2l0aCBjdXN0b20gc2l6ZVwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPFByZW1pdW1CdXR0b24gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IHNpemU9XCJsYXJnZVwiIC8+LFxuICAgICk7XG5cbiAgICAvLyBTaG91bGQgaGF2ZSBsYXJnZSBzaXplIHN0eWxlXG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoXCJwcmVtaXVtLWJ1dHRvblwiKTtcbiAgICBleHBlY3QoYnV0dG9uLnByb3BzLnN0eWxlKS50b0JlRGVmaW5lZCgpO1xuICAgIC8vIEFkZGl0aW9uYWwgc2l6ZS1zcGVjaWZpYyBhc3NlcnRpb25zIGNvdWxkIGJlIGFkZGVkIGhlcmVcbiAgfSk7XG5cbiAgaXQoXCJyZW5kZXJzIHdpdGggaWNvblwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPFByZW1pdW1CdXR0b24gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IHNob3dJY29uIC8+LFxuICAgICk7XG5cbiAgICAvLyBTaG91bGQgcmVuZGVyIGljb25cbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoXCJwcmVtaXVtLWljb25cIikpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoXCJhcHBsaWVzIGN1c3RvbSBzdHlsZSB3aGVuIHByb3ZpZGVkXCIsICgpID0+IHtcbiAgICBjb25zdCBjdXN0b21TdHlsZSA9IHsgbWFyZ2luVG9wOiAyMCB9O1xuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxQcmVtaXVtQnV0dG9uIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSBzdHlsZT17Y3VzdG9tU3R5bGV9IC8+LFxuICAgICk7XG5cbiAgICBjb25zdCBidXR0b24gPSBnZXRCeVRlc3RJZChcInByZW1pdW0tYnV0dG9uXCIpO1xuICAgIGV4cGVjdChidXR0b24ucHJvcHMuc3R5bGUpLnRvQmVEZWZpbmVkKCk7XG4gICAgLy8gQWRkaXRpb25hbCBzdHlsZS1zcGVjaWZpYyBhc3NlcnRpb25zIGNvdWxkIGJlIGFkZGVkIGhlcmVcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFTQUEsV0FBQSxHQUFLQyxJQUFJLDBCQUEwQixDQUFDO0FBQ3BDRCxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUU7RUFBQSxPQUFPO0lBQy9CQyxXQUFXLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDdEJDLG1CQUFtQixFQUFFO01BQ25CQyxLQUFLLEVBQUUsT0FBTztNQUNkQyxNQUFNLEVBQUU7SUFDVjtFQUNGLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBaEJKLElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBQSxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBRSxjQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUF3QyxJQUFBSyxXQUFBLEdBQUFM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