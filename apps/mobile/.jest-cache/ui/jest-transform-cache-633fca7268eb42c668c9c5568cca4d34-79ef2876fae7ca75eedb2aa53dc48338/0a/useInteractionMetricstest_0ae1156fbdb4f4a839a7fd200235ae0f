aa2d240067ac54d9c2be6aeff1de629f
"use strict";

_getJestObj().mock("../../../services/analyticsService", function () {
  return {
    analyticsService: {
      trackEvent: _globals.jest.fn(),
      trackScreenView: _globals.jest.fn()
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn(),
      debug: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _useInteractionMetrics = require("../useInteractionMetrics");
var _analyticsService = require("../../../services/analyticsService");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAnalyticsService = _analyticsService.analyticsService;
(0, _globals.describe)('useInteractionMetrics', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with default state', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.metrics).toEqual({
        totalInteractions: 0,
        averageResponseTime: 0,
        mostUsedFeature: null,
        interactionPatterns: {},
        touchHeatmap: {},
        gestureAccuracy: 0,
        accessibilityInteractions: 0
      });
      (0, _globals.expect)(result.current.isTracking).toBe(true);
    });
    (0, _globals.it)('should initialize with custom configuration', function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            trackGestures: true,
            trackAccessibility: true,
            debounceMs: 100,
            maxHistorySize: 1000
          });
        }),
        result = _renderHook2.result;
      (0, _globals.expect)(result.current.config.trackGestures).toBe(true);
      (0, _globals.expect)(result.current.config.trackAccessibility).toBe(true);
      (0, _globals.expect)(result.current.config.debounceMs).toBe(100);
    });
  });
  (0, _globals.describe)('Interaction Tracking', function () {
    (0, _globals.it)('should track button interactions', function () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook3.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('button_press', {
          buttonId: 'like_button',
          screen: 'profile',
          timestamp: Date.now()
        });
      });
      (0, _globals.expect)(result.current.metrics.totalInteractions).toBe(1);
      (0, _globals.expect)(result.current.metrics.interactionPatterns['button_press']).toBe(1);
      (0, _globals.expect)(mockAnalyticsService.trackEvent).toHaveBeenCalledWith('interaction_metrics', _globals.expect.objectContaining({
        type: 'button_press',
        buttonId: 'like_button',
        screen: 'profile'
      }), undefined);
    });
    (0, _globals.it)('should track gesture interactions', function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            trackGestures: true
          });
        }),
        result = _renderHook4.result;
      var gestureData = {
        gestureType: 'swipe',
        direction: 'right',
        velocity: 500,
        accuracy: 0.95
      };
      (0, _reactNative.act)(function () {
        result.current.trackGesture(gestureData);
      });
      (0, _globals.expect)(result.current.metrics.gestureAccuracy).toBe(0.95);
      (0, _globals.expect)(result.current.metrics.interactionPatterns['gesture_swipe']).toBe(1);
    });
    (0, _globals.it)('should track accessibility interactions', function () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            trackAccessibility: true
          });
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        result.current.trackAccessibilityInteraction('screen_reader', {
          element: 'button',
          action: 'activate'
        });
      });
      (0, _globals.expect)(result.current.metrics.accessibilityInteractions).toBe(1);
    });
    (0, _globals.it)('should calculate response time metrics', function () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.startTiming('test_interaction');
      });
      _globals.jest.advanceTimersByTime(150);
      (0, _reactNative.act)(function () {
        result.current.endTiming('test_interaction');
      });
      (0, _globals.expect)(result.current.metrics.averageResponseTime).toBeGreaterThan(140);
      (0, _globals.expect)(result.current.metrics.averageResponseTime).toBeLessThan(160);
    });
    (0, _globals.it)('should track most used features', function () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook7.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('feature_use', {
          feature: 'swipe'
        });
        result.current.trackInteraction('feature_use', {
          feature: 'swipe'
        });
        result.current.trackInteraction('feature_use', {
          feature: 'like'
        });
      });
      (0, _globals.expect)(result.current.metrics.mostUsedFeature).toBe('swipe');
    });
  });
  (0, _globals.describe)('Touch Heatmap', function () {
    (0, _globals.it)('should build touch heatmap data', function () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook8.result;
      var touchData = {
        x: 100,
        y: 200,
        screen: 'home',
        element: 'like_button'
      };
      (0, _reactNative.act)(function () {
        result.current.trackTouch(touchData);
      });
      (0, _globals.expect)(result.current.metrics.touchHeatmap['home']).toBeDefined();
      (0, _globals.expect)(result.current.metrics.touchHeatmap['home']['like_button']).toEqual({
        count: 1,
        averageX: 100,
        averageY: 200,
        coordinates: [{
          x: 100,
          y: 200
        }]
      });
    });
    (0, _globals.it)('should aggregate touch data over multiple interactions', function () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook9.result;
      (0, _reactNative.act)(function () {
        result.current.trackTouch({
          x: 100,
          y: 200,
          screen: 'home',
          element: 'button'
        });
        result.current.trackTouch({
          x: 120,
          y: 180,
          screen: 'home',
          element: 'button'
        });
        result.current.trackTouch({
          x: 80,
          y: 220,
          screen: 'home',
          element: 'button'
        });
      });
      var heatmapData = result.current.metrics.touchHeatmap['home']['button'];
      (0, _globals.expect)(heatmapData.count).toBe(3);
      (0, _globals.expect)(heatmapData.averageX).toBeCloseTo(100);
      (0, _globals.expect)(heatmapData.averageY).toBeCloseTo(200);
      (0, _globals.expect)(heatmapData.coordinates).toHaveLength(3);
    });
    (0, _globals.it)('should limit stored coordinates for performance', function () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            maxHeatmapPoints: 2
          });
        }),
        result = _renderHook0.result;
      (0, _reactNative.act)(function () {
        result.current.trackTouch({
          x: 100,
          y: 200,
          screen: 'home',
          element: 'button'
        });
        result.current.trackTouch({
          x: 120,
          y: 180,
          screen: 'home',
          element: 'button'
        });
        result.current.trackTouch({
          x: 80,
          y: 220,
          screen: 'home',
          element: 'button'
        });
      });
      var heatmapData = result.current.metrics.touchHeatmap['home']['button'];
      (0, _globals.expect)(heatmapData.coordinates).toHaveLength(2);
    });
  });
  (0, _globals.describe)('Performance Metrics', function () {
    (0, _globals.it)('should track interaction performance', function () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook1.result;
      (0, _reactNative.act)(function () {
        result.current.startTiming('button_press');
      });
      _globals.jest.advanceTimersByTime(50);
      (0, _reactNative.act)(function () {
        result.current.endTiming('button_press');
      });
      var performance = result.current.getPerformanceMetrics();
      (0, _globals.expect)(performance.averageResponseTime).toBeGreaterThan(45);
      (0, _globals.expect)(performance.totalInteractions).toBe(1);
      (0, _globals.expect)(performance.slowestInteraction).toBe('button_press');
    });
    (0, _globals.it)('should handle multiple concurrent timings', function () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook10.result;
      (0, _reactNative.act)(function () {
        result.current.startTiming('interaction1');
        result.current.startTiming('interaction2');
      });
      _globals.jest.advanceTimersByTime(100);
      (0, _reactNative.act)(function () {
        result.current.endTiming('interaction1');
        result.current.endTiming('interaction2');
      });
      var performance = result.current.getPerformanceMetrics();
      (0, _globals.expect)(performance.totalInteractions).toBe(2);
    });
    (0, _globals.it)('should handle orphaned timings', function () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook11.result;
      (0, _reactNative.act)(function () {
        result.current.startTiming('orphaned');
      });
      var performance = result.current.getPerformanceMetrics();
      (0, _globals.expect)(performance.orphanedTimings).toContain('orphaned');
    });
  });
  (0, _globals.describe)('Data Export and Analysis', function () {
    (0, _globals.it)('should export interaction data', function () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook12.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('test', {
          data: 'value'
        });
      });
      var exportedData = result.current.exportData();
      (0, _globals.expect)(exportedData).toEqual({
        metrics: _globals.expect.any(Object),
        interactions: _globals.expect.any(Array),
        heatmap: _globals.expect.any(Object),
        performance: _globals.expect.any(Object),
        exportTimestamp: _globals.expect.any(Number)
      });
      (0, _globals.expect)(exportedData.interactions).toHaveLength(1);
    });
    (0, _globals.it)('should clear all metrics data', function () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook13.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('test', {});
        result.current.clearData();
      });
      (0, _globals.expect)(result.current.metrics.totalInteractions).toBe(0);
      (0, _globals.expect)(result.current.metrics.interactionPatterns).toEqual({});
    });
    (0, _globals.it)('should get interaction summary', function () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook14.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('button_press', {
          button: 'like'
        });
        result.current.trackInteraction('gesture', {
          type: 'swipe'
        });
        result.current.trackInteraction('button_press', {
          button: 'pass'
        });
      });
      var summary = result.current.getInteractionSummary();
      (0, _globals.expect)(summary).toEqual({
        totalInteractions: 3,
        uniqueInteractionTypes: 2,
        mostFrequentType: 'button_press',
        interactionTypeBreakdown: {
          button_press: 2,
          gesture: 1
        },
        timeRange: _globals.expect.any(Object)
      });
    });
  });
  (0, _globals.describe)('Configuration and Customization', function () {
    (0, _globals.it)('should allow disabling tracking', function () {
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            enabled: false
          });
        }),
        result = _renderHook15.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('test', {});
      });
      (0, _globals.expect)(result.current.metrics.totalInteractions).toBe(0);
      (0, _globals.expect)(mockAnalyticsService.trackEvent).not.toHaveBeenCalled();
    });
    (0, _globals.it)('should support custom event filtering', function () {
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            eventFilter: function eventFilter(event) {
              return event.type !== 'debug';
            }
          });
        }),
        result = _renderHook16.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('debug', {});
        result.current.trackInteraction('user_action', {});
      });
      (0, _globals.expect)(result.current.metrics.totalInteractions).toBe(1);
    });
    (0, _globals.it)('should support custom data transformation', function () {
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            dataTransformer: function dataTransformer(data) {
              return _objectSpread(_objectSpread({}, data), {}, {
                transformed: true
              });
            }
          });
        }),
        result = _renderHook17.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('test', {
          original: true
        });
      });
      (0, _globals.expect)(mockAnalyticsService.trackEvent).toHaveBeenCalledWith('interaction_metrics', _globals.expect.objectContaining({
        original: true,
        transformed: true
      }), undefined);
    });
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle analytics service errors gracefully', function () {
      mockAnalyticsService.trackEvent.mockRejectedValue(new Error('Analytics error'));
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook18.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('test', {});
      });
      (0, _globals.expect)(result.current.metrics.totalInteractions).toBe(1);
    });
    (0, _globals.it)('should handle invalid timing operations', function () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook19.result;
      (0, _reactNative.act)(function () {
        result.current.endTiming('nonexistent');
      });
      (0, _globals.expect)(result.current.metrics.averageResponseTime).toBe(0);
    });
    (0, _globals.it)('should handle malformed interaction data', function () {
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook20.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('test', null);
      });
      (0, _globals.expect)(result.current.metrics.totalInteractions).toBe(1);
    });
    (0, _globals.it)('should handle timing overflow', function () {
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook21.result;
      (0, _reactNative.act)(function () {
        result.current.startTiming('long_interaction');
      });
      _globals.jest.advanceTimersByTime(300000);
      (0, _reactNative.act)(function () {
        result.current.endTiming('long_interaction');
      });
      (0, _globals.expect)(result.current.metrics.averageResponseTime).toBeGreaterThan(299000);
    });
  });
  (0, _globals.describe)('Memory Management', function () {
    (0, _globals.it)('should limit interaction history size', function () {
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            maxHistorySize: 2
          });
        }),
        result = _renderHook22.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('event1', {});
        result.current.trackInteraction('event2', {});
        result.current.trackInteraction('event3', {});
      });
      (0, _globals.expect)(result.current.metrics.totalInteractions).toBe(3);
    });
    (0, _globals.it)('should cleanup resources on unmount', function () {
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        unmount = _renderHook23.unmount;
      (0, _globals.expect)(function () {
        return unmount();
      }).not.toThrow();
    });
  });
  (0, _globals.describe)('Real-time Updates', function () {
    (0, _globals.it)('should provide real-time metrics updates', function () {
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook24.result;
      (0, _globals.expect)(result.current.getRealTimeMetrics()).toEqual({
        currentSessionInteractions: 0,
        recentInteractionsPerMinute: 0,
        activeFeatures: [],
        userEngagementScore: 0
      });
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('button_press', {});
        result.current.trackInteraction('gesture', {});
      });
      var realTimeMetrics = result.current.getRealTimeMetrics();
      (0, _globals.expect)(realTimeMetrics.currentSessionInteractions).toBe(2);
      (0, _globals.expect)(realTimeMetrics.activeFeatures).toContain('button_press');
      (0, _globals.expect)(realTimeMetrics.activeFeatures).toContain('gesture');
    });
    (0, _globals.it)('should calculate engagement score', function () {
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook25.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('swipe', {});
        result.current.trackInteraction('like', {});
        result.current.trackInteraction('message', {});
        result.current.startTiming('response');
        _globals.jest.advanceTimersByTime(200);
        result.current.endTiming('response');
      });
      var realTimeMetrics = result.current.getRealTimeMetrics();
      (0, _globals.expect)(realTimeMetrics.userEngagementScore).toBeGreaterThan(0);
    });
  });
  (0, _globals.describe)('Accessibility Integration', function () {
    (0, _globals.it)('should track accessibility features usage', function () {
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            trackAccessibility: true
          });
        }),
        result = _renderHook26.result;
      (0, _reactNative.act)(function () {
        result.current.trackAccessibilityUsage('voice_over', {
          feature: 'screen_reader',
          elementsAccessed: 5
        });
      });
      (0, _globals.expect)(result.current.metrics.accessibilityInteractions).toBe(1);
      (0, _globals.expect)(mockAnalyticsService.trackEvent).toHaveBeenCalledWith('accessibility_usage', _globals.expect.objectContaining({
        type: 'voice_over',
        feature: 'screen_reader',
        elementsAccessed: 5
      }), undefined);
    });
    (0, _globals.it)('should provide accessibility insights', function () {
      var _renderHook27 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook27.result;
      (0, _reactNative.act)(function () {
        result.current.trackAccessibilityInteraction('keyboard_navigation', {});
        result.current.trackAccessibilityInteraction('screen_reader', {});
      });
      var insights = result.current.getAccessibilityInsights();
      (0, _globals.expect)(insights).toEqual({
        totalAccessibilityInteractions: 2,
        mostUsedAccessibilityFeature: 'keyboard_navigation',
        accessibilityFeatureBreakdown: {
          keyboard_navigation: 1,
          screen_reader: 1
        },
        accessibilityEfficiency: _globals.expect.any(Number)
      });
    });
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle extreme timing values', function () {
      var _renderHook28 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook28.result;
      (0, _reactNative.act)(function () {
        result.current.startTiming('extreme');
      });
      _globals.jest.advanceTimersByTime(0);
      (0, _reactNative.act)(function () {
        result.current.endTiming('extreme');
      });
      (0, _globals.expect)(result.current.metrics.averageResponseTime).toBe(0);
    });
    (0, _globals.it)('should handle empty interaction data', function () {
      var _renderHook29 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook29.result;
      (0, _reactNative.act)(function () {
        result.current.trackInteraction('', {});
      });
      (0, _globals.expect)(result.current.metrics.totalInteractions).toBe(1);
      (0, _globals.expect)(result.current.metrics.interactionPatterns['']).toBe(1);
    });
    (0, _globals.it)('should handle very large datasets', function () {
      var _renderHook30 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            maxHistorySize: 100
          });
        }),
        result = _renderHook30.result;
      (0, _reactNative.act)(function () {
        for (var i = 0; i < 150; i++) {
          result.current.trackInteraction(`event${i}`, {
            index: i
          });
        }
      });
      (0, _globals.expect)(result.current.metrics.totalInteractions).toBe(150);
    });
    (0, _globals.it)('should handle concurrent operations', function () {
      var _renderHook31 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook31.result;
      (0, _reactNative.act)(function () {
        result.current.startTiming('op1');
        result.current.startTiming('op2');
        result.current.startTiming('op3');
        result.current.trackInteraction('test1', {});
        result.current.trackInteraction('test2', {});
        result.current.endTiming('op1');
        result.current.endTiming('op2');
      });
      (0, _globals.expect)(result.current.metrics.totalInteractions).toBe(2);
    });
    (0, _globals.it)('should handle malformed configuration', function () {
      var _renderHook32 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)({
            maxHistorySize: -1,
            debounceMs: 'invalid'
          });
        }),
        result = _renderHook32.result;
      (0, _globals.expect)(result.current.isTracking).toBe(true);
    });
    (0, _globals.it)('should handle platform-specific limitations', function () {
      var originalPlatform = process.platform;
      process.platform = 'unknown';
      var _renderHook33 = (0, _reactNative.renderHook)(function () {
          return (0, _useInteractionMetrics.useInteractionMetrics)();
        }),
        result = _renderHook33.result;
      (0, _reactNative.act)(function () {
        result.current.trackTouch({
          x: 100,
          y: 200,
          screen: 'test',
          element: 'button'
        });
      });
      (0, _globals.expect)(result.current.metrics.touchHeatmap['test']).toBeDefined();
      process.platform = originalPlatform;
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,