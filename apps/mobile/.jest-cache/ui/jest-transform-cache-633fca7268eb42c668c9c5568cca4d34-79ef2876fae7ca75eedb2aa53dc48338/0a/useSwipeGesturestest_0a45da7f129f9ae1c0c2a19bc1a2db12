05eede3db777dc5431517465d84ebf26
"use strict";

_getJestObj().mock("react-native", function () {
  return {
    PanResponder: {
      create: jest.fn(function () {
        return {
          panHandlers: {}
        };
      })
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      })
    }
  };
});
_getJestObj().mock("react-native-reanimated", function () {
  return {
    useSharedValue: jest.fn(function (initial) {
      return {
        value: initial
      };
    }),
    useAnimatedReaction: jest.fn(),
    runOnJS: jest.fn(function (fn) {
      return fn;
    }),
    withTiming: jest.fn(function (value) {
      return value;
    }),
    withSpring: jest.fn(function (value) {
      return value;
    })
  };
});
var _reactNative = require("@testing-library/react-native");
var _useSwipeGestures = require("../../swipe/useSwipeGestures");
var _reactNative2 = require("react-native");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockPanResponder = _reactNative2.PanResponder;
describe("useSwipeGestures", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockPanResponder.create.mockReturnValue({
      panHandlers: {
        onStartShouldSetPanResponder: jest.fn(),
        onMoveShouldSetPanResponder: jest.fn(),
        onPanResponderGrant: jest.fn(),
        onPanResponderMove: jest.fn(),
        onPanResponderRelease: jest.fn(),
        onPanResponderTerminate: jest.fn()
      }
    });
  });
  it("should initialize with correct default state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useSwipeGestures.useSwipeGestures)({
          onSwipeLeft: jest.fn(),
          onSwipeRight: jest.fn(),
          onSwipeUp: jest.fn(),
          onSwipeDown: jest.fn()
        });
      }),
      result = _renderHook.result;
    expect(result.current.panHandlers).toBeDefined();
    expect(typeof result.current.panHandlers.onStartShouldSetPanResponder).toBe("function");
    expect(typeof result.current.panHandlers.onPanResponderMove).toBe("function");
    expect(typeof result.current.panHandlers.onPanResponderRelease).toBe("function");
  });
  it("should create PanResponder with correct configuration", function () {
    (0, _reactNative.renderHook)(function () {
      return (0, _useSwipeGestures.useSwipeGestures)({
        onSwipeLeft: jest.fn(),
        onSwipeRight: jest.fn()
      });
    });
    expect(mockPanResponder.create).toHaveBeenCalledTimes(1);
    var config = mockPanResponder.create.mock.calls[0][0];
    expect(config).toHaveProperty("onStartShouldSetPanResponder");
    expect(config).toHaveProperty("onMoveShouldSetPanResponder");
    expect(config).toHaveProperty("onPanResponderGrant");
    expect(config).toHaveProperty("onPanResponderMove");
    expect(config).toHaveProperty("onPanResponderRelease");
    expect(config).toHaveProperty("onPanResponderTerminate");
  });
  it("should handle swipe left gesture", function () {
    var onSwipeLeft = jest.fn();
    var onSwipeRight = jest.fn();
    (0, _reactNative.renderHook)(function () {
      return (0, _useSwipeGestures.useSwipeGestures)({
        onSwipeLeft: onSwipeLeft,
        onSwipeRight: onSwipeRight,
        swipeThreshold: 50
      });
    });
    var config = mockPanResponder.create.mock.calls[0][0];
    (0, _reactNative.act)(function () {
      config.onPanResponderRelease == null ? void 0 : config.onPanResponderRelease({}, {
        dx: -100,
        dy: 10,
        vx: -0.5,
        vy: 0
      });
    });
    expect(onSwipeLeft).toHaveBeenCalledTimes(1);
    expect(onSwipeRight).not.toHaveBeenCalled();
  });
  it("should handle swipe right gesture", function () {
    var onSwipeLeft = jest.fn();
    var onSwipeRight = jest.fn();
    (0, _reactNative.renderHook)(function () {
      return (0, _useSwipeGestures.useSwipeGestures)({
        onSwipeLeft: onSwipeLeft,
        onSwipeRight: onSwipeRight,
        swipeThreshold: 50
      });
    });
    var config = mockPanResponder.create.mock.calls[0][0];
    (0, _reactNative.act)(function () {
      config.onPanResponderRelease == null ? void 0 : config.onPanResponderRelease({}, {
        dx: 100,
        dy: 10,
        vx: 0.5,
        vy: 0
      });
    });
    expect(onSwipeRight).toHaveBeenCalledTimes(1);
    expect(onSwipeLeft).not.toHaveBeenCalled();
  });
  it("should handle swipe up gesture", function () {
    var onSwipeUp = jest.fn();
    var onSwipeDown = jest.fn();
    (0, _reactNative.renderHook)(function () {
      return (0, _useSwipeGestures.useSwipeGestures)({
        onSwipeUp: onSwipeUp,
        onSwipeDown: onSwipeDown,
        swipeThreshold: 50
      });
    });
    var config = mockPanResponder.create.mock.calls[0][0];
    (0, _reactNative.act)(function () {
      config.onPanResponderRelease == null ? void 0 : config.onPanResponderRelease({}, {
        dx: 10,
        dy: -100,
        vx: 0,
        vy: -0.5
      });
    });
    expect(onSwipeUp).toHaveBeenCalledTimes(1);
    expect(onSwipeDown).not.toHaveBeenCalled();
  });
  it("should handle swipe down gesture", function () {
    var onSwipeUp = jest.fn();
    var onSwipeDown = jest.fn();
    (0, _reactNative.renderHook)(function () {
      return (0, _useSwipeGestures.useSwipeGestures)({
        onSwipeUp: onSwipeUp,
        onSwipeDown: onSwipeDown,
        swipeThreshold: 50
      });
    });
    var config = mockPanResponder.create.mock.calls[0][0];
    (0, _reactNative.act)(function () {
      config.onPanResponderRelease == null ? void 0 : config.onPanResponderRelease({}, {
        dx: 10,
        dy: 100,
        vx: 0,
        vy: 0.5
      });
    });
    expect(onSwipeDown).toHaveBeenCalledTimes(1);
    expect(onSwipeUp).not.toHaveBeenCalled();
  });
  it("should not trigger swipe for movements below threshold", function () {
    var onSwipeLeft = jest.fn();
    var onSwipeRight = jest.fn();
    (0, _reactNative.renderHook)(function () {
      return (0, _useSwipeGestures.useSwipeGestures)({
        onSwipeLeft: onSwipeLeft,
        onSwipeRight: onSwipeRight,
        swipeThreshold: 50
      });
    });
    var config = mockPanResponder.create.mock.calls[0][0];
    (0, _reactNative.act)(function () {
      config.onPanResponderRelease == null ? void 0 : config.onPanResponderRelease({}, {
        dx: 20,
        dy: 5,
        vx: 0.1,
        vy: 0
      });
    });
    expect(onSwipeLeft).not.toHaveBeenCalled();
    expect(onSwipeRight).not.toHaveBeenCalled();
  });
  it("should respect custom swipe threshold", function () {
    var onSwipeLeft = jest.fn();
    (0, _reactNative.renderHook)(function () {
      return (0, _useSwipeGestures.useSwipeGestures)({
        onSwipeLeft: onSwipeLeft,
        swipeThreshold: 100
      });
    });
    var config = mockPanResponder.create.mock.calls[0][0];
    (0, _reactNative.act)(function () {
      config.onPanResponderRelease == null ? void 0 : config.onPanResponderRelease({}, {
        dx: -80,
        dy: 5,
        vx: -0.3,
        vy: 0
      });
    });
    expect(onSwipeLeft).not.toHaveBeenCalled();
    (0, _reactNative.act)(function () {
      config.onPanResponderRelease == null ? void 0 : config.onPanResponderRelease({}, {
        dx: -120,
        dy: 5,
        vx: -0.6,
        vy: 0
      });
    });
    expect(onSwipeLeft).toHaveBeenCalledTimes(1);
  });
  it("should prioritize horizontal over vertical swipes", function () {
    var onSwipeLeft = jest.fn();
    var onSwipeUp = jest.fn();
    (0, _reactNative.renderHook)(function () {
      return (0, _useSwipeGestures.useSwipeGestures)({
        onSwipeLeft: onSwipeLeft,
        onSwipeUp: onSwipeUp,
        swipeThreshold: 50
      });
    });
    var config = mockPanResponder.create.mock.calls[0][0];
    (0, _reactNative.act)(function () {
      config.onPanResponderRelease == null ? void 0 : config.onPanResponderRelease({}, {
        dx: -80,
        dy: -80,
        vx: -0.5,
        vy: -0.5
      });
    });
    expect(onSwipeLeft).toHaveBeenCalledTimes(1);
    expect(onSwipeUp).not.toHaveBeenCalled();
  });
  it("should handle pan responder termination", function () {
    var onSwipeLeft = jest.fn();
    (0, _reactNative.renderHook)(function () {
      return (0, _useSwipeGestures.useSwipeGestures)({
        onSwipeLeft: onSwipeLeft
      });
    });
    var config = mockPanResponder.create.mock.calls[0][0];
    (0, _reactNative.act)(function () {
      config.onPanResponderTerminate == null ? void 0 : config.onPanResponderTerminate({}, {});
    });
    expect(onSwipeLeft).not.toHaveBeenCalled();
  });
  it("should return stable panHandlers reference", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useSwipeGestures.useSwipeGestures)({
          onSwipeLeft: jest.fn()
        });
      }),
      result = _renderHook2.result,
      rerender = _renderHook2.rerender;
    var firstPanHandlers = result.current.panHandlers;
    rerender();
    expect(result.current.panHandlers).toBe(firstPanHandlers);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,