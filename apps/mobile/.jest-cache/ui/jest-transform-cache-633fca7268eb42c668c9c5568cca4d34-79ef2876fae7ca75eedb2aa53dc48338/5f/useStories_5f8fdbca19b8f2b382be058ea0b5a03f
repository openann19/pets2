ea36fe6807834cac04a2172f371da449
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useStories = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _reactQuery = require("@tanstack/react-query");
var _core = require("@pawfectmatch/core");
var _useSocket = require("../../useSocket");
var _apiClient = _interopRequireDefault(require("../../../services/apiClient"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var useStories = exports.useStories = function useStories() {
  var initialGroupIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var _useState = (0, _react.useState)(initialGroupIndex),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentGroupIndex = _useState2[0],
    setCurrentGroupIndex = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    currentStoryIndex = _useState4[0],
    setCurrentStoryIndex = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isPaused = _useState6[0],
    setIsPaused = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isMuted = _useState8[0],
    setIsMuted = _useState8[1];
  var _useState9 = (0, _react.useState)(0),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    progress = _useState0[0],
    setProgress = _useState0[1];
  var _useState1 = (0, _react.useState)(0),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    viewCount = _useState10[0],
    setViewCount = _useState10[1];
  var timerRef = (0, _react.useRef)(null);
  var progressIntervalRef = (0, _react.useRef)(null);
  var longPressTimer = (0, _react.useRef)(null);
  var socket = (0, _useSocket.useSocket)();
  var _useQuery = (0, _reactQuery.useQuery)({
      queryKey: ["stories-feed"],
      queryFn: function () {
        var _queryFn = (0, _asyncToGenerator2.default)(function* () {
          var response = yield _apiClient.default.get("/stories");
          return response.stories;
        });
        function queryFn() {
          return _queryFn.apply(this, arguments);
        }
        return queryFn;
      }()
    }),
    storyGroups = _useQuery.data,
    isLoading = _useQuery.isLoading,
    error = _useQuery.error,
    refetch = _useQuery.refetch;
  var currentGroup = storyGroups == null ? void 0 : storyGroups[currentGroupIndex];
  var refreshStories = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield refetch();
  }), [refetch]);
  var currentStory = currentGroup == null ? void 0 : currentGroup.stories[currentStoryIndex];
  var viewStoryMutation = (0, _reactQuery.useMutation)({
    mutationFn: function () {
      var _mutationFn = (0, _asyncToGenerator2.default)(function* (storyId) {
        var response = yield _apiClient.default.post(`/stories/${storyId}/view`);
        return response;
      });
      function mutationFn(_x) {
        return _mutationFn.apply(this, arguments);
      }
      return mutationFn;
    }(),
    onSuccess: function onSuccess(data) {
      setViewCount(data.viewCount);
    }
  });
  var goToNextStory = (0, _react.useCallback)(function () {
    if (!currentGroup) return;
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    if (currentStoryIndex < currentGroup.stories.length - 1) {
      setCurrentStoryIndex(function (prev) {
        return prev + 1;
      });
      setProgress(0);
    } else if (storyGroups && currentGroupIndex < storyGroups.length - 1) {
      setCurrentGroupIndex(function (prev) {
        return prev + 1;
      });
      setCurrentStoryIndex(0);
      setProgress(0);
    } else {
      _core.logger.info("Reached end of stories");
    }
  }, [currentGroup, currentStoryIndex, currentGroupIndex, storyGroups]);
  var goToPreviousStory = (0, _react.useCallback)(function () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    if (currentStoryIndex > 0) {
      setCurrentStoryIndex(function (prev) {
        return prev - 1;
      });
      setProgress(0);
    } else if (currentGroupIndex > 0 && storyGroups) {
      var prevGroupIndex = currentGroupIndex - 1;
      var prevGroup = storyGroups[prevGroupIndex];
      if (prevGroup) {
        setCurrentGroupIndex(prevGroupIndex);
        setCurrentStoryIndex(prevGroup.stories.length - 1);
        setProgress(0);
      }
    }
  }, [currentStoryIndex, currentGroupIndex, storyGroups]);
  var goToGroup = (0, _react.useCallback)(function (groupIndex) {
    if (groupIndex >= 0 && storyGroups && groupIndex < storyGroups.length) {
      setCurrentGroupIndex(groupIndex);
      setCurrentStoryIndex(0);
      setProgress(0);
    }
  }, [storyGroups]);
  var goToStory = (0, _react.useCallback)(function (groupIndex, storyIndex) {
    if (groupIndex >= 0 && storyGroups && groupIndex < storyGroups.length) {
      var group = storyGroups[groupIndex];
      if (group && storyIndex >= 0 && storyIndex < group.stories.length) {
        setCurrentGroupIndex(groupIndex);
        setCurrentStoryIndex(storyIndex);
        setProgress(0);
      }
    }
  }, [storyGroups]);
  (0, _react.useEffect)(function () {
    if (!currentStory || isPaused) return;
    var duration = currentStory.duration * 1000;
    var startTime = Date.now();
    progressIntervalRef.current = setInterval(function () {
      var elapsed = Date.now() - startTime;
      var newProgress = Math.min(elapsed / duration * 100, 100);
      setProgress(newProgress);
    }, 16);
    timerRef.current = setTimeout(function () {
      goToNextStory();
    }, duration);
    return function () {
      if (timerRef.current) clearTimeout(timerRef.current);
      if (progressIntervalRef.current) clearInterval(progressIntervalRef.current);
    };
  }, [currentStory, isPaused, goToNextStory]);
  (0, _react.useEffect)(function () {
    if (currentStory) {
      viewStoryMutation.mutate(currentStory._id);
    }
  }, [currentStory == null ? void 0 : currentStory._id]);
  (0, _react.useEffect)(function () {
    if (!socket || !currentStory) return;
    var handleStoryViewed = function handleStoryViewed(data) {
      if (data.storyId === currentStory._id) {
        setViewCount(data.viewCount);
      }
    };
    socket.on("story:viewed", handleStoryViewed);
    return function () {
      socket.off("story:viewed", handleStoryViewed);
    };
  }, [socket, currentStory == null ? void 0 : currentStory._id]);
  var markAsViewed = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (storyId) {
      try {
        yield viewStoryMutation.mutateAsync(storyId);
      } catch (error) {
        _core.logger.error("Failed to mark story as viewed", {
          error: error,
          storyId: storyId
        });
      }
    });
    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }(), [viewStoryMutation]);
  var setPaused = (0, _react.useCallback)(function (paused) {
    setIsPaused(paused);
  }, []);
  var setMuted = (0, _react.useCallback)(function (muted) {
    setIsMuted(muted);
  }, []);
  return {
    storyGroups: storyGroups,
    isLoading: isLoading,
    error: (error == null ? void 0 : error.message) || null,
    currentGroupIndex: currentGroupIndex,
    currentStoryIndex: currentStoryIndex,
    currentGroup: currentGroup,
    currentStory: currentStory,
    progress: progress,
    viewCount: viewCount,
    isPaused: isPaused,
    isMuted: isMuted,
    setPaused: setPaused,
    setMuted: setMuted,
    goToNextStory: goToNextStory,
    goToPreviousStory: goToPreviousStory,
    goToGroup: goToGroup,
    goToStory: goToStory,
    markAsViewed: markAsViewed,
    refreshStories: refreshStories,
    timerRef: timerRef,
    progressIntervalRef: progressIntervalRef,
    longPressTimer: longPressTimer
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,