16201fa5ec36c488848b0b61f20fadb8
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWorkletFunction = exports.SharedTransitionType = exports.SensorType = exports.ReduceMotion = exports.LayoutAnimationType = exports.KeyboardState = exports.InterfaceOrientation = exports.IOSReferenceFrame = void 0;
var LayoutAnimationType = exports.LayoutAnimationType = function (LayoutAnimationType) {
  LayoutAnimationType[LayoutAnimationType["ENTERING"] = 1] = "ENTERING";
  LayoutAnimationType[LayoutAnimationType["EXITING"] = 2] = "EXITING";
  LayoutAnimationType[LayoutAnimationType["LAYOUT"] = 3] = "LAYOUT";
  LayoutAnimationType[LayoutAnimationType["SHARED_ELEMENT_TRANSITION"] = 4] = "SHARED_ELEMENT_TRANSITION";
  LayoutAnimationType[LayoutAnimationType["SHARED_ELEMENT_TRANSITION_PROGRESS"] = 5] = "SHARED_ELEMENT_TRANSITION_PROGRESS";
  return LayoutAnimationType;
}({});
var SharedTransitionType = exports.SharedTransitionType = function (SharedTransitionType) {
  SharedTransitionType["ANIMATION"] = "animation";
  SharedTransitionType["PROGRESS_ANIMATION"] = "progressAnimation";
  return SharedTransitionType;
}({});
var _worklet_10789598570169_init_data = {
  code: "function isWorkletFunction(value) {\n  return (typeof value === 'function' && !!value.__workletHash\n  );\n}",
  location: "/home/ben/Downloads/pets-fresh/node_modules/react-native-reanimated/src/commonTypes.ts",
  sourceMap: "{\"version\":3,\"names\":[\"isWorkletFunction\",\"value\",\"__workletHash\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/node_modules/react-native-reanimated/src/commonTypes.ts\"],\"mappings\":\"AAoXO,SAAAA,iBAASA,CACdC,KAGA,EAAe;EAKf,QAEE,OAAOA,KAAK,KAAK,UAAU,IAC3B,CAAC,CAAEA,KAAK,CAAwCC;EAAA;AAEpD\",\"ignoreList\":[]}"
};
var isWorkletFunction = exports.isWorkletFunction = function () {
  var _e = [new global.Error(), 1, -27];
  var _f = function _f(value) {
    return (typeof value === 'function' && !!value.__workletHash
    );
  };
  _f._closure = {};
  _f.__initData = _worklet_10789598570169_init_data;
  _f.__workletHash = 10789598570169;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var SensorType = exports.SensorType = function (SensorType) {
  SensorType[SensorType["ACCELEROMETER"] = 1] = "ACCELEROMETER";
  SensorType[SensorType["GYROSCOPE"] = 2] = "GYROSCOPE";
  SensorType[SensorType["GRAVITY"] = 3] = "GRAVITY";
  SensorType[SensorType["MAGNETIC_FIELD"] = 4] = "MAGNETIC_FIELD";
  SensorType[SensorType["ROTATION"] = 5] = "ROTATION";
  return SensorType;
}({});
var IOSReferenceFrame = exports.IOSReferenceFrame = function (IOSReferenceFrame) {
  IOSReferenceFrame[IOSReferenceFrame["XArbitraryZVertical"] = 0] = "XArbitraryZVertical";
  IOSReferenceFrame[IOSReferenceFrame["XArbitraryCorrectedZVertical"] = 1] = "XArbitraryCorrectedZVertical";
  IOSReferenceFrame[IOSReferenceFrame["XMagneticNorthZVertical"] = 2] = "XMagneticNorthZVertical";
  IOSReferenceFrame[IOSReferenceFrame["XTrueNorthZVertical"] = 3] = "XTrueNorthZVertical";
  IOSReferenceFrame[IOSReferenceFrame["Auto"] = 4] = "Auto";
  return IOSReferenceFrame;
}({});
var InterfaceOrientation = exports.InterfaceOrientation = function (InterfaceOrientation) {
  InterfaceOrientation[InterfaceOrientation["ROTATION_0"] = 0] = "ROTATION_0";
  InterfaceOrientation[InterfaceOrientation["ROTATION_90"] = 90] = "ROTATION_90";
  InterfaceOrientation[InterfaceOrientation["ROTATION_180"] = 180] = "ROTATION_180";
  InterfaceOrientation[InterfaceOrientation["ROTATION_270"] = 270] = "ROTATION_270";
  return InterfaceOrientation;
}({});
var KeyboardState = exports.KeyboardState = function (KeyboardState) {
  KeyboardState[KeyboardState["UNKNOWN"] = 0] = "UNKNOWN";
  KeyboardState[KeyboardState["OPENING"] = 1] = "OPENING";
  KeyboardState[KeyboardState["OPEN"] = 2] = "OPEN";
  KeyboardState[KeyboardState["CLOSING"] = 3] = "CLOSING";
  KeyboardState[KeyboardState["CLOSED"] = 4] = "CLOSED";
  return KeyboardState;
}({});
var ReduceMotion = exports.ReduceMotion = function (ReduceMotion) {
  ReduceMotion["System"] = "system";
  ReduceMotion["Always"] = "always";
  ReduceMotion["Never"] = "never";
  return ReduceMotion;
}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,