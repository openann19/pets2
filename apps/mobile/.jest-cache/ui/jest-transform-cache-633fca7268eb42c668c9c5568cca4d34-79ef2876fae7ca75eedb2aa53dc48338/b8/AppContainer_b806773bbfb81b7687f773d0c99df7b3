62edeac613931b06eedd56b46ebafcff
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _RootTag = require("./RootTag");
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var reactDevToolsHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
var AppContainer = function (_React$Component) {
  function AppContainer() {
    var _this;
    (0, _classCallCheck2.default)(this, AppContainer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, AppContainer, [].concat(args));
    _this.state = {
      inspector: null,
      devtoolsOverlay: null,
      traceUpdateOverlay: null,
      mainKey: 1,
      hasError: false
    };
    _this._subscription = null;
    _this._reactDevToolsAgentListener = null;
    return _this;
  }
  (0, _inherits2.default)(AppContainer, _React$Component);
  return (0, _createClass2.default)(AppContainer, [{
    key: "mountReactDevToolsOverlays",
    value: function mountReactDevToolsOverlays() {
      var DevtoolsOverlay = require("../Inspector/DevtoolsOverlay").default;
      var devtoolsOverlay = (0, _jsxRuntime.jsx)(DevtoolsOverlay, {
        inspectedView: this._mainRef
      });
      var TraceUpdateOverlay = require("../Components/TraceUpdateOverlay/TraceUpdateOverlay").default;
      var traceUpdateOverlay = (0, _jsxRuntime.jsx)(TraceUpdateOverlay, {});
      this.setState({
        devtoolsOverlay: devtoolsOverlay,
        traceUpdateOverlay: traceUpdateOverlay
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      if (__DEV__) {
        if (!this.props.internal_excludeInspector) {
          this._subscription = _RCTDeviceEventEmitter.default.addListener('toggleElementInspector', function () {
            var Inspector = require("../Inspector/Inspector");
            var inspector = _this2.state.inspector ? null : (0, _jsxRuntime.jsx)(Inspector, {
              inspectedView: _this2._mainRef,
              onRequestRerenderApp: function onRequestRerenderApp(updateInspectedView) {
                _this2.setState(function (s) {
                  return {
                    mainKey: s.mainKey + 1
                  };
                }, function () {
                  return updateInspectedView(_this2._mainRef);
                });
              }
            });
            _this2.setState({
              inspector: inspector
            });
          });
          if (reactDevToolsHook != null) {
            if (reactDevToolsHook.reactDevtoolsAgent) {
              this.mountReactDevToolsOverlays();
              return;
            }
            this._reactDevToolsAgentListener = function () {
              return _this2.mountReactDevToolsOverlays();
            };
            reactDevToolsHook.on('react-devtools', this._reactDevToolsAgentListener);
          }
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._subscription != null) {
        this._subscription.remove();
      }
      if (reactDevToolsHook != null && this._reactDevToolsAgentListener != null) {
        reactDevToolsHook.off('react-devtools', this._reactDevToolsAgentListener);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var logBox = null;
      if (__DEV__) {
        if (!this.props.internal_excludeLogBox) {
          var LogBoxNotificationContainer = require("../LogBox/LogBoxNotificationContainer").default;
          logBox = (0, _jsxRuntime.jsx)(LogBoxNotificationContainer, {});
        }
      }
      var innerView = (0, _jsxRuntime.jsx)(_View.default, {
        collapsable: !this.state.inspector && !this.state.devtoolsOverlay,
        pointerEvents: "box-none",
        style: styles.appContainer,
        ref: function ref(_ref) {
          _this3._mainRef = _ref;
        },
        children: this.props.children
      }, this.state.mainKey);
      var Wrapper = this.props.WrapperComponent;
      if (Wrapper != null) {
        innerView = (0, _jsxRuntime.jsx)(Wrapper, {
          initialProps: this.props.initialProps,
          fabric: this.props.fabric === true,
          showArchitectureIndicator: this.props.showArchitectureIndicator === true,
          children: innerView
        });
      }
      return (0, _jsxRuntime.jsx)(_RootTag.RootTagContext.Provider, {
        value: (0, _RootTag.createRootTag)(this.props.rootTag),
        children: (0, _jsxRuntime.jsxs)(_View.default, {
          style: styles.appContainer,
          pointerEvents: "box-none",
          children: [!this.state.hasError && innerView, this.state.traceUpdateOverlay, this.state.devtoolsOverlay, this.state.inspector, logBox]
        })
      });
    }
  }]);
}(React.Component);
AppContainer.getDerivedStateFromError = undefined;
var styles = _StyleSheet.default.create({
  appContainer: {
    flex: 1
  }
});
module.exports = AppContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,