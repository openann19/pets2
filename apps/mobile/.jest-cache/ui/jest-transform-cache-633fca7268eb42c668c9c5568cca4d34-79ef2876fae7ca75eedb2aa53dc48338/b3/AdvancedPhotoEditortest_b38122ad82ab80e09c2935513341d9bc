4ec2f226e46ff2f5579351d97248b5b1
"use strict";

_getJestObj().mock("../../../hooks/usePhotoEditor");
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaView: function SafeAreaView(_ref) {
      var children = _ref.children;
      return children;
    }
  };
});
_getJestObj().mock('expo-blur', function () {
  return {
    BlurView: function BlurView(_ref2) {
      var children = _ref2.children;
      return children;
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  return {
    Ionicons: function Ionicons(_ref3) {
      var name = _ref3.name;
      return (0, _jsxRuntime.jsx)("test-element", {
        name: name
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _AdvancedPhotoEditor = require("../AdvancedPhotoEditor");
var _usePhotoEditor = require("../../../hooks/usePhotoEditor");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUsePhotoEditor = _usePhotoEditor.usePhotoEditor;
describe('AdvancedPhotoEditor', function () {
  var mockImageUri = 'file://test-image.jpg';
  var mockOnSave = jest.fn();
  var mockOnCancel = jest.fn();
  var defaultMockReturn = {
    uri: mockImageUri,
    isLoading: false,
    adjustments: {
      brightness: 100,
      contrast: 100,
      saturation: 100,
      warmth: 0,
      blur: 0,
      sharpen: 0
    },
    rotation: 0,
    flipHorizontal: false,
    flipVertical: false,
    updateAdjustment: jest.fn(),
    setRotation: jest.fn(),
    setFlipHorizontal: jest.fn(),
    setFlipVertical: jest.fn(),
    applyFilter: jest.fn(),
    resetAdjustments: jest.fn(),
    saveImage: jest.fn().mockResolvedValue('file://edited.jpg'),
    rotateLeft: jest.fn(),
    rotateRight: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockUsePhotoEditor.mockReturnValue(defaultMockReturn);
  });
  describe('Rendering', function () {
    it('should render with image preview', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByTestId = _render.getByTestId;
      expect(getByTestId).toBeDefined();
    });
    it('should render header with title and buttons', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render2.getByText;
      expect(getByText('Edit Photo')).toBeTruthy();
      expect(getByText('Save')).toBeTruthy();
    });
    it('should render tab buttons for adjust and filters', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render3.getByText;
      expect(getByText('Adjust')).toBeTruthy();
      expect(getByText('Filters')).toBeTruthy();
    });
  });
  describe('Tab Navigation', function () {
    it('should switch to adjust tab', (0, _asyncToGenerator2.default)(function* () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render4.getByText;
      var adjustTab = getByText('Adjust');
      _reactNative.fireEvent.press(adjustTab);
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Rotate L')).toBeTruthy();
      });
    }));
    it('should switch to filters tab', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render5.getByText;
      var filtersTab = getByText('Filters');
      _reactNative.fireEvent.press(filtersTab);
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText('Original')).toBeTruthy();
      });
    }));
  });
  describe('Transform Controls', function () {
    it('should call rotateLeft when pressing rotate left button', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render6.getByText;
      var rotateLeftButton = getByText('Rotate L');
      _reactNative.fireEvent.press(rotateLeftButton);
      expect(defaultMockReturn.rotateLeft).toHaveBeenCalledTimes(1);
    });
    it('should call rotateRight when pressing rotate right button', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render7.getByText;
      var rotateRightButton = getByText('Rotate R');
      _reactNative.fireEvent.press(rotateRightButton);
      expect(defaultMockReturn.rotateRight).toHaveBeenCalledTimes(1);
    });
    it('should call handleFlipH when pressing flip horizontal button', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render8.getByText;
      var flipHButton = getByText('Flip H');
      _reactNative.fireEvent.press(flipHButton);
      expect(defaultMockReturn.setFlipHorizontal).toHaveBeenCalled();
    });
    it('should call handleFlipV when pressing flip vertical button', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render9.getByText;
      var flipVButton = getByText('Flip V');
      _reactNative.fireEvent.press(flipVButton);
      expect(defaultMockReturn.setFlipVertical).toHaveBeenCalled();
    });
    it('should call resetAdjustments when pressing reset button', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render0.getByText;
      var resetButton = getByText('Reset All');
      _reactNative.fireEvent.press(resetButton);
      expect(defaultMockReturn.resetAdjustments).toHaveBeenCalledTimes(1);
    });
  });
  describe('Filter Presets', function () {
    it('should apply filter preset when tapped', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render1.getByText;
      var filtersTab = getByText('Filters');
      _reactNative.fireEvent.press(filtersTab);
      (0, _reactNative.waitFor)(function () {
        var vividFilter = getByText('Vivid');
        _reactNative.fireEvent.press(vividFilter);
        expect(defaultMockReturn.applyFilter).toHaveBeenCalled();
      });
    });
    it('should apply correct filter adjustments', function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render10.getByText;
      var filtersTab = getByText('Filters');
      _reactNative.fireEvent.press(filtersTab);
      (0, _reactNative.waitFor)(function () {
        var warmFilter = getByText('Warm');
        _reactNative.fireEvent.press(warmFilter);
        expect(defaultMockReturn.applyFilter).toHaveBeenCalledWith(expect.objectContaining({
          brightness: 105,
          saturation: 110,
          warmth: 30
        }));
      });
    });
  });
  describe('Save Functionality', function () {
    it('should call saveImage and onSave when save button is pressed', (0, _asyncToGenerator2.default)(function* () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render11.getByText;
      var saveButton = getByText('Save');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(saveButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(defaultMockReturn.saveImage).toHaveBeenCalledTimes(1);
        expect(mockOnSave).toHaveBeenCalledWith('file://edited.jpg');
      });
    }));
    it('should not save when loading', function () {
      mockUsePhotoEditor.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockReturn), {}, {
        isLoading: true
      }));
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render12.getByText;
      var saveButton = getByText('Save');
      expect(saveButton.props.disabled).toBeTruthy();
    });
    it('should show loading overlay when processing', function () {
      mockUsePhotoEditor.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockReturn), {}, {
        isLoading: true
      }));
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render13.getByText;
      expect(getByText('Processing...')).toBeTruthy();
    });
  });
  describe('Cancel Functionality', function () {
    it('should call onCancel when cancel button is pressed', function () {
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByTestId = _render14.getByTestId;
      _reactNative.fireEvent.press(getByTestId('cancel-button'));
      expect(mockOnCancel).toHaveBeenCalledTimes(1);
    });
  });
  describe('Aspect Ratio', function () {
    it('should enforce 1:1 aspect ratio for avatars', function () {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel,
          aspectRatio: [1, 1],
          maxWidth: 512,
          maxHeight: 512
        })),
        container = _render15.container;
      expect(mockUsePhotoEditor).toHaveBeenCalledWith(mockImageUri, expect.objectContaining({
        maxWidth: 512,
        maxHeight: 512
      }));
    });
    it('should enforce 4:3 aspect ratio for pet photos', function () {
      var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel,
          aspectRatio: [4, 3],
          maxWidth: 1920,
          maxHeight: 1920
        })),
        container = _render16.container;
      expect(mockUsePhotoEditor).toHaveBeenCalledWith(mockImageUri, expect.objectContaining({
        maxWidth: 1920,
        maxHeight: 1920
      }));
    });
  });
  describe('Adjustment Sliders', function () {
    it('should update brightness when slider value changes', (0, _asyncToGenerator2.default)(function* () {
      var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getAllByText = _render17.getAllByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getAllByText('Brightness')).toBeTruthy();
        expect(getAllByText('100')).toBeTruthy();
      });
    }));
    it('should update contrast when slider value changes', (0, _asyncToGenerator2.default)(function* () {
      var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getAllByText = _render18.getAllByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getAllByText('Contrast')).toBeTruthy();
      });
    }));
    it('should update saturation when slider value changes', (0, _asyncToGenerator2.default)(function* () {
      var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getAllByText = _render19.getAllByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getAllByText('Saturation')).toBeTruthy();
      });
    }));
    it('should update warmth when slider value changes', (0, _asyncToGenerator2.default)(function* () {
      var _render20 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getAllByText = _render20.getAllByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getAllByText('Warmth')).toBeTruthy();
      });
    }));
  });
  describe('Edge Cases', function () {
    it('should handle save error gracefully', (0, _asyncToGenerator2.default)(function* () {
      var mockSaveError = jest.fn().mockRejectedValue(new Error('Save failed'));
      mockUsePhotoEditor.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockReturn), {}, {
        saveImage: mockSaveError
      }));
      var _render21 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render21.getByText;
      var saveButton = getByText('Save');
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(saveButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalled();
      });
    }));
    it('should handle invalid image URI', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
        imageUri: "",
        onSave: mockOnSave,
        onCancel: mockOnCancel
      }));
      expect(true).toBeTruthy();
    });
    it('should handle null adjustments', function () {
      mockUsePhotoEditor.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockReturn), {}, {
        adjustments: null
      }));
      var _render22 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        container = _render22.container;
      expect(true).toBeTruthy();
    });
  });
  describe('Accessibility', function () {
    it('should have accessible labels', function () {
      var _render23 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        getByText = _render23.getByText;
      expect(getByText('Edit Photo')).toBeTruthy();
    });
  });
  describe('Performance', function () {
    it('should not re-render unnecessarily', function () {
      var _render24 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: mockImageUri,
          onSave: mockOnSave,
          onCancel: mockOnCancel
        })),
        container = _render24.container,
        rerender = _render24.rerender;
      var renderCount = jest.fn();
      rerender((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
        imageUri: mockImageUri,
        onSave: mockOnSave,
        onCancel: mockOnCancel
      }));
      expect(true).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,