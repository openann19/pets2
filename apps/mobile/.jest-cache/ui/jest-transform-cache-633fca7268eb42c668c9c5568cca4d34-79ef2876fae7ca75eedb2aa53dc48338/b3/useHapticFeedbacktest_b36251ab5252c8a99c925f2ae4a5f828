e96b7f9c96ea117f0f45a686bfb3117d
"use strict";

_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    ImpactFeedbackStyle: {
      Light: 'Light',
      Medium: 'Medium',
      Heavy: 'Heavy'
    },
    notificationAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    NotificationFeedbackType: {
      Success: 'Success',
      Warning: 'Warning',
      Error: 'Error'
    },
    selectionAsync: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _reactNative = require("@testing-library/react-native");
var _useHapticFeedback = require("../useHapticFeedback");
function _getJestObj() {
  var _require7 = require("@jest/globals"),
    jest = _require7.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useHapticFeedback', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should return haptic feedback functions', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useHapticFeedback.useHapticFeedback)();
      }),
      result = _renderHook.result;
    expect(result.current).toBeDefined();
    expect(typeof result.current.triggerImpact).toBe('function');
    expect(typeof result.current.triggerNotification).toBe('function');
    expect(typeof result.current.triggerSelection).toBe('function');
  });
  it('should trigger light impact', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useHapticFeedback.useHapticFeedback)();
      }),
      result = _renderHook2.result;
    var _require = require('expo-haptics'),
      impactAsync = _require.impactAsync;
    (0, _reactNative.act)(function () {
      result.current.triggerImpact('Light');
    });
    expect(impactAsync).toHaveBeenCalledWith('Light');
  });
  it('should trigger medium impact', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useHapticFeedback.useHapticFeedback)();
      }),
      result = _renderHook3.result;
    var _require2 = require('expo-haptics'),
      impactAsync = _require2.impactAsync;
    (0, _reactNative.act)(function () {
      result.current.triggerImpact('Medium');
    });
    expect(impactAsync).toHaveBeenCalledWith('Medium');
  });
  it('should trigger heavy impact', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useHapticFeedback.useHapticFeedback)();
      }),
      result = _renderHook4.result;
    var _require3 = require('expo-haptics'),
      impactAsync = _require3.impactAsync;
    (0, _reactNative.act)(function () {
      result.current.triggerImpact('Heavy');
    });
    expect(impactAsync).toHaveBeenCalledWith('Heavy');
  });
  it('should handle notification feedback', function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useHapticFeedback.useHapticFeedback)();
      }),
      result = _renderHook5.result;
    var _require4 = require('expo-haptics'),
      notificationAsync = _require4.notificationAsync;
    (0, _reactNative.act)(function () {
      result.current.triggerNotification('Success');
    });
    expect(notificationAsync).toHaveBeenCalledWith('Success');
  });
  it('should handle selection feedback', function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useHapticFeedback.useHapticFeedback)();
      }),
      result = _renderHook6.result;
    var _require5 = require('expo-haptics'),
      selectionAsync = _require5.selectionAsync;
    (0, _reactNative.act)(function () {
      result.current.triggerSelection();
    });
    expect(selectionAsync).toHaveBeenCalled();
  });
  it('should handle errors gracefully', function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useHapticFeedback.useHapticFeedback)();
      }),
      result = _renderHook7.result;
    var _require6 = require('expo-haptics'),
      impactAsync = _require6.impactAsync;
    impactAsync.mockRejectedValueOnce(new Error('Haptic not available'));
    (0, _reactNative.act)(function () {
      expect(function () {
        result.current.triggerImpact('Light');
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,