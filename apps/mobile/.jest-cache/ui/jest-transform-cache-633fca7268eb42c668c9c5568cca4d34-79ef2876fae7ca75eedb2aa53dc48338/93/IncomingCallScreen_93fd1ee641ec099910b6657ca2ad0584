d56f52b37694582caa6a4ff70b779689
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = IncomingCallScreen;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _vectorIcons = require("@expo/vector-icons");
var _expoBlur = require("expo-blur");
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function IncomingCallScreen(_ref) {
  var callData = _ref.callData,
    onAnswer = _ref.onAnswer,
    onReject = _ref.onReject;
  var _Dimensions$get = _reactNative.Dimensions.get("window"),
    screenWidth = _Dimensions$get.width,
    screenHeight = _Dimensions$get.height;
  var _useState = (0, _react.useState)(new _reactNative.Animated.Value(1)),
    _useState2 = (0, _slicedToArray2.default)(_useState, 1),
    pulseAnim = _useState2[0];
  var _useState3 = (0, _react.useState)(new _reactNative.Animated.Value(0)),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 1),
    slideAnim = _useState4[0];
  (0, _react.useEffect)(function () {
    var pulseAnimation = _reactNative.Animated.loop(_reactNative.Animated.sequence([_reactNative.Animated.timing(pulseAnim, {
      toValue: 1.2,
      duration: 1000,
      useNativeDriver: true
    }), _reactNative.Animated.timing(pulseAnim, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true
    })]));
    var slideAnimation = _reactNative.Animated.timing(slideAnim, {
      toValue: 1,
      duration: 500,
      useNativeDriver: true
    });
    pulseAnimation.start();
    slideAnimation.start();
    var vibrationPattern = [0, 1000, 500, 1000, 500];
    _reactNative.Vibration.vibrate(vibrationPattern, true);
    return function () {
      pulseAnimation.stop();
      _reactNative.Vibration.cancel();
    };
  }, []);
  var handleAnswer = function handleAnswer() {
    _reactNative.Vibration.cancel();
    onAnswer();
  };
  var handleReject = function handleReject() {
    _reactNative.Vibration.cancel();
    onReject();
  };
  var formatCallType = function formatCallType(type) {
    return type === "video" ? "Video Call" : "Voice Call";
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    testID: "incoming-call-container",
    children: [(0, _jsxRuntime.jsx)(_reactNative.StatusBar, {
      barStyle: "light-content",
      backgroundColor: "transparent",
      translucent: true
    }), (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
      colors: ["#1a1a2e", "#16213e", "#0f3460"],
      style: styles.backgroundGradient
    }), (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
      intensity: 20,
      style: styles.blurOverlay
    }), (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
      style: styles.content,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
        style: _reactNative.StyleSheet.flatten([styles.header, {
          transform: [{
            translateY: slideAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [-50, 0]
            })
          }]
        }]),
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.incomingCallText,
          children: "Incoming Call"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.callTypeText,
          children: formatCallType(callData.callType)
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
        style: _reactNative.StyleSheet.flatten([styles.callerInfo, {
          transform: [{
            scale: slideAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [0.8, 1]
            })
          }]
        }]),
        children: [(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: _reactNative.StyleSheet.flatten([styles.avatarContainer, {
            transform: [{
              scale: pulseAnim
            }]
          }]),
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.avatarRing,
            children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: callData.callerAvatar != null && callData.callerAvatar !== "" ? {
                uri: callData.callerAvatar
              } : require("../../assets/default-avatar.png"),
              style: styles.avatar,
              testID: "caller-avatar"
            })
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.callerName,
          children: callData.callerName
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.callerSubtext,
          children: "PawfectMatch"
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
        style: _reactNative.StyleSheet.flatten([styles.actionsContainer, {
          transform: [{
            translateY: slideAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [100, 0]
            })
          }]
        }]),
        children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: _reactNative.StyleSheet.flatten([styles.actionButton, styles.rejectButton]),
          onPress: handleReject,
          activeOpacity: 0.8,
          testID: "reject-button",
          children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
            colors: ["#ff4757", "#ff3838"],
            style: styles.buttonGradient,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "call",
              size: 32,
              color: "Theme.colors.neutral[0]",
              style: {
                transform: [{
                  rotate: "135deg"
                }]
              }
            })
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: _reactNative.StyleSheet.flatten([styles.actionButton, styles.answerButton]),
          onPress: handleAnswer,
          activeOpacity: 0.8,
          testID: "answer-button",
          children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
            colors: ["#2ed573", "#1dd1a1"],
            style: styles.buttonGradient,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "call",
              size: 32,
              color: "Theme.colors.neutral[0]"
            })
          })
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
        style: _reactNative.StyleSheet.flatten([styles.additionalActions, {
          opacity: slideAnim
        }]),
        children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          style: styles.additionalButton,
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "chatbubble",
            size: 24,
            color: "Theme.colors.neutral[0]"
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.additionalButtonText,
            children: "Message"
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          style: styles.additionalButton,
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "person",
            size: 24,
            color: "Theme.colors.neutral[0]"
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.additionalButtonText,
            children: "Profile"
          })]
        })]
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "Theme.colors.neutral[950]"
  },
  backgroundGradient: {
    position: "absolute",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  },
  blurOverlay: {
    position: "absolute",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  },
  content: {
    flex: 1,
    justifyContent: "space-between",
    paddingHorizontal: 30
  },
  header: {
    alignItems: "center",
    marginTop: 60
  },
  incomingCallText: {
    fontSize: 18,
    color: "Theme.colors.neutral[0]",
    opacity: 0.8,
    marginBottom: 5
  },
  callTypeText: {
    fontSize: 16,
    color: "Theme.colors.neutral[0]",
    opacity: 0.6
  },
  callerInfo: {
    alignItems: "center",
    flex: 1,
    justifyContent: "center"
  },
  avatarContainer: {
    marginBottom: 30
  },
  avatarRing: {
    width: 200,
    height: 200,
    borderRadius: 100,
    borderWidth: 4,
    borderColor: "rgba(255, 255, 255, 0.3)",
    padding: 8,
    backgroundColor: "rgba(255, 255, 255, 0.1)"
  },
  avatar: {
    width: "100%",
    height: "100%",
    borderRadius: 92,
    backgroundColor: "#ddd"
  },
  callerName: {
    fontSize: 32,
    fontWeight: "bold",
    color: "Theme.colors.neutral[0]",
    marginBottom: 8,
    textAlign: "center"
  },
  callerSubtext: {
    fontSize: 18,
    color: "Theme.colors.neutral[0]",
    opacity: 0.7
  },
  actionsContainer: {
    flexDirection: "row",
    justifyContent: "space-around",
    alignItems: "center",
    marginBottom: 50
  },
  actionButton: {
    width: 80,
    height: 80,
    borderRadius: 40,
    elevation: 8,
    shadowColor: "Theme.colors.neutral[950]",
    shadowOffset: {
      width: 0,
      height: 4
    },
    shadowOpacity: 0.3,
    shadowRadius: 8
  },
  rejectButton: {},
  answerButton: {},
  buttonGradient: {
    width: "100%",
    height: "100%",
    borderRadius: 40,
    justifyContent: "center",
    alignItems: "center"
  },
  additionalActions: {
    flexDirection: "row",
    justifyContent: "space-around",
    marginBottom: 40
  },
  additionalButton: {
    alignItems: "center",
    padding: 15
  },
  additionalButtonText: {
    color: "Theme.colors.neutral[0]",
    fontSize: 12,
    marginTop: 5,
    opacity: 0.8
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,