b7d4fae08f9f4af98c52800c3e3a62aa
"use strict";

_getJestObj().mock("../../services/notifications", function () {
  return {
    initializeNotificationsService: mockInitializeNotificationsService,
    notificationService: mockNotificationService
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useNotifications = require("../useNotifications");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockInitializeNotificationsService = jest.fn();
var mockSendMatchNotification = jest.fn();
var mockSendMessageNotification = jest.fn();
var mockSendLikeNotification = jest.fn();
var mockScheduleReminderNotification = jest.fn();
var mockSetBadgeCount = jest.fn();
var mockClearBadge = jest.fn();
var mockCleanup = jest.fn();
var mockNotificationService = {
  initialize: jest.fn(),
  sendLocalNotification: jest.fn(),
  getBadgeCount: jest.fn(),
  setBadgeCount: mockSetBadgeCount,
  clearBadge: mockClearBadge,
  cancelNotification: jest.fn(),
  cancelAllNotifications: jest.fn(),
  sendMatchNotification: mockSendMatchNotification,
  sendMessageNotification: mockSendMessageNotification,
  sendLikeNotification: mockSendLikeNotification,
  scheduleReminderNotification: mockScheduleReminderNotification,
  getExpoPushToken: jest.fn(),
  unregisterToken: jest.fn(),
  cleanup: mockCleanup
};
describe("useNotifications", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockInitializeNotificationsService.mockResolvedValue("ExpoPushToken[test123]");
  });
  it("should initialize with default state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook.result;
    expect(result.current.isInitialized).toBe(false);
    expect(result.current.pushToken).toBe(null);
  });
  it("should initialize notifications on mount", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
    expect(mockInitializeNotificationsService).toHaveBeenCalled();
    expect(result.current.pushToken).toBe("ExpoPushToken[test123]");
  }));
  it("should cleanup on unmount", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      unmount = _renderHook3.unmount;
    unmount();
    expect(mockCleanup).toHaveBeenCalled();
  });
  it("should provide sendMatchNotification function", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
    expect(result.current.sendMatchNotification).toBeDefined();
    expect(typeof result.current.sendMatchNotification).toBe("function");
  }));
  it("should provide sendMessageNotification function", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
    expect(result.current.sendMessageNotification).toBeDefined();
    expect(typeof result.current.sendMessageNotification).toBe("function");
  }));
  it("should provide sendLikeNotification function", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
    expect(result.current.sendLikeNotification).toBeDefined();
    expect(typeof result.current.sendLikeNotification).toBe("function");
  }));
  it("should provide scheduleReminderNotification function", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
    expect(result.current.scheduleReminderNotification).toBeDefined();
    expect(typeof result.current.scheduleReminderNotification).toBe("function");
  }));
  it("should provide setBadgeCount function", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
    expect(result.current.setBadgeCount).toBeDefined();
    expect(typeof result.current.setBadgeCount).toBe("function");
  }));
  it("should provide clearBadge function", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
    expect(result.current.clearBadge).toBeDefined();
    expect(typeof result.current.clearBadge).toBe("function");
  }));
  it("should handle initialization error gracefully", (0, _asyncToGenerator2.default)(function* () {
    mockInitializeNotificationsService.mockRejectedValue(new Error("Permission denied"));
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
    expect(result.current.pushToken).toBe(null);
  }));
  it("should handle null push token", (0, _asyncToGenerator2.default)(function* () {
    mockInitializeNotificationsService.mockResolvedValue(null);
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
    expect(result.current.pushToken).toBe(null);
  }));
  it("should provide all notification methods", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
    var methods = ["sendMatchNotification", "sendMessageNotification", "sendLikeNotification", "scheduleReminderNotification", "setBadgeCount", "clearBadge"];
    methods.forEach(function (method) {
      expect(result.current[method]).toBeDefined();
      expect(typeof result.current[method]).toBe("function");
    });
  }));
  it("should only initialize once", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      rerender = _renderHook11.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(mockInitializeNotificationsService).toHaveBeenCalledTimes(1);
    });
    expect(mockInitializeNotificationsService).toHaveBeenCalledTimes(1);
  }));
  it("should set push token after initialization", (0, _asyncToGenerator2.default)(function* () {
    var testToken = "ExpoPushToken[xyz789]";
    mockInitializeNotificationsService.mockResolvedValue(testToken);
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook12.result;
    expect(result.current.pushToken).toBe(null);
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.pushToken).toBe(testToken);
    });
  }));
  it("should mark as initialized after setup completes", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      result = _renderHook13.result;
    expect(result.current.isInitialized).toBe(false);
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isInitialized).toBe(true);
    });
  }));
  it("should cleanup notifications on unmount", function () {
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useNotifications.useNotifications)();
      }),
      unmount = _renderHook14.unmount;
    expect(mockCleanup).not.toHaveBeenCalled();
    unmount();
    expect(mockCleanup).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,