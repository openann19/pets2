{"version":3,"names":["ImagePicker","_interopRequireWildcard","require","_react","_reactNative","_multipartUpload","_core","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","usePhotoManager","exports","_useState","useState","_useState2","_slicedToArray2","photos","setPhotos","pickImage","_ref","_asyncToGenerator2","_yield$ImagePicker$re","requestMediaLibraryPermissionsAsync","status","Alert","alert","result","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","allowsMultipleSelection","selectionLimit","canceled","assets","newPhotos","map","asset","index","uri","type","fileName","Date","now","isPrimary","isUploading","prev","concat","_toConsumableArray2","uploadPhotos","error","logger","useCallback","_ref2","photosToUpload","_loop","photo","photoIndex","findIndex","p","undefined","uploadResult","multipartUpload","fileUri","contentType","onProgress","uploaded","total","percentage","Math","round","uploadProgress","uploadedUrl","url","thumbnailUrl","thumbnails","webp","s3Key","key","info","_x","removePhoto","photoToRemove","_","firstPhoto","setPrimaryPhoto","uploadPendingPhotos","pendingPhotos","catch"],"sources":["usePhotoManager.ts"],"sourcesContent":["import * as ImagePicker from \"expo-image-picker\";\nimport { useState, useCallback } from \"react\";\nimport { Alert } from \"react-native\";\nimport { multipartUpload } from \"../services/multipartUpload\";\nimport { logger } from \"@pawfectmatch/core\";\n\nexport interface UploadProgress {\n  uploaded: number;\n  total: number;\n  percentage: number;\n}\n\nexport interface PhotoData {\n  uri: string;\n  type: string;\n  fileName: string;\n  isPrimary: boolean;\n  // Upload tracking\n  isUploading?: boolean;\n  uploadProgress?: UploadProgress;\n  uploadedUrl?: string;\n  thumbnailUrl?: string;\n  s3Key?: string;\n  error?: string;\n}\n\nexport interface UsePhotoManagerReturn {\n  photos: PhotoData[];\n  pickImage: () => Promise<void>;\n  removePhoto: (index: number) => void;\n  setPrimaryPhoto: (index: number) => void;\n  uploadPendingPhotos: () => Promise<void>;\n}\n\nexport const usePhotoManager = (): UsePhotoManagerReturn => {\n  const [photos, setPhotos] = useState<PhotoData[]>([]);\n\n  const pickImage = async () => {\n    try {\n      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n      if (status !== \"granted\") {\n        Alert.alert(\n          \"Permission needed\",\n          \"Please grant permission to access your photos\",\n        );\n        return;\n      }\n\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 0.8,\n        allowsMultipleSelection: true,\n        selectionLimit: 10 - photos.length,\n      });\n\n      if (!result.canceled && result.assets.length > 0) {\n        const newPhotos: PhotoData[] = result.assets.map((asset: any, index: number) => ({\n          uri: asset.uri,\n          type: asset.type || \"image/jpeg\",\n          fileName: `pet-photo-${Date.now()}-${index}.jpg`,\n          isPrimary: photos.length === 0 && index === 0,\n          isUploading: false,\n        }));\n\n        setPhotos((prev) => [...prev, ...newPhotos]);\n\n        // Automatically upload the new photos\n        await uploadPhotos(newPhotos);\n      }\n    } catch (error) {\n      logger.error(\"Error picking images:\", { error });\n      Alert.alert(\"Error\", \"Failed to pick images. Please try again.\");\n    }\n  };\n\n  const uploadPhotos = useCallback(async (photosToUpload: PhotoData[]) => {\n    for (const photo of photosToUpload) {\n      try {\n        // Mark photo as uploading using functional update to avoid stale state\n        setPhotos((prev) => {\n          const photoIndex = prev.findIndex((p) => p.uri === photo.uri);\n          if (photoIndex === -1) return prev;\n\n          return prev.map((p, i) =>\n            i === photoIndex\n              ? { ...p, isUploading: true, error: undefined }\n              : p,\n          );\n        });\n\n        // Start multipart upload with progress tracking\n        const uploadResult = await multipartUpload({\n          fileUri: photo.uri,\n          contentType: photo.type,\n          onProgress: (uploaded, total) => {\n            const percentage = Math.round((uploaded / total) * 100);\n            setPhotos((prev) => {\n              const photoIndex = prev.findIndex((p) => p.uri === photo.uri);\n              if (photoIndex === -1) return prev;\n\n              return prev.map((p, i) =>\n                i === photoIndex\n                  ? {\n                      ...p,\n                      uploadProgress: { uploaded, total, percentage },\n                    }\n                  : p,\n              );\n            });\n          },\n        });\n\n        // Mark photo as successfully uploaded\n        setPhotos((prev) => {\n          const photoIndex = prev.findIndex((p) => p.uri === photo.uri);\n          if (photoIndex === -1) return prev;\n\n          return prev.map((p, i) =>\n            i === photoIndex\n              ? {\n                  ...p,\n                  isUploading: false,\n                  uploadedUrl: uploadResult.url,\n                  thumbnailUrl: uploadResult.thumbnails.webp,\n                  s3Key: uploadResult.key,\n                  uploadProgress: undefined, // Clear progress on success\n                }\n              : p,\n          );\n        });\n\n        logger.info(\"Photo uploaded successfully:\", { photo, url: uploadResult.url });\n      } catch (error) {\n        logger.error(\"Error uploading photo:\", { error, photo: photo.uri });\n        \n        // Mark photo with error\n        setPhotos((prev) => {\n          const photoIndex = prev.findIndex((p) => p.uri === photo.uri);\n          if (photoIndex === -1) return prev;\n\n          return prev.map((p, i) =>\n            i === photoIndex\n              ? { ...p, isUploading: false, error: \"Upload failed\" }\n              : p,\n          );\n        });\n\n        Alert.alert(\n          \"Upload Failed\",\n          `Failed to upload ${photo.fileName}. Please try again.`,\n        );\n      }\n    }\n  }, []);\n\n  const removePhoto = (index: number) => {\n    setPhotos((prev) => {\n      const photoToRemove = prev[index];\n      const newPhotos = prev.filter((_, i) => i !== index);\n      // If we removed the primary photo, make the first remaining photo primary\n      if (photoToRemove?.isPrimary && newPhotos.length > 0) {\n        const firstPhoto = newPhotos[0];\n        if (firstPhoto) {\n          firstPhoto.isPrimary = true;\n        }\n      }\n      return newPhotos;\n    });\n  };\n\n  const setPrimaryPhoto = (index: number) => {\n    setPhotos((prev) =>\n      prev.map((photo, i) => ({\n        ...photo,\n        isPrimary: i === index,\n      })),\n    );\n  };\n\n  const uploadPendingPhotos = useCallback(async () => {\n    setPhotos((prev) => {\n      const pendingPhotos = prev.filter(\n        (p) => !p.uploadedUrl && !p.isUploading && !p.error,\n      );\n\n      if (pendingPhotos.length > 0) {\n        // Upload in background without blocking\n        uploadPhotos(pendingPhotos).catch((error) => {\n          logger.error(\"Error uploading pending photos:\", { error });\n        });\n      }\n\n      return prev;\n    });\n  }, [uploadPhotos]);\n\n  return {\n    photos,\n    pickImage,\n    removePhoto,\n    setPrimaryPhoto,\n    uploadPendingPhotos,\n  };\n};\n"],"mappings":"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","ignoreList":[]}