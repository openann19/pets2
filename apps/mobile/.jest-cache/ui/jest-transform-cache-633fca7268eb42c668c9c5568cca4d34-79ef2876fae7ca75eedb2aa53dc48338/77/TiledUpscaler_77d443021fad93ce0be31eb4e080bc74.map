{"version":3,"names":["ImageManipulator","_interopRequireWildcard","require","FileSystem","_excluded","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","loadSkia","_loadSkia","apply","arguments","_asyncToGenerator2","_unused","computeTargetDimensions","srcW","srcH","opts","scale","targetW","targetH","outW","outH","undefined","Math","round","tileUpscale","_x","_x2","_x3","_tileUpscale","uri","length","Skia","_opts$tile","tile","_opts$overlap","overlap","_opts$quality","quality","_opts$format","format","rest","_objectWithoutProperties2","_computeTargetDimensi","result","manipulateAsync","resize","width","height","compress","SaveFormat","PNG","JPEG","S","data","Data","fromURI","img","Image","MakeImageFromEncoded","surface","Surface","MakeSurface","canvas","getCanvas","paint","Paint","setFilterQuality","sxStep","syStep","sy","sx","sw","min","sh","dx","dy","dw","dh","srcRect","XYWHRect","dstRect","drawImageRect","snapshot","makeImageSnapshot","base64","encodeToBase64","ImageFormat","outPath","cacheDirectory","Date","now","writeAsStringAsync","encoding","EncodingType","Base64","tileUpscaleAuto","_x4","_tileUpscaleAuto","_yield$import","Promise","resolve","then","reject","getSize","catch","error"],"sources":["TiledUpscaler.ts"],"sourcesContent":["/**\n * Tiled Upscaler\n * Memory-safe upscaler that draws in tiles to avoid OOM on large images (4K+).\n * Uses @shopify/react-native-skia if available, otherwise falls back to ImageManipulator.\n */\n\nimport * as ImageManipulator from \"expo-image-manipulator\";\nimport * as FileSystem from \"expo-file-system\";\n\n/**\n * Lazy load Skia to avoid bundling if not installed\n * @shopify/react-native-skia is optional - module may not be present\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function loadSkia(): Promise<any> {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-explicit-any\n    return require(\"@shopify/react-native-skia\");\n  } catch {\n    return null;\n  }\n}\n\nexport interface TileUpscaleOpts {\n  /** Scale factor or exact width/height; at least one must be provided */\n  scale?: number;\n  targetW?: number;\n  targetH?: number;\n  /** Tile size (source pixels) */\n  tile?: number;\n  /** Overlap to prevent seams when sampling */\n  overlap?: number;\n  /** Output JPEG quality 0..1 */\n  quality?: number;\n  /** Output format */\n  format?: \"jpg\" | \"png\" | \"webp\";\n}\n\n/**\n * Compute target dimensions from various options\n */\nfunction computeTargetDimensions(\n  srcW: number,\n  srcH: number,\n  opts: TileUpscaleOpts\n): { outW: number; outH: number } {\n  const { scale, targetW, targetH } = opts;\n\n  if (targetW && targetH) {\n    return { outW: targetW, outH: targetH };\n  }\n\n  if (scale !== undefined && !targetW && !targetH) {\n    return {\n      outW: Math.round(srcW * scale),\n      outH: Math.round(srcH * scale),\n    };\n  }\n\n  if (targetW && !targetH) {\n    const r = targetW / srcW;\n    return {\n      outW: targetW,\n      outH: Math.round(srcH * r),\n    };\n  }\n\n  if (!targetW && targetH) {\n    const r = targetH / srcH;\n    return {\n      outW: Math.round(srcW * r),\n      outH: targetH,\n    };\n  }\n\n  // Fallback to original size\n  return { outW: srcW, outH: srcH };\n}\n\n/**\n * Tile-based upscaler for large images\n * Processes the image in chunks to avoid memory issues\n * \n * @param uri - Source image URI\n * @param srcW - Source image width\n * @param srcH - Source image height\n * @param opts - Upscaling options\n * @returns URI of upscaled image\n */\nexport async function tileUpscale(\n  uri: string,\n  srcW: number,\n  srcH: number,\n  opts: TileUpscaleOpts = {}\n): Promise<string> {\n  const Skia = await loadSkia();\n  const { tile = 1024, overlap = 12, quality = 1, format = \"jpg\", ...rest } = opts;\n\n  const { outW, outH } = computeTargetDimensions(srcW, srcH, rest);\n\n  // Fallback if Skia is not available\n  if (!Skia) {\n    const result = await ImageManipulator.manipulateAsync(\n      uri,\n      [{ resize: { width: Math.round(outW), height: Math.round(outH) } }],\n      {\n        compress: quality,\n        format:\n          format === \"png\"\n            ? ImageManipulator.SaveFormat.PNG\n            : ImageManipulator.SaveFormat.JPEG,\n      }\n    );\n    return result.uri;\n  }\n\n  const { Skia: S } = Skia;\n\n  // Load image bytes\n  const data = await S.Data.fromURI(uri);\n  const img = S.Image.MakeImageFromEncoded(data);\n  \n  if (!img) {\n    // Fallback on load failure\n    const result = await ImageManipulator.manipulateAsync(\n      uri,\n      [{ resize: { width: Math.round(outW), height: Math.round(outH) } }],\n      {\n        compress: quality,\n        format: ImageManipulator.SaveFormat.JPEG,\n      }\n    );\n    return result.uri;\n  }\n\n  // Create output surface\n  const surface = S.Surface.MakeSurface(Math.round(outW), Math.round(outH));\n  \n  if (!surface) {\n    const result = await ImageManipulator.manipulateAsync(\n      uri,\n      [{ resize: { width: Math.round(outW), height: Math.round(outH) } }],\n      {\n        compress: quality,\n        format: ImageManipulator.SaveFormat.JPEG,\n      }\n    );\n    return result.uri;\n  }\n\n  const canvas = surface.getCanvas();\n  const paint = S.Paint();\n  paint.setFilterQuality(\"high\");\n\n  // Draw tiles with overlap to prevent seams\n  const sxStep = tile - overlap;\n  const syStep = tile - overlap;\n\n  for (let sy = 0; sy < srcH; sy += syStep) {\n    for (let sx = 0; sx < srcW; sx += sxStep) {\n      const sw = Math.min(tile, srcW - sx);\n      const sh = Math.min(tile, srcH - sy);\n\n      const dx = Math.round((sx / srcW) * outW);\n      const dy = Math.round((sy / srcH) * outH);\n      const dw = Math.round((sw / srcW) * outW);\n      const dh = Math.round((sh / srcH) * outH);\n\n      const srcRect = S.XYWHRect(sx, sy, sw, sh);\n      const dstRect = S.XYWHRect(dx, dy, dw, dh);\n      canvas.drawImageRect(img, srcRect, dstRect, paint);\n    }\n  }\n\n  const snapshot = surface.makeImageSnapshot();\n  const base64 =\n    format === \"png\"\n      ? snapshot.encodeToBase64()\n      : snapshot.encodeToBase64(\n          S.ImageFormat.JPEG,\n          Math.round(quality * 100)\n        );\n\n  const outPath = `${FileSystem.cacheDirectory}up_${Date.now()}.${format}`;\n  await FileSystem.writeAsStringAsync(outPath, base64, {\n    encoding: FileSystem.EncodingType.Base64,\n  });\n\n  return outPath;\n}\n\n/**\n * Simplified upscale without requiring source dimensions\n * Automatically detects source size using RNImage\n */\nexport async function tileUpscaleAuto(\n  uri: string,\n  opts: TileUpscaleOpts = {}\n): Promise<string> {\n  // Get source dimensions\n  const { Image } = await import(\"react-native\");\n  \n  return new Promise((resolve, reject) => {\n    Image.getSize(\n      uri,\n      (width, height) => {\n        tileUpscale(uri, width, height, opts)\n          .then(resolve)\n          .catch(reject);\n      },\n      (error) => reject(error)\n    );\n  });\n}\n\n"],"mappings":"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","ignoreList":[]}