c4672aff2b5a57d7b04ee8ad07bb87d7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _flattenStyle = _interopRequireDefault(require("../../StyleSheet/flattenStyle"));
var _TextAncestor = _interopRequireDefault(require("../../Text/TextAncestor"));
var _AcessibilityMapping = require("../../Utilities/AcessibilityMapping");
var _ViewNativeComponent = _interopRequireDefault(require("./ViewNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["accessibilityElementsHidden", "accessibilityLabel", "accessibilityLabelledBy", "accessibilityLiveRegion", "accessibilityRole", "accessibilityState", "accessibilityValue", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-hidden", "aria-label", "aria-labelledby", "aria-live", "aria-selected", "aria-valuemax", "aria-valuemin", "aria-valuenow", "aria-valuetext", "focusable", "id", "importantForAccessibility", "nativeID", "pointerEvents", "role", "tabIndex"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var View = React.forwardRef(function (_ref, forwardedRef) {
  var _ariaLabelledBy$split;
  var accessibilityElementsHidden = _ref.accessibilityElementsHidden,
    accessibilityLabel = _ref.accessibilityLabel,
    accessibilityLabelledBy = _ref.accessibilityLabelledBy,
    accessibilityLiveRegion = _ref.accessibilityLiveRegion,
    accessibilityRole = _ref.accessibilityRole,
    accessibilityState = _ref.accessibilityState,
    accessibilityValue = _ref.accessibilityValue,
    ariaBusy = _ref['aria-busy'],
    ariaChecked = _ref['aria-checked'],
    ariaDisabled = _ref['aria-disabled'],
    ariaExpanded = _ref['aria-expanded'],
    ariaHidden = _ref['aria-hidden'],
    ariaLabel = _ref['aria-label'],
    ariaLabelledBy = _ref['aria-labelledby'],
    ariaLive = _ref['aria-live'],
    ariaSelected = _ref['aria-selected'],
    ariaValueMax = _ref['aria-valuemax'],
    ariaValueMin = _ref['aria-valuemin'],
    ariaValueNow = _ref['aria-valuenow'],
    ariaValueText = _ref['aria-valuetext'],
    focusable = _ref.focusable,
    id = _ref.id,
    importantForAccessibility = _ref.importantForAccessibility,
    nativeID = _ref.nativeID,
    pointerEvents = _ref.pointerEvents,
    role = _ref.role,
    tabIndex = _ref.tabIndex,
    otherProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _accessibilityLabelledBy = (_ariaLabelledBy$split = ariaLabelledBy == null ? void 0 : ariaLabelledBy.split(/\s*,\s*/g)) != null ? _ariaLabelledBy$split : accessibilityLabelledBy;
  var _accessibilityState;
  if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
    _accessibilityState = {
      busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
      checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
      disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
      expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
      selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
    };
  }
  var _accessibilityValue;
  if (accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null) {
    _accessibilityValue = {
      max: ariaValueMax != null ? ariaValueMax : accessibilityValue == null ? void 0 : accessibilityValue.max,
      min: ariaValueMin != null ? ariaValueMin : accessibilityValue == null ? void 0 : accessibilityValue.min,
      now: ariaValueNow != null ? ariaValueNow : accessibilityValue == null ? void 0 : accessibilityValue.now,
      text: ariaValueText != null ? ariaValueText : accessibilityValue == null ? void 0 : accessibilityValue.text
    };
  }
  var style = (0, _flattenStyle.default)(otherProps.style);
  var newPointerEvents = (style == null ? void 0 : style.pointerEvents) || pointerEvents;
  return (0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
    value: false,
    children: (0, _jsxRuntime.jsx)(_ViewNativeComponent.default, _objectSpread(_objectSpread({}, otherProps), {}, {
      accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive != null ? ariaLive : accessibilityLiveRegion,
      accessibilityLabel: ariaLabel != null ? ariaLabel : accessibilityLabel,
      focusable: tabIndex !== undefined ? !tabIndex : focusable,
      accessibilityState: _accessibilityState,
      accessibilityRole: role ? (0, _AcessibilityMapping.getAccessibilityRoleFromRole)(role) : accessibilityRole,
      accessibilityElementsHidden: ariaHidden != null ? ariaHidden : accessibilityElementsHidden,
      accessibilityLabelledBy: _accessibilityLabelledBy,
      accessibilityValue: _accessibilityValue,
      importantForAccessibility: ariaHidden === true ? 'no-hide-descendants' : importantForAccessibility,
      nativeID: id != null ? id : nativeID,
      style: style,
      pointerEvents: newPointerEvents,
      ref: forwardedRef
    }))
  });
});
View.displayName = 'View';
module.exports = View;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxhdHRlblN0eWxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfVGV4dEFuY2VzdG9yIiwiX0FjZXNzaWJpbGl0eU1hcHBpbmciLCJfVmlld05hdGl2ZUNvbXBvbmVudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib3duS2V5cyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJWaWV3IiwiZm9yd2FyZFJlZiIsIl9yZWYiLCJmb3J3YXJkZWRSZWYiLCJfYXJpYUxhYmVsbGVkQnkkc3BsaXQiLCJhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW4iLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJhY2Nlc3NpYmlsaXR5TGFiZWxsZWRCeSIsImFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJhY2Nlc3NpYmlsaXR5VmFsdWUiLCJhcmlhQnVzeSIsImFyaWFDaGVja2VkIiwiYXJpYURpc2FibGVkIiwiYXJpYUV4cGFuZGVkIiwiYXJpYUhpZGRlbiIsImFyaWFMYWJlbCIsImFyaWFMYWJlbGxlZEJ5IiwiYXJpYUxpdmUiLCJhcmlhU2VsZWN0ZWQiLCJhcmlhVmFsdWVNYXgiLCJhcmlhVmFsdWVNaW4iLCJhcmlhVmFsdWVOb3ciLCJhcmlhVmFsdWVUZXh0IiwiZm9jdXNhYmxlIiwiaWQiLCJpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5IiwibmF0aXZlSUQiLCJwb2ludGVyRXZlbnRzIiwicm9sZSIsInRhYkluZGV4Iiwib3RoZXJQcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfYWNjZXNzaWJpbGl0eUxhYmVsbGVkQnkiLCJzcGxpdCIsIl9hY2Nlc3NpYmlsaXR5U3RhdGUiLCJidXN5IiwiY2hlY2tlZCIsImRpc2FibGVkIiwiZXhwYW5kZWQiLCJzZWxlY3RlZCIsIl9hY2Nlc3NpYmlsaXR5VmFsdWUiLCJtYXgiLCJtaW4iLCJub3ciLCJ0ZXh0Iiwic3R5bGUiLCJmbGF0dGVuU3R5bGUiLCJuZXdQb2ludGVyRXZlbnRzIiwianN4IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImNoaWxkcmVuIiwidW5kZWZpbmVkIiwiZ2V0QWNjZXNzaWJpbGl0eVJvbGVGcm9tUm9sZSIsInJlZiIsImRpc3BsYXlOYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4vVmlld1Byb3BUeXBlcyc7XG5cbmltcG9ydCBmbGF0dGVuU3R5bGUgZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9mbGF0dGVuU3R5bGUnO1xuaW1wb3J0IFRleHRBbmNlc3RvciBmcm9tICcuLi8uLi9UZXh0L1RleHRBbmNlc3Rvcic7XG5pbXBvcnQge2dldEFjY2Vzc2liaWxpdHlSb2xlRnJvbVJvbGV9IGZyb20gJy4uLy4uL1V0aWxpdGllcy9BY2Vzc2liaWxpdHlNYXBwaW5nJztcbmltcG9ydCBWaWV3TmF0aXZlQ29tcG9uZW50IGZyb20gJy4vVmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gVmlld1Byb3BzO1xuXG4vKipcbiAqIFRoZSBtb3N0IGZ1bmRhbWVudGFsIGNvbXBvbmVudCBmb3IgYnVpbGRpbmcgYSBVSSwgVmlldyBpcyBhIGNvbnRhaW5lciB0aGF0XG4gKiBzdXBwb3J0cyBsYXlvdXQgd2l0aCBmbGV4Ym94LCBzdHlsZSwgc29tZSB0b3VjaCBoYW5kbGluZywgYW5kIGFjY2Vzc2liaWxpdHlcbiAqIGNvbnRyb2xzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3XG4gKi9cbmNvbnN0IFZpZXc6IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFxuICBWaWV3UHJvcHMsXG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFZpZXdOYXRpdmVDb21wb25lbnQ+LFxuPiA9IFJlYWN0LmZvcndhcmRSZWYoXG4gIChcbiAgICB7XG4gICAgICBhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW4sXG4gICAgICBhY2Nlc3NpYmlsaXR5TGFiZWwsXG4gICAgICBhY2Nlc3NpYmlsaXR5TGFiZWxsZWRCeSxcbiAgICAgIGFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uLFxuICAgICAgYWNjZXNzaWJpbGl0eVJvbGUsXG4gICAgICBhY2Nlc3NpYmlsaXR5U3RhdGUsXG4gICAgICBhY2Nlc3NpYmlsaXR5VmFsdWUsXG4gICAgICAnYXJpYS1idXN5JzogYXJpYUJ1c3ksXG4gICAgICAnYXJpYS1jaGVja2VkJzogYXJpYUNoZWNrZWQsXG4gICAgICAnYXJpYS1kaXNhYmxlZCc6IGFyaWFEaXNhYmxlZCxcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogYXJpYUV4cGFuZGVkLFxuICAgICAgJ2FyaWEtaGlkZGVuJzogYXJpYUhpZGRlbixcbiAgICAgICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGFyaWFMYWJlbGxlZEJ5LFxuICAgICAgJ2FyaWEtbGl2ZSc6IGFyaWFMaXZlLFxuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBhcmlhU2VsZWN0ZWQsXG4gICAgICAnYXJpYS12YWx1ZW1heCc6IGFyaWFWYWx1ZU1heCxcbiAgICAgICdhcmlhLXZhbHVlbWluJzogYXJpYVZhbHVlTWluLFxuICAgICAgJ2FyaWEtdmFsdWVub3cnOiBhcmlhVmFsdWVOb3csXG4gICAgICAnYXJpYS12YWx1ZXRleHQnOiBhcmlhVmFsdWVUZXh0LFxuICAgICAgZm9jdXNhYmxlLFxuICAgICAgaWQsXG4gICAgICBpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5LFxuICAgICAgbmF0aXZlSUQsXG4gICAgICBwb2ludGVyRXZlbnRzLFxuICAgICAgcm9sZSxcbiAgICAgIHRhYkluZGV4LFxuICAgICAgLi4ub3RoZXJQcm9wc1xuICAgIH06IFZpZXdQcm9wcyxcbiAgICBmb3J3YXJkZWRSZWYsXG4gICkgPT4ge1xuICAgIGNvbnN0IF9hY2Nlc3NpYmlsaXR5TGFiZWxsZWRCeSA9XG4gICAgICBhcmlhTGFiZWxsZWRCeT8uc3BsaXQoL1xccyosXFxzKi9nKSA/PyBhY2Nlc3NpYmlsaXR5TGFiZWxsZWRCeTtcblxuICAgIGxldCBfYWNjZXNzaWJpbGl0eVN0YXRlO1xuICAgIGlmIChcbiAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZSAhPSBudWxsIHx8XG4gICAgICBhcmlhQnVzeSAhPSBudWxsIHx8XG4gICAgICBhcmlhQ2hlY2tlZCAhPSBudWxsIHx8XG4gICAgICBhcmlhRGlzYWJsZWQgIT0gbnVsbCB8fFxuICAgICAgYXJpYUV4cGFuZGVkICE9IG51bGwgfHxcbiAgICAgIGFyaWFTZWxlY3RlZCAhPSBudWxsXG4gICAgKSB7XG4gICAgICBfYWNjZXNzaWJpbGl0eVN0YXRlID0ge1xuICAgICAgICBidXN5OiBhcmlhQnVzeSA/PyBhY2Nlc3NpYmlsaXR5U3RhdGU/LmJ1c3ksXG4gICAgICAgIGNoZWNrZWQ6IGFyaWFDaGVja2VkID8/IGFjY2Vzc2liaWxpdHlTdGF0ZT8uY2hlY2tlZCxcbiAgICAgICAgZGlzYWJsZWQ6IGFyaWFEaXNhYmxlZCA/PyBhY2Nlc3NpYmlsaXR5U3RhdGU/LmRpc2FibGVkLFxuICAgICAgICBleHBhbmRlZDogYXJpYUV4cGFuZGVkID8/IGFjY2Vzc2liaWxpdHlTdGF0ZT8uZXhwYW5kZWQsXG4gICAgICAgIHNlbGVjdGVkOiBhcmlhU2VsZWN0ZWQgPz8gYWNjZXNzaWJpbGl0eVN0YXRlPy5zZWxlY3RlZCxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCBfYWNjZXNzaWJpbGl0eVZhbHVlO1xuICAgIGlmIChcbiAgICAgIGFjY2Vzc2liaWxpdHlWYWx1ZSAhPSBudWxsIHx8XG4gICAgICBhcmlhVmFsdWVNYXggIT0gbnVsbCB8fFxuICAgICAgYXJpYVZhbHVlTWluICE9IG51bGwgfHxcbiAgICAgIGFyaWFWYWx1ZU5vdyAhPSBudWxsIHx8XG4gICAgICBhcmlhVmFsdWVUZXh0ICE9IG51bGxcbiAgICApIHtcbiAgICAgIF9hY2Nlc3NpYmlsaXR5VmFsdWUgPSB7XG4gICAgICAgIG1heDogYXJpYVZhbHVlTWF4ID8/IGFjY2Vzc2liaWxpdHlWYWx1ZT8ubWF4LFxuICAgICAgICBtaW46IGFyaWFWYWx1ZU1pbiA/PyBhY2Nlc3NpYmlsaXR5VmFsdWU/Lm1pbixcbiAgICAgICAgbm93OiBhcmlhVmFsdWVOb3cgPz8gYWNjZXNzaWJpbGl0eVZhbHVlPy5ub3csXG4gICAgICAgIHRleHQ6IGFyaWFWYWx1ZVRleHQgPz8gYWNjZXNzaWJpbGl0eVZhbHVlPy50ZXh0LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyAkRmxvd0ZpeE1lW3VuZGVyY29uc3RyYWluZWQtaW1wbGljaXQtaW5zdGFudGlhdGlvbl1cbiAgICBsZXQgc3R5bGUgPSBmbGF0dGVuU3R5bGUob3RoZXJQcm9wcy5zdHlsZSk7XG5cbiAgICBjb25zdCBuZXdQb2ludGVyRXZlbnRzID0gc3R5bGU/LnBvaW50ZXJFdmVudHMgfHwgcG9pbnRlckV2ZW50cztcblxuICAgIHJldHVybiAoXG4gICAgICA8VGV4dEFuY2VzdG9yLlByb3ZpZGVyIHZhbHVlPXtmYWxzZX0+XG4gICAgICAgIDxWaWV3TmF0aXZlQ29tcG9uZW50XG4gICAgICAgICAgey4uLm90aGVyUHJvcHN9XG4gICAgICAgICAgYWNjZXNzaWJpbGl0eUxpdmVSZWdpb249e1xuICAgICAgICAgICAgYXJpYUxpdmUgPT09ICdvZmYnID8gJ25vbmUnIDogYXJpYUxpdmUgPz8gYWNjZXNzaWJpbGl0eUxpdmVSZWdpb25cbiAgICAgICAgICB9XG4gICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPXthcmlhTGFiZWwgPz8gYWNjZXNzaWJpbGl0eUxhYmVsfVxuICAgICAgICAgIGZvY3VzYWJsZT17dGFiSW5kZXggIT09IHVuZGVmaW5lZCA/ICF0YWJJbmRleCA6IGZvY3VzYWJsZX1cbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5U3RhdGU9e19hY2Nlc3NpYmlsaXR5U3RhdGV9XG4gICAgICAgICAgYWNjZXNzaWJpbGl0eVJvbGU9e1xuICAgICAgICAgICAgcm9sZSA/IGdldEFjY2Vzc2liaWxpdHlSb2xlRnJvbVJvbGUocm9sZSkgOiBhY2Nlc3NpYmlsaXR5Um9sZVxuICAgICAgICAgIH1cbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW49e1xuICAgICAgICAgICAgYXJpYUhpZGRlbiA/PyBhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW5cbiAgICAgICAgICB9XG4gICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsbGVkQnk9e19hY2Nlc3NpYmlsaXR5TGFiZWxsZWRCeX1cbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5VmFsdWU9e19hY2Nlc3NpYmlsaXR5VmFsdWV9XG4gICAgICAgICAgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eT17XG4gICAgICAgICAgICBhcmlhSGlkZGVuID09PSB0cnVlXG4gICAgICAgICAgICAgID8gJ25vLWhpZGUtZGVzY2VuZGFudHMnXG4gICAgICAgICAgICAgIDogaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eVxuICAgICAgICAgIH1cbiAgICAgICAgICBuYXRpdmVJRD17aWQgPz8gbmF0aXZlSUR9XG4gICAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICAgIHBvaW50ZXJFdmVudHM9e25ld1BvaW50ZXJFdmVudHN9XG4gICAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICAgIC8+XG4gICAgICA8L1RleHRBbmNlc3Rvci5Qcm92aWRlcj5cbiAgICApO1xuICB9LFxuKTtcblxuVmlldy5kaXNwbGF5TmFtZSA9ICdWaWV3JztcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3O1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQVlBLElBQUFBLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLG9CQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxvQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksS0FBQSxHQUFBQyx1QkFBQSxDQUFBTCxPQUFBO0FBQStCLElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUFBLElBQUFPLFNBQUE7QUFBQSxTQUFBRix3QkFBQUcsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUwsdUJBQUEsWUFBQUEsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFB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