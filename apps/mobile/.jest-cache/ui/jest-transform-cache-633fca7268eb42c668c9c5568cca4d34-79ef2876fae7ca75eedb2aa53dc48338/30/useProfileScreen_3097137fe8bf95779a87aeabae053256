b36b45c21aa7ab3a49513c776b69893c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useProfileScreen = useProfileScreen;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _core = require("@pawfectmatch/core");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _react = require("react");
var _reactNative = require("react-native");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useProfileScreen() {
  var _useAuthStore = (0, _core.useAuthStore)(),
    user = _useAuthStore.user,
    logout = _useAuthStore.logout;
  var _useState = (0, _react.useState)({
      matches: true,
      messages: true,
      email: true,
      push: true
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    notifications = _useState2[0],
    setNotifications = _useState2[1];
  var _useState3 = (0, _react.useState)({
      showLocation: true,
      showAge: true,
      showBreed: true
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    privacy = _useState4[0],
    setPrivacy = _useState4[1];
  var handleLogout = (0, _react.useCallback)(function () {
    _reactNative.Alert.alert("Logout", "Are you sure you want to logout?", [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Logout",
      style: "destructive",
      onPress: function onPress() {
        void (0, _asyncToGenerator2.default)(function* () {
          try {
            logout == null ? void 0 : logout();
            yield _asyncStorage.default.clear();
            _core.logger.info("User logged out successfully");
          } catch (error) {
            _core.logger.error("Logout error:", {
              error: error
            });
          }
        })();
      }
    }]);
  }, [logout]);
  var handleSettingToggle = (0, _react.useCallback)(function (setting) {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    setNotifications(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, setting, !prev[setting]));
    });
  }, []);
  var handlePrivacyToggle = (0, _react.useCallback)(function (setting) {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    setPrivacy(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, setting, !prev[setting]));
    });
  }, []);
  return {
    user: user,
    notifications: notifications,
    privacy: privacy,
    handleLogout: handleLogout,
    handleSettingToggle: handleSettingToggle,
    handlePrivacyToggle: handlePrivacyToggle
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,