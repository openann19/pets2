3e3473a415ea328b2a790634d5c593f1
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../services/logger", function () {
  return {
    logger: {
      error: _globals.jest.fn(),
      info: _globals.jest.fn(),
      warn: _globals.jest.fn(),
      debug: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useChatInput = require("../useChatInput");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
(0, _globals.describe)('useChatInput', function () {
  var matchId = 'test-match-123';
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockAsyncStorage.removeItem.mockResolvedValue(undefined);
    _globals.jest.useFakeTimers();
  });
  (0, _globals.afterEach)(function () {
    _globals.jest.runOnlyPendingTimers();
    _globals.jest.useRealTimers();
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with empty input text', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.inputText).toBe('');
      (0, _globals.expect)(result.current.isTyping).toBe(false);
    });
    (0, _globals.it)('should load draft from storage on mount', (0, _asyncToGenerator2.default)(function* () {
      var draftText = 'Hello, this is a draft!';
      mockAsyncStorage.getItem.mockResolvedValue(draftText);
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.inputText).toBe(draftText);
      });
      (0, _globals.expect)(mockAsyncStorage.getItem).toHaveBeenCalledWith(`mobile_chat_draft_${matchId}`);
    }));
    (0, _globals.it)('should not load draft when disabled', (0, _asyncToGenerator2.default)(function* () {
      var draftText = 'Draft text';
      mockAsyncStorage.getItem.mockResolvedValue(draftText);
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId,
            enabled: false
          });
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.inputText).toBe('');
      });
      (0, _globals.expect)(mockAsyncStorage.getItem).not.toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Input Management', function () {
    (0, _globals.it)('should update input text', function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook4.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('Hello');
      });
      (0, _globals.expect)(result.current.inputText).toBe('Hello');
    });
    (0, _globals.it)('should respect maxLength limit', function () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId,
            maxLength: 10
          });
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('This is too long');
      });
      (0, _globals.expect)(result.current.inputText).toBe('');
    });
    (0, _globals.it)('should clear input text', function () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('Hello');
      });
      (0, _globals.expect)(result.current.inputText).toBe('Hello');
      (0, _reactNative.act)(function () {
        result.current.clearInput();
      });
      (0, _globals.expect)(result.current.inputText).toBe('');
    });
  });
  (0, _globals.describe)('Draft Persistence', function () {
    (0, _globals.it)('should persist input to storage', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook7.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('Test message');
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith(`mobile_chat_draft_${matchId}`, 'Test message');
      });
    }));
    (0, _globals.it)('should remove draft when input is cleared', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook8.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('Test');
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalled();
      });
      mockAsyncStorage.setItem.mockClear();
      (0, _reactNative.act)(function () {
        result.current.clearInput();
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockAsyncStorage.removeItem).toHaveBeenCalledWith(`mobile_chat_draft_${matchId}`);
      });
    }));
    (0, _globals.it)('should not persist when disabled', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId,
            enabled: false
          });
        }),
        result = _renderHook9.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('Test');
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.inputText).toBe('Test');
      });
      (0, _globals.expect)(mockAsyncStorage.setItem).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle storage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook0.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('Test');
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.inputText).toBe('Test');
      });
    }));
  });
  (0, _globals.describe)('Typing Indicator', function () {
    (0, _globals.it)('should track typing state', function () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook1.result;
      (0, _reactNative.act)(function () {
        result.current.handleTyping(true);
      });
      (0, _globals.expect)(result.current.isTyping).toBe(true);
    });
    (0, _globals.it)('should auto-clear typing after 2 seconds', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook10.result;
      (0, _reactNative.act)(function () {
        result.current.handleTyping(true);
      });
      (0, _globals.expect)(result.current.isTyping).toBe(true);
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(2000);
      });
      (0, _globals.expect)(result.current.isTyping).toBe(false);
    }));
    (0, _globals.it)('should cancel timeout on repeated typing', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook11.result;
      (0, _reactNative.act)(function () {
        result.current.handleTyping(true);
      });
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(1500);
      });
      (0, _reactNative.act)(function () {
        result.current.handleTyping(true);
      });
      (0, _globals.expect)(result.current.isTyping).toBe(true);
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(500);
      });
      (0, _globals.expect)(result.current.isTyping).toBe(true);
      (0, _reactNative.act)(function () {
        _globals.jest.advanceTimersByTime(2000);
      });
      (0, _globals.expect)(result.current.isTyping).toBe(false);
    }));
    (0, _globals.it)('should stop typing indicator', function () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook12.result;
      (0, _reactNative.act)(function () {
        result.current.handleTyping(true);
      });
      (0, _globals.expect)(result.current.isTyping).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.handleTyping(false);
      });
      (0, _globals.expect)(result.current.isTyping).toBe(false);
    });
  });
  (0, _globals.describe)('Cleanup', function () {
    (0, _globals.it)('should clear timeout on unmount', function () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook13.result,
        unmount = _renderHook13.unmount;
      (0, _reactNative.act)(function () {
        result.current.handleTyping(true);
      });
      (0, _globals.expect)(result.current.isTyping).toBe(true);
      unmount();
      (0, _globals.expect)(true).toBe(true);
    });
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty draft from storage', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('');
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook14.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.inputText).toBe('');
      });
    }));
    (0, _globals.it)('should handle storage getItem errors', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockRejectedValue(new Error('Read error'));
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.inputText).toBe('');
      });
    }));
    (0, _globals.it)('should handle rapid input changes', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: matchId
          });
        }),
        result = _renderHook16.result;
      (0, _reactNative.act)(function () {
        result.current.setInputText('A');
      });
      (0, _reactNative.act)(function () {
        result.current.setInputText('AB');
      });
      (0, _reactNative.act)(function () {
        result.current.setInputText('ABC');
      });
      (0, _globals.expect)(result.current.inputText).toBe('ABC');
    }));
    (0, _globals.it)('should work with different matchIds', function () {
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: 'match-1'
          });
        }),
        result1 = _renderHook17.result;
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useChatInput.useChatInput)({
            matchId: 'match-2'
          });
        }),
        result2 = _renderHook18.result;
      (0, _reactNative.act)(function () {
        result1.current.setInputText('Match 1 text');
      });
      (0, _reactNative.act)(function () {
        result2.current.setInputText('Match 2 text');
      });
      (0, _globals.expect)(result1.current.inputText).toBe('Match 1 text');
      (0, _globals.expect)(result2.current.inputText).toBe('Match 2 text');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,