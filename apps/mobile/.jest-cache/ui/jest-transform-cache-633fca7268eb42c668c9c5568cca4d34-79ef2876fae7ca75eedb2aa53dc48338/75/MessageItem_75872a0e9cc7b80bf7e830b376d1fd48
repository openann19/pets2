8131fb4ca610b507a7964f6292c5b5d4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageItem = MessageItem;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _expoBlur = require("expo-blur");
var _Provider = require("../../theme/Provider");
var _adapters = require("../../theme/adapters");
var _ReactionPicker = require("./ReactionPicker");
var _chatService = require("../../services/chatService");
var _unifiedTheme = require("../../theme/unified-theme");
var _logger = require("../../services/logger");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function MessageItem(_ref) {
  var _messages;
  var message = _ref.message,
    index = _ref.index,
    messages = _ref.messages,
    isOnline = _ref.isOnline,
    onPress = _ref.onPress,
    onLongPress = _ref.onLongPress,
    onRetry = _ref.onRetry;
  var theme = (0, _Provider.useTheme)();
  var colors = (0, _adapters.getExtendedColors)(theme);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showReactionPicker = _useState2[0],
    setShowReactionPicker = _useState2[1];
  var _useState3 = (0, _react.useState)({}),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    reactions = _useState4[0],
    setReactions = _useState4[1];
  var isMyMessage = message.senderId === "me" || message.senderId === "current-user";
  var showAvatar = !isMyMessage && (index === 0 || ((_messages = messages[index - 1]) == null ? void 0 : _messages.senderId) !== message.senderId);
  var nextMessage = messages[index + 1];
  var showTime = index === messages.length - 1 || !nextMessage || nextMessage.senderId !== message.senderId || new Date(nextMessage.timestamp).getTime() - new Date(message.timestamp).getTime() > 300000;
  var showDateHeader = shouldShowDateHeader(message, messages[index - 1]);
  var hasError = message.error === true;
  var formatMessageTime = (0, _react.useCallback)(function (timestamp) {
    var messageTime = new Date(timestamp);
    var now = new Date();
    var isToday = messageTime.toDateString() === now.toDateString();
    if (isToday) {
      return messageTime.toLocaleTimeString("en-US", {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false
      });
    } else {
      return messageTime.toLocaleDateString("en-US", {
        month: "short",
        day: "numeric"
      });
    }
  }, []);
  var getDateHeader = (0, _react.useCallback)(function (timestamp) {
    var messageDate = new Date(timestamp);
    var now = new Date();
    var yesterday = new Date(now);
    yesterday.setDate(yesterday.getDate() - 1);
    if (messageDate.toDateString() === now.toDateString()) {
      return "Today";
    } else if (messageDate.toDateString() === yesterday.toDateString()) {
      return "Yesterday";
    } else {
      return messageDate.toLocaleDateString("en-US", {
        weekday: "long",
        month: "long",
        day: "numeric"
      });
    }
  }, []);
  var handlePress = (0, _react.useCallback)(function () {
    onPress == null ? void 0 : onPress(message);
  }, [message, onPress]);
  var handleLongPress = (0, _react.useCallback)(function () {
    setShowReactionPicker(true);
    onLongPress == null ? void 0 : onLongPress(message);
  }, [message, onLongPress]);
  var handleReactionSelect = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (reaction) {
      try {
        if (message.matchId && message._id) {
          yield _chatService.chatService.sendReaction(message.matchId, message._id, reaction);
        }
        setReactions(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, reaction, (prev[reaction] || 0) + 1));
        });
      } catch (error) {
        var err = error instanceof Error ? error : new Error(String(error));
        _logger.logger.error("Failed to send reaction", {
          error: err
        });
      }
      setShowReactionPicker(false);
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [message]);
  var handleRetry = (0, _react.useCallback)(function () {
    onRetry == null ? void 0 : onRetry(message._id);
  }, [message._id, onRetry]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    children: [showDateHeader && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.dateHeader,
      children: (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
        intensity: 20,
        style: styles.dateHeaderBlur,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.dateHeaderText, {
            color: colors.textMuted
          }],
          children: getDateHeader(message.timestamp)
        })
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.messageContainer, isMyMessage ? styles.myMessageContainer : null],
      children: [!isMyMessage && showAvatar && (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        style: styles.avatarContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: {
            uri: "https://images.unsplash.com/photo-1552053831-71594a27632d?w=100"
          },
          style: [styles.avatar, isOnline ? styles.avatarOnline : null]
        }), isOnline && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.onlineIndicator, {
            backgroundColor: _unifiedTheme.Theme.colors.status.success
          }]
        })]
      }), !isMyMessage && !showAvatar && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.avatarSpacer
      }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        activeOpacity: 0.8,
        onPress: handlePress,
        onLongPress: handleLongPress,
        style: [styles.messageBubble, isMyMessage ? [styles.myMessage, {
          backgroundColor: colors.primary
        }] : [styles.otherMessage, {
          backgroundColor: _unifiedTheme.Theme.colors.neutral[0],
          borderColor: _unifiedTheme.Theme.colors.neutral[200]
        }], hasError ? [styles.errorMessage, {
          backgroundColor: `${_unifiedTheme.Theme.colors.status.error}20`,
          borderColor: _unifiedTheme.Theme.colors.status.error
        }] : null],
        children: [message.type === "image" ? (0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: {
            uri: message.content
          },
          style: styles.messageImage
        }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.messageText, {
            color: isMyMessage ? _unifiedTheme.Theme.colors.neutral[0] : _unifiedTheme.Theme.colors.neutral[800]
          }, hasError ? {
            color: _unifiedTheme.Theme.colors.status.error
          } : null],
          children: message.content
        }), isMyMessage && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.messageStatus,
          children: [message.status === "sending" && (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.sendingText, {
              color: `${_unifiedTheme.Theme.colors.neutral[0]}B3`
            }],
            children: "Sending..."
          }), message.status === "failed" && (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
            style: styles.retryButton,
            onPress: handleRetry,
            children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "refresh",
              size: 12,
              color: _unifiedTheme.Theme.colors.status.error
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.retryText, {
                color: _unifiedTheme.Theme.colors.status.error
              }],
              children: "Retry"
            })]
          }), hasError && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.errorIndicator,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "alert-circle",
              size: 12,
              color: _unifiedTheme.Theme.colors.status.error
            })
          })]
        })]
      }), showTime && (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.timeContainer, isMyMessage ? {
          justifyContent: "flex-end",
          marginRight: _unifiedTheme.Theme.spacing.sm
        } : null],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.messageTime, {
            color: _unifiedTheme.Theme.colors.neutral[500]
          }],
          children: formatMessageTime(message.timestamp)
        }), isMyMessage && !hasError && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.readReceiptContainer,
          children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: message.read ? "checkmark-done" : "checkmark",
            size: 14,
            color: message.read ? _unifiedTheme.Theme.colors.status.success : _unifiedTheme.Theme.colors.neutral[500],
            style: styles.readIndicator
          })
        })]
      })]
    }), Object.keys(reactions).length > 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.reactionsContainer,
      children: Object.entries(reactions).map(function (_ref3) {
        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
          emoji = _ref4[0],
          count = _ref4[1];
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.reactionBadge,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.reactionEmoji,
            children: emoji
          }), count > 1 && (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.reactionCount,
            children: count
          })]
        }, emoji);
      })
    }), (0, _jsxRuntime.jsx)(_ReactionPicker.ReactionPicker, {
      visible: showReactionPicker,
      onClose: function onClose() {
        return setShowReactionPicker(false);
      },
      onSelect: handleReactionSelect
    })]
  });
}
var shouldShowDateHeader = function shouldShowDateHeader(currentMessage, previousMessage) {
  if (!previousMessage) return true;
  var currentDate = new Date(currentMessage.timestamp).toDateString();
  var previousDate = new Date(previousMessage.timestamp).toDateString();
  return currentDate !== previousDate;
};
var styles = _reactNative.StyleSheet.create({
  dateHeader: {
    alignItems: "center",
    marginVertical: _unifiedTheme.Theme.spacing.md
  },
  dateHeaderBlur: {
    borderRadius: _unifiedTheme.Theme.borderRadius.lg,
    overflow: "hidden",
    paddingHorizontal: _unifiedTheme.Theme.spacing.sm,
    paddingVertical: _unifiedTheme.Theme.spacing.xs
  },
  dateHeaderText: {
    fontSize: 12,
    fontWeight: "500",
    textAlign: "center"
  },
  messageContainer: {
    flexDirection: "row",
    marginBottom: _unifiedTheme.Theme.spacing.xs,
    alignItems: "flex-end",
    paddingHorizontal: _unifiedTheme.Theme.spacing.xs
  },
  myMessageContainer: {
    justifyContent: "flex-end"
  },
  avatarContainer: {
    position: "relative",
    marginRight: _unifiedTheme.Theme.spacing.xs
  },
  avatar: {
    width: 32,
    height: 32,
    borderRadius: 16,
    borderWidth: 1.5,
    borderColor: _unifiedTheme.Theme.colors.neutral[0]
  },
  avatarOnline: {
    borderColor: "#4CAF50"
  },
  avatarSpacer: {
    width: 40
  },
  onlineIndicator: {
    position: "absolute",
    bottom: -1,
    right: -1,
    width: 12,
    height: 12,
    borderRadius: 6,
    borderWidth: 2,
    borderColor: _unifiedTheme.Theme.colors.neutral[0]
  },
  messageBubble: {
    maxWidth: "75%",
    paddingHorizontal: _unifiedTheme.Theme.spacing.md,
    paddingVertical: _unifiedTheme.Theme.spacing.sm,
    borderRadius: _unifiedTheme.Theme.borderRadius["2xl"],
    marginBottom: _unifiedTheme.Theme.spacing.xs,
    position: "relative"
  },
  myMessage: {
    marginLeft: 40,
    borderBottomRightRadius: _unifiedTheme.Theme.borderRadius.md
  },
  otherMessage: {
    borderBottomLeftRadius: _unifiedTheme.Theme.borderRadius.md,
    borderWidth: 0.5
  },
  errorMessage: {
    borderWidth: 1
  },
  messageText: {
    fontSize: 16,
    lineHeight: 24
  },
  messageImage: {
    width: 200,
    height: 150,
    borderRadius: _unifiedTheme.Theme.borderRadius.lg,
    resizeMode: "cover"
  },
  messageStatus: {
    position: "absolute",
    bottom: _unifiedTheme.Theme.spacing.xs,
    right: _unifiedTheme.Theme.spacing.xs
  },
  sendingText: {
    fontSize: 10,
    fontStyle: "italic"
  },
  retryButton: {
    backgroundColor: "#ff6b6b",
    paddingHorizontal: _unifiedTheme.Theme.spacing.sm,
    paddingVertical: _unifiedTheme.Theme.spacing.xs,
    borderRadius: _unifiedTheme.Theme.borderRadius.lg,
    marginTop: _unifiedTheme.Theme.spacing.xs,
    flexDirection: "row",
    alignItems: "center",
    gap: _unifiedTheme.Theme.spacing.xs
  },
  retryText: {
    fontSize: 12,
    fontWeight: "500"
  },
  errorIndicator: {
    marginLeft: _unifiedTheme.Theme.spacing.xs
  },
  timeContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: _unifiedTheme.Theme.spacing.xs,
    marginLeft: 40,
    marginBottom: _unifiedTheme.Theme.spacing.xs
  },
  messageTime: {
    fontSize: 12,
    fontWeight: "500"
  },
  readReceiptContainer: {
    marginLeft: _unifiedTheme.Theme.spacing.xs
  },
  readIndicator: {
    marginLeft: _unifiedTheme.Theme.spacing.xs
  },
  reactionsContainer: {
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 4,
    marginTop: 4,
    paddingHorizontal: _unifiedTheme.Theme.spacing.sm
  },
  reactionBadge: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: _unifiedTheme.Theme.colors.neutral[100],
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    gap: 4
  },
  reactionEmoji: {
    fontSize: 14
  },
  reactionCount: {
    fontSize: 12,
    fontWeight: "600",
    color: _unifiedTheme.Theme.colors.neutral[500]
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,