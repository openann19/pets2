565b6dbb78f046531d12e3a5a61c3a3e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAccountDeletion = useAccountDeletion;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _gdprService = _interopRequireDefault(require("../../../services/gdprService"));
var _core = require("@pawfectmatch/core");
function useAccountDeletion() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isDeleting = _useState2[0],
    setIsDeleting = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    error = _useState4[0],
    setError = _useState4[1];
  var requestDeletion = (0, _react.useCallback)(function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (password, reason, feedback) {
      setIsDeleting(true);
      setError(null);
      try {
        var result = yield _gdprService.default.deleteAccount({
          password: password,
          reason: reason,
          feedback: feedback
        });
        if (result.success) {
          _reactNative.Alert.alert("Account Deletion Requested", `Your account will be permanently deleted in 30 days. We'll send you reminders before the deletion occurs.`, [{
            text: "OK"
          }]);
          _core.logger.info("Account deletion requested", {
            deletionId: result.deletionId
          });
          return true;
        }
        return false;
      } catch (err) {
        var errorMessage = err instanceof Error ? err.message : "Failed to request account deletion";
        setError(errorMessage);
        _core.logger.error("Account deletion request failed:", {
          error: errorMessage
        });
        _reactNative.Alert.alert("Error", errorMessage);
        return false;
      } finally {
        setIsDeleting(false);
      }
    });
    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }(), []);
  var cancelDeletion = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setIsDeleting(true);
    setError(null);
    try {
      var cancelled = yield _gdprService.default.cancelDeletion();
      if (cancelled.success) {
        _reactNative.Alert.alert("Deletion Cancelled", "Your account deletion has been cancelled.");
        _core.logger.info("Account deletion cancelled");
        return true;
      }
      return false;
    } catch (err) {
      var errorMessage = err instanceof Error ? err.message : "Failed to cancel deletion";
      setError(errorMessage);
      _core.logger.error("Failed to cancel account deletion:", {
        error: errorMessage
      });
      return false;
    } finally {
      setIsDeleting(false);
    }
  }), []);
  return {
    isDeleting: isDeleting,
    requestDeletion: requestDeletion,
    cancelDeletion: cancelDeletion,
    error: error
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2dkcHJTZXJ2aWNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jb3JlIiwidXNlQWNjb3VudERlbGV0aW9uIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZGVmYXVsdCIsImlzRGVsZXRpbmciLCJzZXRJc0RlbGV0aW5nIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJlcnJvciIsInNldEVycm9yIiwicmVxdWVzdERlbGV0aW9uIiwidXNlQ2FsbGJhY2siLCJfcmVmIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwicGFzc3dvcmQiLCJyZWFzb24iLCJmZWVkYmFjayIsInJlc3VsdCIsImdkcHJTZXJ2aWNlIiwiZGVsZXRlQWNjb3VudCIsInN1Y2Nlc3MiLCJBbGVydCIsImFsZXJ0IiwidGV4dCIsImxvZ2dlciIsImluZm8iLCJkZWxldGlvbklkIiwiZXJyIiwiZXJyb3JNZXNzYWdlIiwiRXJyb3IiLCJtZXNzYWdlIiwiX3giLCJfeDIiLCJfeDMiLCJhcHBseSIsImFyZ3VtZW50cyIsImNhbmNlbERlbGV0aW9uIiwiY2FuY2VsbGVkIl0sInNvdXJjZXMiOlsidXNlQWNjb3VudERlbGV0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQWxlcnQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgZ2RwclNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL3NlcnZpY2VzL2dkcHJTZXJ2aWNlXCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiQHBhd2ZlY3RtYXRjaC9jb3JlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlQWNjb3VudERlbGV0aW9uUmV0dXJuIHtcbiAgaXNEZWxldGluZzogYm9vbGVhbjtcbiAgcmVxdWVzdERlbGV0aW9uOiAoXG4gICAgcGFzc3dvcmQ6IHN0cmluZyxcbiAgICByZWFzb24/OiBzdHJpbmcsXG4gICAgZmVlZGJhY2s/OiBzdHJpbmcsXG4gICkgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgY2FuY2VsRGVsZXRpb246ICgpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gIGVycm9yOiBzdHJpbmcgfCBudWxsO1xufVxuXG4vKipcbiAqIEhvb2sgZm9yIHJlcXVlc3RpbmcgYWNjb3VudCBkZWxldGlvbiAoR0RQUilcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFjY291bnREZWxldGlvbigpOiBVc2VBY2NvdW50RGVsZXRpb25SZXR1cm4ge1xuICBjb25zdCBbaXNEZWxldGluZywgc2V0SXNEZWxldGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgcmVxdWVzdERlbGV0aW9uID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKFxuICAgICAgcGFzc3dvcmQ6IHN0cmluZyxcbiAgICAgIHJlYXNvbj86IHN0cmluZyxcbiAgICAgIGZlZWRiYWNrPzogc3RyaW5nLFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgICAgc2V0SXNEZWxldGluZyh0cnVlKTtcbiAgICAgIHNldEVycm9yKG51bGwpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZHByU2VydmljZS5kZWxldGVBY2NvdW50KHtcbiAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICByZWFzb24sXG4gICAgICAgICAgZmVlZGJhY2ssXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgIEFsZXJ0LmFsZXJ0KFxuICAgICAgICAgICAgXCJBY2NvdW50IERlbGV0aW9uIFJlcXVlc3RlZFwiLFxuICAgICAgICAgICAgYFlvdXIgYWNjb3VudCB3aWxsIGJlIHBlcm1hbmVudGx5IGRlbGV0ZWQgaW4gMzAgZGF5cy4gV2UnbGwgc2VuZCB5b3UgcmVtaW5kZXJzIGJlZm9yZSB0aGUgZGVsZXRpb24gb2NjdXJzLmAsXG4gICAgICAgICAgICBbeyB0ZXh0OiBcIk9LXCIgfV0sXG4gICAgICAgICAgKTtcbiAgICAgICAgICBsb2dnZXIuaW5mbyhcIkFjY291bnQgZGVsZXRpb24gcmVxdWVzdGVkXCIsIHtcbiAgICAgICAgICAgIGRlbGV0aW9uSWQ6IHJlc3VsdC5kZWxldGlvbklkLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgICAgZXJyIGluc3RhbmNlb2YgRXJyb3JcbiAgICAgICAgICAgID8gZXJyLm1lc3NhZ2VcbiAgICAgICAgICAgIDogXCJGYWlsZWQgdG8gcmVxdWVzdCBhY2NvdW50IGRlbGV0aW9uXCI7XG4gICAgICAgIHNldEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIGxvZ2dlci5lcnJvcihcIkFjY291bnQgZGVsZXRpb24gcmVxdWVzdCBmYWlsZWQ6XCIsIHtcbiAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgICB9KTtcbiAgICAgICAgQWxlcnQuYWxlcnQoXCJFcnJvclwiLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzZXRJc0RlbGV0aW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtdLFxuICApO1xuXG4gIGNvbnN0IGNhbmNlbERlbGV0aW9uID0gdXNlQ2FsbGJhY2soYXN5bmMgKCk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHNldElzRGVsZXRpbmcodHJ1ZSk7XG4gICAgc2V0RXJyb3IobnVsbCk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgY2FuY2VsbGVkID0gYXdhaXQgZ2RwclNlcnZpY2UuY2FuY2VsRGVsZXRpb24oKTtcblxuICAgICAgaWYgKGNhbmNlbGxlZC5zdWNjZXNzKSB7XG4gICAgICAgIEFsZXJ0LmFsZXJ0KFxuICAgICAgICAgIFwiRGVsZXRpb24gQ2FuY2VsbGVkXCIsXG4gICAgICAgICAgXCJZb3VyIGFjY291bnQgZGVsZXRpb24gaGFzIGJlZW4gY2FuY2VsbGVkLlwiLFxuICAgICAgICApO1xuICAgICAgICBsb2dnZXIuaW5mbyhcIkFjY291bnQgZGVsZXRpb24gY2FuY2VsbGVkXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6IFwiRmFpbGVkIHRvIGNhbmNlbCBkZWxldGlvblwiO1xuICAgICAgc2V0RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIGxvZ2dlci5lcnJvcihcIkZhaWxlZCB0byBjYW5jZWwgYWNjb3VudCBkZWxldGlvbjpcIiwge1xuICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzRGVsZXRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIHJldHVybiB7XG4gICAgaXNEZWxldGluZyxcbiAgICByZXF1ZXN0RGVsZXRpb24sXG4gICAgY2FuY2VsRGVsZXRpb24sXG4gICAgZXJyb3IsXG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtB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