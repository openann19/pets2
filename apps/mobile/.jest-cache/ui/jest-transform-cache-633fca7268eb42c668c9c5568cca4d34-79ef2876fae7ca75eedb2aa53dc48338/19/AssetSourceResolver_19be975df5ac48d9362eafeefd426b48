a63a297d99f4f37945cf507cc8ffd1da
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var PixelRatio = require("../Utilities/PixelRatio").default;
var Platform = require("../Utilities/Platform");
var _require = require("./AssetUtils"),
  pickScale = _require.pickScale;
var _require2 = require('@react-native/assets-registry/path-support'),
  getAndroidResourceFolderName = _require2.getAndroidResourceFolderName,
  getAndroidResourceIdentifier = _require2.getAndroidResourceIdentifier,
  getBasePath = _require2.getBasePath;
var invariant = require('invariant');
function getScaledAssetPath(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
function getAssetPathInDrawableFolder(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var drawableFolder = getAndroidResourceFolderName(asset, scale);
  var fileName = getAndroidResourceIdentifier(asset);
  return drawableFolder + '/' + fileName + '.' + asset.type;
}
var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
    (0, _classCallCheck2.default)(this, AssetSourceResolver);
    this.serverUrl = serverUrl;
    this.jsbundleUrl = jsbundleUrl;
    this.asset = asset;
  }
  return (0, _createClass2.default)(AssetSourceResolver, [{
    key: "isLoadedFromServer",
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: "isLoadedFromFileSystem",
    value: function isLoadedFromFileSystem() {
      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
    }
  }, {
    key: "defaultAsset",
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }
      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetURLNearBundle();
      }
    }
  }, {
    key: "assetServerURL",
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: "scaledAssetPath",
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: "scaledAssetURLNearBundle",
    value: function scaledAssetURLNearBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
    }
  }, {
    key: "resourceIdentifierWithoutScale",
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: "drawableFolderInBundle",
    value: function drawableFolderInBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: "fromSource",
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }]);
}();
AssetSourceResolver.pickScale = pickScale;
module.exports = AssetSourceResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiUGl4ZWxSYXRpbyIsImRlZmF1bHQiLCJQbGF0Zm9ybSIsIl9yZXF1aXJlIiwicGlja1NjYWxlIiwiX3JlcXVpcmUyIiwiZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSIsImdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIiLCJnZXRCYXNlUGF0aCIsImludmFyaWFudCIsImdldFNjYWxlZEFzc2V0UGF0aCIsImFzc2V0Iiwic2NhbGUiLCJzY2FsZXMiLCJnZXQiLCJzY2FsZVN1ZmZpeCIsImFzc2V0RGlyIiwibmFtZSIsInR5cGUiLCJnZXRBc3NldFBhdGhJbkRyYXdhYmxlRm9sZGVyIiwiZHJhd2FibGVGb2xkZXIiLCJmaWxlTmFtZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJzZXJ2ZXJVcmwiLCJqc2J1bmRsZVVybCIsImtleSIsInZhbHVlIiwiaXNMb2FkZWRGcm9tU2VydmVyIiwiaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSIsInN0YXJ0c1dpdGgiLCJkZWZhdWx0QXNzZXQiLCJhc3NldFNlcnZlclVSTCIsIk9TIiwiZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSIsInJlc291cmNlSWRlbnRpZmllcldpdGhvdXRTY2FsZSIsInNjYWxlZEFzc2V0VVJMTmVhckJ1bmRsZSIsImZyb21Tb3VyY2UiLCJoYXNoIiwic2NhbGVkQXNzZXRQYXRoIiwicGF0aCIsInJlcGxhY2UiLCJzb3VyY2UiLCJfX3BhY2thZ2VyX2Fzc2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJ1cmkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQXNzZXRTb3VyY2VSZXNvbHZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCB0eXBlIFJlc29sdmVkQXNzZXRTb3VyY2UgPSB7fFxuICArX19wYWNrYWdlcl9hc3NldDogYm9vbGVhbixcbiAgK3dpZHRoOiA/bnVtYmVyLFxuICAraGVpZ2h0OiA/bnVtYmVyLFxuICArdXJpOiBzdHJpbmcsXG4gICtzY2FsZTogbnVtYmVyLFxufH07XG5cbmltcG9ydCB0eXBlIHtQYWNrYWdlckFzc2V0fSBmcm9tICdAcmVhY3QtbmF0aXZlL2Fzc2V0cy1yZWdpc3RyeS9yZWdpc3RyeSc7XG5cbmNvbnN0IFBpeGVsUmF0aW8gPSByZXF1aXJlKCcuLi9VdGlsaXRpZXMvUGl4ZWxSYXRpbycpLmRlZmF1bHQ7XG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9QbGF0Zm9ybScpO1xuY29uc3Qge3BpY2tTY2FsZX0gPSByZXF1aXJlKCcuL0Fzc2V0VXRpbHMnKTtcbmNvbnN0IHtcbiAgZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSxcbiAgZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcixcbiAgZ2V0QmFzZVBhdGgsXG59ID0gcmVxdWlyZSgnQHJlYWN0LW5hdGl2ZS9hc3NldHMtcmVnaXN0cnkvcGF0aC1zdXBwb3J0Jyk7XG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCBsaWtlICdhc3NldHMvQXdlc29tZU1vZHVsZS9pY29uQDJ4LnBuZydcbiAqL1xuZnVuY3Rpb24gZ2V0U2NhbGVkQXNzZXRQYXRoKGFzc2V0OiBQYWNrYWdlckFzc2V0KTogc3RyaW5nIHtcbiAgY29uc3Qgc2NhbGUgPSBwaWNrU2NhbGUoYXNzZXQuc2NhbGVzLCBQaXhlbFJhdGlvLmdldCgpKTtcbiAgY29uc3Qgc2NhbGVTdWZmaXggPSBzY2FsZSA9PT0gMSA/ICcnIDogJ0AnICsgc2NhbGUgKyAneCc7XG4gIGNvbnN0IGFzc2V0RGlyID0gZ2V0QmFzZVBhdGgoYXNzZXQpO1xuICByZXR1cm4gYXNzZXREaXIgKyAnLycgKyBhc3NldC5uYW1lICsgc2NhbGVTdWZmaXggKyAnLicgKyBhc3NldC50eXBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGxpa2UgJ2RyYXdhYmxlLW1kcGkvaWNvbi5wbmcnXG4gKi9cbmZ1bmN0aW9uIGdldEFzc2V0UGF0aEluRHJhd2FibGVGb2xkZXIoYXNzZXQ6IFBhY2thZ2VyQXNzZXQpOiBzdHJpbmcge1xuICBjb25zdCBzY2FsZSA9IHBpY2tTY2FsZShhc3NldC5zY2FsZXMsIFBpeGVsUmF0aW8uZ2V0KCkpO1xuICBjb25zdCBkcmF3YWJsZUZvbGRlciA9IGdldEFuZHJvaWRSZXNvdXJjZUZvbGRlck5hbWUoYXNzZXQsIHNjYWxlKTtcbiAgY29uc3QgZmlsZU5hbWUgPSBnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyKGFzc2V0KTtcbiAgcmV0dXJuIGRyYXdhYmxlRm9sZGVyICsgJy8nICsgZmlsZU5hbWUgKyAnLicgKyBhc3NldC50eXBlO1xufVxuXG5jbGFzcyBBc3NldFNvdXJjZVJlc29sdmVyIHtcbiAgc2VydmVyVXJsOiA/c3RyaW5nO1xuICAvLyB3aGVyZSB0aGUganNidW5kbGUgaXMgYmVpbmcgcnVuIGZyb21cbiAganNidW5kbGVVcmw6ID9zdHJpbmc7XG4gIC8vIHRoZSBhc3NldCB0byByZXNvbHZlXG4gIGFzc2V0OiBQYWNrYWdlckFzc2V0O1xuXG4gIGNvbnN0cnVjdG9yKHNlcnZlclVybDogP3N0cmluZywganNidW5kbGVVcmw6ID9zdHJpbmcsIGFzc2V0OiBQYWNrYWdlckFzc2V0KSB7XG4gICAgdGhpcy5zZXJ2ZXJVcmwgPSBzZXJ2ZXJVcmw7XG4gICAgdGhpcy5qc2J1bmRsZVVybCA9IGpzYnVuZGxlVXJsO1xuICAgIHRoaXMuYXNzZXQgPSBhc3NldDtcbiAgfVxuXG4gIGlzTG9hZGVkRnJvbVNlcnZlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnNlcnZlclVybDtcbiAgfVxuXG4gIGlzTG9hZGVkRnJvbUZpbGVTeXN0ZW0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhKHRoaXMuanNidW5kbGVVcmwgJiYgdGhpcy5qc2J1bmRsZVVybC5zdGFydHNXaXRoKCdmaWxlOi8vJykpO1xuICB9XG5cbiAgZGVmYXVsdEFzc2V0KCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGlmICh0aGlzLmlzTG9hZGVkRnJvbVNlcnZlcigpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hc3NldFNlcnZlclVSTCgpO1xuICAgIH1cblxuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0xvYWRlZEZyb21GaWxlU3lzdGVtKClcbiAgICAgICAgPyB0aGlzLmRyYXdhYmxlRm9sZGVySW5CdW5kbGUoKVxuICAgICAgICA6IHRoaXMucmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNjYWxlZEFzc2V0VVJMTmVhckJ1bmRsZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFic29sdXRlIFVSTCB3aGljaCBjYW4gYmUgdXNlZCB0byBmZXRjaCB0aGUgYXNzZXRcbiAgICogZnJvbSB0aGUgZGV2c2VydmVyXG4gICAqL1xuICBhc3NldFNlcnZlclVSTCgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBpbnZhcmlhbnQoISF0aGlzLnNlcnZlclVybCwgJ25lZWQgc2VydmVyIHRvIGxvYWQgZnJvbScpO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoXG4gICAgICB0aGlzLnNlcnZlclVybCArXG4gICAgICAgIGdldFNjYWxlZEFzc2V0UGF0aCh0aGlzLmFzc2V0KSArXG4gICAgICAgICc/cGxhdGZvcm09JyArXG4gICAgICAgIFBsYXRmb3JtLk9TICtcbiAgICAgICAgJyZoYXNoPScgK1xuICAgICAgICB0aGlzLmFzc2V0Lmhhc2gsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0byBqdXN0IHRoZSBzY2FsZWQgYXNzZXQgZmlsZW5hbWVcbiAgICogRS5nLiAnYXNzZXRzL0F3ZXNvbWVNb2R1bGUvaWNvbkAyeC5wbmcnXG4gICAqL1xuICBzY2FsZWRBc3NldFBhdGgoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShnZXRTY2FsZWRBc3NldFBhdGgodGhpcy5hc3NldCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIHRvIHdoZXJlIHRoZSBidW5kbGUgaXMgcnVubmluZyBmcm9tLCB3aXRoIGEgc2NhbGVkIGFzc2V0IGZpbGVuYW1lXG4gICAqIEUuZy4gJ2ZpbGU6Ly8vc2RjYXJkL2J1bmRsZS9hc3NldHMvQXdlc29tZU1vZHVsZS9pY29uQDJ4LnBuZydcbiAgICovXG4gIHNjYWxlZEFzc2V0VVJMTmVhckJ1bmRsZSgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5qc2J1bmRsZVVybCB8fCAnZmlsZTovLyc7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShcbiAgICAgIC8vIEFzc2V0cyBjYW4gaGF2ZSByZWxhdGl2ZSBwYXRocyBvdXRzaWRlIG9mIHRoZSBwcm9qZWN0IHJvb3QuXG4gICAgICAvLyBXaGVuIGJ1bmRsaW5nIHRoZW0gd2UgcmVwbGFjZSBgLi4vYCB3aXRoIGBfYCB0byBtYWtlIHN1cmUgdGhleVxuICAgICAgLy8gZG9uJ3QgZW5kIHVwIG91dHNpZGUgb2YgdGhlIGV4cGVjdGVkIGFzc2V0cyBkaXJlY3RvcnkuXG4gICAgICBwYXRoICsgZ2V0U2NhbGVkQXNzZXRQYXRoKHRoaXMuYXNzZXQpLnJlcGxhY2UoL1xcLlxcLlxcLy9nLCAnXycpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbG9jYXRpb24gb2YgYXNzZXRzIGJ1bmRsZWQgd2l0aCB0aGUgYXBwLCBsb2NhdGVkIGJ5XG4gICAqIHJlc291cmNlIGlkZW50aWZpZXJcbiAgICogVGhlIEFuZHJvaWQgcmVzb3VyY2Ugc3lzdGVtIHBpY2tzIHRoZSBjb3JyZWN0IHNjYWxlLlxuICAgKiBFLmcuICdhc3NldHNfYXdlc29tZW1vZHVsZV9pY29uJ1xuICAgKi9cbiAgcmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGludmFyaWFudChcbiAgICAgIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcsXG4gICAgICAncmVzb3VyY2UgaWRlbnRpZmllcnMgd29yayBvbiBBbmRyb2lkJyxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcih0aGlzLmFzc2V0KSk7XG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIGpzYnVuZGxlIGlzIHJ1bm5pbmcgZnJvbSBhIHNpZGVsb2FkIGxvY2F0aW9uLCB0aGlzIHJlc29sdmVzIGFzc2V0c1xuICAgKiByZWxhdGl2ZSB0byBpdHMgbG9jYXRpb25cbiAgICogRS5nLiAnZmlsZTovLy9zZGNhcmQvQXdlc29tZU1vZHVsZS9kcmF3YWJsZS1tZHBpL2ljb24ucG5nJ1xuICAgKi9cbiAgZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5qc2J1bmRsZVVybCB8fCAnZmlsZTovLyc7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShwYXRoICsgZ2V0QXNzZXRQYXRoSW5EcmF3YWJsZUZvbGRlcih0aGlzLmFzc2V0KSk7XG4gIH1cblxuICBmcm9tU291cmNlKHNvdXJjZTogc3RyaW5nKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fcGFja2FnZXJfYXNzZXQ6IHRydWUsXG4gICAgICB3aWR0aDogdGhpcy5hc3NldC53aWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5hc3NldC5oZWlnaHQsXG4gICAgICB1cmk6IHNvdXJjZSxcbiAgICAgIHNjYWxlOiBwaWNrU2NhbGUodGhpcy5hc3NldC5zY2FsZXMsIFBpeGVsUmF0aW8uZ2V0KCkpLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgcGlja1NjYWxlOiAoc2NhbGVzOiBBcnJheTxudW1iZXI+LCBkZXZpY2VTY2FsZT86IG51bWJlcikgPT4gbnVtYmVyID1cbiAgICBwaWNrU2NhbGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXNzZXRTb3VyY2VSZXNvbHZlcjtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQVliLElBQU1HLFVBQVUsR0FBR0gsT0FBTywwQkFBMEIsQ0FBQyxDQUFDSSxPQUFPO0FBQzdELElBQU1DLFFBQVEsR0FBR0wsT0FBTyx3QkFBd0IsQ0FBQztBQUNqRCxJQUFBTSxRQUFBLEdBQW9CTixPQUFPLGVBQWUsQ0FBQztFQUFwQ08sU0FBUyxHQUFBRCxRQUFBLENBQVRDLFNBQVM7QUFDaEIsSUFBQUMsU0FBQSxHQUlJUixPQUFPLENBQUMsNENBQTRDLENBQUM7RUFIdkRTLDRCQUE0QixHQUFBRCxTQUFBLENBQTVCQyw0QkFBNEI7RUFDNUJDLDRCQUE0QixHQUFBRixTQUFBLENBQTVCRSw0QkFBNEI7RUFDNUJDLFdBQVcsR0FBQUgsU0FBQSxDQUFYRyxXQUFXO0FBRWIsSUFBTUMsU0FBUyxHQUFHWixPQUFPLENBQUMsV0FBVyxDQUFDO0FBS3RDLFNBQVNhLGtCQUFrQkEsQ0FBQ0Ms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LEVBTUQsU0FBQVksZUFBZUEsQ0FBQSxFQUF3QjtNQUNyQyxPQUFPLElBQUksQ0FBQ0YsVUFBVSxDQUFDMUIsa0JBQWtCLENBQUMsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQztJQUN4RDtFQUFDO0lBQUFjLEdBQUE7SUFBQUMsS0FBQSxFQU1ELFNBQUFTLHdCQUF3QkEsQ0FBQSxFQUF3QjtNQUM5QyxJQUFNSSxJQUFJLEdBQUcsSUFBSSxDQUFDZixXQUFXLElBQUksU0FBUztNQUMxQyxPQUFPLElBQUksQ0FBQ1ksVUFBVSxDQUlwQkcsSUFBSSxHQUFHN0Isa0JBQWtCLENBQUMsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQzZCLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUM5RCxDQUFDO0lBQ0g7RUFBQztJQUFBZixHQUFBO0lBQUFDLEtBQUEsRUFRRCxTQUFBUSw4QkFBOEJBLENBQUEsRUFBd0I7TUFDcER6QixTQUFTLENBQ1BQLFFBQVEsQ0FBQzhCLEVBQUUsS0FBSyxTQUFTLEVBQ3pCLHNDQUNGLENBQUM7TUFDRCxPQUFPLElBQUksQ0FBQ0ksVUFBVSxDQUFDN0IsNEJBQTRCLENBQUMsSUFBSSxDQUFDSSxLQUFLLENBQUMsQ0FBQztJQUNsRTtFQUFDO0lBQUFjLEdBQUE7SUFBQUMsS0FBQSxFQU9ELFNBQUFPLHNCQUFzQkEsQ0FBQSxFQUF3QjtNQUM1QyxJQUFNTSxJQUFJLEdBQUcsSUFBSSxDQUFDZixXQUFXLElBQUksU0FBUztNQUMxQyxPQUFPLElBQUksQ0FBQ1ksVUFBVSxDQUFDRyxJQUFJLEdBQUdwQiw0QkFBNEIsQ0FBQyxJQUFJLENBQUNSLEtBQUssQ0FBQyxDQUFDO0lBQ3pFO0VBQUM7SUFBQWMsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQVUsVUFBVUEsQ0FBQ0ssTUFBYyxFQUF1QjtNQUM5QyxPQUFPO1FBQ0xDLGdCQUFnQixFQUFFLElBQUk7UUFDdEJDLEtBQUssRUFBRSxJQUFJLENBQUNoQyxLQUFLLENBQUNnQyxLQUFLO1FBQ3ZCQyxNQUFNLEVBQUUsSUFBSSxDQUFDakMsS0FBSyxDQUFDaUMsTUFBTTtRQUN6QkMsR0FBRyxFQUFFSixNQUFNO1FBQ1g3QixLQUFLLEVBQUVSLFNBQVMsQ0FBQyxJQUFJLENBQUNPLEtBQUssQ0FBQ0UsTUFBTSxFQUFFYixVQUFVLENBQUNjLEdBQUcsQ0FBQyxDQUFDO01BQ3RELENBQUM7SUFDSDtFQUFDO0FBQUE7QUF6R0dRLG1CQUFtQixDQTJHaEJsQixTQUFTLEdBQ2RBLFNBQVM7QUFHYjBDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHekIsbUJBQW1CIiwiaWdub3JlTGlzdCI6W119