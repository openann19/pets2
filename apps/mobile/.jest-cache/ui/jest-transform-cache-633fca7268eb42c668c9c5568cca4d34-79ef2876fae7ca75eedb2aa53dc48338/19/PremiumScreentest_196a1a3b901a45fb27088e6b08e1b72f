8bff8e3f565736bb47ce258e03e4a777
"use strict";

_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: mockNavigate,
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock("@stripe/stripe-react-native", function () {
  return {
    useStripe: function useStripe() {
      return {
        initPaymentSheet: jest.fn().mockResolvedValue({
          error: null
        }),
        presentPaymentSheet: jest.fn().mockResolvedValue({
          error: null
        })
      };
    },
    StripeProvider: function StripeProvider(_ref) {
      var children = _ref.children;
      return children;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _PremiumScreen = require("../PremiumScreen");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
describe("PremiumScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe("Rendering", function () {
    it("renders premium screen correctly", function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render.getByText;
      expect(getByText(/Premium/i)).toBeTruthy();
    });
    it("displays subscription tiers", function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render2.getByText;
      expect(getByText(/Basic/i)).toBeTruthy();
      expect(getByText(/Premium/i)).toBeTruthy();
      expect(getByText(/Ultimate/i)).toBeTruthy();
    });
    it("shows monthly and yearly pricing options", function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render3.getByText;
      expect(getByText(/Monthly/i)).toBeTruthy();
      expect(getByText(/Yearly/i)).toBeTruthy();
    });
  });
  describe("User Interaction", function () {
    it("allows switching between monthly and yearly billing", function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render4.getByText;
      var yearlyButton = getByText(/Yearly/i);
      _reactNative.fireEvent.press(yearlyButton);
      expect(getByText(/year/i)).toBeTruthy();
    });
    it("handles tier selection", function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render5.getByText;
      var premiumTier = getByText(/Premium/i);
      _reactNative.fireEvent.press(premiumTier);
      expect(premiumTier).toBeTruthy();
    });
  });
  describe("Subscription Flow", function () {
    it("initiates subscription process when subscribe button is pressed", (0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render6.getByText;
      var subscribeButton = getByText(/Subscribe/i);
      _reactNative.fireEvent.press(subscribeButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(subscribeButton).toBeTruthy();
      });
    }));
    it("handles successful subscription", (0, _asyncToGenerator2.default)(function* () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render7.getByText;
      var subscribeButton = getByText(/Subscribe/i);
      _reactNative.fireEvent.press(subscribeButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockNavigate).toHaveBeenCalled();
      });
    }));
    it("handles subscription errors gracefully", (0, _asyncToGenerator2.default)(function* () {
      jest.spyOn(console, "error").mockImplementation(function () {});
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render8.getByText;
      var subscribeButton = getByText(/Subscribe/i);
      _reactNative.fireEvent.press(subscribeButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(subscribeButton).toBeTruthy();
      });
    }));
  });
  describe("Feature Display", function () {
    it("displays features for each tier", function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render9.getByText;
      expect(getByText(/Unlimited swipes/i)).toBeTruthy();
      expect(getByText(/Advanced matching/i)).toBeTruthy();
      expect(getByText(/Priority support/i)).toBeTruthy();
    });
    it("highlights premium features", function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render0.getByText;
      var premiumFeature = getByText(/Advanced matching/i);
      expect(premiumFeature).toBeTruthy();
    });
  });
  describe("Current Subscription", function () {
    it("displays current subscription status", function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render1.getByText;
      expect(getByText(/Current Plan/i) || getByText(/Free/i)).toBeTruthy();
    });
    it("shows upgrade options for current subscribers", function () {
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render10.getByText;
      expect(getByText(/Upgrade/i) || getByText(/Subscribe/i)).toBeTruthy();
    });
  });
  describe("Accessibility", function () {
    it("has accessible labels for subscription tiers", function () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByLabelText = _render11.getByLabelText;
      expect(getByLabelText(/Basic tier/i) || getByLabelText(/Basic/i)).toBeTruthy();
    });
    it("provides accessible navigation", function () {
      var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByLabelText = _render12.getByLabelText;
      expect(getByLabelText(/Back/i) || getByLabelText(/Close/i)).toBeTruthy();
    });
  });
  describe("Loading States", function () {
    it("shows loading indicator during subscription process", (0, _asyncToGenerator2.default)(function* () {
      var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render13.getByText,
        getByTestId = _render13.getByTestId;
      var subscribeButton = getByText(/Subscribe/i);
      _reactNative.fireEvent.press(subscribeButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(getByTestId("loading-indicator") || getByText(/Loading/i)).toBeTruthy();
      }, {
        timeout: 100
      });
    }));
  });
  describe("Error Handling", function () {
    it("displays error message on subscription failure", (0, _asyncToGenerator2.default)(function* () {
      var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render14.getByText;
      var subscribeButton = getByText(/Subscribe/i);
      _reactNative.fireEvent.press(subscribeButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(subscribeButton).toBeTruthy();
      });
    }));
    it("allows retry after error", (0, _asyncToGenerator2.default)(function* () {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PremiumScreen.PremiumScreen, {})),
        getByText = _render15.getByText;
      var subscribeButton = getByText(/Subscribe/i);
      _reactNative.fireEvent.press(subscribeButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(subscribeButton).toBeTruthy();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,