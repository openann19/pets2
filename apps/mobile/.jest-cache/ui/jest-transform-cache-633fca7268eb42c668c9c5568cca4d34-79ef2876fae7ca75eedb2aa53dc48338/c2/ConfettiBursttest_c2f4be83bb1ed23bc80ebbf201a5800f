a87754f9fad55f8fab69c58a3613bd69
"use strict";

_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ConfettiBurst = require("../ConfettiBurst");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ConfettiBurst', function () {
  var mockOnComplete = jest.fn();
  var defaultProps = {
    show: true,
    onComplete: mockOnComplete,
    intensity: 'medium',
    duration: 3000,
    colors: ['#FF6B6B', '#4ECDC4', '#FFD700']
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('Rendering', function () {
    it('should render nothing when show is false', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, {
          show: false
        })),
        container = _render.container;
      expect(container).toBeTruthy();
    });
    it('should render container when show is true', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread({}, defaultProps))),
        getByTestId = _render2.getByTestId;
      var container = getByTestId('confetti-container');
      expect(container).toBeTruthy();
    });
    it('should have correct z-index for overlay', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread({}, defaultProps))),
        UNSAFE_getByType = _render3.UNSAFE_getByType;
      var container = UNSAFE_getByType(_reactNative2.View);
      expect(container.props.style).toEqual(expect.arrayContaining([expect.objectContaining({
        zIndex: 9999
      })]));
    });
  });
  describe('Intensity Levels', function () {
    it('should create correct number of particles for light intensity', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        intensity: "light"
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
    });
    it('should create correct number of particles for medium intensity', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        intensity: "medium"
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
    });
    it('should create correct number of particles for heavy intensity', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        intensity: "heavy"
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
    });
  });
  describe('Animation', function () {
    it('should trigger haptic feedback on show', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread({}, defaultProps)));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(10);
      });
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Heavy);
    });
    it('should trigger second haptic feedback after delay', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread({}, defaultProps)));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(210);
      });
      expect(Haptics.impactAsync).toHaveBeenCalledTimes(2);
      expect(Haptics.impactAsync).toHaveBeenLastCalledWith(Haptics.ImpactFeedbackStyle.Medium);
    }));
    it('should animate particles with correct properties', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread({}, defaultProps))),
        UNSAFE_getAllByType = _render4.UNSAFE_getAllByType;
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
      var particles = UNSAFE_getAllByType('Animated.View');
      expect(particles.length).toBeGreaterThan(0);
    });
    it('should call onComplete after duration', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        duration: 1000
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(1000);
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(mockOnComplete).toHaveBeenCalled();
      });
    }));
    it('should stop confetti after completion', (0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
          duration: 1000
        }))),
        rerender = _render5.rerender;
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(1000);
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(mockOnComplete).toHaveBeenCalled();
      });
      rerender((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        show: false
      })));
      var container = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactNative2.View, {}));
      expect(container).toBeTruthy();
    }));
  });
  describe('Particle Bursts', function () {
    it('should trigger periodic bursts during animation', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        duration: 5000
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(400);
      });
      expect(Haptics.impactAsync).toHaveBeenCalled();
    });
    it('should handle multiple burst cycles', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        intensity: "heavy",
        duration: 5000
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(1000);
      });
      var calls = Haptics.impactAsync.mock.calls.length;
      expect(calls).toBeGreaterThan(1);
    });
  });
  describe('Custom Colors', function () {
    it('should use provided colors for particles', function () {
      var customColors = ['#FF0000', '#00FF00', '#0000FF'];
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        colors: customColors
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
    });
    it('should handle single color array', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        colors: ['#FF6B6B']
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
    });
    it('should handle empty colors array', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        colors: []
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
    });
  });
  describe('Edge Cases', function () {
    it('should handle undefined onComplete', function () {
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
          onComplete: undefined
        })));
        (0, _reactNative.act)(function () {
          jest.advanceTimersByTime(100);
        });
      }).not.toThrow();
    });
    it('should handle rapid show/hide toggles', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
          show: false
        }))),
        rerender = _render6.rerender;
      (0, _reactNative.act)(function () {
        rerender((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
          show: true
        })));
      });
      (0, _reactNative.act)(function () {
        rerender((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
          show: false
        })));
      });
      (0, _reactNative.act)(function () {
        rerender((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
          show: true
        })));
      });
      expect(function () {
        (0, _reactNative.act)(function () {
          jest.advanceTimersByTime(100);
        });
      }).not.toThrow();
    });
    it('should cleanup intervals on unmount', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread({}, defaultProps))),
        unmount = _render7.unmount;
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
      unmount();
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(1000);
      });
      expect(function () {}).not.toThrow();
    });
    it('should handle very short duration', (0, _asyncToGenerator2.default)(function* () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        duration: 100
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(150);
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(mockOnComplete).toHaveBeenCalled();
      }, {
        timeout: 200
      });
    }));
    it('should handle very long duration', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        duration: 10000
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(5000);
      });
      expect(mockOnComplete).not.toHaveBeenCalled();
    });
    it('should not create particles when show becomes false mid-animation', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
          show: true
        }))),
        rerender = _render8.rerender;
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
      rerender((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        show: false
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
      expect(function () {
        (0, _reactNative.act)(function () {
          jest.advanceTimersByTime(1000);
        });
      }).not.toThrow();
    });
  });
  describe('Performance', function () {
    it('should not create excessive particles for light intensity', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
        intensity: "light"
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
      expect(Haptics.impactAsync).toHaveBeenCalled();
    });
    it('should efficiently clean up completed animations', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, defaultProps), {}, {
          duration: 1000
        }))),
        unmount = _render9.unmount;
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(1100);
      });
      unmount();
      expect(function () {
        (0, _reactNative.act)(function () {
          jest.runAllTimers();
        });
      }).not.toThrow();
    });
  });
  describe('Accessibility', function () {
    it('should have pointerEvents="none" to not block interactions', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread({}, defaultProps))),
        UNSAFE_getByType = _render0.UNSAFE_getByType;
      var container = UNSAFE_getByType(_reactNative2.View);
      expect(container.props.pointerEvents).toBe('none');
    });
  });
  describe('Props Validation', function () {
    it('should work with minimal props', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, {
        show: true
      }));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
      expect(function () {}).not.toThrow();
    });
    it('should work with all props specified', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, {
        show: true,
        onComplete: mockOnComplete,
        intensity: "heavy",
        duration: 4000,
        colors: ['#FF0000', '#00FF00', '#0000FF']
      }));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(100);
      });
      expect(Haptics.impactAsync).toHaveBeenCalled();
    });
  });
  describe('Integration', function () {
    it('should coordinate with match modal', (0, _asyncToGenerator2.default)(function* () {
      var matchProps = {
        show: true,
        onComplete: jest.fn(),
        intensity: 'heavy',
        duration: 4000
      };
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, matchProps), {}, {
          show: false
        }))),
        rerender = _render1.rerender;
      rerender((0, _jsxRuntime.jsx)(_ConfettiBurst.ConfettiBurst, _objectSpread(_objectSpread({}, matchProps), {}, {
        show: true
      })));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(4100);
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(matchProps.onComplete).toHaveBeenCalled();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,