d0aa272392d683e47f839959a637e644
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModernPhotoUploadWithEditor = ModernPhotoUploadWithEditor;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _AdvancedPhotoEditor = require("./photo/AdvancedPhotoEditor");
var _unifiedTheme = require("../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  width = _Dimensions$get.width;
var PHOTO_SIZE = (width - 60) / 3;
var SPRING_CONFIG = {
  damping: 15,
  stiffness: 300,
  mass: 1
};
var _worklet_4621830118014_init_data = {
  code: "function anonymous() {\n  const {\n    scaleValue\n  } = this._closure;\n  return {\n    transform: [{\n      scale: scaleValue.value\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/ModernPhotoUploadWithEditor.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"scaleValue\",\"_closure\",\"transform\",\"scale\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/ModernPhotoUploadWithEditor.tsx\"],\"mappings\":\"AA4CyC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC5CC,SAAS,EAAE,CAAC;MAAEC,KAAK,EAAEH,UAAU,CAACI;IAAM,CAAC;EACzC,CAAC;AAAA\",\"ignoreList\":[]}"
};
function ModernPhotoUploadWithEditor(_ref) {
  var photos = _ref.photos,
    onPhotosChange = _ref.onPhotosChange,
    _ref$maxPhotos = _ref.maxPhotos,
    maxPhotos = _ref$maxPhotos === void 0 ? 6 : _ref$maxPhotos,
    style = _ref.style,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isUploading = _useState2[0],
    setIsUploading = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    showEditor = _useState4[0],
    setShowEditor = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    photoToEdit = _useState6[0],
    setPhotoToEdit = _useState6[1];
  var _useState7 = (0, _react.useState)('add'),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    editMode = _useState8[0],
    setEditMode = _useState8[1];
  var scaleValue = (0, _reactNativeReanimated.useSharedValue)(1);
  var animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        transform: [{
          scale: scaleValue.value
        }]
      };
    };
    _f._closure = {
      scaleValue: scaleValue
    };
    _f.__initData = _worklet_4621830118014_init_data;
    _f.__workletHash = 4621830118014;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var requestPermissions = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),
        status = _yield$ImagePicker$re.status;
      if (status !== ImagePicker.PermissionStatus.GRANTED) {
        _reactNative.Alert.alert("Permission Required", "Please grant camera roll permissions to upload photos.", [{
          text: "OK"
        }]);
        return false;
      }
      return true;
    });
    return function requestPermissions() {
      return _ref2.apply(this, arguments);
    };
  }();
  var pickImage = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (photos.length >= maxPhotos) {
        _reactNative.Alert.alert("Photo Limit", `You can only upload up to ${maxPhotos} photos.`);
        return;
      }
      var hasPermission = yield requestPermissions();
      if (!hasPermission) return;
      setIsUploading(true);
      scaleValue.value = (0, _reactNativeReanimated.withSpring)(0.95, SPRING_CONFIG);
      try {
        var result = yield ImagePicker.launchImageLibraryAsync({
          mediaTypes: ImagePicker.MediaTypeOptions.Images,
          allowsEditing: false,
          quality: 1.0
        });
        if (!result.canceled && result.assets[0]) {
          setPhotoToEdit(result.assets[0].uri);
          setEditMode('add');
          setShowEditor(true);
        }
      } catch (error) {
        _reactNative.Alert.alert("Error", "Failed to pick image. Please try again.");
      } finally {
        setIsUploading(false);
        scaleValue.value = (0, _reactNativeReanimated.withSpring)(1, SPRING_CONFIG);
      }
    });
    return function pickImage() {
      return _ref3.apply(this, arguments);
    };
  }();
  var takePhoto = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* () {
      if (photos.length >= maxPhotos) {
        _reactNative.Alert.alert("Photo Limit", `You can only upload up to ${maxPhotos} photos.`);
        return;
      }
      var _yield$ImagePicker$re2 = yield ImagePicker.requestCameraPermissionsAsync(),
        status = _yield$ImagePicker$re2.status;
      if (status !== ImagePicker.PermissionStatus.GRANTED) {
        _reactNative.Alert.alert("Permission Required", "Please grant camera permissions to take photos.", [{
          text: "OK"
        }]);
        return;
      }
      setIsUploading(true);
      try {
        var result = yield ImagePicker.launchCameraAsync({
          allowsEditing: false,
          quality: 1.0
        });
        if (!result.canceled && result.assets[0]) {
          setPhotoToEdit(result.assets[0].uri);
          setEditMode('add');
          setShowEditor(true);
        }
      } catch (error) {
        _reactNative.Alert.alert("Error", "Failed to take photo. Please try again.");
      } finally {
        setIsUploading(false);
      }
    });
    return function takePhoto() {
      return _ref4.apply(this, arguments);
    };
  }();
  var showImageOptions = function showImageOptions() {
    _reactNative.Alert.alert("Add Photo", "Choose how you want to add a photo", [{
      text: "Camera",
      onPress: function onPress() {
        return void takePhoto();
      }
    }, {
      text: "Photo Library",
      onPress: function onPress() {
        return void pickImage();
      }
    }, {
      text: "Cancel",
      style: "cancel"
    }]);
  };
  var editPhoto = function editPhoto(photoId) {
    var photo = photos.find(function (p) {
      return p.id === photoId;
    });
    if (photo) {
      setPhotoToEdit(photo.uri);
      setEditMode('edit');
      setShowEditor(true);
    }
  };
  var handleEditorSave = function handleEditorSave(editedUri) {
    if (editMode === 'add') {
      var newPhoto = {
        id: Date.now().toString(),
        uri: editedUri,
        isPrimary: photos.length === 0
      };
      onPhotosChange([].concat((0, _toConsumableArray2.default)(photos), [newPhoto]));
    } else {
      var updatedPhotos = photos.map(function (p) {
        return photoToEdit && p.uri === photoToEdit ? _objectSpread(_objectSpread({}, p), {}, {
          uri: editedUri
        }) : p;
      });
      onPhotosChange(updatedPhotos);
    }
    setShowEditor(false);
    setPhotoToEdit(null);
  };
  var handleEditorCancel = function handleEditorCancel() {
    setShowEditor(false);
    setPhotoToEdit(null);
  };
  var removePhoto = function removePhoto(photoId) {
    _reactNative.Alert.alert("Remove Photo", "Are you sure you want to remove this photo?", [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Remove",
      style: "destructive",
      onPress: function onPress() {
        var updatedPhotos = photos.filter(function (p) {
          return p.id !== photoId;
        });
        if (updatedPhotos.length > 0 && !updatedPhotos.some(function (p) {
          return p.isPrimary;
        }) && updatedPhotos[0]) {
          updatedPhotos[0].isPrimary = true;
        }
        onPhotosChange(updatedPhotos);
      }
    }]);
  };
  var setPrimaryPhoto = function setPrimaryPhoto(photoId) {
    var updatedPhotos = photos.map(function (photo) {
      return _objectSpread(_objectSpread({}, photo), {}, {
        isPrimary: photo.id === photoId
      });
    });
    onPhotosChange(updatedPhotos);
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, style],
    children: [photos.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.photoGrid,
      children: photos.map(function (photo) {
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.photoContainer,
          children: (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              editPhoto(photo.id);
            },
            children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: {
                uri: photo.uri
              },
              style: styles.photo
            }), photo.isPrimary && (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.primaryBadge,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.primaryBadgeText,
                children: "\u2B50 Primary"
              })
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.photoActions,
              children: [!photo.isPrimary && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                style: styles.actionButton,
                onPress: function onPress() {
                  setPrimaryPhoto(photo.id);
                },
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.actionButtonText,
                  children: "\u2B50"
                })
              }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                style: [styles.actionButton, styles.removeButton],
                onPress: function onPress() {
                  removePhoto(photo.id);
                },
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.removeButtonText,
                  children: "\u2715"
                })
              })]
            })]
          })
        }, photo.id);
      })
    }), photos.length < maxPhotos && (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: animatedStyle,
      children: (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        style: styles.addButton,
        onPress: showImageOptions,
        disabled: isUploading || disabled,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.addButtonIcon,
          children: isUploading ? "⏳" : "📷"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.addButtonText,
          children: photos.length === 0 ? "Add First Photo" : `Add Photo (${photos.length}/${maxPhotos})`
        })]
      })
    }), showEditor && photoToEdit && (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      visible: showEditor,
      animationType: "slide",
      presentationStyle: "fullScreen",
      children: (0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
        imageUri: photoToEdit,
        onSave: handleEditorSave,
        onCancel: handleEditorCancel,
        aspectRatio: [4, 3],
        maxWidth: 1920,
        maxHeight: 1920
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  photoGrid: {
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 12,
    marginBottom: 20
  },
  photoContainer: {
    position: "relative",
    width: PHOTO_SIZE,
    height: PHOTO_SIZE,
    borderRadius: 12,
    overflow: "hidden",
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5
  },
  photo: {
    width: "100%",
    height: "100%",
    borderRadius: 12,
    backgroundColor: _unifiedTheme.Theme.colors.neutral[100]
  },
  primaryBadge: {
    position: "absolute",
    top: 8,
    left: 8,
    backgroundColor: _unifiedTheme.Theme.colors.primary[500],
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: "rgba(255, 255, 255, 0.3)"
  },
  primaryBadgeText: {
    color: "white",
    fontSize: 10,
    fontWeight: "600"
  },
  photoActions: {
    position: "absolute",
    top: 8,
    right: 8,
    flexDirection: "row",
    gap: 6
  },
  actionButton: {
    backgroundColor: "rgba(0, 0, 0, 0.6)",
    width: 28,
    height: 28,
    borderRadius: 14,
    alignItems: "center",
    justifyContent: "center",
    borderWidth: 1,
    borderColor: "rgba(255, 255, 255, 0.3)"
  },
  removeButton: {
    backgroundColor: "rgba(239, 68, 68, 0.9)"
  },
  actionButtonText: {
    color: "white",
    fontSize: 14,
    fontWeight: "bold"
  },
  removeButtonText: {
    color: "white",
    fontSize: 12,
    fontWeight: "bold"
  },
  addButton: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    gap: 12,
    padding: 20,
    borderRadius: 16,
    backgroundColor: _unifiedTheme.Theme.colors.primary[500],
    borderWidth: 2,
    borderColor: _unifiedTheme.Theme.colors.primary[600],
    marginBottom: 20
  },
  addButtonIcon: {
    fontSize: 24
  },
  addButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "600"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,