363d430e76313f7f8dbc315c4c570a28
"use strict";

_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useBlockedUsers = require("../useBlockedUsers");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.Alert, "alert");
describe("useBlockedUsers", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
  });
  it("should initialize with loading state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useBlockedUsers.useBlockedUsers)();
      }),
      result = _renderHook.result;
    expect(result.current.isLoading).toBe(true);
    expect(result.current.blockedUsers).toEqual([]);
    expect(result.current.isRefreshing).toBe(false);
  });
  it("should load blocked users manually", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useBlockedUsers.useBlockedUsers)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.loadBlockedUsers();
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.blockedUsers).toHaveLength(2);
    expect(result.current.totalBlocked).toBe(2);
  }));
  it("should load blocked users on mount with timer", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useBlockedUsers.useBlockedUsers)();
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.blockedUsers).toHaveLength(2);
  }));
  it("should refresh blocked users", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useBlockedUsers.useBlockedUsers)();
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.refreshData();
    }));
    expect(result.current.isRefreshing).toBe(false);
  }));
  it("should unblock a user", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useBlockedUsers.useBlockedUsers)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    var initialCount = result.current.blockedUsers.length;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.unblockUser("user1", "John Doe");
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Unblock User", "Are you sure you want to unblock John Doe?", expect.arrayContaining([expect.objectContaining({
      text: "Cancel",
      style: "cancel"
    }), expect.objectContaining({
      text: "Unblock",
      style: "destructive"
    })]));
  }));
  it("should block a user", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useBlockedUsers.useBlockedUsers)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var success = yield result.current.blockUser("user3", "Spam");
      expect(success).toBe(true);
    }));
  }));
  it("should handle blocking user failure", (0, _asyncToGenerator2.default)(function* () {
    var mockLogger = require("@pawfectmatch/core").logger;
    mockLogger.info.mockImplementationOnce(function () {
      throw new Error("Network error");
    });
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useBlockedUsers.useBlockedUsers)();
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var success = yield result.current.blockUser("user3", "Spam");
      expect(success).toBe(false);
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    var firstUser = result.current.blockedUsers[0];
    expect(firstUser).toHaveProperty("id");
    expect(firstUser).toHaveProperty("name");
    expect(firstUser).toHaveProperty("email");
    expect(firstUser).toHaveProperty("blockedAt");
    expect(firstUser).toHaveProperty("reason");
    expect(firstUser.reason).toBe("Inappropriate behavior");
  }));
  it("should track blocked timestamp", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useBlockedUsers.useBlockedUsers)();
      }),
      result = _renderHook8.result;
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    var firstUser = result.current.blockedUsers[0];
    expect(firstUser.blockedAt).toBeDefined();
    expect(new Date(firstUser.blockedAt)).toBeInstanceOf(Date);
  }));
  it("should return stable function references", function () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useBlockedUsers.useBlockedUsers)();
      }),
      result = _renderHook9.result;
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    var firstRefreshData = result.current.refreshData;
    var firstBlockUser = result.current.blockUser;
    var firstUnblockUser = result.current.unblockUser;
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(100);
    });
    expect(result.current.refreshData).toBe(firstRefreshData);
    expect(result.current.blockUser).toBe(firstBlockUser);
    expect(result.current.unblockUser).toBe(firstUnblockUser);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,