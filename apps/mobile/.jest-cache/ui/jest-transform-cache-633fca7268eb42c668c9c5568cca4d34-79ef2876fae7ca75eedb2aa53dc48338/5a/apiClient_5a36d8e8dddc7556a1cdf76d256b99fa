3a76412eff5b4e81d605067ed5b8bdf0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ApiClient = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _core = require("@pawfectmatch/core");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _axios = _interopRequireWildcard(require("axios"));
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _UnifiedAPIClient = require("@pawfectmatch/core/api/UnifiedAPIClient");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var envApiBaseUrl = process.env["EXPO_PUBLIC_API_URL"];
var API_BASE_URL = typeof envApiBaseUrl === "string" && envApiBaseUrl.trim().length > 0 ? envApiBaseUrl : "http://localhost:3001/api";
var ApiClient = exports.ApiClient = function () {
  function ApiClient(config) {
    var _config$timeout, _config$timeout2;
    (0, _classCallCheck2.default)(this, ApiClient);
    this.token = null;
    this.instance = _axios.default.create({
      baseURL: config.baseURL,
      timeout: (_config$timeout = config.timeout) != null ? _config$timeout : 30000,
      headers: {
        "Content-Type": "application/json"
      }
    });
    var unifiedConfig = {
      baseURL: config.baseURL,
      timeout: (_config$timeout2 = config.timeout) != null ? _config$timeout2 : 30000,
      retryConfig: {
        maxRetries: 3,
        baseDelay: 1000,
        maxDelay: 30000
      },
      circuitBreakerConfig: {
        failureThreshold: 5,
        successThreshold: 2,
        resetTimeout: 60000
      },
      queueConfig: {
        maxSize: 1000,
        persistence: "memory"
      }
    };
    this.unifiedClient = new _UnifiedAPIClient.UnifiedAPIClient(unifiedConfig);
    this.setupNetworkMonitoring();
    this.setupInterceptors();
    void this.loadToken();
  }
  return (0, _createClass2.default)(ApiClient, [{
    key: "loadToken",
    value: (function () {
      var _loadToken = (0, _asyncToGenerator2.default)(function* () {
        try {
          var token = yield _asyncStorage.default.getItem("authToken");
          if (token !== null) {
            this.token = token;
          }
        } catch (error) {
          _core.logger.error("api-client.load-token.failed", {
            error: error
          });
        }
      });
      function loadToken() {
        return _loadToken.apply(this, arguments);
      }
      return loadToken;
    }())
  }, {
    key: "setToken",
    value: (function () {
      var _setToken = (0, _asyncToGenerator2.default)(function* (token) {
        this.token = token;
        try {
          yield _asyncStorage.default.setItem("authToken", token);
        } catch (error) {
          _core.logger.error("api-client.save-token.failed", {
            error: error
          });
        }
      });
      function setToken(_x) {
        return _setToken.apply(this, arguments);
      }
      return setToken;
    }())
  }, {
    key: "clearToken",
    value: (function () {
      var _clearToken = (0, _asyncToGenerator2.default)(function* () {
        this.token = null;
        try {
          yield _asyncStorage.default.removeItem("authToken");
        } catch (error) {
          _core.logger.error("api-client.clear-token.failed", {
            error: error
          });
        }
      });
      function clearToken() {
        return _clearToken.apply(this, arguments);
      }
      return clearToken;
    }())
  }, {
    key: "setupNetworkMonitoring",
    value: function setupNetworkMonitoring() {
      var _this = this;
      this.networkUnsubscribe = _netinfo.default.addEventListener(function (state) {
        var _state$isConnected;
        var isOnline = (_state$isConnected = state.isConnected) != null ? _state$isConnected : false;
        _this.unifiedClient.setOnlineStatus(isOnline);
        if (isOnline) {
          _core.logger.info("Network connected, processing queue");
        } else {
          _core.logger.info("Network disconnected, queueing requests");
        }
      });
      void _netinfo.default.fetch().then(function (state) {
        var _state$isConnected2;
        var isOnline = (_state$isConnected2 = state.isConnected) != null ? _state$isConnected2 : false;
        _this.unifiedClient.setOnlineStatus(isOnline);
      });
    }
  }, {
    key: "setupInterceptors",
    value: function setupInterceptors() {
      var _this2 = this;
      this.instance.interceptors.request.use(function (config) {
        if (_this2.token !== null) {
          var token = _this2.token;
          var headers = new _axios.AxiosHeaders(config.headers);
          headers.set("Authorization", `Bearer ${token}`);
          config.headers = headers;
        }
        return config;
      }, function (error) {
        var reason = error instanceof Error ? error : new Error("Request interceptor rejected");
        return Promise.reject(reason);
      });
      this.instance.interceptors.response.use(function (response) {
        return response;
      }, function () {
        var _ref = (0, _asyncToGenerator2.default)(function* (error) {
          if (error.response !== undefined) {
            var _error$response = error.response,
              status = _error$response.status,
              data = _error$response.data;
            if (status === 401) {
              yield _this2.clearToken();
              _core.logger.warn("api-client.unauthorized", {
                status: status
              });
            } else if (status === 403) {
              _core.logger.error("api-client.forbidden", {
                status: status,
                data: data
              });
            } else if (status === 500) {
              _core.logger.error("api-client.server-error", {
                status: status,
                data: data
              });
            } else {
              _core.logger.error("api-client.http-error", {
                status: status,
                data: data
              });
            }
          } else if (error.request !== undefined) {
            _core.logger.error("api-client.network-error", {
              message: error.message
            });
          } else {
            _core.logger.error("api-client.request-setup-error", {
              message: error.message
            });
          }
          var reason = error instanceof Error ? error : new Error("API request failed");
          return Promise.reject(reason);
        });
        return function (_x2) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "get",
    value: (function () {
      var _get = (0, _asyncToGenerator2.default)(function* (url, config) {
        var response = yield this.instance.get(url, config);
        return response.data;
      });
      function get(_x3, _x4) {
        return _get.apply(this, arguments);
      }
      return get;
    }())
  }, {
    key: "post",
    value: (function () {
      var _post = (0, _asyncToGenerator2.default)(function* (url, data, config) {
        var response = yield this.instance.post(url, data, config);
        return response.data;
      });
      function post(_x5, _x6, _x7) {
        return _post.apply(this, arguments);
      }
      return post;
    }())
  }, {
    key: "put",
    value: (function () {
      var _put = (0, _asyncToGenerator2.default)(function* (url, data, config) {
        var response = yield this.instance.put(url, data, config);
        return response.data;
      });
      function put(_x8, _x9, _x0) {
        return _put.apply(this, arguments);
      }
      return put;
    }())
  }, {
    key: "patch",
    value: (function () {
      var _patch = (0, _asyncToGenerator2.default)(function* (url, data, config) {
        var response = yield this.instance.patch(url, data, config);
        return response.data;
      });
      function patch(_x1, _x10, _x11) {
        return _patch.apply(this, arguments);
      }
      return patch;
    }())
  }, {
    key: "delete",
    value: (function () {
      var _delete2 = (0, _asyncToGenerator2.default)(function* (url, config) {
        var response = yield this.instance.delete(url, config);
        return response.data;
      });
      function _delete(_x12, _x13) {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }())
  }, {
    key: "getAxiosInstance",
    value: function getAxiosInstance() {
      return this.instance;
    }
  }, {
    key: "getUnifiedClient",
    value: function getUnifiedClient() {
      return this.unifiedClient;
    }
  }, {
    key: "getCircuitBreakerMetrics",
    value: function getCircuitBreakerMetrics() {
      return this.unifiedClient.getCircuitBreakerMetrics();
    }
  }, {
    key: "getQueueStats",
    value: function getQueueStats() {
      return this.unifiedClient.getQueueStats();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.networkUnsubscribe) {
        this.networkUnsubscribe();
      }
      this.unifiedClient.destroy();
    }
  }]);
}();
var apiClient = new ApiClient({
  baseURL: API_BASE_URL,
  timeout: 30000
});
var _default = exports.default = apiClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,