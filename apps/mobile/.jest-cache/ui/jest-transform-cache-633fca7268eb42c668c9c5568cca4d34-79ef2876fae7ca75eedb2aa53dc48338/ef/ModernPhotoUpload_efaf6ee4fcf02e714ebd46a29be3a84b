1948b76d5a61e3cfb04df5da6cc6b53e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _vectorIcons = require("@expo/vector-icons");
var _core = require("@pawfectmatch/core");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _usePremiumAnimations = require("../hooks/usePremiumAnimations");
var _unifiedTheme = require("../theme/unified-theme");
var _EliteButton = _interopRequireDefault(require("./buttons/EliteButton"));
var _FXContainer = _interopRequireDefault(require("./containers/FXContainer"));
var _AdvancedPhotoEditor = require("./photo/AdvancedPhotoEditor");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  SCREEN_WIDTH = _Dimensions$get.width;
var PHOTO_SIZE = (SCREEN_WIDTH - _unifiedTheme.Theme.spacing["4xl"] * 2 - _unifiedTheme.Theme.spacing.lg * 2) / 3;
function ModernPhotoUpload(_ref) {
  var photos = _ref.photos,
    onPhotosChange = _ref.onPhotosChange,
    _ref$maxPhotos = _ref.maxPhotos,
    maxPhotos = _ref$maxPhotos === void 0 ? 6 : _ref$maxPhotos,
    style = _ref.style,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isProcessing = _useState2[0],
    setIsProcessing = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    showPhotoEditor = _useState4[0],
    setShowPhotoEditor = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    photoToEdit = _useState6[0],
    setPhotoToEdit = _useState6[1];
  var _useStaggeredAnimatio = (0, _usePremiumAnimations.useStaggeredAnimation)(photos.length + 1, 100),
    startStaggeredAnimation = _useStaggeredAnimatio.start,
    getAnimatedStyle = _useStaggeredAnimatio.getAnimatedStyle;
  _react.default.useEffect(function () {
    startStaggeredAnimation();
  }, [photos.length, startStaggeredAnimation]);
  var requestPermissions = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),
      status = _yield$ImagePicker$re.status;
    if (status !== "granted") {
      _reactNative.Alert.alert("Permission Required", "Please grant camera roll permissions to upload photos.", [{
        text: "OK"
      }]);
      return false;
    }
    return true;
  }), []);
  var pickImage = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (disabled || isProcessing || photos.length >= maxPhotos) return;
    var hasPermission = yield requestPermissions();
    if (!hasPermission) return;
    setIsProcessing(true);
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    try {
      var result = yield ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: false,
        quality: 1.0
      });
      if (!result.canceled && result.assets[0]) {
        setPhotoToEdit(result.assets[0].uri);
        setShowPhotoEditor(true);
      }
    } catch (error) {
      _core.logger.error("Error picking image:", {
        error: error
      });
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
      _reactNative.Alert.alert("Upload Error", "Failed to upload photo. Please try again.", [{
        text: "OK"
      }]);
    } finally {
      setIsProcessing(false);
    }
  }), [disabled, isProcessing, photos, maxPhotos, requestPermissions, onPhotosChange]);
  var handlePhotoEditorSave = (0, _react.useCallback)(function (editedUri) {
    var newPhoto = {
      id: Date.now().toString(),
      uri: editedUri,
      isUploading: false
    };
    var updatedPhotos = [].concat((0, _toConsumableArray2.default)(photos), [newPhoto]);
    onPhotosChange(updatedPhotos);
    setShowPhotoEditor(false);
    setPhotoToEdit(null);
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
  }, [photos, onPhotosChange]);
  var handlePhotoEditorCancel = (0, _react.useCallback)(function () {
    setShowPhotoEditor(false);
    setPhotoToEdit(null);
  }, []);
  var removePhoto = (0, _react.useCallback)(function (photoId) {
    if (disabled || isProcessing) return;
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    var updatedPhotos = photos.filter(function (photo) {
      return photo.id !== photoId;
    });
    onPhotosChange(updatedPhotos);
  }, [disabled, isProcessing, photos, onPhotosChange]);
  var renderPhotoItem = (0, _react.useCallback)(function (photo, index) {
    var AnimatedView = require("react-native-reanimated").default.View;
    return (0, _jsxRuntime.jsx)(AnimatedView, {
      style: getAnimatedStyle,
      children: (0, _jsxRuntime.jsxs)(_FXContainer.default, {
        type: "glass",
        variant: "medium",
        hasGlow: true,
        style: styles.photoContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: {
            uri: photo.uri
          },
          style: styles.photo,
          resizeMode: "cover"
        }), photo.isUploading && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.uploadingOverlay,
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.uploadingSpinner,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "cloud-upload",
              size: 24,
              color: _unifiedTheme.Theme.colors.primary[500]
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.uploadingText,
            children: "Uploading..."
          })]
        }), photo.error && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.errorOverlay,
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "alert-circle",
            size: 24,
            color: _unifiedTheme.Theme.colors.status.error
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.errorText,
            children: "Failed"
          })]
        }), !photo.isUploading && !photo.error && (0, _jsxRuntime.jsx)(_EliteButton.default, {
          title: "",
          size: "sm",
          variant: "ghost",
          leftIcon: "close",
          onPress: function onPress() {
            removePhoto(photo.id);
          },
          style: styles.removeButton,
          glowEffect: false,
          rippleEffect: false
        })]
      })
    }, photo.id);
  }, [getAnimatedStyle, removePhoto]);
  var renderAddButton = (0, _react.useCallback)(function () {
    var AnimatedView = require("react-native-reanimated").default.View;
    return (0, _jsxRuntime.jsx)(AnimatedView, {
      style: getAnimatedStyle,
      children: (0, _jsxRuntime.jsx)(_EliteButton.default, {
        title: "Add Photo",
        size: "lg",
        variant: "outline",
        leftIcon: "camera",
        onPress: pickImage,
        loading: isProcessing,
        disabled: disabled || photos.length >= maxPhotos,
        style: styles.addButton,
        glowEffect: true,
        rippleEffect: true,
        pressEffect: true
      })
    });
  }, [getAnimatedStyle, photos.length, pickImage, isProcessing, disabled, maxPhotos]);
  var gridItems = (0, _react.useMemo)(function () {
    var items = photos.map(renderPhotoItem);
    if (photos.length < maxPhotos) {
      items.push(renderAddButton());
    }
    return items;
  }, [photos, maxPhotos, renderPhotoItem, renderAddButton]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.container, style]),
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.title,
      children: "Pet Photos"
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: styles.subtitle,
      children: ["Add up to ", maxPhotos, " photos (", photos.length, "/", maxPhotos, ")"]
    }), showPhotoEditor && photoToEdit && (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      visible: showPhotoEditor,
      animationType: "slide",
      presentationStyle: "fullScreen",
      children: (0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
        imageUri: photoToEdit,
        onSave: handlePhotoEditorSave,
        onCancel: handlePhotoEditorCancel,
        aspectRatio: [1, 1],
        maxWidth: 1920,
        maxHeight: 1920
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.grid,
      children: gridItems
    }), photos.length === 0 && (0, _jsxRuntime.jsxs)(_FXContainer.default, {
      type: "glass",
      variant: "subtle",
      hasEntrance: true,
      entranceType: "slideIn",
      style: styles.emptyState,
      children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "images",
        size: 48,
        color: _unifiedTheme.Theme.colors.neutral[400],
        style: styles.emptyIcon
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emptyTitle,
        children: "No photos yet"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emptySubtitle,
        children: "Add photos to help other pet owners get to know your pet better"
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    padding: _unifiedTheme.Theme.spacing.xl
  },
  title: {
    fontSize: _unifiedTheme.Theme.typography.fontSize["2xl"],
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.bold,
    color: _unifiedTheme.Theme.colors.text.primary,
    marginBottom: _unifiedTheme.Theme.spacing.sm
  },
  subtitle: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.base,
    color: _unifiedTheme.Theme.colors.text.secondary,
    marginBottom: _unifiedTheme.Theme.spacing.xl
  },
  grid: {
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "space-between",
    gap: _unifiedTheme.Theme.spacing.lg
  },
  photoContainer: {
    width: PHOTO_SIZE,
    height: PHOTO_SIZE,
    position: "relative"
  },
  photo: {
    width: "100%",
    height: "100%",
    borderRadius: _unifiedTheme.Theme.borderRadius.xl
  },
  uploadingOverlay: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {
    backgroundColor: "rgba(0, 0, 0, 0.7)",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: _unifiedTheme.Theme.borderRadius.xl
  }),
  uploadingSpinner: {
    marginBottom: _unifiedTheme.Theme.spacing.sm
  },
  uploadingText: {
    color: _unifiedTheme.Theme.colors.neutral[0],
    fontSize: _unifiedTheme.Theme.typography.fontSize.sm,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.medium
  },
  errorOverlay: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {
    backgroundColor: "rgba(239, 68, 68, 0.9)",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: _unifiedTheme.Theme.borderRadius.xl
  }),
  errorText: {
    color: _unifiedTheme.Theme.colors.neutral[0],
    fontSize: _unifiedTheme.Theme.typography.fontSize.sm,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.medium,
    marginTop: _unifiedTheme.Theme.spacing.xs
  },
  removeButton: {
    position: "absolute",
    top: -8,
    right: -8,
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: _unifiedTheme.Theme.colors.status.error,
    padding: 0,
    minHeight: 32
  },
  addButton: {
    width: PHOTO_SIZE,
    height: PHOTO_SIZE,
    justifyContent: "center",
    alignItems: "center"
  },
  emptyState: {
    padding: _unifiedTheme.Theme.spacing["4xl"],
    alignItems: "center",
    marginTop: _unifiedTheme.Theme.spacing.xl
  },
  emptyIcon: {
    marginBottom: _unifiedTheme.Theme.spacing.lg
  },
  emptyTitle: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.lg,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.semibold,
    color: _unifiedTheme.Theme.colors.text.primary,
    marginBottom: _unifiedTheme.Theme.spacing.sm
  },
  emptySubtitle: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.base,
    color: _unifiedTheme.Theme.colors.text.secondary,
    textAlign: "center",
    lineHeight: _unifiedTheme.Theme.typography.fontSize.base * _unifiedTheme.Theme.typography.lineHeight.relaxed
  }
});
var _default = exports.default = ModernPhotoUpload;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,