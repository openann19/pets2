707d044e1058cd6c23cf700e0f071621
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var AnimatedMock = require("./__mocks__/Animated.js");
  return _objectSpread(_objectSpread({}, RN), {}, {
    Animated: AnimatedMock,
    LayoutAnimation: {
      configureNext: jest.fn(),
      create: jest.fn(),
      easeInEaseOut: jest.fn(),
      easeIn: jest.fn(),
      easeOut: jest.fn(),
      linear: jest.fn(),
      spring: jest.fn(),
      Properties: {},
      Presets: {}
    }
  });
});
_getJestObj().mock("./src/services/logger", function () {
  return {
    logger: {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn(),
      debug: jest.fn(),
      security: jest.fn(),
      bufferOfflineLog: jest.fn().mockResolvedValue(undefined),
      flushOfflineLogs: jest.fn().mockResolvedValue(undefined),
      setUserInfo: jest.fn(),
      clearUserInfo: jest.fn(),
      getSessionId: jest.fn().mockReturnValue('test-session'),
      destroy: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
require("@testing-library/jest-native/extend-expect");
require("./jest.setup.core");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.ReanimatedDataMock = {
  now: function now() {
    return Date.now();
  }
};
require("./jest.setup.mocks.native");
require("./jest.setup.mocks.expo");
require("./jest.setup.mocks.navigation");
require("./jest.setup.mocks.external");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiQW5pbWF0ZWRNb2NrIiwicmVxdWlyZSIsIl9vYmplY3RTcHJlYWQiLCJBbmltYXRlZCIsIkxheW91dEFuaW1hdGlvbiIsImNvbmZpZ3VyZU5leHQiLCJmbiIsImNyZWF0ZSIsImVhc2VJbkVhc2VPdXQiLCJlYXNlSW4iLCJlYXNlT3V0IiwibGluZWFyIiwic3ByaW5nIiwiUHJvcGVydGllcyIsIlByZXNldHMiLCJsb2dnZXIiLCJpbmZvIiwid2FybiIsImVycm9yIiwiZGVidWciLCJzZWN1cml0eSIsImJ1ZmZlck9mZmxpbmVMb2ciLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInVuZGVmaW5lZCIsImZsdXNoT2ZmbGluZUxvZ3MiLCJzZXRVc2VySW5mbyIsImNsZWFyVXNlckluZm8iLCJnZXRTZXNzaW9uSWQiLCJtb2NrUmV0dXJuVmFsdWUiLCJkZXN0cm95IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX3JlcXVpcmUiLCJnbG9iYWwiLCJSZWFuaW1hdGVkRGF0YU1vY2siLCJub3ciLCJEYXRlIl0sInNvdXJjZXMiOlsiamVzdC5zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1haW4gSmVzdCBzZXR1cCBmaWxlXG4gKiBMb2FkcyBtb2R1bGFyIHNldHVwIGZpbGVzIGNvbmRpdGlvbmFsbHkgYmFzZWQgb24gdGVzdCBuZWVkc1xuICovXG5cbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcblxuLy8gUmVhY3QgTmF0aXZlIFJlYW5pbWF0ZWQgcmVjb21tZW5kZWQgbW9jayB0d2Vha1xuLy8gQHRzLWlnbm9yZVxuZ2xvYmFsLlJlYW5pbWF0ZWREYXRhTW9jayA9IHsgbm93OiAoKSA9PiBEYXRlLm5vdygpIH07XG5cbi8vIFNpbGVuY2UgUk4gQW5pbWF0ZWQgd2FybmluZ3MgaW4gdGVzdHNcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbmltYXRlZC9OYXRpdmVBbmltYXRlZEhlbHBlcicpO1xuXG4vLyBNb2NrIHJlYWN0LW5hdGl2ZSdzIEFuaW1hdGVkIGV4cG9ydFxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XG4gIGNvbnN0IFJOID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUnKTtcbiAgY29uc3QgQW5pbWF0ZWRNb2NrID0gcmVxdWlyZSgnLi9fX21vY2tzX18vQW5pbWF0ZWQuanMnKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5STixcbiAgICBBbmltYXRlZDogQW5pbWF0ZWRNb2NrLFxuICAgIExheW91dEFuaW1hdGlvbjoge1xuICAgICAgY29uZmlndXJlTmV4dDogamVzdC5mbigpLFxuICAgICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgICBlYXNlSW5FYXNlT3V0OiBqZXN0LmZuKCksXG4gICAgICBlYXNlSW46IGplc3QuZm4oKSxcbiAgICAgIGVhc2VPdXQ6IGplc3QuZm4oKSxcbiAgICAgIGxpbmVhcjogamVzdC5mbigpLFxuICAgICAgc3ByaW5nOiBqZXN0LmZuKCksXG4gICAgICBQcm9wZXJ0aWVzOiB7fSxcbiAgICAgIFByZXNldHM6IHt9LFxuICAgIH0sXG4gIH07XG59KTtcblxuLy8gTW9jayBsb2dnZXIgZ2xvYmFsbHkgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wc1xuamVzdC5tb2NrKCcuL3NyYy9zZXJ2aWNlcy9sb2dnZXInLCAoKSA9PiAoe1xuICBsb2dnZXI6IHtcbiAgICBpbmZvOiBqZXN0LmZuKCksXG4gICAgd2FybjogamVzdC5mbigpLFxuICAgIGVycm9yOiBqZXN0LmZuKCksXG4gICAgZGVidWc6IGplc3QuZm4oKSxcbiAgICBzZWN1cml0eTogamVzdC5mbigpLFxuICAgIGJ1ZmZlck9mZmxpbmVMb2c6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICAgIGZsdXNoT2ZmbGluZUxvZ3M6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICAgIHNldFVzZXJJbmZvOiBqZXN0LmZuKCksXG4gICAgY2xlYXJVc2VySW5mbzogamVzdC5mbigpLFxuICAgIGdldFNlc3Npb25JZDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgndGVzdC1zZXNzaW9uJyksXG4gICAgZGVzdHJveTogamVzdC5mbigpLFxuICB9XG59KSk7XG5cbi8vIEFsd2F5cyBsb2FkIGNvcmUgc2V0dXBcbmltcG9ydCAnLi9qZXN0LnNldHVwLmNvcmUnO1xuXG4vLyBMb2FkIGFsbCBtb2NrcyAtIG1vZHVsYXIgZmlsZXMgaGFuZGxlIGNvbmRpdGlvbmFsIGxvZ2ljIGludGVybmFsbHlcbi8vIFVzaW5nIHJlcXVpcmUgdG8gZW5zdXJlIHByb3BlciBsb2FkIG9yZGVyXG5yZXF1aXJlKCcuL2plc3Quc2V0dXAubW9ja3MubmF0aXZlJyk7XG5yZXF1aXJlKCcuL2plc3Quc2V0dXAubW9ja3MuZXhwbycpO1xucmVxdWlyZSgnLi9qZXN0LnNldHVwLm1vY2tzLm5hdmlnYXRpb24nKTtcbnJlcXVpcmUoJy4vamVzdC5zZXR1cC5tb2Nrcy5leHRlcm5hbCcpO1xuIl0sIm1hcHBpbmdzIjoiOztBQVlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzREFBc0QsQ0FBQztBQUdqRUQsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDOUIsSUFBTUMsRUFBRSxH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