{"version":3,"names":["_getJestObj","mock","useNavigation","mockNavigation","useUserIntent","intents","mockIntents","selectedIntent","isNavigating","selectIntent","mockSelectIntent","confirmIntent","mockConfirmIntent","isValidSelection","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_useUserIntentScreen","_require","jest","mockNavigate","fn","mockGoBack","navigate","goBack","id","title","description","describe","beforeEach","clearAllMocks","it","_renderHook","renderHook","useUserIntentScreen","result","expect","current","toHaveLength","toBe","_renderHook2","act","toHaveBeenCalledWith","default","_renderHook3","handleContinue","not","toHaveBeenCalled","mockResolvedValue","resetModules","_renderHook4","userIntent","_renderHook5","handleGoBack","toHaveBeenCalledTimes","mockRejectedValue","Error","_renderHook6","_renderHook7","toEqual","_renderHook8","_renderHook9","rerender","firstSelectIntent","firstHandleContinue","firstHandleGoBack"],"sources":["useUserIntentScreen.test.ts"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\nimport { renderHook, act, waitFor } from \"@testing-library/react-native\";\nimport { useUserIntentScreen } from \"../useUserIntentScreen\";\n\n// Mock navigation\nconst mockNavigate = jest.fn();\nconst mockGoBack = jest.fn();\nconst mockNavigation = {\n  navigate: mockNavigate,\n  goBack: mockGoBack,\n} as any;\n\njest.mock(\"@react-navigation/native\", () => ({\n  useNavigation: () => mockNavigation,\n}));\n\n// Mock domain hook\nconst mockSelectIntent = jest.fn();\nconst mockConfirmIntent = jest.fn();\n\nconst mockIntents = [\n  {\n    id: \"find_match\",\n    title: \"Find a Match\",\n    description: \"Find a pet for mine\",\n  },\n  {\n    id: \"find_home\",\n    title: \"Find a Home\",\n    description: \"Find a home for my pet\",\n  },\n  { id: \"browse\", title: \"Just Browsing\", description: \"Looking around\" },\n];\n\njest.mock(\"../../domains/onboarding/useUserIntent\", () => ({\n  useUserIntent: () => ({\n    intents: mockIntents,\n    selectedIntent: null,\n    isNavigating: false,\n    selectIntent: mockSelectIntent,\n    confirmIntent: mockConfirmIntent,\n    isValidSelection: false,\n  }),\n}));\n\ndescribe(\"useUserIntentScreen\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"should initialize with intents data\", () => {\n    const { result } = renderHook(() => useUserIntentScreen());\n\n    expect(result.current.intents).toHaveLength(3);\n    expect(result.current.selectedIntent).toBe(null);\n    expect(result.current.isNavigating).toBe(false);\n    expect(result.current.isValidSelection).toBe(false);\n  });\n\n  it(\"should provide intent selection function\", () => {\n    const { result } = renderHook(() => useUserIntentScreen());\n\n    act(() => {\n      result.current.selectIntent(\"find_match\");\n    });\n\n    expect(mockSelectIntent).toHaveBeenCalledWith(\"find_match\");\n  });\n\n  it(\"should not navigate when selection is invalid\", async () => {\n    const { result } = renderHook(() => useUserIntentScreen());\n\n    await act(async () => {\n      await result.current.handleContinue();\n    });\n\n    expect(mockConfirmIntent).not.toHaveBeenCalled();\n    expect(mockNavigate).not.toHaveBeenCalled();\n  });\n\n  it(\"should navigate when selection is valid\", async () => {\n    // Mock valid selection\n    jest.resetModules();\n    jest.mock(\"../../domains/onboarding/useUserIntent\", () => ({\n      useUserIntent: () => ({\n        intents: mockIntents,\n        selectedIntent: \"find_match\",\n        isNavigating: false,\n        selectIntent: mockSelectIntent,\n        confirmIntent: mockConfirmIntent.mockResolvedValue(\"find_match\"),\n        isValidSelection: true,\n      }),\n    }));\n\n    mockConfirmIntent.mockResolvedValue(\"find_match\");\n\n    const { result } = renderHook(() => useUserIntentScreen());\n\n    await act(async () => {\n      await result.current.handleContinue();\n    });\n\n    expect(mockConfirmIntent).toHaveBeenCalled();\n    expect(mockNavigate).toHaveBeenCalledWith(\"PetProfileSetup\", {\n      userIntent: \"find_match\",\n    });\n  });\n\n  it(\"should handle navigation back\", () => {\n    const { result } = renderHook(() => useUserIntentScreen());\n\n    act(() => {\n      result.current.handleGoBack();\n    });\n\n    expect(mockGoBack).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"should handle confirmation errors gracefully\", async () => {\n    // Mock valid selection but error on confirmation\n    jest.resetModules();\n    mockConfirmIntent.mockRejectedValue(new Error(\"Network error\"));\n\n    jest.mock(\"../../domains/onboarding/useUserIntent\", () => ({\n      useUserIntent: () => ({\n        intents: mockIntents,\n        selectedIntent: \"find_match\",\n        isNavigating: false,\n        selectIntent: mockSelectIntent,\n        confirmIntent: mockConfirmIntent,\n        isValidSelection: true,\n      }),\n    }));\n\n    const { result } = renderHook(() => useUserIntentScreen());\n\n    // Should not throw\n    await act(async () => {\n      await result.current.handleContinue();\n    });\n\n    expect(mockConfirmIntent).toHaveBeenCalled();\n    expect(mockNavigate).not.toHaveBeenCalled();\n  });\n\n  it(\"should provide all intents data\", () => {\n    const { result } = renderHook(() => useUserIntentScreen());\n\n    expect(result.current.intents).toEqual(mockIntents);\n    expect(result.current.intents[0].id).toBe(\"find_match\");\n    expect(result.current.intents[1].id).toBe(\"find_home\");\n    expect(result.current.intents[2].id).toBe(\"browse\");\n  });\n\n  it(\"should expose navigation state\", () => {\n    const { result } = renderHook(() => useUserIntentScreen());\n\n    expect(result.current.isNavigating).toBe(false);\n  });\n\n  it(\"should return stable function references\", () => {\n    const { result, rerender } = renderHook(() => useUserIntentScreen());\n\n    const firstSelectIntent = result.current.selectIntent;\n    const firstHandleContinue = result.current.handleContinue;\n    const firstHandleGoBack = result.current.handleGoBack;\n\n    rerender();\n\n    expect(result.current.selectIntent).toBe(firstSelectIntent);\n    expect(result.current.handleContinue).toBe(firstHandleContinue);\n    expect(result.current.handleGoBack).toBe(firstHandleGoBack);\n  });\n});\n"],"mappings":"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","ignoreList":[]}