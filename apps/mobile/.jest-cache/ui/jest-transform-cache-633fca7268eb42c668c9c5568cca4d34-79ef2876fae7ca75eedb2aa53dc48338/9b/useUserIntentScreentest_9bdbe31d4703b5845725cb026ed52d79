36f96cc5bd7597fe504924f7558401a2
"use strict";

_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: function useNavigation() {
      return mockNavigation;
    }
  };
});
_getJestObj().mock("../../domains/onboarding/useUserIntent", function () {
  return {
    useUserIntent: function useUserIntent() {
      return {
        intents: mockIntents,
        selectedIntent: null,
        isNavigating: false,
        selectIntent: mockSelectIntent,
        confirmIntent: mockConfirmIntent,
        isValidSelection: false
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useUserIntentScreen = require("../useUserIntentScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockGoBack = jest.fn();
var mockNavigation = {
  navigate: mockNavigate,
  goBack: mockGoBack
};
var mockSelectIntent = jest.fn();
var mockConfirmIntent = jest.fn();
var mockIntents = [{
  id: "find_match",
  title: "Find a Match",
  description: "Find a pet for mine"
}, {
  id: "find_home",
  title: "Find a Home",
  description: "Find a home for my pet"
}, {
  id: "browse",
  title: "Just Browsing",
  description: "Looking around"
}];
describe("useUserIntentScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("should initialize with intents data", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useUserIntentScreen.useUserIntentScreen)();
      }),
      result = _renderHook.result;
    expect(result.current.intents).toHaveLength(3);
    expect(result.current.selectedIntent).toBe(null);
    expect(result.current.isNavigating).toBe(false);
    expect(result.current.isValidSelection).toBe(false);
  });
  it("should provide intent selection function", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useUserIntentScreen.useUserIntentScreen)();
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.selectIntent("find_match");
    });
    expect(mockSelectIntent).toHaveBeenCalledWith("find_match");
  });
  it("should not navigate when selection is invalid", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useUserIntentScreen.useUserIntentScreen)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleContinue();
    }));
    expect(mockConfirmIntent).not.toHaveBeenCalled();
    expect(mockNavigate).not.toHaveBeenCalled();
  }));
  it("should navigate when selection is valid", (0, _asyncToGenerator2.default)(function* () {
    _getJestObj().mock("../../domains/onboarding/useUserIntent", function () {
      return {
        useUserIntent: function useUserIntent() {
          return {
            intents: mockIntents,
            selectedIntent: "find_match",
            isNavigating: false,
            selectIntent: mockSelectIntent,
            confirmIntent: mockConfirmIntent.mockResolvedValue("find_match"),
            isValidSelection: true
          };
        }
      };
    });
    jest.resetModules();
    mockConfirmIntent.mockResolvedValue("find_match");
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useUserIntentScreen.useUserIntentScreen)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleContinue();
    }));
    expect(mockConfirmIntent).toHaveBeenCalled();
    expect(mockNavigate).toHaveBeenCalledWith("PetProfileSetup", {
      userIntent: "find_match"
    });
  }));
  it("should handle navigation back", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useUserIntentScreen.useUserIntentScreen)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.handleGoBack();
    });
    expect(mockGoBack).toHaveBeenCalledTimes(1);
  });
  it("should handle confirmation errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    _getJestObj().mock("../../domains/onboarding/useUserIntent", function () {
      return {
        useUserIntent: function useUserIntent() {
          return {
            intents: mockIntents,
            selectedIntent: "find_match",
            isNavigating: false,
            selectIntent: mockSelectIntent,
            confirmIntent: mockConfirmIntent,
            isValidSelection: true
          };
        }
      };
    });
    jest.resetModules();
    mockConfirmIntent.mockRejectedValue(new Error("Network error"));
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useUserIntentScreen.useUserIntentScreen)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleContinue();
    }));
    expect(mockConfirmIntent).toHaveBeenCalled();
    expect(mockNavigate).not.toHaveBeenCalled();
  }));
  it("should provide all intents data", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useUserIntentScreen.useUserIntentScreen)();
      }),
      result = _renderHook7.result;
    expect(result.current.intents).toEqual(mockIntents);
    expect(result.current.intents[0].id).toBe("find_match");
    expect(result.current.intents[1].id).toBe("find_home");
    expect(result.current.intents[2].id).toBe("browse");
  });
  it("should expose navigation state", function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useUserIntentScreen.useUserIntentScreen)();
      }),
      result = _renderHook8.result;
    expect(result.current.isNavigating).toBe(false);
  });
  it("should return stable function references", function () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useUserIntentScreen.useUserIntentScreen)();
      }),
      result = _renderHook9.result,
      rerender = _renderHook9.rerender;
    var firstSelectIntent = result.current.selectIntent;
    var firstHandleContinue = result.current.handleContinue;
    var firstHandleGoBack = result.current.handleGoBack;
    rerender();
    expect(result.current.selectIntent).toBe(firstSelectIntent);
    expect(result.current.handleContinue).toBe(firstHandleContinue);
    expect(result.current.handleGoBack).toBe(firstHandleGoBack);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,