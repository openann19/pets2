477b0b1dd95be30f9faccd9f9925c1cd
"use strict";

_getJestObj().mock("react-native", function () {
  return {
    Alert: {
      alert: jest.fn()
    }
  };
});
_getJestObj().mock("expo-haptics", function () {
  return {
    selectionAsync: jest.fn(),
    impactAsync: jest.fn(),
    notificationAsync: jest.fn()
  };
});
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useAdvancedFiltersScreen = require("../useAdvancedFiltersScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("useAdvancedFiltersScreen", function () {
  describe("Initial State", function () {
    it("should initialize with default filters", function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useAdvancedFiltersScreen.useAdvancedFiltersScreen)();
        }),
        result = _renderHook.result;
      expect(result.current.filters).toHaveLength(16);
      expect(result.current.filters[0].id).toBe("neutered");
    });
  });
  describe("toggleFilter", function () {
    it("should toggle filter value", function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdvancedFiltersScreen.useAdvancedFiltersScreen)();
        }),
        result = _renderHook2.result;
      var initialValue = result.current.filters[0].value;
      (0, _reactNative.act)(function () {
        result.current.toggleFilter("neutered");
      });
      expect(result.current.filters[0].value).toBe(!initialValue);
    });
  });
  describe("resetFilters", function () {
    it("should show confirmation alert", function () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdvancedFiltersScreen.useAdvancedFiltersScreen)();
        }),
        result = _renderHook3.result;
      (0, _reactNative.act)(function () {
        result.current.resetFilters();
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Reset Filters", "Are you sure you want to reset all advanced filters?", expect.any(Array));
    });
  });
  describe("getFiltersByCategory", function () {
    it("should return filters for a specific category", function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdvancedFiltersScreen.useAdvancedFiltersScreen)();
        }),
        result = _renderHook4.result;
      var characteristics = result.current.getFiltersByCategory("characteristics");
      expect(characteristics).toHaveLength(4);
      characteristics.forEach(function (filter) {
        expect(filter.category).toBe("characteristics");
      });
    });
  });
  describe("saveFilters", function () {
    it("should save filters and show success alert", function () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useAdvancedFiltersScreen.useAdvancedFiltersScreen)();
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        result.current.saveFilters();
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Success", "Advanced filters saved successfully!");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,