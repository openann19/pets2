c6ca485040a9bf3859eae0a79ca7b487
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerReanimatedError = exports.ReanimatedError = void 0;
exports.registerWorkletStackDetails = registerWorkletStackDetails;
exports.reportFatalErrorOnJS = reportFatalErrorOnJS;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _worklet_15143574143250_init_data = {
  code: "function ReanimatedError(message) {\n  const prefix = '[Reanimated]';\n  const errorInstance = new Error(message ? prefix + \" \" + message : prefix);\n  errorInstance.name = 'ReanimatedError';\n  return errorInstance;\n}",
  location: "/home/ben/Downloads/pets-fresh/node_modules/react-native-reanimated/src/errors.ts",
  sourceMap: "{\"version\":3,\"names\":[\"ReanimatedError\",\"message\",\"prefix\",\"errorInstance\",\"Error\",\"name\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/node_modules/react-native-reanimated/src/errors.ts\"],\"mappings\":\"AAaE,SAAAA,eAASA,CAAgBC,OAAA,EAAgB;EAEvC,MAAMC,MAAM,GAAG,cAAc;EAC7B,MAAMC,aAAa,GAAG,IAAIC,KAAK,CAACH,OAAO,GAAMC,MAAM,SAAID,OAAO,GAAKC,MAAM,CAAC;EAC1EC,aAAa,CAACE,IAAI,GAAG,iBAAiB;EACtC,OAAOF,aAAa;AACtB\",\"ignoreList\":[]}"
};
var ReanimatedErrorConstructor = exports.ReanimatedError = function () {
  var _e = [new global.Error(), 1, -27];
  var _f = function _f(message) {
    var prefix = '[Reanimated]';
    var errorInstance = new Error(message ? `${prefix} ${message}` : prefix);
    errorInstance.name = 'ReanimatedError';
    return errorInstance;
  };
  _f._closure = {};
  _f.__initData = _worklet_15143574143250_init_data;
  _f.__workletHash = 15143574143250;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var _worklet_8478724881381_init_data = {
  code: "function registerReanimatedError() {\n  const {\n    ReanimatedErrorConstructor\n  } = this._closure;\n  if (!_WORKLET) {\n    throw new Error('[Reanimated] registerReanimatedError() must be called on Worklet runtime');\n  }\n  global.ReanimatedError = ReanimatedErrorConstructor;\n}",
  location: "/home/ben/Downloads/pets-fresh/node_modules/react-native-reanimated/src/errors.ts",
  sourceMap: "{\"version\":3,\"names\":[\"registerReanimatedError\",\"ReanimatedErrorConstructor\",\"_closure\",\"_WORKLET\",\"Error\",\"global\",\"ReanimatedError\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/node_modules/react-native-reanimated/src/errors.ts\"],\"mappings\":\"AA2BO,SAAAA,uBAASA,CAAA,EAAuB;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAErC,IAAI,CAACC,QAAQ,EAAE;IACb,MAAM,IAAIC,KAAK,CACb,0EACF,CAAC;EACH;EACCC,MAAM,CAA6BC,eAAe,GACjDL,0BAA0B;AAC9B\",\"ignoreList\":[]}"
};
var registerReanimatedError = exports.registerReanimatedError = function () {
  var _e = [new global.Error(), -2, -27];
  var _f = function _f() {
    if (!_WORKLET) {
      throw new Error('[Reanimated] registerReanimatedError() must be called on Worklet runtime');
    }
    global.ReanimatedError = ReanimatedErrorConstructor;
  };
  _f._closure = {
    ReanimatedErrorConstructor: ReanimatedErrorConstructor
  };
  _f.__initData = _worklet_8478724881381_init_data;
  _f.__workletHash = 8478724881381;
  _f.__stackDetails = _e;
  _f.__version = "3.3.0";
  return _f;
}();
var _workletStackDetails = new Map();
function registerWorkletStackDetails(hash, stackDetails) {
  _workletStackDetails.set(hash, stackDetails);
}
function getBundleOffset(error) {
  var _error$stack, _error$stack$split;
  var frame = (_error$stack = error.stack) == null ? void 0 : (_error$stack$split = _error$stack.split('\n')) == null ? void 0 : _error$stack$split[0];
  if (frame) {
    var parsedFrame = /@([^@]+):(\d+):(\d+)/.exec(frame);
    if (parsedFrame) {
      var _parsedFrame = (0, _slicedToArray2.default)(parsedFrame, 4),
        file = _parsedFrame[1],
        line = _parsedFrame[2],
        col = _parsedFrame[3];
      return [file, Number(line), Number(col)];
    }
  }
  return ['unknown', 0, 0];
}
function processStack(stack) {
  var workletStackEntries = stack.match(/worklet_(\d+):(\d+):(\d+)/g);
  var result = stack;
  workletStackEntries == null ? void 0 : workletStackEntries.forEach(function (match) {
    var _match$split$map = match.split(/:|_/).map(Number),
      _match$split$map2 = (0, _slicedToArray2.default)(_match$split$map, 4),
      hash = _match$split$map2[1],
      origLine = _match$split$map2[2],
      origCol = _match$split$map2[3];
    var errorDetails = _workletStackDetails.get(hash);
    if (!errorDetails) {
      return;
    }
    var _errorDetails = (0, _slicedToArray2.default)(errorDetails, 3),
      error = _errorDetails[0],
      lineOffset = _errorDetails[1],
      colOffset = _errorDetails[2];
    var _getBundleOffset = getBundleOffset(error),
      _getBundleOffset2 = (0, _slicedToArray2.default)(_getBundleOffset, 3),
      bundleFile = _getBundleOffset2[0],
      bundleLine = _getBundleOffset2[1],
      bundleCol = _getBundleOffset2[2];
    var line = origLine + bundleLine + lineOffset;
    var col = origCol + bundleCol + colOffset;
    result = result.replace(match, `${bundleFile}:${line}:${col}`);
  });
  return result;
}
function reportFatalErrorOnJS(_ref) {
  var message = _ref.message,
    stack = _ref.stack;
  var error = new Error();
  error.message = message;
  error.stack = stack ? processStack(stack) : undefined;
  error.name = 'ReanimatedError';
  error.jsEngine = 'reanimated';
  global.ErrorUtils.reportFatalError(error);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,