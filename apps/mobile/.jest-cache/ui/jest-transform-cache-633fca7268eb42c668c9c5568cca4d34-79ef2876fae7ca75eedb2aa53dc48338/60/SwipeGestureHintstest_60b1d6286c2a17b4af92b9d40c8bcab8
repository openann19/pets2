30ea10d61955eb2f2eeaf29fcb0d36c0
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    default: {
      getItem: mockGetItem,
      setItem: mockSetItem
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      error: jest.fn(),
      info: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _SwipeGestureHints = require("../SwipeGestureHints");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGetItem = jest.fn();
var mockSetItem = jest.fn();
describe('SwipeGestureHints', function () {
  var mockOnDismiss = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    mockGetItem.mockResolvedValue(null);
    mockSetItem.mockResolvedValue(undefined);
  });
  afterEach(function () {
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
    jest.clearAllMocks();
  });
  describe('Visibility Control', function () {
    it('should not render when initialDismissed is true', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeGestureHints.SwipeGestureHints, {
          initialDismissed: true
        })),
        queryByText = _render.queryByText;
      expect(queryByText('Swipe left to pass')).toBeNull();
    });
    it('should render when initialDismissed is false', function () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeGestureHints.SwipeGestureHints, {
          initialDismissed: false
        })),
        getByText = _render2.getByText;
      expect(getByText('Swipe left to pass')).toBeTruthy();
      expect(getByText('Swipe right to like')).toBeTruthy();
      expect(getByText('Swipe up to super like')).toBeTruthy();
    });
    it('should display dismiss button when visible', function () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeGestureHints.SwipeGestureHints, {
          initialDismissed: false
        })),
        getByTestId = _render3.getByTestId;
      expect(getByTestId('dismiss-button')).toBeTruthy();
    });
  });
  describe('Storage Integration', function () {
    it('should check AsyncStorage on mount', function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeGestureHints.SwipeGestureHints, {}));
      (0, _reactNative.act)(function () {
        jest.runAllTicks();
      });
      expect(mockGetItem).toHaveBeenCalledWith(_SwipeGestureHints.HINTS_STORAGE_KEY);
    });
  });
  describe('Manual Dismiss', function () {
    it('should call onDismiss when button is pressed', function () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeGestureHints.SwipeGestureHints, {
          onDismiss: mockOnDismiss,
          initialDismissed: false
        })),
        getByTestId = _render4.getByTestId;
      _reactNative.fireEvent.press(getByTestId('dismiss-button'));
      (0, _reactNative.act)(function () {
        jest.runAllTicks();
      });
      expect(mockSetItem).toHaveBeenCalledWith(_SwipeGestureHints.HINTS_STORAGE_KEY, 'true');
    });
    it('should not throw when onDismiss is not provided', function () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeGestureHints.SwipeGestureHints, {
          initialDismissed: false
        })),
        getByTestId = _render5.getByTestId;
      var button = getByTestId('dismiss-button');
      expect(function () {
        return _reactNative.fireEvent.press(button);
      }).not.toThrow();
      (0, _reactNative.act)(function () {
        jest.runAllTicks();
      });
      expect(mockSetItem).toHaveBeenCalledWith(_SwipeGestureHints.HINTS_STORAGE_KEY, 'true');
    });
    it('should persist dismissal to AsyncStorage', function () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeGestureHints.SwipeGestureHints, {
          initialDismissed: false
        })),
        getByTestId = _render6.getByTestId;
      _reactNative.fireEvent.press(getByTestId('dismiss-button'));
      (0, _reactNative.act)(function () {
        jest.runAllTicks();
      });
      expect(mockSetItem).toHaveBeenCalledWith(_SwipeGestureHints.HINTS_STORAGE_KEY, 'true');
    });
    it('should handle rapid dismiss attempts', function () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeGestureHints.SwipeGestureHints, {
          initialDismissed: false
        })),
        getByTestId = _render7.getByTestId;
      var button = getByTestId('dismiss-button');
      _reactNative.fireEvent.press(button);
      (0, _reactNative.act)(function () {
        jest.runAllTicks();
      });
      expect(mockSetItem).toHaveBeenCalledTimes(1);
    });
  });
  describe('Auto Dismiss', function () {
    it('should schedule auto-dismiss timeout when not using initialDismissed', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_SwipeGestureHints.SwipeGestureHints, {
          initialDismissed: false
        })),
        unmount = _render8.unmount;
      unmount();
      expect(function () {}).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,