70d976b8d002bc0225a130abb2efbd5c
"use strict";

_getJestObj().mock("@react-native-async-storage/async-storage", function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useGDPRStatus = require("../useGDPRStatus");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
describe("useGDPRStatus", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
  });
  it("should initialize with default state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useGDPRStatus.useGDPRStatus)();
      }),
      result = _renderHook.result;
    expect(result.current.status.isPending).toBe(false);
    expect(result.current.status.daysRemaining).toBe(null);
    expect(result.current.status.gracePeriodEndsAt).toBe(null);
    expect(result.current.status.canCancel).toBe(false);
    expect(result.current.isLoading).toBe(true);
  });
  it("should load pending deletion status", (0, _asyncToGenerator2.default)(function* () {
    mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify({
      deletionRequested: true,
      gracePeriodEndsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
      daysRemaining: 25
    }));
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useGDPRStatus.useGDPRStatus)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.status.isPending).toBe(true);
    expect(result.current.status.daysRemaining).toBe(25);
    expect(result.current.status.canCancel).toBe(true);
  }));
  it("should handle AsyncStorage errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    mockAsyncStorage.getItem.mockRejectedValue(new Error("Storage error"));
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useGDPRStatus.useGDPRStatus)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.status.isPending).toBe(false);
    expect(result.current.status.daysRemaining).toBe(null);
  }));
  it("should refresh status when called", (0, _asyncToGenerator2.default)(function* () {
    mockAsyncStorage.getItem.mockResolvedValue(null);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useGDPRStatus.useGDPRStatus)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify({
      deletionRequested: true,
      daysRemaining: 15
    }));
    (0, _reactNative.act)(function () {
      result.current.refresh();
    });
    expect(result.current.isLoading).toBe(true);
    yield (0, _reactNative.waitFor)(function () {
      expect(result.current.isLoading).toBe(false);
    });
    expect(result.current.status.isPending).toBe(true);
    expect(result.current.status.daysRemaining).toBe(15);
  }));
  it("should return stable refresh function reference", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useGDPRStatus.useGDPRStatus)();
      }),
      result = _renderHook5.result;
    var firstRefresh = result.current.refresh;
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useGDPRStatus.useGDPRStatus)();
      }),
      result2 = _renderHook6.result;
    expect(result.current.refresh).toBe(firstRefresh);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,