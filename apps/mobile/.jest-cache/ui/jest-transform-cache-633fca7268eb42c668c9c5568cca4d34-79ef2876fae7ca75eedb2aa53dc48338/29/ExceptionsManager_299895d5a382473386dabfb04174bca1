82643c63ddb0020fe00706b767c212a0
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var SyntheticError = function (_Error) {
  function SyntheticError() {
    var _this;
    (0, _classCallCheck2.default)(this, SyntheticError);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, SyntheticError, [].concat(args));
    _this.name = '';
    return _this;
  }
  (0, _inherits2.default)(SyntheticError, _Error);
  return (0, _createClass2.default)(SyntheticError);
}((0, _wrapNativeSuper2.default)(Error));
var userExceptionDecorator;
var inUserExceptionDecorator = false;
var decoratedExtraDataKey = Symbol('decoratedExtraDataKey');
function unstable_setExceptionDecorator(exceptionDecorator) {
  userExceptionDecorator = exceptionDecorator;
}
function preprocessException(data) {
  if (userExceptionDecorator && !inUserExceptionDecorator) {
    inUserExceptionDecorator = true;
    try {
      return userExceptionDecorator(data);
    } catch (_unused) {} finally {
      inUserExceptionDecorator = false;
    }
  }
  return data;
}
var exceptionID = 0;
function reportException(e, isFatal, reportToConsole) {
  var parseErrorStack = require("./Devtools/parseErrorStack");
  var stack = parseErrorStack(e == null ? void 0 : e.stack);
  var currentExceptionID = ++exceptionID;
  var originalMessage = e.message || '';
  var message = originalMessage;
  if (e.componentStack != null) {
    message += `\n\nThis error is located at:${e.componentStack}`;
  }
  var namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;
  if (!message.startsWith(namePrefix)) {
    message = namePrefix + message;
  }
  message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;
  var data = preprocessException({
    message: message,
    originalMessage: message === originalMessage ? null : originalMessage,
    name: e.name == null || e.name === '' ? null : e.name,
    componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,
    stack: stack,
    id: currentExceptionID,
    isFatal: isFatal,
    extraData: _objectSpread(_objectSpread({}, e[decoratedExtraDataKey]), {}, {
      jsEngine: e.jsEngine,
      rawStack: e.stack
    })
  });
  if (reportToConsole) {
    console.error(data.message);
  }
  if (__DEV__) {
    var LogBox = require("../LogBox/LogBox").default;
    LogBox.addException(_objectSpread(_objectSpread({}, data), {}, {
      isComponentError: !!e.isComponentError
    }));
  } else if (isFatal || e.type !== 'warn') {
    var NativeExceptionsManager = require("./NativeExceptionsManager").default;
    if (NativeExceptionsManager) {
      NativeExceptionsManager.reportException(data);
    }
  }
}
var inExceptionHandler = false;
function handleException(e, isFatal) {
  var error;
  if (e instanceof Error) {
    error = e;
  } else {
    error = new SyntheticError(e);
  }
  try {
    inExceptionHandler = true;
    reportException(error, isFatal, true);
  } finally {
    inExceptionHandler = false;
  }
}
function reactConsoleErrorHandler() {
  var _console;
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  (_console = console)._errorOriginal.apply(_console, args);
  if (!console.reportErrorsAsExceptions) {
    return;
  }
  if (inExceptionHandler) {
    return;
  }
  var error;
  var firstArg = args[0];
  if (firstArg != null && firstArg.stack) {
    error = firstArg;
  } else {
    var stringifySafe = require("../Utilities/stringifySafe").default;
    if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
      return;
    }
    var message = args.map(function (arg) {
      return typeof arg === 'string' ? arg : stringifySafe(arg);
    }).join(' ');
    error = new SyntheticError(message);
    error.name = 'console.error';
  }
  reportException(error, false, false);
}
function installConsoleErrorReporter() {
  if (console._errorOriginal) {
    return;
  }
  console._errorOriginal = console.error.bind(console);
  console.error = reactConsoleErrorHandler;
  if (console.reportErrorsAsExceptions === undefined) {
    console.reportErrorsAsExceptions = true;
  }
}
module.exports = {
  decoratedExtraDataKey: decoratedExtraDataKey,
  handleException: handleException,
  installConsoleErrorReporter: installConsoleErrorReporter,
  SyntheticError: SyntheticError,
  unstable_setExceptionDecorator: unstable_setExceptionDecorator
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfY3JlYXRlQ2xhc3MyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfaW5oZXJpdHMyIiwiX3dyYXBOYXRpdmVTdXBlcjIiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jYWxsU3VwZXIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiU3ludGhldGljRXJyb3IiLCJfRXJyb3IiLCJfdGhpcyIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwibmFtZSIsIkVycm9yIiwidXNlckV4Y2VwdGlvbkRlY29yYXRvciIsImluVXNlckV4Y2VwdGlvbkRlY29yYXRvciIsImRlY29yYXRlZEV4dHJhRGF0YUtleSIsIlN5bWJvbCIsInVuc3RhYmxlX3NldEV4Y2VwdGlvbkRlY29yYXRvciIsImV4Y2VwdGlvbkRlY29yYXRvciIsInByZXByb2Nlc3NFeGNlcHRpb24iLCJkYXRhIiwiX3VudXNlZCIsImV4Y2VwdGlvbklEIiwicmVwb3J0RXhjZXB0aW9uIiwiaXNGYXRhbCIsInJlcG9ydFRvQ29uc29sZSIsInBhcnNlRXJyb3JTdGFjayIsInN0YWNrIiwiY3VycmVudEV4Y2VwdGlvbklEIiwib3JpZ2luYWxNZXNzYWdlIiwibWVzc2FnZSIsImNvbXBvbmVudFN0YWNrIiwibmFtZVByZWZpeCIsInN0YXJ0c1dpdGgiLCJqc0VuZ2luZSIsImlkIiwiZXh0cmFEYXRhIiwicmF3U3RhY2siLCJjb25zb2xlIiwiZXJyb3IiLCJfX0RFVl9fIiwiTG9nQm94IiwiYWRkRXhjZXB0aW9uIiwiaXNDb21wb25lbnRFcnJvciIsInR5cGUiLCJOYXRpdmVFeGNlcHRpb25zTWFuYWdlciIsImluRXhjZXB0aW9uSGFuZGxlciIsImhhbmRsZUV4Y2VwdGlvbiIsInJlYWN0Q29uc29sZUVycm9ySGFuZGxlciIsIl9jb25zb2xlIiwiX2xlbjIiLCJfa2V5MiIsIl9lcnJvck9yaWdpbmFsIiwicmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zIiwiZmlyc3RBcmciLCJzdHJpbmdpZnlTYWZlIiwibWFwIiwiYXJnIiwiam9pbiIsImluc3RhbGxDb25zb2xlRXJyb3JSZXBvcnRlciIsImJpbmQiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRXhjZXB0aW9uc01hbmFnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge0V4dGVuZGVkRXJyb3J9IGZyb20gJy4vRXh0ZW5kZWRFcnJvcic7XG5pbXBvcnQgdHlwZSB7RXhjZXB0aW9uRGF0YX0gZnJvbSAnLi9OYXRpdmVFeGNlcHRpb25zTWFuYWdlcic7XG5cbmNsYXNzIFN5bnRoZXRpY0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBuYW1lOiBzdHJpbmcgPSAnJztcbn1cblxudHlwZSBFeGNlcHRpb25EZWNvcmF0b3IgPSBFeGNlcHRpb25EYXRhID0+IEV4Y2VwdGlvbkRhdGE7XG5cbmxldCB1c2VyRXhjZXB0aW9uRGVjb3JhdG9yOiA/RXhjZXB0aW9uRGVjb3JhdG9yO1xubGV0IGluVXNlckV4Y2VwdGlvbkRlY29yYXRvciA9IGZhbHNlO1xuXG4vLyBUaGlzIFN5bWJvbCBpcyB1c2VkIHRvIGRlY29yYXRlIGFuIEV4dGVuZGVkRXJyb3Igd2l0aCBleHRyYSBkYXRhIGluIHNlbGVjdCB1c2VjYXNlcy5cbi8vIE5vdGUgdGhhdCBkYXRhIHBhc3NlZCB1c2luZyB0aGlzIG1ldGhvZCBzaG91bGQgYmUgc3RyaWN0bHkgY29udGFpbmVkLFxuLy8gYXMgZGF0YSB0aGF0J3Mgbm90IHNlcmlhbGl6YWJsZS90b28gbGFyZ2UgbWF5IGNhdXNlIGlzc3VlcyB3aXRoIHBhc3NpbmcgdGhlIGVycm9yIHRvIHRoZSBuYXRpdmUgY29kZS5cbmNvbnN0IGRlY29yYXRlZEV4dHJhRGF0YUtleTogc3ltYm9sID0gU3ltYm9sKCdkZWNvcmF0ZWRFeHRyYURhdGFLZXknKTtcblxuLyoqXG4gKiBBbGxvd3MgdGhlIGFwcCB0byBhZGQgaW5mb3JtYXRpb24gdG8gdGhlIGV4Y2VwdGlvbiByZXBvcnQgYmVmb3JlIGl0IGlzIHNlbnRcbiAqIHRvIG5hdGl2ZS4gVGhpcyBBUEkgaXMgbm90IGZpbmFsLlxuICovXG5cbmZ1bmN0aW9uIHVuc3RhYmxlX3NldEV4Y2VwdGlvbkRlY29yYXRvcihcbiAgZXhjZXB0aW9uRGVjb3JhdG9yOiA/RXhjZXB0aW9uRGVjb3JhdG9yLFxuKSB7XG4gIHVzZXJFeGNlcHRpb25EZWNvcmF0b3IgPSBleGNlcHRpb25EZWNvcmF0b3I7XG59XG5cbmZ1bmN0aW9uIHByZXByb2Nlc3NFeGNlcHRpb24oZGF0YTogRXhjZXB0aW9uRGF0YSk6IEV4Y2VwdGlvbkRhdGEge1xuICBpZiAodXNlckV4Y2VwdGlvbkRlY29yYXRvciAmJiAhaW5Vc2VyRXhjZXB0aW9uRGVjb3JhdG9yKSB7XG4gICAgaW5Vc2VyRXhjZXB0aW9uRGVjb3JhdG9yID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHVzZXJFeGNlcHRpb25EZWNvcmF0b3IoZGF0YSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBGYWxsIHRocm91Z2hcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaW5Vc2VyRXhjZXB0aW9uRGVjb3JhdG9yID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEhhbmRsZXMgdGhlIGRldmVsb3Blci12aXNpYmxlIGFzcGVjdCBvZiBlcnJvcnMgYW5kIGV4Y2VwdGlvbnNcbiAqL1xubGV0IGV4Y2VwdGlvbklEID0gMDtcbmZ1bmN0aW9uIHJlcG9ydEV4Y2VwdGlvbihcbiAgZTogRXh0ZW5kZWRFcnJvcixcbiAgaXNGYXRhbDogYm9vbGVhbixcbiAgcmVwb3J0VG9Db25zb2xlOiBib29sZWFuLCAvLyBvbmx5IHRydWUgd2hlbiBjb21pbmcgZnJvbSBoYW5kbGVFeGNlcHRpb247IHRoZSBlcnJvciBoYXMgbm90IHlldCBiZWVuIGxvZ2dlZFxuKSB7XG4gIGNvbnN0IHBhcnNlRXJyb3JTdGFjayA9IHJlcXVpcmUoJy4vRGV2dG9vbHMvcGFyc2VFcnJvclN0YWNrJyk7XG4gIGNvbnN0IHN0YWNrID0gcGFyc2VFcnJvclN0YWNrKGU/LnN0YWNrKTtcbiAgY29uc3QgY3VycmVudEV4Y2VwdGlvbklEID0gKytleGNlcHRpb25JRDtcbiAgY29uc3Qgb3JpZ2luYWxNZXNzYWdlID0gZS5tZXNzYWdlIHx8ICcnO1xuICBsZXQgbWVzc2FnZSA9IG9yaWdpbmFsTWVzc2FnZTtcbiAgaWYgKGUuY29tcG9uZW50U3RhY2sgIT0gbnVsbCkge1xuICAgIG1lc3NhZ2UgKz0gYFxcblxcblRoaXMgZXJyb3IgaXMgbG9jYXRlZCBhdDoke2UuY29tcG9uZW50U3RhY2t9YDtcbiAgfVxuICBjb25zdCBuYW1lUHJlZml4ID0gZS5uYW1lID09IG51bGwgfHwgZS5uYW1lID09PSAnJyA/ICcnIDogYCR7ZS5uYW1lfTogYDtcblxuICBpZiAoIW1lc3NhZ2Uuc3RhcnRzV2l0aChuYW1lUHJlZml4KSkge1xuICAgIG1lc3NhZ2UgPSBuYW1lUHJlZml4ICsgbWVzc2FnZTtcbiAgfVxuXG4gIG1lc3NhZ2UgPVxuICAgIGUuanNFbmdpbmUgPT0gbnVsbCA/IG1lc3NhZ2UgOiBgJHttZXNzYWdlfSwganMgZW5naW5lOiAke2UuanNFbmdpbmV9YDtcblxuICBjb25zdCBkYXRhID0gcHJlcHJvY2Vzc0V4Y2VwdGlvbih7XG4gICAgbWVzc2FnZSxcbiAgICBvcmlnaW5hbE1lc3NhZ2U6IG1lc3NhZ2UgPT09IG9yaWdpbmFsTWVzc2FnZSA/IG51bGwgOiBvcmlnaW5hbE1lc3NhZ2UsXG4gICAgbmFtZTogZS5uYW1lID09IG51bGwgfHwgZS5uYW1lID09PSAnJyA/IG51bGwgOiBlLm5hbWUsXG4gICAgY29tcG9uZW50U3RhY2s6XG4gICAgICB0eXBlb2YgZS5jb21wb25lbnRTdGFjayA9PT0gJ3N0cmluZycgPyBlLmNvbXBvbmVudFN0YWNrIDogbnVsbCxcbiAgICBzdGFjayxcbiAgICBpZDogY3VycmVudEV4Y2VwdGlvbklELFxuICAgIGlzRmF0YWwsXG4gICAgZXh0cmFEYXRhOiB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdIHdlIGNhbid0IGRlZmluZSBhIHR5cGUgd2l0aCBhIFN5bWJvbC1rZXllZCBmaWVsZCBpbiBmbG93XG4gICAgICAuLi5lW2RlY29yYXRlZEV4dHJhRGF0YUtleV0sXG4gICAgICBqc0VuZ2luZTogZS5qc0VuZ2luZSxcbiAgICAgIHJhd1N0YWNrOiBlLnN0YWNrLFxuICAgIH0sXG4gIH0pO1xuXG4gIGlmIChyZXBvcnRUb0NvbnNvbGUpIHtcbiAgICAvLyB3ZSBmZWVkIGJhY2sgaW50byBjb25zb2xlLmVycm9yLCB0byBtYWtlIHN1cmUgYW55IG1ldGhvZHMgdGhhdCBhcmVcbiAgICAvLyBtb25rZXkgcGF0Y2hlZCBvbiB0b3Agb2YgY29uc29sZS5lcnJvciBhcmUgY2FsbGVkIHdoZW4gY29taW5nIGZyb21cbiAgICAvLyBoYW5kbGVFeGNlcHRpb25cbiAgICBjb25zb2xlLmVycm9yKGRhdGEubWVzc2FnZSk7XG4gIH1cblxuICBpZiAoX19ERVZfXykge1xuICAgIGNvbnN0IExvZ0JveCA9IHJlcXVpcmUoJy4uL0xvZ0JveC9Mb2dCb3gnKS5kZWZhdWx0O1xuICAgIExvZ0JveC5hZGRFeGNlcHRpb24oe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGlzQ29tcG9uZW50RXJyb3I6ICEhZS5pc0NvbXBvbmVudEVycm9yLFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzRmF0YWwgfHwgZS50eXBlICE9PSAnd2FybicpIHtcbiAgICBjb25zdCBOYXRpdmVFeGNlcHRpb25zTWFuYWdlciA9XG4gICAgICByZXF1aXJlKCcuL05hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyJykuZGVmYXVsdDtcbiAgICBpZiAoTmF0aXZlRXhjZXB0aW9uc01hbmFnZXIpIHtcbiAgICAgIE5hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyLnJlcG9ydEV4Y2VwdGlvbihkYXRhKTtcbiAgICB9XG4gIH1cbn1cblxuZGVjbGFyZSB2YXIgY29uc29sZTogdHlwZW9mIGNvbnNvbGUgJiB7XG4gIF9lcnJvck9yaWdpbmFsOiB0eXBlb2YgY29uc29sZS5lcnJvcixcbiAgcmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zOiBib29sZWFuLFxuICAuLi5cbn07XG5cbi8vIElmIHdlIHRyaWdnZXIgY29uc29sZS5lcnJvciBfZnJvbV8gaGFuZGxlRXhjZXB0aW9uLFxuLy8gd2UgZG8gd2FudCB0byBtYWtlIHN1cmUgdGhhdCBjb25zb2xlLmVycm9yIGRvZXNuJ3QgdHJpZ2dlciBlcnJvciByZXBvcnRpbmcgYWdhaW5cbmxldCBpbkV4Y2VwdGlvbkhhbmRsZXIgPSBmYWxzZTtcblxuLyoqXG4gKiBMb2dzIGV4Y2VwdGlvbnMgdG8gdGhlIChuYXRpdmUpIGNvbnNvbGUgYW5kIGRpc3BsYXlzIHRoZW1cbiAqL1xuZnVuY3Rpb24gaGFuZGxlRXhjZXB0aW9uKGU6IG1peGVkLCBpc0ZhdGFsOiBib29sZWFuKSB7XG4gIGxldCBlcnJvcjogRXJyb3I7XG4gIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBlcnJvciA9IGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgcmVwb3J0aW5nIGVycm9ycyBjYXVzZWQgYnkgYHRocm93ICdzb21lIHN0cmluZydgXG4gICAgLy8gVW5mb3J0dW5hdGVseSB0aGVyZSBpcyBubyB3YXkgdG8gZmlndXJlIG91dCB0aGUgc3RhY2t0cmFjZSBpbiB0aGlzXG4gICAgLy8gY2FzZSwgc28gaWYgeW91IGVuZGVkIHVwIGhlcmUgdHJ5aW5nIHRvIHRyYWNlIGFuIGVycm9yLCBsb29rIGZvclxuICAgIC8vIGB0aHJvdyAnPGVycm9yIG1lc3NhZ2U+J2Agc29tZXdoZXJlIGluIHlvdXIgY29kZWJhc2UuXG4gICAgZXJyb3IgPSBuZXcgU3ludGhldGljRXJyb3IoZSk7XG4gIH1cbiAgdHJ5IHtcbiAgICBpbkV4Y2VwdGlvbkhhbmRsZXIgPSB0cnVlO1xuICAgIC8qICRGbG93Rml4TWVbY2xhc3Mtb2JqZWN0LXN1YnR5cGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvciB0aGlzXG4gICAgICogcGFyYW1ldGVycyAqL1xuICAgIHJlcG9ydEV4Y2VwdGlvbihlcnJvciwgaXNGYXRhbCwgLypyZXBvcnRUb0NvbnNvbGUqLyB0cnVlKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpbkV4Y2VwdGlvbkhhbmRsZXIgPSBmYWxzZTtcbiAgfVxufVxuXG4vKiAkRmxvd0ZpeE1lW21pc3NpbmctbG9jYWwtYW5ub3RdIFRoZSB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnkgRmxvdydzXG4gKiBMVEkgdXBkYXRlIGNvdWxkIG5vdCBiZSBhZGRlZCB2aWEgY29kZW1vZCAqL1xuZnVuY3Rpb24gcmVhY3RDb25zb2xlRXJyb3JIYW5kbGVyKC4uLmFyZ3MpIHtcbiAgLy8gYnViYmxlIHVwIHRvIGFueSBvcmlnaW5hbCBoYW5kbGVyc1xuICBjb25zb2xlLl9lcnJvck9yaWdpbmFsKC4uLmFyZ3MpO1xuICBpZiAoIWNvbnNvbGUucmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbkV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICAvLyBUaGUgZnVuZGFtZW50YWwgdHJpY2sgaGVyZSBpcyB0aGF0IGFyZSBtdWx0aXBsZSBlbnRyeSBwb2ludCB0byBsb2dnaW5nIGVycm9yczpcbiAgICAvLyAoc2VlIEQxOTc0MzA3NSBmb3IgbW9yZSBiYWNrZ3JvdW5kKVxuICAgIC8vXG4gICAgLy8gMS4gQW4gdW5jYXVnaHQgZXhjZXB0aW9uIGJlaW5nIGNhdWdodCBieSB0aGUgZ2xvYmFsIGhhbmRsZXJcbiAgICAvLyAyLiBBbiBlcnJvciBiZWluZyBsb2dnZWQgdGhyb3cgY29uc29sZS5lcnJvclxuICAgIC8vXG4gICAgLy8gSG93ZXZlciwgY29uc29sZS5lcnJvciBpcyBtb25rZXkgcGF0Y2hlZCBtdWx0aXBsZSB0aW1lczogYnkgdGhpcyBtb2R1bGUsIGFuZCBieSB0aGVcbiAgICAvLyBEZXZUb29scyBzZXR1cCB0aGF0IHNlbmRzIG1lc3NhZ2VzIHRvIE1ldHJvLlxuICAgIC8vIFRoZSBwYXRjaGluZyBvcmRlciBjYW5ub3QgYmUgcmVsaWVkIHVwb24uXG4gICAgLy9cbiAgICAvLyBTbywgc29tZSBzY2VuYXJpb3MgdGhhdCBhcmUgaGFuZGxlZCBieSB0aGlzIGZsYWc6XG4gICAgLy9cbiAgICAvLyBMb2dnaW5nIGFuIGVycm9yOlxuICAgIC8vIDEuIGNvbnNvbGUuZXJyb3IgY2FsbGVkIGZyb20gdXNlciBjb2RlXG4gICAgLy8gMi4gKHBvc3NpYmx5KSBhcnJpdmVzIF9maXJzdF8gYXQgRGV2VG9vbCBoYW5kbGVyLCBzZW5kIHRvIE1ldHJvXG4gICAgLy8gMy4gQnViYmxlcyB0byBoZXJlXG4gICAgLy8gNC4gZ29lcyBpbnRvIHJlcG9ydCBFeGNlcHRpb24uXG4gICAgLy8gNS4gc2hvdWxkIG5vdCB0cmlnZ2VyIGNvbnNvbGUuZXJyb3IgYWdhaW4sIHRvIGF2b2lkIGxvb3BpbmcgLyBsb2dnaW5nIHR3aWNlXG4gICAgLy8gNi4gc2hvdWxkIHN0aWxsIGJ1YmJsZSB1cCB0byBvcmlnaW5hbCBjb25zb2xlXG4gICAgLy8gICAgKHdoaWNoIG1pZ2h0IGVpdGhlciBiZSBjb25zb2xlLmxvZywgb3IgdGhlIERldlRvb2xzIGhhbmRsZXIgaW4gY2FzZSBpdCBwYXRjaGVkIF9lYXJsaWVyXyBhbmQgKDIpIGRpZG4ndCBoYXBwZW4pXG4gICAgLy9cbiAgICAvLyBUaHJvd2luZyBhbiB1bmNhdWdodCBleGNlcHRpb246XG4gICAgLy8gMS4gZXhjZXB0aW9uIHRocm93blxuICAgIC8vIDIuIHBpY2tlZCB1cCBieSBoYW5kbGVFeGNlcHRpb25cbiAgICAvLyAzLiBzaG91bGQgYmUgc2VudCB0byBjb25zb2xlLmVycm9yIChub3QgY29uc29sZS5fZXJyb3JPcmlnaW5hbCwgYXMgRGV2VG9vbHMgbWlnaHQgaGF2ZSBwYXRjaGVkIF9sYXRlcl8gYW5kIGl0IG5lZWRzIHRvIHNlbmQgaXQgdG8gTWV0cm8pXG4gICAgLy8gNC4gdGhhdCBfbWlnaHRfIGJ1YmJsZSBhZ2FpbiB0byB0aGUgYHJlYWN0Q29uc29sZUVycm9ySGFuZGxlYCBkZWZpbmVkIGhlcmVcbiAgICAvLyAgICAtPiBzaG91bGQgbm90IGhhbmRsZSBleGNlcHRpb24gX2FnYWluXywgdG8gYXZvaWQgbG9vcGluZyAvIHNob3dpbmcgdHdpY2UgKHRoaXMgY29kZSBicmFuY2gpXG4gICAgLy8gNS4gc2hvdWxkIHN0aWxsIGJ1YmJsZSB1cCB0byBvcmlnaW5hbCBjb25zb2xlICh3aGljaCBtaWdodCBlaXRoZXIgYmUgY29uc29sZS5sb2csIG9yIHRoZSBEZXZUb29scyBoYW5kbGVyIGluIGNhc2UgdGhhdCBvbmUgcGF0Y2hlZCBfZWFybGllcl8pXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGVycm9yO1xuXG4gIGNvbnN0IGZpcnN0QXJnID0gYXJnc1swXTtcbiAgaWYgKGZpcnN0QXJnPy5zdGFjaykge1xuICAgIC8vIHJlcG9ydEV4Y2VwdGlvbiB3aWxsIGNvbnNvbGUuZXJyb3IgdGhpcyB3aXRoIGhpZ2ggZW5vdWdoIGZpZGVsaXR5LlxuICAgIGVycm9yID0gZmlyc3RBcmc7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc3RyaW5naWZ5U2FmZSA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9zdHJpbmdpZnlTYWZlJykuZGVmYXVsdDtcbiAgICBpZiAodHlwZW9mIGZpcnN0QXJnID09PSAnc3RyaW5nJyAmJiBmaXJzdEFyZy5zdGFydHNXaXRoKCdXYXJuaW5nOiAnKSkge1xuICAgICAgLy8gUmVhY3Qgd2FybmluZ3MgdXNlIGNvbnNvbGUuZXJyb3Igc28gdGhhdCBhIHN0YWNrIHRyYWNlIGlzIHNob3duLCBidXRcbiAgICAgIC8vIHdlIGRvbid0IChjdXJyZW50bHkpIHdhbnQgdGhlc2UgdG8gc2hvdyBhIHJlZGJveFxuICAgICAgLy8gKE5vdGU6IExvZ2ljIGR1cGxpY2F0ZWQgaW4gcG9seWZpbGxzL2NvbnNvbGUuanMuKVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlID0gYXJnc1xuICAgICAgLm1hcChhcmcgPT4gKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnID8gYXJnIDogc3RyaW5naWZ5U2FmZShhcmcpKSlcbiAgICAgIC5qb2luKCcgJyk7XG5cbiAgICBlcnJvciA9IG5ldyBTeW50aGV0aWNFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gJ2NvbnNvbGUuZXJyb3InO1xuICB9XG5cbiAgcmVwb3J0RXhjZXB0aW9uKFxuICAgIC8qICRGbG93Rml4TWVbY2xhc3Mtb2JqZWN0LXN1YnR5cGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvciB0aGlzXG4gICAgICogcGFyYW1ldGVycyAqL1xuICAgIGVycm9yLFxuICAgIGZhbHNlLCAvLyBpc0ZhdGFsXG4gICAgZmFsc2UsIC8vIHJlcG9ydFRvQ29uc29sZVxuICApO1xufVxuXG4vKipcbiAqIFNob3dzIGEgcmVkYm94IHdpdGggc3RhY2t0cmFjZSBmb3IgYWxsIGNvbnNvbGUuZXJyb3IgbWVzc2FnZXMuICBEaXNhYmxlIGJ5XG4gKiBzZXR0aW5nIGBjb25zb2xlLnJlcG9ydEVycm9yc0FzRXhjZXB0aW9ucyA9IGZhbHNlO2AgaW4geW91ciBhcHAuXG4gKi9cbmZ1bmN0aW9uIGluc3RhbGxDb25zb2xlRXJyb3JSZXBvcnRlcigpIHtcbiAgLy8gRW5hYmxlIHJlcG9ydEVycm9yc0FzRXhjZXB0aW9uc1xuICBpZiAoY29uc29sZS5fZXJyb3JPcmlnaW5hbCkge1xuICAgIHJldHVybjsgLy8gYWxyZWFkeSBpbnN0YWxsZWRcbiAgfVxuICAvLyBGbG93IGRvZXNuJ3QgbGlrZSBpdCB3aGVuIHlvdSBzZXQgYXJiaXRyYXJ5IHZhbHVlcyBvbiBhIGdsb2JhbCBvYmplY3RcbiAgY29uc29sZS5fZXJyb3JPcmlnaW5hbCA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcbiAgY29uc29sZS5lcnJvciA9IHJlYWN0Q29uc29sZUVycm9ySGFuZGxlcjtcbiAgaWYgKGNvbnNvbGUucmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBJbmRpdmlkdWFsIGFwcHMgY2FuIGRpc2FibGUgdGhpc1xuICAgIC8vIEZsb3cgZG9lc24ndCBsaWtlIGl0IHdoZW4geW91IHNldCBhcmJpdHJhcnkgdmFsdWVzIG9uIGEgZ2xvYmFsIG9iamVjdFxuICAgIGNvbnNvbGUucmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zID0gdHJ1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVjb3JhdGVkRXh0cmFEYXRhS2V5LFxuICBoYW5kbGVFeGNlcHRpb24sXG4gIGluc3RhbGxDb25zb2xlRXJyb3JSZXBvcnRlcixcbiAgU3ludGhldGljRXJyb3IsXG4gIHVuc3RhYmxlX3NldEV4Y2VwdGlvbkRlY29yYXRvcixcbn07XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSxhQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRyxnQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUksMkJBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLGdCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSxVQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTyxpQkFBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQVEsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9B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