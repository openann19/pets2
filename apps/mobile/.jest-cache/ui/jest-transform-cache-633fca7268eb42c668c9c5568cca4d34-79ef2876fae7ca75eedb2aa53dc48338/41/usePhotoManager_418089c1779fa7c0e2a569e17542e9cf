6567490532657afc32b6f5e37baabe69
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePhotoManager = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _react = require("react");
var _reactNative = require("react-native");
var _multipartUpload = require("../services/multipartUpload");
var _core = require("@pawfectmatch/core");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var usePhotoManager = exports.usePhotoManager = function usePhotoManager() {
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    photos = _useState2[0],
    setPhotos = _useState2[1];
  var pickImage = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),
          status = _yield$ImagePicker$re.status;
        if (status !== "granted") {
          _reactNative.Alert.alert("Permission needed", "Please grant permission to access your photos");
          return;
        }
        var result = yield ImagePicker.launchImageLibraryAsync({
          mediaTypes: ImagePicker.MediaTypeOptions.Images,
          allowsEditing: true,
          aspect: [4, 3],
          quality: 0.8,
          allowsMultipleSelection: true,
          selectionLimit: 10 - photos.length
        });
        if (!result.canceled && result.assets.length > 0) {
          var newPhotos = result.assets.map(function (asset, index) {
            return {
              uri: asset.uri,
              type: asset.type || "image/jpeg",
              fileName: `pet-photo-${Date.now()}-${index}.jpg`,
              isPrimary: photos.length === 0 && index === 0,
              isUploading: false
            };
          });
          setPhotos(function (prev) {
            return [].concat((0, _toConsumableArray2.default)(prev), (0, _toConsumableArray2.default)(newPhotos));
          });
          yield uploadPhotos(newPhotos);
        }
      } catch (error) {
        _core.logger.error("Error picking images:", {
          error: error
        });
        _reactNative.Alert.alert("Error", "Failed to pick images. Please try again.");
      }
    });
    return function pickImage() {
      return _ref.apply(this, arguments);
    };
  }();
  var uploadPhotos = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (photosToUpload) {
      var _loop = function* _loop(photo) {
        try {
          setPhotos(function (prev) {
            var photoIndex = prev.findIndex(function (p) {
              return p.uri === photo.uri;
            });
            if (photoIndex === -1) return prev;
            return prev.map(function (p, i) {
              return i === photoIndex ? _objectSpread(_objectSpread({}, p), {}, {
                isUploading: true,
                error: undefined
              }) : p;
            });
          });
          var uploadResult = yield (0, _multipartUpload.multipartUpload)({
            fileUri: photo.uri,
            contentType: photo.type,
            onProgress: function onProgress(uploaded, total) {
              var percentage = Math.round(uploaded / total * 100);
              setPhotos(function (prev) {
                var photoIndex = prev.findIndex(function (p) {
                  return p.uri === photo.uri;
                });
                if (photoIndex === -1) return prev;
                return prev.map(function (p, i) {
                  return i === photoIndex ? _objectSpread(_objectSpread({}, p), {}, {
                    uploadProgress: {
                      uploaded: uploaded,
                      total: total,
                      percentage: percentage
                    }
                  }) : p;
                });
              });
            }
          });
          setPhotos(function (prev) {
            var photoIndex = prev.findIndex(function (p) {
              return p.uri === photo.uri;
            });
            if (photoIndex === -1) return prev;
            return prev.map(function (p, i) {
              return i === photoIndex ? _objectSpread(_objectSpread({}, p), {}, {
                isUploading: false,
                uploadedUrl: uploadResult.url,
                thumbnailUrl: uploadResult.thumbnails.webp,
                s3Key: uploadResult.key,
                uploadProgress: undefined
              }) : p;
            });
          });
          _core.logger.info("Photo uploaded successfully:", {
            photo: photo,
            url: uploadResult.url
          });
        } catch (error) {
          _core.logger.error("Error uploading photo:", {
            error: error,
            photo: photo.uri
          });
          setPhotos(function (prev) {
            var photoIndex = prev.findIndex(function (p) {
              return p.uri === photo.uri;
            });
            if (photoIndex === -1) return prev;
            return prev.map(function (p, i) {
              return i === photoIndex ? _objectSpread(_objectSpread({}, p), {}, {
                isUploading: false,
                error: "Upload failed"
              }) : p;
            });
          });
          _reactNative.Alert.alert("Upload Failed", `Failed to upload ${photo.fileName}. Please try again.`);
        }
      };
      for (var photo of photosToUpload) {
        yield* _loop(photo);
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), []);
  var removePhoto = function removePhoto(index) {
    setPhotos(function (prev) {
      var photoToRemove = prev[index];
      var newPhotos = prev.filter(function (_, i) {
        return i !== index;
      });
      if (photoToRemove != null && photoToRemove.isPrimary && newPhotos.length > 0) {
        var firstPhoto = newPhotos[0];
        if (firstPhoto) {
          firstPhoto.isPrimary = true;
        }
      }
      return newPhotos;
    });
  };
  var setPrimaryPhoto = function setPrimaryPhoto(index) {
    setPhotos(function (prev) {
      return prev.map(function (photo, i) {
        return _objectSpread(_objectSpread({}, photo), {}, {
          isPrimary: i === index
        });
      });
    });
  };
  var uploadPendingPhotos = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setPhotos(function (prev) {
      var pendingPhotos = prev.filter(function (p) {
        return !p.uploadedUrl && !p.isUploading && !p.error;
      });
      if (pendingPhotos.length > 0) {
        uploadPhotos(pendingPhotos).catch(function (error) {
          _core.logger.error("Error uploading pending photos:", {
            error: error
          });
        });
      }
      return prev;
    });
  }), [uploadPhotos]);
  return {
    photos: photos,
    pickImage: pickImage,
    removePhoto: removePhoto,
    setPrimaryPhoto: setPrimaryPhoto,
    uploadPendingPhotos: uploadPendingPhotos
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,