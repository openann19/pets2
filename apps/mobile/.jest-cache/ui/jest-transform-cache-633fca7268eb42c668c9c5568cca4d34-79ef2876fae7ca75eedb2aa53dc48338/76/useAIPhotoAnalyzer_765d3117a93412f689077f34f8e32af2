793e7366d2f762b18ed65859b9692abf
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAIPhotoAnalyzer = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var useAIPhotoAnalyzer = exports.useAIPhotoAnalyzer = function useAIPhotoAnalyzer() {
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedPhotos = _useState2[0],
    setSelectedPhotos = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    analysisResult = _useState4[0],
    setAnalysisResult = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isAnalyzing = _useState6[0],
    setIsAnalyzing = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    error = _useState8[0],
    setError = _useState8[1];
  var requestPermissions = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),
      status = _yield$ImagePicker$re.status;
    if (status !== "granted") {
      _reactNative.Alert.alert("Permission Required", "We need access to your photo library to analyze pet photos.", [{
        text: "OK"
      }]);
      return false;
    }
    return true;
  }), []);
  var pickImages = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var hasPermission = yield requestPermissions();
    if (!hasPermission) return;
    try {
      var result = yield ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsMultipleSelection: true,
        quality: 0.8,
        aspect: [4, 3]
      });
      if (!result.canceled && result.assets) {
        var newPhotos = result.assets.map(function (asset) {
          return asset.uri;
        });
        setSelectedPhotos(function (prev) {
          return [].concat((0, _toConsumableArray2.default)(prev), (0, _toConsumableArray2.default)(newPhotos)).slice(0, 5);
        });
        setError(null);
      }
    } catch (err) {
      _core.logger.error("Error picking images:", {
        error: err
      });
      setError("Failed to select images. Please try again.");
    }
  }), [requestPermissions]);
  var takePhoto = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var _yield$ImagePicker$re2 = yield ImagePicker.requestCameraPermissionsAsync(),
      status = _yield$ImagePicker$re2.status;
    if (status !== "granted") {
      _reactNative.Alert.alert("Permission Required", "We need access to your camera to take pet photos.", [{
        text: "OK"
      }]);
      return;
    }
    try {
      var result = yield ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        quality: 0.8,
        aspect: [4, 3]
      });
      if (!result.canceled && result.assets && result.assets[0]) {
        var newPhoto = result.assets[0].uri;
        setSelectedPhotos(function (prev) {
          return [].concat((0, _toConsumableArray2.default)(prev), [newPhoto]).slice(0, 5);
        });
        setError(null);
      }
    } catch (err) {
      _core.logger.error("Error taking photo:", {
        error: err
      });
      setError("Failed to take photo. Please try again.");
    }
  }), []);
  var analyzePhotos = (0, _react.useCallback)(function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (photoUris) {
      if (photoUris.length === 0) {
        var errorMsg = "Please select at least one photo to analyze.";
        setError(errorMsg);
        throw new Error(errorMsg);
      }
      setIsAnalyzing(true);
      setError(null);
      try {
        var _yield$import = yield Promise.resolve().then(function () {
            return _interopRequireWildcard(require("../../../services/api"));
          }),
          api = _yield$import.api;
        var result = yield api.ai.analyzePhotos(photoUris);
        setAnalysisResult(result);
        _core.logger.info("Photo analysis completed", {
          photoCount: photoUris.length,
          primaryBreed: result.breed_analysis.primary_breed,
          matchabilityScore: result.matchability_score
        });
        return result;
      } catch (err) {
        var errorMessage = err instanceof Error ? err.message : "Failed to analyze photos. Please try again.";
        setError(errorMessage);
        _core.logger.error("Photo analysis error:", {
          error: err,
          photoCount: photoUris.length
        });
        var mockResult = {
          breed_analysis: {
            primary_breed: "Golden Retriever",
            confidence: 0.92,
            secondary_breeds: [{
              breed: "Labrador Retriever",
              confidence: 0.15
            }, {
              breed: "Bernese Mountain Dog",
              confidence: 0.08
            }]
          },
          health_assessment: {
            age_estimate: 2.5,
            health_score: 88,
            recommendations: ["Regular exercise is important", "Maintain healthy weight", "Annual veterinary checkups"]
          },
          photo_quality: {
            overall_score: 85,
            lighting_score: 90,
            composition_score: 80,
            clarity_score: 88
          },
          matchability_score: 92,
          ai_insights: ["Friendly and approachable expression", "Well-groomed coat suggests good care", "Energetic pose indicates playful personality", "Clear, high-quality image enhances visibility"]
        };
        setAnalysisResult(mockResult);
        _core.logger.info("Using mock photo analysis result");
        return mockResult;
      } finally {
        setIsAnalyzing(false);
      }
    });
    return function (_x) {
      return _ref4.apply(this, arguments);
    };
  }(), []);
  var removePhoto = (0, _react.useCallback)(function (index) {
    setSelectedPhotos(function (prev) {
      return prev.filter(function (_, i) {
        return i !== index;
      });
    });
  }, []);
  var resetAnalysis = (0, _react.useCallback)(function () {
    setSelectedPhotos([]);
    setAnalysisResult(null);
    setError(null);
  }, []);
  var clearError = (0, _react.useCallback)(function () {
    setError(null);
  }, []);
  return {
    analyzePhotos: analyzePhotos,
    isAnalyzing: isAnalyzing,
    analysisResult: analysisResult,
    error: error,
    clearError: clearError,
    resetAnalysis: resetAnalysis,
    pickImages: pickImages,
    takePhoto: takePhoto,
    selectedPhotos: selectedPhotos,
    removePhoto: removePhoto,
    requestPermissions: requestPermissions
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,