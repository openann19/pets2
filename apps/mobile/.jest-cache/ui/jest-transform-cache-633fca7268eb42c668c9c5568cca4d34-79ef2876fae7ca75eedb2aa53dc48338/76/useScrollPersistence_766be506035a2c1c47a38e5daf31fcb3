61142154b5ebbe068a668a9a1bca98cd
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScrollPersistence = useScrollPersistence;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _logger = require("../../services/logger");
function useScrollPersistence(_ref) {
  var key = _ref.key,
    _ref$enabled = _ref.enabled,
    enabled = _ref$enabled === void 0 ? true : _ref$enabled;
  var listRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    initialOffset = _useState2[0],
    setInitialOffset = _useState2[1];
  var didRestoreRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    var restore = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        if (!enabled) return;
        try {
          var saved = yield _asyncStorage.default.getItem(key);
          if (saved) {
            var offset = Number(saved);
            setInitialOffset(offset);
          }
        } catch (error) {
          var err = error instanceof Error ? error : new Error(String(error));
          _logger.logger.error('Failed to restore scroll position', {
            key: key,
            error: err
          });
        }
      });
      return function restore() {
        return _ref2.apply(this, arguments);
      };
    }();
    void restore();
  }, [key, enabled]);
  (0, _react.useEffect)(function () {
    if (initialOffset > 0 && !didRestoreRef.current) {
      requestAnimationFrame(function () {
        var _listRef$current;
        (_listRef$current = listRef.current) == null ? void 0 : _listRef$current.scrollToOffset({
          offset: initialOffset,
          animated: false
        });
        didRestoreRef.current = true;
      });
    }
  }, [initialOffset]);
  var handleScroll = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (offset) {
      if (!enabled) return;
      try {
        yield _asyncStorage.default.setItem(key, String(offset));
      } catch (error) {
        var err = error instanceof Error ? error : new Error(String(error));
        _logger.logger.error('Failed to save scroll position', {
          key: key,
          error: err
        });
      }
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [key, enabled]);
  var restoreScroll = (0, _react.useCallback)(function () {
    didRestoreRef.current = false;
    void handleScroll(0);
  }, [handleScroll]);
  return {
    listRef: listRef,
    initialOffset: initialOffset,
    handleScroll: handleScroll,
    restoreScroll: restoreScroll
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FzeW5jU3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbG9nZ2VyIiwidXNlU2Nyb2xsUGVyc2lzdGVuY2UiLCJfcmVmIiwia2V5IiwiX3JlZiRlbmFibGVkIiwiZW5hYmxlZCIsImxpc3RSZWYiLCJ1c2VSZWYiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwiaW5pdGlhbE9mZnNldCIsInNldEluaXRpYWxPZmZzZXQiLCJkaWRSZXN0b3JlUmVmIiwidXNlRWZmZWN0IiwicmVzdG9yZSIsIl9yZWYyIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwic2F2ZWQiLCJBc3luY1N0b3JhZ2UiLCJnZXRJdGVtIiwib2Zmc2V0IiwiTnVtYmVyIiwiZXJyb3IiLCJlcnIiLCJFcnJvciIsIlN0cmluZyIsImxvZ2dlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiY3VycmVudCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9saXN0UmVmJGN1cnJlbnQiLCJzY3JvbGxUb09mZnNldCIsImFuaW1hdGVkIiwiaGFuZGxlU2Nyb2xsIiwidXNlQ2FsbGJhY2siLCJfcmVmMyIsInNldEl0ZW0iLCJfeCIsInJlc3RvcmVTY3JvbGwiXSwic291cmNlcyI6WyJ1c2VTY3JvbGxQZXJzaXN0ZW5jZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gXCJAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZVwiO1xuaW1wb3J0IHR5cGUgeyBGbGF0TGlzdCB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9sb2dnZXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBVc2VTY3JvbGxQZXJzaXN0ZW5jZU9wdGlvbnMge1xuICBrZXk6IHN0cmluZztcbiAgZW5hYmxlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU2Nyb2xsUGVyc2lzdGVuY2VSZXR1cm4ge1xuICBsaXN0UmVmOiBSZWFjdC5SZWZPYmplY3Q8RmxhdExpc3Q+O1xuICBpbml0aWFsT2Zmc2V0OiBudW1iZXI7XG4gIGhhbmRsZVNjcm9sbDogKG9mZnNldDogbnVtYmVyKSA9PiBQcm9taXNlPHZvaWQ+O1xuICByZXN0b3JlU2Nyb2xsOiAoKSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIEhvb2sgZm9yIHBlcnNpc3Rpbmcgc2Nyb2xsIHBvc2l0aW9uIHRvIEFzeW5jU3RvcmFnZVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCB7IGxpc3RSZWYsIGluaXRpYWxPZmZzZXQsIGhhbmRsZVNjcm9sbCwgcmVzdG9yZVNjcm9sbCB9ID0gdXNlU2Nyb2xsUGVyc2lzdGVuY2Uoe1xuICogICBrZXk6ICdtYXRjaGVzX3Njcm9sbCcsXG4gKiB9KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNjcm9sbFBlcnNpc3RlbmNlKHtcbiAga2V5LFxuICBlbmFibGVkID0gdHJ1ZSxcbn06IFVzZVNjcm9sbFBlcnNpc3RlbmNlT3B0aW9ucyk6IFVzZVNjcm9sbFBlcnNpc3RlbmNlUmV0dXJuIHtcbiAgY29uc3QgbGlzdFJlZiA9IHVzZVJlZjxGbGF0TGlzdD4obnVsbCk7XG4gIGNvbnN0IFtpbml0aWFsT2Zmc2V0LCBzZXRJbml0aWFsT2Zmc2V0XSA9IHVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IGRpZFJlc3RvcmVSZWYgPSB1c2VSZWYoZmFsc2UpO1xuXG4gIC8vIFJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uIG9uIG1vdW50XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgcmVzdG9yZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzYXZlZCA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgIGlmIChzYXZlZCkge1xuICAgICAgICAgIGNvbnN0IG9mZnNldCA9IE51bWJlcihzYXZlZCk7XG4gICAgICAgICAgc2V0SW5pdGlhbE9mZnNldChvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICBjb25zdCBlcnIgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uJywgeyBrZXksIGVycm9yOiBlcnIgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZvaWQgcmVzdG9yZSgpO1xuICB9LCBba2V5LCBlbmFibGVkXSk7XG5cbiAgLy8gU2Nyb2xsIHRvIGluaXRpYWwgcG9zaXRpb24gd2hlbiBkYXRhIGxvYWRzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGluaXRpYWxPZmZzZXQgPiAwICYmICFkaWRSZXN0b3JlUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGxpc3RSZWYuY3VycmVudD8uc2Nyb2xsVG9PZmZzZXQoe1xuICAgICAgICAgIG9mZnNldDogaW5pdGlhbE9mZnNldCxcbiAgICAgICAgICBhbmltYXRlZDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBkaWRSZXN0b3JlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbaW5pdGlhbE9mZnNldF0pO1xuXG4gIGNvbnN0IGhhbmRsZVNjcm9sbCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChvZmZzZXQ6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKCFlbmFibGVkKSByZXR1cm47XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IEFzeW5jU3RvcmFnZS5zZXRJdGVtKGtleSwgU3RyaW5nKG9mZnNldCkpO1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAgICAgY29uc3QgZXJyID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFN0cmluZyhlcnJvcikpO1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBzYXZlIHNjcm9sbCBwb3NpdGlvbicsIHsga2V5LCBlcnJvcjogZXJyIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2tleSwgZW5hYmxlZF0sXG4gICk7XG5cbiAgY29uc3QgcmVzdG9yZVNjcm9sbCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBkaWRSZXN0b3JlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB2b2lkIGhhbmRsZVNjcm9sbCgwKTtcbiAgfSwgW2hhbmRsZVNjcm9sbF0pO1xuXG4gIHJldHVybiB7XG4gICAgbGlzdFJlZixcbiAgICBpbml0aWFsT2Zmc2V0LFxuICAgIGhhbmRsZVNjcm9sbCxcbiAgICByZXN0b3JlU2Nyb2xsLFxuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFFQSxJQUFBRyxPQUFBLEdBQUFILE9BQUE7QUFzQk8sU0FBU0ksb0JBQW9CQSxDQUFBQyxJQUFBLEVBR3dCO0VBQUEsSUFGMURDLEdBQUcsR0FBQUQsSUFBQSxDQUFIQyxHQUFHO0lBQUFDLFlBQUEsR0FBQUYsSUFBQSxDQUNIRyxPQUFPO0lBQVBBLE9BQU8sR0FBQUQsWUFBQSxjQUFHLElBQUksR0FBQUEsWUFBQTtFQUVkLElBQU1FLE9BQU8sR0FBRyxJQUFBQyxhQUFNLEVBQVcsSUFBSSxDQUFDO0VBQ3RDLElBQUFDLFNBQUEsR0FBMEMsSUFBQUMsZUFBUSxFQUFTLENBQUMsQ0FBQztJQUFBQyxVQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQSxFQUFBSixTQUFBO0lBQXRESyxhQUFhLEdBQUFILFVBQUE7SUFBRUksZ0JBQWdCLEdBQUFKLFVBQUE7RUFDdEMsSUFBTUssYUFBYSxHQUFHLElBQUFSLGFBQU0sRUFBQyxLQUFLLENBQUM7RUFHbkMsSUFBQVMsZ0JBQVMsRUFBQyxZQUFNO0lBQ2QsSUFBTUMsT0FBTztNQUFBLElBQUFDLEtBQUEsT0FBQUMsa0JBQUEsQ0FBQVAsT0FBQSxFQUFHLGFBQVk7UUFDMUIsSUFBSSxDQUFDUCxPQUFPLEVBQUU7UUFFZCxJQUFJO1VBQ0YsSUFBTWUsS0FBSyxTQUFTQyxxQkFBWSxDQUFDQyxPQUFPLENBQUNuQixHQUFHLENBQUM7VUFDN0MsSUFBSWlCLEtBQUssRUFBRTtZQUNULElBQU1HLE1BQU0sR0FBR0MsTUFBTSxDQUFDSixLQUFLLENBQUM7WUFDNUJOLGdCQUFnQixDQUFDUyxNQUFNLENBQUM7VUFDMUI7UUFDRixDQUFDLENBQUMsT0FBT0UsS0FBYyxFQUFFO1VBQ3ZCLElBQU1DLEdBQUcsR0FBR0QsS0FBSyxZQUFZRSxLQUFLLEdBQUdGLEtBQUssR0FBRyxJQUFJRSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDLENBQUM7VUFDckVJLGNBQU0sQ0FBQ0osS0FBSyxDQUFDLG1DQUFtQyxFQUFFO1lBQUV0QixHQUFHLEVBQUhBLEdBQUc7WUFBRXNCLEtBQUssRUFBRUM7VUFBSSxDQUFDLENBQUM7UUFDeEU7TUFDRixDQUFDO01BQUEsZ0JBYktULE9BQU9BLENBQUE7UUFBQSxPQUFBQyxLQUFBLENBQUFZLEtBQUEsT0FBQUMsU0FBQTtNQUFBO0lBQUEsR0FhWjtJQUVELEtBQUtkLE9BQU8sQ0FBQyxDQUFDO0VBQ2hCLENBQUMsRUFBRSxDQUFDZCxHQUFHLEVBQUVFLE9BQU8sQ0FBQyxDQUFDO0VBR2xCLElBQUFXLGdCQUFTLEVBQUMsWUFBTTtJQUNkLElBQUlILGFBQWEsR0FBRyxDQUFDLElBQUksQ0FBQ0UsYUFBYSxDQUFDaUIsT0FBTyxFQUFFO01BQy9DQyxxQkFBcUIsQ0FBQyxZQUFNO1FBQUEsSUFBQUMsZ0JBQUE7UUFDMUIsQ0FBQUEsZ0JBQUEsR0FBQTVCLE9BQU8sQ0FBQzBCLE9BQU8scUJBQWZFLGdCQUFBLENBQWlCQyxjQUFjLENBQUM7VUFDOUJaLE1BQU0sRUFBRVYsYUFBYTtVQUNyQnVCLFFBQVEsRUFBRTtRQUNaLENBQUMsQ0FBQztRQUNGckIsYUFBYSxDQUFDaUIsT0FBTyxHQUFHLElBQUk7TUFDOUIsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUFDLEVBQUUsQ0FBQ25CLGFBQWEsQ0FBQyxDQUFDO0VBRW5CLElBQU13QixZQUFZLEdBQUcsSUFBQUMsa0JBQVc7SUFBQSxJQUFBQyxLQUFBLE9BQUFwQixrQkFBQSxDQUFBUCxPQUFBLEVBQzlCLFdBQU9XLE1BQWMsRUFBSztNQUN4QixJQUFJLENBQUNsQixPQUFPLEVBQUU7TUFFZCxJQUFJO1FBQ0YsTUFBTWdCLHFCQUFZLENBQUNtQixPQUFPLENBQUNyQyxHQUFHLEVBQUV5QixNQUFNLENBQUNMLE1BQU0sQ0FBQyxDQUFDO01BQ2pELENBQUMsQ0FBQyxPQUFPRSxLQUFjLEVBQUU7UUFDdkIsSUFBTUMsR0FBRyxHQUFHRCxLQUFLLFlBQVlFLEtBQUssR0FBR0YsS0FBSyxHQUFHLElBQUlFLEtBQUssQ0FBQ0MsTUFBTSxDQUFDSCxLQUFLLENBQUMsQ0FBQztRQUNyRUksY0FBTSxDQUFDSixLQUFLLENBQUMsZ0NBQWdDLEVBQUU7VUFBRXRCLEdBQUcsRUFBSEEsR0FBRztVQUFFc0IsS0FBSyxFQUFFQztRQUFJLENBQUMsQ0FBQztNQUNyRTtJQUNGLENBQUM7SUFBQSxpQkFBQWUsRUFBQTtNQUFBLE9BQUFGLEtBQUEsQ0FBQVQsS0FBQSxPQUFBQyxTQUFBO0lBQUE7RUFBQSxLQUNELENBQUM1QixHQUFHLEVBQUVFLE9BQU8sQ0FDZixDQUFDO0VBRUQsSUFBTXFDLGFBQWEsR0FBRyxJQUFBSixrQkFBVyxFQUFDLFlBQU07SUFDdEN2QixhQUFhLENBQUNpQixPQUFPLEdBQUcsS0FBSztJQUM3QixLQUFLSyxZQUFZLENBQUMsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsRUFBRSxDQUFDQSxZQUFZLENBQUMsQ0FBQztFQUVsQixPQUFPO0lBQ0wvQixPQUFPLEVBQVBBLE9BQU87SUFDUE8sYUFBYSxFQUFiQSxhQUFhO0lBQ2J3QixZQUFZLEVBQVpBLFlBQVk7SUFDWkssYUFBYSxFQUFiQTtFQUNGLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==