25614dc698bcbc865e73155875e19135
"use strict";

_getJestObj().mock('expo-image-picker');
_getJestObj().mock("../services/uploadHygiene");
_getJestObj().mock("../services/api", function () {
  return {
    api: {
      post: _globals.jest.fn(),
      get: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _usePhotoManagement = require("../hooks/usePhotoManagement");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _uploadHygiene = require("../services/uploadHygiene");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockImagePicker = ImagePicker;
var mockUploadHygieneService = _uploadHygiene.uploadHygieneService;
(0, _globals.describe)('usePhotoManagement', function () {
  var mockPetId = 'pet-123';
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: 'granted',
      granted: true,
      canAskAgain: true
    });
    mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
      cancelled: false,
      assets: [{
        uri: 'file://test-image.jpg',
        width: 1024,
        height: 768,
        fileSize: 204800,
        mimeType: 'image/jpeg',
        fileName: 'test-image.jpg'
      }]
    });
    mockUploadHygieneService.processImageForUpload.mockResolvedValue({
      uri: 'processed://test-image.jpg',
      width: 1024,
      height: 768,
      fileSize: 204800,
      mimeType: 'image/jpeg',
      metadata: {}
    });
    mockUploadHygieneService.uploadWithRetry.mockResolvedValue({
      uploadId: 'upload-123',
      status: 'approved',
      s3Key: 'uploads/test-key'
    });
  });
  (0, _globals.it)('should enforce 6 photo limit', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook.result;
    for (var i = 0; i < 6; i++) {
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.addPhoto();
      }));
    }
    (0, _globals.expect)(result.current.photos).toHaveLength(6);
    (0, _globals.expect)(result.current.canAddMorePhotos).toBe(false);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.photos).toHaveLength(6);
    (0, _globals.expect)(result.current.errors).toContain('Maximum 6 photos allowed');
  }));
  (0, _globals.it)('should auto-select first photo as primary', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.photos).toHaveLength(1);
    (0, _globals.expect)(result.current.photos[0].isPrimary).toBe(true);
    (0, _globals.expect)(result.current.primaryPhoto).toBe(result.current.photos[0]);
  }));
  (0, _globals.it)('should allow demoting current primary when new primary is selected', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.photos[0].isPrimary).toBe(true);
    (0, _globals.expect)(result.current.photos[1].isPrimary).toBe(false);
    (0, _reactNative.act)(function () {
      result.current.setPrimaryPhoto(result.current.photos[1].id);
    });
    (0, _globals.expect)(result.current.photos[0].isPrimary).toBe(false);
    (0, _globals.expect)(result.current.photos[1].isPrimary).toBe(true);
    (0, _globals.expect)(result.current.primaryPhoto).toBe(result.current.photos[1]);
  }));
  (0, _globals.it)('should maintain queue state machine correctly', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.photos[0].status).toBe('uploading');
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.photos[0].status).toBe('approved');
    });
    (0, _globals.expect)(result.current.photos[0].uploadId).toBe('upload-123');
    (0, _globals.expect)(result.current.photos[0].s3Key).toBe('uploads/test-key');
  }));
  (0, _globals.it)('should handle photo processing errors', (0, _asyncToGenerator2.default)(function* () {
    mockUploadHygieneService.processImageForUpload.mockRejectedValue(new Error('Image processing failed'));
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.photos[0].status).toBe('error');
    });
    (0, _globals.expect)(result.current.errors).toContain('Failed to process image');
  }));
  (0, _globals.it)('should handle upload failures with retry logic', (0, _asyncToGenerator2.default)(function* () {
    var callCount = 0;
    mockUploadHygieneService.uploadWithRetry.mockImplementation(function () {
      callCount++;
      if (callCount < 3) {
        return Promise.reject(new Error('Upload failed'));
      }
      return Promise.resolve({
        uploadId: 'upload-123',
        status: 'approved',
        s3Key: 'uploads/test-key'
      });
    });
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(callCount).toBe(3);
      (0, _globals.expect)(result.current.photos[0].status).toBe('approved');
    });
  }));
  (0, _globals.it)('should remove photos correctly', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.photos).toHaveLength(2);
    (0, _reactNative.act)(function () {
      result.current.removePhoto(result.current.photos[0].id);
    });
    (0, _globals.expect)(result.current.photos).toHaveLength(1);
    (0, _globals.expect)(result.current.photos[0].isPrimary).toBe(true);
  }));
  (0, _globals.it)('should prevent removing primary photo when others exist', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.photos).toHaveLength(2);
    (0, _reactNative.act)(function () {
      result.current.removePhoto(result.current.primaryPhoto.id);
    });
    (0, _globals.expect)(result.current.photos).toHaveLength(2);
    (0, _globals.expect)(result.current.errors).toContain('Cannot remove primary photo');
  }));
  (0, _globals.it)('should handle permission denied for photo library', (0, _asyncToGenerator2.default)(function* () {
    mockImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: 'denied',
      granted: false,
      canAskAgain: false
    });
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.errors).toContain('Photo library access required');
    (0, _globals.expect)(result.current.photos).toHaveLength(0);
  }));
  (0, _globals.it)('should handle user cancelling image picker', (0, _asyncToGenerator2.default)(function* () {
    mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
      cancelled: true,
      assets: []
    });
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.photos).toHaveLength(0);
    (0, _globals.expect)(result.current.errors).toHaveLength(0);
  }));
  (0, _globals.it)('should reorder photos correctly', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook1.result;
    for (var i = 0; i < 3; i++) {
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.addPhoto();
      }));
    }
    (0, _globals.expect)(result.current.photos).toHaveLength(3);
    var originalOrder = result.current.photos.map(function (p) {
      return p.id;
    });
    (0, _reactNative.act)(function () {
      result.current.reorderPhotos(result.current.photos[1].id, 0);
    });
    (0, _globals.expect)(result.current.photos[0].id).toBe(originalOrder[1]);
    (0, _globals.expect)(result.current.photos[1].id).toBe(originalOrder[0]);
    (0, _globals.expect)(result.current.photos[2].id).toBe(originalOrder[2]);
  }));
  (0, _globals.it)('should validate photo file size limits', (0, _asyncToGenerator2.default)(function* () {
    mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
      cancelled: false,
      assets: [{
        uri: 'file://large-image.jpg',
        width: 2048,
        height: 1536,
        fileSize: 15000000,
        mimeType: 'image/jpeg',
        fileName: 'large-image.jpg'
      }]
    });
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.errors).toContain('File size too large');
    (0, _globals.expect)(result.current.photos).toHaveLength(0);
  }));
  (0, _globals.it)('should handle duplicate photo detection', (0, _asyncToGenerator2.default)(function* () {
    mockUploadHygieneService.uploadWithRetry.mockRejectedValue({
      status: 409,
      data: {
        reason: 'duplicate',
        confidence: 0.99,
        duplicateOf: 'upload-456'
      }
    });
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook11.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.photos[0].status).toBe('duplicate');
    });
    (0, _globals.expect)(result.current.errors).toContain('Duplicate photo detected');
  }));
  (0, _globals.it)('should provide progress updates during upload', (0, _asyncToGenerator2.default)(function* () {
    var progressCallback;
    mockUploadHygieneService.uploadWithRetry.mockImplementation(function (_ref30) {
      var onProgress = _ref30.onProgress;
      progressCallback = onProgress;
      return new Promise(function (resolve) {
        setTimeout(function () {
          if (progressCallback) {
            progressCallback(100);
          }
          resolve({
            uploadId: 'upload-123',
            status: 'approved',
            s3Key: 'uploads/test-key'
          });
        }, 100);
      });
    });
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook12.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.photos[0].progress).toBe(0);
    (0, _reactNative.act)(function () {
      if (progressCallback) {
        progressCallback(50);
      }
    });
    (0, _globals.expect)(result.current.photos[0].progress).toBe(50);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.photos[0].progress).toBe(100);
      (0, _globals.expect)(result.current.photos[0].status).toBe('approved');
    });
  }));
  (0, _globals.it)('should handle concurrent photo additions', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook13.result;
    var addPromises = Array.from({
      length: 3
    }, function () {
      return (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.addPhoto();
      }));
    });
    yield Promise.all(addPromises);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.photos).toHaveLength(3);
      (0, _globals.expect)(result.current.photos.filter(function (p) {
        return p.status === 'approved';
      })).toHaveLength(3);
    });
  }));
  (0, _globals.it)('should persist photo state across re-renders', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook14.result,
      rerender = _renderHook14.rerender;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    (0, _globals.expect)(result.current.photos).toHaveLength(1);
    rerender();
    (0, _globals.expect)(result.current.photos).toHaveLength(1);
    (0, _globals.expect)(result.current.photos[0].status).toBe('approved');
  }));
  (0, _globals.it)('should handle network timeouts during upload', (0, _asyncToGenerator2.default)(function* () {
    mockUploadHygieneService.uploadWithRetry.mockImplementation(function () {
      return new Promise(function (_, reject) {
        setTimeout(function () {
          return reject(new Error('Network timeout'));
        }, 30000);
      });
    });
    var _renderHook15 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook15.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    _globals.jest.advanceTimersByTime(35000);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.photos[0].status).toBe('error');
    });
    (0, _globals.expect)(result.current.errors).toContain('Upload timed out');
  }));
  (0, _globals.it)('should provide accessibility labels for screen readers', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook16 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook16.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.addPhoto();
    }));
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.photos[0].status).toBe('approved');
    });
    (0, _globals.expect)(result.current.accessibilityLabels.addPhotoButton).toBe('Add photo to pet profile');
    (0, _globals.expect)(result.current.accessibilityLabels.photoCount).toBe('1 of 6 photos added');
    (0, _globals.expect)(result.current.accessibilityLabels.primaryPhotoIndicator).toBe('Primary photo');
  }));
  (0, _globals.it)('should handle memory pressure by clearing processed images', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook17 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManagement.usePhotoManagement)(mockPetId);
      }),
      result = _renderHook17.result;
    for (var i = 0; i < 5; i++) {
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.addPhoto();
      }));
    }
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(result.current.photos.filter(function (p) {
        return p.status === 'approved';
      })).toHaveLength(5);
    });
    (0, _reactNative.act)(function () {
      result.current.handleMemoryWarning();
    });
    (0, _globals.expect)(result.current.photos).toHaveLength(5);
    (0, _globals.expect)(result.current.memoryOptimized).toBe(true);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,