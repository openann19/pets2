d1e951ab315ea576154dfe107a9c1dcd
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSwipeGestures = useSwipeGestures;
var _react = require("react");
var _reactNative = require("react-native");
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  screenWidth = _Dimensions$get.width,
  screenHeight = _Dimensions$get.height;
function useSwipeGestures(_ref) {
  var onSwipeRight = _ref.onSwipeRight,
    onSwipeLeft = _ref.onSwipeLeft,
    onSwipeUp = _ref.onSwipeUp;
  var position = (0, _react.useRef)(new _reactNative.Animated.ValueXY()).current;
  var rotate = position.x.interpolate({
    inputRange: [-screenWidth / 2, 0, screenWidth / 2],
    outputRange: ["-30deg", "0deg", "30deg"],
    extrapolate: "clamp"
  });
  var likeOpacity = position.x.interpolate({
    inputRange: [0, screenWidth / 4],
    outputRange: [0, 1],
    extrapolate: "clamp"
  });
  var nopeOpacity = position.x.interpolate({
    inputRange: [-screenWidth / 4, 0],
    outputRange: [1, 0],
    extrapolate: "clamp"
  });
  var resetPosition = (0, _react.useCallback)(function () {
    _reactNative.Animated.spring(position, {
      toValue: {
        x: 0,
        y: 0
      },
      useNativeDriver: false
    }).start();
  }, [position]);
  var panResponder = (0, _react.useRef)(_reactNative.PanResponder.create({
    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
      return true;
    },
    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
      return true;
    },
    onPanResponderMove: function onPanResponderMove(e, gestureState) {
      position.setValue({
        x: gestureState.dx,
        y: gestureState.dy
      });
    },
    onPanResponderRelease: function onPanResponderRelease(_evt, gestureState) {
      var dx = gestureState.dx,
        dy = gestureState.dy;
      var swipeThreshold = screenWidth * 0.3;
      if (dx > swipeThreshold) {
        onSwipeRight();
      } else if (dx < -swipeThreshold) {
        onSwipeLeft();
      } else if (dy < -swipeThreshold) {
        onSwipeUp();
      } else {
        resetPosition();
      }
    }
  })).current;
  return {
    position: position,
    rotate: rotate,
    likeOpacity: likeOpacity,
    nopeOpacity: nopeOpacity,
    panResponder: panResponder
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX0RpbWVuc2lvbnMkZ2V0IiwiRGltZW5zaW9ucyIsImdldCIsInNjcmVlbldpZHRoIiwid2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJoZWlnaHQiLCJ1c2VTd2lwZUdlc3R1cmVzIiwiX3JlZiIsIm9uU3dpcGVSaWdodCIsIm9uU3dpcGVMZWZ0Iiwib25Td2lwZVVwIiwicG9zaXRpb24iLCJ1c2VSZWYiLCJBbmltYXRlZCIsIlZhbHVlWFkiLCJjdXJyZW50Iiwicm90YXRlIiwieCIsImludGVycG9sYXRlIiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIiwiZXh0cmFwb2xhdGUiLCJsaWtlT3BhY2l0eSIsIm5vcGVPcGFjaXR5IiwicmVzZXRQb3NpdGlvbiIsInVzZUNhbGxiYWNrIiwic3ByaW5nIiwidG9WYWx1ZSIsInkiLCJ1c2VOYXRpdmVEcml2ZXIiLCJzdGFydCIsInBhblJlc3BvbmRlciIsIlBhblJlc3BvbmRlciIsImNyZWF0ZSIsIm9uU3RhcnRTaG91bGRTZXRQYW5SZXNwb25kZXIiLCJvbk1vdmVTaG91bGRTZXRQYW5SZXNwb25kZXIiLCJvblBhblJlc3BvbmRlck1vdmUiLCJlIiwiZ2VzdHVyZVN0YXRlIiwic2V0VmFsdWUiLCJkeCIsImR5Iiwib25QYW5SZXNwb25kZXJSZWxlYXNlIiwiX2V2dCIsInN3aXBlVGhyZXNob2xkIl0sInNvdXJjZXMiOlsidXNlU3dpcGVHZXN0dXJlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSZWYsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBBbmltYXRlZCwgRGltZW5zaW9ucywgUGFuUmVzcG9uZGVyIH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHR5cGUgeyBQYW5SZXNwb25kZXJJbnN0YW5jZSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcblxuY29uc3QgeyB3aWR0aDogc2NyZWVuV2lkdGgsIGhlaWdodDogc2NyZWVuSGVpZ2h0IH0gPSBEaW1lbnNpb25zLmdldChcIndpbmRvd1wiKTtcblxuZXhwb3J0IGludGVyZmFjZSBTd2lwZUdlc3R1cmVTdGF0ZSB7XG4gIHBvc2l0aW9uOiBBbmltYXRlZC5WYWx1ZVhZO1xuICByb3RhdGU6IEFuaW1hdGVkLkFuaW1hdGVkSW50ZXJwb2xhdGlvbjxzdHJpbmc+O1xuICBsaWtlT3BhY2l0eTogQW5pbWF0ZWQuQW5pbWF0ZWRJbnRlcnBvbGF0aW9uPHN0cmluZyB8IG51bWJlcj47XG4gIG5vcGVPcGFjaXR5OiBBbmltYXRlZC5BbmltYXRlZEludGVycG9sYXRpb248c3RyaW5nIHwgbnVtYmVyPjtcbiAgcGFuUmVzcG9uZGVyOiBQYW5SZXNwb25kZXJJbnN0YW5jZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VTd2lwZUdlc3R1cmVzT3B0aW9ucyB7XG4gIG9uU3dpcGVSaWdodDogKCkgPT4gdm9pZDtcbiAgb25Td2lwZUxlZnQ6ICgpID0+IHZvaWQ7XG4gIG9uU3dpcGVVcDogKCkgPT4gdm9pZDtcbn1cblxuLyoqXG4gKiBIb29rIGZvciBtYW5hZ2luZyBzd2lwZSBnZXN0dXJlcyBhbmQgYW5pbWF0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU3dpcGVHZXN0dXJlcyh7XG4gIG9uU3dpcGVSaWdodCxcbiAgb25Td2lwZUxlZnQsXG4gIG9uU3dpcGVVcCxcbn06IFVzZVN3aXBlR2VzdHVyZXNPcHRpb25zKTogU3dpcGVHZXN0dXJlU3RhdGUge1xuICAvLyBBbmltYXRpb24gdmFsdWVzXG4gIGNvbnN0IHBvc2l0aW9uID0gdXNlUmVmKG5ldyBBbmltYXRlZC5WYWx1ZVhZKCkpLmN1cnJlbnQ7XG5cbiAgLy8gUm90YXRlIGludGVycG9sYXRpb25cbiAgY29uc3Qgcm90YXRlID0gcG9zaXRpb24ueC5pbnRlcnBvbGF0ZSh7XG4gICAgaW5wdXRSYW5nZTogWy1zY3JlZW5XaWR0aCAvIDIsIDAsIHNjcmVlbldpZHRoIC8gMl0sXG4gICAgb3V0cHV0UmFuZ2U6IFtcIi0zMGRlZ1wiLCBcIjBkZWdcIiwgXCIzMGRlZ1wiXSxcbiAgICBleHRyYXBvbGF0ZTogXCJjbGFtcFwiLFxuICB9KTtcblxuICAvLyBMaWtlIG9wYWNpdHkgKHJpZ2h0IHN3aXBlKVxuICBjb25zdCBsaWtlT3BhY2l0eSA9IHBvc2l0aW9uLnguaW50ZXJwb2xhdGUoe1xuICAgIGlucHV0UmFuZ2U6IFswLCBzY3JlZW5XaWR0aCAvIDRdLFxuICAgIG91dHB1dFJhbmdlOiBbMCwgMV0sXG4gICAgZXh0cmFwb2xhdGU6IFwiY2xhbXBcIixcbiAgfSk7XG5cbiAgLy8gTm9wZSBvcGFjaXR5IChsZWZ0IHN3aXBlKVxuICBjb25zdCBub3BlT3BhY2l0eSA9IHBvc2l0aW9uLnguaW50ZXJwb2xhdGUoe1xuICAgIGlucHV0UmFuZ2U6IFstc2NyZWVuV2lkdGggLyA0LCAwXSxcbiAgICBvdXRwdXRSYW5nZTogWzEsIDBdLFxuICAgIGV4dHJhcG9sYXRlOiBcImNsYW1wXCIsXG4gIH0pO1xuXG4gIC8vIFJlc2V0IHBvc2l0aW9uIGFuaW1hdGlvblxuICBjb25zdCByZXNldFBvc2l0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIEFuaW1hdGVkLnNwcmluZyhwb3NpdGlvbiwge1xuICAgICAgdG9WYWx1ZTogeyB4OiAwLCB5OiAwIH0sXG4gICAgICB1c2VOYXRpdmVEcml2ZXI6IGZhbHNlLFxuICAgIH0pLnN0YXJ0KCk7XG4gIH0sIFtwb3NpdGlvbl0pO1xuXG4gIC8vIFBhbiByZXNwb25kZXIgZm9yIHN3aXBlIGdlc3R1cmVzXG4gIGNvbnN0IHBhblJlc3BvbmRlciA9IHVzZVJlZihcbiAgICBQYW5SZXNwb25kZXIuY3JlYXRlKHtcbiAgICAgIG9uU3RhcnRTaG91bGRTZXRQYW5SZXNwb25kZXI6ICgpID0+IHRydWUsXG4gICAgICBvbk1vdmVTaG91bGRTZXRQYW5SZXNwb25kZXI6ICgpID0+IHRydWUsXG4gICAgICBvblBhblJlc3BvbmRlck1vdmU6IChlLCBnZXN0dXJlU3RhdGUpID0+IHtcbiAgICAgICAgcG9zaXRpb24uc2V0VmFsdWUoe1xuICAgICAgICAgIHg6IGdlc3R1cmVTdGF0ZS5keCxcbiAgICAgICAgICB5OiBnZXN0dXJlU3RhdGUuZHksXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uUGFuUmVzcG9uZGVyUmVsZWFzZTogKF9ldnQsIGdlc3R1cmVTdGF0ZSkgPT4ge1xuICAgICAgY29uc3QgeyBkeCwgZHkgfSA9IGdlc3R1cmVTdGF0ZTtcbiAgICAgIGNvbnN0IHN3aXBlVGhyZXNob2xkID0gc2NyZWVuV2lkdGggKiAwLjM7XG5cbiAgICAgIGlmIChkeCA+IHN3aXBlVGhyZXNob2xkKSB7XG4gICAgICAgIC8vIFN3aXBlIHJpZ2h0IC0gbGlrZVxuICAgICAgICBvblN3aXBlUmlnaHQoKTtcbiAgICAgIH0gZWxzZSBpZiAoZHggPCAtc3dpcGVUaHJlc2hvbGQpIHtcbiAgICAgICAgLy8gU3dpcGUgbGVmdCAtIHBhc3NcbiAgICAgICAgb25Td2lwZUxlZnQoKTtcbiAgICAgIH0gZWxzZSBpZiAoZHkgPCAtc3dpcGVUaHJlc2hvbGQpIHtcbiAgICAgICAgLy8gU3dpcGUgdXAgLSBzdXBlciBsaWtlXG4gICAgICAgIG9uU3dpcGVVcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU25hcCBiYWNrXG4gICAgICAgIHJlc2V0UG9zaXRpb24oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIH0pXG4gICkuY3VycmVudDtcblxuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uLFxuICAgIHJvdGF0ZSxcbiAgICBsaWtlT3BhY2l0eSxcbiAgICBub3BlT3BhY2l0eSxcbiAgICBwYW5SZXNwb25kZXIsXG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUdBLElBQUFFLGVBQUEsR0FBcURDLHVCQUFVLENBQUNDLEdBQUcsQ0FBQyxRQUFRLENBQUM7RUFBOURDLFdB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