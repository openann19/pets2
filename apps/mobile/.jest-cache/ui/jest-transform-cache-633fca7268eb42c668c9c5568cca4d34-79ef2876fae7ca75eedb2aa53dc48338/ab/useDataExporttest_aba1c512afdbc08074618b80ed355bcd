eb51ffa2b503b6fdde10cf2e37e82f12
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('expo-file-system', function () {
  return {
    documentDirectory: 'file:///documents/',
    downloadAsync: _globals.jest.fn(),
    getInfoAsync: _globals.jest.fn(),
    deleteAsync: _globals.jest.fn()
  };
});
_getJestObj().mock("../../../services/gdprService", function () {
  return {
    exportUserData: _globals.jest.fn(),
    downloadExport: _globals.jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _useDataExport = require("../useDataExport");
var _gdprService = require("../../../services/gdprService");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockFileSystem = FileSystem;
var mockExportUserData = _gdprService.exportUserData;
var mockDownloadExport = _gdprService.downloadExport;
(0, _globals.describe)('useDataExport', function () {
  var mockExportResponse = {
    success: true,
    exportId: 'export-123',
    estimatedTime: '2 minutes',
    message: 'Export started successfully',
    exportData: {
      profile: {
        name: 'John Doe',
        email: 'john@example.com'
      },
      matches: [{
        id: 'match1',
        petName: 'Buddy'
      }]
    }
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockAsyncStorage.removeItem.mockResolvedValue(undefined);
    mockExportUserData.mockResolvedValue(mockExportResponse);
    mockDownloadExport.mockResolvedValue(new Blob(['export data']));
    mockFileSystem.downloadAsync.mockResolvedValue({
      uri: 'file:///documents/export.json',
      status: 200,
      headers: {},
      mimeType: 'application/json'
    });
    mockFileSystem.getInfoAsync.mockResolvedValue({
      exists: true,
      size: 1024,
      uri: 'file:///documents/export.json',
      isDirectory: false
    });
  });
  (0, _globals.describe)('Initial State', function () {
    (0, _globals.it)('should initialize with default state', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.isExporting).toBe(false);
      (0, _globals.expect)(result.current.isDownloading).toBe(false);
      (0, _globals.expect)(result.current.exportData).toBeNull();
      (0, _globals.expect)(result.current.downloadUrl).toBeNull();
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.lastExportTime).toBeNull();
    });
    (0, _globals.it)('should load cached export data on mount', (0, _asyncToGenerator2.default)(function* () {
      var cachedData = {
        exportId: 'cached-export-123',
        exportData: {
          profile: {
            name: 'Cached User'
          }
        },
        timestamp: Date.now()
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(cachedData));
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.exportData).toEqual(cachedData.exportData);
        (0, _globals.expect)(result.current.lastExportTime).toBe(cachedData.timestamp);
      });
    }));
    (0, _globals.it)('should handle corrupted cache data gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('invalid json');
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook3.result;
      (0, _globals.expect)(result.current.exportData).toBeNull();
      (0, _globals.expect)(result.current.error).toBeNull();
    }));
  });
  (0, _globals.describe)('Export Data', function () {
    (0, _globals.it)('should successfully export user data with default options', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(mockExportUserData).toHaveBeenCalledWith({
        format: 'json',
        includeMessages: true,
        includeMatches: true,
        includeProfileData: true,
        includePreferences: true
      });
      (0, _globals.expect)(result.current.isExporting).toBe(false);
      (0, _globals.expect)(result.current.exportData).toEqual(mockExportResponse.exportData);
      (0, _globals.expect)(result.current.lastExportTime).toBeGreaterThan(0);
    }));
    (0, _globals.it)('should export data with custom options', (0, _asyncToGenerator2.default)(function* () {
      var customOptions = {
        format: 'csv',
        includeMessages: false,
        includeMatches: true,
        includeProfileData: true,
        includePreferences: false
      };
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData(customOptions);
      }));
      (0, _globals.expect)(mockExportUserData).toHaveBeenCalledWith(customOptions);
    }));
    (0, _globals.it)('should handle export in progress state', (0, _asyncToGenerator2.default)(function* () {
      var resolveExport;
      var exportPromise = new Promise(function (resolve) {
        resolveExport = resolve;
      });
      mockExportUserData.mockReturnValue(exportPromise);
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.exportData();
      });
      (0, _globals.expect)(result.current.isExporting).toBe(true);
      (0, _reactNative.act)(function () {
        resolveExport(mockExportResponse);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isExporting).toBe(false);
      });
    }));
    (0, _globals.it)('should handle export errors', (0, _asyncToGenerator2.default)(function* () {
      var errorMessage = 'Export failed due to server error';
      mockExportUserData.mockRejectedValue(new Error(errorMessage));
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.isExporting).toBe(false);
      (0, _globals.expect)(result.current.error).toBe(errorMessage);
      (0, _globals.expect)(result.current.exportData).toBeNull();
    }));
    (0, _globals.it)('should clear previous errors on new export', (0, _asyncToGenerator2.default)(function* () {
      mockExportUserData.mockRejectedValueOnce(new Error('First error'));
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBe('First error');
      mockExportUserData.mockResolvedValueOnce(mockExportResponse);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.exportData).toEqual(mockExportResponse.exportData);
    }));
  });
  (0, _globals.describe)('Download Export', function () {
    (0, _globals.it)('should successfully download exported data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(mockDownloadExport).toHaveBeenCalledWith('export-123');
      (0, _globals.expect)(mockFileSystem.downloadAsync).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
        to: _globals.expect.stringContaining('gdpr-export')
      }));
      (0, _globals.expect)(result.current.isDownloading).toBe(false);
      (0, _globals.expect)(result.current.downloadUrl).toBe('file:///documents/export.json');
    }));
    (0, _globals.it)('should handle download without export ID', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(mockDownloadExport).not.toHaveBeenCalled();
      (0, _globals.expect)(result.current.error).toBe('No export data available');
    }));
    (0, _globals.it)('should handle download in progress state', (0, _asyncToGenerator2.default)(function* () {
      var resolveDownload;
      var downloadPromise = new Promise(function (resolve) {
        resolveDownload = resolve;
      });
      mockFileSystem.downloadAsync.mockReturnValue(downloadPromise);
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook1.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
        result.current.lastExportTime = Date.now();
      });
      (0, _reactNative.act)(function () {
        result.current.downloadExport();
      });
      (0, _globals.expect)(result.current.isDownloading).toBe(true);
      (0, _reactNative.act)(function () {
        resolveDownload({
          uri: 'file:///documents/completed-export.json',
          status: 200,
          headers: {},
          mimeType: 'application/json'
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isDownloading).toBe(false);
      });
    }));
    (0, _globals.it)('should handle download errors', (0, _asyncToGenerator2.default)(function* () {
      mockDownloadExport.mockRejectedValue(new Error('Download failed'));
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook10.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(result.current.isDownloading).toBe(false);
      (0, _globals.expect)(result.current.error).toBe('Download failed');
    }));
    (0, _globals.it)('should handle file system errors during download', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.downloadAsync.mockRejectedValue(new Error('File system error'));
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook11.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(result.current.error).toBe('File system error');
    }));
  });
  (0, _globals.describe)('Cache Management', function () {
    (0, _globals.it)('should cache export data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook12.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('gdpr_export_data', _globals.expect.any(String));
      var cachedData = JSON.parse(mockAsyncStorage.setItem.mock.calls[0][1]);
      (0, _globals.expect)(cachedData.exportData).toEqual(mockExportResponse.exportData);
      (0, _globals.expect)(cachedData.timestamp).toBeDefined();
    }));
    (0, _globals.it)('should clear cache when requested', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook13.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
        result.current.lastExportTime = Date.now();
      });
      (0, _reactNative.act)(function () {
        result.current.clearCache();
      });
      (0, _globals.expect)(result.current.exportData).toBeNull();
      (0, _globals.expect)(result.current.lastExportTime).toBeNull();
      (0, _globals.expect)(result.current.downloadUrl).toBeNull();
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(mockAsyncStorage.removeItem).toHaveBeenCalledWith('gdpr_export_data');
    }));
    (0, _globals.it)('should handle cache clearing errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.removeItem.mockRejectedValue(new Error('Cache clear failed'));
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook14.result;
      (0, _reactNative.act)(function () {
        result.current.clearCache();
      });
      (0, _globals.expect)(result.current.exportData).toBeNull();
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle network errors during export', (0, _asyncToGenerator2.default)(function* () {
      mockExportUserData.mockRejectedValue(new Error('Network Error'));
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBe('Network Error');
    }));
    (0, _globals.it)('should handle server errors with custom messages', (0, _asyncToGenerator2.default)(function* () {
      mockExportUserData.mockRejectedValue({
        message: 'Server temporarily unavailable'
      });
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBe('Server temporarily unavailable');
    }));
    (0, _globals.it)('should handle malformed server responses', (0, _asyncToGenerator2.default)(function* () {
      mockExportUserData.mockResolvedValue({
        success: true
      });
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.exportData).toBeDefined();
    }));
    (0, _globals.it)('should reset error state on successful operations', (0, _asyncToGenerator2.default)(function* () {
      mockExportUserData.mockRejectedValueOnce(new Error('First error'));
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook18.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBe('First error');
      mockExportUserData.mockResolvedValueOnce(mockExportResponse);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
    }));
  });
  (0, _globals.describe)('File Management', function () {
    (0, _globals.it)('should generate proper download filename', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook19.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(mockFileSystem.downloadAsync).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
        to: _globals.expect.stringContaining('gdpr-export-export-123')
      }));
    }));
    (0, _globals.it)('should handle file cleanup on errors', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.downloadAsync.mockRejectedValue(new Error('Download failed'));
      mockFileSystem.deleteAsync.mockResolvedValue(undefined);
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook20.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(mockFileSystem.deleteAsync).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Concurrent Operations', function () {
    (0, _globals.it)('should prevent concurrent exports', (0, _asyncToGenerator2.default)(function* () {
      var resolveExport;
      var exportPromise = new Promise(function (resolve) {
        resolveExport = resolve;
      });
      mockExportUserData.mockReturnValue(exportPromise);
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook21.result;
      (0, _reactNative.act)(function () {
        result.current.exportData();
      });
      (0, _reactNative.act)(function () {
        result.current.exportData();
      });
      (0, _globals.expect)(mockExportUserData).toHaveBeenCalledTimes(1);
      (0, _reactNative.act)(function () {
        resolveExport(mockExportResponse);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isExporting).toBe(false);
      });
    }));
    (0, _globals.it)('should handle concurrent downloads', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook22.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield Promise.all([result.current.downloadExport(), result.current.downloadExport(), result.current.downloadExport()]);
      }));
      (0, _globals.expect)(mockDownloadExport).toHaveBeenCalledTimes(1);
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty export data', (0, _asyncToGenerator2.default)(function* () {
      var emptyResponse = {
        success: true,
        exportId: 'empty-export',
        estimatedTime: '1 minute',
        message: 'Export completed',
        exportData: {}
      };
      mockExportUserData.mockResolvedValue(emptyResponse);
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook23.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.exportData).toEqual({});
    }));
    (0, _globals.it)('should handle very large export data', (0, _asyncToGenerator2.default)(function* () {
      var largeExportData = {
        profile: {
          name: 'A'.repeat(1000)
        },
        matches: Array.from({
          length: 500
        }, function (_, i) {
          return {
            id: `match${i}`,
            data: 'x'.repeat(100)
          };
        })
      };
      var largeResponse = {
        success: true,
        exportId: 'large-export',
        estimatedTime: '10 minutes',
        message: 'Large export in progress',
        exportData: largeExportData
      };
      mockExportUserData.mockResolvedValue(largeResponse);
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook24.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.exportData).toEqual(largeExportData);
    }));
    (0, _globals.it)('should handle export with missing optional fields', (0, _asyncToGenerator2.default)(function* () {
      var minimalResponse = {
        success: true,
        exportId: 'minimal-export',
        estimatedTime: '30 seconds',
        message: 'Quick export',
        exportData: {
          profile: {
            name: 'Test'
          }
        }
      };
      mockExportUserData.mockResolvedValue(minimalResponse);
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook25.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.exportData).toEqual({
        profile: {
          name: 'Test'
        }
      });
    }));
    (0, _globals.it)('should handle download with non-existent export', (0, _asyncToGenerator2.default)(function* () {
      mockDownloadExport.mockRejectedValue(new Error('Export not found'));
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook26.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = {
          profile: {
            name: 'Test'
          }
        };
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(result.current.error).toBe('Export not found');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,