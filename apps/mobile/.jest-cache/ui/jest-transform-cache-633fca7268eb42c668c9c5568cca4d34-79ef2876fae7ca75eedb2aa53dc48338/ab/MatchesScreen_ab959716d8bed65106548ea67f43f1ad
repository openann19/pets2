54addf88a40d684bc43603675a0b75d9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MatchesScreen;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("react-native");
var _react = require("react");
var _ScreenShell = require("../ui/layout/ScreenShell");
var _haptics = require("../ui/haptics");
var _AdvancedHeader = require("../components/Advanced/AdvancedHeader");
var _MatchCard = require("../components/matches/MatchCard");
var _MatchesTabs = require("../components/matches/MatchesTabs");
var _useMatchesData2 = require("../hooks/useMatchesData");
var _logger = require("../services/logger");
var _unifiedTheme = require("../theme/unified-theme");
var _useScrollOffsetTracker = require("../hooks/navigation/useScrollOffsetTracker");
var _useTabReselectRefresh = require("../hooks/navigation/useTabReselectRefresh");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function MatchesScreen(_ref) {
  var navigation = _ref.navigation;
  var _useMatchesData = (0, _useMatchesData2.useMatchesData)(),
    matches = _useMatchesData.matches,
    likedYou = _useMatchesData.likedYou,
    selectedTab = _useMatchesData.selectedTab,
    refreshing = _useMatchesData.refreshing,
    onRefresh = _useMatchesData.onRefresh,
    setSelectedTab = _useMatchesData.setSelectedTab,
    handleScroll = _useMatchesData.handleScroll,
    filter = _useMatchesData.filter,
    setFilter = _useMatchesData.setFilter;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    filterOpen = _useState2[0],
    setFilterOpen = _useState2[1];
  var listRef = (0, _react.useRef)(null);
  var _useScrollOffsetTrack = (0, _useScrollOffsetTracker.useScrollOffsetTracker)(),
    _onScroll = _useScrollOffsetTrack.onScroll,
    getOffset = _useScrollOffsetTrack.getOffset;
  (0, _useTabReselectRefresh.useTabReselectRefresh)({
    listRef: listRef,
    onRefresh: onRefresh,
    getOffset: getOffset,
    topThreshold: 120,
    cooldownMs: 700
  });
  var handleMatchPress = function handleMatchPress(matchId, petName) {
    _haptics.haptic.confirm();
    navigation.navigate("Chat", {
      matchId: matchId,
      petName: petName
    });
  };
  var handleFilterPress = function handleFilterPress() {
    _haptics.haptic.tap();
    setFilterOpen(true);
    _logger.logger.info("Filter matches button pressed");
  };
  var handleSearchPress = function handleSearchPress() {
    _haptics.haptic.tap();
    _logger.logger.info("Search matches button pressed");
  };
  return (0, _jsxRuntime.jsxs)(_ScreenShell.ScreenShell, {
    header: (0, _jsxRuntime.jsx)(_AdvancedHeader.AdvancedHeader, _objectSpread({}, _AdvancedHeader.HeaderConfigs.glass({
      title: "Matches",
      rightButtons: [{
        type: "filter",
        onPress: handleFilterPress,
        variant: "glass",
        haptic: "light"
      }, {
        type: "search",
        onPress: handleSearchPress,
        variant: "minimal",
        haptic: "light"
      }],
      apiActions: {
        filter: function () {
          var _filter = (0, _asyncToGenerator2.default)(function* () {
            _logger.logger.info("Filter API action triggered");
          });
          function filter() {
            return _filter.apply(this, arguments);
          }
          return filter;
        }(),
        search: function () {
          var _search = (0, _asyncToGenerator2.default)(function* () {
            _logger.logger.info("Search API action triggered");
          });
          function search() {
            return _search.apply(this, arguments);
          }
          return search;
        }()
      }
    }))),
    children: [(0, _jsxRuntime.jsx)(_MatchesTabs.MatchesTabs, {
      selectedTab: selectedTab,
      onTabChange: setSelectedTab
    }), (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      ref: listRef,
      data: selectedTab === "matches" ? matches : likedYou,
      renderItem: function renderItem(_ref2) {
        var item = _ref2.item;
        return (0, _jsxRuntime.jsx)(_MatchCard.MatchCard, {
          match: item,
          onPress: function onPress() {
            handleMatchPress(item._id, item.petName);
          }
        });
      },
      keyExtractor: function keyExtractor(item) {
        return item._id;
      },
      style: styles.list,
      contentContainerStyle: styles.listContent,
      onScroll: function onScroll(e) {
        _onScroll(e);
        handleScroll(e.nativeEvent.contentOffset.y);
      },
      scrollEventThrottle: 120,
      refreshControl: (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
        refreshing: refreshing,
        onRefresh: onRefresh,
        tintColor: _unifiedTheme.Theme.colors.primary[500]
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  list: {
    flex: 1
  },
  listContent: {
    padding: _unifiedTheme.Theme.spacing.md
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,