ff8f0686455c4b637865e0de792c6197
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tileUpscale = tileUpscale;
exports.tileUpscaleAuto = tileUpscaleAuto;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _excluded = ["tile", "overlap", "quality", "format"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function loadSkia() {
  return _loadSkia.apply(this, arguments);
}
function _loadSkia() {
  _loadSkia = (0, _asyncToGenerator2.default)(function* () {
    try {
      return require("@shopify/react-native-skia");
    } catch (_unused) {
      return null;
    }
  });
  return _loadSkia.apply(this, arguments);
}
function computeTargetDimensions(srcW, srcH, opts) {
  var scale = opts.scale,
    targetW = opts.targetW,
    targetH = opts.targetH;
  if (targetW && targetH) {
    return {
      outW: targetW,
      outH: targetH
    };
  }
  if (scale !== undefined && !targetW && !targetH) {
    return {
      outW: Math.round(srcW * scale),
      outH: Math.round(srcH * scale)
    };
  }
  if (targetW && !targetH) {
    var r = targetW / srcW;
    return {
      outW: targetW,
      outH: Math.round(srcH * r)
    };
  }
  if (!targetW && targetH) {
    var _r = targetH / srcH;
    return {
      outW: Math.round(srcW * _r),
      outH: targetH
    };
  }
  return {
    outW: srcW,
    outH: srcH
  };
}
function tileUpscale(_x, _x2, _x3) {
  return _tileUpscale.apply(this, arguments);
}
function _tileUpscale() {
  _tileUpscale = (0, _asyncToGenerator2.default)(function* (uri, srcW, srcH) {
    var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var Skia = yield loadSkia();
    var _opts$tile = opts.tile,
      tile = _opts$tile === void 0 ? 1024 : _opts$tile,
      _opts$overlap = opts.overlap,
      overlap = _opts$overlap === void 0 ? 12 : _opts$overlap,
      _opts$quality = opts.quality,
      quality = _opts$quality === void 0 ? 1 : _opts$quality,
      _opts$format = opts.format,
      format = _opts$format === void 0 ? "jpg" : _opts$format,
      rest = (0, _objectWithoutProperties2.default)(opts, _excluded);
    var _computeTargetDimensi = computeTargetDimensions(srcW, srcH, rest),
      outW = _computeTargetDimensi.outW,
      outH = _computeTargetDimensi.outH;
    if (!Skia) {
      var result = yield ImageManipulator.manipulateAsync(uri, [{
        resize: {
          width: Math.round(outW),
          height: Math.round(outH)
        }
      }], {
        compress: quality,
        format: format === "png" ? ImageManipulator.SaveFormat.PNG : ImageManipulator.SaveFormat.JPEG
      });
      return result.uri;
    }
    var S = Skia.Skia;
    var data = yield S.Data.fromURI(uri);
    var img = S.Image.MakeImageFromEncoded(data);
    if (!img) {
      var _result = yield ImageManipulator.manipulateAsync(uri, [{
        resize: {
          width: Math.round(outW),
          height: Math.round(outH)
        }
      }], {
        compress: quality,
        format: ImageManipulator.SaveFormat.JPEG
      });
      return _result.uri;
    }
    var surface = S.Surface.MakeSurface(Math.round(outW), Math.round(outH));
    if (!surface) {
      var _result2 = yield ImageManipulator.manipulateAsync(uri, [{
        resize: {
          width: Math.round(outW),
          height: Math.round(outH)
        }
      }], {
        compress: quality,
        format: ImageManipulator.SaveFormat.JPEG
      });
      return _result2.uri;
    }
    var canvas = surface.getCanvas();
    var paint = S.Paint();
    paint.setFilterQuality("high");
    var sxStep = tile - overlap;
    var syStep = tile - overlap;
    for (var sy = 0; sy < srcH; sy += syStep) {
      for (var sx = 0; sx < srcW; sx += sxStep) {
        var sw = Math.min(tile, srcW - sx);
        var sh = Math.min(tile, srcH - sy);
        var dx = Math.round(sx / srcW * outW);
        var dy = Math.round(sy / srcH * outH);
        var dw = Math.round(sw / srcW * outW);
        var dh = Math.round(sh / srcH * outH);
        var srcRect = S.XYWHRect(sx, sy, sw, sh);
        var dstRect = S.XYWHRect(dx, dy, dw, dh);
        canvas.drawImageRect(img, srcRect, dstRect, paint);
      }
    }
    var snapshot = surface.makeImageSnapshot();
    var base64 = format === "png" ? snapshot.encodeToBase64() : snapshot.encodeToBase64(S.ImageFormat.JPEG, Math.round(quality * 100));
    var outPath = `${FileSystem.cacheDirectory}up_${Date.now()}.${format}`;
    yield FileSystem.writeAsStringAsync(outPath, base64, {
      encoding: FileSystem.EncodingType.Base64
    });
    return outPath;
  });
  return _tileUpscale.apply(this, arguments);
}
function tileUpscaleAuto(_x4) {
  return _tileUpscaleAuto.apply(this, arguments);
}
function _tileUpscaleAuto() {
  _tileUpscaleAuto = (0, _asyncToGenerator2.default)(function* (uri) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _yield$import = yield Promise.resolve().then(function () {
        return _interopRequireWildcard(require("react-native"));
      }),
      Image = _yield$import.Image;
    return new Promise(function (resolve, reject) {
      Image.getSize(uri, function (width, height) {
        tileUpscale(uri, width, height, opts).then(resolve).catch(reject);
      }, function (error) {
        reject(error);
      });
    });
  });
  return _tileUpscaleAuto.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,