0dd55c6cbed09f280044387c2d03bcc9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChatScreen = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useChatData2 = require("../useChatData");
var _useInteractionMetrics = require("../useInteractionMetrics");
var _Provider = require("../../theme/Provider");
var _api = require("../../services/api");
var _haptics = require("../../ui/haptics");
var _logger = require("../../services/logger");
var useChatScreen = exports.useChatScreen = function useChatScreen(_ref) {
  var matchId = _ref.matchId,
    petName = _ref.petName,
    navigation = _ref.navigation;
  var _useTheme = (0, _Provider.useTheme)(),
    isDark = _useTheme.isDark;
  var _useReactionMetrics = (0, _useInteractionMetrics.useReactionMetrics)(),
    startInteraction = _useReactionMetrics.startInteraction,
    endInteraction = _useReactionMetrics.endInteraction;
  var _useChatData = (0, _useChatData2.useChatData)(matchId),
    data = _useChatData.data,
    actions = _useChatData.actions;
  var _useState = (0, _react.useState)(""),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    inputText = _useState2[0],
    setInputText = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isTyping = _useState4[0],
    setIsTyping = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showReactions = _useState6[0],
    setShowReactions = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    selectedMessageId = _useState8[0],
    setSelectedMessageId = _useState8[1];
  var flatListRef = (0, _react.useRef)(null);
  var inputRef = (0, _react.useRef)(null);
  var typingTimeoutRef = (0, _react.useRef)(null);
  var savedOffsetRef = (0, _react.useRef)(0);
  var didRestoreRef = (0, _react.useRef)(false);
  var typingAnimation = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  (0, _react.useEffect)(function () {
    _reactNative.StatusBar.setBarStyle(isDark ? "light-content" : "dark-content");
    _reactNative.InteractionManager.runAfterInteractions(function () {
      var _inputRef$current;
      startTypingAnimation();
      (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();
    });
    return function () {
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
    };
  }, [isDark]);
  (0, _react.useEffect)(function () {
    var loadDraft = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var draft = yield _asyncStorage.default.getItem(`mobile_chat_draft_${matchId}`);
          if (draft) {
            setInputText(draft);
          }
        } catch (_unused) {}
      });
      return function loadDraft() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadDraft();
  }, [matchId]);
  (0, _react.useEffect)(function () {
    var persist = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var key = `mobile_chat_draft_${matchId}`;
          if (inputText) {
            yield _asyncStorage.default.setItem(key, inputText);
          } else {
            yield _asyncStorage.default.removeItem(key);
          }
        } catch (_unused2) {}
      });
      return function persist() {
        return _ref3.apply(this, arguments);
      };
    }();
    persist();
  }, [inputText, matchId]);
  (0, _react.useEffect)(function () {
    var tryRestore = function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* () {
        if (didRestoreRef.current) return;
        try {
          var saved = yield _asyncStorage.default.getItem(`mobile_chat_scroll_${matchId}`);
          var offset = saved ? Number(saved) : 0;
          if (offset > 0) {
            savedOffsetRef.current = offset;
            _reactNative.InteractionManager.runAfterInteractions(function () {
              var _flatListRef$current;
              (_flatListRef$current = flatListRef.current) == null ? void 0 : _flatListRef$current.scrollToOffset({
                offset: offset,
                animated: false
              });
            });
          }
          didRestoreRef.current = true;
        } catch (_unused3) {}
      });
      return function tryRestore() {
        return _ref4.apply(this, arguments);
      };
    }();
    if (!data.isLoading) {
      tryRestore();
    }
  }, [data.isLoading, matchId]);
  var startTypingAnimation = (0, _react.useCallback)(function () {
    _reactNative.Animated.loop(_reactNative.Animated.stagger(200, [_reactNative.Animated.sequence([_reactNative.Animated.timing(typingAnimation, {
      toValue: 1,
      duration: 400,
      easing: _reactNative.Easing.bezier(0.4, 0, 0.2, 1),
      useNativeDriver: true
    }), _reactNative.Animated.timing(typingAnimation, {
      toValue: 0,
      duration: 400,
      easing: _reactNative.Easing.bezier(0.4, 0, 0.2, 1),
      useNativeDriver: true
    })])])).start();
  }, [typingAnimation]);
  var handleSendMessage = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (!inputText.trim()) return;
    var messageContent = inputText.trim();
    _haptics.haptic.confirm();
    setInputText("");
    _reactNative.LayoutAnimation.configureNext(_reactNative.LayoutAnimation.Presets.easeInEaseOut);
    yield actions.sendMessage(messageContent);
    _reactNative.InteractionManager.runAfterInteractions(function () {
      var _flatListRef$current2;
      (_flatListRef$current2 = flatListRef.current) == null ? void 0 : _flatListRef$current2.scrollToEnd({
        animated: true
      });
    });
  }), [inputText, actions]);
  var handleTypingChange = (0, _react.useCallback)(function (typing) {
    setIsTyping(typing);
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }
    if (typing) {
      _api.api.chat.sendTypingIndicator(matchId, true);
      typingTimeoutRef.current = setTimeout(function () {
        setIsTyping(false);
        _api.api.chat.sendTypingIndicator(matchId, false);
      }, 1000);
    }
  }, [matchId]);
  var handleScroll = (0, _react.useCallback)(function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* (event) {
      try {
        var offset = event.nativeEvent.contentOffset.y;
        yield _asyncStorage.default.setItem(`mobile_chat_scroll_${matchId}`, String(offset));
      } catch (_unused4) {}
    });
    return function (_x) {
      return _ref6.apply(this, arguments);
    };
  }(), [matchId]);
  var handleQuickReplySelect = (0, _react.useCallback)(function (reply) {
    var _inputRef$current2;
    _haptics.haptic.tap();
    setInputText(reply);
    (_inputRef$current2 = inputRef.current) == null ? void 0 : _inputRef$current2.focus();
  }, []);
  var handleMessageLongPress = (0, _react.useCallback)(function (messageId) {
    _haptics.haptic.tap();
    setSelectedMessageId(messageId);
    setShowReactions(true);
  }, []);
  var handleReactionSelect = (0, _react.useCallback)(function (emoji) {
    if (selectedMessageId) {
      _haptics.haptic.confirm();
      startInteraction('reaction', {
        messageId: selectedMessageId,
        emoji: emoji
      });
      _logger.logger.info("Reacted with emoji", {
        emoji: emoji,
        messageId: selectedMessageId
      });
      endInteraction('reaction', true);
    }
    setShowReactions(false);
    setSelectedMessageId(null);
  }, [selectedMessageId, startInteraction, endInteraction]);
  var handleReactionCancel = (0, _react.useCallback)(function () {
    _haptics.haptic.selection();
    setShowReactions(false);
    setSelectedMessageId(null);
  }, []);
  var handleVoiceCall = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    _reactNative.Alert.alert("Voice Call", `Start a voice call with ${petName}?`, [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Call",
      onPress: function () {
        var _onPress = (0, _asyncToGenerator2.default)(function* () {
          _reactNative.Alert.alert("Call Feature", "Voice calling feature coming soon!");
        });
        function onPress() {
          return _onPress.apply(this, arguments);
        }
        return onPress;
      }()
    }]);
  }), [petName]);
  var handleVideoCall = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    _reactNative.Alert.alert("Video Call", `Start a video call with ${petName}?`, [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Call",
      onPress: function () {
        var _onPress2 = (0, _asyncToGenerator2.default)(function* () {
          _reactNative.Alert.alert("Call Feature", "Video calling feature coming soon!");
        });
        function onPress() {
          return _onPress2.apply(this, arguments);
        }
        return onPress;
      }()
    }]);
  }), [petName]);
  var handleMoreOptions = (0, _react.useCallback)(function () {
    _reactNative.Alert.alert("More Options", "Additional options coming soon!");
  }, []);
  var quickReplies = ["Sounds good! üëç", "When works for you?", "Let's do it! üéæ", "Perfect! üòä"];
  return {
    inputText: inputText,
    setInputText: setInputText,
    isTyping: isTyping,
    showReactions: showReactions,
    selectedMessageId: selectedMessageId,
    data: data,
    actions: actions,
    flatListRef: flatListRef,
    inputRef: inputRef,
    handleSendMessage: handleSendMessage,
    handleTypingChange: handleTypingChange,
    handleScroll: handleScroll,
    handleQuickReplySelect: handleQuickReplySelect,
    handleMessageLongPress: handleMessageLongPress,
    handleReactionSelect: handleReactionSelect,
    handleReactionCancel: handleReactionCancel,
    handleVoiceCall: handleVoiceCall,
    handleVideoCall: handleVideoCall,
    handleMoreOptions: handleMoreOptions,
    quickReplies: quickReplies
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,