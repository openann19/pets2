61e45c28f2b3251170f437adb4ec3beb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _NativeEventEmitter = _interopRequireDefault(require("../EventEmitter/NativeEventEmitter"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _EventEmitter = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));
var _DebugEnvironment = require("./DebugEnvironment");
var _NativeAppearance = _interopRequireDefault(require("./NativeAppearance"));
var _invariant = _interopRequireDefault(require("invariant"));
var eventEmitter = new _EventEmitter.default();
if (_NativeAppearance.default) {
  var nativeEventEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : _NativeAppearance.default);
  nativeEventEmitter.addListener('appearanceChanged', function (newAppearance) {
    var colorScheme = newAppearance.colorScheme;
    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
    eventEmitter.emit('change', {
      colorScheme: colorScheme
    });
  });
}
module.exports = {
  getColorScheme: function getColorScheme() {
    if (__DEV__) {
      if (_DebugEnvironment.isAsyncDebugging) {
        return 'light';
      }
    }
    var nativeColorScheme = _NativeAppearance.default == null ? null : _NativeAppearance.default.getColorScheme() || null;
    (0, _invariant.default)(nativeColorScheme === 'dark' || nativeColorScheme === 'light' || nativeColorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
    return nativeColorScheme;
  },
  setColorScheme: function setColorScheme(colorScheme) {
    var nativeColorScheme = colorScheme == null ? 'unspecified' : colorScheme;
    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark', 'light' or null?");
    if (_NativeAppearance.default != null && _NativeAppearance.default.setColorScheme != null) {
      _NativeAppearance.default.setColorScheme(nativeColorScheme);
    }
  },
  addChangeListener: function addChangeListener(listener) {
    return eventEmitter.addListener('change', listener);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlRXZlbnRFbWl0dGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfUGxhdGZvcm0iLCJfRXZlbnRFbWl0dGVyIiwiX0RlYnVnRW52aXJvbm1lbnQiLCJfTmF0aXZlQXBwZWFyYW5jZSIsIl9pbnZhcmlhbnQiLCJldmVudEVtaXR0ZXIiLCJFdmVudEVtaXR0ZXIiLCJOYXRpdmVBcHBlYXJhbmNlIiwibmF0aXZlRXZlbnRFbWl0dGVyIiwiTmF0aXZlRXZlbnRFbWl0dGVyIiwiUGxhdGZvcm0iLCJPUyIsImFkZExpc3RlbmVyIiwibmV3QXBwZWFyYW5jZSIsImNvbG9yU2NoZW1lIiwiaW52YXJpYW50IiwiZW1pdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRDb2xvclNjaGVtZSIsIl9fREVWX18iLCJpc0FzeW5jRGVidWdnaW5nIiwibmF0aXZlQ29sb3JTY2hlbWUiLCJzZXRDb2xvclNjaGVtZSIsImFkZENoYW5nZUxpc3RlbmVyIiwibGlzdGVuZXIiXSwic291cmNlcyI6WyJBcHBlYXJhbmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgTmF0aXZlRXZlbnRFbWl0dGVyIGZyb20gJy4uL0V2ZW50RW1pdHRlci9OYXRpdmVFdmVudEVtaXR0ZXInO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgRXZlbnRFbWl0dGVyLCB7XG4gIHR5cGUgRXZlbnRTdWJzY3JpcHRpb24sXG59IGZyb20gJy4uL3ZlbmRvci9lbWl0dGVyL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQge2lzQXN5bmNEZWJ1Z2dpbmd9IGZyb20gJy4vRGVidWdFbnZpcm9ubWVudCc7XG5pbXBvcnQgTmF0aXZlQXBwZWFyYW5jZSwge1xuICB0eXBlIEFwcGVhcmFuY2VQcmVmZXJlbmNlcyxcbiAgdHlwZSBDb2xvclNjaGVtZU5hbWUsXG59IGZyb20gJy4vTmF0aXZlQXBwZWFyYW5jZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbnR5cGUgQXBwZWFyYW5jZUxpc3RlbmVyID0gKHByZWZlcmVuY2VzOiBBcHBlYXJhbmNlUHJlZmVyZW5jZXMpID0+IHZvaWQ7XG5jb25zdCBldmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPHtcbiAgY2hhbmdlOiBbQXBwZWFyYW5jZVByZWZlcmVuY2VzXSxcbn0+KCk7XG5cbnR5cGUgTmF0aXZlQXBwZWFyYW5jZUV2ZW50RGVmaW5pdGlvbnMgPSB7XG4gIGFwcGVhcmFuY2VDaGFuZ2VkOiBbQXBwZWFyYW5jZVByZWZlcmVuY2VzXSxcbn07XG5cbmlmIChOYXRpdmVBcHBlYXJhbmNlKSB7XG4gIGNvbnN0IG5hdGl2ZUV2ZW50RW1pdHRlciA9XG4gICAgbmV3IE5hdGl2ZUV2ZW50RW1pdHRlcjxOYXRpdmVBcHBlYXJhbmNlRXZlbnREZWZpbml0aW9ucz4oXG4gICAgICAvLyBUODg3MTUwNjM6IE5hdGl2ZUV2ZW50RW1pdHRlciBvbmx5IHVzZWQgdGhpcyBwYXJhbWV0ZXIgb24gaU9TLiBOb3cgaXQgdXNlcyBpdCBvbiBhbGwgcGxhdGZvcm1zLCBzbyB0aGlzIGNvZGUgd2FzIG1vZGlmaWVkIGF1dG9tYXRpY2FsbHkgdG8gcHJlc2VydmUgaXRzIGJlaGF2aW9yXG4gICAgICAvLyBJZiB5b3Ugd2FudCB0byB1c2UgdGhlIG5hdGl2ZSBtb2R1bGUgb24gb3RoZXIgcGxhdGZvcm1zLCBwbGVhc2UgcmVtb3ZlIHRoaXMgY29uZGl0aW9uIGFuZCB0ZXN0IGl0cyBiZWhhdmlvclxuICAgICAgUGxhdGZvcm0uT1MgIT09ICdpb3MnID8gbnVsbCA6IE5hdGl2ZUFwcGVhcmFuY2UsXG4gICAgKTtcbiAgbmF0aXZlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICdhcHBlYXJhbmNlQ2hhbmdlZCcsXG4gICAgKG5ld0FwcGVhcmFuY2U6IEFwcGVhcmFuY2VQcmVmZXJlbmNlcykgPT4ge1xuICAgICAgY29uc3Qge2NvbG9yU2NoZW1lfSA9IG5ld0FwcGVhcmFuY2U7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGNvbG9yU2NoZW1lID09PSAnZGFyaycgfHxcbiAgICAgICAgICBjb2xvclNjaGVtZSA9PT0gJ2xpZ2h0JyB8fFxuICAgICAgICAgIGNvbG9yU2NoZW1lID09IG51bGwsXG4gICAgICAgIFwiVW5yZWNvZ25pemVkIGNvbG9yIHNjaGVtZS4gRGlkIHlvdSBtZWFuICdkYXJrJyBvciAnbGlnaHQnP1wiLFxuICAgICAgKTtcbiAgICAgIGV2ZW50RW1pdHRlci5lbWl0KCdjaGFuZ2UnLCB7Y29sb3JTY2hlbWV9KTtcbiAgICB9LFxuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIE5vdGU6IEFsdGhvdWdoIGNvbG9yIHNjaGVtZSBpcyBhdmFpbGFibGUgaW1tZWRpYXRlbHksIGl0IG1heSBjaGFuZ2UgYXQgYW55XG4gICAqIHRpbWUuIEFueSByZW5kZXJpbmcgbG9naWMgb3Igc3R5bGVzIHRoYXQgZGVwZW5kIG9uIHRoaXMgc2hvdWxkIHRyeSB0byBjYWxsXG4gICAqIHRoaXMgZnVuY3Rpb24gb24gZXZlcnkgcmVuZGVyLCByYXRoZXIgdGhhbiBjYWNoaW5nIHRoZSB2YWx1ZSAoZm9yIGV4YW1wbGUsXG4gICAqIHVzaW5nIGlubGluZSBzdHlsZXMgcmF0aGVyIHRoYW4gc2V0dGluZyBhIHZhbHVlIGluIGEgYFN0eWxlU2hlZXRgKS5cbiAgICpcbiAgICogRXhhbXBsZTogYGNvbnN0IGNvbG9yU2NoZW1lID0gQXBwZWFyYW5jZS5nZXRDb2xvclNjaGVtZSgpO2BcbiAgICpcbiAgICogQHJldHVybnMgez9Db2xvclNjaGVtZU5hbWV9IFZhbHVlIGZvciB0aGUgY29sb3Igc2NoZW1lIHByZWZlcmVuY2UuXG4gICAqL1xuICBnZXRDb2xvclNjaGVtZSgpOiA/Q29sb3JTY2hlbWVOYW1lIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKGlzQXN5bmNEZWJ1Z2dpbmcpIHtcbiAgICAgICAgLy8gSGFyZCBjb2RlIGxpZ2h0IHRoZW1lIHdoZW4gdXNpbmcgdGhlIGFzeW5jIGRlYnVnZ2VyIGFzXG4gICAgICAgIC8vIHN5bmMgY2FsbHMgYXJlbid0IHN1cHBvcnRlZFxuICAgICAgICByZXR1cm4gJ2xpZ2h0JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiAoaHJhbW9zKSBUNTI5MTk2NTIgVXNlID9Db2xvclNjaGVtZU5hbWUgb25jZSBjb2RlZ2VuIHN1cHBvcnRzIHVuaW9uXG4gICAgY29uc3QgbmF0aXZlQ29sb3JTY2hlbWU6ID9zdHJpbmcgPVxuICAgICAgTmF0aXZlQXBwZWFyYW5jZSA9PSBudWxsXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IE5hdGl2ZUFwcGVhcmFuY2UuZ2V0Q29sb3JTY2hlbWUoKSB8fCBudWxsO1xuICAgIGludmFyaWFudChcbiAgICAgIG5hdGl2ZUNvbG9yU2NoZW1lID09PSAnZGFyaycgfHxcbiAgICAgICAgbmF0aXZlQ29sb3JTY2hlbWUgPT09ICdsaWdodCcgfHxcbiAgICAgICAgbmF0aXZlQ29sb3JTY2hlbWUgPT0gbnVsbCxcbiAgICAgIFwiVW5yZWNvZ25pemVkIGNvbG9yIHNjaGVtZS4gRGlkIHlvdSBtZWFuICdkYXJrJyBvciAnbGlnaHQnP1wiLFxuICAgICk7XG4gICAgcmV0dXJuIG5hdGl2ZUNvbG9yU2NoZW1lO1xuICB9LFxuXG4gIHNldENvbG9yU2NoZW1lKGNvbG9yU2NoZW1lOiA/Q29sb3JTY2hlbWVOYW1lKTogdm9pZCB7XG4gICAgY29uc3QgbmF0aXZlQ29sb3JTY2hlbWUgPSBjb2xvclNjaGVtZSA9PSBudWxsID8gJ3Vuc3BlY2lmaWVkJyA6IGNvbG9yU2NoZW1lO1xuXG4gICAgaW52YXJpYW50KFxuICAgICAgY29sb3JTY2hlbWUgPT09ICdkYXJrJyB8fCBjb2xvclNjaGVtZSA9PT0gJ2xpZ2h0JyB8fCBjb2xvclNjaGVtZSA9PSBudWxsLFxuICAgICAgXCJVbnJlY29nbml6ZWQgY29sb3Igc2NoZW1lLiBEaWQgeW91IG1lYW4gJ2RhcmsnLCAnbGlnaHQnIG9yIG51bGw/XCIsXG4gICAgKTtcblxuICAgIGlmIChOYXRpdmVBcHBlYXJhbmNlICE9IG51bGwgJiYgTmF0aXZlQXBwZWFyYW5jZS5zZXRDb2xvclNjaGVtZSAhPSBudWxsKSB7XG4gICAgICBOYXRpdmVBcHBlYXJhbmNlLnNldENvbG9yU2NoZW1lKG5hdGl2ZUNvbG9yU2NoZW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhbiBldmVudCBoYW5kbGVyIHRoYXQgaXMgZmlyZWQgd2hlbiBhcHBlYXJhbmNlIHByZWZlcmVuY2VzIGNoYW5nZS5cbiAgICovXG4gIGFkZENoYW5nZUxpc3RlbmVyKGxpc3RlbmVyOiBBcHBlYXJhbmNlTGlzdGVuZXIpOiBFdmVudFN1YnNjcmlwdGlvbiB7XG4gICAgcmV0dXJuIGV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcignY2hhbmdlJywgbGlzdGVuZXIpO1xuICB9LFxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBVUEsSUFBQUEsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQUFHLGlCQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxpQkFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBSUEsSUFBQUssVUFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBR0EsSUFBTU0sWUFBWSxHQUFHLElBQUlDLHFCQUFZLENBRWxDLENBQUM7QUFNSixJQUFJQyx5QkFBZ0IsRUFBRTtFQUNwQixJQUFNQyxrQkFBa0IsR0FDdEIsSUFBSUMsMkJBQWtCLENBR3BCQyxpQkFBUSxDQUFDQyxFQUFFLEtBQUssS0FBSyxHQUFHLElBQUksR0FBR0oseUJBQ2pDLENBQUM7RUFDSEMsa0JBQWtCLENBQUNJLFdBQVcsQ0FDNUIsbUJBQW1CLEVBQ25CLFVBQUNDLGFBQW9DLEVBQUs7SUFDeEMsSUFBT0MsV0FBVyxHQUFJRCxhQUFhLENBQTVCQyxXQUFXO0lBQ2xCLElBQUFDLGtCQUFTLEVBQ1BELFdBQVcsS0FBSyxNQUFNLElBQ3BCQSxXQUFXLEtBQUssT0FBTyxJQUN2QkEsV0FBVyxJQUFJLElBQUksRUFDckIsNERBQ0YsQ0FBQztJQUNEVCxZQUFZLENBQUNXLElBQUksQ0FBQyxRQUFRLEVBQUU7TUFBQ0YsV0FBVyxFQUFYQTtJQUFXLENBQUMsQ0FBQztFQUM1QyxDQUNGLENBQUM7QUFDSDtBQUVBRyxNQUFNLENBQUNDLE9BQU8sR0FBRztFQVdmQyxjQUFjLFdBQWRBLGNBQWNBLENBQUEsRUFBcUI7SUFDakMsSUFBSUMsT0FBTyxFQUFFO01BQ1gsSUFBSUMsa0NBQWdCLEVBQUU7UUFHcEIsT0FBTyxPQUFPO01BQ2hCO0lBQ0Y7SUFHQSxJQUFNQyxpQkFBMEIsR0FDOUJmLHlCQUFnQixJQUFJLElBQUksR0FDcEIsSUFBSSxHQUNKQSx5QkFBZ0IsQ0FBQ1ksY0FBYyxDQUFDLENBQUMsSUFBSSxJQUFJO0lBQy9DLElBQUFKLGtCQUFTLEVBQ1BPLGlCQUFpQixLQUFLLE1BQU0sSUFDMUJBLGlCQUFpQixLQUFLLE9BQU8sSUFDN0JBLGlCQUFpQixJQUFJLElBQUksRUFDM0IsNERBQ0YsQ0FBQztJQUNELE9BQU9BLGlCQUFpQjtFQUMxQixDQUFDO0VBRURDLGNBQWMsV0FBZEEsY0FBY0EsQ0FBQ1QsV0FBNkIsRUFBUTtJQUNsRCxJQUFNUSxpQkFBaUIsR0FBR1IsV0FBVyxJQUFJLElBQUksR0FBRyxhQUFhLEdBQUdBLFdBQVc7SUFFM0UsSUFBQUMsa0JBQVMsRUFDUEQsV0FBVyxLQUFLLE1BQU0sSUFBSUEsV0FBVyxLQUFLLE9BQU8sSUFBSUEsV0FBVyxJQUFJLElBQUksRUFDeEUsa0VBQ0YsQ0FBQztJQUVELElBQUlQLHlCQUFnQixJQUFJLElBQUksSUFBSUEseUJBQWdCLENBQUNnQixjQUFjLElBQUksSUFBSSxFQUFFO01BQ3ZFaEIseUJBQWdCLENBQUNnQixjQUFjLENBQUNELGlCQUFpQixDQUFDO0lBQ3BEO0VBQ0YsQ0FBQztFQUtERSxpQkFBaUIsV0FBakJBLGlCQUFpQkEsQ0FBQ0MsUUFBNEIsRUFBcUI7SUFDakUsT0FBT3BCLFlBQVksQ0FBQ08sV0FBVyxDQUFDLFFBQVEsRUFBRWEsUUFBUSxDQUFDO0VBQ3JEO0FBQ0YsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==