65f9863d10f46ab6b6ebea00e711f807
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GradientText = exports.GradientHeading = exports.Caption = exports.ButtonText = exports.BodySmall = exports.BodyLarge = exports.Body = exports.AnimatedText = exports.AnimatedHeading = void 0;
exports.Heading1 = Heading1;
exports.default = exports.Overline = exports.Label = exports.HolographicText = exports.Heading6 = exports.Heading5 = exports.Heading4 = exports.Heading3 = exports.Heading2 = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireDefault(require("react-native-reanimated"));
var _useUnifiedAnimations = require("../../hooks/useUnifiedAnimations");
var _unifiedTheme = require("../../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["variant", "weight", "color", "gradient", "gradientColors", "animated", "animationType", "style", "children"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var VARIANT_CONFIGS = {
  h1: {
    fontSize: _unifiedTheme.Theme.typography.fontSize["4xl"],
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.bold,
    lineHeight: _unifiedTheme.Theme.typography.fontSize["4xl"] * _unifiedTheme.Theme.typography.lineHeight.tight,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.tight
  },
  h2: {
    fontSize: _unifiedTheme.Theme.typography.fontSize["3xl"],
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.bold,
    lineHeight: _unifiedTheme.Theme.typography.fontSize["3xl"] * _unifiedTheme.Theme.typography.lineHeight.tight,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.tight
  },
  h3: {
    fontSize: _unifiedTheme.Theme.typography.fontSize["2xl"],
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.semibold,
    lineHeight: _unifiedTheme.Theme.typography.fontSize["2xl"] * _unifiedTheme.Theme.typography.lineHeight.normal,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.normal
  },
  h4: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.xl,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.semibold,
    lineHeight: _unifiedTheme.Theme.typography.fontSize.xl * _unifiedTheme.Theme.typography.lineHeight.normal,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.normal
  },
  h5: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.lg,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.medium,
    lineHeight: _unifiedTheme.Theme.typography.fontSize.lg * _unifiedTheme.Theme.typography.lineHeight.normal,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.normal
  },
  h6: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.base,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.medium,
    lineHeight: _unifiedTheme.Theme.typography.fontSize.base * _unifiedTheme.Theme.typography.lineHeight.normal,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.normal
  },
  body: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.base,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.normal,
    lineHeight: _unifiedTheme.Theme.typography.fontSize.base * _unifiedTheme.Theme.typography.lineHeight.normal,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.normal
  },
  bodyLarge: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.lg,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.normal,
    lineHeight: _unifiedTheme.Theme.typography.fontSize.lg * _unifiedTheme.Theme.typography.lineHeight.relaxed,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.normal
  },
  bodySmall: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.sm,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.normal,
    lineHeight: _unifiedTheme.Theme.typography.fontSize.sm * _unifiedTheme.Theme.typography.lineHeight.normal,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.normal
  },
  caption: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.xs,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.medium,
    lineHeight: _unifiedTheme.Theme.typography.fontSize.xs * _unifiedTheme.Theme.typography.lineHeight.normal,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.wide
  },
  overline: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.xs,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.semibold,
    lineHeight: _unifiedTheme.Theme.typography.fontSize.xs * _unifiedTheme.Theme.typography.lineHeight.normal,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.wide,
    textTransform: "uppercase"
  },
  button: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.base,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.semibold,
    lineHeight: _unifiedTheme.Theme.typography.fontSize.base * _unifiedTheme.Theme.typography.lineHeight.normal,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.normal
  },
  label: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.sm,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.medium,
    lineHeight: _unifiedTheme.Theme.typography.fontSize.sm * _unifiedTheme.Theme.typography.lineHeight.normal,
    letterSpacing: _unifiedTheme.Theme.typography.letterSpacing.normal
  }
};
function ModernText(_ref) {
  var _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "body" : _ref$variant,
    weight = _ref.weight,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? "primary" : _ref$color,
    gradient = _ref.gradient,
    gradientColors = _ref.gradientColors,
    _ref$animated = _ref.animated,
    animated = _ref$animated === void 0 ? false : _ref$animated,
    _ref$animationType = _ref.animationType,
    animationType = _ref$animationType === void 0 ? "slideIn" : _ref$animationType,
    style = _ref.style,
    children = _ref.children,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var variantConfig = VARIANT_CONFIGS[variant];
  var textColorKey = color || 'primary';
  var textColor = _unifiedTheme.Theme.colors.text[textColorKey];
  var textStyle = _objectSpread(_objectSpread({}, variantConfig), {}, {
    color: textColor
  }, weight && {
    fontWeight: _unifiedTheme.Theme.typography.fontWeight[weight]
  });
  var _useEntranceAnimation = (0, _useUnifiedAnimations.useEntranceAnimation)(animationType),
    startEntrance = _useEntranceAnimation.start,
    entranceStyle = _useEntranceAnimation.animatedStyle;
  _react.default.useEffect(function () {
    if (animated) {
      startEntrance();
    }
  }, [animated, startEntrance]);
  if (gradient || gradientColors) {
    var gradientConfig = gradient ? _unifiedTheme.Theme.gradients && _unifiedTheme.Theme.gradients[gradient] : null;
    var colors = gradientColors || (gradientConfig && typeof gradientConfig === 'object' && 'colors' in gradientConfig ? gradientConfig.colors : null) || [_unifiedTheme.Theme.colors.primary[500], _unifiedTheme.Theme.colors.primary[400]];
    var _GradientText = function _GradientText() {
      return (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
        colors: colors,
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        },
        style: styles.gradientContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, _objectSpread(_objectSpread({
          style: _reactNative.StyleSheet.flatten([textStyle, styles.gradientText, style])
        }, props), {}, {
          children: children
        }))
      });
    };
    if (animated) {
      return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        style: entranceStyle,
        children: (0, _jsxRuntime.jsx)(_GradientText, {})
      });
    }
    return (0, _jsxRuntime.jsx)(_GradientText, {});
  }
  if (animated) {
    return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.Text, _objectSpread(_objectSpread({
      style: _reactNative.StyleSheet.flatten([textStyle, entranceStyle, style])
    }, props), {}, {
      children: children
    }));
  }
  return (0, _jsxRuntime.jsx)(_reactNative.Text, _objectSpread(_objectSpread({
    style: _reactNative.StyleSheet.flatten([textStyle, style])
  }, props), {}, {
    children: children
  }));
}
function Heading1(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "h1"
  }, props));
}
var Heading2 = exports.Heading2 = function Heading2(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "h2"
  }, props));
};
var Heading3 = exports.Heading3 = function Heading3(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "h3"
  }, props));
};
var Heading4 = exports.Heading4 = function Heading4(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "h4"
  }, props));
};
var Heading5 = exports.Heading5 = function Heading5(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "h5"
  }, props));
};
var Heading6 = exports.Heading6 = function Heading6(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "h6"
  }, props));
};
var Body = exports.Body = function Body(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "body"
  }, props));
};
var BodyLarge = exports.BodyLarge = function BodyLarge(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "bodyLarge"
  }, props));
};
var BodySmall = exports.BodySmall = function BodySmall(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "bodySmall"
  }, props));
};
var Caption = exports.Caption = function Caption(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "caption"
  }, props));
};
var Overline = exports.Overline = function Overline(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "overline"
  }, props));
};
var ButtonText = exports.ButtonText = function ButtonText(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "button"
  }, props));
};
var Label = exports.Label = function Label(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "label"
  }, props));
};
var GradientHeading = exports.GradientHeading = function GradientHeading(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "h1",
    gradient: "primary"
  }, props));
};
var GradientText = exports.GradientText = function GradientText(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    gradient: "primary"
  }, props));
};
var HolographicText = exports.HolographicText = function HolographicText(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    gradient: "holographic"
  }, props));
};
var AnimatedHeading = exports.AnimatedHeading = function AnimatedHeading(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    variant: "h1",
    animated: true
  }, props));
};
var AnimatedText = exports.AnimatedText = function AnimatedText(props) {
  return (0, _jsxRuntime.jsx)(ModernText, _objectSpread({
    animated: true
  }, props));
};
var styles = _reactNative.StyleSheet.create({
  gradientContainer: {},
  gradientText: {}
});
var _default = exports.default = ModernText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,