92a6d3bcd58d73a5152e58adb1a05e9d
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../../services/premiumService", function () {
  return {
    premiumService: {
      hasActiveSubscription: _globals.jest.fn(),
      getSubscriptionDetails: _globals.jest.fn()
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _usePremiumStatus = require("../usePremiumStatus");
var _premiumService = require("../../../services/premiumService");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockPremiumService = _premiumService.premiumService;
(0, _globals.describe)('usePremiumStatus', function () {
  var mockSubscriptionDetails = {
    isActive: true,
    plan: 'premium',
    features: ['unlimited_swipes', 'super_likes', 'boosts'],
    autoRenew: true,
    currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
    cancelAtPeriodEnd: false
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockAsyncStorage.removeItem.mockResolvedValue(undefined);
    mockPremiumService.hasActiveSubscription.mockResolvedValue(true);
    mockPremiumService.getSubscriptionDetails.mockResolvedValue(mockSubscriptionDetails);
  });
  (0, _globals.afterEach)(function () {
    _globals.jest.clearAllTimers();
  });
  (0, _globals.describe)('Initial State', function () {
    (0, _globals.it)('should initialize with default state', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.isPremium).toBe(false);
      (0, _globals.expect)(result.current.isLoading).toBe(false);
      (0, _globals.expect)(result.current.subscriptionDetails).toBeNull();
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.lastChecked).toBeNull();
    });
    (0, _globals.it)('should load cached premium status on mount', (0, _asyncToGenerator2.default)(function* () {
      var cachedData = {
        isPremium: true,
        subscriptionDetails: mockSubscriptionDetails,
        lastChecked: Date.now()
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(cachedData));
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isPremium).toBe(true);
        (0, _globals.expect)(result.current.subscriptionDetails).toEqual(mockSubscriptionDetails);
        (0, _globals.expect)(result.current.lastChecked).toBe(cachedData.lastChecked);
      });
    }));
    (0, _globals.it)('should handle corrupted cache data gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('invalid json');
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook3.result;
      (0, _globals.expect)(result.current.isPremium).toBe(false);
      (0, _globals.expect)(result.current.error).toBeNull();
    }));
  });
  (0, _globals.describe)('Status Checking', function () {
    (0, _globals.it)('should check premium status successfully', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(mockPremiumService.hasActiveSubscription).toHaveBeenCalled();
      (0, _globals.expect)(mockPremiumService.getSubscriptionDetails).toHaveBeenCalled();
      (0, _globals.expect)(result.current.isPremium).toBe(true);
      (0, _globals.expect)(result.current.isLoading).toBe(false);
      (0, _globals.expect)(result.current.subscriptionDetails).toEqual(mockSubscriptionDetails);
      (0, _globals.expect)(result.current.lastChecked).toBeGreaterThan(0);
    }));
    (0, _globals.it)('should handle inactive subscription', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.hasActiveSubscription.mockResolvedValue(false);
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.isPremium).toBe(false);
      (0, _globals.expect)(result.current.subscriptionDetails).toBeNull();
    }));
    (0, _globals.it)('should handle loading state during status check', (0, _asyncToGenerator2.default)(function* () {
      var resolveCheck;
      var checkPromise = new Promise(function (resolve) {
        resolveCheck = resolve;
      });
      mockPremiumService.hasActiveSubscription.mockReturnValue(checkPromise);
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.checkStatus();
      });
      (0, _globals.expect)(result.current.isLoading).toBe(true);
      (0, _reactNative.act)(function () {
        resolveCheck(true);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
        (0, _globals.expect)(result.current.isPremium).toBe(true);
      });
    }));
    (0, _globals.it)('should handle status check errors', (0, _asyncToGenerator2.default)(function* () {
      var errorMessage = 'Network error';
      mockPremiumService.hasActiveSubscription.mockRejectedValue(new Error(errorMessage));
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.isLoading).toBe(false);
      (0, _globals.expect)(result.current.error).toBe(errorMessage);
      (0, _globals.expect)(result.current.isPremium).toBe(false);
    }));
    (0, _globals.it)('should clear previous errors on successful check', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.hasActiveSubscription.mockRejectedValueOnce(new Error('First error'));
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.error).toBe('First error');
      mockPremiumService.hasActiveSubscription.mockResolvedValueOnce(true);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.isPremium).toBe(true);
    }));
  });
  (0, _globals.describe)('Cache Management', function () {
    (0, _globals.it)('should cache premium status data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('premium_status_cache', _globals.expect.any(String));
      var cachedData = JSON.parse(mockAsyncStorage.setItem.mock.calls[0][1]);
      (0, _globals.expect)(cachedData.isPremium).toBe(true);
      (0, _globals.expect)(cachedData.subscriptionDetails).toEqual(mockSubscriptionDetails);
      (0, _globals.expect)(cachedData.lastChecked).toBeDefined();
    }));
    (0, _globals.it)('should use cached data when not expired', (0, _asyncToGenerator2.default)(function* () {
      var recentCache = {
        isPremium: true,
        subscriptionDetails: mockSubscriptionDetails,
        lastChecked: Date.now() - 5 * 60 * 1000
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(recentCache));
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isPremium).toBe(true);
      });
      (0, _globals.expect)(mockPremiumService.hasActiveSubscription).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should refresh expired cache', (0, _asyncToGenerator2.default)(function* () {
      var expiredCache = {
        isPremium: true,
        subscriptionDetails: mockSubscriptionDetails,
        lastChecked: Date.now() - 20 * 60 * 1000
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(expiredCache));
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook1.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockPremiumService.hasActiveSubscription).toHaveBeenCalled();
      });
    }));
    (0, _globals.it)('should clear cache when requested', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook10.result;
      (0, _reactNative.act)(function () {
        result.current.isPremium = true;
        result.current.subscriptionDetails = mockSubscriptionDetails;
        result.current.lastChecked = Date.now();
      });
      (0, _reactNative.act)(function () {
        result.current.clearCache();
      });
      (0, _globals.expect)(result.current.isPremium).toBe(false);
      (0, _globals.expect)(result.current.subscriptionDetails).toBeNull();
      (0, _globals.expect)(result.current.lastChecked).toBeNull();
      (0, _globals.expect)(mockAsyncStorage.removeItem).toHaveBeenCalledWith('premium_status_cache');
    }));
  });
  (0, _globals.describe)('Auto Refresh', function () {
    (0, _globals.it)('should auto-refresh status periodically', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)({
            autoRefresh: true,
            refreshInterval: 1000
          });
        }),
        result = _renderHook11.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockPremiumService.hasActiveSubscription).toHaveBeenCalledTimes(1);
      });
      _globals.jest.advanceTimersByTime(1000);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockPremiumService.hasActiveSubscription).toHaveBeenCalledTimes(2);
      });
    }));
    (0, _globals.it)('should disable auto-refresh when option is false', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)({
            autoRefresh: false
          });
        }),
        result = _renderHook12.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockPremiumService.hasActiveSubscription).toHaveBeenCalledTimes(1);
      });
      _globals.jest.advanceTimersByTime(5000);
      (0, _globals.expect)(mockPremiumService.hasActiveSubscription).toHaveBeenCalledTimes(1);
    }));
    (0, _globals.it)('should handle auto-refresh errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.hasActiveSubscription.mockRejectedValue(new Error('Refresh error'));
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)({
            autoRefresh: true,
            refreshInterval: 1000
          });
        }),
        result = _renderHook13.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.error).toBe('Refresh error');
      });
      _globals.jest.advanceTimersByTime(1000);
      mockPremiumService.hasActiveSubscription.mockResolvedValue(true);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.error).toBeNull();
        (0, _globals.expect)(result.current.isPremium).toBe(true);
      });
    }));
  });
  (0, _globals.describe)('Subscription Details', function () {
    (0, _globals.it)('should fetch detailed subscription information', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook14.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.subscriptionDetails).toEqual(mockSubscriptionDetails);
    }));
    (0, _globals.it)('should handle subscription details errors', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.getSubscriptionDetails.mockRejectedValue(new Error('Details error'));
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.subscriptionDetails).toBeNull();
      (0, _globals.expect)(result.current.error).toBe('Details error');
    }));
    (0, _globals.it)('should provide subscription utilities', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.isSubscriptionActive()).toBe(true);
      (0, _globals.expect)(result.current.getDaysUntilRenewal()).toBeGreaterThan(25);
      (0, _globals.expect)(result.current.hasFeature('unlimited_swipes')).toBe(true);
      (0, _globals.expect)(result.current.hasFeature('nonexistent_feature')).toBe(false);
    }));
    (0, _globals.it)('should handle cancelled subscriptions', (0, _asyncToGenerator2.default)(function* () {
      var cancelledDetails = _objectSpread(_objectSpread({}, mockSubscriptionDetails), {}, {
        cancelAtPeriodEnd: true
      });
      mockPremiumService.getSubscriptionDetails.mockResolvedValue(cancelledDetails);
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.isSubscriptionActive()).toBe(true);
      (0, _globals.expect)(result.current.isSubscriptionCancelled()).toBe(true);
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle network errors during status check', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.hasActiveSubscription.mockRejectedValue(new Error('Network Error'));
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook18.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.error).toBe('Network Error');
    }));
    (0, _globals.it)('should handle server errors with custom messages', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.hasActiveSubscription.mockRejectedValue({
        message: 'Subscription service unavailable'
      });
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook19.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.error).toBe('Subscription service unavailable');
    }));
    (0, _globals.it)('should handle AsyncStorage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockRejectedValue(new Error('Storage full'));
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook20.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.isPremium).toBe(true);
    }));
    (0, _globals.it)('should reset error state on successful operations', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.hasActiveSubscription.mockRejectedValueOnce(new Error('First error'));
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook21.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.error).toBe('First error');
      mockPremiumService.hasActiveSubscription.mockResolvedValueOnce(true);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty subscription details', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.getSubscriptionDetails.mockResolvedValue(null);
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook22.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.subscriptionDetails).toBeNull();
      (0, _globals.expect)(result.current.isPremium).toBe(true);
    }));
    (0, _globals.it)('should handle subscription with no features', (0, _asyncToGenerator2.default)(function* () {
      var noFeaturesDetails = _objectSpread(_objectSpread({}, mockSubscriptionDetails), {}, {
        features: []
      });
      mockPremiumService.getSubscriptionDetails.mockResolvedValue(noFeaturesDetails);
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook23.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.hasFeature('any_feature')).toBe(false);
    }));
    (0, _globals.it)('should handle very old cached data', (0, _asyncToGenerator2.default)(function* () {
      var veryOldCache = {
        isPremium: false,
        subscriptionDetails: null,
        lastChecked: Date.now() - 7 * 24 * 60 * 60 * 1000
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(veryOldCache));
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook24.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockPremiumService.hasActiveSubscription).toHaveBeenCalled();
      });
    }));
    (0, _globals.it)('should handle rapid consecutive status checks', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook25.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield Promise.all([result.current.checkStatus(), result.current.checkStatus(), result.current.checkStatus()]);
      }));
      (0, _globals.expect)(mockPremiumService.hasActiveSubscription).toHaveBeenCalledTimes(1);
    }));
    (0, _globals.it)('should handle malformed subscription data', (0, _asyncToGenerator2.default)(function* () {
      var malformedDetails = {
        isActive: true
      };
      mockPremiumService.getSubscriptionDetails.mockResolvedValue(malformedDetails);
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)();
        }),
        result = _renderHook26.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(result.current.subscriptionDetails).toBeDefined();
    }));
  });
  (0, _globals.describe)('Hook Configuration', function () {
    (0, _globals.it)('should accept custom cache key', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook27 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)({
            cacheKey: 'custom_premium_cache'
          });
        }),
        result = _renderHook27.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('custom_premium_cache', _globals.expect.any(String));
    }));
    (0, _globals.it)('should accept custom cache expiration', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook28 = (0, _reactNative.renderHook)(function () {
          return (0, _usePremiumStatus.usePremiumStatus)({
            cacheExpirationMs: 1000
          });
        }),
        result = _renderHook28.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 1100);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.checkStatus();
      }));
      (0, _globals.expect)(mockPremiumService.hasActiveSubscription).toHaveBeenCalledTimes(2);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,