23a797851915f4b184535791240075bd
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PetPhotosSection = void 0;
var _vectorIcons = require("@expo/vector-icons");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _useExtendedTheme = require("../../hooks/useExtendedTheme");
var _jsxRuntime = require("react/jsx-runtime");
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  screenWidth = _Dimensions$get.width;
var PetPhotosSection = exports.PetPhotosSection = function PetPhotosSection(_ref) {
  var photos = _ref.photos,
    errors = _ref.errors,
    onPickImage = _ref.onPickImage,
    onRemovePhoto = _ref.onRemovePhoto,
    onSetPrimaryPhoto = _ref.onSetPrimaryPhoto;
  var colors = (0, _useExtendedTheme.useExtendedColors)();
  var hasUploadingPhotos = photos.some(function (p) {
    return p.isUploading;
  });
  var hasErrorPhotos = photos.some(function (p) {
    return p.error;
  });
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.section,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.sectionTitle,
      children: "Photos"
    }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      style: styles.addPhotoButton,
      onPress: onPickImage,
      disabled: photos.length >= 10,
      children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "camera",
        size: 24,
        color: colors.textSecondary
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.addPhotoText,
        children: photos.length === 0 ? "Add Photos" : `Add More Photos (${photos.length}/10)`
      })]
    }), errors.photos && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.errorText,
      children: errors.photos
    }), hasUploadingPhotos && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.uploadStatusContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        size: "small",
        color: "#8B5CF6"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.uploadStatusText,
        children: "Uploading photos..."
      })]
    }), hasErrorPhotos && !hasUploadingPhotos && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.errorContainer,
      children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "alert-circle",
        size: 16,
        color: "#EF4444"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorStatusText,
        children: "Some photos failed to upload. Please try again."
      })]
    }), photos.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.photosGrid,
      children: photos.map(function (photo, index) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.photoContainer,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
            source: {
              uri: photo.uploadedUrl || photo.uri
            },
            style: styles.photo,
            resizeMode: "cover"
          }), photo.isUploading && photo.uploadProgress && (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.progressOverlay,
            children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
              size: "small",
              color: "#FFFFFF"
            }), photo.uploadProgress.percentage < 100 && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.progressText,
              children: [photo.uploadProgress.percentage, "%"]
            })]
          }), photo.error && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.errorOverlay,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "alert-circle",
              size: 20,
              color: "#EF4444"
            })
          }), photo.uploadedUrl && !photo.isUploading && !photo.error && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.successIndicator,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "checkmark-circle",
              size: 20,
              color: "#10B981"
            })
          }), photo.isPrimary && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.primaryBadge,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.primaryBadgeText,
              children: "Primary"
            })
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.photoActions,
            children: [!photo.isPrimary && !photo.isUploading && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: styles.photoActionButton,
              onPress: function onPress() {
                onSetPrimaryPhoto(index);
              },
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "star",
                size: 16,
                color: colors.white
              })
            }), !photo.isUploading && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: _reactNative.StyleSheet.flatten([styles.photoActionButton, styles.deleteButton]),
              onPress: function onPress() {
                onRemovePhoto(index);
              },
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "trash",
                size: 16,
                color: colors.white
              })
            })]
          })]
        }, index);
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: styles.photoHint,
      children: ["\u2022 Upload up to 10 photos (max 5MB each)", "\n", "\u2022 First photo will be set as primary", "\n", "\u2022 Supported formats: JPG, PNG, GIF"]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  section: {
    marginBottom: 32
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "Theme.colors.neutral[900]",
    marginBottom: 16
  },
  errorText: {
    fontSize: 14,
    color: "Theme.colors.status.error",
    marginTop: 4
  },
  addPhotoButton: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    padding: 16,
    borderWidth: 2,
    borderColor: "Theme.colors.neutral[300]",
    borderRadius: 12,
    backgroundColor: "Theme.colors.background.secondary",
    borderStyle: "dashed"
  },
  addPhotoText: {
    fontSize: 16,
    color: "Theme.colors.neutral[500]",
    marginLeft: 8,
    fontWeight: "500"
  },
  photosGrid: {
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 12,
    marginTop: 16
  },
  photoContainer: {
    width: (screenWidth - 40 - 24) / 3,
    height: (screenWidth - 40 - 24) / 3,
    position: "relative"
  },
  photo: {
    width: "100%",
    height: "100%",
    borderRadius: 8
  },
  primaryBadge: {
    position: "absolute",
    top: 4,
    left: 4,
    backgroundColor: "rgba(139, 92, 246, 0.9)",
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4
  },
  primaryBadgeText: {
    fontSize: 10,
    color: "Theme.colors.neutral[0]",
    fontWeight: "bold"
  },
  photoActions: {
    position: "absolute",
    top: 4,
    right: 4,
    flexDirection: "row",
    gap: 4
  },
  photoActionButton: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: "rgba(0, 0, 0, 0.6)",
    justifyContent: "center",
    alignItems: "center"
  },
  deleteButton: {
    backgroundColor: "rgba(239, 68, 68, 0.8)"
  },
  photoHint: {
    fontSize: 12,
    color: "Theme.colors.neutral[500]",
    marginTop: 12,
    lineHeight: 18
  },
  uploadStatusContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 12,
    marginTop: 8,
    backgroundColor: "#F3E8FF",
    borderRadius: 8,
    gap: 8
  },
  uploadStatusText: {
    fontSize: 14,
    color: "#8B5CF6",
    fontWeight: "500"
  },
  errorContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 12,
    marginTop: 8,
    backgroundColor: "#FEE2E2",
    borderRadius: 8,
    gap: 8
  },
  errorStatusText: {
    fontSize: 14,
    color: "#EF4444",
    fontWeight: "500"
  },
  progressOverlay: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    gap: 4
  },
  progressText: {
    color: "#FFFFFF",
    fontSize: 12,
    fontWeight: "600",
    marginTop: 4
  },
  errorOverlay: {
    position: "absolute",
    top: 4,
    left: 4,
    backgroundColor: "rgba(255, 255, 255, 0.9)",
    borderRadius: 12,
    padding: 2
  },
  successIndicator: {
    position: "absolute",
    top: 4,
    left: 4,
    backgroundColor: "rgba(255, 255, 255, 0.9)",
    borderRadius: 12,
    padding: 2
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,