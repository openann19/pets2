7f2f49beca6f4de793e0dee0cd0c57b9
"use strict";

_getJestObj().mock("../../services/api", function () {
  return {
    matchesAPI: {
      getMyPets: jest.fn(),
      deletePet: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _native = require("@react-navigation/native");
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("react-native");
var _api = require("../../services/api");
var _MyPetsScreen = _interopRequireDefault(require("../MyPetsScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createStackNavigator = jest.fn(function () {
  return {
    Navigator: function Navigator(_ref) {
      var children = _ref.children;
      return children;
    },
    Screen: function Screen(_ref2) {
      var children = _ref2.children;
      return children;
    }
  };
});
jest.spyOn(_reactNative2.Alert, "alert");
var mockNavigate = jest.fn();
var mockGoBack = jest.fn();
var Stack = createStackNavigator();
var TestNavigator = function TestNavigator(_ref3) {
  var children = _ref3.children;
  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsxs)(Stack.Navigator, {
      children: [(0, _jsxRuntime.jsx)(Stack.Screen, {
        name: "MyPets",
        component: function component() {
          return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
            children: children
          });
        },
        options: {
          headerShown: false
        }
      }), (0, _jsxRuntime.jsx)(Stack.Screen, {
        name: "CreatePet",
        component: function component() {
          return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
        },
        options: {
          headerShown: false
        }
      }), (0, _jsxRuntime.jsx)(Stack.Screen, {
        name: "PetDetail",
        component: function component() {
          return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
        },
        options: {
          headerShown: false
        }
      }), (0, _jsxRuntime.jsx)(Stack.Screen, {
        name: "EditPet",
        component: function component() {
          return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
        },
        options: {
          headerShown: false
        }
      })]
    })
  });
};
var mockNavigation = {
  navigate: mockNavigate,
  goBack: mockGoBack,
  setOptions: jest.fn(),
  addListener: jest.fn(),
  removeListener: jest.fn(),
  canGoBack: jest.fn(),
  getId: jest.fn(),
  getParent: jest.fn(),
  getState: jest.fn(),
  dispatch: jest.fn(),
  isFocused: jest.fn(),
  reset: jest.fn(),
  replace: jest.fn(),
  push: jest.fn(),
  pop: jest.fn(),
  popToTop: jest.fn()
};
var mockRoute = {
  key: "test-key",
  name: "MyPets",
  params: undefined
};
describe("MyPetsScreen", function () {
  var mockPets = [{
    _id: "1",
    name: "Buddy",
    species: "dog",
    breed: "Golden Retriever",
    age: 3,
    gender: "male",
    size: "large",
    intent: "playdate",
    photos: [{
      url: "https://example.com/buddy.jpg",
      isPrimary: true
    }],
    personalityTags: ["friendly", "energetic"],
    healthInfo: {
      vaccinated: true,
      spayedNeutered: true,
      microchipped: true,
      specialNeeds: false
    },
    location: {
      type: "Point",
      coordinates: [0, 0],
      address: {
        city: "New York",
        state: "NY",
        country: "US"
      }
    },
    analytics: {
      views: 45,
      likes: 12,
      matches: 3,
      messages: 1
    },
    isActive: true,
    status: "active",
    owner: {
      _id: "owner1",
      name: "John Doe",
      email: "john@example.com"
    },
    listedAt: "2024-01-01T00:00:00.000Z",
    createdAt: "2024-01-01T00:00:00.000Z"
  }, {
    _id: "2",
    name: "Luna",
    species: "cat",
    breed: "Siamese",
    age: 2,
    gender: "female",
    size: "small",
    intent: "adoption",
    photos: [{
      url: "https://example.com/luna.jpg",
      isPrimary: true
    }],
    personalityTags: ["calm", "gentle"],
    healthInfo: {
      vaccinated: true,
      spayedNeutered: true,
      microchipped: false,
      specialNeeds: false
    },
    location: {
      type: "Point",
      coordinates: [0, 0],
      address: {
        city: "New York",
        state: "NY",
        country: "US"
      }
    },
    analytics: {
      views: 23,
      likes: 8,
      matches: 1,
      messages: 0
    },
    isActive: true,
    status: "active",
    owner: {
      _id: "owner1",
      name: "John Doe",
      email: "john@example.com"
    },
    listedAt: "2024-01-15T00:00:00.000Z",
    createdAt: "2024-01-15T00:00:00.000Z"
  }];
  beforeEach(function () {
    jest.clearAllMocks();
    _api.matchesAPI.getMyPets.mockResolvedValue(mockPets);
    _api.matchesAPI.deletePet.mockResolvedValue(true);
  });
  it("renders correctly with pets", (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId,
      debug = _render.debug;
    debug();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText("My Pets")).toBeTruthy();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText("Buddy")).toBeTruthy();
      expect(getByText("Luna")).toBeTruthy();
    });
  }));
  it("displays loading state initially", function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render2.getByText;
    expect(getByText("Loading pets...")).toBeTruthy();
  });
  it("shows empty state when no pets", (0, _asyncToGenerator2.default)(function* () {
    _api.matchesAPI.getMyPets.mockResolvedValue([]);
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render3.getByText,
      getByTestId = _render3.getByTestId,
      queryByText = _render3.queryByText,
      queryByTestId = _render3.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText("No Pets Yet")).toBeTruthy();
      expect(getByText("Start building your pet's profile to find amazing matches and new friends!")).toBeTruthy();
    });
  }));
  it("navigates to CreatePet when add button is pressed", (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByTestId = _render4.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var addButton = getByTestId("add-button");
      _reactNative.fireEvent.press(addButton);
      expect(mockNavigate).toHaveBeenCalledWith("CreatePet");
    });
  }));
  it("navigates to CreatePet when empty state button is pressed", (0, _asyncToGenerator2.default)(function* () {
    _api.matchesAPI.getMyPets.mockResolvedValue([]);
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render5.getByText,
      getByTestId = _render5.getByTestId,
      queryByText = _render5.queryByText,
      queryByTestId = _render5.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var createButton = getByText("Create Your First Pet Profile");
      _reactNative.fireEvent.press(createButton);
      expect(mockNavigate).toHaveBeenCalledWith("CreatePet");
    });
  }));
  it("navigates to PetDetail when pet card is pressed", (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render6.getByText,
      getByTestId = _render6.getByTestId,
      queryByText = _render6.queryByText,
      queryByTestId = _render6.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var petCard = getByText("Buddy");
      _reactNative.fireEvent.press(petCard);
      expect(mockNavigate).toHaveBeenCalledWith("PetDetail", {
        petId: "1"
      });
    });
  }));
  it("navigates to EditPet when edit button is pressed", (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByTestId = _render7.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var editButton = getByTestId("edit-button-1");
      _reactNative.fireEvent.press(editButton);
      expect(mockNavigate).toHaveBeenCalledWith("EditPet", {
        petId: "1"
      });
    });
  }));
  it("shows delete confirmation dialog when delete button is pressed", (0, _asyncToGenerator2.default)(function* () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByTestId = _render8.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var deleteButton = getByTestId("delete-button-1");
      _reactNative.fireEvent.press(deleteButton);
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Delete Pet Profile", "Are you sure you want to delete this pet profile? This action cannot be undone.", expect.any(Array));
  }));
  it("deletes pet when confirmation is accepted", (0, _asyncToGenerator2.default)(function* () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByTestId = _render9.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var deleteButton = getByTestId("delete-button-1");
      _reactNative.fireEvent.press(deleteButton);
    });
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmAction = alertCall[2][1];
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      confirmAction.onPress();
    }));
    expect(_api.matchesAPI.deletePet).toHaveBeenCalledWith("1");
  }));
  it("handles API error gracefully", (0, _asyncToGenerator2.default)(function* () {
    var consoleErrorSpy = jest.spyOn(console, "error").mockImplementation();
    _api.matchesAPI.getMyPets.mockRejectedValue(new Error("Network error"));
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render0.getByText,
      getByTestId = _render0.getByTestId,
      queryByText = _render0.queryByText,
      queryByTestId = _render0.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Connection Error", "Network error", expect.any(Array));
    });
    consoleErrorSpy.mockRestore();
  }));
  it("refreshes data when pull-to-refresh is triggered", (0, _asyncToGenerator2.default)(function* () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByTestId = _render1.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(_api.matchesAPI.getMyPets).toHaveBeenCalledTimes(1);
    });
    var flatList = getByTestId("pets-flatlist");
    (0, _reactNative.fireEvent)(flatList, "onRefresh");
    yield (0, _reactNative.waitFor)(function () {
      expect(_api.matchesAPI.getMyPets).toHaveBeenCalledTimes(2);
    });
  }));
  it("displays correct pet information", (0, _asyncToGenerator2.default)(function* () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render10.getByText,
      getByTestId = _render10.getByTestId,
      queryByText = _render10.queryByText,
      queryByTestId = _render10.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText("Buddy")).toBeTruthy();
      expect(getByText("Luna")).toBeTruthy();
      expect(getByText("Golden Retriever")).toBeTruthy();
      expect(getByText("Siamese")).toBeTruthy();
      expect(getByText("3 years • male • large")).toBeTruthy();
      expect(getByText("2 years • female • small")).toBeTruthy();
    });
  }));
  it("displays correct species emojis", (0, _asyncToGenerator2.default)(function* () {
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render11.getByText,
      getByTestId = _render11.getByTestId,
      queryByText = _render11.queryByText,
      queryByTestId = _render11.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText("🐕")).toBeTruthy();
      expect(getByText("🐱")).toBeTruthy();
    });
  }));
  it("displays intent badges correctly", (0, _asyncToGenerator2.default)(function* () {
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render12.getByText,
      getByTestId = _render12.getByTestId,
      queryByText = _render12.queryByText,
      queryByTestId = _render12.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText("Playdates")).toBeTruthy();
      expect(getByText("For Adoption")).toBeTruthy();
    });
  }));
  it("shows photo count badge when pet has multiple photos", (0, _asyncToGenerator2.default)(function* () {
    var petWithMultiplePhotos = _objectSpread(_objectSpread({}, mockPets[0]), {}, {
      photos: [{
        url: "https://example.com/buddy1.jpg",
        isPrimary: true
      }, {
        url: "https://example.com/buddy2.jpg",
        isPrimary: false
      }, {
        url: "https://example.com/buddy3.jpg",
        isPrimary: false
      }]
    });
    _api.matchesAPI.getMyPets.mockResolvedValue([petWithMultiplePhotos]);
    var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render13.getByText,
      getByTestId = _render13.getByTestId,
      queryByText = _render13.queryByText,
      queryByTestId = _render13.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText("3")).toBeTruthy();
    });
  }));
  it("displays placeholder when pet has no photos", (0, _asyncToGenerator2.default)(function* () {
    var petWithoutPhotos = _objectSpread(_objectSpread({}, mockPets[0]), {}, {
      photos: []
    });
    _api.matchesAPI.getMyPets.mockResolvedValue([petWithoutPhotos]);
    var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render14.getByText,
      getByTestId = _render14.getByTestId,
      queryByText = _render14.queryByText,
      queryByTestId = _render14.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText("🐕")).toBeTruthy();
    });
  }));
  it("handles back button press", (0, _asyncToGenerator2.default)(function* () {
    var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByTestId = _render15.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var backButton = getByTestId("back-button");
      _reactNative.fireEvent.press(backButton);
      expect(mockGoBack).toHaveBeenCalled();
    });
  }));
  it("displays correct pet count in header", (0, _asyncToGenerator2.default)(function* () {
    var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render16.getByText,
      getByTestId = _render16.getByTestId,
      queryByText = _render16.queryByText,
      queryByTestId = _render16.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText("2 pets profiles")).toBeTruthy();
    });
  }));
  it("displays singular form for single pet", (0, _asyncToGenerator2.default)(function* () {
    _api.matchesAPI.getMyPets.mockResolvedValue([mockPets[0]]);
    var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render17.getByText,
      getByTestId = _render17.getByTestId,
      queryByText = _render17.queryByText,
      queryByTestId = _render17.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText("1 pet profile")).toBeTruthy();
    });
  }));
  it("handles delete error gracefully", (0, _asyncToGenerator2.default)(function* () {
    var consoleErrorSpy = jest.spyOn(console, "error").mockImplementation();
    _api.matchesAPI.deletePet.mockRejectedValue(new Error("Delete failed"));
    var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByTestId = _render18.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var deleteButton = getByTestId("delete-button-1");
      _reactNative.fireEvent.press(deleteButton);
    });
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmAction = alertCall[2][1];
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      confirmAction.onPress();
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Error", "Failed to delete pet profile. Please check your connection and try again.", [{
        text: "OK"
      }]);
    });
    consoleErrorSpy.mockRestore();
  }));
  it("cancels delete when user cancels confirmation", (0, _asyncToGenerator2.default)(function* () {
    var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {
        children: (0, _jsxRuntime.jsx)(_MyPetsScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByTestId = _render19.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var deleteButton = getByTestId("delete-button-1");
      _reactNative.fireEvent.press(deleteButton);
    });
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var cancelAction = alertCall[2][0];
    cancelAction.onPress();
    expect(_api.matchesAPI.deletePet).not.toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,