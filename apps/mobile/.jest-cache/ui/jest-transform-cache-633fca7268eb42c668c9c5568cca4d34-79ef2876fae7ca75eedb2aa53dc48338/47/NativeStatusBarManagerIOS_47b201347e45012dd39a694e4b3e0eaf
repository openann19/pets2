fc3271fcd2ee5c7923659d34db2d9835
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var TurboModuleRegistry = _interopRequireWildcard(require("../../TurboModule/TurboModuleRegistry"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
var constants = null;
var NativeStatusBarManager = {
  getConstants: function getConstants() {
    if (constants == null) {
      constants = NativeModule.getConstants();
    }
    return constants;
  },
  getHeight: function getHeight(callback) {
    NativeModule.getHeight(callback);
  },
  setNetworkActivityIndicatorVisible: function setNetworkActivityIndicatorVisible(visible) {
    NativeModule.setNetworkActivityIndicatorVisible(visible);
  },
  addListener: function addListener(eventType) {
    NativeModule.addListener(eventType);
  },
  removeListeners: function removeListeners(count) {
    NativeModule.removeListeners(count);
  },
  setStyle: function setStyle(statusBarStyle, animated) {
    NativeModule.setStyle(statusBarStyle, animated);
  },
  setHidden: function setHidden(hidden, withAnimation) {
    NativeModule.setHidden(hidden, withAnimation);
  }
};
var _default = exports.default = NativeStatusBarManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUdXJib01vZHVsZVJlZ2lzdHJ5IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJOYXRpdmVNb2R1bGUiLCJnZXRFbmZvcmNpbmciLCJjb25zdGFudHMiLCJOYXRpdmVTdGF0dXNCYXJNYW5hZ2VyIiwiZ2V0Q29uc3RhbnRzIiwiZ2V0SGVpZ2h0IiwiY2FsbGJhY2siLCJzZXROZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlIiwidmlzaWJsZSIsImFkZExpc3RlbmVyIiwiZXZlbnRUeXBlIiwicmVtb3ZlTGlzdGVuZXJzIiwiY291bnQiLCJzZXRTdHlsZSIsInN0YXR1c0JhclN0eWxlIiwiYW5pbWF0ZWQiLCJzZXRIaWRkZW4iLCJoaWRkZW4iLCJ3aXRoQW5pbWF0aW9uIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTmF0aXZlU3RhdHVzQmFyTWFuYWdlcklPUy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1R1cmJvTW9kdWxlfSBmcm9tICcuLi8uLi9UdXJib01vZHVsZS9SQ1RFeHBvcnQnO1xuXG5pbXBvcnQgKiBhcyBUdXJib01vZHVsZVJlZ2lzdHJ5IGZyb20gJy4uLy4uL1R1cmJvTW9kdWxlL1R1cmJvTW9kdWxlUmVnaXN0cnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWMgZXh0ZW5kcyBUdXJib01vZHVsZSB7XG4gICtnZXRDb25zdGFudHM6ICgpID0+IHt8XG4gICAgK0hFSUdIVDogbnVtYmVyLFxuICAgICtERUZBVUxUX0JBQ0tHUk9VTkRfQ09MT1I/OiBudW1iZXIsXG4gIHx9O1xuXG4gIC8vIFRPRE8oVDQ3NzU0MjcyKSBDYW4gd2UgcmVtb3ZlIHRoaXMgbWV0aG9kP1xuICArZ2V0SGVpZ2h0OiAoY2FsbGJhY2s6IChyZXN1bHQ6IHt8aGVpZ2h0OiBudW1iZXJ8fSkgPT4gdm9pZCkgPT4gdm9pZDtcbiAgK3NldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGU6ICh2aXNpYmxlOiBib29sZWFuKSA9PiB2b2lkO1xuICArYWRkTGlzdGVuZXI6IChldmVudFR5cGU6IHN0cmluZykgPT4gdm9pZDtcbiAgK3JlbW92ZUxpc3RlbmVyczogKGNvdW50OiBudW1iZXIpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqICAtIHN0YXR1c0JhclN0eWxlcyBjYW4gYmU6XG4gICAqICAgIC0gJ2RlZmF1bHQnXG4gICAqICAgIC0gJ2RhcmstY29udGVudCdcbiAgICogICAgLSAnbGlnaHQtY29udGVudCdcbiAgICovXG4gICtzZXRTdHlsZTogKHN0YXR1c0JhclN0eWxlPzogP3N0cmluZywgYW5pbWF0ZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIC8qKlxuICAgKiAgLSB3aXRoQW5pbWF0aW9uIGNhbiBiZTogJ25vbmUnIHwgJ2ZhZGUnIHwgJ3NsaWRlJ1xuICAgKi9cbiAgK3NldEhpZGRlbjogKGhpZGRlbjogYm9vbGVhbiwgd2l0aEFuaW1hdGlvbjogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5jb25zdCBOYXRpdmVNb2R1bGUgPSBUdXJib01vZHVsZVJlZ2lzdHJ5LmdldEVuZm9yY2luZzxTcGVjPignU3RhdHVzQmFyTWFuYWdlcicpO1xubGV0IGNvbnN0YW50cyA9IG51bGw7XG5cbmNvbnN0IE5hdGl2ZVN0YXR1c0Jhck1hbmFnZXIgPSB7XG4gIGdldENvbnN0YW50cygpOiB7fFxuICAgICtIRUlHSFQ6IG51bWJlcixcbiAgICArREVGQVVMVF9CQUNLR1JPVU5EX0NPTE9SPzogbnVtYmVyLFxuICB8fSB7XG4gICAgaWYgKGNvbnN0YW50cyA9PSBudWxsKSB7XG4gICAgICBjb25zdGFudHMgPSBOYXRpdmVNb2R1bGUuZ2V0Q29uc3RhbnRzKCk7XG4gICAgfVxuICAgIHJldHVybiBjb25zdGFudHM7XG4gIH0sXG5cbiAgLy8gVE9ETyhUNDc3NTQyNzIpIENhbiB3ZSByZW1vdmUgdGhpcyBtZXRob2Q/XG4gIGdldEhlaWdodChjYWxsYmFjazogKHJlc3VsdDoge3xoZWlnaHQ6IG51bWJlcnx9KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLmdldEhlaWdodChjYWxsYmFjayk7XG4gIH0sXG5cbiAgc2V0TmV0d29ya0FjdGl2aXR5SW5kaWNhdG9yVmlzaWJsZSh2aXNpYmxlOiBib29sZWFuKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLnNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUodmlzaWJsZSk7XG4gIH0sXG5cbiAgYWRkTGlzdGVuZXIoZXZlbnRUeXBlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBOYXRpdmVNb2R1bGUuYWRkTGlzdGVuZXIoZXZlbnRUeXBlKTtcbiAgfSxcblxuICByZW1vdmVMaXN0ZW5lcnMoY291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIE5hdGl2ZU1vZHVsZS5yZW1vdmVMaXN0ZW5lcnMoY291bnQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiAgLSBzdGF0dXNCYXJTdHlsZXMgY2FuIGJlOlxuICAgKiAgICAtICdkZWZhdWx0J1xuICAgKiAgICAtICdkYXJrLWNvbnRlbnQnXG4gICAqICAgIC0gJ2xpZ2h0LWNvbnRlbnQnXG4gICAqL1xuICBzZXRTdHlsZShzdGF0dXNCYXJTdHlsZT86ID9zdHJpbmcsIGFuaW1hdGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgTmF0aXZlTW9kdWxlLnNldFN0eWxlKHN0YXR1c0JhclN0eWxlLCBhbmltYXRlZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqICAtIHdpdGhBbmltYXRpb24gY2FuIGJlOiAnbm9uZScgfCAnZmFkZScgfCAnc2xpZGUnXG4gICAqL1xuICBzZXRIaWRkZW4oaGlkZGVuOiBib29sZWFuLCB3aXRoQW5pbWF0aW9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBOYXRpdmVNb2R1bGUuc2V0SGlkZGVuKGhpZGRlbiwgd2l0aEFuaW1hdGlvbik7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXRpdmVTdGF0dXNCYXJNYW5hZ2VyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFZQSxJQUFBQSxtQkFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQTZFLFNBQUFELHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSix1QkFBQSxZQUFBQSx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQSxjQUFBTSxFQUFBLElBQUFkLENBQUEsZ0JBQUFjLEVBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxJQUFBRCxDQUFBLEdBQUFXLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFuQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQU0sRUFBQSxFQUFBUCxDQUFBLElBQUFDLENBQUEsQ0FBQU0sRUFBQSxJQUFBZCxDQUFBLENBQUFjLEVBQUEsV0FBQU4sQ0FBQSxLQUFBUixDQUFBLEVBQUFDLENBQUE7QUEyQjdFLElBQU1tQixZQUFZLEdBQUd2QixtQkFBbUIsQ0FBQ3dCLFlBQVksQ0FBTyxrQkFBa0IsQ0FBQztBQUMvRSxJQUFJQyxTQUFTLEdBQUcsSUFBSTtBQUVwQixJQUFNQyxzQkFBc0IsR0FBRztFQUM3QkMsWUFBWSxXQUFaQSxZQUFZQSxDQUFBLEVBR1Q7SUFDRCxJQUFJRixTQUFTLElBQUksSUFBSSxFQUFFO01BQ3JCQSxTQUFTLEdBQUdGLFlBQVksQ0FBQ0ksWUFBWSxDQUFDLENBQUM7SUFDekM7SUFDQSxPQUFPRixTQUFTO0VBQ2xCLENBQUM7RUFHREcsU0FBUyxXQUFUQSxTQUFTQSxDQUFDQyxRQUE4QyxFQUFRO0lBQzlETixZQUFZLENBQUNLLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDO0VBQ2xDLENBQUM7RUFFREMsa0NBQWtDLFdBQWxDQSxrQ0FBa0NBLENBQUNDLE9BQWdCLEVBQVE7SUFDekRSLFlBQVksQ0FBQ08sa0NBQWtDLENBQUNDLE9BQU8sQ0FBQztFQUMxRCxDQUFDO0VBRURDLFdBQVcsV0FBWEEsV0FBV0EsQ0FBQ0MsU0FBaUIsRUFBUTtJQUNuQ1YsWUFBWSxDQUFDUyxXQUFXLENBQUNDLFNBQVMsQ0FBQztFQUNyQyxDQUFDO0VBRURDLGVBQWUsV0FBZkEsZUFBZUEsQ0FBQ0MsS0FBYSxFQUFRO0lBQ25DWixZQUFZLENBQUNXLGVBQWUsQ0FBQ0MsS0FBSyxDQUFDO0VBQ3JDLENBQUM7RUFRREMsUUFBUSxXQUFSQSxRQUFRQSxDQUFDQyxjQUF3QixFQUFFQyxRQUFpQixFQUFRO0lBQzFEZixZQUFZLENBQUNhLFFBQVEsQ0FBQ0MsY0FBYyxFQUFFQyxRQUFRLENBQUM7RUFDakQsQ0FBQztFQUtEQyxTQUFTLFdBQVRBLFNBQVNBLENBQUNDLE1BQWUsRUFBRUMsYUFBcUIsRUFBUTtJQUN0RGxCLFlBQVksQ0FBQ2dCLFNBQVMsQ0FBQ0MsTUFBTSxFQUFFQyxhQUFhLENBQUM7RUFDL0M7QUFDRixDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUE5QixPQUFBLEdBRWFhLHNCQUFzQiIsImlnbm9yZUxpc3QiOltdfQ==