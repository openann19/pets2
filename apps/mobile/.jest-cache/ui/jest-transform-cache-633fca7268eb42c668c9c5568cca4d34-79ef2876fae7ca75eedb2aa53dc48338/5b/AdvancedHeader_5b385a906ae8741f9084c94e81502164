8f210567d34115cfbd8334c76747ca8b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HeaderConfigs = exports.AdvancedHeader = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _core = require("@pawfectmatch/core");
var _expoBlur = require("expo-blur");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _AdvancedInteractionSystem = require("./AdvancedInteractionSystem");
var _unifiedTheme = require("../../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  SCREEN_WIDTH = _Dimensions$get.width;
var AdvancedHeader = exports.AdvancedHeader = function AdvancedHeader(_ref) {
  var title = _ref.title,
    subtitle = _ref.subtitle,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "default" : _ref$variant,
    _ref$leftButtons = _ref.leftButtons,
    leftButtons = _ref$leftButtons === void 0 ? [] : _ref$leftButtons,
    _ref$rightButtons = _ref.rightButtons,
    rightButtons = _ref$rightButtons === void 0 ? [] : _ref$rightButtons,
    onBackPress = _ref.onBackPress,
    _ref$showBackButton = _ref.showBackButton,
    showBackButton = _ref$showBackButton === void 0 ? true : _ref$showBackButton,
    _ref$backgroundColor = _ref.backgroundColor,
    backgroundColor = _ref$backgroundColor === void 0 ? _unifiedTheme.Theme.colors.neutral[0] : _ref$backgroundColor,
    _ref$textColor = _ref.textColor,
    textColor = _ref$textColor === void 0 ? _unifiedTheme.Theme.colors.text.primary : _ref$textColor,
    _ref$blurIntensity = _ref.blurIntensity,
    blurIntensity = _ref$blurIntensity === void 0 ? 20 : _ref$blurIntensity,
    _ref$gradientColors = _ref.gradientColors,
    gradientColors = _ref$gradientColors === void 0 ? [_unifiedTheme.Theme.colors.primary[500], _unifiedTheme.Theme.colors.primary[600]] : _ref$gradientColors,
    style = _ref.style,
    titleStyle = _ref.titleStyle,
    subtitleStyle = _ref.subtitleStyle,
    _ref$floating = _ref.floating,
    floating = _ref$floating === void 0 ? false : _ref$floating,
    _ref$transparent = _ref.transparent,
    transparent = _ref$transparent === void 0 ? false : _ref$transparent,
    _ref$apiActions = _ref.apiActions,
    apiActions = _ref$apiActions === void 0 ? {} : _ref$apiActions;
  var headerOpacity = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var headerTranslateY = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var buttonScale = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var titleScale = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isScrolled = _useState2[0],
    setIsScrolled = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var handleBackPress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (onBackPress) {
      yield onBackPress();
    }
  }), [onBackPress]);
  var handleButtonPress = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (button) {
      if (button.disabled || button.loading) return;
      setIsLoading(true);
      try {
        if (button.haptic) {
          yield Haptics.impactAsync(button.haptic === "light" ? Haptics.ImpactFeedbackStyle.Light : button.haptic === "medium" ? Haptics.ImpactFeedbackStyle.Medium : Haptics.ImpactFeedbackStyle.Heavy);
        }
        if (button.apiAction) {
          yield button.apiAction();
        }
        if (button.onPress) {
          yield button.onPress();
        }
        var action = apiActions == null ? void 0 : apiActions[button.type];
        if (action) {
          yield action();
        }
      } catch (error) {
        _core.logger.error("Header button action failed:", {
          error: error
        });
        yield Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
      } finally {
        setIsLoading(false);
      }
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [apiActions]);
  var getButtonIcon = function getButtonIcon(type, customIcon) {
    if (customIcon) return customIcon;
    switch (type) {
      case "back":
        return "arrow-back";
      case "close":
        return "close";
      case "menu":
        return "menu";
      case "search":
        return "search";
      case "filter":
        return "options-outline";
      case "settings":
        return "settings-outline";
      case "profile":
        return "person-outline";
      case "add":
        return "add";
      case "edit":
        return "create-outline";
      case "share":
        return "share-outline";
      case "more":
        return "ellipsis-vertical";
      default:
        return "ellipsis-vertical";
    }
  };
  var getButtonVariant = function getButtonVariant(button) {
    if (button.variant) return button.variant;
    switch (button.type) {
      case "back":
      case "close":
        return "minimal";
      case "search":
      case "filter":
        return "glass";
      case "add":
      case "edit":
        return "primary";
      default:
        return "secondary";
    }
  };
  var renderButton = function renderButton(button) {
    var isLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (button.customComponent) {
      return button.customComponent;
    }
    var icon = getButtonIcon(button.type, button.icon);
    var variant = getButtonVariant(button);
    return (0, _jsxRuntime.jsx)(_AdvancedInteractionSystem.AdvancedButton, {
      icon: icon,
      title: button.title,
      variant: variant,
      size: "sm",
      interactions: ["hover", "press", "glow"],
      haptic: button.haptic || "light",
      onPress: function onPress() {
        return handleButtonPress(button);
      },
      disabled: button.disabled,
      loading: button.loading || isLoading,
      style: _reactNative.StyleSheet.flatten([styles.headerButton, isLeft ? styles.leftButton : styles.rightButton]),
      glowColor: variant === "primary" ? _unifiedTheme.Theme.colors.primary[500] : _unifiedTheme.Theme.colors.neutral[500],
      children: button.badge && button.badge > 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.badge,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.badgeText,
          children: button.badge > 99 ? "99+" : button.badge
        })
      })
    });
  };
  var getHeaderStyles = function getHeaderStyles() {
    var baseStyles = {
      flexDirection: "row",
      alignItems: "center",
      justifyContent: "space-between",
      paddingHorizontal: 16,
      paddingVertical: 12,
      minHeight: 56
    };
    switch (variant) {
      case "glass":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: transparent ? "transparent" : "rgba(255, 255, 255, 0.1)",
          borderBottomWidth: 1,
          borderBottomColor: "rgba(255, 255, 255, 0.1)"
        });
      case "gradient":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: transparent ? "transparent" : backgroundColor
        });
      case "premium":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: transparent ? "transparent" : "rgba(139, 92, 246, 0.1)",
          borderBottomWidth: 1,
          borderBottomColor: "rgba(139, 92, 246, 0.2)"
        });
      case "minimal":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: transparent ? "transparent" : "transparent",
          borderBottomWidth: 1,
          borderBottomColor: _unifiedTheme.Theme.colors.neutral[100]
        });
      case "floating":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: transparent ? "transparent" : backgroundColor,
          borderRadius: 12,
          marginHorizontal: 16,
          marginTop: 8,
          shadowColor: _unifiedTheme.Theme.colors.neutral[900],
          shadowOffset: {
            width: 0,
            height: 2
          },
          shadowOpacity: 0.1,
          shadowRadius: 8,
          elevation: 4
        });
      default:
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: transparent ? "transparent" : backgroundColor,
          borderBottomWidth: 1,
          borderBottomColor: _unifiedTheme.Theme.colors.neutral[200]
        });
    }
  };
  var renderHeaderContent = function renderHeaderContent() {
    var headerStyle = [getHeaderStyles(), style];
    return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      style: _reactNative.StyleSheet.flatten([headerStyle, {
        opacity: headerOpacity,
        transform: [{
          translateY: headerTranslateY
        }]
      }]),
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.leftSection,
        children: [showBackButton && (0, _jsxRuntime.jsx)(_AdvancedInteractionSystem.AdvancedButton, {
          icon: "arrow-back",
          variant: "minimal",
          size: "sm",
          interactions: ["hover", "press", "glow"],
          haptic: "light",
          onPress: handleBackPress,
          style: styles.backButton,
          glowColor: "Theme.colors.neutral[500]"
        }), leftButtons.map(function (button, index) {
          return (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.buttonContainer,
            children: renderButton(button, true)
          }, index);
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.centerSection,
        children: (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
          style: {
            transform: [{
              scale: titleScale
            }]
          },
          children: [title && (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _reactNative.StyleSheet.flatten([styles.title, {
              color: textColor
            }, titleStyle]),
            children: title
          }), subtitle && (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _reactNative.StyleSheet.flatten([styles.subtitle, {
              color: textColor
            }, subtitleStyle]),
            children: subtitle
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.rightSection,
        children: rightButtons.map(function (button, index) {
          return (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.buttonContainer,
            children: renderButton(button, false)
          }, index);
        })
      })]
    });
  };
  var renderBackground = function renderBackground() {
    switch (variant) {
      case "glass":
        return (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
          intensity: blurIntensity,
          style: _reactNative.StyleSheet.absoluteFillObject
        });
      case "gradient":
        return (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
          colors: gradientColors,
          style: _reactNative.StyleSheet.absoluteFillObject,
          start: {
            x: 0,
            y: 0
          },
          end: {
            x: 1,
            y: 1
          }
        });
      case "premium":
        return (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
          colors: ["rgba(139, 92, 246, 0.1)", "rgba(139, 92, 246, 0.05)"],
          style: _reactNative.StyleSheet.absoluteFillObject,
          start: {
            x: 0,
            y: 0
          },
          end: {
            x: 1,
            y: 1
          }
        });
      default:
        return null;
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
    style: _reactNative.StyleSheet.flatten([styles.container, floating && styles.floatingContainer, transparent && styles.transparentContainer]),
    children: [(0, _jsxRuntime.jsx)(_reactNative.StatusBar, {
      barStyle: variant === "glass" || variant === "gradient" ? "light-content" : "dark-content",
      backgroundColor: transparent ? "transparent" : backgroundColor,
      translucent: transparent
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.headerWrapper,
      children: [renderBackground(), renderHeaderContent()]
    })]
  });
};
var HeaderConfigs = exports.HeaderConfigs = {
  default: function _default(props) {
    return _objectSpread({
      variant: "default",
      showBackButton: true
    }, props);
  },
  glass: function glass(props) {
    return _objectSpread({
      variant: "glass",
      showBackButton: true,
      blurIntensity: 20,
      textColor: _unifiedTheme.Theme.colors.neutral[0]
    }, props);
  },
  gradient: function gradient(props) {
    return _objectSpread({
      variant: "gradient",
      showBackButton: true,
      gradientColors: [_unifiedTheme.Theme.colors.primary[500], _unifiedTheme.Theme.colors.primary[600]],
      textColor: _unifiedTheme.Theme.colors.neutral[0]
    }, props);
  },
  premium: function premium(props) {
    return _objectSpread({
      variant: "premium",
      showBackButton: true,
      textColor: "#8b5cf6"
    }, props);
  },
  minimal: function minimal(props) {
    return _objectSpread({
      variant: "minimal",
      showBackButton: true,
      textColor: _unifiedTheme.Theme.colors.neutral[500]
    }, props);
  },
  floating: function floating(props) {
    return _objectSpread({
      variant: "floating",
      showBackButton: true,
      floating: true
    }, props);
  }
};
var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: _unifiedTheme.Theme.colors.neutral[0]
  },
  floatingContainer: {
    backgroundColor: "transparent"
  },
  transparentContainer: {
    backgroundColor: "transparent"
  },
  headerWrapper: {
    position: "relative"
  },
  leftSection: {
    flexDirection: "row",
    alignItems: "center",
    flex: 1
  },
  centerSection: {
    flex: 2,
    alignItems: "center",
    justifyContent: "center"
  },
  rightSection: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-end",
    flex: 1
  },
  buttonContainer: {
    marginHorizontal: 4
  },
  headerButton: {
    minWidth: 40,
    minHeight: 40
  },
  leftButton: {
    marginRight: 8
  },
  rightButton: {
    marginLeft: 8
  },
  backButton: {
    marginRight: 8
  },
  title: {
    fontSize: 18,
    fontWeight: "600",
    textAlign: "center"
  },
  subtitle: {
    fontSize: 14,
    fontWeight: "400",
    textAlign: "center",
    marginTop: 2,
    opacity: 0.8
  },
  badge: {
    position: "absolute",
    top: -4,
    right: -4,
    backgroundColor: _unifiedTheme.Theme.colors.status.error,
    borderRadius: 10,
    minWidth: 20,
    height: 20,
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 2,
    borderColor: _unifiedTheme.Theme.colors.neutral[0]
  },
  badgeText: {
    color: _unifiedTheme.Theme.colors.neutral[0],
    fontSize: 10,
    fontWeight: "bold"
  }
});
var _default2 = exports.default = AdvancedHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,