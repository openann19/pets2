7e246f1fe33ddb9e16cd134287d037c6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useModernSwipeScreen = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var _api = require("../../services/api");
var useModernSwipeScreen = exports.useModernSwipeScreen = function useModernSwipeScreen() {
  var _pets$currentIndex;
  var _useAuthStore = (0, _core.useAuthStore)(),
    user = _useAuthStore.user;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    pets = _useState2[0],
    setPets = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    error = _useState6[0],
    setError = _useState6[1];
  var _useState7 = (0, _react.useState)(0),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    currentIndex = _useState8[0],
    setCurrentIndex = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    showMatchModal = _useState0[0],
    setShowMatchModal = _useState0[1];
  var _useState1 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    matchedPet = _useState10[0],
    setMatchedPet = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    showFilters = _useState12[0],
    setShowFilters = _useState12[1];
  var _useState13 = (0, _react.useState)({
      breed: "",
      species: "",
      size: "",
      maxDistance: 25
    }),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    filters = _useState14[0],
    setFilters = _useState14[1];
  var loadPets = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setIsLoading(true);
    setError(null);
    try {
      var realPets = yield _api.matchesAPI.getPets(filters);
      setPets(realPets);
    } catch (err) {
      var errorMessage = err instanceof Error ? err.message : "Failed to load pets. Please check your connection.";
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }), [filters]);
  var handleLike = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (pet) {
      try {
        if (user != null && user._id && pet._id) {
          var match = yield _api.matchesAPI.createMatch(user._id, pet._id);
          if (match) {
            setShowMatchModal(true);
            setMatchedPet(pet);
          }
          return match;
        }
        return null;
      } catch (error) {
        _core.logger.error("Error liking pet", {
          error: error
        });
        return null;
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [user]);
  var handlePass = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (pet) {
      try {
        _core.logger.info("Pet passed", {
          petId: pet._id
        });
        return null;
      } catch (error) {
        _core.logger.error("Error passing pet", {
          error: error
        });
        return null;
      }
    });
    return function (_x2) {
      return _ref3.apply(this, arguments);
    };
  }(), []);
  var handleSuperLike = (0, _react.useCallback)(function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (pet) {
      try {
        var result = yield handleLike(pet);
        if (result) {
          _reactNative.Alert.alert("Super Like Sent!", `${pet.name} will see that you super liked them!`);
        }
        return result;
      } catch (error) {
        _core.logger.error("Error super liking pet", {
          error: error
        });
        return null;
      }
    });
    return function (_x3) {
      return _ref4.apply(this, arguments);
    };
  }(), [handleLike]);
  var swipePet = (0, _react.useCallback)(function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* (petId, action) {
      try {
        var pet = pets.find(function (p) {
          return p._id === petId;
        });
        if (!pet) return null;
        switch (action) {
          case "like":
            return yield handleLike(pet);
          case "pass":
            return yield handlePass(pet);
          case "superlike":
            return yield handleSuperLike(pet);
          default:
            return null;
        }
      } catch (error) {
        var errorMessage = error instanceof Error ? error.message : "Unknown error occurred";
        _reactNative.Alert.alert("Error", `Failed to process swipe: ${errorMessage}`);
        return null;
      }
    });
    return function (_x4, _x5) {
      return _ref5.apply(this, arguments);
    };
  }(), [pets, handleLike, handlePass, handleSuperLike]);
  var handleSwipeRight = (0, _react.useCallback)(function (pet) {
    swipePet(pet._id, "like");
    setCurrentIndex(function (prev) {
      return Math.min(prev + 1, pets.length - 1);
    });
  }, [swipePet, pets.length]);
  var handleSwipeLeft = (0, _react.useCallback)(function (pet) {
    swipePet(pet._id, "pass");
    setCurrentIndex(function (prev) {
      return Math.min(prev + 1, pets.length - 1);
    });
  }, [swipePet, pets.length]);
  var handleSwipeUp = (0, _react.useCallback)(function (pet) {
    swipePet(pet._id, "superlike");
    setCurrentIndex(function (prev) {
      return Math.min(prev + 1, pets.length - 1);
    });
  }, [swipePet, pets.length]);
  var handleButtonSwipe = (0, _react.useCallback)(function (action) {
    var currentPet = pets[currentIndex];
    if (!currentPet) return;
    switch (action) {
      case "like":
        handleSwipeRight(currentPet);
        break;
      case "pass":
        handleSwipeLeft(currentPet);
        break;
      case "superlike":
        handleSwipeUp(currentPet);
        break;
    }
  }, [pets, currentIndex, handleSwipeRight, handleSwipeLeft, handleSwipeUp, swipePet]);
  (0, _react.useEffect)(function () {
    void loadPets();
  }, [loadPets]);
  var currentPet = (_pets$currentIndex = pets[currentIndex]) != null ? _pets$currentIndex : null;
  return {
    pets: pets,
    currentPet: currentPet,
    filters: filters,
    isLoading: isLoading,
    error: error,
    currentIndex: currentIndex,
    showMatchModal: showMatchModal,
    matchedPet: matchedPet,
    showFilters: showFilters,
    setCurrentIndex: setCurrentIndex,
    setShowMatchModal: setShowMatchModal,
    setShowFilters: setShowFilters,
    setFilters: setFilters,
    loadPets: loadPets,
    swipePet: swipePet,
    handleSwipeRight: handleSwipeRight,
    handleSwipeLeft: handleSwipeLeft,
    handleSwipeUp: handleSwipeUp,
    handleButtonSwipe: handleButtonSwipe
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,