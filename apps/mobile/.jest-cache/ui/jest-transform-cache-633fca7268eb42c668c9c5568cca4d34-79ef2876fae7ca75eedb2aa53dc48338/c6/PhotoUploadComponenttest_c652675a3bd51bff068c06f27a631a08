f26937c839942c29c7d01cde32fdd003
"use strict";

_getJestObj().mock('expo-image-picker');
_getJestObj().mock("../hooks/usePhotoManagement");
_getJestObj().mock("../test-utils", function () {
  return {
    customRender: _globals.jest.requireActual('@testing-library/react-native').render
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _PhotoUploadComponent = require("../components/PhotoUploadComponent");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _usePhotoManagement = require("../hooks/usePhotoManagement");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockImagePicker = ImagePicker;
var mockUsePhotoManagement = _usePhotoManagement.usePhotoManagement;
(0, _globals.describe)('PhotoUploadComponent', function () {
  var mockPetId = 'pet-123';
  var defaultMockHookReturn = {
    photos: [],
    primaryPhoto: null,
    canAddMorePhotos: true,
    isLoading: false,
    errors: [],
    addPhoto: _globals.jest.fn(),
    removePhoto: _globals.jest.fn(),
    setPrimaryPhoto: _globals.jest.fn(),
    reorderPhotos: _globals.jest.fn(),
    accessibilityLabels: {
      addPhotoButton: 'Add photo to pet profile',
      photoCount: '0 of 6 photos added'
    }
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: 'granted',
      granted: true,
      canAskAgain: true
    });
    mockUsePhotoManagement.mockReturnValue(defaultMockHookReturn);
  });
  (0, _globals.it)('should render add photo button with correct accessibility label', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByLabelText = _render.getByLabelText;
    var addButton = getByLabelText('Add photo to pet profile');
    (0, _globals.expect)(addButton).toBeTruthy();
  });
  (0, _globals.it)('should show photo count indicator', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render2.getByText;
    (0, _globals.expect)(getByText('0 of 6 photos added')).toBeTruthy();
  });
  (0, _globals.it)('should display loading spinner when adding photos', function () {
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      isLoading: true
    }));
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByTestId = _render3.getByTestId;
    (0, _globals.expect)(getByTestId('photo-upload-spinner')).toBeTruthy();
  });
  (0, _globals.it)('should disable add button when loading', function () {
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      isLoading: true
    }));
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByLabelText = _render4.getByLabelText;
    var addButton = getByLabelText('Add photo to pet profile');
    (0, _globals.expect)(addButton).toBeDisabled();
  });
  (0, _globals.it)('should show limit reached message when at max photos', function () {
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      canAddMorePhotos: false,
      photos: Array.from({
        length: 6
      }, function (_, i) {
        return {
          id: `photo${i}`,
          uri: `photo${i}.jpg`,
          isPrimary: i === 0,
          status: 'approved'
        };
      }),
      accessibilityLabels: _objectSpread(_objectSpread({}, defaultMockHookReturn.accessibilityLabels), {}, {
        photoCount: '6 of 6 photos added'
      })
    }));
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render5.getByText,
      getByLabelText = _render5.getByLabelText;
    (0, _globals.expect)(getByText('6 of 6 photos added')).toBeTruthy();
    (0, _globals.expect)(getByText('Maximum 6 photos reached')).toBeTruthy();
    var addButton = getByLabelText('Add photo to pet profile');
    (0, _globals.expect)(addButton).toBeDisabled();
  });
  (0, _globals.it)('should call addPhoto when add button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var mockAddPhoto = _globals.jest.fn();
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      addPhoto: mockAddPhoto
    }));
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByLabelText = _render6.getByLabelText;
    var addButton = getByLabelText('Add photo to pet profile');
    _reactNative.fireEvent.press(addButton);
    (0, _globals.expect)(mockAddPhoto).toHaveBeenCalledTimes(1);
  }));
  (0, _globals.it)('should display error messages', function () {
    var errorMessage = 'Failed to add photo';
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      errors: [errorMessage]
    }));
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render7.getByText;
    (0, _globals.expect)(getByText(errorMessage)).toBeTruthy();
  });
  (0, _globals.it)('should display multiple error messages', function () {
    var errors = ['Network error', 'File too large', 'Invalid format'];
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      errors: errors
    }));
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render8.getByText;
    errors.forEach(function (error) {
      (0, _globals.expect)(getByText(error)).toBeTruthy();
    });
  });
  (0, _globals.it)('should show photo grid when photos exist', function () {
    var mockPhotos = [{
      id: 'photo1',
      uri: 'photo1.jpg',
      isPrimary: true,
      status: 'approved'
    }, {
      id: 'photo2',
      uri: 'photo2.jpg',
      isPrimary: false,
      status: 'approved'
    }];
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      photos: mockPhotos,
      accessibilityLabels: _objectSpread(_objectSpread({}, defaultMockHookReturn.accessibilityLabels), {}, {
        photoCount: '2 of 6 photos added'
      })
    }));
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByTestId = _render9.getByTestId,
      getAllByTestId = _render9.getAllByTestId;
    (0, _globals.expect)(getByTestId('photo-grid')).toBeTruthy();
    (0, _globals.expect)(getAllByTestId('photo-item')).toHaveLength(2);
  });
  (0, _globals.it)('should show primary photo indicator', function () {
    var mockPhotos = [{
      id: 'photo1',
      uri: 'photo1.jpg',
      isPrimary: true,
      status: 'approved'
    }];
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      photos: mockPhotos,
      primaryPhoto: mockPhotos[0]
    }));
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render0.getByText;
    (0, _globals.expect)(getByText('Primary photo')).toBeTruthy();
  });
  (0, _globals.it)('should show photo status indicators', function () {
    var mockPhotos = [{
      id: 'photo1',
      uri: 'photo1.jpg',
      isPrimary: false,
      status: 'uploading',
      progress: 50
    }, {
      id: 'photo2',
      uri: 'photo2.jpg',
      isPrimary: false,
      status: 'approved'
    }, {
      id: 'photo3',
      uri: 'photo3.jpg',
      isPrimary: false,
      status: 'error'
    }];
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      photos: mockPhotos
    }));
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render1.getByText,
      getAllByTestId = _render1.getAllByTestId;
    var photoItems = getAllByTestId('photo-item');
    (0, _globals.expect)(getByText('Uploading...')).toBeTruthy();
    (0, _globals.expect)(getByText('50%')).toBeTruthy();
    (0, _globals.expect)(getByText('Approved')).toBeTruthy();
    (0, _globals.expect)(getByText('Upload failed')).toBeTruthy();
  });
  (0, _globals.it)('should allow removing photos', function () {
    var mockRemovePhoto = _globals.jest.fn();
    var mockPhotos = [{
      id: 'photo1',
      uri: 'photo1.jpg',
      isPrimary: false,
      status: 'approved'
    }];
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      photos: mockPhotos,
      removePhoto: mockRemovePhoto
    }));
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByTestId = _render10.getByTestId;
    var removeButton = getByTestId('remove-photo-button');
    _reactNative.fireEvent.press(removeButton);
    (0, _globals.expect)(mockRemovePhoto).toHaveBeenCalledWith('photo1');
  });
  (0, _globals.it)('should allow setting primary photo', function () {
    var mockSetPrimaryPhoto = _globals.jest.fn();
    var mockPhotos = [{
      id: 'photo1',
      uri: 'photo1.jpg',
      isPrimary: false,
      status: 'approved'
    }, {
      id: 'photo2',
      uri: 'photo2.jpg',
      isPrimary: true,
      status: 'approved'
    }];
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      photos: mockPhotos,
      setPrimaryPhoto: mockSetPrimaryPhoto
    }));
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getAllByTestId = _render11.getAllByTestId;
    var setPrimaryButtons = getAllByTestId('set-primary-button');
    _reactNative.fireEvent.press(setPrimaryButtons[0]);
    (0, _globals.expect)(mockSetPrimaryPhoto).toHaveBeenCalledWith('photo1');
  });
  (0, _globals.it)('should prevent removing primary photo when multiple photos exist', function () {
    var mockRemovePhoto = _globals.jest.fn();
    var mockPhotos = [{
      id: 'photo1',
      uri: 'photo1.jpg',
      isPrimary: true,
      status: 'approved'
    }, {
      id: 'photo2',
      uri: 'photo2.jpg',
      isPrimary: false,
      status: 'approved'
    }];
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      photos: mockPhotos,
      removePhoto: mockRemovePhoto
    }));
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getAllByTestId = _render12.getAllByTestId;
    var removeButtons = getAllByTestId('remove-photo-button');
    _reactNative.fireEvent.press(removeButtons[0]);
    (0, _globals.expect)(mockRemovePhoto).not.toHaveBeenCalled();
  });
  (0, _globals.it)('should show reorder controls when multiple photos exist', function () {
    var mockReorderPhotos = _globals.jest.fn();
    var mockPhotos = Array.from({
      length: 3
    }, function (_, i) {
      return {
        id: `photo${i}`,
        uri: `photo${i}.jpg`,
        isPrimary: i === 0,
        status: 'approved'
      };
    });
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      photos: mockPhotos,
      reorderPhotos: mockReorderPhotos
    }));
    var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByTestId = _render13.getByTestId;
    (0, _globals.expect)(getByTestId('photo-reorder-controls')).toBeTruthy();
  });
  (0, _globals.it)('should handle empty state correctly', function () {
    var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render14.getByText,
      getByLabelText = _render14.getByLabelText,
      queryByTestId = _render14.queryByTestId;
    (0, _globals.expect)(getByText('0 of 6 photos added')).toBeTruthy();
    (0, _globals.expect)(getByLabelText('Add photo to pet profile')).toBeTruthy();
    (0, _globals.expect)(queryByTestId('photo-grid')).toBeNull();
  });
  (0, _globals.it)('should update accessibility labels dynamically', function () {
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      photos: Array.from({
        length: 4
      }, function (_, i) {
        return {
          id: `photo${i}`,
          uri: `photo${i}.jpg`,
          isPrimary: i === 0,
          status: 'approved'
        };
      }),
      accessibilityLabels: {
        addPhotoButton: 'Add photo to pet profile',
        photoCount: '4 of 6 photos added'
      }
    }));
    var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render15.getByText;
    (0, _globals.expect)(getByText('4 of 6 photos added')).toBeTruthy();
  });
  (0, _globals.it)('should handle long press for additional actions', function () {
    var mockPhotos = [{
      id: 'photo1',
      uri: 'photo1.jpg',
      isPrimary: false,
      status: 'approved'
    }];
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      photos: mockPhotos
    }));
    var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByTestId = _render16.getByTestId;
    var photoItem = getByTestId('photo-item');
    (0, _reactNative.fireEvent)(photoItem, 'longPress');
    (0, _globals.expect)(getByTestId('photo-context-menu')).toBeTruthy();
  });
  (0, _globals.it)('should show progress indicators for uploading photos', function () {
    var mockPhotos = [{
      id: 'photo1',
      uri: 'photo1.jpg',
      isPrimary: false,
      status: 'uploading',
      progress: 75
    }];
    mockUsePhotoManagement.mockReturnValue(_objectSpread(_objectSpread({}, defaultMockHookReturn), {}, {
      photos: mockPhotos
    }));
    var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByTestId = _render17.getByTestId,
      getByText = _render17.getByText;
    (0, _globals.expect)(getByTestId('upload-progress-bar')).toBeTruthy();
    (0, _globals.expect)(getByText('75%')).toBeTruthy();
  });
  (0, _globals.it)('should handle photo selection errors gracefully', function () {
    mockImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: 'denied',
      granted: false,
      canAskAgain: false
    });
    var _render18 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render18.getByText;
    var addButton = getByText('Add Photo');
    _reactNative.fireEvent.press(addButton);
    (0, _globals.expect)(getByText('Photo library access is required')).toBeTruthy();
  });
  (0, _globals.it)('should support different photo sources', function () {
    var _render19 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render19.getByText,
      getByTestId = _render19.getByTestId;
    var addButton = getByText('Add Photo');
    _reactNative.fireEvent.press(addButton);
    var photoSourceMenu = getByTestId('photo-source-menu');
    (0, _globals.expect)(photoSourceMenu).toBeTruthy();
    (0, _globals.expect)(getByText('Take Photo')).toBeTruthy();
    (0, _globals.expect)(getByText('Choose from Library')).toBeTruthy();
  });
  (0, _globals.it)('should show photo preview before upload', function () {
    mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
      cancelled: false,
      assets: [{
        uri: 'file://preview-image.jpg',
        width: 1024,
        height: 768,
        fileSize: 204800,
        mimeType: 'image/jpeg',
        fileName: 'preview-image.jpg'
      }]
    });
    var _render20 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByText = _render20.getByText,
      getByTestId = _render20.getByTestId;
    var addButton = getByText('Add Photo');
    _reactNative.fireEvent.press(addButton);
    (0, _globals.expect)(getByTestId('photo-preview')).toBeTruthy();
    (0, _globals.expect)(getByText('Use Photo')).toBeTruthy();
    (0, _globals.expect)(getByText('Retake')).toBeTruthy();
  });
  (0, _globals.it)('should handle RTL layout correctly', function () {
    var _render21 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId,
        isRTL: true
      })),
      getByTestId = _render21.getByTestId;
    var photoGrid = getByTestId('photo-grid');
    (0, _globals.expect)(photoGrid).toHaveStyle({
      flexDirection: 'row-reverse'
    });
  });
  (0, _globals.it)('should support keyboard navigation', function () {
    var _render22 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      getByLabelText = _render22.getByLabelText;
    var addButton = getByLabelText('Add photo to pet profile');
    (0, _reactNative.fireEvent)(addButton, 'focus');
    (0, _globals.expect)(addButton).toHaveAccessibilityState({
      focused: true
    });
    (0, _reactNative.fireEvent)(addButton, 'blur');
    (0, _globals.expect)(addButton).toHaveAccessibilityState({
      focused: false
    });
  });
  (0, _globals.it)('should show helpful tooltips for new users', function () {
    var _render23 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId,
        showTooltips: true
      })),
      getByText = _render23.getByText;
    (0, _globals.expect)(getByText('Tip: First photo becomes your primary photo')).toBeTruthy();
    (0, _globals.expect)(getByText('Tip: You can reorder photos by dragging')).toBeTruthy();
  });
  (0, _globals.it)('should handle component unmounting during upload', function () {
    var _render24 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoUploadComponent.PhotoUploadComponent, {
        petId: mockPetId
      })),
      unmount = _render24.unmount;
    var addButton = screen.getByLabelText('Add photo to pet profile');
    _reactNative.fireEvent.press(addButton);
    unmount();
    (0, _globals.expect)(mockUsePhotoManagement).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,