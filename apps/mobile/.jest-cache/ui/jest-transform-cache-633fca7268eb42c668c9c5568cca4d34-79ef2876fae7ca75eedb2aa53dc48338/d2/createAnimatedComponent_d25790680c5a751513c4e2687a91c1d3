0b1e1c069d7ec8e3ac6471b88ebf1e0a
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAnimatedComponent = createAnimatedComponent;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
require("../layoutReanimation/animationsManager");
var _invariant = _interopRequireDefault(require("invariant"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _util = require("../animation/util");
var _animationBuilder = require("../animationBuilder");
var _commonTypes = require("../commonTypes");
var _LayoutAnimationConfig = require("../component/LayoutAnimationConfig");
var _ConfigHelper = require("../ConfigHelper");
var _core = require("../core");
var _errors = require("../errors");
var _fabricUtils = require("../fabricUtils");
var _layoutReanimation = require("../layoutReanimation");
var _web = require("../layoutReanimation/web");
var _domUtils = require("../layoutReanimation/web/domUtils");
var _findHostInstance = require("../platform-specific/findHostInstance");
var _PlatformChecker = require("../PlatformChecker");
var _reactUtils = require("../reactUtils");
var _UpdateLayoutAnimations = require("../UpdateLayoutAnimations");
var _getViewInfo2 = require("./getViewInfo");
var _InlinePropManager = require("./InlinePropManager");
var _JSPropsUpdater = _interopRequireDefault(require("./JSPropsUpdater"));
var _NativeEventsManager = require("./NativeEventsManager");
var _PropsFilter = require("./PropsFilter");
var _setAndForwardRef = _interopRequireDefault(require("./setAndForwardRef"));
var _utils = require("./utils");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var IS_WEB = (0, _PlatformChecker.isWeb)();
var IS_JEST = (0, _PlatformChecker.isJest)();
var IS_REACT_19 = (0, _PlatformChecker.isReact19)();
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
if (IS_WEB) {
  (0, _web.configureWebLayoutAnimations)();
}
function onlyAnimatedStyles(styles) {
  return styles.filter(function (style) {
    return style == null ? void 0 : style.viewDescriptors;
  });
}
var id = 0;
function createAnimatedComponent(Component, options) {
  if (!IS_REACT_19) {
    (0, _invariant.default)(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, `Looks like you're passing a function component \`${Component.name}\` to \`createAnimatedComponent\` function which supports only class components. Please wrap your function component with \`React.forwardRef()\` or use a class component instead.`);
  }
  var AnimatedComponent = function (_ref) {
    function AnimatedComponent(props) {
      var _this$context2;
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedComponent);
      _this = _callSuper(this, AnimatedComponent, [props]);
      _this._styles = null;
      _this._isFirstRender = true;
      _this.jestAnimatedStyle = {
        value: {}
      };
      _this.jestAnimatedProps = {
        value: {}
      };
      _this._componentRef = null;
      _this._hasAnimatedRef = false;
      _this._componentDOMRef = null;
      _this._sharedElementTransition = null;
      _this._jsPropsUpdater = new _JSPropsUpdater.default();
      _this._InlinePropManager = new _InlinePropManager.InlinePropManager();
      _this._PropsFilter = new _PropsFilter.PropsFilter();
      _this.reanimatedID = id++;
      _this._willUnmount = false;
      _this._resolveComponentRef = function (ref) {
        var componentRef = ref;
        if (componentRef && componentRef.getAnimatableRef) {
          _this._hasAnimatedRef = true;
          return componentRef.getAnimatableRef();
        }
        if (SHOULD_BE_USE_WEB) {
          if (componentRef && componentRef.elementRef) {
            _this._componentDOMRef = componentRef.elementRef.current;
          } else {
            _this._componentDOMRef = ref;
          }
        }
        return componentRef;
      };
      _this._setComponentRef = (0, _setAndForwardRef.default)({
        getForwardedRef: function getForwardedRef() {
          return _this.props.forwardedRef;
        },
        setLocalRef: function setLocalRef(ref) {
          if (!ref) {
            return;
          }
          if (ref !== _this._componentRef) {
            _this._componentRef = _this._resolveComponentRef(ref);
            _this._viewInfo = undefined;
          }
          var _this$props = _this.props,
            layout = _this$props.layout,
            entering = _this$props.entering,
            exiting = _this$props.exiting,
            sharedTransitionTag = _this$props.sharedTransitionTag;
          if (layout || entering || exiting || sharedTransitionTag) {
            var _this$context;
            if (!SHOULD_BE_USE_WEB) {
              (0, _core.enableLayoutAnimations)(true, false);
            }
            if (sharedTransitionTag) {
              _this._configureSharedTransition();
            }
            var skipEntering = (_this$context = _this.context) == null ? void 0 : _this$context.current;
            if (entering && !(0, _PlatformChecker.isFabric)() && !skipEntering && !IS_WEB) {
              _this._configureLayoutAnimation(_commonTypes.LayoutAnimationType.ENTERING, _this.props.entering);
            }
          }
        }
      });
      if (IS_JEST) {
        _this.jestAnimatedStyle = {
          value: {}
        };
        _this.jestAnimatedProps = {
          value: {}
        };
      }
      var _skipEntering = (_this$context2 = _this.context) == null ? void 0 : _this$context2.current;
      if ((0, _PlatformChecker.isFabric)() && !_skipEntering) {
        _this._configureLayoutAnimation(_commonTypes.LayoutAnimationType.ENTERING, _this.props.entering);
      }
      return _this;
    }
    (0, _inherits2.default)(AnimatedComponent, _ref);
    return (0, _createClass2.default)(AnimatedComponent, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$_NativeEventsMa, _this$_viewInfo;
        if (!IS_WEB) {
          this._NativeEventsManager = new _NativeEventsManager.NativeEventsManager(this, options);
        }
        (_this$_NativeEventsMa = this._NativeEventsManager) == null ? void 0 : _this$_NativeEventsMa.attachEvents();
        this._jsPropsUpdater.addOnJSPropsChangeListener(this);
        this._attachAnimatedStyles();
        this._InlinePropManager.attachInlineProps(this, this._getViewInfo());
        this._configureLayoutAnimation(_commonTypes.LayoutAnimationType.LAYOUT, this.props.layout);
        this._configureLayoutAnimation(_commonTypes.LayoutAnimationType.EXITING, this.props.exiting);
        if (IS_WEB) {
          var _this$context3;
          if (this.props.exiting && this._componentDOMRef) {
            (0, _web.saveSnapshot)(this._componentDOMRef);
          }
          if (!this.props.entering) {
            this._isFirstRender = false;
            return;
          }
          if ((0, _web.getReducedMotionFromConfig)(this.props.entering)) {
            var _callbackV, _ref2;
            this._isFirstRender = false;
            (_callbackV = (_ref2 = this.props.entering).callbackV) == null ? void 0 : _callbackV.call(_ref2, true);
            return;
          }
          var skipEntering = (_this$context3 = this.context) == null ? void 0 : _this$context3.current;
          if (!skipEntering) {
            (0, _web.startWebLayoutAnimation)(this.props, this._componentDOMRef, _commonTypes.LayoutAnimationType.ENTERING);
          } else if (this._componentDOMRef) {
            this._componentDOMRef.style.visibility = 'initial';
          }
        }
        var viewTag = (_this$_viewInfo = this._viewInfo) == null ? void 0 : _this$_viewInfo.viewTag;
        if (!SHOULD_BE_USE_WEB && (0, _PlatformChecker.isFabric)() && this._willUnmount && typeof viewTag === 'number') {
          (0, _core.unmarkNodeAsRemovable)(viewTag);
        }
        this._isFirstRender = false;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this$_NativeEventsMa2, _this$_sharedElementT, _this$_viewInfo2;
        (_this$_NativeEventsMa2 = this._NativeEventsManager) == null ? void 0 : _this$_NativeEventsMa2.detachEvents();
        this._jsPropsUpdater.removeOnJSPropsChangeListener(this);
        this._detachStyles();
        this._InlinePropManager.detachInlineProps();
        if (this.props.sharedTransitionTag) {
          this._configureSharedTransition(true);
        }
        (_this$_sharedElementT = this._sharedElementTransition) == null ? void 0 : _this$_sharedElementT.unregisterTransition(this.getComponentViewTag(), true);
        var exiting = this.props.exiting;
        if (IS_WEB && this._componentDOMRef && exiting) {
          if ((0, _web.getReducedMotionFromConfig)(exiting)) {
            exiting.callbackV == null ? void 0 : exiting.callbackV(true);
            return;
          }
          (0, _domUtils.addHTMLMutationObserver)();
          (0, _web.startWebLayoutAnimation)(this.props, this._componentDOMRef, _commonTypes.LayoutAnimationType.EXITING);
        } else if (exiting && !IS_WEB && !(0, _PlatformChecker.isFabric)()) {
          var reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? (0, _util.getReduceMotionFromConfig)(exiting.getReduceMotion()) : (0, _util.getReduceMotionFromConfig)();
          if (!reduceMotionInExiting) {
            this._configureLayoutAnimation(_commonTypes.LayoutAnimationType.EXITING, exiting);
          }
        }
        var wrapper = (_this$_viewInfo2 = this._viewInfo) == null ? void 0 : _this$_viewInfo2.shadowNodeWrapper;
        if (!SHOULD_BE_USE_WEB && (0, _PlatformChecker.isFabric)() && wrapper) {
          (0, _core.markNodeAsRemovable)(wrapper);
        }
        this._willUnmount = true;
      }
    }, {
      key: "getComponentViewTag",
      value: function getComponentViewTag() {
        return this._getViewInfo().viewTag;
      }
    }, {
      key: "_detachStyles",
      value: function _detachStyles() {
        var viewTag = this.getComponentViewTag();
        if (viewTag !== -1 && this._styles !== null) {
          var _this$props$animatedP;
          for (var style of this._styles) {
            style.viewDescriptors.remove(viewTag);
          }
          if ((_this$props$animatedP = this.props.animatedProps) != null && _this$props$animatedP.viewDescriptors) {
            this.props.animatedProps.viewDescriptors.remove(viewTag);
          }
        }
      }
    }, {
      key: "_updateFromNative",
      value: function _updateFromNative(props) {
        if (options != null && options.setNativeProps) {
          options.setNativeProps(this._componentRef, props);
        } else {
          var _this$_componentRef;
          (_this$_componentRef = this._componentRef) == null ? void 0 : _this$_componentRef.setNativeProps == null ? void 0 : _this$_componentRef.setNativeProps(props);
        }
      }
    }, {
      key: "_getViewInfo",
      value: function _getViewInfo() {
        if (this._viewInfo !== undefined) {
          return this._viewInfo;
        }
        var viewTag;
        var viewName;
        var shadowNodeWrapper = null;
        var viewConfig;
        var DOMElement = null;
        if (SHOULD_BE_USE_WEB) {
          viewTag = this._componentRef;
          DOMElement = this._componentDOMRef;
          viewName = null;
          shadowNodeWrapper = null;
          viewConfig = null;
        } else {
          var hostInstance = (0, _findHostInstance.findHostInstance)(this);
          if (!hostInstance) {
            throw new _errors.ReanimatedError('Cannot find host instance for this component. Maybe it renders nothing?');
          }
          var viewInfo = (0, _getViewInfo2.getViewInfo)(hostInstance);
          viewTag = viewInfo.viewTag;
          viewName = viewInfo.viewName;
          viewConfig = viewInfo.viewConfig;
          shadowNodeWrapper = (0, _PlatformChecker.isFabric)() ? (0, _fabricUtils.getShadowNodeWrapperFromRef)(this, hostInstance) : null;
        }
        this._viewInfo = {
          viewTag: viewTag,
          viewName: viewName,
          shadowNodeWrapper: shadowNodeWrapper,
          viewConfig: viewConfig
        };
        if (DOMElement) {
          this._viewInfo.DOMElement = DOMElement;
        }
        return this._viewInfo;
      }
    }, {
      key: "_attachAnimatedStyles",
      value: function _attachAnimatedStyles() {
        var _this$props$animatedP2,
          _this2 = this,
          _this$props$animatedP3;
        var styles = this.props.style ? onlyAnimatedStyles((0, _utils.flattenArray)(this.props.style)) : [];
        var animatedProps = this.props.animatedProps;
        var prevStyles = this._styles;
        this._styles = styles;
        var prevAnimatedProps = this._animatedProps;
        this._animatedProps = animatedProps;
        var _this$_getViewInfo = this._getViewInfo(),
          viewTag = _this$_getViewInfo.viewTag,
          viewName = _this$_getViewInfo.viewName,
          shadowNodeWrapper = _this$_getViewInfo.shadowNodeWrapper,
          viewConfig = _this$_getViewInfo.viewConfig;
        var hasReanimated2Props = ((_this$props$animatedP2 = this.props.animatedProps) == null ? void 0 : _this$props$animatedP2.viewDescriptors) || styles.length;
        if (hasReanimated2Props && viewConfig) {
          (0, _ConfigHelper.adaptViewConfig)(viewConfig);
        }
        var newStyles = new Set(styles);
        var isStyleAttached = function isStyleAttached(style) {
          return style.viewDescriptors.has(viewTag);
        };
        if (prevStyles) {
          var hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && styles[0] === prevStyles[0];
          if (hasOneSameStyle && isStyleAttached(prevStyles[0])) {
            return;
          }
          var _loop = function _loop(prevStyle) {
            var isPresent = styles.some(function (style) {
              return style === prevStyle;
            });
            if (!isPresent && isStyleAttached(prevStyle)) {
              prevStyle.viewDescriptors.remove(viewTag);
            }
          };
          for (var prevStyle of prevStyles) {
            _loop(prevStyle);
          }
        }
        if (animatedProps && IS_JEST) {
          var _animatedProps$initia;
          this.jestAnimatedProps.value = _objectSpread(_objectSpread({}, this.jestAnimatedProps.value), animatedProps == null ? void 0 : (_animatedProps$initia = animatedProps.initial) == null ? void 0 : _animatedProps$initia.value);
          if (animatedProps != null && animatedProps.jestAnimatedValues) {
            animatedProps.jestAnimatedValues.current = this.jestAnimatedProps;
          }
        }
        newStyles.forEach(function (style) {
          style.viewDescriptors.add({
            tag: viewTag,
            name: viewName,
            shadowNodeWrapper: shadowNodeWrapper
          });
          if (IS_JEST) {
            _this2.jestAnimatedStyle.value = _objectSpread(_objectSpread({}, _this2.jestAnimatedStyle.value), style.initial.value);
            style.jestAnimatedValues.current = _this2.jestAnimatedStyle;
          }
        });
        if (prevAnimatedProps && prevAnimatedProps !== this.props.animatedProps) {
          prevAnimatedProps.viewDescriptors.remove(viewTag);
        }
        if ((_this$props$animatedP3 = this.props.animatedProps) != null && _this$props$animatedP3.viewDescriptors) {
          this.props.animatedProps.viewDescriptors.add({
            tag: viewTag,
            name: viewName,
            shadowNodeWrapper: shadowNodeWrapper
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, _prevState, snapshot) {
        var _this$_NativeEventsMa3;
        this._configureLayoutAnimation(_commonTypes.LayoutAnimationType.LAYOUT, this.props.layout, prevProps.layout);
        this._configureLayoutAnimation(_commonTypes.LayoutAnimationType.EXITING, this.props.exiting, prevProps.exiting);
        if (this.props.sharedTransitionTag !== undefined || prevProps.sharedTransitionTag !== undefined) {
          this._configureSharedTransition();
        }
        (_this$_NativeEventsMa3 = this._NativeEventsManager) == null ? void 0 : _this$_NativeEventsMa3.updateEvents(prevProps);
        this._attachAnimatedStyles();
        this._InlinePropManager.attachInlineProps(this, this._getViewInfo());
        if (IS_WEB && this.props.exiting && this._componentDOMRef) {
          (0, _web.saveSnapshot)(this._componentDOMRef);
        }
        if (IS_WEB && snapshot && this.props.layout) {
          if ((0, _web.getReducedMotionFromConfig)(this.props.layout)) {
            var _callbackV2, _ref3;
            (_callbackV2 = (_ref3 = this.props.layout).callbackV) == null ? void 0 : _callbackV2.call(_ref3, true);
            return;
          }
          (0, _web.tryActivateLayoutTransition)(this.props, this._componentDOMRef, snapshot);
        }
      }
    }, {
      key: "_configureLayoutAnimation",
      value: function _configureLayoutAnimation(type, currentConfig, previousConfig) {
        var _this$props2;
        if (IS_WEB || currentConfig === previousConfig) {
          return;
        }
        if (this._isReducedMotion(currentConfig)) {
          if (!previousConfig) {
            return;
          }
          currentConfig = undefined;
        }
        (0, _UpdateLayoutAnimations.updateLayoutAnimations)((0, _PlatformChecker.isFabric)() && type === _commonTypes.LayoutAnimationType.ENTERING ? this.reanimatedID : this.getComponentViewTag(), type, currentConfig && (0, _animationBuilder.maybeBuild)(currentConfig, type === _commonTypes.LayoutAnimationType.LAYOUT ? undefined : (_this$props2 = this.props) == null ? void 0 : _this$props2.style, AnimatedComponent.displayName));
      }
    }, {
      key: "_configureSharedTransition",
      value: function _configureSharedTransition() {
        var _ref4, _this$props$sharedTra;
        var isUnmounting = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (IS_WEB) {
          return;
        }
        var sharedTransitionTag = this.props.sharedTransitionTag;
        if (!sharedTransitionTag) {
          var _this$_sharedElementT2;
          (_this$_sharedElementT2 = this._sharedElementTransition) == null ? void 0 : _this$_sharedElementT2.unregisterTransition(this.getComponentViewTag(), isUnmounting);
          this._sharedElementTransition = null;
          return;
        }
        var sharedElementTransition = (_ref4 = (_this$props$sharedTra = this.props.sharedTransitionStyle) != null ? _this$props$sharedTra : this._sharedElementTransition) != null ? _ref4 : new _layoutReanimation.SharedTransition();
        sharedElementTransition.registerTransition(this.getComponentViewTag(), sharedTransitionTag, isUnmounting);
        this._sharedElementTransition = sharedElementTransition;
      }
    }, {
      key: "_isReducedMotion",
      value: function _isReducedMotion(config) {
        return config && 'getReduceMotion' in config && typeof config.getReduceMotion === 'function' ? (0, _util.getReduceMotionFromConfig)(config.getReduceMotion()) : (0, _util.getReduceMotionFromConfig)();
      }
    }, {
      key: "getSnapshotBeforeUpdate",
      value: function getSnapshotBeforeUpdate() {
        var _this$_componentDOMRe;
        if (IS_WEB && this.props.layout && (_this$_componentDOMRe = this._componentDOMRef) != null && _this$_componentDOMRe.getBoundingClientRect) {
          return this._componentDOMRef.getBoundingClientRect();
        }
        return null;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$context4;
        var filteredProps = this._PropsFilter.filterNonAnimatedProps(this);
        if (IS_JEST) {
          filteredProps.jestAnimatedStyle = this.jestAnimatedStyle;
          filteredProps.jestAnimatedProps = this.jestAnimatedProps;
        }
        if (this._isFirstRender && IS_WEB && filteredProps.entering && !(0, _web.getReducedMotionFromConfig)(filteredProps.entering)) {
          var _filteredProps$style;
          filteredProps.style = Array.isArray(filteredProps.style) ? filteredProps.style.concat([{
            visibility: 'hidden'
          }]) : _objectSpread(_objectSpread({}, (_filteredProps$style = filteredProps.style) != null ? _filteredProps$style : {}), {}, {
            visibility: 'hidden'
          });
        }
        var platformProps = _reactNative.Platform.select({
          web: {},
          default: {
            collapsable: false
          }
        });
        var skipEntering = (_this$context4 = this.context) == null ? void 0 : _this$context4.current;
        var nativeID = skipEntering || !(0, _PlatformChecker.isFabric)() ? undefined : `${this.reanimatedID}`;
        var jestProps = IS_JEST ? {
          jestInlineStyle: this.props.style && filterOutAnimatedStyles(this.props.style),
          jestAnimatedStyle: this.jestAnimatedStyle,
          jestAnimatedProps: this.jestAnimatedProps
        } : {};
        return (0, _jsxRuntime.jsx)(Component, _objectSpread(_objectSpread(_objectSpread({
          nativeID: nativeID
        }, filteredProps), jestProps), {}, {
          ref: this._setComponentRef
        }, platformProps));
      }
    }]);
  }(_react.default.Component);
  AnimatedComponent.contextType = _LayoutAnimationConfig.SkipEnteringContext;
  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName || Component.name || 'Component'})`;
  var animatedComponent = (0, _reactUtils.componentWithRef)(function (props, ref) {
    return (0, _jsxRuntime.jsx)(AnimatedComponent, _objectSpread(_objectSpread({}, props), ref === null ? null : {
      forwardedRef: ref
    }));
  });
  animatedComponent.displayName = Component.displayName || Component.name || 'Component';
  return animatedComponent;
}
function filterOutAnimatedStyles(style) {
  if (!style) {
    return style;
  }
  if (!Array.isArray(style)) {
    return style != null && style.viewDescriptors ? {} : style;
  }
  return style.filter(function (styleElement) {
    return !(styleElement && 'viewDescriptors' in styleElement);
  }).map(function (styleElement) {
    if (Array.isArray(styleElement)) {
      return filterOutAnimatedStyles(styleElement);
    }
    return styleElement;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,