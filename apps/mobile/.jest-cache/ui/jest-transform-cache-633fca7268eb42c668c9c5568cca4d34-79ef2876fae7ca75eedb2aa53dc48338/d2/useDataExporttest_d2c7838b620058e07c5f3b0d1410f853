db9a92a541b8de0cc5250abdc91c234a
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('expo-file-system', function () {
  return {
    documentDirectory: 'file:///documents/',
    downloadAsync: _globals.jest.fn(),
    getInfoAsync: _globals.jest.fn(),
    deleteAsync: _globals.jest.fn()
  };
});
_getJestObj().mock("../../../services/gdprService", function () {
  return {
    exportUserData: _globals.jest.fn(),
    downloadExport: _globals.jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _useDataExport = require("../useDataExport");
var _gdprService = require("../../../services/gdprService");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockFileSystem = FileSystem;
var mockExportUserData = _gdprService.exportUserData;
var mockDownloadExport = _gdprService.downloadExport;
(0, _globals.describe)('useDataExport', function () {
  var mockExportResponse = {
    success: true,
    exportId: 'export-123',
    estimatedTime: '2 minutes',
    message: 'Export started successfully',
    exportData: {
      profile: {
        name: 'John Doe',
        email: 'john@example.com'
      },
      matches: [{
        id: 'match1',
        petName: 'Buddy'
      }]
    }
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockAsyncStorage.removeItem.mockResolvedValue(undefined);
    mockExportUserData.mockResolvedValue(mockExportResponse);
    mockDownloadExport.mockResolvedValue(new Blob(['export data']));
    mockFileSystem.downloadAsync.mockResolvedValue({
      uri: 'file:///documents/export.json',
      status: 200,
      headers: {},
      mimeType: 'application/json'
    });
    mockFileSystem.getInfoAsync.mockResolvedValue({
      exists: true,
      size: 1024,
      uri: 'file:///documents/export.json',
      isDirectory: false
    });
  });
  (0, _globals.describe)('Initial State', function () {
    (0, _globals.it)('should initialize with default state', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.isExporting).toBe(false);
      (0, _globals.expect)(result.current.isDownloading).toBe(false);
      (0, _globals.expect)(result.current.exportData).toBeNull();
      (0, _globals.expect)(result.current.downloadUrl).toBeNull();
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.lastExportTime).toBeNull();
    });
    (0, _globals.it)('should load cached export data on mount', (0, _asyncToGenerator2.default)(function* () {
      var cachedData = {
        exportId: 'cached-export-123',
        exportData: {
          profile: {
            name: 'Cached User'
          }
        },
        timestamp: Date.now()
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(cachedData));
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.exportData).toEqual(cachedData.exportData);
        (0, _globals.expect)(result.current.lastExportTime).toBe(cachedData.timestamp);
      });
    }));
    (0, _globals.it)('should handle corrupted cache data gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('invalid json');
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook3.result;
      (0, _globals.expect)(result.current.exportData).toBeNull();
      (0, _globals.expect)(result.current.error).toBeNull();
    }));
  });
  (0, _globals.describe)('Export Data', function () {
    (0, _globals.it)('should successfully export user data with default options', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(mockExportUserData).toHaveBeenCalledWith({
        format: 'json',
        includeMessages: true,
        includeMatches: true,
        includeProfileData: true,
        includePreferences: true
      });
      (0, _globals.expect)(result.current.isExporting).toBe(false);
      (0, _globals.expect)(result.current.exportData).toEqual(mockExportResponse.exportData);
      (0, _globals.expect)(result.current.lastExportTime).toBeGreaterThan(0);
    }));
    (0, _globals.it)('should export data with custom options', (0, _asyncToGenerator2.default)(function* () {
      var customOptions = {
        format: 'csv',
        includeMessages: false,
        includeMatches: true,
        includeProfileData: true,
        includePreferences: false
      };
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData(customOptions);
      }));
      (0, _globals.expect)(mockExportUserData).toHaveBeenCalledWith(customOptions);
    }));
    (0, _globals.it)('should handle export in progress state', (0, _asyncToGenerator2.default)(function* () {
      var resolveExport;
      var exportPromise = new Promise(function (resolve) {
        resolveExport = resolve;
      });
      mockExportUserData.mockReturnValue(exportPromise);
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.exportData();
      });
      (0, _globals.expect)(result.current.isExporting).toBe(true);
      (0, _reactNative.act)(function () {
        resolveExport(mockExportResponse);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isExporting).toBe(false);
      });
    }));
    (0, _globals.it)('should handle export errors', (0, _asyncToGenerator2.default)(function* () {
      var errorMessage = 'Export failed due to server error';
      mockExportUserData.mockRejectedValue(new Error(errorMessage));
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.isExporting).toBe(false);
      (0, _globals.expect)(result.current.error).toBe(errorMessage);
      (0, _globals.expect)(result.current.exportData).toBeNull();
    }));
    (0, _globals.it)('should clear previous errors on new export', (0, _asyncToGenerator2.default)(function* () {
      mockExportUserData.mockRejectedValueOnce(new Error('First error'));
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBe('First error');
      mockExportUserData.mockResolvedValueOnce(mockExportResponse);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.exportData).toEqual(mockExportResponse.exportData);
    }));
  });
  (0, _globals.describe)('Download Export', function () {
    (0, _globals.it)('should successfully download exported data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(mockDownloadExport).toHaveBeenCalledWith('export-123');
      (0, _globals.expect)(mockFileSystem.downloadAsync).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
        to: _globals.expect.stringContaining('gdpr-export')
      }));
      (0, _globals.expect)(result.current.isDownloading).toBe(false);
      (0, _globals.expect)(result.current.downloadUrl).toBe('file:///documents/export.json');
    }));
    (0, _globals.it)('should handle download without export ID', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(mockDownloadExport).not.toHaveBeenCalled();
      (0, _globals.expect)(result.current.error).toBe('No export data available');
    }));
    (0, _globals.it)('should handle download in progress state', (0, _asyncToGenerator2.default)(function* () {
      var resolveDownload;
      var downloadPromise = new Promise(function (resolve) {
        resolveDownload = resolve;
      });
      mockFileSystem.downloadAsync.mockReturnValue(downloadPromise);
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook1.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
        result.current.lastExportTime = Date.now();
      });
      (0, _reactNative.act)(function () {
        result.current.downloadExport();
      });
      (0, _globals.expect)(result.current.isDownloading).toBe(true);
      (0, _reactNative.act)(function () {
        resolveDownload({
          uri: 'file:///documents/completed-export.json',
          status: 200,
          headers: {},
          mimeType: 'application/json'
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isDownloading).toBe(false);
      });
    }));
    (0, _globals.it)('should handle download errors', (0, _asyncToGenerator2.default)(function* () {
      mockDownloadExport.mockRejectedValue(new Error('Download failed'));
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook10.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(result.current.isDownloading).toBe(false);
      (0, _globals.expect)(result.current.error).toBe('Download failed');
    }));
    (0, _globals.it)('should handle file system errors during download', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.downloadAsync.mockRejectedValue(new Error('File system error'));
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook11.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(result.current.error).toBe('File system error');
    }));
  });
  (0, _globals.describe)('Cache Management', function () {
    (0, _globals.it)('should cache export data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook12.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('gdpr_export_data', _globals.expect.any(String));
      var cachedData = JSON.parse(mockAsyncStorage.setItem.mock.calls[0][1]);
      (0, _globals.expect)(cachedData.exportData).toEqual(mockExportResponse.exportData);
      (0, _globals.expect)(cachedData.timestamp).toBeDefined();
    }));
    (0, _globals.it)('should clear cache when requested', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook13.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
        result.current.lastExportTime = Date.now();
      });
      (0, _reactNative.act)(function () {
        result.current.clearCache();
      });
      (0, _globals.expect)(result.current.exportData).toBeNull();
      (0, _globals.expect)(result.current.lastExportTime).toBeNull();
      (0, _globals.expect)(result.current.downloadUrl).toBeNull();
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(mockAsyncStorage.removeItem).toHaveBeenCalledWith('gdpr_export_data');
    }));
    (0, _globals.it)('should handle cache clearing errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.removeItem.mockRejectedValue(new Error('Cache clear failed'));
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook14.result;
      (0, _reactNative.act)(function () {
        result.current.clearCache();
      });
      (0, _globals.expect)(result.current.exportData).toBeNull();
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle network errors during export', (0, _asyncToGenerator2.default)(function* () {
      mockExportUserData.mockRejectedValue(new Error('Network Error'));
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBe('Network Error');
    }));
    (0, _globals.it)('should handle server errors with custom messages', (0, _asyncToGenerator2.default)(function* () {
      mockExportUserData.mockRejectedValue({
        message: 'Server temporarily unavailable'
      });
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBe('Server temporarily unavailable');
    }));
    (0, _globals.it)('should handle malformed server responses', (0, _asyncToGenerator2.default)(function* () {
      mockExportUserData.mockResolvedValue({
        success: true
      });
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.exportData).toBeDefined();
    }));
    (0, _globals.it)('should reset error state on successful operations', (0, _asyncToGenerator2.default)(function* () {
      mockExportUserData.mockRejectedValueOnce(new Error('First error'));
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook18.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBe('First error');
      mockExportUserData.mockResolvedValueOnce(mockExportResponse);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
    }));
  });
  (0, _globals.describe)('File Management', function () {
    (0, _globals.it)('should generate proper download filename', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook19.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(mockFileSystem.downloadAsync).toHaveBeenCalledWith(_globals.expect.any(String), _globals.expect.objectContaining({
        to: _globals.expect.stringContaining('gdpr-export-export-123')
      }));
    }));
    (0, _globals.it)('should handle file cleanup on errors', (0, _asyncToGenerator2.default)(function* () {
      mockFileSystem.downloadAsync.mockRejectedValue(new Error('Download failed'));
      mockFileSystem.deleteAsync.mockResolvedValue(undefined);
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook20.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(mockFileSystem.deleteAsync).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Concurrent Operations', function () {
    (0, _globals.it)('should prevent concurrent exports', (0, _asyncToGenerator2.default)(function* () {
      var resolveExport;
      var exportPromise = new Promise(function (resolve) {
        resolveExport = resolve;
      });
      mockExportUserData.mockReturnValue(exportPromise);
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook21.result;
      (0, _reactNative.act)(function () {
        result.current.exportData();
      });
      (0, _reactNative.act)(function () {
        result.current.exportData();
      });
      (0, _globals.expect)(mockExportUserData).toHaveBeenCalledTimes(1);
      (0, _reactNative.act)(function () {
        resolveExport(mockExportResponse);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isExporting).toBe(false);
      });
    }));
    (0, _globals.it)('should handle concurrent downloads', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook22.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = mockExportResponse.exportData;
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield Promise.all([result.current.downloadExport(), result.current.downloadExport(), result.current.downloadExport()]);
      }));
      (0, _globals.expect)(mockDownloadExport).toHaveBeenCalledTimes(1);
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty export data', (0, _asyncToGenerator2.default)(function* () {
      var emptyResponse = {
        success: true,
        exportId: 'empty-export',
        estimatedTime: '1 minute',
        message: 'Export completed',
        exportData: {}
      };
      mockExportUserData.mockResolvedValue(emptyResponse);
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook23.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.exportData).toEqual({});
    }));
    (0, _globals.it)('should handle very large export data', (0, _asyncToGenerator2.default)(function* () {
      var largeExportData = {
        profile: {
          name: 'A'.repeat(1000)
        },
        matches: Array.from({
          length: 500
        }, function (_, i) {
          return {
            id: `match${i}`,
            data: 'x'.repeat(100)
          };
        })
      };
      var largeResponse = {
        success: true,
        exportId: 'large-export',
        estimatedTime: '10 minutes',
        message: 'Large export in progress',
        exportData: largeExportData
      };
      mockExportUserData.mockResolvedValue(largeResponse);
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook24.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.exportData).toEqual(largeExportData);
    }));
    (0, _globals.it)('should handle export with missing optional fields', (0, _asyncToGenerator2.default)(function* () {
      var minimalResponse = {
        success: true,
        exportId: 'minimal-export',
        estimatedTime: '30 seconds',
        message: 'Quick export',
        exportData: {
          profile: {
            name: 'Test'
          }
        }
      };
      mockExportUserData.mockResolvedValue(minimalResponse);
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook25.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.exportData();
      }));
      (0, _globals.expect)(result.current.exportData).toEqual({
        profile: {
          name: 'Test'
        }
      });
    }));
    (0, _globals.it)('should handle download with non-existent export', (0, _asyncToGenerator2.default)(function* () {
      mockDownloadExport.mockRejectedValue(new Error('Export not found'));
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _useDataExport.useDataExport)();
        }),
        result = _renderHook26.result;
      (0, _reactNative.act)(function () {
        result.current.exportData = {
          profile: {
            name: 'Test'
          }
        };
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.downloadExport();
      }));
      (0, _globals.expect)(result.current.error).toBe('Export not found');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJkb2N1bWVudERpcmVjdG9yeSIsImRvd25sb2FkQXN5bmMiLCJqZXN0IiwiZm4iLCJnZXRJbmZvQXN5bmMiLCJkZWxldGVBc3luYyIsImV4cG9ydFVzZXJEYXRhIiwiZG93bmxvYWRFeHBvcnQiLCJsb2dnZXIiLCJpbmZvIiwiZXJyb3IiLCJ3YXJuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfZ2xvYmFscyIsIl9yZWFjdE5hdGl2ZSIsIl9hc3luY1N0b3JhZ2UiLCJGaWxlU3lzdGVtIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfdXNlRGF0YUV4cG9ydCIsIl9nZHByU2VydmljZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdDIiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9yZXF1aXJlIiwibW9ja0FzeW5jU3RvcmFnZSIsIkFzeW5jU3RvcmFnZSIsIm1vY2tGaWxlU3lzdGVtIiwibW9ja0V4cG9ydFVzZXJEYXRhIiwibW9ja0Rvd25sb2FkRXhwb3J0IiwiZGVzY3JpYmUiLCJtb2NrRXhwb3J0UmVzcG9uc2UiLCJzdWNjZXNzIiwiZXhwb3J0SWQiLCJlc3RpbWF0ZWRUaW1lIiwibWVzc2FnZSIsImV4cG9ydERhdGEiLCJwcm9maWxlIiwibmFtZSIsImVtYWlsIiwibWF0Y2hlcyIsImlkIiwicGV0TmFtZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiZ2V0SXRlbSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwic2V0SXRlbSIsInVuZGVmaW5lZCIsInJlbW92ZUl0ZW0iLCJCbG9iIiwidXJpIiwic3RhdHVzIiwiaGVhZGVycyIsIm1pbWVUeXBlIiwiZXhpc3RzIiwic2l6ZSIsImlzRGlyZWN0b3J5IiwiaXQiLCJfcmVuZGVySG9vayIsInJlbmRlckhvb2siLCJ1c2VEYXRhRXhwb3J0IiwicmVzdWx0IiwiZXhwZWN0IiwiY3VycmVudCIsImlzRXhwb3J0aW5nIiwidG9CZSIsImlzRG93bmxvYWRpbmciLCJ0b0JlTnVsbCIsImRvd25sb2FkVXJsIiwibGFzdEV4cG9ydFRpbWUiLCJjYWNoZWREYXRhIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsIkpTT04iLCJzdHJpbmdpZnkiLCJfcmVuZGVySG9vazIiLCJ3YWl0Rm9yIiwidG9FcXVhbCIsIl9yZW5kZXJIb29rMyIsIl9yZW5kZXJIb29rNCIsImFjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiZm9ybWF0IiwiaW5jbHVkZU1lc3NhZ2VzIiwiaW5jbHVkZU1hdGNoZXMiLCJpbmNsdWRlUHJvZmlsZURhdGEiLCJpbmNsdWRlUHJlZmVyZW5jZXMiLCJ0b0JlR3JlYXRlclRoYW4iLCJjdXN0b21PcHRpb25zIiwiX3JlbmRlckhvb2s1IiwicmVzb2x2ZUV4cG9ydCIsImV4cG9ydFByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1vY2tSZXR1cm5WYWx1ZSIsIl9yZW5kZXJIb29rNiIsImVycm9yTWVzc2FnZSIsIm1vY2tSZWplY3RlZFZhbHVlIiwiRXJyb3IiLCJfcmVuZGVySG9vazciLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiLCJfcmVuZGVySG9vazgiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJfcmVuZGVySG9vazkiLCJhbnkiLCJTdHJpbmciLCJvYmplY3RDb250YWluaW5nIiwidG8iLCJzdHJpbmdDb250YWluaW5nIiwiX3JlbmRlckhvb2swIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsInJlc29sdmVEb3dubG9hZCIsImRvd25sb2FkUHJvbWlzZSIsIl9yZW5kZXJIb29rMSIsIl9yZW5kZXJIb29rMTAiLCJfcmVuZGVySG9vazExIiwiX3JlbmRlckhvb2sxMiIsInBhcnNlIiwiY2FsbHMiLCJ0b0JlRGVmaW5lZCIsIl9yZW5kZXJIb29rMTMiLCJjbGVhckNhY2hlIiwiX3JlbmRlckhvb2sxNCIsIl9yZW5kZXJIb29rMTUiLCJfcmVuZGVySG9vazE2IiwiX3JlbmRlckhvb2sxNyIsIl9yZW5kZXJIb29rMTgiLCJfcmVuZGVySG9vazE5IiwiX3JlbmRlckhvb2syMCIsIl9yZW5kZXJIb29rMjEiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfcmVuZGVySG9vazIyIiwiYWxsIiwiZW1wdHlSZXNwb25zZSIsIl9yZW5kZXJIb29rMjMiLCJsYXJnZUV4cG9ydERhdGEiLCJyZXBlYXQiLCJBcnJheSIsImZyb20iLCJsZW5ndGgiLCJfIiwiZGF0YSIsImxhcmdlUmVzcG9uc2UiLCJfcmVuZGVySG9vazI0IiwibWluaW1hbFJlc3BvbnNlIiwiX3JlbmRlckhvb2syNSIsIl9yZW5kZXJIb29rMjYiXSwic291cmNlcyI6WyJ1c2VEYXRhRXhwb3J0LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21wcmVoZW5zaXZlIHRlc3RzIGZvciB1c2VEYXRhRXhwb3J0IGhvb2tcbiAqXG4gKiBDb3ZlcmFnZTpcbiAqIC0gR0RQUiBkYXRhIGV4cG9ydCBmdW5jdGlvbmFsaXR5XG4gKiAtIEV4cG9ydCByZXF1ZXN0IGluaXRpYXRpb25cbiAqIC0gRXhwb3J0IHN0YXR1cyB0cmFja2luZ1xuICogLSBEb3dubG9hZCBoYW5kbGluZ1xuICogLSBFcnJvciBzdGF0ZXMgYW5kIHJlY292ZXJ5XG4gKiAtIExvYWRpbmcgc3RhdGVzXG4gKiAtIENhY2hlIG1hbmFnZW1lbnRcbiAqIC0gVHlwZSBzYWZldHlcbiAqL1xuXG5pbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCwgamVzdCwgYmVmb3JlRWFjaCwgYWZ0ZXJFYWNoIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyByZW5kZXJIb29rLCBhY3QsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQXN5bmNTdG9yYWdlIGZyb20gJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJztcbmltcG9ydCAqIGFzIEZpbGVTeXN0ZW0gZnJvbSAnZXhwby1maWxlLXN5c3RlbSc7XG5pbXBvcnQgeyB1c2VEYXRhRXhwb3J0IH0gZnJvbSAnLi4vdXNlRGF0YUV4cG9ydCc7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJyk7XG5qZXN0Lm1vY2soJ2V4cG8tZmlsZS1zeXN0ZW0nLCAoKSA9PiAoe1xuICBkb2N1bWVudERpcmVjdG9yeTogJ2ZpbGU6Ly8vZG9jdW1lbnRzLycsXG4gIGRvd25sb2FkQXN5bmM6IGplc3QuZm4oKSxcbiAgZ2V0SW5mb0FzeW5jOiBqZXN0LmZuKCksXG4gIGRlbGV0ZUFzeW5jOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgdGhlIEdEUFIgc2VydmljZVxuamVzdC5tb2NrKCcuLi8uLi8uLi9zZXJ2aWNlcy9nZHByU2VydmljZScsICgpID0+ICh7XG4gIGV4cG9ydFVzZXJEYXRhOiBqZXN0LmZuKCksXG4gIGRvd25sb2FkRXhwb3J0OiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgbG9nZ2VyXG5qZXN0Lm1vY2soJ0BwYXdmZWN0bWF0Y2gvY29yZScsICgpID0+ICh7XG4gIGxvZ2dlcjoge1xuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICBlcnJvcjogamVzdC5mbigpLFxuICAgIHdhcm46IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuaW1wb3J0IHsgZXhwb3J0VXNlckRhdGEsIGRvd25sb2FkRXhwb3J0IH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvZ2RwclNlcnZpY2UnO1xuXG5jb25zdCBtb2NrQXN5bmNTdG9yYWdlID0gQXN5bmNTdG9yYWdlIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBBc3luY1N0b3JhZ2U+O1xuY29uc3QgbW9ja0ZpbGVTeXN0ZW0gPSBGaWxlU3lzdGVtIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBGaWxlU3lzdGVtPjtcbmNvbnN0IG1vY2tFeHBvcnRVc2VyRGF0YSA9IGV4cG9ydFVzZXJEYXRhIGFzIGplc3QuTW9jaztcbmNvbnN0IG1vY2tEb3dubG9hZEV4cG9ydCA9IGRvd25sb2FkRXhwb3J0IGFzIGplc3QuTW9jaztcblxuZGVzY3JpYmUoJ3VzZURhdGFFeHBvcnQnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tFeHBvcnRSZXNwb25zZSA9IHtcbiAgICBzdWNjZXNzOiB0cnVlLFxuICAgIGV4cG9ydElkOiAnZXhwb3J0LTEyMycsXG4gICAgZXN0aW1hdGVkVGltZTogJzIgbWludXRlcycsXG4gICAgbWVzc2FnZTogJ0V4cG9ydCBzdGFydGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgZXhwb3J0RGF0YToge1xuICAgICAgcHJvZmlsZTogeyBuYW1lOiAnSm9obiBEb2UnLCBlbWFpbDogJ2pvaG5AZXhhbXBsZS5jb20nIH0sXG4gICAgICBtYXRjaGVzOiBbeyBpZDogJ21hdGNoMScsIHBldE5hbWU6ICdCdWRkeScgfV0sXG4gICAgfSxcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcblxuICAgIC8vIFNldHVwIGRlZmF1bHQgbW9ja3NcbiAgICBtb2NrQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG4gICAgbW9ja0FzeW5jU3RvcmFnZS5zZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgbW9ja0FzeW5jU3RvcmFnZS5yZW1vdmVJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICBtb2NrRXhwb3J0VXNlckRhdGEubW9ja1Jlc29sdmVkVmFsdWUobW9ja0V4cG9ydFJlc3BvbnNlKTtcbiAgICBtb2NrRG93bmxvYWRFeHBvcnQubW9ja1Jlc29sdmVkVmFsdWUobmV3IEJsb2IoWydleHBvcnQgZGF0YSddKSk7XG5cbiAgICBtb2NrRmlsZVN5c3RlbS5kb3dubG9hZEFzeW5jLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIHVyaTogJ2ZpbGU6Ly8vZG9jdW1lbnRzL2V4cG9ydC5qc29uJyxcbiAgICAgIHN0YXR1czogMjAwLFxuICAgICAgaGVhZGVyczoge30sXG4gICAgICBtaW1lVHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIH0pO1xuXG4gICAgbW9ja0ZpbGVTeXN0ZW0uZ2V0SW5mb0FzeW5jLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIGV4aXN0czogdHJ1ZSxcbiAgICAgIHNpemU6IDEwMjQsXG4gICAgICB1cmk6ICdmaWxlOi8vL2RvY3VtZW50cy9leHBvcnQuanNvbicsXG4gICAgICBpc0RpcmVjdG9yeTogZmFsc2UsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbml0aWFsIFN0YXRlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgc3RhdGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNFeHBvcnRpbmcpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRG93bmxvYWRpbmcpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZG93bmxvYWRVcmwpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQubGFzdEV4cG9ydFRpbWUpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGxvYWQgY2FjaGVkIGV4cG9ydCBkYXRhIG9uIG1vdW50JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY2FjaGVkRGF0YSA9IHtcbiAgICAgICAgZXhwb3J0SWQ6ICdjYWNoZWQtZXhwb3J0LTEyMycsXG4gICAgICAgIGV4cG9ydERhdGE6IHsgcHJvZmlsZTogeyBuYW1lOiAnQ2FjaGVkIFVzZXInIH0gfSxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgfTtcblxuICAgICAgbW9ja0FzeW5jU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXNvbHZlZFZhbHVlKEpTT04uc3RyaW5naWZ5KGNhY2hlZERhdGEpKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5leHBvcnREYXRhKS50b0VxdWFsKGNhY2hlZERhdGEuZXhwb3J0RGF0YSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5sYXN0RXhwb3J0VGltZSkudG9CZShjYWNoZWREYXRhLnRpbWVzdGFtcCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNvcnJ1cHRlZCBjYWNoZSBkYXRhIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXN5bmNTdG9yYWdlLmdldEl0ZW0ubW9ja1Jlc29sdmVkVmFsdWUoJ2ludmFsaWQganNvbicpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICAvLyBTaG91bGQgbm90IGNyYXNoLCBzaG91bGQgdXNlIGRlZmF1bHQgc3RhdGVcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5leHBvcnREYXRhKS50b0JlTnVsbCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXhwb3J0IERhdGEnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzdWNjZXNzZnVsbHkgZXhwb3J0IHVzZXIgZGF0YSB3aXRoIGRlZmF1bHQgb3B0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZURhdGFFeHBvcnQoKSk7XG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja0V4cG9ydFVzZXJEYXRhKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIGZvcm1hdDogJ2pzb24nLFxuICAgICAgICBpbmNsdWRlTWVzc2FnZXM6IHRydWUsXG4gICAgICAgIGluY2x1ZGVNYXRjaGVzOiB0cnVlLFxuICAgICAgICBpbmNsdWRlUHJvZmlsZURhdGE6IHRydWUsXG4gICAgICAgIGluY2x1ZGVQcmVmZXJlbmNlczogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNFeHBvcnRpbmcpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEpLnRvRXF1YWwobW9ja0V4cG9ydFJlc3BvbnNlLmV4cG9ydERhdGEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lmxhc3RFeHBvcnRUaW1lKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGV4cG9ydCBkYXRhIHdpdGggY3VzdG9tIG9wdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21PcHRpb25zID0ge1xuICAgICAgICBmb3JtYXQ6ICdjc3YnIGFzIGNvbnN0LFxuICAgICAgICBpbmNsdWRlTWVzc2FnZXM6IGZhbHNlLFxuICAgICAgICBpbmNsdWRlTWF0Y2hlczogdHJ1ZSxcbiAgICAgICAgaW5jbHVkZVByb2ZpbGVEYXRhOiB0cnVlLFxuICAgICAgICBpbmNsdWRlUHJlZmVyZW5jZXM6IGZhbHNlLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YShjdXN0b21PcHRpb25zKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja0V4cG9ydFVzZXJEYXRhKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjdXN0b21PcHRpb25zKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGV4cG9ydCBpbiBwcm9ncmVzcyBzdGF0ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCByZXNvbHZlRXhwb3J0OiAodmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgICAgIGNvbnN0IGV4cG9ydFByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgcmVzb2x2ZUV4cG9ydCA9IHJlc29sdmU7XG4gICAgICB9KTtcblxuICAgICAgbW9ja0V4cG9ydFVzZXJEYXRhLm1vY2tSZXR1cm5WYWx1ZShleHBvcnRQcm9taXNlKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgLy8gU3RhcnQgZXhwb3J0XG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5leHBvcnREYXRhKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRXhwb3J0aW5nKS50b0JlKHRydWUpO1xuXG4gICAgICAvLyBDb21wbGV0ZSBleHBvcnRcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc29sdmVFeHBvcnQhKG1vY2tFeHBvcnRSZXNwb25zZSk7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0V4cG9ydGluZykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGV4cG9ydCBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAnRXhwb3J0IGZhaWxlZCBkdWUgdG8gc2VydmVyIGVycm9yJztcbiAgICAgIG1vY2tFeHBvcnRVc2VyRGF0YS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZURhdGFFeHBvcnQoKSk7XG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNFeHBvcnRpbmcpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlKGVycm9yTWVzc2FnZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSkudG9CZU51bGwoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2xlYXIgcHJldmlvdXMgZXJyb3JzIG9uIG5ldyBleHBvcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBGaXJzdCBleHBvcnQgZmFpbHNcbiAgICAgIG1vY2tFeHBvcnRVc2VyRGF0YS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdGaXJzdCBlcnJvcicpKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5lcnJvcikudG9CZSgnRmlyc3QgZXJyb3InKTtcblxuICAgICAgLy8gU2Vjb25kIGV4cG9ydCBzdWNjZWVkc1xuICAgICAgbW9ja0V4cG9ydFVzZXJEYXRhLm1vY2tSZXNvbHZlZFZhbHVlT25jZShtb2NrRXhwb3J0UmVzcG9uc2UpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5leHBvcnREYXRhKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlTnVsbCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEpLnRvRXF1YWwobW9ja0V4cG9ydFJlc3BvbnNlLmV4cG9ydERhdGEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRG93bmxvYWQgRXhwb3J0JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc3VjY2Vzc2Z1bGx5IGRvd25sb2FkIGV4cG9ydGVkIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICAvLyBTZXQgZXhwb3J0IGRhdGEgZmlyc3RcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBOb3cgZG93bmxvYWRcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmRvd25sb2FkRXhwb3J0KCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tEb3dubG9hZEV4cG9ydCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2V4cG9ydC0xMjMnKTtcbiAgICAgIGV4cGVjdChtb2NrRmlsZVN5c3RlbS5kb3dubG9hZEFzeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdG86IGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdnZHByLWV4cG9ydCcpLFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRG93bmxvYWRpbmcpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmRvd25sb2FkVXJsKS50b0JlKCdmaWxlOi8vL2RvY3VtZW50cy9leHBvcnQuanNvbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZG93bmxvYWQgd2l0aG91dCBleHBvcnQgSUQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5kb3dubG9hZEV4cG9ydCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrRG93bmxvYWRFeHBvcnQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmUoJ05vIGV4cG9ydCBkYXRhIGF2YWlsYWJsZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZG93bmxvYWQgaW4gcHJvZ3Jlc3Mgc3RhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgcmVzb2x2ZURvd25sb2FkOiAodmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgICAgIGNvbnN0IGRvd25sb2FkUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICByZXNvbHZlRG93bmxvYWQgPSByZXNvbHZlO1xuICAgICAgfSk7XG5cbiAgICAgIG1vY2tGaWxlU3lzdGVtLmRvd25sb2FkQXN5bmMubW9ja1JldHVyblZhbHVlKGRvd25sb2FkUHJvbWlzZSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZURhdGFFeHBvcnQoKSk7XG5cbiAgICAgIC8vIFNldCBleHBvcnQgZGF0YVxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSA9IG1vY2tFeHBvcnRSZXNwb25zZS5leHBvcnREYXRhO1xuICAgICAgICByZXN1bHQuY3VycmVudC5sYXN0RXhwb3J0VGltZSA9IERhdGUubm93KCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU3RhcnQgZG93bmxvYWRcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmRvd25sb2FkRXhwb3J0KCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRG93bmxvYWRpbmcpLnRvQmUodHJ1ZSk7XG5cbiAgICAgIC8vIENvbXBsZXRlIGRvd25sb2FkXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXNvbHZlRG93bmxvYWQhKHtcbiAgICAgICAgICB1cmk6ICdmaWxlOi8vL2RvY3VtZW50cy9jb21wbGV0ZWQtZXhwb3J0Lmpzb24nLFxuICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICAgIG1pbWVUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNEb3dubG9hZGluZykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGRvd25sb2FkIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tEb3dubG9hZEV4cG9ydC5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0Rvd25sb2FkIGZhaWxlZCcpKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgLy8gU2V0IGV4cG9ydCBkYXRhXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5leHBvcnREYXRhID0gbW9ja0V4cG9ydFJlc3BvbnNlLmV4cG9ydERhdGE7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuZG93bmxvYWRFeHBvcnQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNEb3dubG9hZGluZykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmUoJ0Rvd25sb2FkIGZhaWxlZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZmlsZSBzeXN0ZW0gZXJyb3JzIGR1cmluZyBkb3dubG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGaWxlU3lzdGVtLmRvd25sb2FkQXN5bmMubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdGaWxlIHN5c3RlbSBlcnJvcicpKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgLy8gU2V0IGV4cG9ydCBkYXRhXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5leHBvcnREYXRhID0gbW9ja0V4cG9ydFJlc3BvbnNlLmV4cG9ydERhdGE7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuZG93bmxvYWRFeHBvcnQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmUoJ0ZpbGUgc3lzdGVtIGVycm9yJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDYWNoZSBNYW5hZ2VtZW50JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2FjaGUgZXhwb3J0IGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5leHBvcnREYXRhKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tBc3luY1N0b3JhZ2Uuc2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdnZHByX2V4cG9ydF9kYXRhJyxcbiAgICAgICAgZXhwZWN0LmFueShTdHJpbmcpXG4gICAgICApO1xuXG4gICAgICBjb25zdCBjYWNoZWREYXRhID0gSlNPTi5wYXJzZShtb2NrQXN5bmNTdG9yYWdlLnNldEl0ZW0ubW9jay5jYWxsc1swXVsxXSk7XG4gICAgICBleHBlY3QoY2FjaGVkRGF0YS5leHBvcnREYXRhKS50b0VxdWFsKG1vY2tFeHBvcnRSZXNwb25zZS5leHBvcnREYXRhKTtcbiAgICAgIGV4cGVjdChjYWNoZWREYXRhLnRpbWVzdGFtcCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2xlYXIgY2FjaGUgd2hlbiByZXF1ZXN0ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICAvLyBTZXQgc29tZSBkYXRhXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5leHBvcnREYXRhID0gbW9ja0V4cG9ydFJlc3BvbnNlLmV4cG9ydERhdGE7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50Lmxhc3RFeHBvcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIH0pO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5jbGVhckNhY2hlKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQubGFzdEV4cG9ydFRpbWUpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZG93bmxvYWRVcmwpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmVOdWxsKCk7XG5cbiAgICAgIGV4cGVjdChtb2NrQXN5bmNTdG9yYWdlLnJlbW92ZUl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdnZHByX2V4cG9ydF9kYXRhJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjYWNoZSBjbGVhcmluZyBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0NhY2hlIGNsZWFyIGZhaWxlZCcpKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuY2xlYXJDYWNoZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBub3QgdGhyb3csIHNob3VsZCBjb250aW51ZSB3aXRoIHN0YXRlIHJlc2V0XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Vycm9yIEhhbmRsaW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIG5ldHdvcmsgZXJyb3JzIGR1cmluZyBleHBvcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRXhwb3J0VXNlckRhdGEubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdOZXR3b3JrIEVycm9yJykpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5leHBvcnREYXRhKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlKCdOZXR3b3JrIEVycm9yJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzZXJ2ZXIgZXJyb3JzIHdpdGggY3VzdG9tIG1lc3NhZ2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0V4cG9ydFVzZXJEYXRhLm1vY2tSZWplY3RlZFZhbHVlKHtcbiAgICAgICAgbWVzc2FnZTogJ1NlcnZlciB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZScsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5lcnJvcikudG9CZSgnU2VydmVyIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtYWxmb3JtZWQgc2VydmVyIHJlc3BvbnNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFeHBvcnRVc2VyRGF0YS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIC8vIE1pc3NpbmcgcmVxdWlyZWQgZmllbGRzXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBoYW5kbGUgZ3JhY2VmdWxseVxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlc2V0IGVycm9yIHN0YXRlIG9uIHN1Y2Nlc3NmdWwgb3BlcmF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEZpcnN0IG9wZXJhdGlvbiBmYWlsc1xuICAgICAgbW9ja0V4cG9ydFVzZXJEYXRhLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ0ZpcnN0IGVycm9yJykpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5leHBvcnREYXRhKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlKCdGaXJzdCBlcnJvcicpO1xuXG4gICAgICAvLyBTZWNvbmQgb3BlcmF0aW9uIHN1Y2NlZWRzXG4gICAgICBtb2NrRXhwb3J0VXNlckRhdGEubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tFeHBvcnRSZXNwb25zZSk7XG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdGaWxlIE1hbmFnZW1lbnQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBwcm9wZXIgZG93bmxvYWQgZmlsZW5hbWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICAvLyBTZXQgZXhwb3J0IGRhdGFcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEgPSBtb2NrRXhwb3J0UmVzcG9uc2UuZXhwb3J0RGF0YTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5kb3dubG9hZEV4cG9ydCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrRmlsZVN5c3RlbS5kb3dubG9hZEFzeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdG86IGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdnZHByLWV4cG9ydC1leHBvcnQtMTIzJyksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZmlsZSBjbGVhbnVwIG9uIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGaWxlU3lzdGVtLmRvd25sb2FkQXN5bmMubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdEb3dubG9hZCBmYWlsZWQnKSk7XG4gICAgICBtb2NrRmlsZVN5c3RlbS5kZWxldGVBc3luYy5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICAvLyBTZXQgZXhwb3J0IGRhdGFcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEgPSBtb2NrRXhwb3J0UmVzcG9uc2UuZXhwb3J0RGF0YTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5kb3dubG9hZEV4cG9ydCgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBhdHRlbXB0IHRvIGNsZWFuIHVwIHBhcnRpYWwgZG93bmxvYWRzXG4gICAgICBleHBlY3QobW9ja0ZpbGVTeXN0ZW0uZGVsZXRlQXN5bmMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvbmN1cnJlbnQgT3BlcmF0aW9ucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHByZXZlbnQgY29uY3VycmVudCBleHBvcnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHJlc29sdmVFeHBvcnQ6ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xuICAgICAgY29uc3QgZXhwb3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICByZXNvbHZlRXhwb3J0ID0gcmVzb2x2ZTtcbiAgICAgIH0pO1xuXG4gICAgICBtb2NrRXhwb3J0VXNlckRhdGEubW9ja1JldHVyblZhbHVlKGV4cG9ydFByb21pc2UpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICAvLyBTdGFydCBmaXJzdCBleHBvcnRcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUcnkgc2Vjb25kIGV4cG9ydCB3aGlsZSBmaXJzdCBpcyBpbiBwcm9ncmVzc1xuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrRXhwb3J0VXNlckRhdGEpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTsgLy8gT25seSBvbmUgY2FsbFxuXG4gICAgICAvLyBDb21wbGV0ZSBmaXJzdCBleHBvcnRcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc29sdmVFeHBvcnQhKG1vY2tFeHBvcnRSZXNwb25zZSk7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0V4cG9ydGluZykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNvbmN1cnJlbnQgZG93bmxvYWRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgLy8gU2V0IGV4cG9ydCBkYXRhXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5leHBvcnREYXRhID0gbW9ja0V4cG9ydFJlc3BvbnNlLmV4cG9ydERhdGE7XG4gICAgICB9KTtcblxuICAgICAgLy8gU3RhcnQgbXVsdGlwbGUgZG93bmxvYWRzXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZG93bmxvYWRFeHBvcnQoKSxcbiAgICAgICAgICByZXN1bHQuY3VycmVudC5kb3dubG9hZEV4cG9ydCgpLFxuICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmRvd25sb2FkRXhwb3J0KCksXG4gICAgICAgIF0pO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrRG93bmxvYWRFeHBvcnQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTsgLy8gT25seSBvbmUgYWN0dWFsIGRvd25sb2FkIGNhbGxcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0VkZ2UgQ2FzZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgZXhwb3J0IGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBlbXB0eVJlc3BvbnNlID0ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBleHBvcnRJZDogJ2VtcHR5LWV4cG9ydCcsXG4gICAgICAgIGVzdGltYXRlZFRpbWU6ICcxIG1pbnV0ZScsXG4gICAgICAgIG1lc3NhZ2U6ICdFeHBvcnQgY29tcGxldGVkJyxcbiAgICAgICAgZXhwb3J0RGF0YToge30sXG4gICAgICB9O1xuXG4gICAgICBtb2NrRXhwb3J0VXNlckRhdGEubW9ja1Jlc29sdmVkVmFsdWUoZW1wdHlSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZURhdGFFeHBvcnQoKSk7XG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSkudG9FcXVhbCh7fSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB2ZXJ5IGxhcmdlIGV4cG9ydCBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbGFyZ2VFeHBvcnREYXRhID0ge1xuICAgICAgICBwcm9maWxlOiB7IG5hbWU6ICdBJy5yZXBlYXQoMTAwMCkgfSxcbiAgICAgICAgbWF0Y2hlczogQXJyYXkuZnJvbSh7IGxlbmd0aDogNTAwIH0sIChfLCBpKSA9PiAoeyBpZDogYG1hdGNoJHtpfWAsIGRhdGE6ICd4Jy5yZXBlYXQoMTAwKSB9KSksXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBsYXJnZVJlc3BvbnNlID0ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBleHBvcnRJZDogJ2xhcmdlLWV4cG9ydCcsXG4gICAgICAgIGVzdGltYXRlZFRpbWU6ICcxMCBtaW51dGVzJyxcbiAgICAgICAgbWVzc2FnZTogJ0xhcmdlIGV4cG9ydCBpbiBwcm9ncmVzcycsXG4gICAgICAgIGV4cG9ydERhdGE6IGxhcmdlRXhwb3J0RGF0YSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tFeHBvcnRVc2VyRGF0YS5tb2NrUmVzb2x2ZWRWYWx1ZShsYXJnZVJlc3BvbnNlKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGF0YUV4cG9ydCgpKTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5leHBvcnREYXRhKS50b0VxdWFsKGxhcmdlRXhwb3J0RGF0YSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBleHBvcnQgd2l0aCBtaXNzaW5nIG9wdGlvbmFsIGZpZWxkcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1pbmltYWxSZXNwb25zZSA9IHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZXhwb3J0SWQ6ICdtaW5pbWFsLWV4cG9ydCcsXG4gICAgICAgIGVzdGltYXRlZFRpbWU6ICczMCBzZWNvbmRzJyxcbiAgICAgICAgbWVzc2FnZTogJ1F1aWNrIGV4cG9ydCcsXG4gICAgICAgIGV4cG9ydERhdGE6IHsgcHJvZmlsZTogeyBuYW1lOiAnVGVzdCcgfSB9LFxuICAgICAgfTtcblxuICAgICAgbW9ja0V4cG9ydFVzZXJEYXRhLm1vY2tSZXNvbHZlZFZhbHVlKG1pbmltYWxSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZURhdGFFeHBvcnQoKSk7XG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmV4cG9ydERhdGEoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSkudG9FcXVhbCh7IHByb2ZpbGU6IHsgbmFtZTogJ1Rlc3QnIH0gfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBkb3dubG9hZCB3aXRoIG5vbi1leGlzdGVudCBleHBvcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRG93bmxvYWRFeHBvcnQubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdFeHBvcnQgbm90IGZvdW5kJykpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXRhRXhwb3J0KCkpO1xuXG4gICAgICAvLyBTZXQgaW52YWxpZCBleHBvcnQgZGF0YVxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuZXhwb3J0RGF0YSA9IHsgcHJvZmlsZTogeyBuYW1lOiAnVGVzdCcgfSB9O1xuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmRvd25sb2FkRXhwb3J0KCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlKCdFeHBvcnQgbm90IGZvdW5kJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBcUJBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywyQ0FBMkMsQ0FBQztBQUN0REQsV0FBQSxHQUFLQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7RUFBQSxPQUFPO0lBQ25DQyxpQkFBaUIsRUFBRSxvQkFBb0I7SUFDdkNDLGFBQWEsRUFBRUMsYUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUN4QkMsWUFBWSxFQUFFRixhQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCRSxXQUFXLEVBQUVILGFBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ3ZCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSEwsV0FBQSxHQUFLQyxJQUFJLGtDQUFrQztFQUFBLE9BQU87SUFDaERPLGNBQWMsRUFBRUosYUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUN6QkksY0FBYyxFQUFFTCxhQUFJLENBQUNDLEVBQUUsQ0FBQztFQUMxQixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFO0VBQUEsT0FBTztJQUNyQ1MsTUFBTSxFQUFFO01BQ05DLElBQUksRUFBRVAsYUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNmTyxLQUFLLEVBQUVSLGFBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDaEJRLElBQUksRUFBRVQsYUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDaEI7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQVMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUE1QkosSUFBQUUsUUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksYUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssVUFB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