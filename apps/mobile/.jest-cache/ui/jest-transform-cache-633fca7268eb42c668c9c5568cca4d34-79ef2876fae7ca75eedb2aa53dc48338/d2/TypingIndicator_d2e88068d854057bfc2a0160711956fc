0436e04879e71a6e606595e506619a6e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypingIndicator = TypingIndicator;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _animation = require("../../animation");
var _Provider = require("../../theme/Provider");
var _jsxRuntime = require("react/jsx-runtime");
function TypingIndicator(_ref) {
  var typingUsers = _ref.typingUsers,
    animationValue = _ref.animationValue;
  var _useTheme = (0, _Provider.useTheme)(),
    colors = _useTheme.colors;
  if (typingUsers.length === 0) return null;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
      source: {
        uri: "https://images.unsplash.com/photo-1552053831-71594a27632d?w=100"
      },
      style: styles.avatar
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.typingBubble, {
        backgroundColor: colors.white,
        borderColor: colors.gray200
      }]),
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.typingDots,
        children: [0, 1, 2].map(function (i) {
          var _animationValue$inter, _animationValue$inter2;
          return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            style: _reactNative.StyleSheet.flatten([styles.typingDot, {
              backgroundColor: colors.gray500,
              opacity: (_animationValue$inter = animationValue == null ? void 0 : animationValue.interpolate({
                inputRange: [0, 0.5, 1],
                outputRange: [0.3, 1, 0.3]
              })) != null ? _animationValue$inter : 0.5,
              transform: [{
                translateY: (_animationValue$inter2 = animationValue == null ? void 0 : animationValue.interpolate({
                  inputRange: [0, 0.5, 1],
                  outputRange: [0, -3, 0]
                })) != null ? _animationValue$inter2 : 0
              }]
            }])
          }, i);
        })
      }), typingUsers.length > 1 && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: _reactNative.StyleSheet.flatten([styles.typingText, {
          color: colors.gray500
        }]),
        children: [typingUsers.length, " people are typing..."]
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: "row",
    alignItems: "flex-end",
    paddingHorizontal: _animation.Spacing.lg,
    marginBottom: _animation.Spacing.sm
  },
  avatar: {
    width: 32,
    height: 32,
    borderRadius: 16
  },
  typingBubble: {
    paddingHorizontal: _animation.Spacing.md,
    paddingVertical: _animation.Spacing.sm,
    borderRadius: 12,
    borderBottomLeftRadius: 2,
    marginLeft: _animation.Spacing.xs,
    borderWidth: 0.5
  },
  typingDots: {
    flexDirection: "row",
    alignItems: "center",
    gap: _animation.Spacing.xs
  },
  typingDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginHorizontal: 2
  },
  typingText: {
    fontSize: 12,
    fontStyle: "italic",
    marginTop: _animation.Spacing.xs
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9hbmltYXRpb24iLCJfUHJvdmlkZXIiLCJfanN4UnVudGltZSIsIlR5cGluZ0luZGljYXRvciIsIl9yZWYiLCJ0eXBpbmdVc2VycyIsImFuaW1hdGlvblZhbHVlIiwiX3VzZVRoZW1lIiwidXNlVGhlbWUiLCJjb2xvcnMiLCJsZW5ndGgiLCJqc3hzIiwiVmlldyIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiY2hpbGRyZW4iLCJqc3giLCJJbWFnZSIsInNvdXJjZSIsInVyaSIsImF2YXRhciIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwidHlwaW5nQnViYmxlIiwiYmFja2dyb3VuZENvbG9yIiwid2hpdGUiLCJib3JkZXJDb2xvciIsImdyYXkyMDAiLCJ0eXBpbmdEb3RzIiwibWFwIiwiaSIsIl9hbmltYXRpb25WYWx1ZSRpbnRlciIsIl9hbmltYXRpb25WYWx1ZSRpbnRlcjIiLCJBbmltYXRlZCIsInR5cGluZ0RvdCIsImdyYXk1MDAiLCJvcGFjaXR5IiwiaW50ZXJwb2xhdGUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2xhdGVZIiwiVGV4dCIsInR5cGluZ1RleHQiLCJjb2xvciIsImNyZWF0ZSIsImZsZXhEaXJlY3Rpb24iLCJhbGlnbkl0ZW1zIiwicGFkZGluZ0hvcml6b250YWwiLCJTcGFjaW5nIiwibGciLCJtYXJnaW5Cb3R0b20iLCJzbSIsIndpZHRoIiwiaGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwibWQiLCJwYWRkaW5nVmVydGljYWwiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwibWFyZ2luTGVmdCIsInhzIiwiYm9yZGVyV2lkdGgiLCJnYXAiLCJtYXJnaW5Ib3Jpem9udGFsIiwiZm9udFNpemUiLCJmb250U3R5bGUiLCJtYXJnaW5Ub3AiXSwic291cmNlcyI6WyJUeXBpbmdJbmRpY2F0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFZpZXcsIFRleHQsIEltYWdlLCBTdHlsZVNoZWV0IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgQW5pbWF0ZWQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyBTcGFjaW5nLCBCb3JkZXJSYWRpdXMgfSBmcm9tIFwiLi4vLi4vYW5pbWF0aW9uXCI7XG5pbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gXCIuLi8uLi90aGVtZS9Qcm92aWRlclwiO1xuaW1wb3J0IHsgVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZS91bmlmaWVkLXRoZW1lJztcblxuaW50ZXJmYWNlIFR5cGluZ0luZGljYXRvclByb3BzIHtcbiAgdHlwaW5nVXNlcnM6IHN0cmluZ1tdO1xuICBhbmltYXRpb25WYWx1ZT86IEFuaW1hdGVkLlZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVHlwaW5nSW5kaWNhdG9yKHtcbiAgdHlwaW5nVXNlcnMsXG4gIGFuaW1hdGlvblZhbHVlLFxufTogVHlwaW5nSW5kaWNhdG9yUHJvcHMpOiBSZWFjdC5KU1guRWxlbWVudCB8IG51bGwge1xuICBjb25zdCB7IGNvbG9ycyB9ID0gdXNlVGhlbWUoKTtcblxuICBpZiAodHlwaW5nVXNlcnMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4gKFxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgIDxJbWFnZVxuICAgICAgICBzb3VyY2U9e3tcbiAgICAgICAgICB1cmk6IFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE1NTIwNTM4MzEtNzE1OTRhMjc2MzJkP3c9MTAwXCIsXG4gICAgICAgIH19XG4gICAgICAgIHN0eWxlPXtzdHlsZXMuYXZhdGFyfVxuICAgICAgLz5cbiAgICAgIDxWaWV3XG4gICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgIHN0eWxlcy50eXBpbmdCdWJibGUsXG4gICAgICAgICAgeyBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy53aGl0ZSwgYm9yZGVyQ29sb3I6IGNvbG9ycy5ncmF5MjAwIH0sXG4gICAgICAgIF0pfVxuICAgICAgPlxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnR5cGluZ0RvdHN9PlxuICAgICAgICAgIHtbMCwgMSwgMl0ubWFwKChpKSA9PiAoXG4gICAgICAgICAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICAgIHN0eWxlcy50eXBpbmdEb3QsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuZ3JheTUwMCxcbiAgICAgICAgICAgICAgICAgIG9wYWNpdHk6XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblZhbHVlPy5pbnRlcnBvbGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgaW5wdXRSYW5nZTogWzAsIDAuNSwgMV0sXG4gICAgICAgICAgICAgICAgICAgICAgb3V0cHV0UmFuZ2U6IFswLjMsIDEsIDAuM10sXG4gICAgICAgICAgICAgICAgICAgIH0pID8/IDAuNSxcbiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlWTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblZhbHVlPy5pbnRlcnBvbGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0UmFuZ2U6IFswLCAwLjUsIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRSYW5nZTogWzAsIC0zLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pID8/IDAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9WaWV3PlxuICAgICAgICB7dHlwaW5nVXNlcnMubGVuZ3RoID4gMSAmJiAoXG4gICAgICAgICAgPFRleHRcbiAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICBzdHlsZXMudHlwaW5nVGV4dCxcbiAgICAgICAgICAgICAgeyBjb2xvcjogY29sb3JzLmdyYXk1MDAgfSxcbiAgICAgICAgICAgIF0pfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0eXBpbmdVc2Vycy5sZW5ndGh9IHBlb3BsZSBhcmUgdHlwaW5nLi4uXG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICApfVxuICAgICAgPC9WaWV3PlxuICAgIDwvVmlldz5cbiAgKTtcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICAgIGFsaWduSXRlbXM6IFwiZmxleC1lbmRcIixcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogU3BhY2luZy5sZyxcbiAgICBtYXJnaW5Cb3R0b206IFNwYWNpbmcuc20sXG4gIH0sXG4gIGF2YXRhcjoge1xuICAgIHdpZHRoOiAzMixcbiAgICBoZWlnaHQ6IDMyLFxuICAgIGJvcmRlclJhZGl1czogMTYsXG4gIH0sXG4gIHR5cGluZ0J1YmJsZToge1xuICAgIHBhZGRpbmdIb3Jpem9udGFsOiBTcGFjaW5nLm1kLFxuICAgIHBhZGRpbmdWZXJ0aWNhbDogU3BhY2luZy5zbSxcbiAgICBib3JkZXJSYWRpdXM6IDEyLCAvLyAwLjc1cmVtXG4gICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMiwgLy8gMC4xMjVyZW1cbiAgICBtYXJnaW5MZWZ0OiBTcGFjaW5nLnhzLFxuICAgIGJvcmRlcldpZHRoOiAwLjUsXG4gIH0sXG4gIHR5cGluZ0RvdHM6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgZ2FwOiBTcGFjaW5nLnhzLFxuICB9LFxuICB0eXBpbmdEb3Q6IHtcbiAgICB3aWR0aDogOCxcbiAgICBoZWlnaHQ6IDgsXG4gICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgIG1hcmdpbkhvcml6b250YWw6IDIsXG4gIH0sXG4gIHR5cGluZ1RleHQ6IHtcbiAgICBmb250U2l6ZTogMTIsXG4gICAgZm9udFN0eWxlOiBcIml0YWxpY1wiLFxuICAgIG1hcmdpblRvcDogU3BhY2luZy54cyxcbiAgfSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsVUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsU0FBQSxHQUFBSCxPQUFBO0FBQWdELElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQVF6QyxTQUFTSyxlQUFlQSxDQUFBQyxJQUFBLEVBR29CO0VBQUEsSUFGakRDLFdBQVcsR0FBQUQsSUFBQSxDQUFYQyxXQUFXO0lBQ1hDLGNBQWMsR0FBQUYsSUFBQSxDQUFkRSxjQUFjO0VBRWQsSUFBQUMsU0FBQSxHQUFtQixJQUFBQyxrQkFBUSxFQUFDLENBQUM7SUFBckJDLE1BQU0sR0FBQUYsU0FBQSxDQUFORSxNQUFNO0VBRWQsSUFBSUosV0FBVyxDQUFDSyxNQUFNLEtBQUssQ0FBQyxFQUFFLE9BQU8sSUFBSTtFQUV6QyxPQUNFLElBQUFSLFdBQUEsQ0FBQVMsSUFBQSxFQUFDWixZQUFBLENBQUFhLElBQUk7SUFBQ0MsS0FBSyxFQUFFQyxNQUFNLENBQUNDLFNBQVU7SUFBQUMsUUFBQSxHQUM1QixJQUFBZCxXQUFBLENBQUFlLEdBQUEsRUFBQ2xC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