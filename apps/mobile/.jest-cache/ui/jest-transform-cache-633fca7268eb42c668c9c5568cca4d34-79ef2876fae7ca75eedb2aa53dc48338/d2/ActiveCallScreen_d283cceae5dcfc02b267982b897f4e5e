40cca83b3ee44902423fa73fd5e44ccc
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ActiveCallScreen;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _vectorIcons = require("@expo/vector-icons");
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _reactNativeWebrtc = require("react-native-webrtc");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function ActiveCallScreen(_ref) {
  var _callState$callData2, _callState$callData4, _callState$callData5, _callState$callData6;
  var callState = _ref.callState,
    onEndCall = _ref.onEndCall,
    onToggleMute = _ref.onToggleMute,
    onToggleVideo = _ref.onToggleVideo,
    onSwitchCamera = _ref.onSwitchCamera,
    onToggleSpeaker = _ref.onToggleSpeaker;
  var _Dimensions$get = _reactNative.Dimensions.get("window"),
    screenWidth = _Dimensions$get.width,
    screenHeight = _Dimensions$get.height;
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    controlsVisible = _useState2[0],
    setControlsVisible = _useState2[1];
  var _useState3 = (0, _react.useState)({
      x: 20,
      y: 100
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    localVideoPosition = _useState4[0],
    setLocalVideoPosition = _useState4[1];
  var fadeAnim = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var localVideoAnim = (0, _react.useRef)(new _reactNative.Animated.ValueXY({
    x: 20,
    y: 100
  })).current;
  (0, _react.useEffect)(function () {
    var timer = setTimeout(function () {
      var _callState$callData;
      if (controlsVisible && ((_callState$callData = callState.callData) == null ? void 0 : _callState$callData.callType) === "video") {
        hideControls();
      }
    }, 5000);
    return function () {
      clearTimeout(timer);
    };
  }, [controlsVisible, (_callState$callData2 = callState.callData) == null ? void 0 : _callState$callData2.callType]);
  var panResponder = _reactNative.PanResponder.create({
    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
      return true;
    },
    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
      return true;
    },
    onPanResponderMove: function onPanResponderMove(evt, gestureState) {
      localVideoAnim.setValue({
        x: 20 + gestureState.dx,
        y: 100 + gestureState.dy
      });
    },
    onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {
      var dx = gestureState.dx,
        dy = gestureState.dy;
      var newX = dx < screenWidth / 2 ? 20 : screenWidth - 140;
      var newY = Math.max(100, Math.min(screenHeight - 300, dy + 100));
      _reactNative.Animated.spring(localVideoAnim, {
        toValue: {
          x: newX,
          y: newY
        },
        useNativeDriver: false
      }).start();
      setLocalVideoPosition({
        x: newX,
        y: newY
      });
    }
  });
  var showControls = function showControls() {
    setControlsVisible(true);
    _reactNative.Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 300,
      useNativeDriver: true
    }).start();
  };
  var hideControls = function hideControls() {
    _reactNative.Animated.timing(fadeAnim, {
      toValue: 0,
      duration: 300,
      useNativeDriver: true
    }).start(function () {
      setControlsVisible(false);
    });
  };
  var toggleControls = function toggleControls() {
    if (controlsVisible) {
      hideControls();
    } else {
      showControls();
    }
  };
  var formatCallDuration = function formatCallDuration(seconds) {
    var mins = Math.floor(seconds / 60);
    var secs = seconds % 60;
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
  };
  var renderVideoCall = function renderVideoCall() {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.videoContainer,
      children: [callState.remoteStream && (0, _jsxRuntime.jsx)(_reactNativeWebrtc.RTCView, {
        style: styles.remoteVideo,
        streamURL: callState.remoteStream.toURL(),
        objectFit: "cover"
      }), callState.localStream && callState.isVideoEnabled && (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, _objectSpread(_objectSpread({
        style: _reactNative.StyleSheet.flatten([styles.localVideoContainer, {
          transform: localVideoAnim.getTranslateTransform()
        }])
      }, panResponder.panHandlers), {}, {
        children: [(0, _jsxRuntime.jsx)(_reactNativeWebrtc.RTCView, {
          style: styles.localVideo,
          streamURL: callState.localStream.toURL(),
          objectFit: "cover",
          mirror: true
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: styles.switchCameraButton,
          onPress: onSwitchCamera,
          children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "camera-reverse",
            size: 20,
            color: "Theme.colors.neutral[0]"
          })
        })]
      })), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.videoTouchArea,
        onPress: toggleControls,
        activeOpacity: 1
      })]
    });
  };
  var renderVoiceCall = function renderVoiceCall() {
    var _callState$callData3;
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.voiceContainer,
      children: [(0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
        colors: ["#667eea", "#764ba2"],
        style: styles.voiceGradient
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.voiceContent,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.avatarContainer,
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.avatarRing,
            children: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.avatar,
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "person",
                size: 60,
                color: "Theme.colors.neutral[0]"
              })
            })
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.callerName,
          children: ((_callState$callData3 = callState.callData) == null ? void 0 : _callState$callData3.callerName) || "Unknown"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.callStatus,
          children: callState.isConnected ? "Connected" : "Connecting..."
        }), callState.isConnected && (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.callDuration,
          children: formatCallDuration(callState.callDuration)
        })]
      })]
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.StatusBar, {
      barStyle: "light-content",
      backgroundColor: "transparent",
      translucent: true
    }), ((_callState$callData4 = callState.callData) == null ? void 0 : _callState$callData4.callType) === "video" ? renderVideoCall() : renderVoiceCall(), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: _reactNative.StyleSheet.flatten([styles.controlsOverlay, {
        opacity: fadeAnim,
        pointerEvents: controlsVisible ? "auto" : "none"
      }]),
      children: (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
        style: styles.controlsContent,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.header,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.callerNameHeader,
            children: ((_callState$callData5 = callState.callData) == null ? void 0 : _callState$callData5.callerName) || "Unknown"
          }), callState.isConnected && (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.callDurationHeader,
            children: formatCallDuration(callState.callDuration)
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.callControls,
          children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: _reactNative.StyleSheet.flatten([styles.controlButton, callState.isMuted && styles.controlButtonActive]),
            onPress: onToggleMute,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: callState.isMuted ? "mic-off" : "mic",
              size: 24,
              color: callState.isMuted ? "#ff4757" : "Theme.colors.neutral[0]"
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: styles.controlButton,
            onPress: onToggleSpeaker,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "volume-high",
              size: 24,
              color: "Theme.colors.neutral[0]"
            })
          }), ((_callState$callData6 = callState.callData) == null ? void 0 : _callState$callData6.callType) === "video" && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: _reactNative.StyleSheet.flatten([styles.controlButton, !callState.isVideoEnabled && styles.controlButtonActive]),
            onPress: onToggleVideo,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: callState.isVideoEnabled ? "videocam" : "videocam-off",
              size: 24,
              color: !callState.isVideoEnabled ? "#ff4757" : "Theme.colors.neutral[0]"
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: _reactNative.StyleSheet.flatten([styles.controlButton, styles.endCallButton]),
            onPress: onEndCall,
            children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
              colors: ["#ff4757", "#ff3838"],
              style: styles.endCallGradient,
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "call",
                size: 24,
                color: "Theme.colors.neutral[0]",
                style: {
                  transform: [{
                    rotate: "135deg"
                  }]
                }
              })
            })
          })]
        })]
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "Theme.colors.neutral[950]"
  },
  videoContainer: {
    flex: 1
  },
  remoteVideo: {
    flex: 1,
    backgroundColor: "Theme.colors.neutral[950]"
  },
  localVideoContainer: {
    position: "absolute",
    width: 120,
    height: 180,
    borderRadius: 12,
    overflow: "hidden",
    elevation: 8,
    shadowColor: "Theme.colors.neutral[950]",
    shadowOffset: {
      width: 0,
      height: 4
    },
    shadowOpacity: 0.3,
    shadowRadius: 8
  },
  localVideo: {
    width: "100%",
    height: "100%"
  },
  switchCameraButton: {
    position: "absolute",
    top: 8,
    right: 8,
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center"
  },
  videoTouchArea: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  voiceContainer: {
    flex: 1
  },
  voiceGradient: {
    position: "absolute",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  },
  voiceContent: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingHorizontal: 40
  },
  avatarContainer: {
    marginBottom: 40
  },
  avatarRing: {
    width: 160,
    height: 160,
    borderRadius: 80,
    borderWidth: 3,
    borderColor: "rgba(255, 255, 255, 0.3)",
    padding: 8
  },
  avatar: {
    width: "100%",
    height: "100%",
    borderRadius: 72,
    backgroundColor: "rgba(255, 255, 255, 0.2)",
    justifyContent: "center",
    alignItems: "center"
  },
  callerName: {
    fontSize: 28,
    fontWeight: "bold",
    color: "Theme.colors.neutral[0]",
    marginBottom: 12,
    textAlign: "center"
  },
  callStatus: {
    fontSize: 18,
    color: "Theme.colors.neutral[0]",
    opacity: 0.8,
    marginBottom: 8
  },
  callDuration: {
    fontSize: 16,
    color: "Theme.colors.neutral[0]",
    opacity: 0.6
  },
  controlsOverlay: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(0, 0, 0, 0.3)"
  },
  controlsContent: {
    flex: 1,
    justifyContent: "space-between"
  },
  header: {
    alignItems: "center",
    paddingTop: 20,
    paddingHorizontal: 20
  },
  callerNameHeader: {
    fontSize: 20,
    fontWeight: "bold",
    color: "Theme.colors.neutral[0]",
    marginBottom: 4
  },
  callDurationHeader: {
    fontSize: 16,
    color: "Theme.colors.neutral[0]",
    opacity: 0.8
  },
  callControls: {
    flexDirection: "row",
    justifyContent: "space-around",
    alignItems: "center",
    paddingHorizontal: 40,
    paddingBottom: 50
  },
  controlButton: {
    width: 56,
    height: 56,
    borderRadius: 28,
    backgroundColor: "rgba(255, 255, 255, 0.2)",
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 1,
    borderColor: "rgba(255, 255, 255, 0.3)"
  },
  controlButtonActive: {
    backgroundColor: "rgba(255, 71, 87, 0.3)",
    borderColor: "#ff4757"
  },
  endCallButton: {
    backgroundColor: "transparent",
    borderWidth: 0
  },
  endCallGradient: {
    width: 56,
    height: 56,
    borderRadius: 28,
    justifyContent: "center",
    alignItems: "center"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,