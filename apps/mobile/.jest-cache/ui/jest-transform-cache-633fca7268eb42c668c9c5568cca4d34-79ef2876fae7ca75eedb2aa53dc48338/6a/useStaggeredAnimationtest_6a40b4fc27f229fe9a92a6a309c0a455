9f46655be24d49fb81d64f2830d8bbd6
"use strict";

_getJestObj().mock('react-native-reanimated', function () {
  return {
    useSharedValue: _globals.jest.fn(),
    useAnimatedStyle: _globals.jest.fn(),
    withDelay: _globals.jest.fn(),
    withTiming: _globals.jest.fn(),
    withSpring: _globals.jest.fn(),
    runOnJS: _globals.jest.fn(),
    interpolate: _globals.jest.fn(),
    Extrapolate: {
      CLAMP: 'clamp'
    }
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn(),
      debug: _globals.jest.fn()
    }
  };
});
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _useStaggeredAnimation = require("../useStaggeredAnimation");
var _reactNativeReanimated = require("react-native-reanimated");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseSharedValue = _reactNativeReanimated.useSharedValue;
var mockUseAnimatedStyle = _reactNativeReanimated.useAnimatedStyle;
var mockWithDelay = _reactNativeReanimated.withDelay;
var mockWithTiming = _reactNativeReanimated.withTiming;
var mockWithSpring = _reactNativeReanimated.withSpring;
var mockInterpolate = _reactNativeReanimated.interpolate;
(0, _globals.describe)('useStaggeredAnimation', function () {
  var mockSharedValue = {
    value: 0,
    get: _globals.jest.fn(function () {
      return 0;
    }),
    set: _globals.jest.fn()
  };
  var mockAnimatedStyle = {
    opacity: mockInterpolate(),
    transform: [{
      translateY: mockInterpolate()
    }]
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockUseSharedValue.mockReturnValue(mockSharedValue);
    mockUseAnimatedStyle.mockReturnValue(mockAnimatedStyle);
    mockWithDelay.mockReturnValue('delayed-animation');
    mockWithTiming.mockReturnValue('timing-animation');
    mockWithSpring.mockReturnValue('spring-animation');
    mockInterpolate.mockReturnValue(0.5);
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with default configuration', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(5);
        }),
        result = _renderHook.result;
      (0, _globals.expect)(mockUseSharedValue).toHaveBeenCalledTimes(5);
      (0, _globals.expect)(mockUseAnimatedStyle).toHaveBeenCalledTimes(5);
      (0, _globals.expect)(result.current.items).toHaveLength(5);
      (0, _globals.expect)(result.current.isAnimating).toBe(false);
    });
    (0, _globals.it)('should initialize with custom stagger delay', function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3, {
            staggerDelay: 200
          });
        }),
        result = _renderHook2.result;
      (0, _globals.expect)(result.current.config.staggerDelay).toBe(200);
    });
    (0, _globals.it)('should initialize with custom animation config', function () {
      var customConfig = {
        duration: 500,
        easing: 'ease-in-out'
      };
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {}, customConfig);
        }),
        result = _renderHook3.result;
      (0, _globals.expect)(result.current.animationConfig).toEqual(customConfig);
    });
    (0, _globals.it)('should handle zero items', function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(0);
        }),
        result = _renderHook4.result;
      (0, _globals.expect)(result.current.items).toHaveLength(0);
      (0, _globals.expect)(mockUseSharedValue).not.toHaveBeenCalled();
      (0, _globals.expect)(mockUseAnimatedStyle).not.toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Animation Control', function () {
    (0, _globals.it)('should start staggered animation', function () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3, {
            staggerDelay: 100
          });
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(result.current.isAnimating).toBe(true);
      (0, _globals.expect)(mockWithDelay).toHaveBeenCalledTimes(3);
      (0, _globals.expect)(mockWithTiming).toHaveBeenCalledTimes(3);
      (0, _globals.expect)(mockWithDelay).toHaveBeenNthCalledWith(1, 0, 'timing-animation');
      (0, _globals.expect)(mockWithDelay).toHaveBeenNthCalledWith(2, 100, 'timing-animation');
      (0, _globals.expect)(mockWithDelay).toHaveBeenNthCalledWith(3, 200, 'timing-animation');
    });
    (0, _globals.it)('should animate with spring instead of timing', function () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {}, {
            useSpring: true
          });
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(mockWithSpring).toHaveBeenCalledTimes(2);
      (0, _globals.expect)(mockWithTiming).not.toHaveBeenCalled();
    });
    (0, _globals.it)('should animate from current index', function () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(4);
        }),
        result = _renderHook7.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation(2);
      });
      (0, _globals.expect)(mockWithDelay).toHaveBeenCalledTimes(2);
    });
    (0, _globals.it)('should stop animation', function () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3);
        }),
        result = _renderHook8.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(result.current.isAnimating).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.stopAnimation();
      });
      (0, _globals.expect)(result.current.isAnimating).toBe(false);
    });
    (0, _globals.it)('should reset animation', function () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3);
        }),
        result = _renderHook9.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _reactNative.act)(function () {
        result.current.resetAnimation();
      });
      (0, _globals.expect)(result.current.isAnimating).toBe(false);
      (0, _globals.expect)(mockSharedValue.set).toHaveBeenCalledWith(0);
    });
  });
  (0, _globals.describe)('Dynamic Item Management', function () {
    (0, _globals.it)('should add new items dynamically', function () {
      var _renderHook0 = (0, _reactNative.renderHook)(function (_ref) {
          var count = _ref.count;
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(count);
        }, {
          initialProps: {
            count: 2
          }
        }),
        result = _renderHook0.result,
        rerender = _renderHook0.rerender;
      (0, _globals.expect)(result.current.items).toHaveLength(2);
      rerender({
        count: 4
      });
      (0, _globals.expect)(result.current.items).toHaveLength(4);
      (0, _globals.expect)(mockUseSharedValue).toHaveBeenCalledTimes(4);
      (0, _globals.expect)(mockUseAnimatedStyle).toHaveBeenCalledTimes(4);
    });
    (0, _globals.it)('should remove items dynamically', function () {
      var _renderHook1 = (0, _reactNative.renderHook)(function (_ref2) {
          var count = _ref2.count;
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(count);
        }, {
          initialProps: {
            count: 4
          }
        }),
        result = _renderHook1.result,
        rerender = _renderHook1.rerender;
      (0, _globals.expect)(result.current.items).toHaveLength(4);
      rerender({
        count: 2
      });
      (0, _globals.expect)(result.current.items).toHaveLength(2);
    });
    (0, _globals.it)('should handle item reordering', function () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3);
        }),
        result = _renderHook10.result;
      var newOrder = [2, 0, 1];
      (0, _reactNative.act)(function () {
        result.current.reorderItems(newOrder);
      });
      (0, _globals.expect)(result.current.items[0].index).toBe(2);
      (0, _globals.expect)(result.current.items[1].index).toBe(0);
      (0, _globals.expect)(result.current.items[2].index).toBe(1);
    });
  });
  (0, _globals.describe)('Animation Progress and State', function () {
    (0, _globals.it)('should track animation progress', function () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3);
        }),
        result = _renderHook11.result;
      (0, _globals.expect)(result.current.getAnimationProgress()).toBe(0);
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      var progress = result.current.getAnimationProgress();
      (0, _globals.expect)(typeof progress).toBe('number');
      (0, _globals.expect)(progress).toBeGreaterThanOrEqual(0);
      (0, _globals.expect)(progress).toBeLessThanOrEqual(1);
    });
    (0, _globals.it)('should provide completion status', function () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2);
        }),
        result = _renderHook12.result;
      (0, _globals.expect)(result.current.isComplete()).toBe(false);
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(typeof result.current.isComplete()).toBe('boolean');
    });
    (0, _globals.it)('should provide item-specific progress', function () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3);
        }),
        result = _renderHook13.result;
      var itemProgress = result.current.getItemProgress(1);
      (0, _globals.expect)(typeof itemProgress).toBe('number');
      (0, _globals.expect)(itemProgress).toBeGreaterThanOrEqual(0);
      (0, _globals.expect)(itemProgress).toBeLessThanOrEqual(1);
    });
  });
  (0, _globals.describe)('Animation Callbacks', function () {
    (0, _globals.it)('should execute onStart callback', function () {
      var onStart = _globals.jest.fn();
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {}, {
            onStart: onStart
          });
        }),
        result = _renderHook14.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(onStart).toHaveBeenCalled();
    });
    (0, _globals.it)('should execute onComplete callback', function () {
      var onComplete = _globals.jest.fn();
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {}, {
            onComplete: onComplete
          });
        }),
        result = _renderHook15.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(typeof onComplete).toBe('function');
    });
    (0, _globals.it)('should execute onItemComplete callback', function () {
      var onItemComplete = _globals.jest.fn();
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3, {}, {
            onItemComplete: onItemComplete
          });
        }),
        result = _renderHook16.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(typeof onItemComplete).toBe('function');
    });
    (0, _globals.it)('should handle callback errors gracefully', function () {
      var errorCallback = _globals.jest.fn(function () {
        throw new Error('Callback error');
      });
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {}, {
            onStart: errorCallback
          });
        }),
        result = _renderHook17.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(errorCallback).toHaveBeenCalled();
    });
  });
  (0, _globals.describe)('Configuration Options', function () {
    (0, _globals.it)('should support custom stagger patterns', function () {
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(4, {
            staggerDelay: 150,
            staggerPattern: 'ease-in'
          });
        }),
        result = _renderHook18.result;
      (0, _globals.expect)(result.current.config.staggerDelay).toBe(150);
      (0, _globals.expect)(result.current.config.staggerPattern).toBe('ease-in');
    });
    (0, _globals.it)('should support reverse stagger order', function () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3, {
            reverseOrder: true
          });
        }),
        result = _renderHook19.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(mockWithDelay).toHaveBeenNthCalledWith(1, 200, 'timing-animation');
      (0, _globals.expect)(mockWithDelay).toHaveBeenNthCalledWith(2, 100, 'timing-animation');
      (0, _globals.expect)(mockWithDelay).toHaveBeenNthCalledWith(3, 0, 'timing-animation');
    });
    (0, _globals.it)('should support random stagger delays', function () {
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3, {
            randomDelay: true,
            maxRandomDelay: 200
          });
        }),
        result = _renderHook20.result;
      (0, _globals.expect)(result.current.config.randomDelay).toBe(true);
      (0, _globals.expect)(result.current.config.maxRandomDelay).toBe(200);
    });
    (0, _globals.it)('should support different animation directions', function () {
      var directions = ['horizontal', 'vertical', 'scale', 'fade'];
      directions.forEach(function (direction) {
        var _renderHook21 = (0, _reactNative.renderHook)(function () {
            return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {
              direction: direction
            });
          }),
          result = _renderHook21.result;
        (0, _globals.expect)(result.current.config.direction).toBe(direction);
      });
    });
  });
  (0, _globals.describe)('Performance Optimizations', function () {
    (0, _globals.it)('should memoize animated styles', function () {
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3);
        }),
        result = _renderHook22.result,
        rerender = _renderHook22.rerender;
      var firstStyles = result.current.items.map(function (item) {
        return item.animatedStyle;
      });
      rerender();
      var secondStyles = result.current.items.map(function (item) {
        return item.animatedStyle;
      });
      firstStyles.forEach(function (style, index) {
        (0, _globals.expect)(style).toBe(secondStyles[index]);
      });
    });
    (0, _globals.it)('should minimize re-renders', function () {
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {
            staggerDelay: 100
          });
        }),
        result = _renderHook23.result,
        rerender = _renderHook23.rerender;
      var firstConfig = result.current.config;
      rerender();
      var secondConfig = result.current.config;
      (0, _globals.expect)(firstConfig).toBe(secondConfig);
    });
    (0, _globals.it)('should handle large numbers of items efficiently', function () {
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(50);
        }),
        result = _renderHook24.result;
      (0, _globals.expect)(result.current.items).toHaveLength(50);
      (0, _globals.expect)(mockUseSharedValue).toHaveBeenCalledTimes(50);
      (0, _globals.expect)(mockUseAnimatedStyle).toHaveBeenCalledTimes(50);
    });
  });
  (0, _globals.describe)('Integration with Lists', function () {
    (0, _globals.it)('should provide list animation helpers', function () {
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(4);
        }),
        result = _renderHook25.result;
      var listProps = result.current.getListAnimationProps();
      (0, _globals.expect)(listProps).toEqual({
        onItemLayout: _globals.expect.any(Function),
        onScroll: _globals.expect.any(Function),
        onMomentumScrollEnd: _globals.expect.any(Function)
      });
    });
    (0, _globals.it)('should animate items on scroll', function () {
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(5, {
            animateOnScroll: true
          });
        }),
        result = _renderHook26.result;
      var listProps = result.current.getListAnimationProps();
      (0, _reactNative.act)(function () {
        listProps.onScroll == null ? void 0 : listProps.onScroll({
          nativeEvent: {
            contentOffset: {
              y: 200
            },
            layoutMeasurement: {
              height: 400
            },
            contentSize: {
              height: 1000
            }
          }
        });
      });
      (0, _globals.expect)(result.current.config.animateOnScroll).toBe(true);
    });
    (0, _globals.it)('should handle item visibility changes', function () {
      var _renderHook27 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3);
        }),
        result = _renderHook27.result;
      var listProps = result.current.getListAnimationProps();
      (0, _reactNative.act)(function () {
        listProps.onItemLayout == null ? void 0 : listProps.onItemLayout(0, {
          nativeEvent: {
            layout: {
              y: 100,
              height: 50
            }
          }
        });
      });
      (0, _globals.expect)(result.current.items[0].isVisible).toBeDefined();
    });
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle animation errors gracefully', function () {
      mockWithTiming.mockImplementation(function () {
        throw new Error('Animation error');
      });
      var _renderHook28 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2);
        }),
        result = _renderHook28.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(result.current.isAnimating).toBe(true);
    });
    (0, _globals.it)('should handle invalid item counts', function () {
      var _renderHook29 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(-1);
        }),
        result = _renderHook29.result;
      (0, _globals.expect)(result.current.items).toHaveLength(0);
    });
    (0, _globals.it)('should handle extreme stagger delays', function () {
      var _renderHook30 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3, {
            staggerDelay: 10000
          });
        }),
        result = _renderHook30.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(mockWithDelay).toHaveBeenCalledWith(0, 'timing-animation');
      (0, _globals.expect)(mockWithDelay).toHaveBeenCalledWith(10000, 'timing-animation');
      (0, _globals.expect)(mockWithDelay).toHaveBeenCalledWith(20000, 'timing-animation');
    });
    (0, _globals.it)('should handle concurrent animation calls', function () {
      var _renderHook31 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3);
        }),
        result = _renderHook31.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
        result.current.startAnimation();
        result.current.stopAnimation();
      });
      (0, _globals.expect)(result.current.isAnimating).toBe(false);
    });
  });
  (0, _globals.describe)('Advanced Features', function () {
    (0, _globals.it)('should support custom easing functions', function () {
      var customEasing = function customEasing(t) {
        return t * t;
      };
      var _renderHook32 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {}, {
            easing: customEasing
          });
        }),
        result = _renderHook32.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(mockWithTiming).toHaveBeenCalledWith(_globals.expect.anything(), _globals.expect.objectContaining({
        easing: customEasing
      }));
    });
    (0, _globals.it)('should support loop animations', function () {
      var _renderHook33 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3, {
            loop: true,
            loopDelay: 1000
          });
        }),
        result = _renderHook33.result;
      (0, _globals.expect)(result.current.config.loop).toBe(true);
      (0, _globals.expect)(result.current.config.loopDelay).toBe(1000);
    });
    (0, _globals.it)('should support bounce animations', function () {
      var _renderHook34 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {
            bounce: true
          });
        }),
        result = _renderHook34.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(result.current.config.bounce).toBe(true);
    });
    (0, _globals.it)('should support custom animation curves', function () {
      var _renderHook35 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {}, {
            animationCurve: 'ease-in-out-back'
          });
        }),
        result = _renderHook35.result;
      (0, _globals.expect)(result.current.animationConfig.animationCurve).toBe('ease-in-out-back');
    });
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty item arrays', function () {
      var _renderHook36 = (0, _reactNative.renderHook)(function (_ref3) {
          var count = _ref3.count;
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(count);
        }, {
          initialProps: {
            count: 3
          }
        }),
        result = _renderHook36.result,
        rerender = _renderHook36.rerender;
      rerender({
        count: 0
      });
      (0, _globals.expect)(result.current.items).toHaveLength(0);
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(result.current.isAnimating).toBe(true);
    });
    (0, _globals.it)('should handle single item animations', function () {
      var _renderHook37 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(1);
        }),
        result = _renderHook37.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(mockWithDelay).toHaveBeenCalledTimes(1);
      (0, _globals.expect)(mockWithDelay).toHaveBeenCalledWith(0, 'timing-animation');
    });
    (0, _globals.it)('should handle very large stagger delays', function () {
      var _renderHook38 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {
            staggerDelay: Number.MAX_SAFE_INTEGER
          });
        }),
        result = _renderHook38.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(mockWithDelay).toHaveBeenCalledTimes(2);
    });
    (0, _globals.it)('should handle zero stagger delay', function () {
      var _renderHook39 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3, {
            staggerDelay: 0
          });
        }),
        result = _renderHook39.result;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(mockWithDelay).toHaveBeenCalledTimes(3);
      (0, _globals.expect)(mockWithDelay).toHaveBeenCalledWith(0, 'timing-animation');
    });
    (0, _globals.it)('should handle component unmount during animation', function () {
      var _renderHook40 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(3);
        }),
        result = _renderHook40.result,
        unmount = _renderHook40.unmount;
      (0, _reactNative.act)(function () {
        result.current.startAnimation();
      });
      (0, _globals.expect)(result.current.isAnimating).toBe(true);
      unmount();
      (0, _globals.expect)(mockSharedValue.set).toHaveBeenCalled();
    });
    (0, _globals.it)('should handle invalid configuration values', function () {
      var _renderHook41 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(2, {
            staggerDelay: -100,
            staggerPattern: 'invalid-pattern'
          });
        }),
        result = _renderHook41.result;
      (0, _globals.expect)(result.current.config.staggerDelay).toBe(-100);
      (0, _globals.expect)(result.current.config.staggerPattern).toBe('invalid-pattern');
    });
    (0, _globals.it)('should handle maximum safe item counts', function () {
      var _renderHook42 = (0, _reactNative.renderHook)(function () {
          return (0, _useStaggeredAnimation.useStaggeredAnimation)(100);
        }),
        result = _renderHook42.result;
      (0, _globals.expect)(result.current.items).toHaveLength(100);
      (0, _globals.expect)(mockUseSharedValue).toHaveBeenCalledTimes(100);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,