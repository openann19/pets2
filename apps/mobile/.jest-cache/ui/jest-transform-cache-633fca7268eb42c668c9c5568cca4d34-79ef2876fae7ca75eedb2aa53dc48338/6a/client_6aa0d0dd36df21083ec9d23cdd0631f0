52d71e57c283177f8b3a3fecfdd9a9ae
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = void 0 && (void 0).__importStar || function () {
  var _ownKeys = function ownKeys(o) {
    _ownKeys = Object.getOwnPropertyNames || function (o) {
      var ar = [];
      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
      return ar;
    };
    return _ownKeys(o);
  };
  return function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k = _ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
    __setModuleDefault(result, mod);
    return result;
  };
}();
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apiClient = void 0;
var axios_1 = __importStar(require("axios"));
var environment_1 = require("../utils/environment");
var ApiClient = function () {
  function ApiClient() {
    var _process$env$NEXT_PUB;
    (0, _classCallCheck2.default)(this, ApiClient);
    this.client = axios_1.default.create({
      baseURL: (_process$env$NEXT_PUB = process.env['NEXT_PUBLIC_API_URL']) != null ? _process$env$NEXT_PUB : 'http://localhost:5000/api',
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    this.setupInterceptors();
  }
  return (0, _createClass2.default)(ApiClient, [{
    key: "setupInterceptors",
    value: function setupInterceptors() {
      this.client.interceptors.request.use(function (config) {
        var storage = (0, environment_1.getLocalStorage)();
        var token = storage == null ? void 0 : storage.getItem('accessToken');
        if (typeof token === 'string' && token.trim().length > 0) {
          var _config$headers;
          var bearerToken = `Bearer ${token.trim()}`;
          var headers = isAxiosHeaders(config.headers) ? config.headers : new axios_1.AxiosHeaders((_config$headers = config.headers) != null ? _config$headers : {});
          headers.set('Authorization', bearerToken);
          config.headers = headers;
        }
        return config;
      }, function (error) {
        return Promise.reject(new Error(extractErrorMessage(error, 'Request interceptor failed')));
      });
      this.client.interceptors.response.use(function (response) {
        return response;
      }, function (error) {
        console.error('Response interceptor error:', extractErrorMessage(error, 'Unknown error'));
        if (isAxiosErrorLike(error)) {
          var _error$response, _error$response2, _statusCode$toString;
          if (((_error$response = error.response) == null ? void 0 : _error$response.status) === 401) {
            var storage = (0, environment_1.getLocalStorage)();
            storage == null ? void 0 : storage.removeItem('accessToken');
            storage == null ? void 0 : storage.removeItem('refreshToken');
            (0, environment_1.redirectTo)('/login');
          }
          var statusCode = (_error$response2 = error.response) == null ? void 0 : _error$response2.status;
          return Promise.reject(new Error(`API request failed: ${(_statusCode$toString = statusCode == null ? void 0 : statusCode.toString()) != null ? _statusCode$toString : 'Unknown error'}`));
        }
        return Promise.reject(new Error(extractErrorMessage(error, 'Response interceptor failed')));
      });
    }
  }, {
    key: "get",
    value: function () {
      var _get = (0, _asyncToGenerator2.default)(function* (url, config) {
        try {
          var response = yield this.client.get(url, config);
          return response.data;
        } catch (error) {
          throw new Error(extractErrorMessage(error, 'Request failed'));
        }
      });
      function get(_x, _x2) {
        return _get.apply(this, arguments);
      }
      return get;
    }()
  }, {
    key: "post",
    value: function () {
      var _post = (0, _asyncToGenerator2.default)(function* (url, data, config) {
        try {
          var response = yield this.client.post(url, data, config);
          return response.data;
        } catch (error) {
          throw new Error(extractErrorMessage(error, 'Request failed'));
        }
      });
      function post(_x3, _x4, _x5) {
        return _post.apply(this, arguments);
      }
      return post;
    }()
  }, {
    key: "put",
    value: function () {
      var _put = (0, _asyncToGenerator2.default)(function* (url, data, config) {
        try {
          var response = yield this.client.put(url, data, config);
          return response.data;
        } catch (error) {
          throw new Error(extractErrorMessage(error, 'Request failed'));
        }
      });
      function put(_x6, _x7, _x8) {
        return _put.apply(this, arguments);
      }
      return put;
    }()
  }, {
    key: "patch",
    value: function () {
      var _patch = (0, _asyncToGenerator2.default)(function* (url, data, config) {
        try {
          var response = yield this.client.patch(url, data, config);
          return response.data;
        } catch (error) {
          throw new Error(extractErrorMessage(error, 'Request failed'));
        }
      });
      function patch(_x9, _x0, _x1) {
        return _patch.apply(this, arguments);
      }
      return patch;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = (0, _asyncToGenerator2.default)(function* (url, config) {
        try {
          var response = yield this.client.delete(url, config);
          return response.data;
        } catch (error) {
          throw new Error(extractErrorMessage(error, 'Request failed'));
        }
      });
      function _delete(_x10, _x11) {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }()
  }, {
    key: "uploadFile",
    value: function () {
      var _uploadFile = (0, _asyncToGenerator2.default)(function* (url, config) {
        try {
          var formData = new FormData();
          formData.append('file', config.file);
          if (config.additionalData != null) {
            Object.entries(config.additionalData).forEach(function (_ref) {
              var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
                key = _ref2[0],
                value = _ref2[1];
              formData.append(key, String(value));
            });
          }
          var axiosConfig = {
            headers: {
              'Content-Type': 'multipart/form-data'
            }
          };
          if (config.onProgress != null) {
            axiosConfig.onUploadProgress = function (progressEvent) {
              if (progressEvent.total != null && progressEvent.total > 0) {
                var progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);
                config.onProgress(progress);
              }
            };
          }
          var response = yield this.client.post(url, formData, axiosConfig);
          return response.data;
        } catch (error) {
          throw new Error(extractErrorMessage(error, 'Upload failed'));
        }
      });
      function uploadFile(_x12, _x13) {
        return _uploadFile.apply(this, arguments);
      }
      return uploadFile;
    }()
  }]);
}();
exports.apiClient = new ApiClient();
exports.default = exports.apiClient;
var isAxiosErrorLike = function isAxiosErrorLike(error) {
  return typeof error === 'object' && error !== null && 'response' in error;
};
var isAxiosHeaders = function isAxiosHeaders(headers) {
  return typeof headers === 'object' && headers !== null && 'set' in headers && typeof headers.set === 'function';
};
var extractErrorMessage = function extractErrorMessage(error, fallback) {
  if (isAxiosErrorLike(error)) {
    var _error$response$data$, _error$response3, _error$response3$data;
    var message = (_error$response$data$ = (_error$response3 = error.response) == null ? void 0 : (_error$response3$data = _error$response3.data) == null ? void 0 : _error$response3$data.message) != null ? _error$response$data$ : error.message;
    if (typeof message === 'string' && message.trim().length > 0) {
      return message;
    }
  }
  if (error instanceof Error && error.message.trim().length > 0) {
    return error.message;
  }
  if (typeof error === 'string' && error.trim().length > 0) {
    return error.trim();
  }
  return fallback;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,