d91faa6b2e03a8ac98a7c0ffc98c0765
"use strict";

_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: function useNavigation() {
      return mockNavigation;
    }
  };
});
_getJestObj().mock("expo-image-picker", function () {
  return {
    requestMediaLibraryPermissionsAsync: jest.fn(),
    launchImageLibraryAsync: jest.fn(),
    MediaTypeOptions: {
      Images: "Images"
    }
  };
});
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    useAuthStore: function useAuthStore() {
      return {
        user: mockUser
      };
    },
    logger: {
      error: jest.fn(),
      info: jest.fn()
    }
  };
});
_getJestObj().mock("../../../services/api", function () {
  return {
    api: {
      getUserPets: mockGetUserPets,
      updatePet: mockUpdatePet
    }
  };
});
_getJestObj().mock("../../domains/ai/useAIBio", function () {
  return {
    useAIBio: function useAIBio() {
      return {
        generateBio: mockGenerateAIBio,
        isGenerating: false,
        lastGeneratedBio: mockLastGeneratedBio,
        bioHistory: [],
        addToHistory: mockAddToHistory,
        clearHistory: mockClearHistory
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _useAIBioScreen = require("../useAIBioScreen");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGoBack = jest.fn();
var mockNavigation = {
  goBack: mockGoBack
};
jest.spyOn(_reactNative2.Alert, "alert");
var mockUser = {
  _id: "user123",
  name: "Test User"
};
var mockGetUserPets = jest.fn();
var mockUpdatePet = jest.fn();
var mockGenerateAIBio = jest.fn();
var mockAddToHistory = jest.fn();
var mockClearHistory = jest.fn();
var mockLastGeneratedBio = {
  bio: "Meet Buddy! A friendly dog.",
  keywords: ["friendly", "playful"],
  sentiment: {
    score: 0.9,
    label: "positive"
  },
  matchScore: 88
};
describe("useAIBioScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockGetUserPets.mockResolvedValue([{
      _id: "pet1",
      name: "Buddy"
    }]);
    mockUpdatePet.mockResolvedValue({
      success: true
    });
  });
  it("should initialize with default form state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook.result;
    expect(result.current.petName).toBe("");
    expect(result.current.petBreed).toBe("");
    expect(result.current.petAge).toBe("");
    expect(result.current.petPersonality).toBe("");
    expect(result.current.selectedTone).toBe("playful");
    expect(result.current.selectedPhoto).toBe(null);
  });
  it("should provide available tones", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook2.result;
    expect(result.current.tones).toHaveLength(5);
    expect(result.current.tones[0].id).toBe("playful");
    expect(result.current.tones[1].id).toBe("professional");
    expect(result.current.tones[2].id).toBe("casual");
    expect(result.current.tones[3].id).toBe("romantic");
    expect(result.current.tones[4].id).toBe("funny");
  });
  it("should update pet name", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Max");
    });
    expect(result.current.petName).toBe("Max");
  });
  it("should update pet breed", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.setPetBreed("Golden Retriever");
    });
    expect(result.current.petBreed).toBe("Golden Retriever");
  });
  it("should update pet age", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.setPetAge("3");
    });
    expect(result.current.petAge).toBe("3");
  });
  it("should update pet personality", function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.setPetPersonality("friendly, playful");
    });
    expect(result.current.petPersonality).toBe("friendly, playful");
  });
  it("should update selected tone", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.setSelectedTone("professional");
    });
    expect(result.current.selectedTone).toBe("professional");
  });
  it("should request image picker permissions", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://test.jpg"
      }]
    });
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(ImagePicker.requestMediaLibraryPermissionsAsync).toHaveBeenCalled();
    expect(result.current.selectedPhoto).toBe("file://test.jpg");
  }));
  it("should show alert when permissions denied", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "denied"
    });
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Permission needed", "We need camera roll permissions to analyze your pet photo");
    expect(result.current.selectedPhoto).toBe(null);
  }));
  it("should handle canceled image picker", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: true
    });
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.selectedPhoto).toBe(null);
  }));
  it("should require pet name for bio generation", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Missing Information", "Please enter your pet's name");
    expect(mockGenerateAIBio).not.toHaveBeenCalled();
  }));
  it("should generate bio with form data", (0, _asyncToGenerator2.default)(function* () {
    mockGenerateAIBio.mockResolvedValue(mockLastGeneratedBio);
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook10.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Buddy");
      result.current.setPetBreed("Golden Retriever");
      result.current.setPetAge("3");
      result.current.setPetPersonality("friendly, playful");
      result.current.setSelectedTone("playful");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(mockGenerateAIBio).toHaveBeenCalledWith({
      petName: "Buddy",
      keywords: ["friendly", "playful"],
      tone: "playful",
      length: "medium",
      petType: "dog",
      age: 3,
      breed: "Golden Retriever"
    });
  }));
  it("should parse age as integer", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook11.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Max");
      result.current.setPetAge("5");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(mockGenerateAIBio).toHaveBeenCalledWith(expect.objectContaining({
      age: 5
    }));
  }));
  it("should handle invalid age", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook12.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Max");
      result.current.setPetAge("invalid");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(mockGenerateAIBio).toHaveBeenCalledWith(expect.objectContaining({
      age: 1
    }));
  }));
  it("should save bio to pet profile", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook13.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveBio();
    }));
    expect(mockGetUserPets).toHaveBeenCalled();
    expect(mockUpdatePet).toHaveBeenCalledWith("pet1", {
      description: mockLastGeneratedBio.bio
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Success", "Pet profile updated successfully!");
    expect(mockGoBack).toHaveBeenCalled();
  }));
  it("should handle save when no pets exist", (0, _asyncToGenerator2.default)(function* () {
    mockGetUserPets.mockResolvedValue([]);
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook14.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveBio();
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Saved Locally", "Bio has been saved to your device");
  }));
  it("should handle save errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    mockGetUserPets.mockRejectedValue(new Error("API error"));
    var _renderHook15 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook15.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.saveBio();
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Saved Locally", "Bio has been saved to your device");
  }));
  it("should navigate back", function () {
    var _renderHook16 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook16.result;
    (0, _reactNative.act)(function () {
      result.current.handleGoBack();
    });
    expect(mockGoBack).toHaveBeenCalled();
  });
  it("should clear form", function () {
    var _renderHook17 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook17.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Max");
      result.current.setPetBreed("Labrador");
      result.current.setPetAge("2");
      result.current.setPetPersonality("energetic");
      result.current.setSelectedTone("funny");
      result.current.setSelectedPhoto("photo.jpg");
    });
    (0, _reactNative.act)(function () {
      result.current.clearForm();
    });
    expect(result.current.petName).toBe("");
    expect(result.current.petBreed).toBe("");
    expect(result.current.petAge).toBe("");
    expect(result.current.petPersonality).toBe("");
    expect(result.current.selectedTone).toBe("playful");
    expect(result.current.selectedPhoto).toBe(null);
    expect(mockClearHistory).toHaveBeenCalled();
  });
  it("should provide generated bio from domain hook", function () {
    var _renderHook18 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook18.result;
    expect(result.current.generatedBio).toEqual(mockLastGeneratedBio);
  });
  it("should provide isGenerating state", function () {
    var _renderHook19 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook19.result;
    expect(result.current.isGenerating).toBe(false);
  });
  it("should provide bio history", function () {
    var _renderHook20 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook20.result;
    expect(result.current.bioHistory).toEqual([]);
  });
  it("should split personality keywords correctly", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook21 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook21.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Buddy");
      result.current.setPetPersonality("  friendly,  playful,  energetic  ");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(mockGenerateAIBio).toHaveBeenCalledWith(expect.objectContaining({
      keywords: ["friendly", "playful", "energetic"]
    }));
  }));
  it("should filter empty keywords", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook22 = (0, _reactNative.renderHook)(function () {
        return (0, _useAIBioScreen.useAIBioScreen)();
      }),
      result = _renderHook22.result;
    (0, _reactNative.act)(function () {
      result.current.setPetName("Buddy");
      result.current.setPetPersonality("friendly,  ,  , playful");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.generateBio();
    }));
    expect(mockGenerateAIBio).toHaveBeenCalledWith(expect.objectContaining({
      keywords: ["friendly", "playful"]
    }));
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwibW9ja05hdmlnYXRpb24iLCJyZXF1ZXN0TWVkaWFMaWJyYXJ5UGVybWlzc2lvbnNBc3luYyIsImplc3QiLCJmbiIsImxhdW5jaEltYWdlTGlicmFyeUFzeW5jIiwiTWVkaWFUeXBlT3B0aW9ucyIsIkltYWdlcyIsInVzZUF1dGhTdG9yZSIsInVzZXIiLCJtb2NrVXNlciIsImxvZ2dlciIsImVycm9yIiwiaW5mbyIsImFwaSIsImdldFVzZXJQZXRzIiwibW9ja0dldFVzZXJQZXRzIiwidXBkYXRlUGV0IiwibW9ja1VwZGF0ZVBldCIsInVzZUFJQmlvIiwiZ2VuZXJhdGVCaW8iLCJtb2NrR2VuZXJhdGVBSUJpbyIsImlzR2VuZXJhdGluZyIsImxhc3RHZW5lcmF0ZWRCaW8iLCJtb2NrTGFzdEdlbmVyYXRlZEJpbyIsImJpb0hpc3RvcnkiLCJhZGRUb0hpc3RvcnkiLCJtb2NrQWRkVG9IaXN0b3J5IiwiY2xlYXJIaXN0b3J5IiwibW9ja0NsZWFySGlzdG9yeSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlMiIsIl91c2VBSUJpb1NjcmVlbiIsIkltYWdlUGlja2VyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QyIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVxdWlyZSIsIm1vY2tHb0JhY2siLCJnb0JhY2siLCJzcHlPbiIsIkFsZXJ0IiwiX2lkIiwibmFtZSIsImJpbyIsImtleXdvcmRzIiwic2VudGltZW50Iiwic2NvcmUiLCJsYWJlbCIsIm1hdGNoU2NvcmUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJzdWNjZXNzIiwiaXQiLCJfcmVuZGVySG9vayIsInJlbmRlckhvb2siLCJ1c2VBSUJpb1NjcmVlbiIsInJlc3VsdCIsImV4cGVjdCIsImN1cnJlbnQiLCJwZXROYW1lIiwidG9CZSIsInBldEJyZWVkIiwicGV0QWdlIiwicGV0UGVyc29uYWxpdHkiLCJzZWxlY3RlZFRvbmUiLCJzZWxlY3RlZFBob3RvIiwiX3JlbmRlckhvb2syIiwidG9uZXMiLCJ0b0hhdmVMZW5ndGgiLCJpZCIsIl9yZW5kZXJIb29rMyIsImFjdCIsInNldFBldE5hbWUiLCJfcmVuZGVySG9vazQiLCJzZXRQZXRCcmVlZCIsIl9yZW5kZXJIb29rNSIsInNldFBldEFnZSIsIl9yZW5kZXJIb29rNiIsInNldFBldFBlcnNvbmFsaXR5IiwiX3JlbmRlckhvb2s3Iiwic2V0U2VsZWN0ZWRUb25lIiwic3RhdHVzIiwiY2FuY2VsZWQiLCJhc3NldHMiLCJ1cmkiLCJfcmVuZGVySG9vazgiLCJwaWNrSW1hZ2UiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlckhvb2s5IiwiYWxlcnQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIl9yZW5kZXJIb29rMCIsIl9yZW5kZXJIb29rMSIsIm5vdCIsIl9yZW5kZXJIb29rMTAiLCJ0b25lIiwibGVuZ3RoIiwicGV0VHlwZSIsImFnZSIsImJyZWVkIiwiX3JlbmRlckhvb2sxMSIsIm9iamVjdENvbnRhaW5pbmciLCJfcmVuZGVySG9vazEyIiwiX3JlbmRlckhvb2sxMyIsInNhdmVCaW8iLCJkZXNjcmlwdGlvbiIsIl9yZW5kZXJIb29rMTQiLCJtb2NrUmVqZWN0ZWRWYWx1ZSIsIkVycm9yIiwiX3JlbmRlckhvb2sxNSIsIl9yZW5kZXJIb29rMTYiLCJoYW5kbGVHb0JhY2siLCJfcmVuZGVySG9vazE3Iiwic2V0U2VsZWN0ZWRQaG90byIsImNsZWFyRm9ybSIsIl9yZW5kZXJIb29rMTgiLCJnZW5lcmF0ZWRCaW8iLCJ0b0VxdWFsIiwiX3JlbmRlckhvb2sxOSIsIl9yZW5kZXJIb29rMjAiLCJfcmVuZGVySG9vazIxIiwiX3JlbmRlckhvb2syMiJdLCJzb3VyY2VzIjpbInVzZUFJQmlvU2NyZWVuLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBqc2RvbVxuICovXG5pbXBvcnQgeyByZW5kZXJIb29rLCBhY3QsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgdXNlQUlCaW9TY3JlZW4gfSBmcm9tIFwiLi4vdXNlQUlCaW9TY3JlZW5cIjtcbmltcG9ydCAqIGFzIEltYWdlUGlja2VyIGZyb20gXCJleHBvLWltYWdlLXBpY2tlclwiO1xuXG4vLyBNb2NrIG5hdmlnYXRpb25cbmNvbnN0IG1vY2tHb0JhY2sgPSBqZXN0LmZuKCk7XG5jb25zdCBtb2NrTmF2aWdhdGlvbiA9IHtcbiAgZ29CYWNrOiBtb2NrR29CYWNrLFxufSBhcyBhbnk7XG5cbmplc3QubW9jayhcIkByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZVwiLCAoKSA9PiAoe1xuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiBtb2NrTmF2aWdhdGlvbixcbn0pKTtcblxuLy8gTW9jayBJbWFnZVBpY2tlclxuamVzdC5tb2NrKFwiZXhwby1pbWFnZS1waWNrZXJcIiwgKCkgPT4gKHtcbiAgcmVxdWVzdE1lZGlhTGlicmFyeVBlcm1pc3Npb25zQXN5bmM6IGplc3QuZm4oKSxcbiAgbGF1bmNoSW1hZ2VMaWJyYXJ5QXN5bmM6IGplc3QuZm4oKSxcbiAgTWVkaWFUeXBlT3B0aW9uczoge1xuICAgIEltYWdlczogXCJJbWFnZXNcIixcbiAgfSxcbn0pKTtcblxuLy8gTW9jayBBbGVydFxuamVzdC5zcHlPbihBbGVydCwgXCJhbGVydFwiKTtcblxuLy8gTW9jayBhdXRoIHN0b3JlXG5jb25zdCBtb2NrVXNlciA9IHtcbiAgX2lkOiBcInVzZXIxMjNcIixcbiAgbmFtZTogXCJUZXN0IFVzZXJcIixcbn07XG5cbmplc3QubW9jayhcIkBwYXdmZWN0bWF0Y2gvY29yZVwiLCAoKSA9PiAoe1xuICB1c2VBdXRoU3RvcmU6ICgpID0+ICh7IHVzZXI6IG1vY2tVc2VyIH0pLFxuICBsb2dnZXI6IHtcbiAgICBlcnJvcjogamVzdC5mbigpLFxuICAgIGluZm86IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuLy8gTW9jayBBUElcbmNvbnN0IG1vY2tHZXRVc2VyUGV0cyA9IGplc3QuZm4oKTtcbmNvbnN0IG1vY2tVcGRhdGVQZXQgPSBqZXN0LmZuKCk7XG5cbmplc3QubW9jayhcIi4uLy4uLy4uL3NlcnZpY2VzL2FwaVwiLCAoKSA9PiAoe1xuICBhcGk6IHtcbiAgICBnZXRVc2VyUGV0czogbW9ja0dldFVzZXJQZXRzLFxuICAgIHVwZGF0ZVBldDogbW9ja1VwZGF0ZVBldCxcbiAgfSxcbn0pKTtcblxuLy8gTW9jayB1c2VBSUJpbyBkb21haW4gaG9va1xuY29uc3QgbW9ja0dlbmVyYXRlQUlCaW8gPSBqZXN0LmZuKCk7XG5jb25zdCBtb2NrQWRkVG9IaXN0b3J5ID0gamVzdC5mbigpO1xuY29uc3QgbW9ja0NsZWFySGlzdG9yeSA9IGplc3QuZm4oKTtcblxuY29uc3QgbW9ja0xhc3RHZW5lcmF0ZWRCaW8gPSB7XG4gIGJpbzogXCJNZWV0IEJ1ZGR5ISBBIGZyaWVuZGx5IGRvZy5cIixcbiAga2V5d29yZHM6IFtcImZyaWVuZGx5XCIsIFwicGxheWZ1bFwiXSxcbiAgc2VudGltZW50OiB7IHNjb3JlOiAwLjksIGxhYmVsOiBcInBvc2l0aXZlXCIgfSxcbiAgbWF0Y2hTY29yZTogODgsXG59O1xuXG5qZXN0Lm1vY2soXCIuLi8uLi9kb21haW5zL2FpL3VzZUFJQmlvXCIsICgpID0+ICh7XG4gIHVzZUFJQmlvOiAoKSA9PiAoe1xuICAgIGdlbmVyYXRlQmlvOiBtb2NrR2VuZXJhdGVBSUJpbyxcbiAgICBpc0dlbmVyYXRpbmc6IGZhbHNlLFxuICAgIGxhc3RHZW5lcmF0ZWRCaW86IG1vY2tMYXN0R2VuZXJhdGVkQmlvLFxuICAgIGJpb0hpc3Rvcnk6IFtdLFxuICAgIGFkZFRvSGlzdG9yeTogbW9ja0FkZFRvSGlzdG9yeSxcbiAgICBjbGVhckhpc3Rvcnk6IG1vY2tDbGVhckhpc3RvcnksXG4gIH0pLFxufSkpO1xuXG5kZXNjcmliZShcInVzZUFJQmlvU2NyZWVuXCIsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgbW9ja0dldFVzZXJQZXRzLm1vY2tSZXNvbHZlZFZhbHVlKFt7IF9pZDogXCJwZXQxXCIsIG5hbWU6IFwiQnVkZHlcIiB9XSk7XG4gICAgbW9ja1VwZGF0ZVBldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGluaXRpYWxpemUgd2l0aCBkZWZhdWx0IGZvcm0gc3RhdGVcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFJQmlvU2NyZWVuKCkpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnBldE5hbWUpLnRvQmUoXCJcIik7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnBldEJyZWVkKS50b0JlKFwiXCIpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wZXRBZ2UpLnRvQmUoXCJcIik7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnBldFBlcnNvbmFsaXR5KS50b0JlKFwiXCIpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZWxlY3RlZFRvbmUpLnRvQmUoXCJwbGF5ZnVsXCIpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZWxlY3RlZFBob3RvKS50b0JlKG51bGwpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBwcm92aWRlIGF2YWlsYWJsZSB0b25lc1wiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQUlCaW9TY3JlZW4oKSk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG9uZXMpLnRvSGF2ZUxlbmd0aCg1KTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG9uZXNbMF0uaWQpLnRvQmUoXCJwbGF5ZnVsXCIpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50b25lc1sxXS5pZCkudG9CZShcInByb2Zlc3Npb25hbFwiKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudG9uZXNbMl0uaWQpLnRvQmUoXCJjYXN1YWxcIik7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRvbmVzWzNdLmlkKS50b0JlKFwicm9tYW50aWNcIik7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRvbmVzWzRdLmlkKS50b0JlKFwiZnVubnlcIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHVwZGF0ZSBwZXQgbmFtZVwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQUlCaW9TY3JlZW4oKSk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0UGV0TmFtZShcIk1heFwiKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wZXROYW1lKS50b0JlKFwiTWF4XCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCB1cGRhdGUgcGV0IGJyZWVkXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBSUJpb1NjcmVlbigpKTtcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5zZXRQZXRCcmVlZChcIkdvbGRlbiBSZXRyaWV2ZXJcIik7XG4gICAgfSk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucGV0QnJlZWQpLnRvQmUoXCJHb2xkZW4gUmV0cmlldmVyXCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCB1cGRhdGUgcGV0IGFnZVwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQUlCaW9TY3JlZW4oKSk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0UGV0QWdlKFwiM1wiKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wZXRBZ2UpLnRvQmUoXCIzXCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCB1cGRhdGUgcGV0IHBlcnNvbmFsaXR5XCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBSUJpb1NjcmVlbigpKTtcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5zZXRQZXRQZXJzb25hbGl0eShcImZyaWVuZGx5LCBwbGF5ZnVsXCIpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnBldFBlcnNvbmFsaXR5KS50b0JlKFwiZnJpZW5kbHksIHBsYXlmdWxcIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHVwZGF0ZSBzZWxlY3RlZCB0b25lXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBSUJpb1NjcmVlbigpKTtcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5zZXRTZWxlY3RlZFRvbmUoXCJwcm9mZXNzaW9uYWxcIik7XG4gICAgfSk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2VsZWN0ZWRUb25lKS50b0JlKFwicHJvZmVzc2lvbmFsXCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCByZXF1ZXN0IGltYWdlIHBpY2tlciBwZXJtaXNzaW9uc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgKFxuICAgICAgSW1hZ2VQaWNrZXIucmVxdWVzdE1lZGlhTGlicmFyeVBlcm1pc3Npb25zQXN5bmMgYXMgamVzdC5Nb2NrXG4gICAgKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBzdGF0dXM6IFwiZ3JhbnRlZFwiLFxuICAgIH0pO1xuICAgIChJbWFnZVBpY2tlci5sYXVuY2hJbWFnZUxpYnJhcnlBc3luYyBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIGNhbmNlbGVkOiBmYWxzZSxcbiAgICAgIGFzc2V0czogW3sgdXJpOiBcImZpbGU6Ly90ZXN0LmpwZ1wiIH1dLFxuICAgIH0pO1xuXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQUlCaW9TY3JlZW4oKSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQucGlja0ltYWdlKCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QoSW1hZ2VQaWNrZXIucmVxdWVzdE1lZGlhTGlicmFyeVBlcm1pc3Npb25zQXN5bmMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2VsZWN0ZWRQaG90bykudG9CZShcImZpbGU6Ly90ZXN0LmpwZ1wiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgc2hvdyBhbGVydCB3aGVuIHBlcm1pc3Npb25zIGRlbmllZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgKFxuICAgICAgSW1hZ2VQaWNrZXIucmVxdWVzdE1lZGlhTGlicmFyeVBlcm1pc3Npb25zQXN5bmMgYXMgamVzdC5Nb2NrXG4gICAgKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBzdGF0dXM6IFwiZGVuaWVkXCIsXG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBSUJpb1NjcmVlbigpKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5waWNrSW1hZ2UoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChBbGVydC5hbGVydCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBcIlBlcm1pc3Npb24gbmVlZGVkXCIsXG4gICAgICBcIldlIG5lZWQgY2FtZXJhIHJvbGwgcGVybWlzc2lvbnMgdG8gYW5hbHl6ZSB5b3VyIHBldCBwaG90b1wiLFxuICAgICk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnNlbGVjdGVkUGhvdG8pLnRvQmUobnVsbCk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGhhbmRsZSBjYW5jZWxlZCBpbWFnZSBwaWNrZXJcIiwgYXN5bmMgKCkgPT4ge1xuICAgIChcbiAgICAgIEltYWdlUGlja2VyLnJlcXVlc3RNZWRpYUxpYnJhcnlQZXJtaXNzaW9uc0FzeW5jIGFzIGplc3QuTW9ja1xuICAgICkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgc3RhdHVzOiBcImdyYW50ZWRcIixcbiAgICB9KTtcbiAgICAoSW1hZ2VQaWNrZXIubGF1bmNoSW1hZ2VMaWJyYXJ5QXN5bmMgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBjYW5jZWxlZDogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFJQmlvU2NyZWVuKCkpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LnBpY2tJbWFnZSgpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnNlbGVjdGVkUGhvdG8pLnRvQmUobnVsbCk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHJlcXVpcmUgcGV0IG5hbWUgZm9yIGJpbyBnZW5lcmF0aW9uXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBSUJpb1NjcmVlbigpKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5nZW5lcmF0ZUJpbygpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIFwiTWlzc2luZyBJbmZvcm1hdGlvblwiLFxuICAgICAgXCJQbGVhc2UgZW50ZXIgeW91ciBwZXQncyBuYW1lXCIsXG4gICAgKTtcbiAgICBleHBlY3QobW9ja0dlbmVyYXRlQUlCaW8pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGdlbmVyYXRlIGJpbyB3aXRoIGZvcm0gZGF0YVwiLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja0dlbmVyYXRlQUlCaW8ubW9ja1Jlc29sdmVkVmFsdWUobW9ja0xhc3RHZW5lcmF0ZWRCaW8pO1xuXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQUlCaW9TY3JlZW4oKSk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0UGV0TmFtZShcIkJ1ZGR5XCIpO1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0UGV0QnJlZWQoXCJHb2xkZW4gUmV0cmlldmVyXCIpO1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0UGV0QWdlKFwiM1wiKTtcbiAgICAgIHJlc3VsdC5jdXJyZW50LnNldFBldFBlcnNvbmFsaXR5KFwiZnJpZW5kbHksIHBsYXlmdWxcIik7XG4gICAgICByZXN1bHQuY3VycmVudC5zZXRTZWxlY3RlZFRvbmUoXCJwbGF5ZnVsXCIpO1xuICAgIH0pO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmdlbmVyYXRlQmlvKCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QobW9ja0dlbmVyYXRlQUlCaW8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgIHBldE5hbWU6IFwiQnVkZHlcIixcbiAgICAgIGtleXdvcmRzOiBbXCJmcmllbmRseVwiLCBcInBsYXlmdWxcIl0sXG4gICAgICB0b25lOiBcInBsYXlmdWxcIixcbiAgICAgIGxlbmd0aDogXCJtZWRpdW1cIixcbiAgICAgIHBldFR5cGU6IFwiZG9nXCIsXG4gICAgICBhZ2U6IDMsXG4gICAgICBicmVlZDogXCJHb2xkZW4gUmV0cmlldmVyXCIsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHBhcnNlIGFnZSBhcyBpbnRlZ2VyXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBSUJpb1NjcmVlbigpKTtcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5zZXRQZXROYW1lKFwiTWF4XCIpO1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0UGV0QWdlKFwiNVwiKTtcbiAgICB9KTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5nZW5lcmF0ZUJpbygpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KG1vY2tHZW5lcmF0ZUFJQmlvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsgYWdlOiA1IH0pLFxuICAgICk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGhhbmRsZSBpbnZhbGlkIGFnZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQUlCaW9TY3JlZW4oKSk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0UGV0TmFtZShcIk1heFwiKTtcbiAgICAgIHJlc3VsdC5jdXJyZW50LnNldFBldEFnZShcImludmFsaWRcIik7XG4gICAgfSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuZ2VuZXJhdGVCaW8oKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrR2VuZXJhdGVBSUJpbykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IGFnZTogMSB9KSwgLy8gRGVmYXVsdCB0byAxXG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgc2F2ZSBiaW8gdG8gcGV0IHByb2ZpbGVcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFJQmlvU2NyZWVuKCkpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LnNhdmVCaW8oKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrR2V0VXNlclBldHMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3QobW9ja1VwZGF0ZVBldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCJwZXQxXCIsIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBtb2NrTGFzdEdlbmVyYXRlZEJpby5iaW8sXG4gICAgfSk7XG4gICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIFwiU3VjY2Vzc1wiLFxuICAgICAgXCJQZXQgcHJvZmlsZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseSFcIixcbiAgICApO1xuICAgIGV4cGVjdChtb2NrR29CYWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGhhbmRsZSBzYXZlIHdoZW4gbm8gcGV0cyBleGlzdFwiLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja0dldFVzZXJQZXRzLm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcblxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFJQmlvU2NyZWVuKCkpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LnNhdmVCaW8oKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChBbGVydC5hbGVydCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBcIlNhdmVkIExvY2FsbHlcIixcbiAgICAgIFwiQmlvIGhhcyBiZWVuIHNhdmVkIHRvIHlvdXIgZGV2aWNlXCIsXG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgaGFuZGxlIHNhdmUgZXJyb3JzIGdyYWNlZnVsbHlcIiwgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tHZXRVc2VyUGV0cy5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoXCJBUEkgZXJyb3JcIikpO1xuXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQUlCaW9TY3JlZW4oKSk7XG5cbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuc2F2ZUJpbygpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIFwiU2F2ZWQgTG9jYWxseVwiLFxuICAgICAgXCJCaW8gaGFzIGJlZW4gc2F2ZWQgdG8geW91ciBkZXZpY2VcIixcbiAgICApO1xuICB9KTtcblxuICBpdChcInNob3VsZCBuYXZpZ2F0ZSBiYWNrXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBSUJpb1NjcmVlbigpKTtcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5oYW5kbGVHb0JhY2soKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrR29CYWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGNsZWFyIGZvcm1cIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFJQmlvU2NyZWVuKCkpO1xuXG4gICAgLy8gU2V0IHNvbWUgdmFsdWVzXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50LnNldFBldE5hbWUoXCJNYXhcIik7XG4gICAgICByZXN1bHQuY3VycmVudC5zZXRQZXRCcmVlZChcIkxhYnJhZG9yXCIpO1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0UGV0QWdlKFwiMlwiKTtcbiAgICAgIHJlc3VsdC5jdXJyZW50LnNldFBldFBlcnNvbmFsaXR5KFwiZW5lcmdldGljXCIpO1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0U2VsZWN0ZWRUb25lKFwiZnVubnlcIik7XG4gICAgICByZXN1bHQuY3VycmVudC5zZXRTZWxlY3RlZFBob3RvKFwicGhvdG8uanBnXCIpO1xuICAgIH0pO1xuXG4gICAgLy8gQ2xlYXIgZm9ybVxuICAgIGFjdCgoKSA9PiB7XG4gICAgICByZXN1bHQuY3VycmVudC5jbGVhckZvcm0oKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wZXROYW1lKS50b0JlKFwiXCIpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wZXRCcmVlZCkudG9CZShcIlwiKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucGV0QWdlKS50b0JlKFwiXCIpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wZXRQZXJzb25hbGl0eSkudG9CZShcIlwiKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2VsZWN0ZWRUb25lKS50b0JlKFwicGxheWZ1bFwiKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2VsZWN0ZWRQaG90bykudG9CZShudWxsKTtcbiAgICBleHBlY3QobW9ja0NsZWFySGlzdG9yeSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBwcm92aWRlIGdlbmVyYXRlZCBiaW8gZnJvbSBkb21haW4gaG9va1wiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQUlCaW9TY3JlZW4oKSk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZ2VuZXJhdGVkQmlvKS50b0VxdWFsKG1vY2tMYXN0R2VuZXJhdGVkQmlvKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcHJvdmlkZSBpc0dlbmVyYXRpbmcgc3RhdGVcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFJQmlvU2NyZWVuKCkpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzR2VuZXJhdGluZykudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHByb3ZpZGUgYmlvIGhpc3RvcnlcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFJQmlvU2NyZWVuKCkpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmJpb0hpc3RvcnkpLnRvRXF1YWwoW10pO1xuICB9KTtcblxuICBpdChcInNob3VsZCBzcGxpdCBwZXJzb25hbGl0eSBrZXl3b3JkcyBjb3JyZWN0bHlcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFJQmlvU2NyZWVuKCkpO1xuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIHJlc3VsdC5jdXJyZW50LnNldFBldE5hbWUoXCJCdWRkeVwiKTtcbiAgICAgIHJlc3VsdC5jdXJyZW50LnNldFBldFBlcnNvbmFsaXR5KFwiICBmcmllbmRseSwgIHBsYXlmdWwsICBlbmVyZ2V0aWMgIFwiKTtcbiAgICB9KTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5nZW5lcmF0ZUJpbygpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KG1vY2tHZW5lcmF0ZUFJQmlvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAga2V5d29yZHM6IFtcImZyaWVuZGx5XCIsIFwicGxheWZ1bFwiLCBcImVuZXJnZXRpY1wiXSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGZpbHRlciBlbXB0eSBrZXl3b3Jkc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQUlCaW9TY3JlZW4oKSk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0UGV0TmFtZShcIkJ1ZGR5XCIpO1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0UGV0UGVyc29uYWxpdHkoXCJmcmllbmRseSwgICwgICwgcGxheWZ1bFwiKTtcbiAgICB9KTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5nZW5lcmF0ZUJpbygpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KG1vY2tHZW5lcmF0ZUFJQmlvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAga2V5d29yZHM6IFtcImZyaWVuZGx5XCIsIFwicGxheWZ1bFwiXSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBY0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBTztJQUMzQ0MsYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUE7TUFBQSxPQUFRQyxjQUFjO0lBQUE7RUFDckMsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdISCxXQUFBLEdBQUtDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtFQUFBLE9BQU87SUFDcENHLG1DQUFtQyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzlDQyx1QkFBdUIsRUFBRUYs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