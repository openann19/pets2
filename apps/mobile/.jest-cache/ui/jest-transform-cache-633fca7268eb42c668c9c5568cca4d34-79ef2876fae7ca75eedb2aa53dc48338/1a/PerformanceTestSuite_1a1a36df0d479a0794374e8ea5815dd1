5de6de1315e3c7467f3e08f353df6605
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PerformanceTestSuite;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _core = require("@pawfectmatch/core");
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _unifiedTheme = require("../theme/unified-theme");
var _PerformanceMonitor = _interopRequireDefault(require("../utils/PerformanceMonitor"));
var _EliteButton = require("./buttons/EliteButton");
var _FXContainer = require("./containers/FXContainer");
var _ModernTypography = require("./typography/ModernTypography");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _worklet_4217389513524_init_data = {
  code: "function anonymous() {\n  const {\n    testAnimationValue,\n    testScaleValue,\n    testRotationValue\n  } = this._closure;\n  return {\n    transform: [{\n      translateX: testAnimationValue.value\n    }, {\n      scale: testScaleValue.value\n    }, {\n      rotate: testRotationValue.value + \"deg\"\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/PerformanceTestSuite.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"testAnimationValue\",\"testScaleValue\",\"testRotationValue\",\"_closure\",\"transform\",\"translateX\",\"value\",\"scale\",\"rotate\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/PerformanceTestSuite.tsx\"],\"mappings\":\"AAuP6C,SAAAA,UAAA;EAAA;IAAAC,kBAAA;IAAAC,cAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAChDC,SAAS,EAAE,CACT;MAAEC,UAAU,EAAEL,kBAAkB,CAACM;IAAM,CAAC,EACxC;MAAEC,KAAK,EAAEN,cAAc,CAACK;IAAM,CAAC,EAC/B;MAAEE,MAAM,EAAKN,iBAAiB,CAACI,KAAK;IAAM,CAAC;EAE/C,CAAC;AAAA\",\"ignoreList\":[]}"
};
function PerformanceTestSuite(_ref) {
  var onTestComplete = _ref.onTestComplete;
  var _useState = (0, _react.useState)({
      isRunning: false,
      currentTest: "",
      progress: 0,
      results: null
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    testState = _useState2[0],
    setTestState = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    metrics = _useState4[0],
    setMetrics = _useState4[1];
  var performanceMonitor = _PerformanceMonitor.default;
  var testAnimationValue = (0, _reactNativeReanimated.useSharedValue)(0);
  var testScaleValue = (0, _reactNativeReanimated.useSharedValue)(1);
  var testRotationValue = (0, _reactNativeReanimated.useSharedValue)(0);
  var handleMetricsUpdate = (0, _react.useCallback)(function (newMetrics) {
    setMetrics(newMetrics);
  }, []);
  (0, _react.useEffect)(function () {}, [performanceMonitor, handleMetricsUpdate]);
  var testAnimations = (0, _react.useCallback)(function () {
    return new Promise(function (resolve) {
      setTestState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          currentTest: "Testing Animations..."
        });
      });
      testAnimationValue.value = (0, _reactNativeReanimated.withRepeat)((0, _reactNativeReanimated.withSpring)(100, {
        damping: 15,
        stiffness: 150
      }), 10, true);
      testScaleValue.value = (0, _reactNativeReanimated.withRepeat)((0, _reactNativeReanimated.withSpring)(1.2, {
        damping: 20,
        stiffness: 200
      }), 8, true);
      testRotationValue.value = (0, _reactNativeReanimated.withRepeat)((0, _reactNativeReanimated.withTiming)(360, {
        duration: 2000
      }), 5, false);
      setTimeout(function () {
        testAnimationValue.value = (0, _reactNativeReanimated.withSpring)(0);
        testScaleValue.value = (0, _reactNativeReanimated.withSpring)(1);
        testRotationValue.value = (0, _reactNativeReanimated.withSpring)(0);
        resolve();
      }, 3000);
    });
  }, [testAnimationValue, testScaleValue, testRotationValue]);
  var testGestures = (0, _react.useCallback)(function () {
    return new Promise(function (resolve) {
      setTestState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          currentTest: "Testing Gestures..."
        });
      });
      var gestureCount = 0;
      var maxGestures = 20;
      var _performGesture = function performGesture() {
        if (gestureCount < maxGestures) {
          testAnimationValue.value = (0, _reactNativeReanimated.withSpring)(Math.random() * 50, {
            damping: 10,
            stiffness: 300
          });
          gestureCount++;
          setTimeout(_performGesture, 50);
        } else {
          testAnimationValue.value = (0, _reactNativeReanimated.withSpring)(0);
          resolve();
        }
      };
      _performGesture();
    });
  }, [testAnimationValue]);
  var testMemoryUsage = (0, _react.useCallback)(function () {
    return new Promise(function (resolve) {
      setTestState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          currentTest: "Testing Memory Usage..."
        });
      });
      var components = [];
      for (var i = 0; i < 100; i++) {
        components.push({
          id: i,
          data: new Array(1000).fill(Math.random())
        });
      }
      setTimeout(function () {
        components.length = 0;
        resolve();
      }, 2000);
    });
  }, []);
  var runTestSuite = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (testState.isRunning) return;
    setTestState({
      isRunning: true,
      currentTest: "Initializing...",
      progress: 0,
      results: null
    });
    try {
      setTestState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          progress: 25
        });
      });
      yield testAnimations();
      setTestState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          progress: 50
        });
      });
      yield testGestures();
      setTestState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          progress: 75
        });
      });
      yield testMemoryUsage();
      setTestState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          progress: 100,
          currentTest: "Calculating Results..."
        });
      });
      var finalMetrics = metrics || {
        fps: 0,
        memoryUsage: 0,
        animationFrameTime: 0,
        gestureResponseTime: 0,
        componentRenderTime: 0
      };
      var results = {
        animationFPS: finalMetrics.fps,
        gestureResponseTime: finalMetrics.gestureResponseTime || 0,
        memoryUsage: finalMetrics.memoryUsage,
        overallGrade: finalMetrics.fps >= 55 ? "A" : finalMetrics.fps >= 45 ? "B" : "C",
        recommendations: []
      };
      setTestState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          isRunning: false,
          currentTest: "Complete!",
          results: results
        });
      });
      onTestComplete == null ? void 0 : onTestComplete(results);
    } catch (error) {
      _core.logger.error("Performance test failed:", {
        error: error
      });
      setTestState(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          isRunning: false,
          currentTest: "Test Failed"
        });
      });
    }
  }), [testState.isRunning, testAnimations, testGestures, testMemoryUsage, metrics, performanceMonitor, onTestComplete]);
  var animatedTestStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -4, -27];
    var _f = function _f() {
      return {
        transform: [{
          translateX: testAnimationValue.value
        }, {
          scale: testScaleValue.value
        }, {
          rotate: `${testRotationValue.value}deg`
        }]
      };
    };
    _f._closure = {
      testAnimationValue: testAnimationValue,
      testScaleValue: testScaleValue,
      testRotationValue: testRotationValue
    };
    _f.__initData = _worklet_4217389513524_init_data;
    _f.__workletHash = 4217389513524;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsxs)(_FXContainer.FXContainerPresets.glass, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_ModernTypography.Heading2, {
      style: styles.title,
      children: "Performance Test Suite"
    }), (0, _jsxRuntime.jsx)(_ModernTypography.BodySmall, {
      style: styles.subtitle,
      children: "Comprehensive testing of the new architecture"
    }), metrics && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.metricsContainer,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_ModernTypography.Label, {
          style: styles.metricLabel,
          children: "FPS:"
        }), (0, _jsxRuntime.jsx)(_ModernTypography.Body, {
          style: _reactNative.StyleSheet.flatten([styles.metricValue, {
            color: metrics.fps >= 55 ? _unifiedTheme.Theme.colors.status.success : _unifiedTheme.Theme.colors.status.error
          }]),
          children: metrics.fps
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_ModernTypography.Label, {
          style: styles.metricLabel,
          children: "Frame Time:"
        }), (0, _jsxRuntime.jsxs)(_ModernTypography.Body, {
          style: styles.metricValue,
          children: [metrics.animationFrameTime || 0, "ms"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_ModernTypography.Label, {
          style: styles.metricLabel,
          children: "Memory:"
        }), (0, _jsxRuntime.jsxs)(_ModernTypography.Body, {
          style: styles.metricValue,
          children: [Math.round(metrics.memoryUsage / 1024 / 1024), "MB"]
        })]
      })]
    }), testState.isRunning && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.progressContainer,
      children: [(0, _jsxRuntime.jsx)(_ModernTypography.Label, {
        style: styles.progressLabel,
        children: testState.currentTest
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.progressBar,
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _reactNative.StyleSheet.flatten([styles.progressFill, {
            width: `${testState.progress}%`
          }])
        })
      }), (0, _jsxRuntime.jsxs)(_ModernTypography.BodySmall, {
        style: styles.progressText,
        children: [testState.progress, "%"]
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.testVisualization,
      children: (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        style: _reactNative.StyleSheet.flatten([styles.testBox, animatedTestStyle])
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.controlsContainer,
      children: (0, _jsxRuntime.jsx)(_EliteButton.EliteButtonPresets.holographic, {
        title: testState.isRunning ? "Running Tests..." : "Run Performance Tests",
        size: "lg",
        loading: testState.isRunning,
        onPress: runTestSuite,
        style: styles.testButton
      })
    }), testState.results && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.resultsContainer,
      children: [(0, _jsxRuntime.jsx)(_ModernTypography.Heading2, {
        style: styles.resultsTitle,
        children: "Test Results"
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.resultItem,
        children: [(0, _jsxRuntime.jsx)(_ModernTypography.Label, {
          style: styles.resultLabel,
          children: "Overall Grade:"
        }), (0, _jsxRuntime.jsx)(_ModernTypography.Body, {
          style: _reactNative.StyleSheet.flatten([styles.resultValue, {
            color: getGradeColor(testState.results.overallGrade)
          }]),
          children: testState.results.overallGrade
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.resultItem,
        children: [(0, _jsxRuntime.jsx)(_ModernTypography.Label, {
          style: styles.resultLabel,
          children: "Animation FPS:"
        }), (0, _jsxRuntime.jsx)(_ModernTypography.Body, {
          style: styles.resultValue,
          children: testState.results.animationFPS
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.resultItem,
        children: [(0, _jsxRuntime.jsx)(_ModernTypography.Label, {
          style: styles.resultLabel,
          children: "Gesture Response:"
        }), (0, _jsxRuntime.jsxs)(_ModernTypography.Body, {
          style: styles.resultValue,
          children: [testState.results.gestureResponseTime, "ms"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.resultItem,
        children: [(0, _jsxRuntime.jsx)(_ModernTypography.Label, {
          style: styles.resultLabel,
          children: "Memory Usage:"
        }), (0, _jsxRuntime.jsxs)(_ModernTypography.Body, {
          style: styles.resultValue,
          children: [Math.round(testState.results.memoryUsage / 1024 / 1024), "MB"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.recommendationsContainer,
        children: [(0, _jsxRuntime.jsx)(_ModernTypography.Label, {
          style: styles.recommendationsTitle,
          children: "Recommendations:"
        }), testState.results.recommendations.map(function (rec, index) {
          return (0, _jsxRuntime.jsxs)(_ModernTypography.BodySmall, {
            style: styles.recommendation,
            children: ["\u2022 ", rec]
          }, index);
        })]
      })]
    })]
  });
}
function getGradeColor(grade) {
  switch (grade) {
    case "A+":
    case "A":
      return _unifiedTheme.Theme.colors.status.success;
    case "B":
      return _unifiedTheme.Theme.colors.status.info;
    case "C":
      return _unifiedTheme.Theme.colors.status.warning;
    case "D":
    case "F":
      return _unifiedTheme.Theme.colors.status.error;
    default:
      return _unifiedTheme.Theme.colors.text.primary;
  }
}
var styles = _reactNative.StyleSheet.create({
  container: {
    padding: _unifiedTheme.Theme.spacing.xl,
    marginBottom: _unifiedTheme.Theme.spacing.lg
  },
  title: {
    marginBottom: _unifiedTheme.Theme.spacing.sm
  },
  subtitle: {
    marginBottom: _unifiedTheme.Theme.spacing.lg,
    color: _unifiedTheme.Theme.colors.text.secondary
  },
  metricsContainer: {
    flexDirection: "row",
    justifyContent: "space-around",
    marginBottom: _unifiedTheme.Theme.spacing.lg,
    padding: _unifiedTheme.Theme.spacing.md,
    backgroundColor: _unifiedTheme.Theme.colors.neutral[50],
    borderRadius: _unifiedTheme.Theme.borderRadius.lg
  },
  metricRow: {
    alignItems: "center"
  },
  metricLabel: {
    color: _unifiedTheme.Theme.colors.text.secondary,
    marginBottom: _unifiedTheme.Theme.spacing.xs
  },
  metricValue: {
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.bold
  },
  progressContainer: {
    marginBottom: _unifiedTheme.Theme.spacing.lg
  },
  progressLabel: {
    marginBottom: _unifiedTheme.Theme.spacing.sm,
    textAlign: "center"
  },
  progressBar: {
    height: 8,
    backgroundColor: _unifiedTheme.Theme.colors.neutral[200],
    borderRadius: 4,
    overflow: "hidden",
    marginBottom: _unifiedTheme.Theme.spacing.sm
  },
  progressFill: {
    height: "100%",
    backgroundColor: _unifiedTheme.Theme.semantic.interactive.primary,
    borderRadius: 4
  },
  progressText: {
    textAlign: "center",
    color: _unifiedTheme.Theme.colors.text.secondary
  },
  testVisualization: {
    height: 100,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: _unifiedTheme.Theme.spacing.lg
  },
  testBox: {
    width: 50,
    height: 50,
    backgroundColor: _unifiedTheme.Theme.semantic.interactive.primary,
    borderRadius: _unifiedTheme.Theme.borderRadius.md
  },
  controlsContainer: {
    marginBottom: _unifiedTheme.Theme.spacing.lg
  },
  testButton: {
    width: "100%"
  },
  resultsContainer: {
    padding: _unifiedTheme.Theme.spacing.lg,
    backgroundColor: _unifiedTheme.Theme.colors.neutral[50],
    borderRadius: _unifiedTheme.Theme.borderRadius.lg
  },
  resultsTitle: {
    marginBottom: _unifiedTheme.Theme.spacing.md
  },
  resultItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: _unifiedTheme.Theme.spacing.sm
  },
  resultLabel: {
    color: _unifiedTheme.Theme.colors.text.secondary
  },
  resultValue: {
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.bold
  },
  recommendationsContainer: {
    marginTop: _unifiedTheme.Theme.spacing.md,
    paddingTop: _unifiedTheme.Theme.spacing.md,
    borderTopWidth: 1,
    borderTopColor: _unifiedTheme.Theme.colors.border.light
  },
  recommendationsTitle: {
    marginBottom: _unifiedTheme.Theme.spacing.sm,
    color: _unifiedTheme.Theme.colors.status.info
  },
  recommendation: {
    marginBottom: _unifiedTheme.Theme.spacing.xs,
    color: _unifiedTheme.Theme.colors.text.secondary
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,