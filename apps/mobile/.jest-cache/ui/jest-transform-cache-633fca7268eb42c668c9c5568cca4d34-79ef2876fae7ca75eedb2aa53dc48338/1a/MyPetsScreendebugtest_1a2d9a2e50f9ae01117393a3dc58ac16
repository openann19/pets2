7d2540f02b54babd780ba74c716c0c22
"use strict";

_getJestObj().mock("../../services/api", function () {
  return {
    matchesAPI: {
      getMyPets: jest.fn(function () {
        return Promise.resolve({
          data: []
        });
      }),
      deletePet: jest.fn(function () {
        return Promise.resolve();
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _nativeStack = require("@react-navigation/native-stack");
var _logger = require("../../services/logger");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(require("react-native").Alert, "alert");
var Stack = (0, _nativeStack.createNativeStackNavigator)();
describe("MyPetsScreen Debug", function () {
  it("should render without crashing", function () {
    var MyPetsScreen = require("../MyPetsScreen").default;
    expect(function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: (0, _jsxRuntime.jsx)(Stack.Navigator, {
          children: (0, _jsxRuntime.jsx)(Stack.Screen, {
            name: "MyPets",
            component: MyPetsScreen,
            options: {
              headerShown: false
            }
          })
        })
      }));
    }).not.toThrow();
  });
  it("should render with mock data", (0, _asyncToGenerator2.default)(function* () {
    var _require = require("../../services/api"),
      matchesAPI = _require.matchesAPI;
    matchesAPI.getMyPets.mockResolvedValue({
      data: [{
        _id: "1",
        name: "Buddy",
        species: "dog",
        breed: "Golden Retriever",
        age: 3,
        gender: "male",
        size: "large",
        photos: [{
          url: "https://via.placeholder.com/200",
          isPrimary: true
        }],
        intent: "playdate",
        analytics: {
          views: 45,
          likes: 12,
          matches: 3,
          messages: 0
        },
        isActive: true,
        isVerified: true,
        status: "active",
        listedAt: "2024-01-01T00:00:00.000Z",
        createdAt: "2024-01-01T00:00:00.000Z",
        updatedAt: "2024-01-01T00:00:00.000Z",
        owner: "owner1",
        personalityTags: [],
        availability: {
          isAvailable: true
        },
        healthInfo: {
          vaccinated: true,
          spayedNeutered: true,
          microchipped: true
        },
        location: {
          type: "Point",
          coordinates: [0, 0]
        },
        featured: {
          isFeatured: false,
          boostCount: 0
        }
      }]
    });
    var MyPetsScreen = require("../MyPetsScreen").default;
    try {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
          children: (0, _jsxRuntime.jsx)(Stack.Navigator, {
            children: (0, _jsxRuntime.jsx)(Stack.Screen, {
              name: "MyPets",
              component: MyPetsScreen,
              options: {
                headerShown: false
              }
            })
          })
        })),
        getByText = _render.getByText,
        debug = _render.debug;
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      debug();
      expect(getByText("My Pets")).toBeTruthy();
    } catch (error) {
      _logger.logger.error("Error rendering component:", {
        error: error
      });
      throw error;
    }
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,