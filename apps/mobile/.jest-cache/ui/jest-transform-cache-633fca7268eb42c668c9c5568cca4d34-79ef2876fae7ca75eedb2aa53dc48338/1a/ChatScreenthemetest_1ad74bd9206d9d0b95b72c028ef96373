d3cd768a3557324e07a408b56f6451ac
"use strict";

_getJestObj().mock("../../components/calling/CallManager", function () {
  return {
    useCallManager: function useCallManager() {
      return {
        startCall: jest.fn(),
        isCallActive: function isCallActive() {
          return false;
        }
      };
    }
  };
});
_getJestObj().mock("../../services/api", function () {
  return {
    chatAPI: {
      getMessages: jest.fn(function () {
        return Promise.resolve([]);
      }),
      sendMessage: jest.fn(function () {
        return Promise.resolve({
          _id: "test",
          content: "test"
        });
      }),
      markAsRead: jest.fn(function () {
        return Promise.resolve();
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _Provider = require("../../theme/Provider");
var _ChatScreen = _interopRequireDefault(require("../ChatScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockRoute = {
  params: {
    matchId: "test-match-id",
    petName: "Buddy"
  }
};
var mockNavigation = {
  goBack: jest.fn(),
  navigate: jest.fn()
};
describe("ChatScreen with Theme", function () {
  it("renders without crashing with theme provider", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Provider.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ChatScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByText = _render.getByText;
    expect(getByText("Buddy")).toBeTruthy();
  });
  it("applies theme colors correctly", function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Provider.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(_ChatScreen.default, {
          navigation: mockNavigation,
          route: mockRoute
        })
      })),
      getByTestId = _render2.getByTestId;
    expect(true).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VDYWxsTWFuYWdlciIsInN0YXJ0Q2FsbCIsImplc3QiLCJmbiIsImlzQ2FsbEFjdGl2ZSIsImNoYXRBUEkiLCJnZXRNZXNzYWdlcyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2VuZE1lc3NhZ2UiLCJfaWQiLCJjb250ZW50IiwibWFya0FzUmVhZCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0IiwiX1Byb3ZpZGVyIiwiX0NoYXRTY3JlZW4iLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwibW9ja1JvdXRlIiwicGFyYW1zIiwibWF0Y2hJZCIsInBldE5hbWUiLCJtb2NrTmF2aWdhdGlvbiIsImdvQmFjayIsIm5hdmlnYXRlIiwiZGVzY3JpYmUiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJUaGVtZVByb3ZpZGVyIiwiY2hpbGRyZW4iLCJkZWZhdWx0IiwibmF2aWdhdGlvbiIsInJvdXRlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiZ2V0QnlUZXN0SWQiLCJ0b0JlIl0sInNvdXJjZXMiOlsiQ2hhdFNjcmVlbi50aGVtZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gXCIuLi8uLi90aGVtZS9Qcm92aWRlclwiO1xuaW1wb3J0IENoYXRTY3JlZW4gZnJvbSBcIi4uL0NoYXRTY3JlZW5cIjtcblxuLy8gTW9jayB0aGUgcm91dGUgcGFyYW1zXG5jb25zdCBtb2NrUm91dGUgPSB7XG4gIHBhcmFtczoge1xuICAgIG1hdGNoSWQ6IFwidGVzdC1tYXRjaC1pZFwiLFxuICAgIHBldE5hbWU6IFwiQnVkZHlcIixcbiAgfSxcbn07XG5cbmNvbnN0IG1vY2tOYXZpZ2F0aW9uID0ge1xuICBnb0JhY2s6IGplc3QuZm4oKSxcbiAgbmF2aWdhdGU6IGplc3QuZm4oKSxcbn07XG5cbi8vIE1vY2sgdGhlIGNhbGxpbmcgY29tcG9uZW50c1xuamVzdC5tb2NrKFwiLi4vLi4vY29tcG9uZW50cy9jYWxsaW5nL0NhbGxNYW5hZ2VyXCIsICgpID0+ICh7XG4gIHVzZUNhbGxNYW5hZ2VyOiAoKSA9PiAoe1xuICAgIHN0YXJ0Q2FsbDogamVzdC5mbigpLFxuICAgIGlzQ2FsbEFjdGl2ZTogKCkgPT4gZmFsc2UsXG4gIH0pLFxufSkpO1xuXG4vLyBNb2NrIHRoZSBjaGF0IEFQSVxuamVzdC5tb2NrKFwiLi4vLi4vc2VydmljZXMvYXBpXCIsICgpID0+ICh7XG4gIGNoYXRBUEk6IHtcbiAgICBnZXRNZXNzYWdlczogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pKSxcbiAgICBzZW5kTWVzc2FnZTogamVzdC5mbigoKSA9PlxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHsgX2lkOiBcInRlc3RcIiwgY29udGVudDogXCJ0ZXN0XCIgfSksXG4gICAgKSxcbiAgICBtYXJrQXNSZWFkOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcbiAgfSxcbn0pKTtcblxuZGVzY3JpYmUoXCJDaGF0U2NyZWVuIHdpdGggVGhlbWVcIiwgKCkgPT4ge1xuICBpdChcInJlbmRlcnMgd2l0aG91dCBjcmFzaGluZyB3aXRoIHRoZW1lIHByb3ZpZGVyXCIsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICAgIDxDaGF0U2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSByb3V0ZT17bW9ja1JvdXRlfSAvPlxuICAgICAgPC9UaGVtZVByb3ZpZGVyPixcbiAgICApO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dChcIkJ1ZGR5XCIpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KFwiYXBwbGllcyB0aGVtZSBjb2xvcnMgY29ycmVjdGx5XCIsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8VGhlbWVQcm92aWRlcj5cbiAgICAgICAgPENoYXRTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IHJvdXRlPXttb2NrUm91dGV9IC8+XG4gICAgICA8L1RoZW1lUHJvdmlkZXI+LFxuICAgICk7XG5cbiAgICAvLyBUaGUgY29tcG9uZW50IHNob3VsZCByZW5kZXIgd2l0aG91dCB0aHJvd2luZyBlcnJvcnNcbiAgICAvLyBUaGlzIHRlc3RzIHRoYXQgdGhlbWUgY29sb3JzIGFyZSBwcm9wZXJseSBhcHBsaWVkXG4gICAgZXhwZWN0KHRydWUpLnRvQmUodHJ1ZSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBb0JBQSxXQUFBLEdBQUtDLElBQUkseUNBQXlDO0VBQUEsT0FBTztJQUN2REMsY0FBYyxFQUFFLFNBQWhCQSxjQUFjQSxDQUFBO01BQUEsT0FBUztRQUNyQkMsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCQyxZQUFZLEVBQUUsU0FBZEEsWUFBWUEsQ0FBQTtVQUFBLE9BQVEsS0FBSztRQUFBO01BQzNCLENBQUM7SUFBQTtFQUNILENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSE4sV0FBQSxHQUFLQyxJQUFJLHVCQUF1QjtFQUFBLE9BQU87SUFDckNNLE9BQU8sRUFBRTtNQUNQQyxXQUFXLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1FBQUEsT0FBTUksT0FBTyxDQUFDQyxPQUFPLENBQUMsRUFBRSxDQUFDO01BQUEsRUFBQztNQUMvQ0MsV0FBVyxFQUFFUCxJQUFJLENBQUNDLEVBQUUsQ0FBQztRQUFBLE9BQ25CSSxPQUFPLENBQUNDLE9BQU8sQ0FBQztVQUFFRSxHQUFHLEVBQUUsTUFBTTtVQUFFQyxPQUFPLEVBQUU7UUFBTyxDQUFDLENBQUM7TUFBQSxDQUNuRCxDQUFDO01BQ0RDLFVBQVUsRUFBRVYsSUFBSSxDQUFDQyxFQUFFLENBQUM7UUFBQSxPQUFNSSxPQUFPLENBQUNDLE9BQU8sQ0FBQyxDQUFDO01BQUE7SUFDN0M7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQUssc0JBQUEsR0FBQUMsT0FBQTtBQXBDSixJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRyxTQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxXQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBdUMsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQUEsU0FBQWhCLFlBQUE7RUFBQSxJQUFBc0IsUUFBQSxHQUFBTixPQUFBO0lBQUFaLElBQUEsR0FBQWtCLFFBQUEsQ0FBQWxCLElBQUE7RUFBQUosV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUksSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBR3ZDLElBQU1tQixTQUFTLEdBQUc7RUFDaEJDLE1BQU0sRUFBRTtJQUNOQyxPQUFPLEVBQUUsZUFBZTtJQUN4QkMsT0FBTyxFQUFFO0VBQ1g7QUFDRixDQUFDO0FBRUQsSUFBTUMsY0FBYyxHQUFHO0VBQ3JCQyxNQUFNLEVBQUV4QixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2pCd0IsUUFBUSxFQUFFekIsSUFBSSxDQUFDQyxFQUFFLENBQUM7QUFDcEIsQ0FBQztBQXFCRHlCLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxZQUFNO0VBQ3RDQyxFQUFFLENBQUMsOENBQThDLEVBQUUsWUFBTTtJQUN2RCxJQUFBQyxPQUFBLEdBQXNCLElBQUFDLG1CQUFNLEVBQzFCLElBQUFaLFdBQUEsQ0FBQWEsR0FBQSxFQUFDZixTQUFBLENBQUFnQixhQUFhO1FBQUFDLFFBQUEsRUFDWixJQUFBZixXQUFBLENBQUFhLEdBQUEsRUFBQ2QsV0FBQSxDQUFBaUIsT0FBVTtVQUFDQyxVQUFVLEVBQUVYLGNBQWU7VUFBQ1ksS0FBSyxFQUFFaEI7UUFBVSxDQUFFO01BQUMsQ0FDL0MsQ0FDakIsQ0FBQztNQUpPaUIsU0FBUyxHQUFBUixPQUFBLENBQVRRLFNBQVM7SUFNakJDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0VBQ3pDLENBQUMsQ0FBQztFQUVGWCxFQUFFLENBQUMsZ0NBQWdDLEVBQUUsWUFBTTtJQUN6QyxJQUFBWSxRQUFBLEdBQXdCLElBQUFWLG1CQUFNLEVBQzVCLElBQUFaLFdBQUEsQ0FBQWEsR0FBQSxFQUFDZixTQUFBLENBQUFnQixhQUFhO1FBQUFDLFFBQUEsRUFDWixJQUFBZixXQUFBLENBQUFhLEdBQUEsRUFBQ2QsV0FBQSxDQUFBaUIsT0FBVTtVQUFDQyxVQUFVLEVBQUVYLGNBQWU7VUFBQ1ksS0FBSyxFQUFFaEI7UUFBVSxDQUFFO01BQUMsQ0FDL0MsQ0FDakIsQ0FBQztNQUpPcUIsV0FBVyxHQUFBRCxRQUFBLENBQVhDLFdBQVc7SUFRbkJILE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQztFQUN6QixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=