{"version":3,"names":["_interopRequireDefault","require","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_wrapNativeSuper2","_asyncToGenerator2","_defineProperty2","_classCallCheck2","_createClass2","_callSuper","t","o","e","default","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","ownKeys","r","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","CircuitBreakerOpenError","CircuitBreaker","CircuitState","logger_1","DEFAULT_CONFIG","failureThreshold","successThreshold","timeout","resetTimeout","monitoringPeriod","config","undefined","state","CLOSED","failures","successes","stateChangedAt","Date","now","totalRequests","startHealthCheck","key","_execute","fn","OPEN","transitionTo","HALF_OPEN","result","onSuccess","error","onFailure","execute","_x","isHealthy","getMetrics","lastFailureTime","lastSuccessTime","reset","logger","info","newState","oldState","from","to","_this","healthCheckInterval","healthCheckEndpoint","healthCheckTimer","setInterval","performHealthCheck","_performHealthCheck","response","fetch","method","signal","AbortSignal","ok","debug","destroy","clearInterval","_Error","message","_this2","name","Error"],"sources":["CircuitBreaker.js"],"sourcesContent":["\"use strict\";\n/**\n * Circuit Breaker Pattern Implementation\n * Prevents cascading failures by stopping requests when service is down\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CircuitBreakerOpenError = exports.CircuitBreaker = exports.CircuitState = void 0;\nconst logger_1 = require(\"../utils/logger\");\nvar CircuitState;\n(function (CircuitState) {\n    CircuitState[\"CLOSED\"] = \"CLOSED\";\n    CircuitState[\"OPEN\"] = \"OPEN\";\n    CircuitState[\"HALF_OPEN\"] = \"HALF_OPEN\"; // Testing if service recovered\n})(CircuitState || (exports.CircuitState = CircuitState = {}));\nconst DEFAULT_CONFIG = {\n    failureThreshold: 5,\n    successThreshold: 2,\n    timeout: 60000,\n    resetTimeout: 60000,\n    monitoringPeriod: 60000,\n};\nclass CircuitBreaker {\n    config;\n    state = CircuitState.CLOSED;\n    failures = 0;\n    successes = 0;\n    lastFailureTime;\n    lastSuccessTime;\n    stateChangedAt = Date.now();\n    totalRequests = 0;\n    healthCheckTimer;\n    constructor(config = {}) {\n        this.config = { ...DEFAULT_CONFIG, ...config };\n        this.startHealthCheck();\n    }\n    /**\n     * Execute a request through the circuit breaker\n     */\n    async execute(fn) {\n        this.totalRequests++;\n        // Check if circuit is open\n        if (this.state === CircuitState.OPEN) {\n            if (Date.now() - this.stateChangedAt >= this.config.resetTimeout) {\n                this.transitionTo(CircuitState.HALF_OPEN);\n            }\n            else {\n                throw new CircuitBreakerOpenError('Circuit breaker is OPEN');\n            }\n        }\n        try {\n            const result = await fn();\n            // Record success\n            this.onSuccess();\n            return result;\n        }\n        catch (error) {\n            // Record failure\n            this.onFailure();\n            throw error;\n        }\n    }\n    /**\n     * Check if circuit is healthy\n     */\n    isHealthy() {\n        return this.state === CircuitState.CLOSED;\n    }\n    /**\n     * Get current metrics\n     */\n    getMetrics() {\n        return {\n            failures: this.failures,\n            successes: this.successes,\n            totalRequests: this.totalRequests,\n            lastFailureTime: this.lastFailureTime,\n            lastSuccessTime: this.lastSuccessTime,\n            state: this.state,\n            stateChangedAt: this.stateChangedAt,\n        };\n    }\n    /**\n     * Manually reset circuit breaker\n     */\n    reset() {\n        this.state = CircuitState.CLOSED;\n        this.failures = 0;\n        this.successes = 0;\n        this.stateChangedAt = Date.now();\n        logger_1.logger.info('Circuit breaker manually reset');\n    }\n    /**\n     * Handle successful request\n     */\n    onSuccess() {\n        this.lastSuccessTime = Date.now();\n        if (this.state === CircuitState.HALF_OPEN) {\n            this.successes++;\n            if (this.successes >= this.config.successThreshold) {\n                this.transitionTo(CircuitState.CLOSED);\n            }\n        }\n        else if (this.state === CircuitState.CLOSED) {\n            // Reset failure count after monitoring period\n            if (this.lastFailureTime &&\n                Date.now() - this.lastFailureTime > this.config.monitoringPeriod) {\n                this.failures = 0;\n            }\n        }\n    }\n    /**\n     * Handle failed request\n     */\n    onFailure() {\n        this.lastFailureTime = Date.now();\n        if (this.state === CircuitState.HALF_OPEN) {\n            // Single failure in half-open state opens circuit\n            this.transitionTo(CircuitState.OPEN);\n        }\n        else if (this.state === CircuitState.CLOSED) {\n            this.failures++;\n            if (this.failures >= this.config.failureThreshold) {\n                this.transitionTo(CircuitState.OPEN);\n            }\n        }\n    }\n    /**\n     * Transition to a new state\n     */\n    transitionTo(newState) {\n        const oldState = this.state;\n        this.state = newState;\n        this.stateChangedAt = Date.now();\n        logger_1.logger.info('Circuit breaker state transition', {\n            from: oldState,\n            to: newState,\n            failures: this.failures,\n            successes: this.successes,\n        });\n        // Reset counters on state change\n        if (newState === CircuitState.CLOSED) {\n            this.failures = 0;\n            this.successes = 0;\n        }\n        else if (newState === CircuitState.HALF_OPEN) {\n            this.successes = 0;\n        }\n    }\n    /**\n     * Start periodic health checks\n     */\n    startHealthCheck() {\n        if (!this.config.healthCheckInterval || !this.config.healthCheckEndpoint) {\n            return;\n        }\n        this.healthCheckTimer = setInterval(() => {\n            if (this.state === CircuitState.OPEN) {\n                this.performHealthCheck();\n            }\n        }, this.config.healthCheckInterval);\n    }\n    /**\n     * Perform health check\n     */\n    async performHealthCheck() {\n        if (!this.config.healthCheckEndpoint) {\n            return;\n        }\n        try {\n            const response = await fetch(this.config.healthCheckEndpoint, {\n                method: 'GET',\n                signal: AbortSignal.timeout(5000),\n            });\n            if (response.ok) {\n                // Service is healthy, transition to half-open\n                this.transitionTo(CircuitState.HALF_OPEN);\n            }\n        }\n        catch (error) {\n            logger_1.logger.debug('Health check failed', { error });\n        }\n    }\n    /**\n     * Cleanup resources\n     */\n    destroy() {\n        if (this.healthCheckTimer) {\n            clearInterval(this.healthCheckTimer);\n        }\n    }\n}\nexports.CircuitBreaker = CircuitBreaker;\nclass CircuitBreakerOpenError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'CircuitBreakerOpenError';\n    }\n}\nexports.CircuitBreakerOpenError = CircuitBreakerOpenError;\n"],"mappings":"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","ignoreList":[]}