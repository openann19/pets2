9fd7003387e488c8b2d9025f78c331a6
"use strict";

_getJestObj().mock("../../hooks/useMatchesData");
_getJestObj().mock("../../hooks/navigation/useScrollOffsetTracker");
_getJestObj().mock("../../hooks/navigation/useTabReselectRefresh");
_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn()
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MatchesScreen = _interopRequireDefault(require("../MatchesScreen"));
var _useMatchesData = require("../../hooks/useMatchesData");
var _useScrollOffsetTracker = require("../../hooks/navigation/useScrollOffsetTracker");
var _useTabReselectRefresh = require("../../hooks/navigation/useTabReselectRefresh");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("MatchesScreen Tab Reselect Integration", function () {
  var mockMatches = [{
    _id: "1",
    petName: "Bella",
    petPhoto: "https://example.com/bella.jpg"
  }];
  beforeEach(function () {
    jest.clearAllMocks();
    _useMatchesData.useMatchesData.mockReturnValue({
      matches: mockMatches,
      likedYou: [],
      selectedTab: "matches",
      refreshing: false,
      isLoading: false,
      initialOffset: 0,
      listRef: {
        current: null
      },
      onRefresh: jest.fn(),
      setSelectedTab: jest.fn(),
      handleScroll: jest.fn()
    });
    _useScrollOffsetTracker.useScrollOffsetTracker.mockReturnValue({
      onScroll: jest.fn(),
      getOffset: jest.fn(function () {
        return 0;
      })
    });
    _useTabReselectRefresh.useTabReselectRefresh.mockReturnValue(undefined);
  });
  it("should initialize with all required hooks", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
      navigation: {
        navigate: jest.fn()
      }
    }));
    expect(_useMatchesData.useMatchesData).toHaveBeenCalled();
    expect(_useScrollOffsetTracker.useScrollOffsetTracker).toHaveBeenCalled();
    expect(_useTabReselectRefresh.useTabReselectRefresh).toHaveBeenCalled();
  });
  it("should configure useTabReselectRefresh correctly", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
      navigation: {
        navigate: jest.fn()
      }
    }));
    var useTabReselectRefreshCall = _useTabReselectRefresh.useTabReselectRefresh.mock.calls[0][0];
    expect(useTabReselectRefreshCall).toMatchObject({
      topThreshold: 120,
      cooldownMs: 700
    });
    expect(useTabReselectRefreshCall.listRef).toBeDefined();
    expect(useTabReselectRefreshCall.onRefresh).toBeDefined();
    expect(useTabReselectRefreshCall.getOffset).toBeDefined();
  });
  it("should pass correct props to FlatList", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: {
          navigate: jest.fn()
        }
      })),
      UNSAFE_getByType = _render.UNSAFE_getByType;
    expect(UNSAFE_getByType).toBeDefined();
  });
  it("should handle scroll events", function () {
    var mockOnScroll = jest.fn();
    _useScrollOffsetTracker.useScrollOffsetTracker.mockReturnValue({
      onScroll: mockOnScroll,
      getOffset: jest.fn(function () {
        return 150;
      })
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
      navigation: {
        navigate: jest.fn()
      }
    }));
    expect(mockOnScroll).toBeDefined();
  });
  it("should trigger refresh when tab is reselected near top", (0, _asyncToGenerator2.default)(function* () {
    var mockOnRefresh = jest.fn();
    _useMatchesData.useMatchesData.mockReturnValue({
      matches: mockMatches,
      likedYou: [],
      selectedTab: "matches",
      refreshing: false,
      isLoading: false,
      initialOffset: 0,
      listRef: {
        current: null
      },
      onRefresh: mockOnRefresh,
      setSelectedTab: jest.fn(),
      handleScroll: jest.fn()
    });
    _useScrollOffsetTracker.useScrollOffsetTracker.mockReturnValue({
      onScroll: jest.fn(),
      getOffset: jest.fn(function () {
        return 50;
      })
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
      navigation: {
        navigate: jest.fn()
      }
    }));
    var useTabReselectRefreshCall = _useTabReselectRefresh.useTabReselectRefresh.mock.calls[0][0];
    (0, _reactNative.act)(function () {
      useTabReselectRefreshCall.onRefresh();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(mockOnRefresh).toHaveBeenCalled();
    });
  }));
  it("should pass correct theme colors to RefreshControl", function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
      navigation: {
        navigate: jest.fn()
      }
    }));
    expect(_useMatchesData.useMatchesData).toHaveBeenCalled();
  });
  it("should handle tab switching", function () {
    var mockSetSelectedTab = jest.fn();
    _useMatchesData.useMatchesData.mockReturnValue({
      matches: mockMatches,
      likedYou: [],
      selectedTab: "matches",
      refreshing: false,
      isLoading: false,
      initialOffset: 0,
      listRef: {
        current: null
      },
      onRefresh: jest.fn(),
      setSelectedTab: mockSetSelectedTab,
      handleScroll: jest.fn()
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
      navigation: {
        navigate: jest.fn()
      }
    }));
    expect(mockSetSelectedTab).toBeDefined();
  });
  it("should track scroll position for reselect logic", function () {
    var mockGetOffset = jest.fn(function () {
      return 150;
    });
    _useScrollOffsetTracker.useScrollOffsetTracker.mockReturnValue({
      onScroll: jest.fn(),
      getOffset: mockGetOffset
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
      navigation: {
        navigate: jest.fn()
      }
    }));
    var useTabReselectRefreshCall = _useTabReselectRefresh.useTabReselectRefresh.mock.calls[0][0];
    expect(useTabReselectRefreshCall.getOffset()).toBe(150);
  });
  it("should handle empty matches list", function () {
    _useMatchesData.useMatchesData.mockReturnValue({
      matches: [],
      likedYou: [],
      selectedTab: "matches",
      refreshing: false,
      isLoading: false,
      initialOffset: 0,
      listRef: {
        current: null
      },
      onRefresh: jest.fn(),
      setSelectedTab: jest.fn(),
      handleScroll: jest.fn()
    });
    expect(function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
        navigation: {
          navigate: jest.fn()
        }
      }));
    }).not.toThrow();
  });
  it("should persist scroll position", function () {
    _useMatchesData.useMatchesData.mockReturnValue({
      matches: mockMatches,
      likedYou: [],
      selectedTab: "matches",
      refreshing: false,
      isLoading: false,
      initialOffset: 200,
      listRef: {
        current: {
          scrollToOffset: jest.fn()
        }
      },
      onRefresh: jest.fn(),
      setSelectedTab: jest.fn(),
      handleScroll: jest.fn()
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MatchesScreen.default, {
      navigation: {
        navigate: jest.fn()
      }
    }));
    expect(_useMatchesData.useMatchesData).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,