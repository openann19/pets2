cf000b453dc84737e98b019272c4f5ff
"use strict";

_getJestObj().mock("@react-navigation/native", function () {
  var actual = jest.requireActual("@react-navigation/native");
  return _objectSpread(_objectSpread({}, actual), {}, {
    useNavigation: function useNavigation() {
      return {
        navigate: mockNavigate
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockNavigate = void 0;
exports.renderWithProviders = renderWithProviders;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = exports.mockNavigate = jest.fn();
function Providers(_ref) {
  var children = _ref.children;
  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: children
  });
}
function renderWithProviders(ui, options) {
  return (0, _reactNative.render)(ui, _objectSpread({
    wrapper: Providers
  }, options));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJhY3R1YWwiLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIl9vYmplY3RTcHJlYWQiLCJ1c2VOYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJtb2NrTmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVuZGVyV2l0aFByb3ZpZGVycyIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfbmF0aXZlIiwiX2pzeFJ1bnRpbWUiLCJvd25LZXlzIiwiZSIsInIiLCJ0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9yZXF1aXJlIiwiZm4iLCJQcm92aWRlcnMiLCJfcmVmIiwiY2hpbGRyZW4iLCJqc3giLCJOYXZpZ2F0aW9uQ29udGFpbmVyIiwidWkiLCJvcHRpb25zIiwicmVuZGVyIiwid3JhcHBlciJdLCJzb3VyY2VzIjpbInRlc3QtdXRpbHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB0eXBlIFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZW5kZXIsIHR5cGUgUmVuZGVyT3B0aW9ucyB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkNvbnRhaW5lciB9IGZyb20gXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIjtcblxuZXhwb3J0IGNvbnN0IG1vY2tOYXZpZ2F0ZSA9IGplc3QuZm4oKTtcblxuamVzdC5tb2NrKFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlXCIsICgpID0+IHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIGplc3QucmVxdWlyZUFjdHVhbCBpcyBkZWZpbmVkIGJ5IGplc3RcbiAgY29uc3QgYWN0dWFsID0gamVzdC5yZXF1aXJlQWN0dWFsKFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlXCIpIGFzIHR5cGVvZiBpbXBvcnQoXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIik7XG4gIHJldHVybiB7XG4gICAgLi4uYWN0dWFsLFxuICAgIHVzZU5hdmlnYXRpb246ICgpID0+ICh7IG5hdmlnYXRlOiBtb2NrTmF2aWdhdGUgfSksXG4gIH07XG59KTtcblxuZnVuY3Rpb24gUHJvdmlkZXJzKHsgY2hpbGRyZW4gfTogUHJvcHNXaXRoQ2hpbGRyZW48e30+KSB7XG4gIC8vIEtlZXAgcHJvdmlkZXJzIG1pbmltYWw7IE1hcFNjcmVlbiBhbHJlYWR5IHJlY2VpdmVzIG5hdmlnYXRpb24gcHJvcCBpbiB0ZXN0cyB3aGVyZSBuZWVkZWRcbiAgcmV0dXJuIDxOYXZpZ2F0aW9uQ29udGFpbmVyPntjaGlsZHJlbn08L05hdmlnYXRpb25Db250YWluZXI+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyV2l0aFByb3ZpZGVycyhcbiAgdWk6IFJlYWN0LlJlYWN0RWxlbWVudCxcbiAgb3B0aW9ucz86IE9taXQ8UmVuZGVyT3B0aW9ucywgXCJxdWVyaWVzXCI+XG4pIHtcbiAgcmV0dXJuIHJlbmRlcih1aSwgeyB3cmFwcGVyOiBQcm92aWRlcnMsIC4uLm9wdGlvbnMgfSk7XG59XG5cbiJdLCJtYXBwaW5ncyI6Ijs7QUFNQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUUxQyxJQUFNQyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUE4QztFQUMxRyxPQUFBQyxhQUFBLENBQUFBLGFBQUEsS0FDS0gsTUFBTTtJ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