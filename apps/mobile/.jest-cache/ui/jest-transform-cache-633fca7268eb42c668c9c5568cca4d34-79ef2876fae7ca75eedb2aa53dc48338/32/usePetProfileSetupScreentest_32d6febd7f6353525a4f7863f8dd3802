c086bf0a85179df6e839a4a50dbe625b
"use strict";

_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: function useNavigation() {
      return mockNavigation;
    },
    useRoute: function useRoute() {
      return mockRoute;
    }
  };
});
_getJestObj().mock("../../domains/onboarding/usePetProfileSetup", function () {
  return {
    usePetProfileSetup: function usePetProfileSetup() {
      return mockDomainHook;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("@testing-library/react-native");
var _usePetProfileSetupScreen = require("../usePetProfileSetupScreen");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockGoBack = jest.fn();
var mockNavigation = {
  navigate: mockNavigate,
  goBack: mockGoBack
};
var mockRoute = {
  params: {
    userIntent: "find_playmate"
  }
};
var mockUpdateProfile = jest.fn();
var mockSetCurrentStep = jest.fn();
var mockUploadPhoto = jest.fn();
var mockRemovePhoto = jest.fn();
var mockValidateCurrentStep = jest.fn();
var mockSubmitProfile = jest.fn();
var mockDomainHook = {
  profile: {
    name: "",
    breed: "",
    age: "",
    bio: "",
    photos: []
  },
  state: {
    currentStep: 0,
    isSubmitting: false,
    error: null
  },
  updateProfile: mockUpdateProfile,
  setCurrentStep: mockSetCurrentStep,
  uploadPhoto: mockUploadPhoto,
  removePhoto: mockRemovePhoto,
  validateCurrentStep: mockValidateCurrentStep,
  canProceed: false,
  progressPercentage: 0,
  submitProfile: mockSubmitProfile
};
describe("usePetProfileSetupScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockValidateCurrentStep.mockReturnValue(true);
  });
  it("should initialize with data from domain hook", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook.result;
    expect(result.current.profile).toEqual(mockDomainHook.profile);
    expect(result.current.state).toEqual(mockDomainHook.state);
    expect(result.current.canProceed).toBe(false);
    expect(result.current.progressPercentage).toBe(0);
  });
  it("should expose userIntent from route params", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook2.result;
    expect(result.current.userIntent).toBe("find_playmate");
  });
  it("should provide all navigation handlers", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook3.result;
    expect(typeof result.current.handleNext).toBe("function");
    expect(typeof result.current.handlePrevious).toBe("function");
    expect(typeof result.current.handleComplete).toBe("function");
    expect(typeof result.current.handleGoBack).toBe("function");
  });
  it("should handle next step when can proceed", function () {
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      canProceed: true,
      state: {
        currentStep: 0,
        isSubmitting: false,
        error: null
      }
    }));
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.handleNext();
    });
    expect(mockSetCurrentStep).toHaveBeenCalledWith(1);
  });
  it("should not proceed to next step when cannot proceed", function () {
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      canProceed: false,
      state: {
        currentStep: 0,
        isSubmitting: false,
        error: null
      }
    }));
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.handleNext();
    });
    expect(mockSetCurrentStep).not.toHaveBeenCalled();
  });
  it("should not exceed max step (step 2)", function () {
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      canProceed: true,
      state: {
        currentStep: 2,
        isSubmitting: false,
        error: null
      }
    }));
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.handleNext();
    });
    expect(mockSetCurrentStep).not.toHaveBeenCalled();
  });
  it("should handle previous step", function () {
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      state: {
        currentStep: 1,
        isSubmitting: false,
        error: null
      }
    }));
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.handlePrevious();
    });
    expect(mockSetCurrentStep).toHaveBeenCalledWith(0);
  });
  it("should not go below step 0", function () {
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      state: {
        currentStep: 0,
        isSubmitting: false,
        error: null
      }
    }));
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook8.result;
    (0, _reactNative.act)(function () {
      result.current.handlePrevious();
    });
    expect(mockSetCurrentStep).not.toHaveBeenCalled();
  });
  it("should handle complete and navigate to preferences", (0, _asyncToGenerator2.default)(function* () {
    mockSubmitProfile.mockResolvedValue(undefined);
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      canProceed: true
    }));
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleComplete();
    }));
    expect(mockSubmitProfile).toHaveBeenCalled();
    expect(mockNavigate).toHaveBeenCalledWith("PreferencesSetup", {
      userIntent: "find_playmate"
    });
  }));
  it("should not complete when cannot proceed", (0, _asyncToGenerator2.default)(function* () {
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      canProceed: false
    }));
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleComplete();
    }));
    expect(mockSubmitProfile).not.toHaveBeenCalled();
    expect(mockNavigate).not.toHaveBeenCalled();
  }));
  it("should handle error during completion", (0, _asyncToGenerator2.default)(function* () {
    var error = new Error("Submission failed");
    mockSubmitProfile.mockRejectedValue(error);
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      canProceed: true
    }));
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleComplete();
    }));
    expect(mockSubmitProfile).toHaveBeenCalled();
    expect(mockNavigate).not.toHaveBeenCalled();
  }));
  it("should handle go back navigation", function () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook10.result;
    (0, _reactNative.act)(function () {
      result.current.handleGoBack();
    });
    expect(mockGoBack).toHaveBeenCalled();
  });
  it("should expose domain hook methods", function () {
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook11.result;
    expect(result.current.updateProfile).toBe(mockUpdateProfile);
    expect(result.current.setCurrentStep).toBe(mockSetCurrentStep);
    expect(result.current.uploadPhoto).toBe(mockUploadPhoto);
    expect(result.current.removePhoto).toBe(mockRemovePhoto);
    expect(result.current.validateCurrentStep).toBe(mockValidateCurrentStep);
  });
  it("should track progress percentage from domain hook", function () {
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      progressPercentage: 66
    }));
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook12.result;
    expect(result.current.progressPercentage).toBe(66);
  });
  it("should expose profile data from domain hook", function () {
    var mockProfile = {
      name: "Buddy",
      breed: "Golden Retriever",
      age: "3",
      bio: "Friendly dog",
      photos: ["photo1.jpg", "photo2.jpg"]
    };
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      profile: mockProfile
    }));
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook13.result;
    expect(result.current.profile).toEqual(mockProfile);
  });
  it("should expose state from domain hook", function () {
    var mockState = {
      currentStep: 2,
      isSubmitting: true,
      error: "Validation error"
    };
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      state: mockState
    }));
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook14.result;
    expect(result.current.state).toEqual(mockState);
  });
  it("should handle multi-step navigation flow", function () {
    var _renderHook15 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook15.result,
      rerender = _renderHook15.rerender;
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      canProceed: true,
      state: {
        currentStep: 0,
        isSubmitting: false,
        error: null
      }
    }));
    rerender();
    (0, _reactNative.act)(function () {
      result.current.handleNext();
    });
    expect(mockSetCurrentStep).toHaveBeenCalledWith(1);
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      canProceed: true,
      state: {
        currentStep: 1,
        isSubmitting: false,
        error: null
      }
    }));
    rerender();
    (0, _reactNative.act)(function () {
      result.current.handleNext();
    });
    expect(mockSetCurrentStep).toHaveBeenCalledWith(2);
  });
  it("should pass userIntent to PreferencesSetup on complete", (0, _asyncToGenerator2.default)(function* () {
    mockSubmitProfile.mockResolvedValue(undefined);
    var customRoute = {
      params: {
        userIntent: "find_companion"
      }
    };
    jest.mocked(require("@react-navigation/native").useRoute).mockReturnValue(customRoute);
    jest.mocked(require("../../domains/onboarding/usePetProfileSetup").usePetProfileSetup).mockReturnValue(_objectSpread(_objectSpread({}, mockDomainHook), {}, {
      canProceed: true
    }));
    var _renderHook16 = (0, _reactNative.renderHook)(function () {
        return (0, _usePetProfileSetupScreen.usePetProfileSetupScreen)();
      }),
      result = _renderHook16.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleComplete();
    }));
    expect(mockNavigate).toHaveBeenCalledWith("PreferencesSetup", {
      userIntent: "find_companion"
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,