de03e2e23a3a7960f79176e88c8c7544
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _NativeActionSheetManager = _interopRequireDefault(require("./NativeActionSheetManager"));
var _excluded = ["tintColor", "cancelButtonTintColor", "destructiveButtonIndex"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var processColor = require("../StyleSheet/processColor").default;
var invariant = require('invariant');
var ActionSheetIOS = {
  showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof callback === 'function', 'Must provide a valid callback');
    invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
    var tintColor = options.tintColor,
      cancelButtonTintColor = options.cancelButtonTintColor,
      destructiveButtonIndex = options.destructiveButtonIndex,
      remainingOptions = (0, _objectWithoutProperties2.default)(options, _excluded);
    var destructiveButtonIndices = null;
    if (Array.isArray(destructiveButtonIndex)) {
      destructiveButtonIndices = destructiveButtonIndex;
    } else if (typeof destructiveButtonIndex === 'number') {
      destructiveButtonIndices = [destructiveButtonIndex];
    }
    var processedTintColor = processColor(tintColor);
    var processedCancelButtonTintColor = processColor(cancelButtonTintColor);
    invariant(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');
    invariant(processedCancelButtonTintColor == null || typeof processedCancelButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor');
    _NativeActionSheetManager.default.showActionSheetWithOptions(_objectSpread(_objectSpread({}, remainingOptions), {}, {
      tintColor: processedTintColor,
      cancelButtonTintColor: processedCancelButtonTintColor,
      destructiveButtonIndices: destructiveButtonIndices
    }), callback);
  },
  showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
    invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
    invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
    _NativeActionSheetManager.default.showShareActionSheetWithOptions(_objectSpread(_objectSpread({}, options), {}, {
      tintColor: processColor(options.tintColor)
    }), failureCallback, successCallback);
  },
  dismissActionSheet: function dismissActionSheet() {
    invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
    if (typeof _NativeActionSheetManager.default.dismissActionSheet === 'function') {
      _NativeActionSheetManager.default.dismissActionSheet();
    }
  }
};
module.exports = ActionSheetIOS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,