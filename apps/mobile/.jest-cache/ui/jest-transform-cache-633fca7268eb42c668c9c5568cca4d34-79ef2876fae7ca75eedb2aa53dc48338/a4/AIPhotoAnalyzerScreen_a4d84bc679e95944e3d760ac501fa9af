7d2b18674e8c76626f24daf4578a4e19
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AIPhotoAnalyzerScreen;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _aiPhotoService = require("../services/aiPhotoService");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function AIPhotoAnalyzerScreen() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    result = _useState4[0],
    setResult = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    photoUri = _useState6[0],
    setPhotoUri = _useState6[1];
  var pickPhoto = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),
        status = _yield$ImagePicker$re.status;
      if (status !== "granted") {
        _reactNative.Alert.alert("Permission needed", "Please grant photo library access");
        return;
      }
      var result = yield ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        quality: 0.8
      });
      if (!result.canceled && result.assets[0]) {
        setPhotoUri(result.assets[0].uri);
        setResult(null);
      }
    });
    return function pickPhoto() {
      return _ref.apply(this, arguments);
    };
  }();
  var takePhoto = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      var _yield$ImagePicker$re2 = yield ImagePicker.requestCameraPermissionsAsync(),
        status = _yield$ImagePicker$re2.status;
      if (status !== "granted") {
        _reactNative.Alert.alert("Permission needed", "Please grant camera access");
        return;
      }
      var result = yield ImagePicker.launchCameraAsync({
        allowsEditing: true,
        quality: 0.8
      });
      if (!result.canceled && result.assets[0]) {
        setPhotoUri(result.assets[0].uri);
        setResult(null);
      }
    });
    return function takePhoto() {
      return _ref2.apply(this, arguments);
    };
  }();
  function onAnalyze() {
    return _onAnalyze.apply(this, arguments);
  }
  function _onAnalyze() {
    _onAnalyze = (0, _asyncToGenerator2.default)(function* () {
      if (!photoUri) return;
      setLoading(true);
      try {
        var r = yield (0, _aiPhotoService.analyzePhotoFromUri)(photoUri, "image/jpeg");
        setResult(r);
      } catch (error) {
        _reactNative.Alert.alert("Analysis Failed", error.message);
      } finally {
        setLoading(false);
      }
    });
    return _onAnalyze.apply(this, arguments);
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: "AI Photo Analyzer"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.subtitle,
        children: "Get insights on your pet's photos"
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.buttonGroup,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.button,
        onPress: pickPhoto,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.buttonText,
          children: "Pick from Library"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.button,
        onPress: takePhoto,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.buttonText,
          children: "Take Photo"
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: onAnalyze,
      disabled: !photoUri || loading,
      style: [styles.analyzeButton, (!photoUri || loading) && styles.disabled],
      testID: "btn-analyze",
      children: loading ? (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        color: "#fff"
      }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.analyzeButtonText,
        children: loading ? "Analyzing..." : "Analyze Photo"
      })
    }), result && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      testID: "analysis-result",
      style: styles.resultCard,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.resultTitle,
        children: "Analysis Results"
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.metricLabel,
          children: "Overall Score:"
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.metricValue,
          children: [result.overall, "/100"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.metricLabel,
          children: "Sharpness:"
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.metricValue,
          children: [(result.quality.sharpness * 100).toFixed(1), "%"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.metricLabel,
          children: "Exposure:"
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.metricValue,
          children: [(result.quality.exposure * 100).toFixed(1), "%"]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.metricRow,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.metricLabel,
          children: "Contrast:"
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.metricValue,
          children: [(result.quality.contrast * 100).toFixed(1), "%"]
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.sectionTitle,
        children: "Detected Breeds:"
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.breeds,
        children: result.breedCandidates.map(function (b) {
          return b.name;
        }).join(", ") || "No breed detected"
      }), result.suggestions.length > 0 && (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.sectionTitle,
          children: "Suggestions:"
        }), result.suggestions.map(function (s, idx) {
          return (0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.suggestion,
            children: ["\u2022 ", s]
          }, idx);
        })]
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f5f5f5",
    padding: 16
  },
  header: {
    marginBottom: 24
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 8
  },
  subtitle: {
    fontSize: 16,
    color: "#666"
  },
  buttonGroup: {
    flexDirection: "row",
    gap: 12,
    marginBottom: 16
  },
  button: {
    flex: 1,
    backgroundColor: "#007AFF",
    padding: 16,
    borderRadius: 12,
    alignItems: "center"
  },
  buttonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600"
  },
  analyzeButton: {
    backgroundColor: "#34C759",
    padding: 16,
    borderRadius: 12,
    alignItems: "center",
    marginBottom: 24
  },
  disabled: {
    backgroundColor: "#ccc"
  },
  analyzeButtonText: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "600"
  },
  resultCard: {
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 12,
    marginTop: 8
  },
  resultTitle: {
    fontSize: 22,
    fontWeight: "bold",
    marginBottom: 16,
    color: "#333"
  },
  metricRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 12,
    paddingBottom: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#eee"
  },
  metricLabel: {
    fontSize: 16,
    color: "#666"
  },
  metricValue: {
    fontSize: 16,
    fontWeight: "600",
    color: "#333"
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "600",
    marginTop: 16,
    marginBottom: 8,
    color: "#333"
  },
  breeds: {
    fontSize: 16,
    color: "#333",
    marginBottom: 16
  },
  suggestion: {
    fontSize: 14,
    color: "#666",
    marginTop: 4,
    lineHeight: 20
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,