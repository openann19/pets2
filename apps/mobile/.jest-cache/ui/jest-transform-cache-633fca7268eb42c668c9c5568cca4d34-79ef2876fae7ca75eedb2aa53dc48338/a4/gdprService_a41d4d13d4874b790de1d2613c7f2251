60b934f358b42ebbda33f37ef78468ac
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAccountStatus = exports.exportUserData = exports.downloadExport = exports.deleteAccount = exports.default = exports.cancelDeletion = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _api = require("./api");
var _core = require("@pawfectmatch/core");
var deleteAccount = exports.deleteAccount = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (data) {
    try {
      var response = yield (0, _api.request)('/api/users/delete-account', {
        method: 'DELETE',
        body: {
          password: data.password,
          reason: data.reason,
          feedback: data.feedback
        }
      });
      return response;
    } catch (error) {
      _core.logger.error('Delete account error:', error instanceof Error ? error : new Error(String(error)));
      var errorObj = error;
      var errorCode = (errorObj == null ? void 0 : errorObj.code) || 'SERVER_ERROR';
      var errorMessage = (errorObj == null ? void 0 : errorObj.message) || 'Failed to delete account';
      return {
        success: false,
        message: errorMessage,
        error: errorCode
      };
    }
  });
  return function deleteAccount(_x) {
    return _ref.apply(this, arguments);
  };
}();
var cancelDeletion = exports.cancelDeletion = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* () {
    try {
      var response = yield (0, _api.request)('/api/users/cancel-deletion', {
        method: 'POST'
      });
      return response;
    } catch (error) {
      _core.logger.error('Cancel deletion error:', error instanceof Error ? error : new Error(String(error)));
      var errorObj = error;
      var errorMessage = errorObj != null && errorObj.message || error instanceof Error ? error.message : 'Failed to cancel deletion';
      return {
        success: false,
        message: errorMessage
      };
    }
  });
  return function cancelDeletion() {
    return _ref2.apply(this, arguments);
  };
}();
var getAccountStatus = exports.getAccountStatus = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* () {
    try {
      var response = yield (0, _api.request)('/api/account/status', {
        method: 'GET'
      });
      return response;
    } catch (error) {
      _core.logger.error('Get account status error:', error instanceof Error ? error : new Error(String(error)));
      return {
        success: false,
        status: 'not-found'
      };
    }
  });
  return function getAccountStatus() {
    return _ref3.apply(this, arguments);
  };
}();
var exportUserData = exports.exportUserData = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* () {
    var dataRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    try {
      var response = yield (0, _api.request)('/api/users/request-export', {
        method: 'POST',
        body: {
          format: dataRequest.format || 'json',
          includeMessages: dataRequest.includeMessages !== false,
          includeMatches: dataRequest.includeMatches !== false,
          includeProfileData: dataRequest.includeProfileData !== false,
          includePreferences: dataRequest.includePreferences !== false
        }
      });
      return response;
    } catch (error) {
      _core.logger.error('Export user data error:', error instanceof Error ? error : new Error(String(error)));
      return {
        success: false,
        message: 'Failed to export data',
        error: 'SERVER_ERROR'
      };
    }
  });
  return function exportUserData() {
    return _ref4.apply(this, arguments);
  };
}();
var downloadExport = exports.downloadExport = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (exportId) {
    try {
      var exportStatus = yield (0, _api.request)(`/api/users/export-data?exportId=${exportId}`, {
        method: 'GET'
      });
      var response = yield fetch(exportStatus.url);
      if (!response.ok) {
        throw new Error('Failed to download export');
      }
      return yield response.blob();
    } catch (error) {
      _core.logger.error('Download export error:', error instanceof Error ? error : new Error(String(error)));
      throw error instanceof Error ? error : new Error(String(error));
    }
  });
  return function downloadExport(_x2) {
    return _ref5.apply(this, arguments);
  };
}();
var _default = exports.default = {
  deleteAccount: deleteAccount,
  cancelDeletion: cancelDeletion,
  getAccountStatus: getAccountStatus,
  exportUserData: exportUserData,
  downloadExport: downloadExport
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,