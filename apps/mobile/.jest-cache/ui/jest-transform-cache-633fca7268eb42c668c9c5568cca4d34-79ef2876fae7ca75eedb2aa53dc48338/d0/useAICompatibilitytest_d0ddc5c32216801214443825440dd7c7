ae053d7806c6aa519287b2607738073b
"use strict";

_getJestObj().mock("../../../../services/api", function () {
  return {
    api: {
      ai: {
        analyzeCompatibility: mockAnalyzeCompatibility
      }
    },
    matchesAPI: {
      getPets: mockGetPets
    }
  };
});
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useAICompatibility = require("../useAICompatibility");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAnalyzeCompatibility = jest.fn();
var mockGetPets = jest.fn();
var mockPets = [{
  _id: "pet1",
  name: "Buddy",
  photos: ["photo1.jpg"],
  breed: "Golden Retriever",
  age: 3,
  species: "dog",
  owner: {
    _id: "user1",
    name: "Alice"
  }
}, {
  _id: "pet2",
  name: "Max",
  photos: ["photo2.jpg"],
  breed: "Labrador",
  age: 2,
  species: "dog",
  owner: {
    _id: "user2",
    name: "Bob"
  }
}];
var mockCompatibilityResult = {
  compatibility_score: 92,
  ai_analysis: "Excellent compatibility! Both pets are energetic and social.",
  breakdown: {
    personality_compatibility: 95,
    lifestyle_compatibility: 90,
    activity_compatibility: 92,
    social_compatibility: 88,
    environment_compatibility: 91
  },
  recommendations: {
    meeting_suggestions: ["Meet in neutral space", "Keep initial meetings short"],
    activity_recommendations: ["Daily walks", "Joint play sessions"],
    supervision_requirements: ["Monitor stress", "Separate if uncomfortable"],
    success_probability: 92
  }
};
describe("useAICompatibility", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockGetPets.mockResolvedValue(mockPets);
    mockAnalyzeCompatibility.mockResolvedValue(mockCompatibilityResult);
  });
  it("should initialize with default state", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook.result;
    expect(result.current.isAnalyzing).toBe(false);
    expect(result.current.compatibilityResult).toBe(null);
    expect(result.current.error).toBe(null);
    expect(result.current.availablePets).toEqual([]);
    expect(result.current.isLoadingPets).toBe(false);
    expect(result.current.selectedPet1).toBe(null);
    expect(result.current.selectedPet2).toBe(null);
  });
  it("should load available pets", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.loadAvailablePets();
    }));
    expect(mockGetPets).toHaveBeenCalled();
    expect(result.current.availablePets).toEqual(mockPets);
    expect(result.current.isLoadingPets).toBe(false);
  }));
  it("should set loading state when loading pets", (0, _asyncToGenerator2.default)(function* () {
    mockGetPets.mockImplementation(function () {
      return new Promise(function (resolve) {
        return setTimeout(function () {
          return resolve(mockPets);
        }, 100);
      });
    });
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook3.result;
    var loadPromise = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.loadAvailablePets();
    }));
    expect(result.current.isLoadingPets).toBe(true);
    yield loadPromise;
    expect(result.current.isLoadingPets).toBe(false);
  }));
  it("should handle pet loading error", (0, _asyncToGenerator2.default)(function* () {
    mockGetPets.mockRejectedValue(new Error("Network error"));
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook4.result;
    yield expect((0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.loadAvailablePets();
    }))).rejects.toThrow("Failed to load pets");
    expect(result.current.error).toBe("Failed to load pets. Please try again.");
    expect(result.current.availablePets).toEqual([]);
  }));
  it("should analyze compatibility successfully", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook5.result;
    var compatibilityResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      compatibilityResult = yield result.current.analyzeCompatibility("pet1", "pet2");
    }));
    expect(mockAnalyzeCompatibility).toHaveBeenCalledWith({
      pet1Id: "pet1",
      pet2Id: "pet2"
    });
    expect(result.current.compatibilityResult).toEqual(mockCompatibilityResult);
    expect(compatibilityResult).toEqual(mockCompatibilityResult);
    expect(result.current.isAnalyzing).toBe(false);
  }));
  it("should require both pet IDs", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook6.result;
    yield expect((0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.analyzeCompatibility("", "pet2");
    }))).rejects.toThrow("Please select two pets");
    expect(result.current.error).toBe("Please select two pets to analyze compatibility.");
    expect(mockAnalyzeCompatibility).not.toHaveBeenCalled();
  }));
  it("should require different pets", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook7.result;
    yield expect((0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.analyzeCompatibility("pet1", "pet1");
    }))).rejects.toThrow("Please select two different pets");
    expect(result.current.error).toBe("Please select two different pets.");
    expect(mockAnalyzeCompatibility).not.toHaveBeenCalled();
  }));
  it("should set loading state during analysis", (0, _asyncToGenerator2.default)(function* () {
    mockAnalyzeCompatibility.mockImplementation(function () {
      return new Promise(function (resolve) {
        return setTimeout(function () {
          return resolve(mockCompatibilityResult);
        }, 100);
      });
    });
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook8.result;
    var analyzePromise = (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.analyzeCompatibility("pet1", "pet2");
    }));
    expect(result.current.isAnalyzing).toBe(true);
    yield analyzePromise;
    expect(result.current.isAnalyzing).toBe(false);
  }));
  it("should handle API error with fallback result", (0, _asyncToGenerator2.default)(function* () {
    mockAnalyzeCompatibility.mockRejectedValue(new Error("API error"));
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook9.result;
    var compatibilityResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      compatibilityResult = yield result.current.analyzeCompatibility("pet1", "pet2");
    }));
    expect(compatibilityResult).toBeDefined();
    expect(compatibilityResult.compatibility_score).toBe(85);
    expect(result.current.compatibilityResult).not.toBe(null);
  }));
  it("should allow selecting pets", function () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook0.result;
    (0, _reactNative.act)(function () {
      result.current.setSelectedPet1(mockPets[0]);
    });
    expect(result.current.selectedPet1).toEqual(mockPets[0]);
    (0, _reactNative.act)(function () {
      result.current.setSelectedPet2(mockPets[1]);
    });
    expect(result.current.selectedPet2).toEqual(mockPets[1]);
  });
  it("should reset analysis", function () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook1.result;
    (0, _reactNative.act)(function () {
      result.current.setSelectedPet1(mockPets[0]);
      result.current.setSelectedPet2(mockPets[1]);
    });
    (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.analyzeCompatibility("pet1", "pet2");
    }));
    (0, _reactNative.act)(function () {
      result.current.resetAnalysis();
    });
    expect(result.current.selectedPet1).toBe(null);
    expect(result.current.selectedPet2).toBe(null);
    expect(result.current.compatibilityResult).toBe(null);
    expect(result.current.error).toBe(null);
  });
  it("should clear error", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      try {
        yield result.current.analyzeCompatibility("", "");
      } catch (_unused) {}
    }));
    expect(result.current.error).not.toBe(null);
    (0, _reactNative.act)(function () {
      result.current.clearError();
    });
    expect(result.current.error).toBe(null);
  }));
  it("should provide detailed compatibility breakdown", (0, _asyncToGenerator2.default)(function* () {
    var _result$current$compa;
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook11.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.analyzeCompatibility("pet1", "pet2");
    }));
    var breakdown = (_result$current$compa = result.current.compatibilityResult) == null ? void 0 : _result$current$compa.breakdown;
    expect(breakdown).toBeDefined();
    expect(breakdown == null ? void 0 : breakdown.personality_compatibility).toBe(95);
    expect(breakdown == null ? void 0 : breakdown.lifestyle_compatibility).toBe(90);
    expect(breakdown == null ? void 0 : breakdown.activity_compatibility).toBe(92);
    expect(breakdown == null ? void 0 : breakdown.social_compatibility).toBe(88);
    expect(breakdown == null ? void 0 : breakdown.environment_compatibility).toBe(91);
  }));
  it("should provide recommendations", (0, _asyncToGenerator2.default)(function* () {
    var _result$current$compa2;
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook12.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.analyzeCompatibility("pet1", "pet2");
    }));
    var recommendations = (_result$current$compa2 = result.current.compatibilityResult) == null ? void 0 : _result$current$compa2.recommendations;
    expect(recommendations).toBeDefined();
    expect(recommendations == null ? void 0 : recommendations.meeting_suggestions).toHaveLength(2);
    expect(recommendations == null ? void 0 : recommendations.activity_recommendations).toHaveLength(2);
    expect(recommendations == null ? void 0 : recommendations.supervision_requirements).toHaveLength(2);
    expect(recommendations == null ? void 0 : recommendations.success_probability).toBe(92);
  }));
  it("should provide AI analysis text", (0, _asyncToGenerator2.default)(function* () {
    var _result$current$compa3;
    var _renderHook13 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook13.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.analyzeCompatibility("pet1", "pet2");
    }));
    expect((_result$current$compa3 = result.current.compatibilityResult) == null ? void 0 : _result$current$compa3.ai_analysis).toBe("Excellent compatibility! Both pets are energetic and social.");
  }));
  it("should return stable function references", function () {
    var _renderHook14 = (0, _reactNative.renderHook)(function () {
        return (0, _useAICompatibility.useAICompatibility)();
      }),
      result = _renderHook14.result,
      rerender = _renderHook14.rerender;
    var firstAnalyzeCompatibility = result.current.analyzeCompatibility;
    var firstLoadAvailablePets = result.current.loadAvailablePets;
    var firstResetAnalysis = result.current.resetAnalysis;
    var firstClearError = result.current.clearError;
    rerender();
    expect(result.current.analyzeCompatibility).toBe(firstAnalyzeCompatibility);
    expect(result.current.loadAvailablePets).toBe(firstLoadAvailablePets);
    expect(result.current.resetAnalysis).toBe(firstResetAnalysis);
    expect(result.current.clearError).toBe(firstClearError);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,