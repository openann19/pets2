a87165774b8bacbc0117307c255119c5
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReanimatedFlatList = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _createAnimatedComponent = require("../createAnimatedComponent");
var _reactUtils = require("../reactUtils");
var _LayoutAnimationConfig = require("./LayoutAnimationConfig");
var _View = require("./View");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["itemLayoutAnimation", "skipEnteringExitingAnimations", "CellRendererComponentStyle"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var AnimatedFlatList = (0, _createAnimatedComponent.createAnimatedComponent)(_reactNative.FlatList);
var createCellRendererComponent = function createCellRendererComponent(itemLayoutAnimationRef, cellRendererComponentStyleRef) {
  var CellRendererComponent = function CellRendererComponent(props) {
    return (0, _jsxRuntime.jsx)(_View.AnimatedView, {
      layout: itemLayoutAnimationRef == null ? void 0 : itemLayoutAnimationRef.current,
      onLayout: props.onLayout,
      style: [props.style, typeof (cellRendererComponentStyleRef == null ? void 0 : cellRendererComponentStyleRef.current) === 'function' ? cellRendererComponentStyleRef == null ? void 0 : cellRendererComponentStyleRef.current({
        index: props.index,
        item: props.item
      }) : cellRendererComponentStyleRef == null ? void 0 : cellRendererComponentStyleRef.current],
      children: props.children
    });
  };
  return CellRendererComponent;
};
var FlatListForwardRefRender = function FlatListForwardRefRender(props, ref) {
  var itemLayoutAnimation = props.itemLayoutAnimation,
    skipEnteringExitingAnimations = props.skipEnteringExitingAnimations,
    CellRendererComponentStyle = props.CellRendererComponentStyle,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  if (!('scrollEventThrottle' in restProps)) {
    restProps.scrollEventThrottle = 1;
  }
  var itemLayoutAnimationRef = (0, _react.useRef)(itemLayoutAnimation);
  itemLayoutAnimationRef.current = itemLayoutAnimation;
  var cellRendererComponentStyleRef = (0, _react.useRef)(CellRendererComponentStyle);
  cellRendererComponentStyleRef.current = CellRendererComponentStyle;
  var CellRendererComponent = _react.default.useMemo(function () {
    return createCellRendererComponent(itemLayoutAnimationRef, cellRendererComponentStyleRef);
  }, []);
  var animatedFlatList = (0, _jsxRuntime.jsx)(AnimatedFlatList, _objectSpread(_objectSpread({
    ref: ref
  }, restProps), {}, {
    CellRendererComponent: CellRendererComponent
  }));
  if (skipEnteringExitingAnimations === undefined) {
    return animatedFlatList;
  }
  return (0, _jsxRuntime.jsx)(_LayoutAnimationConfig.LayoutAnimationConfig, {
    skipEntering: true,
    skipExiting: true,
    children: animatedFlatList
  });
};
var ReanimatedFlatList = exports.ReanimatedFlatList = (0, _reactUtils.componentWithRef)(FlatListForwardRefRender);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,