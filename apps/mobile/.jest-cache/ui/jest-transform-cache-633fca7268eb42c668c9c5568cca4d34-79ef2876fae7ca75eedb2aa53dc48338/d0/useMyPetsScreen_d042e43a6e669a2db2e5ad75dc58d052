33e61381e681b9fe2e1b447696c676b4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMyPetsScreen = useMyPetsScreen;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _core = require("@pawfectmatch/core");
var _react = require("react");
var _reactNative = require("react-native");
var _api = require("../../services/api");
function useMyPetsScreen() {
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    pets = _useState2[0],
    setPets = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    refreshing = _useState6[0],
    setRefreshing = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    deleteConfirm = _useState8[0],
    setDeleteConfirm = _useState8[1];
  var loadPets = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setIsLoading(true);
    try {
      var response = yield _api.matchesAPI.getUserPets();
      setPets(response || []);
    } catch (error) {
      _core.logger.error("Error loading pets:", {
        error: error
      });
      _reactNative.Alert.alert("Connection Error", "Network error");
      setPets([]);
    } finally {
      setIsLoading(false);
    }
  }), []);
  var onRefresh = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setRefreshing(true);
    yield loadPets();
    setRefreshing(false);
  }), [loadPets]);
  var getSpeciesEmoji = (0, _react.useCallback)(function (species) {
    var _emojis$species;
    var emojis = {
      dog: "üêï",
      cat: "üê±",
      bird: "üê¶",
      rabbit: "üê∞",
      other: "üêæ"
    };
    return (_emojis$species = emojis[species]) != null ? _emojis$species : "üêæ";
  }, []);
  var getIntentColor = (0, _react.useCallback)(function (intent) {
    var _colors$intent;
    var colors = {
      adoption: "#10B981",
      mating: "#EC4899",
      playdate: "#3B82F6",
      all: "#8B5CF6"
    };
    return (_colors$intent = colors[intent]) != null ? _colors$intent : "#6B7280";
  }, []);
  var getIntentLabel = (0, _react.useCallback)(function (intent) {
    var _labels$intent;
    var labels = {
      adoption: "For Adoption",
      mating: "Seeking Mates",
      playdate: "Playdates",
      all: "Open to All"
    };
    return (_labels$intent = labels[intent]) != null ? _labels$intent : intent;
  }, []);
  var handleDeletePet = (0, _react.useCallback)(function (petId) {
    _reactNative.Alert.alert("Delete Pet Profile", "Are you sure you want to delete this pet profile? This action cannot be undone.", [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "Delete",
      style: "destructive",
      onPress: function () {
        var _onPress = (0, _asyncToGenerator2.default)(function* () {
          try {
            yield _api.matchesAPI.deletePet(petId);
            setPets(function (prev) {
              return prev.filter(function (pet) {
                return pet._id !== petId;
              });
            });
            _reactNative.Alert.alert("Success", "Pet profile deleted successfully");
          } catch (error) {
            _reactNative.Alert.alert("Error", "Failed to delete pet profile. Please try again.");
          }
        });
        function onPress() {
          return _onPress.apply(this, arguments);
        }
        return onPress;
      }()
    }]);
  }, []);
  return {
    pets: pets,
    isLoading: isLoading,
    refreshing: refreshing,
    deleteConfirm: deleteConfirm,
    setDeleteConfirm: setDeleteConfirm,
    loadPets: loadPets,
    onRefresh: onRefresh,
    getSpeciesEmoji: getSpeciesEmoji,
    getIntentColor: getIntentColor,
    getIntentLabel: getIntentLabel,
    handleDeletePet: handleDeletePet
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,