1aa9914f1c0344323bca0d4ddcbb3052
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CallManager;
exports.useCallManager = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _core = require("@pawfectmatch/core");
var _reactNative = require("react-native");
var _useSocket = require("../../hooks/useSocket");
var _ActiveCallScreen = _interopRequireDefault(require("../../screens/calling/ActiveCallScreen"));
var _IncomingCallScreen = _interopRequireDefault(require("../../screens/calling/IncomingCallScreen"));
var _WebRTCService = _interopRequireDefault(require("../../services/WebRTCService"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function CallManager(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)(_WebRTCService.default.getCallState()),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    callState = _useState2[0],
    setCallState = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    showIncomingCall = _useState4[0],
    setShowIncomingCall = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showActiveCall = _useState6[0],
    setShowActiveCall = _useState6[1];
  var socket = (0, _useSocket.useSocket)();
  (0, _react.useEffect)(function () {
    if (socket) {}
    var handleCallStateChange = function handleCallStateChange(newState) {
      setCallState(newState);
      if (newState.isActive && newState.isIncoming && !newState.isConnected) {
        setShowIncomingCall(true);
        setShowActiveCall(false);
      } else if (newState.isActive && !newState.isIncoming) {
        setShowIncomingCall(false);
        setShowActiveCall(true);
      } else if (!newState.isActive) {
        setShowIncomingCall(false);
        setShowActiveCall(false);
      }
    };
    var handleCallError = function handleCallError(error) {
      _reactNative.Alert.alert("Call Error", "There was an issue with the call. Please try again.", [{
        text: "OK"
      }]);
      _core.logger.error("Call error:", {
        error: error
      });
    };
    _WebRTCService.default.on("callStateChanged", handleCallStateChange);
    _WebRTCService.default.on("callError", handleCallError);
    var handleAppStateChange = function handleAppStateChange(nextAppState) {
      if (nextAppState === "background" && callState.isActive) {
        _core.logger.info("Call moved to background");
      } else if (nextAppState === "active" && callState.isActive) {
        _core.logger.info("Call returned to foreground");
      }
    };
    var appStateSubscription = _reactNative.AppState.addEventListener("change", handleAppStateChange);
    return function () {
      _WebRTCService.default.off("callStateChanged", handleCallStateChange);
      _WebRTCService.default.off("callError", handleCallError);
      appStateSubscription == null ? void 0 : appStateSubscription.remove();
    };
  }, [socket]);
  var handleAnswerCall = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var success = yield _WebRTCService.default.answerCall();
        if (success) {
          setShowIncomingCall(false);
          setShowActiveCall(true);
        }
      } catch (error) {
        _reactNative.Alert.alert("Error", "Failed to answer call");
      }
    });
    return function handleAnswerCall() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleRejectCall = function handleRejectCall() {
    _WebRTCService.default.rejectCall();
    setShowIncomingCall(false);
  };
  var handleEndCall = function handleEndCall() {
    _reactNative.Alert.alert("End Call", "Are you sure you want to end this call?", [{
      text: "Cancel",
      style: "cancel"
    }, {
      text: "End Call",
      style: "destructive",
      onPress: function onPress() {
        _WebRTCService.default.endCall();
        setShowActiveCall(false);
      }
    }]);
  };
  var handleToggleMute = function handleToggleMute() {
    _WebRTCService.default.toggleMute();
  };
  var handleToggleVideo = function handleToggleVideo() {
    _WebRTCService.default.toggleVideo();
  };
  var handleSwitchCamera = function handleSwitchCamera() {
    _WebRTCService.default.switchCamera();
  };
  var handleToggleSpeaker = function handleToggleSpeaker() {
    _WebRTCService.default.toggleSpeaker();
  };
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [children, (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      visible: showIncomingCall,
      animationType: "slide",
      presentationStyle: "fullScreen",
      onRequestClose: handleRejectCall,
      children: callState.callData && (0, _jsxRuntime.jsx)(_IncomingCallScreen.default, {
        callData: callState.callData,
        onAnswer: handleAnswerCall,
        onReject: handleRejectCall
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      visible: showActiveCall,
      animationType: "slide",
      presentationStyle: "fullScreen",
      onRequestClose: handleEndCall,
      children: (0, _jsxRuntime.jsx)(_ActiveCallScreen.default, {
        callState: callState,
        onEndCall: handleEndCall,
        onToggleMute: handleToggleMute,
        onToggleVideo: handleToggleVideo,
        onSwitchCamera: handleSwitchCamera,
        onToggleSpeaker: handleToggleSpeaker
      })
    })]
  });
}
var useCallManager = exports.useCallManager = function useCallManager() {
  var startCall = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (matchId, callType) {
      try {
        var success = yield _WebRTCService.default.startCall(matchId, callType);
        if (!success) {
          _reactNative.Alert.alert("Error", "Failed to start call. Please check your permissions and try again.");
        }
        return success;
      } catch (error) {
        _reactNative.Alert.alert("Error", "Failed to start call");
        return false;
      }
    });
    return function startCall(_x, _x2) {
      return _ref3.apply(this, arguments);
    };
  }();
  var endCall = function endCall() {
    _WebRTCService.default.endCall();
  };
  var isCallActive = function isCallActive() {
    return _WebRTCService.default.isCallActive();
  };
  var getCallState = function getCallState() {
    return _WebRTCService.default.getCallState();
  };
  return {
    startCall: startCall,
    endCall: endCall,
    isCallActive: isCallActive,
    getCallState: getCallState
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,