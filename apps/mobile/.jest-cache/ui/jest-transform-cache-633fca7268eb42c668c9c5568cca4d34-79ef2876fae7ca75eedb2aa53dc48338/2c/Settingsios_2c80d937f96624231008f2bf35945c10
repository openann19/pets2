c702fe3231402f8892a696c8c2bde49c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var _NativeSettingsManager = _interopRequireDefault(require("./NativeSettingsManager"));
var _invariant = _interopRequireDefault(require("invariant"));
var subscriptions = [];
var Settings = {
  _settings: _NativeSettingsManager.default && _NativeSettingsManager.default.getConstants().settings,
  get: function get(key) {
    return this._settings[key];
  },
  set: function set(settings) {
    this._settings = Object.assign(this._settings, settings);
    _NativeSettingsManager.default.setValues(settings);
  },
  watchKeys: function watchKeys(keys, callback) {
    if (typeof keys === 'string') {
      keys = [keys];
    }
    (0, _invariant.default)(Array.isArray(keys), 'keys should be a string or array of strings');
    var sid = subscriptions.length;
    subscriptions.push({
      keys: keys,
      callback: callback
    });
    return sid;
  },
  clearWatch: function clearWatch(watchId) {
    if (watchId < subscriptions.length) {
      subscriptions[watchId] = {
        keys: [],
        callback: null
      };
    }
  },
  _sendObservations: function _sendObservations(body) {
    var _this = this;
    Object.keys(body).forEach(function (key) {
      var newValue = body[key];
      var didChange = _this._settings[key] !== newValue;
      _this._settings[key] = newValue;
      if (didChange) {
        subscriptions.forEach(function (sub) {
          if (sub.keys.indexOf(key) !== -1 && sub.callback) {
            sub.callback();
          }
        });
      }
    });
  }
};
_RCTDeviceEventEmitter.default.addListener('settingsUpdated', Settings._sendObservations.bind(Settings));
module.exports = Settings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUkNURGV2aWNlRXZlbnRFbWl0dGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfTmF0aXZlU2V0dGluZ3NNYW5hZ2VyIiwiX2ludmFyaWFudCIsInN1YnNjcmlwdGlvbnMiLCJTZXR0aW5ncyIsIl9zZXR0aW5ncyIsIk5hdGl2ZVNldHRpbmdzTWFuYWdlciIsImdldENvbnN0YW50cyIsInNldHRpbmdzIiwiZ2V0Iiwia2V5Iiwic2V0IiwiT2JqZWN0IiwiYXNzaWduIiwic2V0VmFsdWVzIiwid2F0Y2hLZXlzIiwia2V5cyIsImNhbGxiYWNrIiwiaW52YXJpYW50IiwiQXJyYXkiLCJpc0FycmF5Iiwic2lkIiwibGVuZ3RoIiwicHVzaCIsImNsZWFyV2F0Y2giLCJ3YXRjaElkIiwiX3NlbmRPYnNlcnZhdGlvbnMiLCJib2R5IiwiX3RoaXMiLCJmb3JFYWNoIiwibmV3VmFsdWUiLCJkaWRDaGFuZ2UiLCJzdWIiLCJpbmRleE9mIiwiUkNURGV2aWNlRXZlbnRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlNldHRpbmdzLmlvcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgUkNURGV2aWNlRXZlbnRFbWl0dGVyIGZyb20gJy4uL0V2ZW50RW1pdHRlci9SQ1REZXZpY2VFdmVudEVtaXR0ZXInO1xuaW1wb3J0IE5hdGl2ZVNldHRpbmdzTWFuYWdlciBmcm9tICcuL05hdGl2ZVNldHRpbmdzTWFuYWdlcic7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbmNvbnN0IHN1YnNjcmlwdGlvbnM6IEFycmF5PHtcbiAga2V5czogQXJyYXk8c3RyaW5nPixcbiAgY2FsbGJhY2s6ID9GdW5jdGlvbixcbiAgLi4uXG59PiA9IFtdO1xuXG5jb25zdCBTZXR0aW5ncyA9IHtcbiAgX3NldHRpbmdzOiAoTmF0aXZlU2V0dGluZ3NNYW5hZ2VyICYmXG4gICAgTmF0aXZlU2V0dGluZ3NNYW5hZ2VyLmdldENvbnN0YW50cygpLnNldHRpbmdzOiBhbnkpLFxuXG4gIGdldChrZXk6IHN0cmluZyk6IG1peGVkIHtcbiAgICAvLyAkRmxvd0ZpeE1lW29iamVjdC10aGlzLXJlZmVyZW5jZV1cbiAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3Nba2V5XTtcbiAgfSxcblxuICBzZXQoc2V0dGluZ3M6IE9iamVjdCkge1xuICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgIHRoaXMuX3NldHRpbmdzID0gT2JqZWN0LmFzc2lnbih0aGlzLl9zZXR0aW5ncywgc2V0dGluZ3MpO1xuICAgIE5hdGl2ZVNldHRpbmdzTWFuYWdlci5zZXRWYWx1ZXMoc2V0dGluZ3MpO1xuICB9LFxuXG4gIHdhdGNoS2V5cyhrZXlzOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LCBjYWxsYmFjazogRnVuY3Rpb24pOiBudW1iZXIge1xuICAgIGlmICh0eXBlb2Yga2V5cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGtleXMgPSBba2V5c107XG4gICAgfVxuXG4gICAgaW52YXJpYW50KFxuICAgICAgQXJyYXkuaXNBcnJheShrZXlzKSxcbiAgICAgICdrZXlzIHNob3VsZCBiZSBhIHN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzJyxcbiAgICApO1xuXG4gICAgY29uc3Qgc2lkID0gc3Vic2NyaXB0aW9ucy5sZW5ndGg7XG4gICAgc3Vic2NyaXB0aW9ucy5wdXNoKHtrZXlzOiBrZXlzLCBjYWxsYmFjazogY2FsbGJhY2t9KTtcbiAgICByZXR1cm4gc2lkO1xuICB9LFxuXG4gIGNsZWFyV2F0Y2god2F0Y2hJZDogbnVtYmVyKSB7XG4gICAgaWYgKHdhdGNoSWQgPCBzdWJzY3JpcHRpb25zLmxlbmd0aCkge1xuICAgICAgc3Vic2NyaXB0aW9uc1t3YXRjaElkXSA9IHtrZXlzOiBbXSwgY2FsbGJhY2s6IG51bGx9O1xuICAgIH1cbiAgfSxcblxuICBfc2VuZE9ic2VydmF0aW9ucyhib2R5OiBPYmplY3QpIHtcbiAgICBPYmplY3Qua2V5cyhib2R5KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IGJvZHlba2V5XTtcbiAgICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgICAgY29uc3QgZGlkQ2hhbmdlID0gdGhpcy5fc2V0dGluZ3Nba2V5XSAhPT0gbmV3VmFsdWU7XG4gICAgICAvLyAkRmxvd0ZpeE1lW29iamVjdC10aGlzLXJlZmVyZW5jZV1cbiAgICAgIHRoaXMuX3NldHRpbmdzW2tleV0gPSBuZXdWYWx1ZTtcblxuICAgICAgaWYgKGRpZENoYW5nZSkge1xuICAgICAgICBzdWJzY3JpcHRpb25zLmZvckVhY2goc3ViID0+IHtcbiAgICAgICAgICBpZiAoc3ViLmtleXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBzdWIuY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHN1Yi5jYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG59O1xuXG5SQ1REZXZpY2VFdmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIoXG4gICdzZXR0aW5nc1VwZGF0ZWQnLFxuICBTZXR0aW5ncy5fc2VuZE9ic2VydmF0aW9ucy5iaW5kKFNldHRpbmdzKSxcbik7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0dGluZ3M7XG4iXSwibWFwcGluZ3MiOiI7OztBQVVBLElBQUFBLHNCQUFBLEdBQUFDLHNCQUFBLENB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