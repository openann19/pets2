84c396a35445efb31d54e11b94f54b22
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HINTS_STORAGE_KEY = void 0;
exports.SwipeGestureHints = SwipeGestureHints;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _unifiedTheme = require("../../theme/unified-theme");
var _core = require("@pawfectmatch/core");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var HINTS_STORAGE_KEY = exports.HINTS_STORAGE_KEY = 'swipe_hints_dismissed';
var hints = [{
  icon: 'arrow-back',
  text: 'Swipe left to pass',
  position: 'left',
  color: '#EF4444'
}, {
  icon: 'arrow-forward',
  text: 'Swipe right to like',
  position: 'right',
  color: '#10B981'
}, {
  icon: 'arrow-up',
  text: 'Swipe up to super like',
  position: 'top',
  color: '#3B82F6'
}];
function SwipeGestureHints(_ref) {
  var onDismiss = _ref.onDismiss,
    initialDismissed = _ref.initialDismissed;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    visible = _useState2[0],
    setVisible = _useState2[1];
  var _useState3 = (0, _react.useState)(initialDismissed != null ? initialDismissed : false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isDismissed = _useState4[0],
    setIsDismissed = _useState4[1];
  var opacity = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var autoDismissTimeoutRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (initialDismissed) {
      return;
    }
    var checkDismissed = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var dismissed = yield _asyncStorage.default.getItem(HINTS_STORAGE_KEY);
          if (!dismissed) {
            setVisible(true);
            _reactNative.Animated.timing(opacity, {
              toValue: 1,
              duration: 400,
              useNativeDriver: true
            }).start();
            autoDismissTimeoutRef.current = setTimeout(function () {
              handleDismiss();
            }, 5000);
          }
        } catch (error) {
          _core.logger.error('Error checking hints status', {
            error: error
          });
        }
      });
      return function checkDismissed() {
        return _ref2.apply(this, arguments);
      };
    }();
    checkDismissed();
    return function () {
      if (autoDismissTimeoutRef.current) {
        clearTimeout(autoDismissTimeoutRef.current);
      }
    };
  }, []);
  var handleDismiss = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (autoDismissTimeoutRef.current) {
        clearTimeout(autoDismissTimeoutRef.current);
        autoDismissTimeoutRef.current = null;
      }
      try {
        yield _asyncStorage.default.setItem(HINTS_STORAGE_KEY, 'true');
        setIsDismissed(true);
        _reactNative.Animated.timing(opacity, {
          toValue: 0,
          duration: 300,
          useNativeDriver: true
        }).start(function () {
          setVisible(false);
          onDismiss == null ? void 0 : onDismiss();
        });
      } catch (error) {
        _core.logger.error('Error dismissing hints', {
          error: error
        });
      }
    });
    return function handleDismiss() {
      return _ref3.apply(this, arguments);
    };
  }();
  if (!visible || isDismissed) return (0, _jsxRuntime.jsx)(_reactNative.View, {});
  var leftHint = hints[0];
  var rightHint = hints[1];
  var topHint = hints[2];
  return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
    style: [styles.container, {
      opacity: opacity
    }],
    pointerEvents: "box-none",
    children: [leftHint && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.hintContainerLeft,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.hint, {
          backgroundColor: leftHint.color + '20'
        }],
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: leftHint.icon,
          size: 24,
          color: leftHint.color
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.hintText, {
            color: leftHint.color
          }],
          children: leftHint.text
        })]
      })
    }), rightHint && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.hintContainerRight,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.hint, {
          backgroundColor: rightHint.color + '20'
        }],
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: rightHint.icon,
          size: 24,
          color: rightHint.color
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.hintText, {
            color: rightHint.color
          }],
          children: rightHint.text
        })]
      })
    }), topHint && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.hintContainerTop,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.hint, {
          backgroundColor: topHint.color + '20'
        }],
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: topHint.icon,
          size: 24,
          color: topHint.color
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.hintText, {
            color: topHint.color
          }],
          children: topHint.text
        })]
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
      style: styles.dismissButton,
      onPress: handleDismiss,
      testID: "dismiss-button",
      children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "close",
        size: 20,
        color: _unifiedTheme.Theme.colors.neutral[0]
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: 1000
  },
  hintContainerLeft: {
    position: 'absolute',
    left: 20,
    top: '45%',
    alignItems: 'flex-start'
  },
  hintContainerRight: {
    position: 'absolute',
    right: 20,
    top: '45%',
    alignItems: 'flex-end'
  },
  hintContainerTop: {
    position: 'absolute',
    top: 100,
    alignSelf: 'center',
    alignItems: 'center'
  },
  hint: _objectSpread({
    flexDirection: 'row',
    alignItems: 'center',
    padding: _unifiedTheme.Theme.spacing.md,
    borderRadius: _unifiedTheme.Theme.borderRadius.lg,
    gap: _unifiedTheme.Theme.spacing.sm
  }, _unifiedTheme.Theme.shadows.depth.md),
  hintText: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.sm,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.semibold
  },
  dismissButton: {
    position: 'absolute',
    top: 60,
    right: 20,
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(0,0,0,0.6)',
    justifyContent: 'center',
    alignItems: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,