3fa6134fb4e38f07b2d9fcae51ca1daa
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _NativeDialogManagerAndroid = _interopRequireDefault(require("../NativeModules/specs/NativeDialogManagerAndroid"));
var _NativePermissionsAndroid = _interopRequireDefault(require("./NativePermissionsAndroid"));
var _invariant = _interopRequireDefault(require("invariant"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Platform = require("../Utilities/Platform");
var PERMISSION_REQUEST_RESULT = Object.freeze({
  GRANTED: 'granted',
  DENIED: 'denied',
  NEVER_ASK_AGAIN: 'never_ask_again'
});
var PERMISSIONS = Object.freeze({
  READ_CALENDAR: 'android.permission.READ_CALENDAR',
  WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
  CAMERA: 'android.permission.CAMERA',
  READ_CONTACTS: 'android.permission.READ_CONTACTS',
  WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
  GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
  ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
  ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
  ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',
  RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
  READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
  CALL_PHONE: 'android.permission.CALL_PHONE',
  READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
  WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
  ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
  READ_VOICEMAIL: 'com.android.voicemail.permission.READ_VOICEMAIL',
  WRITE_VOICEMAIL: 'com.android.voicemail.permission.WRITE_VOICEMAIL',
  USE_SIP: 'android.permission.USE_SIP',
  PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
  BODY_SENSORS: 'android.permission.BODY_SENSORS',
  BODY_SENSORS_BACKGROUND: 'android.permission.BODY_SENSORS_BACKGROUND',
  SEND_SMS: 'android.permission.SEND_SMS',
  RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
  READ_SMS: 'android.permission.READ_SMS',
  RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
  RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
  READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
  READ_MEDIA_IMAGES: 'android.permission.READ_MEDIA_IMAGES',
  READ_MEDIA_VIDEO: 'android.permission.READ_MEDIA_VIDEO',
  READ_MEDIA_AUDIO: 'android.permission.READ_MEDIA_AUDIO',
  WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',
  BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',
  BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',
  BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE',
  ACCESS_MEDIA_LOCATION: 'android.permission.ACCESS_MEDIA_LOCATION',
  ACCEPT_HANDOVER: 'android.permission.ACCEPT_HANDOVER',
  ACTIVITY_RECOGNITION: 'android.permission.ACTIVITY_RECOGNITION',
  ANSWER_PHONE_CALLS: 'android.permission.ANSWER_PHONE_CALLS',
  READ_PHONE_NUMBERS: 'android.permission.READ_PHONE_NUMBERS',
  UWB_RANGING: 'android.permission.UWB_RANGING',
  POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS',
  NEARBY_WIFI_DEVICES: 'android.permission.NEARBY_WIFI_DEVICES'
});
var PermissionsAndroid = function () {
  function PermissionsAndroid() {
    (0, _classCallCheck2.default)(this, PermissionsAndroid);
    this.PERMISSIONS = PERMISSIONS;
    this.RESULTS = PERMISSION_REQUEST_RESULT;
  }
  return (0, _createClass2.default)(PermissionsAndroid, [{
    key: "checkPermission",
    value: function checkPermission(permission) {
      console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
      if (Platform.OS !== 'android') {
        console.warn('"PermissionsAndroid" module works only for Android platform.');
        return Promise.resolve(false);
      }
      (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
      return _NativePermissionsAndroid.default.checkPermission(permission);
    }
  }, {
    key: "check",
    value: function check(permission) {
      if (Platform.OS !== 'android') {
        console.warn('"PermissionsAndroid" module works only for Android platform.');
        return Promise.resolve(false);
      }
      (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
      return _NativePermissionsAndroid.default.checkPermission(permission);
    }
  }, {
    key: "requestPermission",
    value: (function () {
      var _requestPermission = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
        console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
        if (Platform.OS !== 'android') {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve(false);
        }
        var response = yield this.request(permission, rationale);
        return response === this.RESULTS.GRANTED;
      });
      function requestPermission(_x, _x2) {
        return _requestPermission.apply(this, arguments);
      }
      return requestPermission;
    }())
  }, {
    key: "request",
    value: (function () {
      var _request = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
        if (Platform.OS !== 'android') {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve(this.RESULTS.DENIED);
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        if (rationale) {
          var shouldShowRationale = yield _NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(permission);
          if (shouldShowRationale && !!_NativeDialogManagerAndroid.default) {
            return new Promise(function (resolve, reject) {
              var options = _objectSpread({}, rationale);
              _NativeDialogManagerAndroid.default.showAlert(options, function () {
                return reject(new Error('Error showing rationale'));
              }, function () {
                return resolve(_NativePermissionsAndroid.default.requestPermission(permission));
              });
            });
          }
        }
        return _NativePermissionsAndroid.default.requestPermission(permission);
      });
      function request(_x3, _x4) {
        return _request.apply(this, arguments);
      }
      return request;
    }())
  }, {
    key: "requestMultiple",
    value: function requestMultiple(permissions) {
      if (Platform.OS !== 'android') {
        console.warn('"PermissionsAndroid" module works only for Android platform.');
        return Promise.resolve({});
      }
      (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
      return _NativePermissionsAndroid.default.requestMultiplePermissions(permissions);
    }
  }]);
}();
var PermissionsAndroidInstance = new PermissionsAndroid();
module.exports = PermissionsAndroidInstance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlRGlhbG9nTWFuYWdlckFuZHJvaWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9OYXRpdmVQZXJtaXNzaW9uc0FuZHJvaWQiLCJfaW52YXJpYW50Iiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiUGxhdGZvcm0iLCJQRVJNSVNTSU9OX1JFUVVFU1RfUkVTVUxUIiwiZnJlZXplIiwiR1JBTlRFRCIsIkRFTklFRCIsIk5FVkVSX0FTS19BR0FJTiIsIlBFUk1JU1NJT05TIiwiUkVBRF9DQUxFTkRBUiIsIldSSVRFX0NBTEVOREFSIiwiQ0FNRVJBIiwiUkVBRF9DT05UQUNUUyIsIldSSVRFX0NPTlRBQ1RTIiwiR0VUX0FDQ09VTlRTIiwiQUNDRVNTX0ZJTkVfTE9DQVRJT04iLCJBQ0NFU1NfQ09BUlNFX0xPQ0FUSU9OIiwiQUNDRVNTX0JBQ0tHUk9VTkRfTE9DQVRJT04iLCJSRUNPUkRfQVVESU8iLCJSRUFEX1BIT05FX1NUQVRFIiwiQ0FMTF9QSE9ORSIsIlJFQURfQ0FMTF9MT0ciLCJXUklURV9DQUxMX0xPRyIsIkFERF9WT0lDRU1BSUwiLCJSRUFEX1ZPSUNFTUFJTCIsIldSSVRFX1ZPSUNFTUFJTCIsIlVTRV9TSVAiLCJQUk9DRVNTX09VVEdPSU5HX0NBTExTIiwiQk9EWV9TRU5TT1JTIiwiQk9EWV9TRU5TT1JTX0JBQ0tHUk9VTkQiLCJTRU5EX1NNUyIsIlJFQ0VJVkVfU01TIiwiUkVBRF9TTVMiLCJSRUNFSVZFX1dBUF9QVVNIIiwiUkVDRUlWRV9NTVMiLCJSRUFEX0VYVEVSTkFMX1NUT1JBR0UiLCJSRUFEX01FRElBX0lNQUdFUyIsIlJFQURfTUVESUFfVklERU8iLCJSRUFEX01FRElBX0FVRElPIiwiV1JJVEVfRVhURVJOQUxfU1RPUkFHRSIsIkJMVUVUT09USF9DT05ORUNUIiwiQkxVRVRPT1RIX1NDQU4iLCJCTFVFVE9PVEhfQURWRVJUSVNFIiwiQUNDRVNTX01FRElBX0xPQ0FUSU9OIiwiQUNDRVBUX0hBTkRPVkVSIiwiQUNUSVZJVFlfUkVDT0dOSVRJT04iLCJBTlNXRVJfUEhPTkVfQ0FMTFMiLCJSRUFEX1BIT05FX05VTUJFUlMiLCJVV0JfUkFOR0lORyIsIlBPU1RfTk9USUZJQ0FUSU9OUyIsIk5FQVJCWV9XSUZJX0RFVklDRVMiLCJQZXJtaXNzaW9uc0FuZHJvaWQiLCJfY2xhc3NDYWxsQ2hlY2syIiwiUkVTVUxUUyIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsImNoZWNrUGVybWlzc2lvbiIsInBlcm1pc3Npb24iLCJjb25zb2xlIiwid2FybiIsIk9TIiwiUHJvbWlzZSIsInJlc29sdmUiLCJpbnZhcmlhbnQiLCJOYXRpdmVQZXJtaXNzaW9uc0FuZHJvaWQiLCJjaGVjayIsIl9yZXF1ZXN0UGVybWlzc2lvbiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsInJhdGlvbmFsZSIsInJlc3BvbnNlIiwicmVxdWVzdCIsInJlcXVlc3RQZXJtaXNzaW9uIiwiX3giLCJfeDIiLCJfcmVxdWVzdCIsInNob3VsZFNob3dSYXRpb25hbGUiLCJzaG91bGRTaG93UmVxdWVzdFBlcm1pc3Npb25SYXRpb25hbGUiLCJOYXRpdmVEaWFsb2dNYW5hZ2VyQW5kcm9pZCIsInJlamVjdCIsIm9wdGlvbnMiLCJzaG93QWxlcnQiLCJFcnJvciIsIl94MyIsIl94NCIsInJlcXVlc3RNdWx0aXBsZSIsInBlcm1pc3Npb25zIiwicmVxdWVzdE11bHRpcGxlUGVybWlzc2lvbnMiLCJQZXJtaXNzaW9uc0FuZHJvaWRJbnN0YW5jZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJQZXJtaXNzaW9uc0FuZHJvaWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICovXG5cbmltcG9ydCB0eXBlIHtcbiAgUGVybWlzc2lvblN0YXR1cyxcbiAgUGVybWlzc2lvblR5cGUsXG59IGZyb20gJy4vTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkJztcblxuaW1wb3J0IE5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkIGZyb20gJy4uL05hdGl2ZU1vZHVsZXMvc3BlY3MvTmF0aXZlRGlhbG9nTWFuYWdlckFuZHJvaWQnO1xuaW1wb3J0IE5hdGl2ZVBlcm1pc3Npb25zQW5kcm9pZCBmcm9tICcuL05hdGl2ZVBlcm1pc3Npb25zQW5kcm9pZCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG5cbmV4cG9ydCB0eXBlIFJhdGlvbmFsZSA9IHtcbiAgdGl0bGU6IHN0cmluZyxcbiAgbWVzc2FnZTogc3RyaW5nLFxuICBidXR0b25Qb3NpdGl2ZT86IHN0cmluZyxcbiAgYnV0dG9uTmVnYXRpdmU/OiBzdHJpbmcsXG4gIGJ1dHRvbk5ldXRyYWw/OiBzdHJpbmcsXG4gIC4uLlxufTtcblxuY29uc3QgUEVSTUlTU0lPTl9SRVFVRVNUX1JFU1VMVCA9IE9iamVjdC5mcmVlemUoe1xuICBHUkFOVEVEOiAnZ3JhbnRlZCcsXG4gIERFTklFRDogJ2RlbmllZCcsXG4gIE5FVkVSX0FTS19BR0FJTjogJ25ldmVyX2Fza19hZ2FpbicsXG59KTtcblxuY29uc3QgUEVSTUlTU0lPTlMgPSBPYmplY3QuZnJlZXplKHtcbiAgUkVBRF9DQUxFTkRBUjogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUFEX0NBTEVOREFSJyxcbiAgV1JJVEVfQ0FMRU5EQVI6ICdhbmRyb2lkLnBlcm1pc3Npb24uV1JJVEVfQ0FMRU5EQVInLFxuICBDQU1FUkE6ICdhbmRyb2lkLnBlcm1pc3Npb24uQ0FNRVJBJyxcbiAgUkVBRF9DT05UQUNUUzogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUFEX0NPTlRBQ1RTJyxcbiAgV1JJVEVfQ09OVEFDVFM6ICdhbmRyb2lkLnBlcm1pc3Npb24uV1JJVEVfQ09OVEFDVFMnLFxuICBHRVRfQUNDT1VOVFM6ICdhbmRyb2lkLnBlcm1pc3Npb24uR0VUX0FDQ09VTlRTJyxcbiAgQUNDRVNTX0ZJTkVfTE9DQVRJT046ICdhbmRyb2lkLnBlcm1pc3Npb24uQUNDRVNTX0ZJTkVfTE9DQVRJT04nLFxuICBBQ0NFU1NfQ09BUlNFX0xPQ0FUSU9OOiAnYW5kcm9pZC5wZXJtaXNzaW9uLkFDQ0VTU19DT0FSU0VfTE9DQVRJT04nLFxuICBBQ0NFU1NfQkFDS0dST1VORF9MT0NBVElPTjogJ2FuZHJvaWQucGVybWlzc2lvbi5BQ0NFU1NfQkFDS0dST1VORF9MT0NBVElPTicsXG4gIFJFQ09SRF9BVURJTzogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUNPUkRfQVVESU8nLFxuICBSRUFEX1BIT05FX1NUQVRFOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfU1RBVEUnLFxuICBDQUxMX1BIT05FOiAnYW5kcm9pZC5wZXJtaXNzaW9uLkNBTExfUEhPTkUnLFxuICBSRUFEX0NBTExfTE9HOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlJFQURfQ0FMTF9MT0cnLFxuICBXUklURV9DQUxMX0xPRzogJ2FuZHJvaWQucGVybWlzc2lvbi5XUklURV9DQUxMX0xPRycsXG4gIEFERF9WT0lDRU1BSUw6ICdjb20uYW5kcm9pZC52b2ljZW1haWwucGVybWlzc2lvbi5BRERfVk9JQ0VNQUlMJyxcbiAgUkVBRF9WT0lDRU1BSUw6ICdjb20uYW5kcm9pZC52b2ljZW1haWwucGVybWlzc2lvbi5SRUFEX1ZPSUNFTUFJTCcsXG4gIFdSSVRFX1ZPSUNFTUFJTDogJ2NvbS5hbmRyb2lkLnZvaWNlbWFpbC5wZXJtaXNzaW9uLldSSVRFX1ZPSUNFTUFJTCcsXG4gIFVTRV9TSVA6ICdhbmRyb2lkLnBlcm1pc3Npb24uVVNFX1NJUCcsXG4gIFBST0NFU1NfT1VUR09JTkdfQ0FMTFM6ICdhbmRyb2lkLnBlcm1pc3Npb24uUFJPQ0VTU19PVVRHT0lOR19DQUxMUycsXG4gIEJPRFlfU0VOU09SUzogJ2FuZHJvaWQucGVybWlzc2lvbi5CT0RZX1NFTlNPUlMnLFxuICBCT0RZX1NFTlNPUlNfQkFDS0dST1VORDogJ2FuZHJvaWQucGVybWlzc2lvbi5CT0RZX1NFTlNPUlNfQkFDS0dST1VORCcsXG4gIFNFTkRfU01TOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlNFTkRfU01TJyxcbiAgUkVDRUlWRV9TTVM6ICdhbmRyb2lkLnBlcm1pc3Npb24uUkVDRUlWRV9TTVMnLFxuICBSRUFEX1NNUzogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUFEX1NNUycsXG4gIFJFQ0VJVkVfV0FQX1BVU0g6ICdhbmRyb2lkLnBlcm1pc3Npb24uUkVDRUlWRV9XQVBfUFVTSCcsXG4gIFJFQ0VJVkVfTU1TOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlJFQ0VJVkVfTU1TJyxcbiAgUkVBRF9FWFRFUk5BTF9TVE9SQUdFOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlJFQURfRVhURVJOQUxfU1RPUkFHRScsXG4gIFJFQURfTUVESUFfSU1BR0VTOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlJFQURfTUVESUFfSU1BR0VTJyxcbiAgUkVBRF9NRURJQV9WSURFTzogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUFEX01FRElBX1ZJREVPJyxcbiAgUkVBRF9NRURJQV9BVURJTzogJ2FuZHJvaWQucGVybWlzc2lvbi5SRUFEX01FRElBX0FVRElPJyxcbiAgV1JJVEVfRVhURVJOQUxfU1RPUkFHRTogJ2FuZHJvaWQucGVybWlzc2lvbi5XUklURV9FWFRFUk5BTF9TVE9SQUdFJyxcbiAgQkxVRVRPT1RIX0NPTk5FQ1Q6ICdhbmRyb2lkLnBlcm1pc3Npb24uQkxVRVRPT1RIX0NPTk5FQ1QnLFxuICBCTFVFVE9PVEhfU0NBTjogJ2FuZHJvaWQucGVybWlzc2lvbi5CTFVFVE9PVEhfU0NBTicsXG4gIEJMVUVUT09USF9BRFZFUlRJU0U6ICdhbmRyb2lkLnBlcm1pc3Npb24uQkxVRVRPT1RIX0FEVkVSVElTRScsXG4gIEFDQ0VTU19NRURJQV9MT0NBVElPTjogJ2FuZHJvaWQucGVybWlzc2lvbi5BQ0NFU1NfTUVESUFfTE9DQVRJT04nLFxuICBBQ0NFUFRfSEFORE9WRVI6ICdhbmRyb2lkLnBlcm1pc3Npb24uQUNDRVBUX0hBTkRPVkVSJyxcbiAgQUNUSVZJVFlfUkVDT0dOSVRJT046ICdhbmRyb2lkLnBlcm1pc3Npb24uQUNUSVZJVFlfUkVDT0dOSVRJT04nLFxuICBBTlNXRVJfUEhPTkVfQ0FMTFM6ICdhbmRyb2lkLnBlcm1pc3Npb24uQU5TV0VSX1BIT05FX0NBTExTJyxcbiAgUkVBRF9QSE9ORV9OVU1CRVJTOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlJFQURfUEhPTkVfTlVNQkVSUycsXG4gIFVXQl9SQU5HSU5HOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlVXQl9SQU5HSU5HJyxcbiAgUE9TVF9OT1RJRklDQVRJT05TOiAnYW5kcm9pZC5wZXJtaXNzaW9uLlBPU1RfTk9USUZJQ0FUSU9OUycsXG4gIE5FQVJCWV9XSUZJX0RFVklDRVM6ICdhbmRyb2lkLnBlcm1pc3Npb24uTkVBUkJZX1dJRklfREVWSUNFUycsXG59KTtcblxuLyoqXG4gKiBgUGVybWlzc2lvbnNBbmRyb2lkYCBwcm92aWRlcyBhY2Nlc3MgdG8gQW5kcm9pZCBNJ3MgbmV3IHBlcm1pc3Npb25zIG1vZGVsLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3Blcm1pc3Npb25zYW5kcm9pZFxuICovXG5cbmNsYXNzIFBlcm1pc3Npb25zQW5kcm9pZCB7XG4gIFBFUk1JU1NJT05TOiB7fFxuICAgIEFDQ0VQVF9IQU5ET1ZFUjogc3RyaW5nLFxuICAgIEFDQ0VTU19CQUNLR1JPVU5EX0xPQ0FUSU9OOiBzdHJpbmcsXG4gICAgQUNDRVNTX0NPQVJTRV9MT0NBVElPTjogc3RyaW5nLFxuICAgIEFDQ0VTU19GSU5FX0xPQ0FUSU9OOiBzdHJpbmcsXG4gICAgQUNDRVNTX01FRElBX0xPQ0FUSU9OOiBzdHJpbmcsXG4gICAgQUNUSVZJVFlfUkVDT0dOSVRJT046IHN0cmluZyxcbiAgICBBRERfVk9JQ0VNQUlMOiBzdHJpbmcsXG4gICAgUkVBRF9WT0lDRU1BSUw6IHN0cmluZyxcbiAgICBXUklURV9WT0lDRU1BSUw6IHN0cmluZyxcbiAgICBBTlNXRVJfUEhPTkVfQ0FMTFM6IHN0cmluZyxcbiAgICBCTFVFVE9PVEhfQURWRVJUSVNFOiBzdHJpbmcsXG4gICAgQkxVRVRPT1RIX0NPTk5FQ1Q6IHN0cmluZyxcbiAgICBCTFVFVE9PVEhfU0NBTjogc3RyaW5nLFxuICAgIEJPRFlfU0VOU09SUzogc3RyaW5nLFxuICAgIEJPRFlfU0VOU09SU19CQUNLR1JPVU5EOiBzdHJpbmcsXG4gICAgQ0FMTF9QSE9ORTogc3RyaW5nLFxuICAgIENBTUVSQTogc3RyaW5nLFxuICAgIEdFVF9BQ0NPVU5UUzogc3RyaW5nLFxuICAgIE5FQVJCWV9XSUZJX0RFVklDRVM6IHN0cmluZyxcbiAgICBQT1NUX05PVElGSUNBVElPTlM6IHN0cmluZyxcbiAgICBQUk9DRVNTX09VVEdPSU5HX0NBTExTOiBzdHJpbmcsXG4gICAgUkVBRF9DQUxFTkRBUjogc3RyaW5nLFxuICAgIFJFQURfQ0FMTF9MT0c6IHN0cmluZyxcbiAgICBSRUFEX0NPTlRBQ1RTOiBzdHJpbmcsXG4gICAgUkVBRF9FWFRFUk5BTF9TVE9SQUdFOiBzdHJpbmcsXG4gICAgUkVBRF9NRURJQV9JTUFHRVM6IHN0cmluZyxcbiAgICBSRUFEX01FRElBX1ZJREVPOiBzdHJpbmcsXG4gICAgUkVBRF9NRURJQV9BVURJTzogc3RyaW5nLFxuICAgIFJFQURfUEhPTkVfTlVNQkVSUzogc3RyaW5nLFxuICAgIFJFQURfUEhPTkVfU1RBVEU6IHN0cmluZyxcbiAgICBSRUFEX1NNUzogc3RyaW5nLFxuICAgIFJFQ0VJVkVfTU1TOiBzdHJpbmcsXG4gICAgUkVDRUlWRV9TTVM6IHN0cmluZyxcbiAgICBSRUNFSVZFX1dBUF9QVVNIOiBzdHJpbmcsXG4gICAgUkVDT1JEX0FVRElPOiBzdHJpbmcsXG4gICAgU0VORF9TTVM6IHN0cmluZyxcbiAgICBVU0VfU0lQOiBzdHJpbmcsXG4gICAgVVdCX1JBTkdJTkc6IHN0cmluZyxcbiAgICBXUklURV9DQUxFTkRBUjogc3RyaW5nLFxuICAgIFdSSVRFX0NBTExfTE9HOiBzdHJpbmcsXG4gICAgV1JJVEVfQ09OVEFDVFM6IHN0cmluZyxcbiAgICBXUklURV9FWFRFUk5BTF9TVE9SQUdFOiBzdHJpbmcsXG4gIHx9ID0gUEVSTUlTU0lPTlM7XG4gIFJFU1VMVFM6IHt8XG4gICAgREVOSUVEOiAkVEVNUE9SQVJZJHN0cmluZzwnZGVuaWVkJz4sXG4gICAgR1JBTlRFRDogJFRFTVBPUkFSWSRzdHJpbmc8J2dyYW50ZWQnPixcbiAgICBORVZFUl9BU0tfQUdBSU46ICRURU1QT1JBUlkkc3RyaW5nPCduZXZlcl9hc2tfYWdhaW4nPixcbiAgfH0gPSBQRVJNSVNTSU9OX1JFUVVFU1RfUkVTVUxUO1xuXG4gIC8qKlxuICAgKiBERVBSRUNBVEVEIC0gdXNlIGNoZWNrXG4gICAqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHJlc29sdmluZyB0byBhIGJvb2xlYW4gdmFsdWUgYXMgdG8gd2hldGhlciB0aGUgc3BlY2lmaWVkXG4gICAqIHBlcm1pc3Npb25zIGhhcyBiZWVuIGdyYW50ZWRcbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGNoZWNrUGVybWlzc2lvbihwZXJtaXNzaW9uOiBQZXJtaXNzaW9uVHlwZSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdcIlBlcm1pc3Npb25zQW5kcm9pZC5jaGVja1Blcm1pc3Npb25cIiBpcyBkZXByZWNhdGVkLiBVc2UgXCJQZXJtaXNzaW9uc0FuZHJvaWQuY2hlY2tcIiBpbnN0ZWFkJyxcbiAgICApO1xuICAgIGlmIChQbGF0Zm9ybS5PUyAhPT0gJ2FuZHJvaWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdcIlBlcm1pc3Npb25zQW5kcm9pZFwiIG1vZHVsZSB3b3JrcyBvbmx5IGZvciBBbmRyb2lkIHBsYXRmb3JtLicsXG4gICAgICApO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgfVxuXG4gICAgaW52YXJpYW50KFxuICAgICAgTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkLFxuICAgICAgJ1Blcm1pc3Npb25zQW5kcm9pZCBpcyBub3QgaW5zdGFsbGVkIGNvcnJlY3RseS4nLFxuICAgICk7XG5cbiAgICByZXR1cm4gTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkLmNoZWNrUGVybWlzc2lvbihwZXJtaXNzaW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSByZXNvbHZpbmcgdG8gYSBib29sZWFuIHZhbHVlIGFzIHRvIHdoZXRoZXIgdGhlIHNwZWNpZmllZFxuICAgKiBwZXJtaXNzaW9ucyBoYXMgYmVlbiBncmFudGVkXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3Blcm1pc3Npb25zYW5kcm9pZCNjaGVja1xuICAgKi9cbiAgY2hlY2socGVybWlzc2lvbjogUGVybWlzc2lvblR5cGUpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgIT09ICdhbmRyb2lkJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnXCJQZXJtaXNzaW9uc0FuZHJvaWRcIiBtb2R1bGUgd29ya3Mgb25seSBmb3IgQW5kcm9pZCBwbGF0Zm9ybS4nLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cblxuICAgIGludmFyaWFudChcbiAgICAgIE5hdGl2ZVBlcm1pc3Npb25zQW5kcm9pZCxcbiAgICAgICdQZXJtaXNzaW9uc0FuZHJvaWQgaXMgbm90IGluc3RhbGxlZCBjb3JyZWN0bHkuJyxcbiAgICApO1xuXG4gICAgcmV0dXJuIE5hdGl2ZVBlcm1pc3Npb25zQW5kcm9pZC5jaGVja1Blcm1pc3Npb24ocGVybWlzc2lvbik7XG4gIH1cblxuICAvKipcbiAgICogREVQUkVDQVRFRCAtIHVzZSByZXF1ZXN0XG4gICAqXG4gICAqIFByb21wdHMgdGhlIHVzZXIgdG8gZW5hYmxlIGEgcGVybWlzc2lvbiBhbmQgcmV0dXJucyBhIHByb21pc2UgcmVzb2x2aW5nIHRvIGFcbiAgICogYm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHVzZXIgYWxsb3dlZCBvciBkZW5pZWQgdGhlIHJlcXVlc3RcbiAgICpcbiAgICogSWYgdGhlIG9wdGlvbmFsIHJhdGlvbmFsZSBhcmd1bWVudCBpcyBpbmNsdWRlZCAod2hpY2ggaXMgYW4gb2JqZWN0IHdpdGggYVxuICAgKiBgdGl0bGVgIGFuZCBgbWVzc2FnZWApLCB0aGlzIGZ1bmN0aW9uIGNoZWNrcyB3aXRoIHRoZSBPUyB3aGV0aGVyIGl0IGlzXG4gICAqIG5lY2Vzc2FyeSB0byBzaG93IGEgZGlhbG9nIGV4cGxhaW5pbmcgd2h5IHRoZSBwZXJtaXNzaW9uIGlzIG5lZWRlZFxuICAgKiAoaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvcGVybWlzc2lvbnMvcmVxdWVzdGluZyNleHBsYWluKVxuICAgKiBhbmQgdGhlbiBzaG93cyB0aGUgc3lzdGVtIHBlcm1pc3Npb24gZGlhbG9nXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBhc3luYyByZXF1ZXN0UGVybWlzc2lvbihcbiAgICBwZXJtaXNzaW9uOiBQZXJtaXNzaW9uVHlwZSxcbiAgICByYXRpb25hbGU/OiBSYXRpb25hbGUsXG4gICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdcIlBlcm1pc3Npb25zQW5kcm9pZC5yZXF1ZXN0UGVybWlzc2lvblwiIGlzIGRlcHJlY2F0ZWQuIFVzZSBcIlBlcm1pc3Npb25zQW5kcm9pZC5yZXF1ZXN0XCIgaW5zdGVhZCcsXG4gICAgKTtcbiAgICBpZiAoUGxhdGZvcm0uT1MgIT09ICdhbmRyb2lkJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnXCJQZXJtaXNzaW9uc0FuZHJvaWRcIiBtb2R1bGUgd29ya3Mgb25seSBmb3IgQW5kcm9pZCBwbGF0Zm9ybS4nLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5yZXF1ZXN0KHBlcm1pc3Npb24sIHJhdGlvbmFsZSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlID09PSB0aGlzLlJFU1VMVFMuR1JBTlRFRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9tcHRzIHRoZSB1c2VyIHRvIGVuYWJsZSBhIHBlcm1pc3Npb24gYW5kIHJldHVybnMgYSBwcm9taXNlIHJlc29sdmluZyB0byBhXG4gICAqIHN0cmluZyB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHVzZXIgYWxsb3dlZCBvciBkZW5pZWQgdGhlIHJlcXVlc3RcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvcGVybWlzc2lvbnNhbmRyb2lkI3JlcXVlc3RcbiAgICovXG4gIGFzeW5jIHJlcXVlc3QoXG4gICAgcGVybWlzc2lvbjogUGVybWlzc2lvblR5cGUsXG4gICAgcmF0aW9uYWxlPzogUmF0aW9uYWxlLFxuICApOiBQcm9taXNlPFBlcm1pc3Npb25TdGF0dXM+IHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgIT09ICdhbmRyb2lkJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnXCJQZXJtaXNzaW9uc0FuZHJvaWRcIiBtb2R1bGUgd29ya3Mgb25seSBmb3IgQW5kcm9pZCBwbGF0Zm9ybS4nLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5SRVNVTFRTLkRFTklFRCk7XG4gICAgfVxuXG4gICAgaW52YXJpYW50KFxuICAgICAgTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkLFxuICAgICAgJ1Blcm1pc3Npb25zQW5kcm9pZCBpcyBub3QgaW5zdGFsbGVkIGNvcnJlY3RseS4nLFxuICAgICk7XG5cbiAgICBpZiAocmF0aW9uYWxlKSB7XG4gICAgICBjb25zdCBzaG91bGRTaG93UmF0aW9uYWxlID1cbiAgICAgICAgYXdhaXQgTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkLnNob3VsZFNob3dSZXF1ZXN0UGVybWlzc2lvblJhdGlvbmFsZShcbiAgICAgICAgICBwZXJtaXNzaW9uLFxuICAgICAgICApO1xuXG4gICAgICBpZiAoc2hvdWxkU2hvd1JhdGlvbmFsZSAmJiAhIU5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLnJhdGlvbmFsZSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIE5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkLnNob3dBbGVydChcbiAgICAgICAgICAgIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWV4YWN0XSAoPj0wLjExMS4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKVxuICAgICAgICAgICAgICogVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjExMSB3YXNcbiAgICAgICAgICAgICAqIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yLCBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICgpID0+IHJlamVjdChuZXcgRXJyb3IoJ0Vycm9yIHNob3dpbmcgcmF0aW9uYWxlJykpLFxuICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgcmVzb2x2ZShOYXRpdmVQZXJtaXNzaW9uc0FuZHJvaWQucmVxdWVzdFBlcm1pc3Npb24ocGVybWlzc2lvbikpLFxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gTmF0aXZlUGVybWlzc2lvbnNBbmRyb2lkLnJlcXVlc3RQZXJtaXNzaW9uKHBlcm1pc3Npb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb21wdHMgdGhlIHVzZXIgdG8gZW5hYmxlIG11bHRpcGxlIHBlcm1pc3Npb25zIGluIHRoZSBzYW1lIGRpYWxvZyBhbmRcbiAgICogcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgcGVybWlzc2lvbnMgYXMga2V5cyBhbmQgc3RyaW5ncyBhcyB2YWx1ZXNcbiAgICogaW5kaWNhdGluZyB3aGV0aGVyIHRoZSB1c2VyIGFsbG93ZWQgb3IgZGVuaWVkIHRoZSByZXF1ZXN0XG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3Blcm1pc3Npb25zYW5kcm9pZCNyZXF1ZXN0bXVsdGlwbGVcbiAgICovXG4gIHJlcXVlc3RNdWx0aXBsZShcbiAgICBwZXJtaXNzaW9uczogQXJyYXk8UGVybWlzc2lvblR5cGU+LFxuICApOiBQcm9taXNlPHtbcGVybWlzc2lvbjogUGVybWlzc2lvblR5cGVdOiBQZXJtaXNzaW9uU3RhdHVzLCAuLi59PiB7XG4gICAgaWYgKFBsYXRmb3JtLk9TICE9PSAnYW5kcm9pZCcpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1wiUGVybWlzc2lvbnNBbmRyb2lkXCIgbW9kdWxlIHdvcmtzIG9ubHkgZm9yIEFuZHJvaWQgcGxhdGZvcm0uJyxcbiAgICAgICk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt9KTtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBOYXRpdmVQZXJtaXNzaW9uc0FuZHJvaWQsXG4gICAgICAnUGVybWlzc2lvbnNBbmRyb2lkIGlzIG5vdCBpbnN0YWxsZWQgY29ycmVjdGx5LicsXG4gICAgKTtcblxuICAgIHJldHVybiBOYXRpdmVQZXJtaXNzaW9uc0FuZHJvaWQucmVxdWVzdE11bHRpcGxlUGVybWlzc2lvbnMocGVybWlzc2lvbnMpO1xuICB9XG59XG5cbmNvbnN0IFBlcm1pc3Npb25zQW5kcm9pZEluc3RhbmNlOiBQZXJtaXNzaW9uc0FuZHJvaWQgPSBuZXcgUGVybWlzc2lvbnNBbmRyb2lkKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUGVybWlzc2lvbnNBbmRyb2lkSW5zdGFuY2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFlQSxJQUFBQSwyQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMseUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFrQyxTQUFBRyxRQUFBQyxDQUFBLEVBQUFDLENBQUEsUUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQSxPQUFBRyxNQUFBLENBQUFFLHFCQUFBLFFBQUFDLENBQUEsR0FBQUgsTUFBQSxDQUFBRSxxQkFBQSxDQUFBTCxDQUFBLEdBQUFDLENBQUEsS0FBQUssQ0FBQSxHQUFBQSxDQUFBLENBQUFDLE1BQUEsV0FBQU4sQ0FBQSxXQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFSLENBQUEsRUFBQUMsQ0FBQSxFQUFBUSxVQUFBLE9BQUFQ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