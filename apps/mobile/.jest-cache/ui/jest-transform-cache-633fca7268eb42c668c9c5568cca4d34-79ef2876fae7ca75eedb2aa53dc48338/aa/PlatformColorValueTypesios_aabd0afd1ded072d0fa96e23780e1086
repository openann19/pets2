6e96de61684d12e0e82c81812a665664
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processColorObject = exports.normalizeColorObject = exports.PlatformColor = exports.DynamicColorIOSPrivate = void 0;
var PlatformColor = exports.PlatformColor = function PlatformColor() {
  for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
    names[_key] = arguments[_key];
  }
  return {
    semantic: names
  };
};
var DynamicColorIOSPrivate = exports.DynamicColorIOSPrivate = function DynamicColorIOSPrivate(tuple) {
  return {
    dynamic: {
      light: tuple.light,
      dark: tuple.dark,
      highContrastLight: tuple.highContrastLight,
      highContrastDark: tuple.highContrastDark
    }
  };
};
var normalizeColorObject = exports.normalizeColorObject = function normalizeColorObject(color) {
  if ('semantic' in color) {
    return color;
  } else if ('dynamic' in color && color.dynamic !== undefined) {
    var normalizeColor = require("./normalizeColor");
    var dynamic = color.dynamic;
    var dynamicColor = {
      dynamic: {
        light: normalizeColor(dynamic.light),
        dark: normalizeColor(dynamic.dark),
        highContrastLight: normalizeColor(dynamic.highContrastLight),
        highContrastDark: normalizeColor(dynamic.highContrastDark)
      }
    };
    return dynamicColor;
  }
  return null;
};
var processColorObject = exports.processColorObject = function processColorObject(color) {
  if ('dynamic' in color && color.dynamic != null) {
    var processColor = require("./processColor").default;
    var dynamic = color.dynamic;
    var dynamicColor = {
      dynamic: {
        light: processColor(dynamic.light),
        dark: processColor(dynamic.dark),
        highContrastLight: processColor(dynamic.highContrastLight),
        highContrastDark: processColor(dynamic.highContrastDark)
      }
    };
    return dynamicColor;
  }
  return color;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQbGF0Zm9ybUNvbG9yIiwiZXhwb3J0cyIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuYW1lcyIsIkFycmF5IiwiX2tleSIsInNlbWFudGljIiwiRHluYW1pY0NvbG9ySU9TUHJpdmF0ZSIsInR1cGxlIiwiZHluYW1pYyIsImxpZ2h0IiwiZGFyayIsImhpZ2hDb250cmFzdExpZ2h0IiwiaGlnaENvbnRyYXN0RGFyayIsIm5vcm1hbGl6ZUNvbG9yT2JqZWN0IiwiY29sb3IiLCJ1bmRlZmluZWQiLCJub3JtYWxpemVDb2xvciIsInJlcXVpcmUiLCJkeW5hbWljQ29sb3IiLCJwcm9jZXNzQ29sb3JPYmplY3QiLCJwcm9jZXNzQ29sb3IiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiUGxhdGZvcm1Db2xvclZhbHVlVHlwZXMuaW9zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgdHlwZSB7UHJvY2Vzc2VkQ29sb3JWYWx1ZX0gZnJvbSAnLi9wcm9jZXNzQ29sb3InO1xuaW1wb3J0IHR5cGUge0NvbG9yVmFsdWV9IGZyb20gJy4vU3R5bGVTaGVldCc7XG5cbmV4cG9ydCBvcGFxdWUgdHlwZSBOYXRpdmVDb2xvclZhbHVlID0ge1xuICBzZW1hbnRpYz86IEFycmF5PHN0cmluZz4sXG4gIGR5bmFtaWM/OiB7XG4gICAgbGlnaHQ6ID8oQ29sb3JWYWx1ZSB8IFByb2Nlc3NlZENvbG9yVmFsdWUpLFxuICAgIGRhcms6ID8oQ29sb3JWYWx1ZSB8IFByb2Nlc3NlZENvbG9yVmFsdWUpLFxuICAgIGhpZ2hDb250cmFzdExpZ2h0PzogPyhDb2xvclZhbHVlIHwgUHJvY2Vzc2VkQ29sb3JWYWx1ZSksXG4gICAgaGlnaENvbnRyYXN0RGFyaz86ID8oQ29sb3JWYWx1ZSB8IFByb2Nlc3NlZENvbG9yVmFsdWUpLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IFBsYXRmb3JtQ29sb3IgPSAoLi4ubmFtZXM6IEFycmF5PHN0cmluZz4pOiBDb2xvclZhbHVlID0+IHtcbiAgcmV0dXJuIHtzZW1hbnRpYzogbmFtZXN9O1xufTtcblxuZXhwb3J0IHR5cGUgRHluYW1pY0NvbG9ySU9TVHVwbGVQcml2YXRlID0ge1xuICBsaWdodDogQ29sb3JWYWx1ZSxcbiAgZGFyazogQ29sb3JWYWx1ZSxcbiAgaGlnaENvbnRyYXN0TGlnaHQ/OiBDb2xvclZhbHVlLFxuICBoaWdoQ29udHJhc3REYXJrPzogQ29sb3JWYWx1ZSxcbn07XG5cbmV4cG9ydCBjb25zdCBEeW5hbWljQ29sb3JJT1NQcml2YXRlID0gKFxuICB0dXBsZTogRHluYW1pY0NvbG9ySU9TVHVwbGVQcml2YXRlLFxuKTogQ29sb3JWYWx1ZSA9PiB7XG4gIHJldHVybiB7XG4gICAgZHluYW1pYzoge1xuICAgICAgbGlnaHQ6IHR1cGxlLmxpZ2h0LFxuICAgICAgZGFyazogdHVwbGUuZGFyayxcbiAgICAgIGhpZ2hDb250cmFzdExpZ2h0OiB0dXBsZS5oaWdoQ29udHJhc3RMaWdodCxcbiAgICAgIGhpZ2hDb250cmFzdERhcms6IHR1cGxlLmhpZ2hDb250cmFzdERhcmssXG4gICAgfSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVDb2xvck9iamVjdCA9IChcbiAgY29sb3I6IE5hdGl2ZUNvbG9yVmFsdWUsXG4pOiA/UHJvY2Vzc2VkQ29sb3JWYWx1ZSA9PiB7XG4gIGlmICgnc2VtYW50aWMnIGluIGNvbG9yKSB7XG4gICAgLy8gYW4gaW9zIHNlbWFudGljIGNvbG9yXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9IGVsc2UgaWYgKCdkeW5hbWljJyBpbiBjb2xvciAmJiBjb2xvci5keW5hbWljICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBub3JtYWxpemVDb2xvciA9IHJlcXVpcmUoJy4vbm9ybWFsaXplQ29sb3InKTtcblxuICAgIC8vIGEgZHluYW1pYywgYXBwZWFyYW5jZSBhd2FyZSBjb2xvclxuICAgIGNvbnN0IGR5bmFtaWMgPSBjb2xvci5keW5hbWljO1xuICAgIGNvbnN0IGR5bmFtaWNDb2xvcjogTmF0aXZlQ29sb3JWYWx1ZSA9IHtcbiAgICAgIGR5bmFtaWM6IHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICBsaWdodDogbm9ybWFsaXplQ29sb3IoZHluYW1pYy5saWdodCksXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgZGFyazogbm9ybWFsaXplQ29sb3IoZHluYW1pYy5kYXJrKSxcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICBoaWdoQ29udHJhc3RMaWdodDogbm9ybWFsaXplQ29sb3IoZHluYW1pYy5oaWdoQ29udHJhc3RMaWdodCksXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgaGlnaENvbnRyYXN0RGFyazogbm9ybWFsaXplQ29sb3IoZHluYW1pYy5oaWdoQ29udHJhc3REYXJrKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZHluYW1pY0NvbG9yO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgcHJvY2Vzc0NvbG9yT2JqZWN0ID0gKFxuICBjb2xvcjogTmF0aXZlQ29sb3JWYWx1ZSxcbik6ID9OYXRpdmVDb2xvclZhbHVlID0+IHtcbiAgaWYgKCdkeW5hbWljJyBpbiBjb2xvciAmJiBjb2xvci5keW5hbWljICE9IG51bGwpIHtcbiAgICBjb25zdCBwcm9jZXNzQ29sb3IgPSByZXF1aXJlKCcuL3Byb2Nlc3NDb2xvcicpLmRlZmF1bHQ7XG4gICAgY29uc3QgZHluYW1pYyA9IGNvbG9yLmR5bmFtaWM7XG4gICAgY29uc3QgZHluYW1pY0NvbG9yOiBOYXRpdmVDb2xvclZhbHVlID0ge1xuICAgICAgZHluYW1pYzoge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgICAgIGxpZ2h0OiBwcm9jZXNzQ29sb3IoZHluYW1pYy5saWdodCksXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgZGFyazogcHJvY2Vzc0NvbG9yKGR5bmFtaWMuZGFyayksXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgaGlnaENvbnRyYXN0TGlnaHQ6IHByb2Nlc3NDb2xvcihkeW5hbWljLmhpZ2hDb250cmFzdExpZ2h0KSxcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICBoaWdoQ29udHJhc3REYXJrOiBwcm9jZXNzQ29sb3IoZHluYW1pYy5oaWdoQ29udHJhc3REYXJrKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZHluYW1pY0NvbG9yO1xuICB9XG4gIHJldHVybiBjb2xvcjtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQXVCTyxJQUFNQSxhQUFhLEdBQUFDLE9BQUEsQ0FBQUQsYUFBQSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFBLEVBQTRDO0VBQUEsU0FBQUUsSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBckNDLEtBQUssT0FBQUMsS0FBQSxDQUFBSixJQUFBLEdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7SUFBTEYsS0FBSyxDQUFBRSxJQUFBLElBQUFKLFNBQUEsQ0FBQUksSUFBQTtFQUFBO0VBQ3BDLE9BQU87SUFBQ0MsUUFBUSxFQUFFSDtFQUFLLENBQUM7QUFDMUIsQ0FBQztBQVNNLElBQU1JLHNCQUFzQixHQUFBUixPQUFBLENBQUFRLHNCQUFBLEdBQUcsU0FBekJBLHNCQUFzQkEsQ0FDakNDLEtBQWtDLEVBQ25CO0VBQ2YsT0FBTztJQUNMQyxPQUFPLEVBQUU7TUFDUEMsS0FBSyxFQUFFRixLQUFLLENBQUNFLEtBQUs7TUFDbEJDLElBQUksRUFBRUgsS0FBSyxDQUFDRyxJQUFJO01BQ2hCQyxpQkFBaUIsRUFBRUosS0FBSyxDQUFDSSxpQkFBaUI7TUFDMUNDLGdCQUFnQixFQUFFTCxLQUFLLENBQUNLO0lBQzFCO0VBQ0YsQ0FBQztBQUNILENBQUM7QUFFTSxJQUFNQyxvQkFBb0IsR0FBQWYsT0FBQSxDQUFBZSxvQkFBQSxHQUFHLFNBQXZCQSxvQkFBb0JBLENBQy9CQyxLQUF1QixFQUNFO0VBQ3pCLElBQUksVUFBVSxJQUFJQSxLQUFLLEVBQUU7SUFFdkIsT0FBT0EsS0FBSztFQUNkLENBQUMsTUFBTSxJQUFJLFNBQVMsSUFBSUEsS0FBSyxJQUFJQSxLQUFLLENBQUNOLE9BQU8sS0FBS08sU0FBUyxFQUFFO0lBQzVELElBQU1DLGNBQWMsR0FBR0MsT0FBTyxtQkFBbUIsQ0FBQztJQUdsRCxJQUFNVCxPQUFPLEdBQUdNLEtBQUssQ0FBQ04sT0FBTztJQUM3QixJQUFNVSxZQUE4QixHQUFHO01BQ3JDVixPQUFPLEVBQUU7UUFFUEMsS0FBSyxFQUFFTyxjQUFjLENBQUNSLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDO1FBRXBDQyxJQUFJLEVBQUVNLGNBQWMsQ0FBQ1IsT0FBTyxDQUFDRSxJQUFJLENBQUM7UUFFbENDLGlCQUFpQixFQUFFSyxjQUFjLENBQUNSLE9BQU8sQ0FBQ0csaUJBQWlCLENBQUM7UUFFNURDLGdCQUFnQixFQUFFSSxjQUFjLENBQUNSLE9BQU8sQ0FBQ0ksZ0JBQWdCO01BQzNEO0lBQ0YsQ0FBQztJQUNELE9BQU9NLFlBQVk7RUFDckI7RUFFQSxPQUFPLElBQUk7QUFDYixDQUFDO0FBRU0sSUFBTUMsa0JBQWtCLEdBQUFyQixPQUFBLENBQUFxQixrQkFBQSxHQUFHLFNBQXJCQSxrQkFBa0JBLENBQzdCTCxLQUF1QixFQUNEO0VBQ3RCLElBQUksU0FBUyxJQUFJQSxLQUFLLElBQUlBLEtBQUssQ0FBQ04sT0FBTyxJQUFJLElBQUksRUFBRTtJQUMvQyxJQUFNWSxZQUFZLEdBQUdILE9BQU8saUJBQWlCLENBQUMsQ0FBQ0ksT0FBTztJQUN0RCxJQUFNYixPQUFPLEdBQUdNLEtBQUssQ0FBQ04sT0FBTztJQUM3QixJQUFNVSxZQUE4QixHQUFHO01BQ3JDVixPQUFPLEVBQUU7UUFFUEMsS0FBSyxFQUFFVyxZQUFZLENBQUNaLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDO1FBRWxDQyxJQUFJLEVBQUVVLFlBQVksQ0FBQ1osT0FBTyxDQUFDRSxJQUFJLENBQUM7UUFFaENDLGlCQUFpQixFQUFFUyxZQUFZLENBQUNaLE9BQU8sQ0FBQ0csaUJBQWlCLENBQUM7UUFFMURDLGdCQUFnQixFQUFFUSxZQUFZLENBQUNaLE9BQU8sQ0FBQ0ksZ0JBQWdCO01BQ3pEO0lBQ0YsQ0FBQztJQUNELE9BQU9NLFlBQVk7RUFDckI7RUFDQSxPQUFPSixLQUFLO0FBQ2QsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==