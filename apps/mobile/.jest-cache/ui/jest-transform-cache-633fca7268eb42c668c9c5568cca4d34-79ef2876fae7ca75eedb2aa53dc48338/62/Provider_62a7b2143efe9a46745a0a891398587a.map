{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_rnTokens","_jsxRuntime","_adapters","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ThemeCtx","createContext","ThemeProvider","exports","_ref","_Appearance$getColorS","scheme","children","auto","Appearance","getColorScheme","value","useMemo","createTheme","jsx","Provider","useTheme","ctx","React","useContext","Error"],"sources":["Provider.tsx"],"sourcesContent":["/**\n * ðŸŽ¨ UNIFIED THEME PROVIDER\n * Single source of truth for theme management in the mobile app\n */\n\nimport React, { createContext, useContext, useMemo } from \"react\";\nimport { Appearance, type ColorSchemeName } from \"react-native\";\nimport type { Theme, ColorScheme } from \"./types\";\nimport { createTheme } from \"./rnTokens\";\n\nconst ThemeCtx = createContext<Theme | null>(null);\n\nexport const ThemeProvider: React.FC<{\n  scheme?: ColorScheme;\n  children: React.ReactNode;\n}> = ({ scheme, children }) => {\n  const auto: ColorScheme = ((Appearance.getColorScheme()) ??\n    \"light\") as ColorScheme;\n  const value = useMemo(() => createTheme(scheme ?? auto), [scheme, auto]);\n  return <ThemeCtx.Provider value={value}>{children}</ThemeCtx.Provider>;\n};\n\nexport const useTheme = (): Theme => {\n  const ctx = React.useContext(ThemeCtx);\n  if (!ctx) throw new Error(\"useTheme must be used within <ThemeProvider>\");\n  return ctx;\n};\n\n// Re-export adapter utilities for backward compatibility\nexport { getExtendedColors, getThemeColors, getIsDark } from \"./adapters\";\n\n// Additional type exports for components expecting these types\nexport type { \n  SemanticColors, \n  Theme,\n  ColorScheme,\n  ThemeMode,\n  ThemeContextValue,\n} from \"./types\";\n\nexport type { ExtendedColors } from \"./adapters\";\n\nexport type DynamicColors = import(\"./types\").SemanticColors;\nexport type ThemeColors = import(\"./adapters\").ExtendedColors;\n\n// Shadow and Typography types for backward compatibility\nexport type EnhancedShadows = Record<string, unknown>;\nexport type EnhancedTypography = Record<string, unknown>;\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAEA,IAAAE,SAAA,GAAAF,OAAA;AAAyC,IAAAG,WAAA,GAAAH,OAAA;AAqBzC,IAAAI,SAAA,GAAAJ,OAAA;AAA0E,SAAAD,wBAAAM,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAR,uBAAA,YAAAA,wBAAAM,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAC,OAAA,EAAAV,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,UAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,GAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,EAAAQ,CAAA,cAAAM,EAAA,IAAAd,CAAA,gBAAAc,EAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,EAAA,OAAAP,CAAA,IAAAD,CAAA,GAAAW,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAnB,CAAA,EAAAc,EAAA,OAAAP,CAAA,CAAAK,GAAA,IAAAL,CAAA,CAAAM,GAAA,IAAAP,CAAA,CAAAE,CAAA,EAAAM,EAAA,EAAAP,CAAA,IAAAC,CAAA,CAAAM,EAAA,IAAAd,CAAA,CAAAc,EAAA,WAAAN,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAnB1E,IAAMmB,QAAQ,GAAG,IAAAC,oBAAa,EAAe,IAAI,CAAC;AAE3C,IAAMC,aAGX,GAAAC,OAAA,CAAAD,aAAA,GAAG,SAHQA,aAGXA,CAAAE,IAAA,EAA6B;EAAA,IAAAC,qBAAA;EAAA,IAAvBC,MAAM,GAAAF,IAAA,CAANE,MAAM;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EACtB,IAAMC,IAAiB,IAAAH,qBAAA,GAAKI,uBAAU,CAACC,cAAc,CAAC,CAAC,YAAAL,qBAAA,GACrD,OAAuB;EACzB,IAAMM,KAAK,GAAG,IAAAC,cAAO,EAAC;IAAA,OAAM,IAAAC,qBAAW,EAACP,MAAM,WAANA,MAAM,GAAIE,IAAI,CAAC;EAAA,GAAE,CAACF,MAAM,EAAEE,IAAI,CAAC,CAAC;EACxE,OAAO,IAAA9B,WAAA,CAAAoC,GAAA,EAACd,QAAQ,CAACe,QAAQ;IAACJ,KAAK,EAAEA,KAAM;IAAAJ,QAAA,EAAEA;EAAQ,CAAoB,CAAC;AACxE,CAAC;AAEM,IAAMS,QAAQ,GAAAb,OAAA,CAAAa,QAAA,GAAG,SAAXA,QAAQA,CAAA,EAAgB;EACnC,IAAMC,GAAG,GAAGC,cAAK,CAACC,UAAU,CAACnB,QAAQ,CAAC;EACtC,IAAI,CAACiB,GAAG,EAAE,MAAM,IAAIG,KAAK,CAAC,8CAA8C,CAAC;EACzE,OAAOH,GAAG;AACZ,CAAC","ignoreList":[]}