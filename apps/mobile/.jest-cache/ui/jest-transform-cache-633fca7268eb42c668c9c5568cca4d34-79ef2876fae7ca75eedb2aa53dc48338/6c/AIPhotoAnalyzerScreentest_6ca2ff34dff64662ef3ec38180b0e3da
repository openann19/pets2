313cf01e7edc096fca919294b926c150
"use strict";

_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    useAuthStore: jest.fn()
  };
});
_getJestObj().mock("../../services/api", function () {
  return {
    api: {
      ai: {
        analyzePhotos: jest.fn()
      }
    }
  };
});
_getJestObj().mock("expo-image-picker", function () {
  return {
    requestMediaLibraryPermissionsAsync: jest.fn(),
    requestCameraPermissionsAsync: jest.fn(),
    launchImageLibraryAsync: jest.fn(),
    launchCameraAsync: jest.fn(),
    MediaTypeOptions: {
      Images: "Images"
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _core = require("@pawfectmatch/core");
var _AIPhotoAnalyzerScreen = _interopRequireDefault(require("../AIPhotoAnalyzerScreen"));
var _api = require("../../services/api");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  goBack: jest.fn(),
  navigate: jest.fn()
};
var mockUser = {
  _id: "user123",
  name: "Test User",
  email: "test@example.com"
};
describe("AIPhotoAnalyzerScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _core.useAuthStore.mockReturnValue({
      user: mockUser
    });
  });
  var renderComponent = function renderComponent() {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AIPhotoAnalyzerScreen.default, {
      navigation: mockNavigation
    }));
  };
  describe("Rendering", function () {
    it("renders correctly with initial state", function () {
      var _renderComponent = renderComponent(),
        getByText = _renderComponent.getByText,
        getByTestId = _renderComponent.getByTestId;
      expect(getByText("AI Photo Analyzer")).toBeTruthy();
      expect(getByText("ðŸ“· Select Pet Photos")).toBeTruthy();
      expect(getByText("Take Photo")).toBeTruthy();
      expect(getByText("From Gallery")).toBeTruthy();
      expect(getByTestId("back-button")).toBeTruthy();
    });
    it("shows photo selection instructions", function () {
      var _renderComponent2 = renderComponent(),
        getByText = _renderComponent2.getByText;
      expect(getByText(/Upload up to 5 photos of your pet for AI analysis/)).toBeTruthy();
      expect(getByText(/Include clear, well-lit photos for best results/)).toBeTruthy();
    });
  });
  describe("Photo Selection", function () {
    it("requests camera permissions when taking photo", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestCameraPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchCameraAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "camera-photo-uri"
        }]
      });
      var _renderComponent3 = renderComponent(),
        getByText = _renderComponent3.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Take Photo"));
      }));
      expect(ImagePicker.requestCameraPermissionsAsync).toHaveBeenCalled();
    }));
    it("requests media library permissions when selecting from gallery", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "gallery-photo-uri"
        }]
      });
      var _renderComponent4 = renderComponent(),
        getByText = _renderComponent4.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      expect(ImagePicker.requestMediaLibraryPermissionsAsync).toHaveBeenCalled();
    }));
    it("shows permission alert when camera permission is denied", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestCameraPermissionsAsync.mockResolvedValue({
        status: "denied"
      });
      var _renderComponent5 = renderComponent(),
        getByText = _renderComponent5.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Take Photo"));
      }));
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Permission Required", "We need access to your camera to take pet photos.", [{
        text: "OK"
      }]);
    }));
    it("shows permission alert when media library permission is denied", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "denied"
      });
      var _renderComponent6 = renderComponent(),
        getByText = _renderComponent6.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Permission Required", "We need access to your photo library to analyze pet photos.", [{
        text: "OK"
      }]);
    }));
    it("adds selected photos to the list", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }, {
          uri: "photo2-uri"
        }]
      });
      var _renderComponent7 = renderComponent(),
        getByText = _renderComponent7.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Analyze Photos")).toBeTruthy();
      });
    }));
    it("limits photos to maximum of 5", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }, {
          uri: "photo2-uri"
        }, {
          uri: "photo3-uri"
        }, {
          uri: "photo4-uri"
        }, {
          uri: "photo5-uri"
        }, {
          uri: "photo6-uri"
        }]
      });
      var _renderComponent8 = renderComponent(),
        getByText = _renderComponent8.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Add Photo")).toBeTruthy();
      });
    }));
    it("removes photo when remove button is pressed", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }]
      });
      var _renderComponent9 = renderComponent(),
        getByText = _renderComponent9.getByText,
        getByTestId = _renderComponent9.getByTestId;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByTestId("remove-photo-0"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Add Photo")).toBeTruthy();
      });
    }));
  });
  describe("Photo Analysis", function () {
    it("shows error when no photos are selected for analysis", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent0 = renderComponent(),
        getByText = _renderComponent0.getByText;
      var analyzeButton = getByText("Analyze Photos");
      _reactNative.fireEvent.press(analyzeButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("No Photos", "Please select at least one photo to analyze.");
      });
    }));
    it("calls API with correct parameters when analyzing photos", (0, _asyncToGenerator2.default)(function* () {
      var mockAnalyzePhotos = jest.fn().mockResolvedValue({
        breed_analysis: {
          primary_breed: "Golden Retriever",
          confidence: 0.95
        },
        health_assessment: {
          age_estimate: 3,
          health_score: 0.9,
          recommendations: ["Regular exercise recommended"]
        },
        photo_quality: {
          overall_score: 0.85,
          lighting_score: 0.9,
          composition_score: 0.8,
          clarity_score: 0.85
        },
        matchability_score: 0.88,
        ai_insights: ["High quality photo", "Good lighting"]
      });
      _api.api.ai.analyzePhotos.mockImplementation(mockAnalyzePhotos);
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }]
      });
      var _renderComponent1 = renderComponent(),
        getByText = _renderComponent1.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Photos"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAnalyzePhotos).toHaveBeenCalledWith(["photo1-uri"]);
      });
    }));
    it("displays analysis results when API call succeeds", (0, _asyncToGenerator2.default)(function* () {
      var mockAnalysisResult = {
        breed_analysis: {
          primary_breed: "Golden Retriever",
          confidence: 0.95,
          secondary_breeds: [{
            breed: "Labrador",
            confidence: 0.3
          }]
        },
        health_assessment: {
          age_estimate: 3,
          health_score: 0.9,
          recommendations: ["Regular exercise recommended", "Annual vet checkup"]
        },
        photo_quality: {
          overall_score: 0.85,
          lighting_score: 0.9,
          composition_score: 0.8,
          clarity_score: 0.85
        },
        matchability_score: 0.88,
        ai_insights: ["High quality photo", "Good lighting", "Clear subject"]
      };
      _api.api.ai.analyzePhotos.mockResolvedValue(mockAnalysisResult);
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }]
      });
      var _renderComponent10 = renderComponent(),
        getByText = _renderComponent10.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Photos"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("ðŸŽ¯ Analysis Results")).toBeTruthy();
        expect(getByText("Golden Retriever")).toBeTruthy();
        expect(getByText("95% confidence")).toBeTruthy();
        expect(getByText("3 years")).toBeTruthy();
        expect(getByText("90/100")).toBeTruthy();
      });
    }));
    it("shows loading state during analysis", (0, _asyncToGenerator2.default)(function* () {
      var resolvePromise;
      var promise = new Promise(function (resolve) {
        resolvePromise = resolve;
      });
      _api.api.ai.analyzePhotos.mockReturnValue(promise);
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }]
      });
      var _renderComponent11 = renderComponent(),
        getByText = _renderComponent11.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Photos"));
      }));
      expect(getByText("Analyzing...")).toBeTruthy();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        resolvePromise({
          breed_analysis: {
            primary_breed: "Test",
            confidence: 0.8
          },
          health_assessment: {
            age_estimate: 2,
            health_score: 0.8,
            recommendations: []
          },
          photo_quality: {
            overall_score: 0.8,
            lighting_score: 0.8,
            composition_score: 0.8,
            clarity_score: 0.8
          },
          matchability_score: 0.8,
          ai_insights: []
        });
      }));
    }));
    it("shows error message when API call fails", (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error("Analysis failed");
      _api.api.ai.analyzePhotos.mockRejectedValue(mockError);
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }]
      });
      var _renderComponent12 = renderComponent(),
        getByText = _renderComponent12.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Photos"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Analysis failed")).toBeTruthy();
      });
    }));
  });
  describe("Results Display", function () {
    it("shows matchability score with correct color coding", (0, _asyncToGenerator2.default)(function* () {
      var mockAnalysisResult = {
        breed_analysis: {
          primary_breed: "Test",
          confidence: 0.8
        },
        health_assessment: {
          age_estimate: 2,
          health_score: 0.8,
          recommendations: []
        },
        photo_quality: {
          overall_score: 0.8,
          lighting_score: 0.8,
          composition_score: 0.8,
          clarity_score: 0.8
        },
        matchability_score: 0.85,
        ai_insights: []
      };
      _api.api.ai.analyzePhotos.mockResolvedValue(mockAnalysisResult);
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }]
      });
      var _renderComponent13 = renderComponent(),
        getByText = _renderComponent13.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Photos"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("85/100")).toBeTruthy();
        expect(getByText("Excellent for matching!")).toBeTruthy();
      });
    }));
    it("displays secondary breeds when available", (0, _asyncToGenerator2.default)(function* () {
      var mockAnalysisResult = {
        breed_analysis: {
          primary_breed: "Golden Retriever",
          confidence: 0.7,
          secondary_breeds: [{
            breed: "Labrador",
            confidence: 0.3
          }, {
            breed: "Poodle",
            confidence: 0.2
          }]
        },
        health_assessment: {
          age_estimate: 2,
          health_score: 0.8,
          recommendations: []
        },
        photo_quality: {
          overall_score: 0.8,
          lighting_score: 0.8,
          composition_score: 0.8,
          clarity_score: 0.8
        },
        matchability_score: 0.8,
        ai_insights: []
      };
      _api.api.ai.analyzePhotos.mockResolvedValue(mockAnalysisResult);
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }]
      });
      var _renderComponent14 = renderComponent(),
        getByText = _renderComponent14.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Photos"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Possible Mixed Breeds:")).toBeTruthy();
        expect(getByText("Labrador")).toBeTruthy();
        expect(getByText("Poodle")).toBeTruthy();
        expect(getByText("30%")).toBeTruthy();
        expect(getByText("20%")).toBeTruthy();
      });
    }));
    it("shows AI insights when available", (0, _asyncToGenerator2.default)(function* () {
      var mockAnalysisResult = {
        breed_analysis: {
          primary_breed: "Test",
          confidence: 0.8
        },
        health_assessment: {
          age_estimate: 2,
          health_score: 0.8,
          recommendations: []
        },
        photo_quality: {
          overall_score: 0.8,
          lighting_score: 0.8,
          composition_score: 0.8,
          clarity_score: 0.8
        },
        matchability_score: 0.8,
        ai_insights: ["High quality photo with good lighting", "Clear subject focus", "Professional composition"]
      };
      _api.api.ai.analyzePhotos.mockResolvedValue(mockAnalysisResult);
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }]
      });
      var _renderComponent15 = renderComponent(),
        getByText = _renderComponent15.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Photos"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("ðŸ¤– AI Insights")).toBeTruthy();
        expect(getByText("â€¢ High quality photo with good lighting")).toBeTruthy();
        expect(getByText("â€¢ Clear subject focus")).toBeTruthy();
        expect(getByText("â€¢ Professional composition")).toBeTruthy();
      });
    }));
  });
  describe("Reset Functionality", function () {
    it("resets analysis when new analysis button is pressed", (0, _asyncToGenerator2.default)(function* () {
      var mockAnalysisResult = {
        breed_analysis: {
          primary_breed: "Test",
          confidence: 0.8
        },
        health_assessment: {
          age_estimate: 2,
          health_score: 0.8,
          recommendations: []
        },
        photo_quality: {
          overall_score: 0.8,
          lighting_score: 0.8,
          composition_score: 0.8,
          clarity_score: 0.8
        },
        matchability_score: 0.8,
        ai_insights: []
      };
      _api.api.ai.analyzePhotos.mockResolvedValue(mockAnalysisResult);
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "photo1-uri"
        }]
      });
      var _renderComponent16 = renderComponent(),
        getByText = _renderComponent16.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Photos"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("ðŸŽ¯ Analysis Results")).toBeTruthy();
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("New Analysis"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("ðŸ“· Select Pet Photos")).toBeTruthy();
      });
    }));
  });
  describe("Navigation", function () {
    it("navigates back when back button is pressed", function () {
      var _renderComponent17 = renderComponent(),
        getByTestId = _renderComponent17.getByTestId;
      _reactNative.fireEvent.press(getByTestId("back-button"));
      expect(mockNavigation.goBack).toHaveBeenCalled();
    });
  });
  describe("Error Handling", function () {
    it("handles image picker errors gracefully", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockRejectedValue(new Error("Image picker error"));
      var _renderComponent18 = renderComponent(),
        getByText = _renderComponent18.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("From Gallery"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Failed to select images. Please try again.")).toBeTruthy();
      });
    }));
    it("handles camera errors gracefully", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestCameraPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchCameraAsync.mockRejectedValue(new Error("Camera error"));
      var _renderComponent19 = renderComponent(),
        getByText = _renderComponent19.getByText;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Take Photo"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Failed to take photo. Please try again.")).toBeTruthy();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,