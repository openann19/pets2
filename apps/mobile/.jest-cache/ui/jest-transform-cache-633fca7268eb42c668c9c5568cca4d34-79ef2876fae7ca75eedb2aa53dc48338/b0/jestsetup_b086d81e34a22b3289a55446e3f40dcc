729a87a404ecffda904df69799a668f8
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('react-native/Libraries/Animated/Animated', function () {
  var AnimatedMock = require("./__mocks__/Animated.js");
  return AnimatedMock;
});
_getJestObj().mock("./src/services/logger", function () {
  return {
    logger: {
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn(),
      debug: jest.fn(),
      security: jest.fn(),
      bufferOfflineLog: jest.fn().mockResolvedValue(undefined),
      flushOfflineLogs: jest.fn().mockResolvedValue(undefined),
      setUserInfo: jest.fn(),
      clearUserInfo: jest.fn(),
      getSessionId: jest.fn().mockReturnValue('test-session'),
      destroy: jest.fn()
    }
  };
});
require("@testing-library/jest-native/extend-expect");
require("./jest.setup.core");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.ReanimatedDataMock = {
  now: function now() {
    return Date.now();
  }
};
require("./jest.setup.mocks.native");
require("./jest.setup.mocks.expo");
require("./jest.setup.mocks.navigation");
require("./jest.setup.mocks.external");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJBbmltYXRlZE1vY2siLCJyZXF1aXJlIiwibG9nZ2VyIiwiaW5mbyIsImplc3QiLCJmbiIsIndhcm4iLCJlcnJvciIsImRlYnVnIiwic2VjdXJpdHkiLCJidWZmZXJPZmZsaW5lTG9nIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJ1bmRlZmluZWQiLCJmbHVzaE9mZmxpbmVMb2dzIiwic2V0VXNlckluZm8iLCJjbGVhclVzZXJJbmZvIiwiZ2V0U2Vzc2lvbklkIiwibW9ja1JldHVyblZhbHVlIiwiZGVzdHJveSIsIl9yZXF1aXJlIiwiZ2xvYmFsIiwiUmVhbmltYXRlZERhdGFNb2NrIiwibm93IiwiRGF0ZSJdLCJzb3VyY2VzIjpbImplc3Quc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYWluIEplc3Qgc2V0dXAgZmlsZVxuICogTG9hZHMgbW9kdWxhciBzZXR1cCBmaWxlcyBjb25kaXRpb25hbGx5IGJhc2VkIG9uIHRlc3QgbmVlZHNcbiAqL1xuXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUvZXh0ZW5kLWV4cGVjdCc7XG5cbi8vIFJlYWN0IE5hdGl2ZSBSZWFuaW1hdGVkIHJlY29tbWVuZGVkIG1vY2sgdHdlYWtcbi8vIEB0cy1pZ25vcmVcbmdsb2JhbC5SZWFuaW1hdGVkRGF0YU1vY2sgPSB7IG5vdzogKCkgPT4gRGF0ZS5ub3coKSB9O1xuXG4vLyBTaWxlbmNlIFJOIEFuaW1hdGVkIHdhcm5pbmdzIGluIHRlc3RzXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuLy8gRW5zdXJlIEFuaW1hdGVkIG1vY2sgaXMgbG9hZGVkIGVhcmx5XG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvQW5pbWF0ZWQnLCAoKSA9PiB7XG4gIGNvbnN0IEFuaW1hdGVkTW9jayA9IHJlcXVpcmUoJy4vX19tb2Nrc19fL0FuaW1hdGVkLmpzJyk7XG4gIHJldHVybiBBbmltYXRlZE1vY2s7XG59KTtcblxuLy8gTW9jayBsb2dnZXIgZ2xvYmFsbHkgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wc1xuamVzdC5tb2NrKCcuL3NyYy9zZXJ2aWNlcy9sb2dnZXInLCAoKSA9PiAoe1xuICBsb2dnZXI6IHtcbiAgICBpbmZvOiBqZXN0LmZuKCksXG4gICAgd2FybjogamVzdC5mbigpLFxuICAgIGVycm9yOiBqZXN0LmZuKCksXG4gICAgZGVidWc6IGplc3QuZm4oKSxcbiAgICBzZWN1cml0eTogamVzdC5mbigpLFxuICAgIGJ1ZmZlck9mZmxpbmVMb2c6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICAgIGZsdXNoT2ZmbGluZUxvZ3M6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICAgIHNldFVzZXJJbmZvOiBqZXN0LmZuKCksXG4gICAgY2xlYXJVc2VySW5mbzogamVzdC5mbigpLFxuICAgIGdldFNlc3Npb25JZDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgndGVzdC1zZXNzaW9uJyksXG4gICAgZGVzdHJveTogamVzdC5mbigpLFxuICB9XG59KSk7XG5cbi8vIEFsd2F5cyBsb2FkIGNvcmUgc2V0dXBcbmltcG9ydCAnLi9qZXN0LnNldHVwLmNvcmUnO1xuXG4vLyBMb2FkIGFsbCBtb2NrcyAtIG1vZHVsYXIgZmlsZXMgaGFuZGxlIGNvbmRpdGlvbmFsIGxvZ2ljIGludGVybmFsbHlcbi8vIFVzaW5nIHJlcXVpcmUgdG8gZW5zdXJlIHByb3BlciBsb2FkIG9yZGVyXG5yZXF1aXJlKCcuL2plc3Quc2V0dXAubW9ja3MubmF0aXZlJyk7XG5yZXF1aXJlKCcuL2plc3Quc2V0dXAubW9ja3MuZXhwbycpO1xucmVxdWlyZSgnLi9qZXN0LnNldHVwLm1vY2tzLm5hdmlnYXRpb24nKTtcbnJlcXVpcmUoJy4vamVzdC5zZXR1cC5tb2Nrcy5leHRlcm5hbCcpO1xuIl0sIm1hcHBpbmdzIjoiOztBQVlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzREFBc0QsQ0FBQztBQUdqRUQsV0FBQSxHQUFLQyxJQUFJLENBQUMsMENBQTBDLEVBQUUsWUFBTTtFQUMxRCxJQUFNQyxZQUFZLEdBQUdDLE9BQU8sMEJBQTBCLENBQUM7RUFDdkQsT0FBT0QsWUFBWTtBQUNyQixDQUFDLENBQUM7QUFHRkYsV0FBQSxHQUFLQyxJQUFJLDBCQUEwQjtFQUFBLE9BQU87SUFDeENHLE1BQU0sRUFBRTtNQUNOQyxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDZkMsSUFBSSxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2ZFLEtBQUssRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNoQkcsS0FBSyxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2hCSSxRQUFRLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDbkJLLGdCQUFnQixFQUFFTixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNNLGlCQUFpQixDQUFDQyxTQUFTLENBQUM7TUFDeERDLGdCQUFnQixFQUFFVCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNNLGlCQUFpQixDQUFDQyxTQUFTLENBQUM7TUFDeERFLFdBQVcsRUFBRVYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUN0QlUsYUFBYSxFQUFFWCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ3hCVyxZQUFZLEVBQUVaLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ1ksZUFBZSxDQUFDLGNBQWMsQ0FBQztNQUN2REMsT0FBTyxFQUFFZCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNuQjtFQUNGLENBQUM7QUFBQSxDQUFDLENBQUM7QUE5QkhKLE9BQUE7QUFpQ0FBLE9BQUE7QUFBMkIsU0FBQUgsWUFBQTtFQUFBLElBQUFxQixRQUFBLEdBQUFsQixPQUFBO0lBQUFHLElBQUEsR0FBQWUsUUFBQSxDQUFBZixJQUFBO0VBQUFOLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFNLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQTdCM0JnQixNQUFNLENBQUNDLGtCQUFrQixHQUFHO0VBQUVDLEdBQUcsRUFBRSxTQUFMQSxHQUFHQSxDQUFBO0lBQUEsT0FBUUMsSUFBSSxDQUFDRCxHQUFHLENBQUMsQ0FBQztFQUFBO0FBQUMsQ0FBQztBQWlDckRyQixPQUFPLDRCQUE0QixDQUFDO0FBQ3BDQSxPQUFPLDBCQUEwQixDQUFDO0FBQ2xDQSxPQUFPLGdDQUFnQyxDQUFDO0FBQ3hDQSxPQUFPLDhCQUE4QixDQUFDIiwiaWdub3JlTGlzdCI6W119