f60bc54fa4d0602af78f5aa4e7611de2
"use strict";

_getJestObj().mock('@react-navigation/native', function () {
  return {
    useScrollToTop: _globals.jest.fn()
  };
});
_getJestObj().mock("../EliteContainer", function () {
  return {
    EliteContainer: function EliteContainer(_ref) {
      var children = _ref.children;
      return children;
    }
  };
});
_getJestObj().mock("../../../animation", function () {
  return {
    GlobalStyles: {
      scrollContainer: {}
    },
    Colors: {
      gradientPrimary: '#000'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _EliteScrollContainer = require("../EliteScrollContainer");
var _globals = require("@jest/globals");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockScrollToTop = _globals.jest.fn();
(0, _globals.describe)('EliteScrollContainer - Ref Forwarding', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  var TestComponent = function TestComponent() {
    var scrollRef = (0, _react.useRef)(null);
    (0, _native.useScrollToTop)(scrollRef);
    return (0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
      ref: scrollRef,
      children: (0, _jsxRuntime.jsx)("div", {
        children: "Test Content"
      })
    });
  };
  (0, _globals.it)('should forward ref to ScrollView', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
      getByText = _render.getByText;
    (0, _globals.expect)(getByText('Test Content')).toBeTruthy();
    (0, _globals.expect)(_native.useScrollToTop).toHaveBeenCalled();
  });
  (0, _globals.it)('should scroll when ref method is called', (0, _asyncToGenerator2.default)(function* () {
    var scrollToMock = _globals.jest.fn();
    var TestComponentWithMock = function TestComponentWithMock() {
      var scrollRef = (0, _react.useRef)({
        scrollTo: scrollToMock
      });
      (0, _native.useScrollToTop)(scrollRef);
      return (0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
        ref: scrollRef,
        children: (0, _jsxRuntime.jsx)("div", {
          children: "Test Content"
        })
      });
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponentWithMock, {}));
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(scrollToMock).toBeDefined();
    });
  }));
  (0, _globals.it)('should forward all props to ScrollView', function () {
    var onScrollMock = _globals.jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
        onScroll: onScrollMock,
        showsVerticalScrollIndicator: true,
        children: (0, _jsxRuntime.jsx)("div", {
          children: "Test Content"
        })
      })),
      getByText = _render2.getByText;
    (0, _globals.expect)(getByText('Test Content')).toBeTruthy();
  });
  (0, _globals.it)('should handle children correctly', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_EliteScrollContainer.EliteScrollContainer, {
        children: [(0, _jsxRuntime.jsx)("div", {
          children: "Child 1"
        }), (0, _jsxRuntime.jsx)("div", {
          children: "Child 2"
        }), (0, _jsxRuntime.jsx)("div", {
          children: "Child 3"
        })]
      })),
      getByText = _render3.getByText;
    (0, _globals.expect)(getByText('Child 1')).toBeTruthy();
    (0, _globals.expect)(getByText('Child 2')).toBeTruthy();
    (0, _globals.expect)(getByText('Child 3')).toBeTruthy();
  });
  (0, _globals.it)('should apply contentContainerStyle', function () {
    var customStyle = {
      padding: 20
    };
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
        contentContainerStyle: customStyle,
        children: (0, _jsxRuntime.jsx)("div", {
          children: "Test Content"
        })
      })),
      container = _render4.container;
    (0, _globals.expect)(container).toBeTruthy();
  });
  (0, _globals.it)('should handle gradient prop correctly', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
        gradient: "primary",
        children: (0, _jsxRuntime.jsx)("div", {
          children: "Test Content"
        })
      })),
      getByText = _render5.getByText;
    (0, _globals.expect)(getByText('Test Content')).toBeTruthy();
  });
  (0, _globals.it)('should handle refreshControl prop', function () {
    var onRefreshMock = _globals.jest.fn();
    var RefreshControl = function RefreshControl() {
      return null;
    };
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
        refreshControl: (0, _jsxRuntime.jsx)(RefreshControl, {}),
        children: (0, _jsxRuntime.jsx)("div", {
          children: "Test Content"
        })
      })),
      getByText = _render6.getByText;
    (0, _globals.expect)(getByText('Test Content')).toBeTruthy();
  });
  (0, _globals.describe)('Scroll-to-Top Integration', function () {
    (0, _globals.it)('should work with useScrollToTop hook', function () {
      var TestComponent = function TestComponent() {
        var scrollRef = (0, _react.useRef)(null);
        _react.default.useEffect(function () {
          if (scrollRef.current) {
            scrollRef.current.scrollTo({
              y: 0,
              animated: true
            });
          }
        });
        return (0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
          ref: scrollRef,
          children: (0, _jsxRuntime.jsx)("div", {
            children: "Test Content"
          })
        });
      };
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {})),
        getByText = _render7.getByText;
      (0, _globals.expect)(getByText('Test Content')).toBeTruthy();
    });
    (0, _globals.it)('should handle scrollTo method calls', function () {
      var refValue = null;
      var TestComponent = function TestComponent() {
        var scrollRef = (0, _react.useRef)(null);
        _react.default.useEffect(function () {
          refValue = scrollRef.current;
        });
        return (0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
          ref: scrollRef,
          children: (0, _jsxRuntime.jsx)("div", {
            children: "Test Content"
          })
        });
      };
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {}));
      (0, _globals.expect)(refValue).toBeTruthy();
    });
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle null ref gracefully', function () {
      var TestComponent = function TestComponent() {
        var scrollRef = (0, _react.useRef)(null);
        return (0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
          ref: scrollRef,
          children: (0, _jsxRuntime.jsx)("div", {
            children: "Test Content"
          })
        });
      };
      (0, _globals.expect)(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestComponent, {}));
      }).not.toThrow();
    });
    (0, _globals.it)('should handle undefined children', function () {
      (0, _globals.expect)(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
          children: undefined
        }));
      }).not.toThrow();
    });
    (0, _globals.it)('should handle empty children', function () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {})),
        container = _render8.container;
      (0, _globals.expect)(container).toBeTruthy();
    });
    (0, _globals.it)('should handle rapid prop changes', function () {
      var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
          gradient: "primary",
          children: (0, _jsxRuntime.jsx)("div", {
            children: "Test Content"
          })
        })),
        rerender = _render9.rerender,
        getByText = _render9.getByText;
      rerender((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
        gradient: "secondary",
        children: (0, _jsxRuntime.jsx)("div", {
          children: "Test Content"
        })
      }));
      (0, _globals.expect)(getByText('Test Content')).toBeTruthy();
    });
  });
  (0, _globals.describe)('Accessibility', function () {
    (0, _globals.it)('should forward accessibility props', function () {
      var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
          accessible: true,
          accessibilityLabel: "Scroll Container",
          children: (0, _jsxRuntime.jsx)("div", {
            children: "Test Content"
          })
        })),
        getByText = _render0.getByText;
      (0, _globals.expect)(getByText('Test Content')).toBeTruthy();
    });
    (0, _globals.it)('should handle accessibilityRole prop', function () {
      var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
          accessibilityRole: "scrollbar",
          children: (0, _jsxRuntime.jsx)("div", {
            children: "Test Content"
          })
        })),
        getByText = _render1.getByText;
      (0, _globals.expect)(getByText('Test Content')).toBeTruthy();
    });
  });
  (0, _globals.describe)('Performance', function () {
    (0, _globals.it)('should handle large content efficiently', function () {
      var largeContent = Array.from({
        length: 100
      }, function (_, i) {
        return (0, _jsxRuntime.jsxs)("div", {
          children: ["Item ", i]
        }, i);
      });
      var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
          children: largeContent
        })),
        container = _render10.container;
      (0, _globals.expect)(container).toBeTruthy();
    });
    (0, _globals.it)('should not cause memory leaks with rapid updates', function () {
      var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
          children: (0, _jsxRuntime.jsx)("div", {
            children: "Test Content"
          })
        })),
        rerender = _render11.rerender,
        unmount = _render11.unmount;
      for (var i = 0; i < 50; i++) {
        rerender((0, _jsxRuntime.jsx)(_EliteScrollContainer.EliteScrollContainer, {
          children: (0, _jsxRuntime.jsxs)("div", {
            children: ["Test Content ", i]
          })
        }));
      }
      (0, _globals.expect)(function () {
        unmount();
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,