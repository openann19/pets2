20f62a61c48b76d2b49b2eb5501caf0c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeforeAfterSlider = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _vectorIcons = require("@expo/vector-icons");
var _expoBlur = require("expo-blur");
var _SmartImage = require("../common/SmartImage");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  SCREEN_W = _Dimensions$get.width;
var _worklet_4254833702622_init_data = {
  code: "function anonymous() {\n  const {\n    Haptics\n  } = this._closure;\n  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"Haptics\",\"_closure\",\"impactAsync\",\"ImpactFeedbackStyle\",\"Light\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx\"],\"mappings\":\"AA8Ba,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EACbD,OAAO,CAACE,WAAW,CAACF,OAAO,CAACG,mBAAmB,CAACC,KAAK,CAAC;AACxD\",\"ignoreList\":[]}"
};
var _worklet_7430242036389_init_data = {
  code: "function anonymous(e) {\n  const {\n    trackW,\n    x,\n    lastTick,\n    Haptics\n  } = this._closure;\n  const nx = Math.max(0, Math.min(trackW, x.value + e.changeX));\n  x.value = nx;\n  const p = Math.round(nx / trackW * 4);\n  if (p !== lastTick.current) {\n    lastTick.current = p;\n    Haptics.selectionAsync();\n  }\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"e\",\"trackW\",\"x\",\"lastTick\",\"Haptics\",\"_closure\",\"nx\",\"Math\",\"max\",\"min\",\"value\",\"changeX\",\"p\",\"round\",\"current\",\"selectionAsync\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx\"],\"mappings\":\"AAiCe,SAACA,SAAKA,CAAAC,CAAA;EAAA;IAAAC,MAAA;IAAAC,CAAA;IAAAC,QAAA;IAAAC;EAAA,SAAAC,QAAA;EACf,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAACR,MAAM,EAAEC,CAAC,CAACQ,KAAK,GAAIV,CAAC,CAASW,OAAO,CAAC,CAAC;EACtET,CAAC,CAACQ,KAAK,GAAGJ,EAAE;EACZ,MAAMM,CAAC,GAAGL,IAAI,CAACM,KAAK,CAAEP,EAAE,GAAGL,MAAM,GAAI,CAAC,CAAC;EACvC,IAAIW,CAAC,KAAKT,QAAQ,CAACW,OAAO,EAAE;IAC1BX,QAAQ,CAACW,OAAO,GAAGF,CAAC;IACpBR,OAAO,CAACW,cAAc,CAAC,CAAC;EAC1B;AACF\",\"ignoreList\":[]}"
};
var _worklet_9539659246793_init_data = {
  code: "function anonymous() {\n  const {\n    x,\n    trackW,\n    withSpring,\n    lastTick\n  } = this._closure;\n  const p = x.value / trackW;\n  if (Math.abs(p - 0.5) < 0.04) x.value = withSpring(trackW * 0.5);else if (p < 0.04) x.value = withSpring(0);else if (p > 0.96) x.value = withSpring(trackW);\n  lastTick.current = -1;\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"x\",\"trackW\",\"withSpring\",\"lastTick\",\"_closure\",\"p\",\"value\",\"Math\",\"abs\",\"current\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx\"],\"mappings\":\"AA0CW,SAAAA,SAAMA,CAAA;EAAA;IAAAC,CAAA;IAAAC,MAAA;IAAAC,UAAA;IAAAC;EAAA,SAAAC,QAAA;EAEX,MAAMC,CAAC,GAAGL,CAAC,CAACM,KAAK,GAAGL,MAAM;EAC1B,IAAIM,IAAI,CAACC,GAAG,CAACH,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,EAAEL,CAAC,CAACM,KAAK,GAAGJ,UAAU,CAACD,MAAM,GAAG,GAAG,CAAC,CAAC,KAC5D,IAAII,CAAC,GAAG,IAAI,EAAEL,CAAC,CAACM,KAAK,GAAGJ,UAAU,CAAC,CAAC,CAAC,CAAC,KACtC,IAAIG,CAAC,GAAG,IAAI,EAAEL,CAAC,CAACM,KAAK,GAAGJ,UAAU,CAACD,MAAM,CAAC;EAC/CE,QAAQ,CAACM,OAAO,GAAG,CAAC,CAAC;AACvB\",\"ignoreList\":[]}"
};
var _worklet_6195544876758_init_data = {
  code: "function anonymous() {\n  const {\n    x\n  } = this._closure;\n  return {\n    width: x.value\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"x\",\"_closure\",\"width\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx\"],\"mappings\":\"AAmDuC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC1CC,KAAK,EAAEF,CAAC,CAACG;EACX,CAAC;AAAA\",\"ignoreList\":[]}"
};
var _worklet_6709660442895_init_data = {
  code: "function anonymous() {\n  const {\n    x\n  } = this._closure;\n  return {\n    left: x.value - 18\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"x\",\"_closure\",\"left\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/BeforeAfterSlider.tsx\"],\"mappings\":\"AAuDuC,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC1CC,IAAI,EAAEF,CAAC,CAACG,KAAK,GAAG;EAClB,CAAC;AAAA\",\"ignoreList\":[]}"
};
var BeforeAfterSlider = exports.BeforeAfterSlider = function BeforeAfterSlider(_ref) {
  var originalUri = _ref.originalUri,
    editedUri = _ref.editedUri,
    onClose = _ref.onClose;
  var trackW = SCREEN_W;
  var x = (0, _reactNativeReanimated.useSharedValue)(trackW * 0.5);
  var lastTick = _react.default.useRef(-1);
  var pan = _reactNativeGestureHandler.Gesture.Pan().onBegin(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    };
    _f._closure = {
      Haptics: Haptics
    };
    _f.__initData = _worklet_4254833702622_init_data;
    _f.__workletHash = 4254833702622;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onUpdate(function () {
    var _e = [new global.Error(), -5, -27];
    var _f = function _f(e) {
      var nx = Math.max(0, Math.min(trackW, x.value + e.changeX));
      x.value = nx;
      var p = Math.round(nx / trackW * 4);
      if (p !== lastTick.current) {
        lastTick.current = p;
        Haptics.selectionAsync();
      }
    };
    _f._closure = {
      trackW: trackW,
      x: x,
      lastTick: lastTick,
      Haptics: Haptics
    };
    _f.__initData = _worklet_7430242036389_init_data;
    _f.__workletHash = 7430242036389;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onEnd(function () {
    var _e = [new global.Error(), -5, -27];
    var _f = function _f() {
      var p = x.value / trackW;
      if (Math.abs(p - 0.5) < 0.04) x.value = (0, _reactNativeReanimated.withSpring)(trackW * 0.5);else if (p < 0.04) x.value = (0, _reactNativeReanimated.withSpring)(0);else if (p > 0.96) x.value = (0, _reactNativeReanimated.withSpring)(trackW);
      lastTick.current = -1;
    };
    _f._closure = {
      x: x,
      trackW: trackW,
      withSpring: _reactNativeReanimated.withSpring,
      lastTick: lastTick
    };
    _f.__initData = _worklet_9539659246793_init_data;
    _f.__workletHash = 9539659246793;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var editedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        width: x.value
      };
    };
    _f._closure = {
      x: x
    };
    _f.__initData = _worklet_6195544876758_init_data;
    _f.__workletHash = 6195544876758;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var handleStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        left: x.value - 18
      };
    };
    _f._closure = {
      x: x
    };
    _f.__initData = _worklet_6709660442895_init_data;
    _f.__workletHash = 6709660442895;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.overlay,
    pointerEvents: "box-none",
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _reactNative.StyleSheet.absoluteFill,
      onTouchEnd: onClose
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.stage,
      children: [(0, _jsxRuntime.jsx)(_SmartImage.SmartImage, {
        source: {
          uri: originalUri
        },
        style: _reactNative.StyleSheet.absoluteFill,
        rounded: 0
      }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        style: [_reactNative.StyleSheet.absoluteFill, editedStyle, {
          overflow: 'hidden'
        }],
        children: (0, _jsxRuntime.jsx)(_SmartImage.SmartImage, {
          source: {
            uri: editedUri
          },
          style: _reactNative.StyleSheet.absoluteFill,
          rounded: 0
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.badge, {
          left: 12
        }],
        children: (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
          intensity: 30,
          style: styles.badgeInner,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.badgeText,
            children: "Before"
          })
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.badge, {
          right: 12
        }],
        children: (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
          intensity: 30,
          style: styles.badgeInner,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.badgeText,
            children: "After"
          })
        })
      }), (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
        gesture: pan,
        children: (0, _jsxRuntime.jsxs)(_reactNativeReanimated.default.View, {
          style: [styles.handle, handleStyle],
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.handleBar
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.handleKnob,
            children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
              name: "swap-horizontal",
              size: 16,
              color: "white"
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.handleBar
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.closePill,
        children: (0, _jsxRuntime.jsxs)(_expoBlur.BlurView, {
          intensity: 30,
          style: styles.closeInner,
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "close",
            size: 18,
            color: "white"
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.closeText,
            children: "Close compare"
          })]
        })
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  overlay: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {
    justifyContent: 'flex-end'
  }),
  stage: {
    width: '100%',
    height: '100%',
    backgroundColor: 'black'
  },
  handle: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    width: 36,
    alignItems: 'center',
    justifyContent: 'center'
  },
  handleBar: {
    width: 2,
    height: '20%',
    backgroundColor: 'rgba(255,255,255,0.6)',
    borderRadius: 2
  },
  handleKnob: {
    width: 36,
    height: 36,
    borderRadius: 18,
    marginVertical: 10,
    backgroundColor: 'rgba(255,255,255,0.25)',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.35)'
  },
  badge: {
    position: 'absolute',
    top: 12
  },
  badgeInner: {
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 999,
    backgroundColor: 'rgba(0,0,0,0.45)'
  },
  badgeText: {
    color: 'white',
    fontWeight: '700',
    fontSize: 12
  },
  closePill: {
    position: 'absolute',
    bottom: 16,
    alignSelf: 'center'
  },
  closeInner: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    paddingHorizontal: 14,
    paddingVertical: 10,
    borderRadius: 999,
    backgroundColor: 'rgba(0,0,0,0.45)'
  },
  closeText: {
    color: 'white',
    fontWeight: '700',
    fontSize: 12
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZUdlc3R1cmVIYW5kbGVyIiwiX3JlYWN0TmF0aXZlUmVhbmltYXRlZCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiSGFwdGljcyIsIl92ZWN0b3JJY29ucyIsIl9leHBvQmx1ciIsIl9TbWFydEltYWdlIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QyIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9EaW1lbnNpb25zJGdldCIsIkRpbWVuc2lvbnMiLCJTQ1JFRU5fVyIsIndpZHRoIiwiX3dvcmtsZXRfNDI1NDgzMzcwMjYyMl9pbml0X2RhdGEiLCJjb2RlIiwibG9jYXRpb24iLCJzb3VyY2VNYXAiLCJfd29ya2xldF83NDMwMjQyMDM2Mzg5X2luaXRfZGF0YSIsIl93b3JrbGV0Xzk1Mzk2NTkyNDY3OTNfaW5pdF9kYXRhIiwiX3dvcmtsZXRfNjE5NTU0NDg3Njc1OF9pbml0X2RhdGEiLCJfd29ya2xldF82NzA5NjYwNDQyODk1X2luaXRfZGF0YSIsIkJlZm9yZUFmdGVyU2xpZGVyIiwiZXhwb3J0cyIsIl9yZWYiLCJvcmlnaW5hbFVyaSIsImVkaXRlZFVyaSIsIm9uQ2xvc2UiLCJ0cmFja1ciLCJ4IiwidXNlU2hhcmVkVmFsdWUiLCJsYXN0VGljayIsIlJlYWN0IiwidXNlUmVmIiwicGFuIiwiR2VzdHVyZSIsIlBhbiIsIm9uQmVnaW4iLCJfZSIsImdsb2JhbCIsIkVycm9yIiwiX2YiLCJpbXBhY3RBc3luYyIsIkltcGFjdEZlZWRiYWNrU3R5bGUiLCJMaWdodCIsIl9jbG9zdXJlIiwiX19pbml0RGF0YSIsIl9fd29ya2xldEhhc2giLCJfX3N0YWNrRGV0YWlscyIsIl9fdmVyc2lvbiIsIm9uVXBkYXRlIiwibngiLCJNYXRoIiwibWF4IiwibWluIiwidmFsdWUiLCJjaGFuZ2VYIiwicCIsInJvdW5kIiwiY3VycmVudCIsInNlbGVjdGlvbkFzeW5jIiwib25FbmQiLCJhYnMiLCJ3aXRoU3ByaW5nIiwiZWRpdGVkU3R5bGUiLCJ1c2VBbmltYXRlZFN0eWxlIiwiaGFuZGxlU3R5bGUiLCJsZWZ0IiwianN4cyIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsIm92ZXJsYXkiLCJwb2ludGVyRXZlbnRzIiwiY2hpbGRyZW4iLCJqc3giLCJTdHlsZVNoZWV0IiwiYWJzb2x1dGVGaWxsIiwib25Ub3VjaEVuZCIsInN0YWdlIiwiU21hcnRJbWFnZSIsInNvdXJjZSIsInVyaSIsInJvdW5kZWQiLCJvdmVyZmxvdyIsImJhZGdlIiwiQmx1clZpZXciLCJpbnRlbnNpdHkiLCJiYWRnZUlubmVyIiwiVGV4dCIsImJhZGdlVGV4dCIsInJpZ2h0IiwiR2VzdHVyZURldGVjdG9yIiwiZ2VzdHVyZSIsImhhbmRsZSIsImhhbmRsZUJhciIsImhhbmRsZUtub2IiLCJJb25pY29ucyIsIm5hbWUiLCJzaXplIiwiY29sb3IiLCJjbG9zZVBpbGwiLCJjbG9zZUlubmVyIiwiY2xvc2VUZXh0IiwiY3JlYXRlIiwiYWJzb2x1dGVGaWxsT2JqZWN0IiwianVzdGlmeUNvbnRlbnQiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwb3NpdGlvbiIsInRvcCIsImJvdHRvbSIsImFsaWduSXRlbXMiLCJib3JkZXJSYWRpdXMiLCJtYXJnaW5WZXJ0aWNhbCIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInBhZGRpbmdWZXJ0aWNhbCIsImZvbnRXZWlnaHQiLCJmb250U2l6ZSIsImFsaWduU2VsZiIsImZsZXhEaXJlY3Rpb24iLCJnYXAiXSwic291cmNlcyI6WyJCZWZvcmVBZnRlclNsaWRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERpbWVuc2lvbnMsIFN0eWxlU2hlZXQsIFRleHQsIFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgR2VzdHVyZSwgR2VzdHVyZURldGVjdG9yIH0gZnJvbSAncmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlcic7XG5pbXBvcnQgQW5pbWF0ZWQsIHsgdXNlU2hhcmVkVmFsdWUsIHVzZUFuaW1hdGVkU3R5bGUsIHdpdGhTcHJpbmcgfSBmcm9tICdyZWFjdC1uYXRpdmUtcmVhbmltYXRlZCc7XG5pbXBvcnQgKiBhcyBIYXB0aWNzIGZyb20gJ2V4cG8taGFwdGljcyc7XG5pbXBvcnQgeyBJb25pY29ucyB9IGZyb20gJ0BleHBvL3ZlY3Rvci1pY29ucyc7XG5pbXBvcnQgeyBCbHVyVmlldyB9IGZyb20gJ2V4cG8tYmx1cic7XG5pbXBvcnQgeyBUaGVtZSB9IGZyb20gJy4uLy4uL3RoZW1lL3VuaWZpZWQtdGhlbWUnO1xuaW1wb3J0IHsgU21hcnRJbWFnZSB9IGZyb20gJy4uL2NvbW1vbi9TbWFydEltYWdlJztcblxuY29uc3QgeyB3aWR0aDogU0NSRUVOX1cgfSA9IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKTtcblxuaW50ZXJmYWNlIEJlZm9yZUFmdGVyU2xpZGVyUHJvcHMge1xuICBvcmlnaW5hbFVyaTogc3RyaW5nO1xuICBlZGl0ZWRVcmk6IHN0cmluZztcbiAgb25DbG9zZTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IEJlZm9yZUFmdGVyU2xpZGVyOiBSZWFjdC5GQzxCZWZvcmVBZnRlclNsaWRlclByb3BzPiA9ICh7XG4gIG9yaWdpbmFsVXJpLFxuICBlZGl0ZWRVcmksXG4gIG9uQ2xvc2UsXG59KSA9PiB7XG4gIGNvbnN0IHRyYWNrVyA9IFNDUkVFTl9XO1xuICBjb25zdCB4ID0gdXNlU2hhcmVkVmFsdWUodHJhY2tXICogMC41KTtcblxuICAvLyBoYXB0aWMgdGlja3MgQCAwLzUwLzEwMCVcbiAgY29uc3QgbGFzdFRpY2sgPSBSZWFjdC51c2VSZWYoLTEpO1xuXG4gIGNvbnN0IHBhbiA9IEdlc3R1cmUuUGFuKClcbiAgICAub25CZWdpbigoKSA9PiB7XG4gICAgICBIYXB0aWNzLmltcGFjdEFzeW5jKEhhcHRpY3MuSW1wYWN0RmVlZGJhY2tTdHlsZS5MaWdodCk7XG4gICAgfSlcbiAgICAub25VcGRhdGUoKGUpID0+IHtcbiAgICAgIGNvbnN0IG54ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odHJhY2tXLCB4LnZhbHVlICsgKGUgYXMgYW55KS5jaGFuZ2VYKSk7XG4gICAgICB4LnZhbHVlID0gbng7XG4gICAgICBjb25zdCBwID0gTWF0aC5yb3VuZCgobnggLyB0cmFja1cpICogNCk7IC8vIDAuLjRcbiAgICAgIGlmIChwICE9PSBsYXN0VGljay5jdXJyZW50KSB7XG4gICAgICAgIGxhc3RUaWNrLmN1cnJlbnQgPSBwO1xuICAgICAgICBIYXB0aWNzLnNlbGVjdGlvbkFzeW5jKCk7XG4gICAgICB9XG4gICAgfSlcbiAgICAub25FbmQoKCkgPT4ge1xuICAgICAgLy8gc2xpZ2h0IHNuYXAgdG8gZWRnZXMvY2VudGVyIGlmIGNsb3NlXG4gICAgICBjb25zdCBwID0geC52YWx1ZSAvIHRyYWNrVztcbiAgICAgIGlmIChNYXRoLmFicyhwIC0gMC41KSA8IDAuMDQpIHgudmFsdWUgPSB3aXRoU3ByaW5nKHRyYWNrVyAqIDAuNSk7XG4gICAgICBlbHNlIGlmIChwIDwgMC4wNCkgeC52YWx1ZSA9IHdpdGhTcHJpbmcoMCk7XG4gICAgICBlbHNlIGlmIChwID4gMC45NikgeC52YWx1ZSA9IHdpdGhTcHJpbmcodHJhY2tXKTtcbiAgICAgIGxhc3RUaWNrLmN1cnJlbnQgPSAtMTtcbiAgICB9KTtcblxuICBjb25zdCBlZGl0ZWRTdHlsZSA9IHVzZUFuaW1hdGVkU3R5bGUoKCkgPT4gKHtcbiAgICB3aWR0aDogeC52YWx1ZSxcbiAgfSkpO1xuXG4gIGNvbnN0IGhhbmRsZVN0eWxlID0gdXNlQW5pbWF0ZWRTdHlsZSgoKSA9PiAoe1xuICAgIGxlZnQ6IHgudmFsdWUgLSAxOCxcbiAgfSkpO1xuXG4gIHJldHVybiAoXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5vdmVybGF5fSBwb2ludGVyRXZlbnRzPVwiYm94LW5vbmVcIj5cbiAgICAgIHsvKiBCYWNrZ3JvdW5kIHRhcCB0byBjbG9zZSAqL31cbiAgICAgIDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmFic29sdXRlRmlsbH0gb25Ub3VjaEVuZD17b25DbG9zZX0gLz5cblxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5zdGFnZX0+XG4gICAgICAgIHsvKiBPUklHSU5BTCAoZnVsbCkgKi99XG4gICAgICAgIDxTbWFydEltYWdlIHNvdXJjZT17eyB1cmk6IG9yaWdpbmFsVXJpIH19IHN0eWxlPXtTdHlsZVNoZWV0LmFic29sdXRlRmlsbH0gcm91bmRlZD17MH0gLz5cblxuICAgICAgICB7LyogRURJVEVEIChjbGlwcGVkIHRvIGRpdmlkZXIpICovfVxuICAgICAgICA8QW5pbWF0ZWQuVmlldyBzdHlsZT17W1N0eWxlU2hlZXQuYWJzb2x1dGVGaWxsLCBlZGl0ZWRTdHlsZSwgeyBvdmVyZmxvdzogJ2hpZGRlbicgfV19PlxuICAgICAgICAgIDxTbWFydEltYWdlIHNvdXJjZT17eyB1cmk6IGVkaXRlZFVyaSB9fSBzdHlsZT17U3R5bGVTaGVldC5hYnNvbHV0ZUZpbGx9IHJvdW5kZWQ9ezB9IC8+XG4gICAgICAgIDwvQW5pbWF0ZWQuVmlldz5cblxuICAgICAgICB7LyogTGFiZWxzICovfVxuICAgICAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5iYWRnZSwgeyBsZWZ0OiAxMiB9XX0+XG4gICAgICAgICAgPEJsdXJWaWV3IGludGVuc2l0eT17MzB9IHN0eWxlPXtzdHlsZXMuYmFkZ2VJbm5lcn0+XG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmJhZGdlVGV4dH0+QmVmb3JlPC9UZXh0PlxuICAgICAgICAgIDwvQmx1clZpZXc+XG4gICAgICAgIDwvVmlldz5cbiAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMuYmFkZ2UsIHsgcmlnaHQ6IDEyIH1dfT5cbiAgICAgICAgICA8Qmx1clZpZXcgaW50ZW5zaXR5PXszMH0gc3R5bGU9e3N0eWxlcy5iYWRnZUlubmVyfT5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuYmFkZ2VUZXh0fT5BZnRlcjwvVGV4dD5cbiAgICAgICAgICA8L0JsdXJWaWV3PlxuICAgICAgICA8L1ZpZXc+XG5cbiAgICAgICAgey8qIEhhbmRsZSAqL31cbiAgICAgICAgPEdlc3R1cmVEZXRlY3RvciBnZXN0dXJlPXtwYW59PlxuICAgICAgICAgIDxBbmltYXRlZC5WaWV3IHN0eWxlPXtbc3R5bGVzLmhhbmRsZSwgaGFuZGxlU3R5bGVdfT5cbiAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuaGFuZGxlQmFyfSAvPlxuICAgICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5oYW5kbGVLbm9ifT5cbiAgICAgICAgICAgICAgPElvbmljb25zIG5hbWU9XCJzd2FwLWhvcml6b250YWxcIiBzaXplPXsxNn0gY29sb3I9XCJ3aGl0ZVwiIC8+XG4gICAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmhhbmRsZUJhcn0gLz5cbiAgICAgICAgICA8L0FuaW1hdGVkLlZpZXc+XG4gICAgICAgIDwvR2VzdHVyZURldGVjdG9yPlxuXG4gICAgICAgIHsvKiBDbG9zZSBwaWxsICovfVxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNsb3NlUGlsbH0+XG4gICAgICAgICAgPEJsdXJWaWV3IGludGVuc2l0eT17MzB9IHN0eWxlPXtzdHlsZXMuY2xvc2VJbm5lcn0+XG4gICAgICAgICAgICA8SW9uaWNvbnMgbmFtZT1cImNsb3NlXCIgc2l6ZT17MTh9IGNvbG9yPVwid2hpdGVcIiAvPlxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5jbG9zZVRleHR9PkNsb3NlIGNvbXBhcmU8L1RleHQ+XG4gICAgICAgICAgPC9CbHVyVmlldz5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9WaWV3PlxuICAgIDwvVmlldz5cbiAgKTtcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgb3ZlcmxheTogeyAuLi5TdHlsZVNoZWV0LmFic29sdXRlRmlsbE9iamVjdCwganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcgfSxcbiAgc3RhZ2U6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJyxcbiAgfSxcbiAgaGFuZGxlOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICB3aWR0aDogMzYsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICB9LFxuICBoYW5kbGVCYXI6IHsgd2lkdGg6IDIsIGhlaWdodDogJzIwJScsIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMC42KScsIGJvcmRlclJhZGl1czogMiB9LFxuICBoYW5kbGVLbm9iOiB7XG4gICAgd2lkdGg6IDM2LCBoZWlnaHQ6IDM2LCBib3JkZXJSYWRpdXM6IDE4LCBtYXJnaW5WZXJ0aWNhbDogMTAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwwLjI1KScsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYm9yZGVyV2lkdGg6IDEsIGJvcmRlckNvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwwLjM1KScsXG4gIH0sXG4gIGJhZGdlOiB7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCB0b3A6IDEyIH0sXG4gIGJhZGdlSW5uZXI6IHsgcGFkZGluZ0hvcml6b250YWw6IDEwLCBwYWRkaW5nVmVydGljYWw6IDYsIGJvcmRlclJhZGl1czogOTk5LCBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuNDUpJyB9LFxuICBiYWRnZVRleHQ6IHsgY29sb3I6ICd3aGl0ZScsIGZvbnRXZWlnaHQ6ICc3MDAnLCBmb250U2l6ZTogMTIgfSxcbiAgY2xvc2VQaWxsOiB7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBib3R0b206IDE2LCBhbGlnblNlbGY6ICdjZW50ZXInIH0sXG4gIGNsb3NlSW5uZXI6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JywgYWxpZ25JdGVtczogJ2NlbnRlcicsIGdhcDogOCxcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogMTQsIHBhZGRpbmdWZXJ0aWNhbDogMTAsIGJvcmRlclJhZGl1czogOTk5LCBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuNDUpJyxcbiAgfSxcbiAgY2xvc2VUZXh0OiB7IGNvbG9yOiAnd2hpdGUnLCBmb250V2VpZ2h0OiAnNzAwJywgZm9udFNpemU6IDEyIH0sXG59KTtcblxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLDBCQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxzQkFBQSxHQUFBQyx1QkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQUssT0FBQSxHQUFBRCx1QkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQU0sWUFBQSxHQUFBTixPQUFBO0FB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