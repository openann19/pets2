4d42128dea34f683a6e9dc0a6459f8f7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageList = MessageList;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _MessageItem = require("./MessageItem");
var _TypingIndicator = require("./TypingIndicator");
var _chatService = require("../../services/chatService");
var _api = require("../../services/api");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var Spacing = {
  xs: 4,
  sm: 8,
  md: 16,
  lg: 24,
  xl: 32
};
function MessageList(_ref) {
  var messages = _ref.messages,
    typingUsers = _ref.typingUsers,
    isOnline = _ref.isOnline,
    currentUserId = _ref.currentUserId,
    matchId = _ref.matchId,
    onMessagePress = _ref.onMessagePress,
    onMessageLongPress = _ref.onMessageLongPress,
    onRetryMessage = _ref.onRetryMessage,
    flatListRef = _ref.flatListRef,
    onScroll = _ref.onScroll;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    replyTarget = _useState2[0],
    setReplyTarget = _useState2[1];
  var handleReply = (0, _react.useCallback)(function (message) {
    setReplyTarget(message);
  }, []);
  var handleCopy = (0, _react.useCallback)(function (message) {
    _reactNative.Clipboard.setString(message.content);
  }, []);
  var handleReact = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (message) {
      _reactNative.Alert.alert("Add Reaction", "Choose a reaction", [{
        text: "👍 Like",
        onPress: function onPress() {
          return _chatService.chatService.sendReaction(matchId, message._id, "like");
        }
      }, {
        text: "❤️ Love",
        onPress: function onPress() {
          return _chatService.chatService.sendReaction(matchId, message._id, "love");
        }
      }, {
        text: "😂 Laugh",
        onPress: function onPress() {
          return _chatService.chatService.sendReaction(matchId, message._id, "laugh");
        }
      }, {
        text: "Cancel",
        style: "cancel"
      }]);
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [matchId]);
  var handleDelete = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (message) {
      _reactNative.Alert.alert("Delete Message", "Are you sure you want to delete this message?", [{
        text: "Cancel",
        style: "cancel"
      }, {
        text: "Delete",
        style: "destructive",
        onPress: function () {
          var _onPress = (0, _asyncToGenerator2.default)(function* () {
            try {
              yield _api.matchesAPI.deleteMessage(matchId, message._id);
            } catch (error) {
              _reactNative.Alert.alert("Error", "Failed to delete message");
            }
          });
          function onPress() {
            return _onPress.apply(this, arguments);
          }
          return onPress;
        }()
      }]);
    });
    return function (_x2) {
      return _ref3.apply(this, arguments);
    };
  }(), [matchId]);
  var handleShowReadBy = (0, _react.useCallback)(function (message) {
    _reactNative.Alert.alert("Read by", `Message was read by ${message.read ? "recipient" : "no one yet"}`);
  }, []);
  var renderMessage = (0, _react.useCallback)(function (_ref4) {
    var item = _ref4.item,
      index = _ref4.index;
    var isOwnMessage = item.senderId === currentUserId || item.senderId === "me";
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      children: (0, _jsxRuntime.jsx)(_MessageItem.MessageItem, {
        message: item,
        index: index,
        messages: messages,
        isOnline: isOnline,
        onPress: onMessagePress,
        onLongPress: onMessageLongPress,
        onRetry: onRetryMessage
      })
    });
  }, [messages, isOnline, currentUserId, onMessagePress, onMessageLongPress, onRetryMessage]);
  var renderTypingIndicator = (0, _react.useCallback)(function () {
    return (0, _jsxRuntime.jsx)(_TypingIndicator.TypingIndicator, {
      typingUsers: typingUsers
    });
  }, [typingUsers]);
  var keyExtractor = (0, _react.useCallback)(function (item) {
    return item._id;
  }, []);
  var getItemLayout = (0, _react.useCallback)(function (data, index) {
    var message = data == null ? void 0 : data[index];
    var estimatedHeight = 80;
    if (message) {
      if (message.content.length > 100) estimatedHeight += 20;
      if (message.replyTo) estimatedHeight += 40;
      if (message.audioUrl || message.type === 'image') estimatedHeight += 120;
    }
    return {
      length: estimatedHeight,
      offset: estimatedHeight * index,
      index: index
    };
  }, []);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      ref: flatListRef,
      data: messages,
      renderItem: renderMessage,
      keyExtractor: keyExtractor,
      showsVerticalScrollIndicator: false,
      contentContainerStyle: styles.contentContainer,
      onScroll: onScroll,
      scrollEventThrottle: 100,
      initialNumToRender: 20,
      windowSize: 10,
      maxToRenderPerBatch: 10,
      updateCellsBatchingPeriod: 50,
      removeClippedSubviews: true,
      getItemLayout: getItemLayout,
      ListFooterComponent: renderTypingIndicator
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  contentContainer: {
    paddingHorizontal: Spacing.md,
    paddingVertical: Spacing.sm,
    paddingBottom: Spacing.lg
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,