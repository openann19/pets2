cc3c0d1d3b34f6492878e59d619b8e64
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var React = require('react');
var View = require("../Libraries/Components/View/View");
var requireNativeComponent = require("../Libraries/ReactNative/requireNativeComponent").default;
var RCTScrollView = requireNativeComponent('RCTScrollView');
function mockScrollView(BaseComponent) {
  var ScrollViewMock = function (_BaseComponent) {
    function ScrollViewMock() {
      (0, _classCallCheck2.default)(this, ScrollViewMock);
      return _callSuper(this, ScrollViewMock, arguments);
    }
    (0, _inherits2.default)(ScrollViewMock, _BaseComponent);
    return (0, _createClass2.default)(ScrollViewMock, [{
      key: "render",
      value: function render() {
        return (0, _jsxRuntime.jsxs)(RCTScrollView, _objectSpread(_objectSpread({}, this.props), {}, {
          children: [this.props.refreshControl, (0, _jsxRuntime.jsx)(View, {
            children: this.props.children
          })]
        }));
      }
    }]);
  }(BaseComponent);
  return ScrollViewMock;
}
module.exports = mockScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfaW5oZXJpdHMyIiwiX2pzeFJ1bnRpbWUiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jYWxsU3VwZXIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiUmVhY3QiLCJWaWV3IiwicmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIlJDVFNjcm9sbFZpZXciLCJtb2NrU2Nyb2xsVmlldyIsIkJhc2VDb21wb25lbnQiLCJTY3JvbGxWaWV3TW9jayIsIl9CYXNlQ29tcG9uZW50Iiwia2V5IiwidmFsdWUiLCJyZW5kZXIiLCJqc3hzIiwicHJvcHMiLCJjaGlsZHJlbiIsInJlZnJlc2hDb250cm9sIiwianN4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIm1vY2tTY3JvbGxWaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4vKiBlc2xpbnQtZW52IGplc3QgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBWaWV3ID0gcmVxdWlyZSgnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3Jyk7XG5cbmNvbnN0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgPVxuICByZXF1aXJlKCcuLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCcpLmRlZmF1bHQ7XG5jb25zdCBSQ1RTY3JvbGxWaWV3OiAkRmxvd0ZpeE1lID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUkNUU2Nyb2xsVmlldycpO1xuXG5mdW5jdGlvbiBtb2NrU2Nyb2xsVmlldyhCYXNlQ29tcG9uZW50OiAkRmxvd0ZpeE1lKSB7XG4gIGNsYXNzIFNjcm9sbFZpZXdNb2NrIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCk6IFJlYWN0LkVsZW1lbnQ8dHlwZW9mIFJDVFNjcm9sbFZpZXc+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSQ1RTY3JvbGxWaWV3IHsuLi50aGlzLnByb3BzfT5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5yZWZyZXNoQ29udHJvbH1cbiAgICAgICAgICA8Vmlldz57dGhpcy5wcm9wcy5jaGlsZHJlbn08L1ZpZXc+XG4gICAgICAgIDwvUkNUU2Nyb2xsVmlldz5cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBTY3JvbGxWaWV3TW9jaztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAobW9ja1Njcm9sbFZpZXc6ICRGbG93Rml4TWUpO1xu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