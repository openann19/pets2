30a314e237bd5613f548282c92696b1d
'use strict';

var androidScaleSuffix = {
  '0.75': 'ldpi',
  '1': 'mdpi',
  '1.5': 'hdpi',
  '2': 'xhdpi',
  '3': 'xxhdpi',
  '4': 'xxxhdpi'
};
var ANDROID_BASE_DENSITY = 160;
function getAndroidAssetSuffix(scale) {
  if (scale.toString() in androidScaleSuffix) {
    return androidScaleSuffix[scale.toString()];
  }
  if (Number.isFinite(scale) && scale > 0) {
    return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';
  }
  throw new Error('no such scale ' + scale.toString());
}
var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'ktx', 'png', 'svg', 'webp', 'xml']);
function getAndroidResourceFolderName(asset, scale) {
  if (!drawableFileTypes.has(asset.type)) {
    return 'raw';
  }
  var suffix = getAndroidAssetSuffix(scale);
  if (!suffix) {
    throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
  }
  return 'drawable-' + suffix;
}
function getAndroidResourceIdentifier(asset) {
  return (getBasePath(asset) + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
}
function getBasePath(asset) {
  var basePath = asset.httpServerLocation;
  return basePath.startsWith('/') ? basePath.substr(1) : basePath;
}
module.exports = {
  getAndroidResourceFolderName: getAndroidResourceFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhbmRyb2lkU2NhbGVTdWZmaXgiLCJBTkRST0lEX0JBU0VfREVOU0lUWSIsImdldEFuZHJvaWRBc3NldFN1ZmZpeCIsInNjYWxlIiwidG9TdHJpbmciLCJOdW1iZXIiLCJpc0Zpbml0ZSIsIk1hdGgiLCJyb3VuZCIsIkVycm9yIiwiZHJhd2FibGVGaWxlVHlwZXMiLCJTZXQiLCJnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lIiwiYXNzZXQiLCJoYXMiLCJ0eXBlIiwic3VmZml4IiwiSlNPTiIsInN0cmluZ2lmeSIsImdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIiLCJnZXRCYXNlUGF0aCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJiYXNlUGF0aCIsImh0dHBTZXJ2ZXJMb2NhdGlvbiIsInN0YXJ0c1dpdGgiLCJzdWJzdHIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsicGF0aC1zdXBwb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtQYWNrYWdlckFzc2V0fSBmcm9tICcuL3JlZ2lzdHJ5LmpzJztcblxuY29uc3QgYW5kcm9pZFNjYWxlU3VmZml4ID0ge1xuICAnMC43NSc6ICdsZHBpJyxcbiAgJzEnOiAnbWRwaScsXG4gICcxLjUnOiAnaGRwaScsXG4gICcyJzogJ3hoZHBpJyxcbiAgJzMnOiAneHhoZHBpJyxcbiAgJzQnOiAneHh4aGRwaScsXG59O1xuXG5jb25zdCBBTkRST0lEX0JBU0VfREVOU0lUWSA9IDE2MDtcblxuLyoqXG4gKiBGSVhNRTogdXNpbmcgbnVtYmVyIHRvIHJlcHJlc2VudCBkaXNjcmV0ZSBzY2FsZSBudW1iZXJzIGlzIGZyYWdpbGUgaW4gZXNzZW5jZSBiZWNhdXNlIG9mXG4gKiBmbG9hdGluZyBwb2ludCBudW1iZXJzIGltcHJlY2lzaW9uLlxuICovXG5mdW5jdGlvbiBnZXRBbmRyb2lkQXNzZXRTdWZmaXgoc2NhbGU6IG51bWJlcik6IHN0cmluZyB7XG4gIGlmIChzY2FsZS50b1N0cmluZygpIGluIGFuZHJvaWRTY2FsZVN1ZmZpeCkge1xuICAgIHJldHVybiBhbmRyb2lkU2NhbGVTdWZmaXhbc2NhbGUudG9TdHJpbmcoKV07XG4gIH1cbiAgLy8gTk9URTogQW5kcm9pZCBHcmFkbGUgUGx1Z2luIGRvZXMgbm90IGZ1bGx5IHN1cHBvcnQgdGhlIG5ubmRwaSBmb3JtYXQuXG4gIC8vIFNlZSBodHRwczovL2lzc3VldHJhY2tlci5nb29nbGUuY29tL2lzc3Vlcy83Mjg4NDQzNVxuICBpZiAoTnVtYmVyLmlzRmluaXRlKHNjYWxlKSAmJiBzY2FsZSA+IDApIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChzY2FsZSAqIEFORFJPSURfQkFTRV9ERU5TSVRZKSArICdkcGknO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignbm8gc3VjaCBzY2FsZSAnICsgc2NhbGUudG9TdHJpbmcoKSk7XG59XG5cbi8vIFNlZSBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS90b3BpY3MvcmVzb3VyY2VzL2RyYXdhYmxlLXJlc291cmNlLmh0bWxcbmNvbnN0IGRyYXdhYmxlRmlsZVR5cGVzID0gbmV3IFNldChbXG4gICdnaWYnLFxuICAnanBlZycsXG4gICdqcGcnLFxuICAna3R4JyxcbiAgJ3BuZycsXG4gICdzdmcnLFxuICAnd2VicCcsXG4gICd4bWwnLFxuXSk7XG5cbmZ1bmN0aW9uIGdldEFuZHJvaWRSZXNvdXJjZUZvbGRlck5hbWUoXG4gIGFzc2V0OiBQYWNrYWdlckFzc2V0LFxuICBzY2FsZTogbnVtYmVyLFxuKTogc3RyaW5nIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3Jhdyc+IHtcbiAgaWYgKCFkcmF3YWJsZUZpbGVUeXBlcy5oYXMoYXNzZXQudHlwZSkpIHtcbiAgICByZXR1cm4gJ3Jhdyc7XG4gIH1cbiAgY29uc3Qgc3VmZml4ID0gZ2V0QW5kcm9pZEFzc2V0U3VmZml4KHNjYWxlKTtcbiAgaWYgKCFzdWZmaXgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkRvbid0IGtub3cgd2hpY2ggYW5kcm9pZCBkcmF3YWJsZSBzdWZmaXggdG8gdXNlIGZvciBzY2FsZTogXCIgK1xuICAgICAgICBzY2FsZSArXG4gICAgICAgICdcXG5Bc3NldDogJyArXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KGFzc2V0LCBudWxsLCAnXFx0JykgK1xuICAgICAgICAnXFxuUG9zc2libGUgc2NhbGVzIGFyZTonICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoYW5kcm9pZFNjYWxlU3VmZml4LCBudWxsLCAnXFx0JyksXG4gICAgKTtcbiAgfVxuICByZXR1cm4gJ2RyYXdhYmxlLScgKyBzdWZmaXg7XG59XG5cbmZ1bmN0aW9uIGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIoYXNzZXQ6IFBhY2thZ2VyQXNzZXQpOiBzdHJpbmcge1xuICByZXR1cm4gKGdldEJhc2VQYXRoKGFzc2V0KSArICcvJyArIGFzc2V0Lm5hbWUpXG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAucmVwbGFjZSgvXFwvL2csICdfJykgLy8gRW5jb2RlIGZvbGRlciBzdHJ1Y3R1cmUgaW4gZmlsZSBuYW1lXG4gICAgLnJlcGxhY2UoLyhbXmEtejAtOV9dKS9nLCAnJykgLy8gUmVtb3ZlIGlsbGVnYWwgY2hhcnNcbiAgICAucmVwbGFjZSgvXmFzc2V0c18vLCAnJyk7IC8vIFJlbW92ZSBcImFzc2V0c19cIiBwcmVmaXhcbn1cblxuZnVuY3Rpb24gZ2V0QmFzZVBhdGgoYXNzZXQ6IFBhY2thZ2VyQXNzZXQpOiBzdHJpbmcge1xuICBjb25zdCBiYXNlUGF0aCA9IGFzc2V0Lmh0dHBTZXJ2ZXJMb2NhdGlvbjtcbiAgcmV0dXJuIGJhc2VQYXRoLnN0YXJ0c1dpdGgoJy8nKSA/IGJhc2VQYXRoLnN1YnN0cigxKSA6IGJhc2VQYXRoO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSxcbiAgZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcixcbiAgZ2V0QmFzZVBhdGgsXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUlaLElBQU1BLGtCQUFrQixHQUFHO0VBQ3pCLE1BQU0sRUFBRSxNQUFNO0VBQ2QsR0FBRyxFQUFFLE1BQU07RUFDWCxLQUFLLEVBQUUsTUFBTTtFQUNiLEdBQUcsRUFBRSxPQUFPO0VBQ1osR0FBRyxFQUFFLFFBQVE7RUFDYixHQUFHLEVBQUU7QUFDUCxDQUFDO0FBRUQsSUFBTUMsb0JBQW9CLEdBQUcsR0FBRztBQU1oQyxTQUFTQyxxQkFBcUJBLENBQUNDLEtBQWEsRUFBVTtFQUNwRCxJQUFJQSxLQUFLLENBQUNDLFFBQVEsQ0FBQyxDQUFDLElBQUlKLGtCQUFrQixFQUFFO0lBQzFDLE9BQU9BLGtCQUFrQixDQUFDRyxLQUFLLENBQUNDLFFBQVEsQ0FBQyxDQUFDLENBQUM7RUFDN0M7RUFHQSxJQUFJQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0gsS0FBSyxDQUFDLElBQUlBLEtBQUssR0FBRyxDQUFDLEVBQUU7SUFDdkMsT0FBT0ksSUFBSSxDQUFDQyxLQUFLLENBQUNMLEtBQUssR0FBR0Ysb0JBQW9CLENBQUMsR0FBRyxLQUFLO0VBQ3pEO0VBQ0EsTUFBTSxJQUFJUSxLQUFLLENBQUMsZ0JBQWdCLEdBQUdOLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN0RDtBQUdBLElBQU1NLGlCQUFpQixHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUNoQyxLQUFLLEVBQ0wsTUFBTSxFQUNOLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxNQUFNLEVBQ04sS0FBSyxDQUNOLENBQUM7QUFFRixTQUFTQyw0QkFBNEJBLENBQ25DQyxLQUFvQixFQUNwQlYsS0FBYSxFQUNzQjtFQUNuQyxJQUFJLENBQUNPLGlCQUFpQixDQUFDSSxHQUFHLENBQUNELEtBQUssQ0FBQ0UsSUFBSSxDQUFDLEVBQUU7SUFDdEMsT0FBTyxLQUFLO0VBQ2Q7RUFDQSxJQUFNQyxNQUFNLEdBQUdkLHFCQUFxQixDQUFDQyxLQUFLLENBQUM7RUFDM0MsSUFBSSxDQUFDYSxNQUFNLEVBQUU7SUFDWCxNQUFNLElBQUlQLEtBQUssQ0FDYiw2REFBNkQsR0FDM0ROLEtBQUssR0FDTCxXQUFXLEdBQ1hjLElBQUksQ0FBQ0MsU0FBUyxDQUFDTCxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUNqQyx3QkFBd0IsR0FDeEJJLElBQUksQ0FBQ0MsU0FBUyxDQUFDbEIsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FDakQsQ0FBQztFQUNIO0VBQ0EsT0FBTyxXQUFXLEdBQUdnQixNQUFNO0FBQzdCO0FBRUEsU0FBU0csNEJBQTRCQSxDQUFDTixLQUFvQixFQUFVO0VBQ2xFLE9BQU8sQ0FBQ08sV0FBVyxDQUFDUCxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUdBLEtBQUssQ0FBQ1EsSUFBSSxFQUMxQ0MsV0FBVyxDQUFDLENBQUMsQ0FDYkMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FDbkJBLE9BQU8sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQzVCQSxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztBQUM1QjtBQUVBLFNBQVNILFdBQVdBLENBQUNQLEtBQW9CLEVBQVU7RUFDakQsSUFBTVcsUUFBUSxHQUFHWCxLQUFLLENBQUNZLGtCQUFrQjtFQUN6QyxPQUFPRCxRQUFRLENBQUNFLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBR0YsUUFBUSxDQUFDRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUdILFFBQVE7QUFDakU7QUFFQUksTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZmpCLDRCQUE0QixFQUE1QkEsNEJBQTRCO0VBQzVCTyw0QkFBNEIsRUFBNUJBLDRCQUE0QjtFQUM1QkMsV0FBVyxFQUFYQTtBQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=