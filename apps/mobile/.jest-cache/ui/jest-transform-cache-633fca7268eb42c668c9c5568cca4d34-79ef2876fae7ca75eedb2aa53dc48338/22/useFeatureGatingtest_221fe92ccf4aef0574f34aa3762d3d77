0268f2c5162d042ef4b99f44ad9b380c
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock("../../../services/premiumService", function () {
  return {
    premiumService: {
      getUsageStats: _globals.jest.fn(),
      getSubscriptionDetails: _globals.jest.fn(),
      hasActiveSubscription: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../usePremiumStatus", function () {
  return {
    usePremiumStatus: _globals.jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useFeatureGating = require("../useFeatureGating");
var _premiumService = require("../../../services/premiumService");
var _usePremiumStatus = require("../usePremiumStatus");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
var mockPremiumService = _premiumService.premiumService;
var mockUsePremiumStatus = _usePremiumStatus.usePremiumStatus;
(0, _globals.describe)('useFeatureGating', function () {
  var mockUsageStats = {
    swipesUsed: 25,
    swipesLimit: 50,
    superLikesUsed: 3,
    superLikesLimit: 5,
    boostsUsed: 1,
    boostsLimit: 3,
    profileViews: 150,
    messagesSent: 45,
    matchRate: 0.3
  };
  var mockPremiumStatus = {
    isPremium: true,
    isLoading: false,
    subscriptionDetails: {
      isActive: true,
      plan: 'premium',
      features: ['unlimited_swipes', 'super_likes', 'boosts']
    },
    error: null,
    lastChecked: Date.now(),
    checkStatus: _globals.jest.fn(),
    clearCache: _globals.jest.fn(),
    isSubscriptionActive: _globals.jest.fn().mockReturnValue(true),
    getDaysUntilRenewal: _globals.jest.fn().mockReturnValue(25),
    hasFeature: _globals.jest.fn().mockReturnValue(true),
    isSubscriptionCancelled: _globals.jest.fn().mockReturnValue(false)
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockPremiumService.getUsageStats.mockResolvedValue(mockUsageStats);
    mockUsePremiumStatus.mockReturnValue(mockPremiumStatus);
  });
  (0, _globals.describe)('Initial State', function () {
    (0, _globals.it)('should initialize with default state', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.isLoading).toBe(true);
      (0, _globals.expect)(result.current.features).toEqual({});
      (0, _globals.expect)(result.current.usageStats).toBeNull();
      (0, _globals.expect)(result.current.error).toBeNull();
    });
    (0, _globals.it)('should load initial data on mount', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.usageStats).toEqual(mockUsageStats);
      (0, _globals.expect)(mockPremiumService.getUsageStats).toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Feature Access Control', function () {
    (0, _globals.it)('should allow access to premium features for premium users', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.canUseFeature('super_likes')).toBe(true);
      (0, _globals.expect)(result.current.canUseFeature('boosts')).toBe(true);
      (0, _globals.expect)(result.current.canUseFeature('unlimited_swipes')).toBe(true);
    }));
    (0, _globals.it)('should deny access to premium features for free users', (0, _asyncToGenerator2.default)(function* () {
      var freeUserStatus = _objectSpread(_objectSpread({}, mockPremiumStatus), {}, {
        isPremium: false,
        hasFeature: _globals.jest.fn().mockReturnValue(false)
      });
      mockUsePremiumStatus.mockReturnValue(freeUserStatus);
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.canUseFeature('super_likes')).toBe(false);
      (0, _globals.expect)(result.current.canUseFeature('boosts')).toBe(false);
    }));
    (0, _globals.it)('should allow access to free features for all users', (0, _asyncToGenerator2.default)(function* () {
      var freeUserStatus = _objectSpread(_objectSpread({}, mockPremiumStatus), {}, {
        isPremium: false,
        hasFeature: _globals.jest.fn().mockReturnValue(false)
      });
      mockUsePremiumStatus.mockReturnValue(freeUserStatus);
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.canUseFeature('basic_swipes')).toBe(true);
      (0, _globals.expect)(result.current.canUseFeature('view_profiles')).toBe(true);
    }));
  });
  (0, _globals.describe)('Usage Limits', function () {
    (0, _globals.it)('should check usage limits correctly', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook6.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.hasUsageLeft('swipes')).toBe(true);
      (0, _globals.expect)(result.current.getUsageLeft('swipes')).toBe(25);
      var highUsageStats = _objectSpread(_objectSpread({}, mockUsageStats), {}, {
        swipesUsed: 50
      });
      mockPremiumService.getUsageStats.mockResolvedValue(highUsageStats);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshUsageStats();
      }));
      (0, _globals.expect)(result.current.hasUsageLeft('swipes')).toBe(false);
      (0, _globals.expect)(result.current.getUsageLeft('swipes')).toBe(0);
    }));
    (0, _globals.it)('should provide unlimited access for premium features', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.hasUsageLeft('super_likes')).toBe(true);
      (0, _globals.expect)(result.current.getUsageLeft('super_likes')).toBe(-1);
    }));
    (0, _globals.it)('should handle unknown features gracefully', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.canUseFeature('unknown_feature')).toBe(false);
      (0, _globals.expect)(result.current.hasUsageLeft('unknown_feature')).toBe(false);
      (0, _globals.expect)(result.current.getUsageLeft('unknown_feature')).toBe(0);
    }));
  });
  (0, _globals.describe)('Usage Tracking', function () {
    (0, _globals.it)('should track feature usage', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var canUse = yield result.current.useFeature('swipes');
        (0, _globals.expect)(canUse).toBe(true);
      }));
      (0, _globals.expect)(mockPremiumService.getUsageStats).toHaveBeenCalledTimes(2);
    }));
    (0, _globals.it)('should prevent usage when at limit', (0, _asyncToGenerator2.default)(function* () {
      var atLimitStats = _objectSpread(_objectSpread({}, mockUsageStats), {}, {
        swipesUsed: 50
      });
      mockPremiumService.getUsageStats.mockResolvedValue(atLimitStats);
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var canUse = yield result.current.useFeature('swipes');
        (0, _globals.expect)(canUse).toBe(false);
      }));
    }));
    (0, _globals.it)('should allow unlimited usage for premium features', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook1.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      for (var i = 0; i < 10; i++) {
        yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
          var canUse = yield result.current.useFeature('super_likes');
          (0, _globals.expect)(canUse).toBe(true);
        }));
      }
    }));
  });
  (0, _globals.describe)('Feature Configurations', function () {
    (0, _globals.it)('should provide feature-specific configurations', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook10.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var swipesConfig = result.current.getFeatureConfig('swipes');
      (0, _globals.expect)(swipesConfig).toEqual({
        enabled: true,
        limit: 50,
        used: 25,
        isPremium: true,
        resetDate: _globals.expect.any(Date)
      });
      var boostsConfig = result.current.getFeatureConfig('boosts');
      (0, _globals.expect)(boostsConfig.isPremium).toBe(true);
      (0, _globals.expect)(boostsConfig.limit).toBe(-1);
    }));
    (0, _globals.it)('should provide different configs for free vs premium users', (0, _asyncToGenerator2.default)(function* () {
      var freeUserStatus = _objectSpread(_objectSpread({}, mockPremiumStatus), {}, {
        isPremium: false,
        hasFeature: _globals.jest.fn().mockReturnValue(false)
      });
      mockUsePremiumStatus.mockReturnValue(freeUserStatus);
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook11.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var swipesConfig = result.current.getFeatureConfig('swipes');
      (0, _globals.expect)(swipesConfig.limit).toBe(50);
      (0, _globals.expect)(swipesConfig.isPremium).toBe(false);
    }));
  });
  (0, _globals.describe)('Refresh and Updates', function () {
    (0, _globals.it)('should refresh usage stats on demand', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$usage;
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook12.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var updatedStats = _objectSpread(_objectSpread({}, mockUsageStats), {}, {
        swipesUsed: 30
      });
      mockPremiumService.getUsageStats.mockResolvedValue(updatedStats);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshUsageStats();
      }));
      (0, _globals.expect)((_result$current$usage = result.current.usageStats) == null ? void 0 : _result$current$usage.swipesUsed).toBe(30);
      (0, _globals.expect)(mockPremiumService.getUsageStats).toHaveBeenCalledTimes(2);
    }));
    (0, _globals.it)('should handle refresh errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.getUsageStats.mockRejectedValue(new Error('Refresh failed'));
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook13.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshUsageStats();
      }));
      (0, _globals.expect)(result.current.error).toBe('Refresh failed');
      (0, _globals.expect)(result.current.usageStats).toEqual(mockUsageStats);
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle initial data loading errors', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.getUsageStats.mockRejectedValue(new Error('Loading failed'));
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook14.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.error).toBe('Loading failed');
      (0, _globals.expect)(result.current.usageStats).toBeNull();
    }));
    (0, _globals.it)('should handle AsyncStorage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.usageStats).toEqual(mockUsageStats);
    }));
    (0, _globals.it)('should reset error state on successful operations', (0, _asyncToGenerator2.default)(function* () {
      mockPremiumService.getUsageStats.mockRejectedValueOnce(new Error('First error'));
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.error).toBe('First error');
      });
      mockPremiumService.getUsageStats.mockResolvedValueOnce(mockUsageStats);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.refreshUsageStats();
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
    }));
  });
  (0, _globals.describe)('Premium Status Integration', function () {
    (0, _globals.it)('should react to premium status changes', (0, _asyncToGenerator2.default)(function* () {
      var currentStatus = _objectSpread({}, mockPremiumStatus);
      mockUsePremiumStatus.mockImplementation(function () {
        return currentStatus;
      });
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook17.result,
        rerender = _renderHook17.rerender;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.canUseFeature('boosts')).toBe(true);
      currentStatus = _objectSpread(_objectSpread({}, mockPremiumStatus), {}, {
        isPremium: false,
        hasFeature: _globals.jest.fn().mockReturnValue(false)
      });
      rerender();
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.canUseFeature('boosts')).toBe(false);
      });
    }));
    (0, _globals.it)('should handle premium status loading states', (0, _asyncToGenerator2.default)(function* () {
      var loadingStatus = _objectSpread(_objectSpread({}, mockPremiumStatus), {}, {
        isLoading: true
      });
      mockUsePremiumStatus.mockReturnValue(loadingStatus);
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook18.result;
      (0, _globals.expect)(result.current.canUseFeature('swipes')).toBe(true);
    }));
  });
  (0, _globals.describe)('Cache Management', function () {
    (0, _globals.it)('should cache feature configurations', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook19.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('feature_gating_cache', _globals.expect.any(String));
    }));
    (0, _globals.it)('should load cached data on mount', (0, _asyncToGenerator2.default)(function* () {
      var cachedData = {
        features: {
          swipes: {
            enabled: true,
            limit: 50,
            used: 20
          }
        },
        usageStats: mockUsageStats,
        lastUpdated: Date.now()
      };
      mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(cachedData));
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook20.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.usageStats).toEqual(mockUsageStats);
      });
      (0, _globals.expect)(mockPremiumService.getUsageStats).not.toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty usage stats', (0, _asyncToGenerator2.default)(function* () {
      var emptyStats = {
        swipesUsed: 0,
        swipesLimit: 0,
        superLikesUsed: 0,
        superLikesLimit: 0,
        boostsUsed: 0,
        boostsLimit: 0,
        profileViews: 0,
        messagesSent: 0,
        matchRate: 0
      };
      mockPremiumService.getUsageStats.mockResolvedValue(emptyStats);
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook21.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.hasUsageLeft('swipes')).toBe(false);
      (0, _globals.expect)(result.current.getUsageLeft('swipes')).toBe(0);
    }));
    (0, _globals.it)('should handle negative usage values', (0, _asyncToGenerator2.default)(function* () {
      var negativeStats = _objectSpread(_objectSpread({}, mockUsageStats), {}, {
        swipesUsed: -5
      });
      mockPremiumService.getUsageStats.mockResolvedValue(negativeStats);
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook22.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.getUsageLeft('swipes')).toBe(55);
    }));
    (0, _globals.it)('should handle very high usage limits', (0, _asyncToGenerator2.default)(function* () {
      var unlimitedStats = _objectSpread(_objectSpread({}, mockUsageStats), {}, {
        swipesLimit: 999999
      });
      mockPremiumService.getUsageStats.mockResolvedValue(unlimitedStats);
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook23.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.hasUsageLeft('swipes')).toBe(true);
      (0, _globals.expect)(result.current.getUsageLeft('swipes')).toBe(999974);
    }));
    (0, _globals.it)('should handle concurrent feature usage attempts', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook24.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var usagePromises = Array.from({
        length: 10
      }, function () {
        return (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
          return result.current.useFeature('swipes');
        }));
      });
      var results = yield Promise.all(usagePromises);
      (0, _globals.expect)(results.every(function (r) {
        return r === true;
      })).toBe(true);
    }));
    (0, _globals.it)('should handle malformed feature configurations', (0, _asyncToGenerator2.default)(function* () {
      var originalUsePremiumStatus = mockUsePremiumStatus.getMockImplementation();
      mockUsePremiumStatus.mockReturnValue(_objectSpread(_objectSpread({}, mockPremiumStatus), {}, {
        hasFeature: undefined
      }));
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useFeatureGating.useFeatureGating)();
        }),
        result = _renderHook25.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.canUseFeature('swipes')).toBe(true);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,