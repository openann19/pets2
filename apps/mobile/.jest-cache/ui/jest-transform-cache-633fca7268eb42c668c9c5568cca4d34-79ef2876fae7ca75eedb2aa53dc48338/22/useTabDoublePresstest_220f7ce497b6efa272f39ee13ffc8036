2e37e74c38523cc47e1e34364cdc7ac0
"use strict";

_getJestObj().mock('@react-navigation/native');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _useTabDoublePress = require("../useTabDoublePress");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  addListener: jest.fn(function () {
    return jest.fn();
  })
};
describe('useTabDoublePress', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _native.useNavigation.mockReturnValue(mockNavigation);
  });
  describe('Basic Functionality', function () {
    it('should subscribe to tabDoublePress event', function () {
      var callback = jest.fn();
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabDoublePress.useTabDoublePress)(callback);
      });
      expect(mockNavigation.addListener).toHaveBeenCalledWith('tabDoublePress', expect.any(Function));
    });
    it('should call callback when tabDoublePress event is triggered', function () {
      var callback = jest.fn();
      var eventHandler;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        eventHandler = handler;
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabDoublePress.useTabDoublePress)(callback);
      });
      (0, _reactNative.act)(function () {
        eventHandler();
      });
      expect(callback).toHaveBeenCalledTimes(1);
    });
    it('should cleanup listener on unmount', function () {
      var unsubscribe = jest.fn();
      var callback = jest.fn();
      mockNavigation.addListener.mockReturnValue(unsubscribe);
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useTabDoublePress.useTabDoublePress)(callback);
        }),
        unmount = _renderHook.unmount;
      unmount();
      expect(unsubscribe).toHaveBeenCalled();
    });
  });
  describe('Callback Execution', function () {
    it('should execute callback on multiple triggers', function () {
      var callback = jest.fn();
      var eventHandler;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        eventHandler = handler;
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabDoublePress.useTabDoublePress)(callback);
      });
      (0, _reactNative.act)(function () {
        eventHandler();
        eventHandler();
        eventHandler();
      });
      expect(callback).toHaveBeenCalledTimes(3);
    });
    it('should handle async callbacks', (0, _asyncToGenerator2.default)(function* () {
      var callback = jest.fn((0, _asyncToGenerator2.default)(function* () {
        yield Promise.resolve();
      }));
      var eventHandler;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        eventHandler = handler;
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabDoublePress.useTabDoublePress)(callback);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield eventHandler();
      }));
      expect(callback).toHaveBeenCalled();
    }));
    it('should handle callbacks that throw errors', function () {
      var consoleError = jest.spyOn(console, 'error').mockImplementation();
      var callback = jest.fn(function () {
        throw new Error('Test error');
      });
      var eventHandler;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        eventHandler = handler;
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabDoublePress.useTabDoublePress)(callback);
      });
      expect(function () {
        (0, _reactNative.act)(function () {
          eventHandler();
        });
      }).not.toThrow();
      consoleError.mockRestore();
    });
  });
  describe('Callback Updates', function () {
    it('should re-subscribe when callback changes', function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function (props) {
          return (0, _useTabDoublePress.useTabDoublePress)(props.callback);
        }, {
          initialProps: {
            callback: jest.fn()
          }
        }),
        rerender = _renderHook2.rerender;
      var initialCallCount = mockNavigation.addListener.mock.calls.length;
      rerender({
        callback: jest.fn()
      });
      expect(mockNavigation.addListener.mock.calls.length).toBeGreaterThan(initialCallCount);
    });
    it('should use latest callback reference', function () {
      var firstCallback;
      var secondCallback;
      var eventHandler;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        eventHandler = handler;
        return jest.fn();
      });
      var _renderHook3 = (0, _reactNative.renderHook)(function (props) {
          return (0, _useTabDoublePress.useTabDoublePress)(props.callback);
        }, {
          initialProps: {
            callback: firstCallback = jest.fn()
          }
        }),
        rerender = _renderHook3.rerender;
      rerender({
        callback: secondCallback = jest.fn()
      });
      (0, _reactNative.act)(function () {
        eventHandler();
      });
      expect(secondCallback).toHaveBeenCalled();
      expect(firstCallback).not.toHaveBeenCalled();
    });
  });
  describe('Navigation Changes', function () {
    it('should handle navigation object changes', function () {
      var callback = jest.fn();
      var newNavigation = {
        addListener: jest.fn(function () {
          return jest.fn();
        })
      };
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useTabDoublePress.useTabDoublePress)(callback);
        }),
        rerender = _renderHook4.rerender;
      _native.useNavigation.mockReturnValue(newNavigation);
      rerender();
      expect(newNavigation.addListener).toHaveBeenCalled();
    });
  });
  describe('Edge Cases', function () {
    it('should work with an undefined callback', function () {
      mockNavigation.addListener.mockImplementation(function () {
        return jest.fn();
      });
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useTabDoublePress.useTabDoublePress)(undefined);
        });
      }).not.toThrow();
    });
    it('should handle multiple unmounts gracefully', function () {
      var callback = jest.fn();
      var unsubscribe = jest.fn();
      mockNavigation.addListener.mockReturnValue(unsubscribe);
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useTabDoublePress.useTabDoublePress)(callback);
        }),
        unmount = _renderHook5.unmount;
      unmount();
      unmount();
      unmount();
      expect(unsubscribe).toHaveBeenCalledTimes(1);
    });
    it('should cleanup properly even if unsubscribe throws', function () {
      var callback = jest.fn();
      var unsubscribe = jest.fn(function () {
        throw new Error('Cleanup error');
      });
      mockNavigation.addListener.mockReturnValue(unsubscribe);
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useTabDoublePress.useTabDoublePress)(callback);
        }),
        unmount = _renderHook6.unmount;
      expect(function () {
        unmount();
      }).not.toThrow();
    });
  });
  describe('Hook Invocation', function () {
    it('should support conditional callback execution', function () {
      var callback = jest.fn();
      var eventHandler;
      var shouldExecute = true;
      mockNavigation.addListener.mockImplementation(function (event, handler) {
        eventHandler = function eventHandler() {
          if (shouldExecute) {
            handler();
          }
        };
        return jest.fn();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabDoublePress.useTabDoublePress)(callback);
      });
      (0, _reactNative.act)(function () {
        eventHandler();
      });
      expect(callback).toHaveBeenCalledTimes(1);
      shouldExecute = false;
      (0, _reactNative.act)(function () {
        eventHandler();
      });
      expect(callback).toHaveBeenCalledTimes(1);
    });
    it('should handle rapid multiple registrations', function () {
      var callback = jest.fn();
      for (var i = 0; i < 10; i++) {
        var _renderHook7 = (0, _reactNative.renderHook)(function () {
            return (0, _useTabDoublePress.useTabDoublePress)(callback);
          }),
          unmount = _renderHook7.unmount;
        unmount();
      }
      expect(mockNavigation.addListener).toHaveBeenCalledTimes(10);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,