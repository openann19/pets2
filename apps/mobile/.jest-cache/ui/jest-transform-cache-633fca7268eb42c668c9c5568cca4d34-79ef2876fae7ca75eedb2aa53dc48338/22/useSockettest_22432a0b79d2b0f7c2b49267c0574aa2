cd8514affdb842a2e995a84445e90089
"use strict";

_getJestObj().mock("socket.io-client");
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    useAuthStore: jest.fn()
  };
});
var _core = require("@pawfectmatch/core");
var _reactHooks = require("@testing-library/react-hooks");
var _socket = require("socket.io-client");
var _useSocket = require("../useSocket");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockSocket = {
  on: jest.fn(),
  emit: jest.fn(),
  removeAllListeners: jest.fn(),
  disconnect: jest.fn(),
  connected: true,
  id: "test-socket-id"
};
var mockIo = _socket.io;
var mockUseAuthStore = _core.useAuthStore;
describe("useSocket", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockIo.mockReturnValue(mockSocket);
    mockUseAuthStore.mockReturnValue({
      user: {
        _id: "test-user-id",
        email: "test@example.com",
        firstName: "Test",
        lastName: "User"
      },
      accessToken: "test-access-token"
    });
  });
  it("should create socket connection with correct configuration", function () {
    (0, _reactHooks.renderHook)(function () {
      return (0, _useSocket.useSocket)();
    });
    expect(mockIo).toHaveBeenCalledWith("http://localhost:3001", expect.objectContaining({
      auth: {
        token: "test-access-token",
        userId: "test-user-id"
      },
      transports: ["websocket"],
      timeout: 10000,
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000
    }));
  });
  it.skip("should use environment variable for socket URL if available", function () {
    mockIo.mockClear();
    var originalEnv = process.env.EXPO_PUBLIC_SOCKET_URL;
    process.env.EXPO_PUBLIC_SOCKET_URL = "ws://custom-url:3001";
    jest.resetModules();
    var _require = require("../useSocket"),
      useSocketWithEnv = _require.useSocket;
    (0, _reactHooks.renderHook)(function () {
      return useSocketWithEnv();
    });
    expect(mockIo).toHaveBeenCalledWith("ws://custom-url:3001", expect.objectContaining({
      auth: expect.any(Object),
      transports: ["websocket"],
      timeout: 10000,
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000
    }));
    process.env.EXPO_PUBLIC_SOCKET_URL = originalEnv;
    jest.resetModules();
  });
  it("should not create socket if user is not authenticated", function () {
    mockUseAuthStore.mockReturnValue({
      user: null,
      accessToken: null
    });
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.useSocket)();
      }),
      result = _renderHook.result;
    expect(mockIo).not.toHaveBeenCalled();
    expect(result.current).toBeNull();
  });
  it("should set up event listeners correctly", function () {
    (0, _reactHooks.renderHook)(function () {
      return (0, _useSocket.useSocket)();
    });
    expect(mockSocket.on).toHaveBeenCalledWith("connect", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("disconnect", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("connect_error", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("error", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("auth_error", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("user_online", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("user_offline", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("new_match", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("new_message", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("incoming_call", expect.any(Function));
  });
  it("should handle connect event", function () {
    var _mockSocket$on$mock$c;
    (0, _reactHooks.renderHook)(function () {
      return (0, _useSocket.useSocket)();
    });
    var connectHandler = (_mockSocket$on$mock$c = mockSocket.on.mock.calls.find(function (call) {
      return call[0] === "connect";
    })) == null ? void 0 : _mockSocket$on$mock$c[1];
    if (connectHandler) {
      (0, _reactHooks.act)(function () {
        connectHandler();
      });
    }
    expect(mockSocket.on).toHaveBeenCalledWith("connect", expect.any(Function));
  });
  it("should handle disconnect event", function () {
    var _mockSocket$on$mock$c2;
    (0, _reactHooks.renderHook)(function () {
      return (0, _useSocket.useSocket)();
    });
    var disconnectHandler = (_mockSocket$on$mock$c2 = mockSocket.on.mock.calls.find(function (call) {
      return call[0] === "disconnect";
    })) == null ? void 0 : _mockSocket$on$mock$c2[1];
    if (disconnectHandler) {
      (0, _reactHooks.act)(function () {
        disconnectHandler("transport close");
      });
    }
    expect(mockSocket.on).toHaveBeenCalledWith("disconnect", expect.any(Function));
  });
  it("should handle connection errors", function () {
    var _mockSocket$on$mock$c3;
    var consoleSpy = jest.spyOn(console, "error").mockImplementation();
    (0, _reactHooks.renderHook)(function () {
      return (0, _useSocket.useSocket)();
    });
    var errorHandler = (_mockSocket$on$mock$c3 = mockSocket.on.mock.calls.find(function (call) {
      return call[0] === "connect_error";
    })) == null ? void 0 : _mockSocket$on$mock$c3[1];
    if (errorHandler) {
      (0, _reactHooks.act)(function () {
        errorHandler(new Error("Connection failed"));
      });
    }
    expect(consoleSpy).toHaveBeenCalledWith("Socket connection error:", expect.any(Error));
    consoleSpy.mockRestore();
  });
  it("should handle auth errors", function () {
    var _mockSocket$on$mock$c4;
    var consoleSpy = jest.spyOn(console, "error").mockImplementation();
    (0, _reactHooks.renderHook)(function () {
      return (0, _useSocket.useSocket)();
    });
    var authErrorHandler = (_mockSocket$on$mock$c4 = mockSocket.on.mock.calls.find(function (call) {
      return call[0] === "auth_error";
    })) == null ? void 0 : _mockSocket$on$mock$c4[1];
    if (authErrorHandler) {
      (0, _reactHooks.act)(function () {
        authErrorHandler("Authentication failed");
      });
    }
    expect(consoleSpy).toHaveBeenCalledWith("Socket auth error:", "Authentication failed");
    expect(mockSocket.disconnect).toHaveBeenCalled();
    consoleSpy.mockRestore();
  });
  it("should clean up on unmount", function () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.useSocket)();
      }),
      unmount = _renderHook2.unmount;
    unmount();
    expect(mockSocket.removeAllListeners).toHaveBeenCalled();
    expect(mockSocket.disconnect).toHaveBeenCalled();
  });
  it("should reconnect when auth changes", function () {
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.useSocket)();
      }),
      rerender = _renderHook3.rerender;
    mockUseAuthStore.mockReturnValue({
      user: {
        _id: "new-user-id",
        email: "new@example.com",
        firstName: "New",
        lastName: "User"
      },
      accessToken: "new-access-token"
    });
    rerender();
    expect(mockIo).toHaveBeenCalledTimes(2);
  });
});
describe("useSocketWithStatus", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockIo.mockReturnValue(mockSocket);
    mockUseAuthStore.mockReturnValue({
      user: {
        _id: "test-user-id"
      },
      accessToken: "test-access-token"
    });
  });
  it("should return socket with connection status", function () {
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.useSocketWithStatus)();
      }),
      result = _renderHook4.result;
    expect(result.current.socket).toBe(mockSocket);
    expect(result.current.isConnected).toBe(false);
    expect(result.current.error).toBeNull();
  });
  it("should update connection status on connect", function () {
    var _mockSocket$on$mock$c5;
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.useSocketWithStatus)();
      }),
      result = _renderHook5.result;
    var connectHandler = (_mockSocket$on$mock$c5 = mockSocket.on.mock.calls.find(function (call) {
      return call[0] === "connect";
    })) == null ? void 0 : _mockSocket$on$mock$c5[1];
    if (connectHandler) {
      (0, _reactHooks.act)(function () {
        connectHandler();
      });
    }
    expect(result.current.isConnected).toBe(true);
    expect(result.current.error).toBeNull();
  });
  it("should update connection status on disconnect", function () {
    var _mockSocket$on$mock$c6, _mockSocket$on$mock$c7;
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.useSocketWithStatus)();
      }),
      result = _renderHook6.result;
    var connectHandler = (_mockSocket$on$mock$c6 = mockSocket.on.mock.calls.find(function (call) {
      return call[0] === "connect";
    })) == null ? void 0 : _mockSocket$on$mock$c6[1];
    if (connectHandler) {
      (0, _reactHooks.act)(function () {
        connectHandler();
      });
    }
    var disconnectHandler = (_mockSocket$on$mock$c7 = mockSocket.on.mock.calls.find(function (call) {
      return call[0] === "disconnect";
    })) == null ? void 0 : _mockSocket$on$mock$c7[1];
    if (disconnectHandler) {
      (0, _reactHooks.act)(function () {
        disconnectHandler("transport close");
      });
    }
    expect(result.current.isConnected).toBe(false);
  });
  it("should update error status on connection error", function () {
    var _mockSocket$on$mock$c8;
    var _renderHook7 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.useSocketWithStatus)();
      }),
      result = _renderHook7.result;
    var errorHandler = (_mockSocket$on$mock$c8 = mockSocket.on.mock.calls.find(function (call) {
      return call[0] === "connect_error";
    })) == null ? void 0 : _mockSocket$on$mock$c8[1];
    if (errorHandler) {
      (0, _reactHooks.act)(function () {
        errorHandler(new Error("Connection failed"));
      });
    }
    expect(result.current.error).toBe("Connection failed");
    expect(result.current.isConnected).toBe(false);
  });
});
describe("useSocketEmit", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockIo.mockReturnValue(mockSocket);
    mockUseAuthStore.mockReturnValue({
      user: {
        _id: "test-user-id"
      },
      accessToken: "test-access-token"
    });
  });
  it("should emit events when socket is connected", function () {
    var _renderHook8 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.useSocketEmit)();
      }),
      result = _renderHook8.result;
    var success = result.current("test-event", {
      data: "test"
    });
    expect(success).toBe(true);
    expect(mockSocket.emit).toHaveBeenCalledWith("test-event", {
      data: "test"
    });
  });
  it("should not emit when socket is not connected", function () {
    mockSocket.connected = false;
    var consoleSpy = jest.spyOn(console, "warn").mockImplementation();
    var _renderHook9 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.useSocketEmit)();
      }),
      result = _renderHook9.result;
    var success = result.current("test-event", {
      data: "test"
    });
    expect(success).toBe(false);
    expect(mockSocket.emit).not.toHaveBeenCalled();
    expect(consoleSpy).toHaveBeenCalledWith("Socket not connected, cannot emit:", "test-event");
    consoleSpy.mockRestore();
  });
  it("should emit without data parameter", function () {
    mockSocket.connected = true;
    var _renderHook0 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.useSocketEmit)();
      }),
      result = _renderHook0.result;
    var success = result.current("test-event");
    expect(success).toBe(true);
    expect(mockSocket.emit).toHaveBeenCalledWith("test-event", undefined);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,