fee7a3bf92dcbb6376f097262604ceae
"use strict";

_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    useAuthStore: jest.fn()
  };
});
_getJestObj().mock("../../services/api", function () {
  return {
    api: {
      ai: {
        generateBio: jest.fn()
      }
    }
  };
});
_getJestObj().mock("expo-image-picker", function () {
  return {
    requestMediaLibraryPermissionsAsync: jest.fn(),
    launchImageLibraryAsync: jest.fn()
  };
});
_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _core = require("@pawfectmatch/core");
var _AIBioScreen = _interopRequireDefault(require("../AIBioScreen"));
var _api = require("../../services/api");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  goBack: jest.fn(),
  navigate: jest.fn()
};
var mockUser = {
  _id: "user123",
  name: "Test User",
  email: "test@example.com"
};
describe("AIBioScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _core.useAuthStore.mockReturnValue({
      user: mockUser
    });
  });
  var renderComponent = function renderComponent() {
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AIBioScreen.default, {
      navigation: mockNavigation
    }));
  };
  describe("Rendering", function () {
    it("renders all input fields correctly", function () {
      var _renderComponent = renderComponent(),
        getByPlaceholderText = _renderComponent.getByPlaceholderText,
        getByText = _renderComponent.getByText;
      expect(getByPlaceholderText("Enter pet name")).toBeTruthy();
      expect(getByPlaceholderText("Enter pet breed")).toBeTruthy();
      expect(getByPlaceholderText("Enter pet age")).toBeTruthy();
      expect(getByPlaceholderText("Enter personality traits (comma-separated)")).toBeTruthy();
      expect(getByText("Generate AI Bio")).toBeTruthy();
    });
    it("displays the header with correct title", function () {
      var _renderComponent2 = renderComponent(),
        getByText = _renderComponent2.getByText;
      expect(getByText("AI Bio Generator")).toBeTruthy();
    });
    it("shows back button", function () {
      var _renderComponent3 = renderComponent(),
        getByTestId = _renderComponent3.getByTestId;
      expect(getByTestId("back-button")).toBeTruthy();
    });
  });
  describe("Form Validation", function () {
    it("shows error when pet name is empty", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent4 = renderComponent(),
        getByText = _renderComponent4.getByText,
        getByPlaceholderText = _renderComponent4.getByPlaceholderText;
      var generateButton = getByText("Generate AI Bio");
      _reactNative.fireEvent.press(generateButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Validation Error", "Please enter your pet's name.");
      });
    }));
    it("shows error when pet breed is empty", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent5 = renderComponent(),
        getByText = _renderComponent5.getByText,
        getByPlaceholderText = _renderComponent5.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "Buddy");
      var generateButton = getByText("Generate AI Bio");
      _reactNative.fireEvent.press(generateButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Validation Error", "Please enter your pet's breed.");
      });
    }));
    it("shows error when pet age is empty", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent6 = renderComponent(),
        getByText = _renderComponent6.getByText,
        getByPlaceholderText = _renderComponent6.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "Buddy");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet breed"), "Golden Retriever");
      var generateButton = getByText("Generate AI Bio");
      _reactNative.fireEvent.press(generateButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Validation Error", "Please enter your pet's age.");
      });
    }));
    it("shows error when personality traits are empty", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent7 = renderComponent(),
        getByText = _renderComponent7.getByText,
        getByPlaceholderText = _renderComponent7.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "Buddy");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet breed"), "Golden Retriever");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet age"), "3");
      var generateButton = getByText("Generate AI Bio");
      _reactNative.fireEvent.press(generateButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Validation Error", "Please enter personality traits.");
      });
    }));
  });
  describe("API Integration", function () {
    it("calls API with correct parameters when form is valid", (0, _asyncToGenerator2.default)(function* () {
      var mockGenerateBio = jest.fn().mockResolvedValue({
        bio: "Buddy is a friendly and energetic Golden Retriever who loves to play fetch.",
        keywords: ["friendly", "energetic", "playful"],
        sentiment: {
          score: 0.9,
          label: "positive"
        },
        matchScore: 85
      });
      _api.api.ai.generateBio.mockImplementation(mockGenerateBio);
      var _renderComponent8 = renderComponent(),
        getByText = _renderComponent8.getByText,
        getByPlaceholderText = _renderComponent8.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "Buddy");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet breed"), "Golden Retriever");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet age"), "3");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter personality traits (comma-separated)"), "friendly, energetic, playful");
      var generateButton = getByText("Generate AI Bio");
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(generateButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockGenerateBio).toHaveBeenCalledWith({
          petName: "Buddy",
          keywords: ["friendly", "energetic", "playful"],
          tone: "playful",
          length: "medium",
          petType: "dog",
          age: 3,
          breed: "Golden Retriever"
        });
      });
    }));
    it("displays generated bio when API call succeeds", (0, _asyncToGenerator2.default)(function* () {
      var mockBioData = {
        bio: "Buddy is a friendly and energetic Golden Retriever who loves to play fetch.",
        keywords: ["friendly", "energetic", "playful"],
        sentiment: {
          score: 0.9,
          label: "positive"
        },
        matchScore: 85
      };
      _api.api.ai.generateBio.mockResolvedValue(mockBioData);
      var _renderComponent9 = renderComponent(),
        getByText = _renderComponent9.getByText,
        getByPlaceholderText = _renderComponent9.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "Buddy");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet breed"), "Golden Retriever");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet age"), "3");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter personality traits (comma-separated)"), "friendly, energetic, playful");
      var generateButton = getByText("Generate AI Bio");
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(generateButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Generated Bio")).toBeTruthy();
        expect(getByText(mockBioData.bio)).toBeTruthy();
        expect(getByText("Match Score: 85%")).toBeTruthy();
      });
    }));
    it("shows error message when API call fails", (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error("API Error");
      _api.api.ai.generateBio.mockRejectedValue(mockError);
      var _renderComponent0 = renderComponent(),
        getByText = _renderComponent0.getByText,
        getByPlaceholderText = _renderComponent0.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "Buddy");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet breed"), "Golden Retriever");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet age"), "3");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter personality traits (comma-separated)"), "friendly, energetic, playful");
      var generateButton = getByText("Generate AI Bio");
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(generateButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Generation Failed", "Failed to generate bio. Please try again.");
      });
    }));
    it("shows loading state during API call", (0, _asyncToGenerator2.default)(function* () {
      var resolvePromise;
      var promise = new Promise(function (resolve) {
        resolvePromise = resolve;
      });
      _api.api.ai.generateBio.mockReturnValue(promise);
      var _renderComponent1 = renderComponent(),
        getByText = _renderComponent1.getByText,
        getByPlaceholderText = _renderComponent1.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "Buddy");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet breed"), "Golden Retriever");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet age"), "3");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter personality traits (comma-separated)"), "friendly, energetic, playful");
      var generateButton = getByText("Generate AI Bio");
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(generateButton);
      }));
      expect(getByText("Generating...")).toBeTruthy();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        resolvePromise({
          bio: "Generated bio",
          keywords: ["test"],
          sentiment: {
            score: 0.8,
            label: "positive"
          },
          matchScore: 80
        });
      }));
    }));
  });
  describe("Navigation", function () {
    it("navigates back when back button is pressed", function () {
      var _renderComponent10 = renderComponent(),
        getByTestId = _renderComponent10.getByTestId;
      _reactNative.fireEvent.press(getByTestId("back-button"));
      expect(mockNavigation.goBack).toHaveBeenCalled();
    });
  });
  describe("User Experience", function () {
    it("trims whitespace from input values", (0, _asyncToGenerator2.default)(function* () {
      var mockGenerateBio = jest.fn().mockResolvedValue({
        bio: "Test bio",
        keywords: ["friendly"],
        sentiment: {
          score: 0.8,
          label: "positive"
        },
        matchScore: 80
      });
      _api.api.ai.generateBio.mockImplementation(mockGenerateBio);
      var _renderComponent11 = renderComponent(),
        getByText = _renderComponent11.getByText,
        getByPlaceholderText = _renderComponent11.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "  Buddy  ");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet breed"), "  Golden Retriever  ");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet age"), "  3  ");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter personality traits (comma-separated)"), "  friendly, energetic, playful  ");
      var generateButton = getByText("Generate AI Bio");
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(generateButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockGenerateBio).toHaveBeenCalledWith({
          petName: "Buddy",
          keywords: ["friendly", "energetic", "playful"],
          tone: "playful",
          length: "medium",
          petType: "dog",
          age: 3,
          breed: "Golden Retriever"
        });
      });
    }));
    it("handles empty personality traits gracefully", (0, _asyncToGenerator2.default)(function* () {
      var mockGenerateBio = jest.fn().mockResolvedValue({
        bio: "Test bio",
        keywords: [],
        sentiment: {
          score: 0.8,
          label: "positive"
        },
        matchScore: 80
      });
      _api.api.ai.generateBio.mockImplementation(mockGenerateBio);
      var _renderComponent12 = renderComponent(),
        getByText = _renderComponent12.getByText,
        getByPlaceholderText = _renderComponent12.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "Buddy");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet breed"), "Golden Retriever");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet age"), "3");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter personality traits (comma-separated)"), "   ,  ,  ");
      var generateButton = getByText("Generate AI Bio");
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(generateButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Validation Error", "Please enter personality traits.");
      });
    }));
  });
  describe("Error Handling", function () {
    it("handles network timeout gracefully", (0, _asyncToGenerator2.default)(function* () {
      var timeoutError = new Error("Network timeout");
      timeoutError.name = "TimeoutError";
      _api.api.ai.generateBio.mockRejectedValue(timeoutError);
      var _renderComponent13 = renderComponent(),
        getByText = _renderComponent13.getByText,
        getByPlaceholderText = _renderComponent13.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "Buddy");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet breed"), "Golden Retriever");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet age"), "3");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter personality traits (comma-separated)"), "friendly, energetic, playful");
      var generateButton = getByText("Generate AI Bio");
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(generateButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Generation Failed", "Failed to generate bio. Please try again.");
      });
    }));
    it("handles 503 service unavailable error", (0, _asyncToGenerator2.default)(function* () {
      var serviceError = new Error("Service Unavailable");
      serviceError.response = {
        status: 503
      };
      _api.api.ai.generateBio.mockRejectedValue(serviceError);
      var _renderComponent14 = renderComponent(),
        getByText = _renderComponent14.getByText,
        getByPlaceholderText = _renderComponent14.getByPlaceholderText;
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet name"), "Buddy");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet breed"), "Golden Retriever");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter pet age"), "3");
      _reactNative.fireEvent.changeText(getByPlaceholderText("Enter personality traits (comma-separated)"), "friendly, energetic, playful");
      var generateButton = getByText("Generate AI Bio");
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(generateButton);
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Generation Failed", "Failed to generate bio. Please try again.");
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,