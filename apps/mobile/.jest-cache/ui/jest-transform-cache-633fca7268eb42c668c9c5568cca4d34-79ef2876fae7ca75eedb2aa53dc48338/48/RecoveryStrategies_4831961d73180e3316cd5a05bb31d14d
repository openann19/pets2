f39efe705ecf7e803fba3bb735e7d281
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RecoveryStrategies = void 0;
var logger_1 = require("../utils/logger");
var RecoveryStrategies = function () {
  function RecoveryStrategies() {
    (0, _classCallCheck2.default)(this, RecoveryStrategies);
  }
  return (0, _createClass2.default)(RecoveryStrategies, [{
    key: "autoRetry",
    value: (function () {
      var _autoRetry = (0, _asyncToGenerator2.default)(function* (fn) {
        var _options$maxRetries, _options$retryDelay;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var maxRetries = (_options$maxRetries = options.maxRetries) != null ? _options$maxRetries : 3;
        var retryDelay = (_options$retryDelay = options.retryDelay) != null ? _options$retryDelay : 1000;
        var lastError;
        for (var attempt = 0; attempt <= maxRetries; attempt++) {
          try {
            if (attempt > 0 && options.onRetry) {
              options.onRetry(attempt);
            }
            var result = yield fn();
            return {
              success: true,
              data: result,
              retriesPerformed: attempt
            };
          } catch (error) {
            lastError = error;
            if (attempt < maxRetries) {
              var delay = retryDelay * Math.pow(2, attempt);
              logger_1.logger.debug('Retrying after delay', {
                attempt: attempt,
                delay: delay
              });
              yield this.sleep(delay);
            }
          }
        }
        if (options.onFailure) {
          options.onFailure(lastError);
        }
        return {
          success: false,
          error: lastError,
          retriesPerformed: maxRetries
        };
      });
      function autoRetry(_x) {
        return _autoRetry.apply(this, arguments);
      }
      return autoRetry;
    }())
  }, {
    key: "retryWithTokenRefresh",
    value: (function () {
      var _retryWithTokenRefresh = (0, _asyncToGenerator2.default)(function* (fn, refreshTokenFn) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        try {
          var result = yield fn();
          return {
            success: true,
            data: result
          };
        } catch (error) {
          if (this.isAuthenticationError(error)) {
            logger_1.logger.info('Authentication error, refreshing token');
            try {
              yield refreshTokenFn();
              logger_1.logger.info('Token refreshed, retrying request');
              var retryResult = yield this.autoRetry(fn, options);
              return retryResult;
            } catch (refreshError) {
              logger_1.logger.error('Token refresh failed', {
                error: refreshError
              });
              return {
                success: false,
                error: refreshError
              };
            }
          }
          return {
            success: false,
            error: error
          };
        }
      });
      function retryWithTokenRefresh(_x2, _x3) {
        return _retryWithTokenRefresh.apply(this, arguments);
      }
      return retryWithTokenRefresh;
    }())
  }, {
    key: "fallbackToCache",
    value: (function () {
      var _fallbackToCache = (0, _asyncToGenerator2.default)(function* (fn, getCacheFn) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        try {
          var result = yield fn();
          return {
            success: true,
            data: result
          };
        } catch (error) {
          logger_1.logger.warn('Request failed, attempting cache fallback', {
            error: error
          });
          try {
            var cachedData = yield getCacheFn();
            if (cachedData !== null) {
              logger_1.logger.info('Using cached data as fallback');
              return {
                success: true,
                data: cachedData
              };
            }
          } catch (cacheError) {
            logger_1.logger.error('Cache retrieval failed', {
              error: cacheError
            });
          }
          return {
            success: false,
            error: error
          };
        }
      });
      function fallbackToCache(_x4, _x5) {
        return _fallbackToCache.apply(this, arguments);
      }
      return fallbackToCache;
    }())
  }, {
    key: "queueForOffline",
    value: (function () {
      var _queueForOffline = (0, _asyncToGenerator2.default)(function* (fn, queueFn) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        try {
          var result = yield fn();
          return {
            success: true,
            data: result
          };
        } catch (error) {
          if (this.isNetworkError(error)) {
            logger_1.logger.info('Network error, queueing for offline processing', {
              error: error
            });
            try {
              yield queueFn(options.fallbackData);
              return {
                success: true,
                data: options.fallbackData
              };
            } catch (queueError) {
              logger_1.logger.error('Failed to queue request', {
                error: queueError
              });
            }
          }
          return {
            success: false,
            error: error
          };
        }
      });
      function queueForOffline(_x6, _x7) {
        return _queueForOffline.apply(this, arguments);
      }
      return queueForOffline;
    }())
  }, {
    key: "promptUserIntervention",
    value: (function () {
      var _promptUserIntervention = (0, _asyncToGenerator2.default)(function* (fn, promptFn) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        try {
          var result = yield fn();
          return {
            success: true,
            data: result
          };
        } catch (error) {
          var userWantsRetry = yield promptFn(error);
          if (userWantsRetry) {
            logger_1.logger.info('User requested retry');
            return yield this.autoRetry(fn, options);
          }
          return {
            success: false,
            error: error
          };
        }
      });
      function promptUserIntervention(_x8, _x9) {
        return _promptUserIntervention.apply(this, arguments);
      }
      return promptUserIntervention;
    }())
  }, {
    key: "combinedRecovery",
    value: (function () {
      var _combinedRecovery = (0, _asyncToGenerator2.default)(function* (fn, strategies) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        try {
          var result = yield fn();
          return {
            success: true,
            data: result
          };
        } catch (error) {
          if (strategies.refreshToken && this.isAuthenticationError(error)) {
            logger_1.logger.info('Attempting token refresh recovery');
            var _result = yield this.retryWithTokenRefresh(fn, strategies.refreshToken, options);
            if (_result.success) {
              return _result;
            }
          }
          if (strategies.useCache) {
            logger_1.logger.info('Attempting cache fallback');
            var _result2 = yield this.fallbackToCache(fn, strategies.useCache, options);
            if (_result2.success) {
              return _result2;
            }
          }
          if (strategies.queue && this.isNetworkError(error)) {
            logger_1.logger.info('Attempting offline queue');
            var _result3 = yield this.queueForOffline(fn, strategies.queue, options);
            if (_result3.success) {
              return _result3;
            }
          }
          if (strategies.retry) {
            logger_1.logger.info('Attempting auto-retry');
            var _result4 = yield this.autoRetry(fn, options);
            if (_result4.success) {
              return _result4;
            }
          }
          if (strategies.promptUser) {
            logger_1.logger.info('Prompting user for intervention');
            return yield this.promptUserIntervention(fn, strategies.promptUser, options);
          }
          return {
            success: false,
            error: error
          };
        }
      });
      function combinedRecovery(_x0, _x1) {
        return _combinedRecovery.apply(this, arguments);
      }
      return combinedRecovery;
    }())
  }, {
    key: "isAuthenticationError",
    value: function isAuthenticationError(error) {
      if (error && typeof error === 'object') {
        if ('status' in error && error.status === 401) {
          return true;
        }
        if ('statusCode' in error && error.statusCode === 401) {
          return true;
        }
      }
      if (error instanceof Error) {
        var message = error.message.toLowerCase();
        return message.includes('unauthorized') || message.includes('authentication') || message.includes('token');
      }
      return false;
    }
  }, {
    key: "isNetworkError",
    value: function isNetworkError(error) {
      if (error instanceof Error) {
        var message = error.message.toLowerCase();
        return message.includes('network') || message.includes('connection') || message.includes('timeout') || message.includes('econnrefused');
      }
      return false;
    }
  }, {
    key: "sleep",
    value: function sleep(ms) {
      return new Promise(function (resolve) {
        return setTimeout(resolve, ms);
      });
    }
  }]);
}();
exports.RecoveryStrategies = RecoveryStrategies;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,