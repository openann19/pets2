1bb890f2d843bae0aa9c9995d3cd97f9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBlockedUsers = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var useBlockedUsers = exports.useBlockedUsers = function useBlockedUsers() {
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    blockedUsers = _useState2[0],
    setBlockedUsers = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isRefreshing = _useState6[0],
    setIsRefreshing = _useState6[1];
  var loadBlockedUsers = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    try {
      if (refresh) setIsRefreshing(true);else setIsLoading(true);
      _core.logger.info("Loading blocked users", {
        refresh: refresh
      });
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 1000);
      });
      var mockUsers = [{
        id: "user1",
        name: "John Doe",
        email: "john@example.com",
        blockedAt: new Date(Date.now() - 86400000).toISOString(),
        reason: "Inappropriate behavior",
        avatar: "https://via.placeholder.com/40"
      }, {
        id: "user2",
        name: "Jane Smith",
        email: "jane@example.com",
        blockedAt: new Date(Date.now() - 172800000).toISOString(),
        reason: "Spam messages"
      }];
      setBlockedUsers(mockUsers);
    } catch (error) {
      _core.logger.error("Failed to load blocked users", {
        error: error
      });
      _reactNative.Alert.alert("Error", "Failed to load blocked users. Please try again.");
    } finally {
      setIsLoading(false);
      setIsRefreshing(false);
    }
  }), []);
  var unblockUser = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (userId, userName) {
      _reactNative.Alert.alert("Unblock User", `Are you sure you want to unblock ${userName}?`, [{
        text: "Cancel",
        style: "cancel"
      }, {
        text: "Unblock",
        style: "destructive",
        onPress: function () {
          var _onPress = (0, _asyncToGenerator2.default)(function* () {
            try {
              _core.logger.info("Unblocking user", {
                userId: userId,
                userName: userName
              });
              yield new Promise(function (resolve) {
                return setTimeout(resolve, 500);
              });
              setBlockedUsers(function (prev) {
                return prev.filter(function (user) {
                  return user.id !== userId;
                });
              });
              _reactNative.Alert.alert("Success", `${userName} has been unblocked`);
            } catch (error) {
              _core.logger.error("Failed to unblock user", {
                error: error,
                userId: userId
              });
              _reactNative.Alert.alert("Error", "Failed to unblock user. Please try again.");
            }
          });
          function onPress() {
            return _onPress.apply(this, arguments);
          }
          return onPress;
        }()
      }]);
    });
    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }(), []);
  var blockUser = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (userId, reason) {
      try {
        _core.logger.info("Blocking user", {
          userId: userId,
          reason: reason
        });
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 500);
        });
        return true;
      } catch (error) {
        _core.logger.error("Failed to block user", {
          error: error,
          userId: userId
        });
        return false;
      }
    });
    return function (_x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }(), []);
  var refreshData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield loadBlockedUsers(true);
  }), [loadBlockedUsers]);
  (0, _react.useEffect)(function () {
    void loadBlockedUsers();
  }, [loadBlockedUsers]);
  var totalBlocked = blockedUsers.length;
  return {
    blockedUsers: blockedUsers,
    isLoading: isLoading,
    isRefreshing: isRefreshing,
    loadBlockedUsers: loadBlockedUsers,
    unblockUser: unblockUser,
    blockUser: blockUser,
    refreshData: refreshData,
    totalBlocked: totalBlocked
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,