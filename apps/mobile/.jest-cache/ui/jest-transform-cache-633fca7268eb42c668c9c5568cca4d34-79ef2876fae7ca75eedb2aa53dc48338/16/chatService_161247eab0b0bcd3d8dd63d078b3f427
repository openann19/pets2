1b72b8c8f1474cce11a92360bd390db0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chatService = void 0;
exports.sendVoiceNoteNative = sendVoiceNoteNative;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _core = require("@pawfectmatch/core");
var _api = require("./api");
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ChatService = function () {
  function ChatService() {
    (0, _classCallCheck2.default)(this, ChatService);
  }
  return (0, _createClass2.default)(ChatService, [{
    key: "sendReaction",
    value: (function () {
      var _sendReaction = (0, _asyncToGenerator2.default)(function* (matchId, messageId, reaction) {
        try {
          var response = yield (0, _api.request)("/chat/reactions", {
            method: "POST",
            body: {
              matchId: matchId,
              messageId: messageId,
              reaction: reaction
            }
          });
          _core.logger.info("Reaction sent successfully", {
            matchId: matchId,
            messageId: messageId,
            reaction: reaction
          });
          return response;
        } catch (error) {
          _core.logger.error("Failed to send reaction", {
            error: error,
            matchId: matchId,
            messageId: messageId,
            reaction: reaction
          });
          throw error;
        }
      });
      function sendReaction(_x, _x2, _x3) {
        return _sendReaction.apply(this, arguments);
      }
      return sendReaction;
    }())
  }, {
    key: "sendAttachment",
    value: (function () {
      var _sendAttachment = (0, _asyncToGenerator2.default)(function* (params) {
        try {
          var formData = new FormData();
          formData.append("file", params.file);
          formData.append("matchId", params.matchId);
          formData.append("type", params.attachmentType);
          if (params.name) {
            formData.append("name", params.name);
          }
          var response = yield (0, _api.request)("/chat/attachments", {
            method: "POST",
            body: formData,
            headers: {}
          });
          _core.logger.info("Attachment sent successfully", {
            params: params
          });
          return response;
        } catch (error) {
          _core.logger.error("Failed to send attachment", {
            error: error,
            params: params
          });
          throw error;
        }
      });
      function sendAttachment(_x4) {
        return _sendAttachment.apply(this, arguments);
      }
      return sendAttachment;
    }())
  }, {
    key: "sendVoiceNote",
    value: function () {
      var _sendVoiceNote = (0, _asyncToGenerator2.default)(function* (matchIdOrParams, file, duration) {
        try {
          var formData;
          var _matchId;
          var voiceDuration;
          if (typeof matchIdOrParams === "string") {
            _matchId = matchIdOrParams;
            if (file instanceof FormData) {
              formData = file;
              formData.append("matchId", _matchId);
            } else if (file instanceof Blob) {
              formData = new FormData();
              var audioFile = new File([file], "voice-note.webm", {
                type: "audio/webm"
              });
              formData.append("audioBlob", audioFile);
              formData.append("matchId", _matchId);
            } else {
              throw new Error("Invalid file type");
            }
            voiceDuration = duration || 0;
          } else {
            var _params = matchIdOrParams;
            _matchId = _params.matchId;
            formData = new FormData();
            var _audioFile = new File([_params.audioBlob], "voice-note.m4a", {
              type: "audio/m4a"
            });
            formData.append("audioBlob", _audioFile);
            formData.append("matchId", _matchId);
            formData.append("duration", String(_params.duration));
            voiceDuration = _params.duration;
          }
          var response = yield (0, _api.request)("/api/chat/voice", {
            method: "POST",
            body: formData,
            headers: {}
          });
          _core.logger.info("Voice note sent successfully", {
            matchId: _matchId,
            duration: voiceDuration
          });
          if (typeof matchIdOrParams !== "string") {
            return response;
          }
        } catch (error) {
          _core.logger.error("Failed to send voice note", {
            error: error,
            matchIdOrParams: matchIdOrParams
          });
          throw error;
        }
      });
      function sendVoiceNote(_x5, _x6, _x7) {
        return _sendVoiceNote.apply(this, arguments);
      }
      return sendVoiceNote;
    }()
  }]);
}();
var chatService = exports.chatService = new ChatService();
function sendVoiceNoteNative(_x8, _x9) {
  return _sendVoiceNoteNative.apply(this, arguments);
}
function _sendVoiceNoteNative() {
  _sendVoiceNoteNative = (0, _asyncToGenerator2.default)(function* (matchId, p) {
    var presign = yield (0, _api.request)("/uploads/voice/presign", {
      method: "POST",
      body: {
        contentType: "audio/webm"
      }
    });
    var url = presign.url,
      key = presign.key;
    yield FileSystem.uploadAsync(url, p.fileUri, {
      httpMethod: "PUT",
      headers: {
        "Content-Type": "audio/webm"
      },
      uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT
    });
    yield (0, _api.request)(`/chat/${matchId}/voice-note`, {
      method: "POST",
      body: {
        key: key,
        duration: p.duration,
        waveform: []
      }
    });
  });
  return _sendVoiceNoteNative.apply(this, arguments);
}
Object.assign(chatService, {
  sendVoiceNoteNative: sendVoiceNoteNative
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,