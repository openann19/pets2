b3fe6da5d80b5e84e6e88c222d5a0b11
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _NativePerformanceObserver = _interopRequireDefault(require("./NativePerformanceObserver"));
var _PerformanceObserver = require("./PerformanceObserver");
var cachedEventCounts;
function getCachedEventCounts() {
  var _cachedEventCounts;
  if (cachedEventCounts) {
    return cachedEventCounts;
  }
  if (!_NativePerformanceObserver.default) {
    (0, _PerformanceObserver.warnNoNativePerformanceObserver)();
    return new Map();
  }
  cachedEventCounts = new Map(_NativePerformanceObserver.default.getEventCounts());
  global.queueMicrotask(function () {
    cachedEventCounts = null;
  });
  return (_cachedEventCounts = cachedEventCounts) != null ? _cachedEventCounts : new Map();
}
var EventCounts = exports.default = function () {
  function EventCounts() {
    (0, _classCallCheck2.default)(this, EventCounts);
  }
  return (0, _createClass2.default)(EventCounts, [{
    key: "size",
    get: function get() {
      return getCachedEventCounts().size;
    }
  }, {
    key: "entries",
    value: function entries() {
      return getCachedEventCounts().entries();
    }
  }, {
    key: "forEach",
    value: function forEach(callback) {
      return getCachedEventCounts().forEach(callback);
    }
  }, {
    key: "get",
    value: function get(key) {
      return getCachedEventCounts().get(key);
    }
  }, {
    key: "has",
    value: function has(key) {
      return getCachedEventCounts().has(key);
    }
  }, {
    key: "keys",
    value: function keys() {
      return getCachedEventCounts().keys();
    }
  }, {
    key: "values",
    value: function values() {
      return getCachedEventCounts().values();
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlUGVyZm9ybWFuY2VPYnNlcnZlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1BlcmZvcm1hbmNlT2JzZXJ2ZXIiLCJjYWNoZWRFdmVudENvdW50cyIsImdldENhY2hlZEV2ZW50Q291bnRzIiwiX2NhY2hlZEV2ZW50Q291bnRzIiwiTmF0aXZlUGVyZm9ybWFuY2VPYnNlcnZlciIsIndhcm5Ob05hdGl2ZVBlcmZvcm1hbmNlT2JzZXJ2ZXIiLCJNYXAiLCJnZXRFdmVudENvdW50cyIsImdsb2JhbCIsInF1ZXVlTWljcm90YXNrIiwiRXZlbnRDb3VudHMiLCJleHBvcnRzIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwiZ2V0Iiwic2l6ZSIsInZhbHVlIiwiZW50cmllcyIsImZvckVhY2giLCJjYWxsYmFjayIsImhhcyIsImtleXMiLCJ2YWx1ZXMiXSwic291cmNlcyI6WyJFdmVudENvdW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IE5hdGl2ZVBlcmZvcm1hbmNlT2JzZXJ2ZXIgZnJvbSAnLi9OYXRpdmVQZXJmb3JtYW5jZU9ic2VydmVyJztcbmltcG9ydCB7d2Fybk5vTmF0aXZlUGVyZm9ybWFuY2VPYnNlcnZlcn0gZnJvbSAnLi9QZXJmb3JtYW5jZU9ic2VydmVyJztcblxudHlwZSBFdmVudENvdW50c0ZvckVhY2hDYWxsYmFja1R5cGUgPVxuICB8ICgoKSA9PiB2b2lkKVxuICB8ICgodmFsdWU6IG51bWJlcikgPT4gdm9pZClcbiAgfCAoKHZhbHVlOiBudW1iZXIsIGtleTogc3RyaW5nKSA9PiB2b2lkKVxuICB8ICgodmFsdWU6IG51bWJlciwga2V5OiBzdHJpbmcsIG1hcDogTWFwPHN0cmluZywgbnVtYmVyPikgPT4gdm9pZCk7XG5cbmxldCBjYWNoZWRFdmVudENvdW50czogP01hcDxzdHJpbmcsIG51bWJlcj47XG5cbmZ1bmN0aW9uIGdldENhY2hlZEV2ZW50Q291bnRzKCk6IE1hcDxzdHJpbmcsIG51bWJlcj4ge1xuICBpZiAoY2FjaGVkRXZlbnRDb3VudHMpIHtcbiAgICByZXR1cm4gY2FjaGVkRXZlbnRDb3VudHM7XG4gIH1cbiAgaWYgKCFOYXRpdmVQZXJmb3JtYW5jZU9ic2VydmVyKSB7XG4gICAgd2Fybk5vTmF0aXZlUGVyZm9ybWFuY2VPYnNlcnZlcigpO1xuICAgIHJldHVybiBuZXcgTWFwKCk7XG4gIH1cblxuICBjYWNoZWRFdmVudENvdW50cyA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KFxuICAgIE5hdGl2ZVBlcmZvcm1hbmNlT2JzZXJ2ZXIuZ2V0RXZlbnRDb3VudHMoKSxcbiAgKTtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgZ2xvYmFsLnF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAvLyBUbyBiZSBjb25zaXN0ZW50IHdpdGggdGhlIGNhbGxzIHRvIHRoZSBBUEkgZnJvbSB0aGUgc2FtZSB0YXNrLFxuICAgIC8vIGJ1dCBhbHNvIG5vdCB0byByZWZldGNoIHRoZSBkYXRhIGZyb20gbmF0aXZlIHRvbyBvZnRlbixcbiAgICAvLyBzY2hlZHVsZSB0byBpbnZhbGlkYXRlIHRoZSBjYWNoZSBsYXRlcixcbiAgICAvLyBhZnRlciB0aGUgY3VycmVudCB0YXNrIGlzIGd1YXJhbnRlZWQgdG8gaGF2ZSBmaW5pc2hlZC5cbiAgICBjYWNoZWRFdmVudENvdW50cyA9IG51bGw7XG4gIH0pO1xuICByZXR1cm4gY2FjaGVkRXZlbnRDb3VudHMgPz8gbmV3IE1hcCgpO1xufVxuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgRXZlbnRDb3VudHMgV2ViIFBlcmZvcm1hbmNlIEFQSVxuICogY29ycmVzcG9uZGluZyB0byB0aGUgc3RhbmRhcmQgaW5cbiAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ldmVudC10aW1pbmcvI2V2ZW50Y291bnRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50Q291bnRzIHtcbiAgLy8gZmxvd2xpbnQgdW5zYWZlLWdldHRlcnMtc2V0dGVyczpvZmZcbiAgZ2V0IHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZ2V0Q2FjaGVkRXZlbnRDb3VudHMoKS5zaXplO1xuICB9XG5cbiAgZW50cmllcygpOiBJdGVyYXRvcjxbc3RyaW5nLCBudW1iZXJdPiB7XG4gICAgcmV0dXJuIGdldENhY2hlZEV2ZW50Q291bnRzKCkuZW50cmllcygpO1xuICB9XG5cbiAgZm9yRWFjaChjYWxsYmFjazogRXZlbnRDb3VudHNGb3JFYWNoQ2FsbGJhY2tUeXBlKTogdm9pZCB7XG4gICAgcmV0dXJuIGdldENhY2hlZEV2ZW50Q291bnRzKCkuZm9yRWFjaChjYWxsYmFjayk7XG4gIH1cblxuICBnZXQoa2V5OiBzdHJpbmcpOiA/bnVtYmVyIHtcbiAgICByZXR1cm4gZ2V0Q2FjaGVkRXZlbnRDb3VudHMoKS5nZXQoa2V5KTtcbiAgfVxuXG4gIGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBnZXRDYWNoZWRFdmVudENvdW50cygpLmhhcyhrZXkpO1xuICB9XG5cbiAga2V5cygpOiBJdGVyYXRvcjxzdHJpbmc+IHtcbiAgICByZXR1cm4gZ2V0Q2FjaGVkRXZlbnRDb3VudHMoKS5rZXlzKCk7XG4gIH1cblxuICB2YWx1ZXMoKTogSXRlcmF0b3I8bnVtYmVyPiB7XG4gICAgcmV0dXJuIGdldENhY2hlZEV2ZW50Q291bnRzKCkudmFsdWVzKCk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBVUEsSUFBQUEsMEJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLG9CQUFBLEdBQUFELE9BQUE7QUFRQSxJQUFJRSxpQkFBdUM7QUFFM0MsU0FBU0Msb0JBQW9CQSxDQUFBLEVBQXdCO0VBQUEsSUFBQUMsa0JBQUE7RUFDbkQsSUFBSUYsaUJBQWlCLEVBQUU7SUFDckIsT0FBT0EsaUJBQWlCO0VBQzFCO0VBQ0EsSUFBSSxDQUFDRyxrQ0FBeUIsRUFBRTtJQUM5QixJQUFBQyxvREFBK0IsRUFBQyxDQUFDO0lBQ2pDLE9BQU8sSUFBSUMsR0FBRyxDQUFDLENBQUM7RUFDbEI7RUFFQUwsaUJBQWlCLEdBQUcsSUFBSUssR0FBRyxDQUN6QkYsa0NBQXlCLENBQUNHLGNBQWMsQ0FBQyxDQUMzQyxDQUFDO0VBRURDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDLFlBQU07SUFLMUJSLGlCQUFpQixHQUFHLElBQUk7RUFDMUIsQ0FBQyxDQUFDO0VBQ0YsUUFBQUUsa0JBQUEsR0FBT0YsaUJBQWlCLFlBQUFFLGtCQUFBLEdBQUksSUFBSUcsR0FBRyxDQUFDLENBQUM7QUFDdkM7QUFBQyxJQU1vQkksV0FBVyxHQUFBQyxPQUFBLENBQUFDLE9BQUE7RUFBQSxTQUFBRixZQUFBO0lBQUEsSUFBQUcsZ0JBQUEsQ0FBQUQsT0FBQSxRQUFBRixXQUFBO0VBQUE7RUFBQSxXQUFBSSxhQUFBLENBQUFGLE9BQUEsRUFBQUYsV0FBQTtJQUFBSyxHQUFBO0lBQUFDLEdBQUEsRUFFOUIsU0FBQUEsSUFBQSxFQUFtQjtNQUNqQixPQUFPZCxvQkFBb0IsQ0FBQyxDQUFDLENBQUNlLElBQUk7SUFDcEM7RUFBQztJQUFBRixHQUFBO0lBQUFHLEtBQUEsRUFFRCxTQUFBQyxPQUFPQSxDQUFBLEVBQStCO01BQ3BDLE9BQU9qQixvQkFBb0IsQ0FBQyxDQUFDLENBQUNpQixPQUFPLENBQUMsQ0FBQztJQUN6QztFQUFDO0lBQUFKLEdBQUE7SUFBQUcsS0FBQSxFQUVELFNBQUFFLE9BQU9BLENBQUNDLFFBQXdDLEVBQVE7TUFDdEQsT0FBT25CLG9CQUFvQixDQUFDLENBQUMsQ0FBQ2tCLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDO0lBQ2pEO0VBQUM7SUFBQU4sR0FBQTtJQUFBRyxLQUFBLEVBRUQsU0FBQUYsR0FBR0EsQ0FBQ0QsR0FBVyxFQUFXO01BQ3hCLE9BQU9iLG9CQUFvQixDQUFDLENBQUMsQ0FBQ2MsR0FBRyxDQUFDRCxHQUFHLENBQUM7SUFDeEM7RUFBQztJQUFBQSxHQUFBO0lBQUFHLEtBQUEsRUFFRCxTQUFBSSxHQUFHQSxDQUFDUCxHQUFXLEVBQVc7TUFDeEIsT0FBT2Isb0JBQW9CLENBQUMsQ0FBQyxDQUFDb0IsR0FBRyxDQUFDUCxHQUFHLENBQUM7SUFDeEM7RUFBQztJQUFBQSxHQUFBO0lBQUFHLEtBQUEsRUFFRCxTQUFBSyxJQUFJQSxDQUFBLEVBQXFCO01BQ3ZCLE9BQU9yQixvQkFBb0IsQ0FBQyxDQUFDLENBQUNxQixJQUFJLENBQUMsQ0FBQztJQUN0QztFQUFDO0lBQUFSLEdBQUE7SUFBQUcsS0FBQSxFQUVELFNBQUFNLE1BQU1BLENBQUEsRUFBcUI7TUFDekIsT0FBT3RCLG9CQUFvQixDQUFDLENBQUMsQ0FBQ3NCLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDO0VBQUM7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==