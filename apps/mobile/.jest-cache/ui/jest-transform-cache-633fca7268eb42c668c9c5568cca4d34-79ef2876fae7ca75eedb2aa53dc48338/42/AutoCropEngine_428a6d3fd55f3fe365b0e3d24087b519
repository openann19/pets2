ce0f8c9bcd18eedaff22017f1ec4f3a1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoCropEngine = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _reactNative = require("react-native");
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var FaceDetector = null;
try {
  FaceDetector = require("expo-face-detector");
} catch (_unused) {
  FaceDetector = null;
}
var clamp = function clamp(v, min, max) {
  return Math.max(min, Math.min(max, v));
};
var padRect = function padRect(r, imgW, imgH) {
  var padPct = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.18;
  var padX = r.width * padPct;
  var padY = r.height * padPct;
  var x = clamp(r.x - padX, 0, imgW);
  var y = clamp(r.y - padY, 0, imgH);
  var width = clamp(r.width + padX * 2, 1, imgW - x);
  var height = clamp(r.height + padY * 2, 1, imgH - y);
  return {
    x: x,
    y: y,
    width: width,
    height: height
  };
};
var unionRects = function unionRects(rects) {
  var minX = Math.min.apply(Math, (0, _toConsumableArray2.default)(rects.map(function (r) {
    return r.x;
  })));
  var minY = Math.min.apply(Math, (0, _toConsumableArray2.default)(rects.map(function (r) {
    return r.y;
  })));
  var maxX = Math.max.apply(Math, (0, _toConsumableArray2.default)(rects.map(function (r) {
    return r.x + r.width;
  })));
  var maxY = Math.max.apply(Math, (0, _toConsumableArray2.default)(rects.map(function (r) {
    return r.y + r.height;
  })));
  return {
    x: minX,
    y: minY,
    width: maxX - minX,
    height: maxY - minY
  };
};
var biggestRect = function biggestRect(rects) {
  return rects.slice().sort(function (a, b) {
    return b.width * b.height - a.width * a.height;
  })[0];
};
var ratioToNumber = function ratioToNumber(r) {
  if (r === "FREE") return NaN;
  var parts = r.split(":");
  if (parts.length !== 2) return NaN;
  var a = Number(parts[0]);
  var b = Number(parts[1]);
  if (isNaN(a) || isNaN(b) || b === 0) return NaN;
  return a / b;
};
function getImageSize(_x) {
  return _getImageSize.apply(this, arguments);
}
function _getImageSize() {
  _getImageSize = (0, _asyncToGenerator2.default)(function* (uri) {
    return new Promise(function (resolve) {
      _reactNative.Image.getSize(uri, function (w, h) {
        return resolve({
          w: w,
          h: h
        });
      }, function () {
        return resolve({
          w: 0,
          h: 0
        });
      });
    });
  });
  return _getImageSize.apply(this, arguments);
}
function cropForRatio(focus, imgW, imgH, ratio) {
  var padPct = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.12;
  var ar = ratioToNumber(ratio);
  var padded = padRect(focus, imgW, imgH, padPct);
  var cx = padded.x + padded.width / 2;
  var cy = padded.y + padded.height / 2;
  var width;
  var height;
  var focusAR = padded.width / padded.height;
  if (isNaN(ar)) {
    width = padded.width;
    height = padded.height;
  } else if (focusAR >= ar) {
    width = padded.width;
    height = width / ar;
  } else {
    height = padded.height;
    width = height * ar;
  }
  width = Math.min(width, imgW);
  height = Math.min(height, imgH);
  var x = cx - width / 2;
  var y = cy - height / 2;
  x = clamp(x, 0, imgW - width);
  y = clamp(y, 0, imgH - height);
  return {
    x: x,
    y: y,
    width: width,
    height: height
  };
}
function buildEyeWeightedFocus(faces, imgW, imgH) {
  var eyeWeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.55;
  var faceRects = faces.map(function (f) {
    return {
      x: f.bounds.origin.x,
      y: f.bounds.origin.y,
      width: f.bounds.size.width,
      height: f.bounds.size.height
    };
  });
  var haveLandmarks = faces.every(function (f) {
    var _f$landmarks, _f$landmarks2;
    return f.LEFT_EYE || f.RIGHT_EYE || ((_f$landmarks = f.landmarks) == null ? void 0 : _f$landmarks.leftEye) || ((_f$landmarks2 = f.landmarks) == null ? void 0 : _f$landmarks2.rightEye);
  });
  if (haveLandmarks) {
    var points = [];
    faces.forEach(function (f) {
      var _f$landmarks3, _f$landmarks4;
      var le = f.LEFT_EYE || ((_f$landmarks3 = f.landmarks) == null ? void 0 : _f$landmarks3.leftEye);
      var re = f.RIGHT_EYE || ((_f$landmarks4 = f.landmarks) == null ? void 0 : _f$landmarks4.rightEye);
      if (le) points.push({
        x: le.x,
        y: le.y
      });
      if (re) points.push({
        x: re.x,
        y: re.y
      });
    });
    if (points.length >= 2) {
      var minX = Math.min.apply(Math, (0, _toConsumableArray2.default)(points.map(function (p) {
        return p.x;
      })));
      var maxX = Math.max.apply(Math, (0, _toConsumableArray2.default)(points.map(function (p) {
        return p.x;
      })));
      var minY = Math.min.apply(Math, (0, _toConsumableArray2.default)(points.map(function (p) {
        return p.y;
      })));
      var maxY = Math.max.apply(Math, (0, _toConsumableArray2.default)(points.map(function (p) {
        return p.y;
      })));
      if (isNaN(minX) || isNaN(maxX) || isNaN(minY) || isNaN(maxY)) {
        var _merged = padRect(unionRects(faceRects), imgW, imgH, 0.18);
        return {
          rect: _merged,
          method: "face"
        };
      }
      var eyesRect = {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
      var base = unionRects(faceRects);
      var targetW = base.width * 0.55;
      var targetH = base.height * 0.55;
      var cx = eyesRect.x + eyesRect.width / 2;
      var cy = eyesRect.y + eyesRect.height / 2;
      var baseCx = base.x + base.width / 2;
      var baseCy = base.y + base.height / 2;
      var focusCx = baseCx * (1 - eyeWeight) + cx * eyeWeight;
      var upwardBias = Math.max(8, base.height * 0.08);
      var focusCy = baseCy * (1 - eyeWeight) + (cy - upwardBias) * eyeWeight;
      var rect = {
        x: clamp(focusCx - targetW / 2, 0, imgW - targetW),
        y: clamp(focusCy - targetH / 2, 0, imgH - targetH),
        width: Math.min(targetW, imgW),
        height: Math.min(targetH, imgH)
      };
      return {
        rect: padRect(rect, imgW, imgH, 0.18),
        method: "eyes"
      };
    }
  }
  var merged = padRect(unionRects(faceRects), imgW, imgH, 0.18);
  return {
    rect: merged,
    method: "face"
  };
}
function detectFaces(_x2) {
  return _detectFaces.apply(this, arguments);
}
function _detectFaces() {
  _detectFaces = (0, _asyncToGenerator2.default)(function* (uri) {
    var _FaceDetector;
    if (!((_FaceDetector = FaceDetector) != null && _FaceDetector.FaceDetector)) return null;
    try {
      var options = {
        mode: FaceDetector.FaceDetectorMode.accurate,
        detectLandmarks: FaceDetector.FaceDetectorLandmarks.all,
        runClassifications: FaceDetector.FaceDetectorClassifications.none
      };
      var result = yield FaceDetector.FaceDetector.processImageAsync(uri, options);
      return Array.isArray(result) ? result : null;
    } catch (_unused2) {
      return null;
    }
  });
  return _detectFaces.apply(this, arguments);
}
var AutoCropEngine = exports.AutoCropEngine = {
  detect: function () {
    var _detect = (0, _asyncToGenerator2.default)(function* (uri) {
      var _opts$padPct;
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _yield$getImageSize = yield getImageSize(uri),
        imgW = _yield$getImageSize.w,
        imgH = _yield$getImageSize.h;
      if (!imgW || !imgH) return null;
      var faces = yield detectFaces(uri);
      if (faces && faces.length > 0) {
        var _opts$eyeWeight;
        var _buildEyeWeightedFocu = buildEyeWeightedFocus(faces, imgW, imgH, (_opts$eyeWeight = opts.eyeWeight) != null ? _opts$eyeWeight : 0.55),
          rect = _buildEyeWeightedFocu.rect,
          method = _buildEyeWeightedFocu.method;
        return {
          focus: rect,
          method: method,
          size: {
            w: imgW,
            h: imgH
          }
        };
      }
      var targetAR = 4 / 5;
      var w = Math.min(imgW * 0.7, imgH * targetAR * 0.9);
      var h = w / targetAR;
      var focus = {
        x: (imgW - w) / 2,
        y: (imgH - h) / 2 - imgH * 0.06,
        width: w,
        height: h
      };
      return {
        focus: padRect(focus, imgW, imgH, (_opts$padPct = opts.padPct) != null ? _opts$padPct : 0.18),
        method: "fallback",
        size: {
          w: imgW,
          h: imgH
        }
      };
    });
    function detect(_x3) {
      return _detect.apply(this, arguments);
    }
    return detect;
  }(),
  suggestCrops: function () {
    var _suggestCrops = (0, _asyncToGenerator2.default)(function* (uri) {
      var ratios = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ["1:1", "4:5", "9:16"];
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var res = yield AutoCropEngine.detect(uri, opts);
      if (!res) return [];
      var focus = res.focus,
        method = res.method,
        size = res.size;
      return ratios.map(function (r) {
        var _opts$padPct2;
        return {
          ratio: r,
          focus: focus,
          crop: cropForRatio(focus, size.w, size.h, r, (_opts$padPct2 = opts.padPct) != null ? _opts$padPct2 : 0.12),
          method: method
        };
      });
    });
    function suggestCrops(_x4) {
      return _suggestCrops.apply(this, arguments);
    }
    return suggestCrops;
  }(),
  makeThumbnails: function () {
    var _makeThumbnails = (0, _asyncToGenerator2.default)(function* (uri, suggestions) {
      var thumbOpts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var _thumbOpts$size = thumbOpts.size,
        size = _thumbOpts$size === void 0 ? 240 : _thumbOpts$size,
        _thumbOpts$quality = thumbOpts.quality,
        quality = _thumbOpts$quality === void 0 ? 0.9 : _thumbOpts$quality;
      var withThumbs = [];
      for (var s of suggestions) {
        var result = yield ImageManipulator.manipulateAsync(uri, [{
          crop: {
            originX: Math.round(s.crop.x),
            originY: Math.round(s.crop.y),
            width: Math.round(s.crop.width),
            height: Math.round(s.crop.height)
          }
        }, {
          resize: {
            width: size
          }
        }], {
          compress: quality,
          format: ImageManipulator.SaveFormat.JPEG
        });
        withThumbs.push(_objectSpread(_objectSpread({}, s), {}, {
          thumbUri: result.uri
        }));
      }
      return withThumbs;
    });
    function makeThumbnails(_x5, _x6) {
      return _makeThumbnails.apply(this, arguments);
    }
    return makeThumbnails;
  }(),
  applyCrop: function () {
    var _applyCrop = (0, _asyncToGenerator2.default)(function* (uri, rect) {
      var quality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var result = yield ImageManipulator.manipulateAsync(uri, [{
        crop: {
          originX: Math.round(rect.x),
          originY: Math.round(rect.y),
          width: Math.round(rect.width),
          height: Math.round(rect.height)
        }
      }], {
        compress: quality,
        format: ImageManipulator.SaveFormat.JPEG
      });
      return result.uri;
    });
    function applyCrop(_x7, _x8) {
      return _applyCrop.apply(this, arguments);
    }
    return applyCrop;
  }()
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,