167bda79f8151a48d4edd26fd041427e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ParallaxCard;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _unifiedTheme = require("../../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
var _worklet_11475430993177_init_data = {
  code: "function anonymous() {\n  const {\n    rx,\n    ry,\n    s,\n    glow,\n    Theme\n  } = this._closure;\n  return {\n    transform: [{\n      perspective: 800\n    }, {\n      rotateX: rx.value + \"deg\"\n    }, {\n      rotateY: ry.value + \"deg\"\n    }, {\n      scale: s.value\n    }],\n    shadowOpacity: glow ? 0.2 : 0.1,\n    shadowRadius: glow ? 24 : 12,\n    shadowColor: Theme.colors.primary[500]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/ParallaxCard.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"rx\",\"ry\",\"s\",\"glow\",\"Theme\",\"_closure\",\"transform\",\"perspective\",\"rotateX\",\"value\",\"rotateY\",\"scale\",\"shadowOpacity\",\"shadowRadius\",\"shadowColor\",\"colors\",\"primary\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/micro/ParallaxCard.tsx\"],\"mappings\":\"AAsC6B,SAAAA,UAAA;EAAA;IAAAC,EAAA;IAAAC,EAAA;IAAAC,CAAA;IAAAC,IAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAChCC,SAAS,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAI,CAAC,EAAE;MAAEC,OAAO,EAAKR,EAAE,CAACS,KAAK;IAAM,CAAC,EAAE;MAAEC,OAAO,EAAKT,EAAE,CAACQ,KAAK;IAAM,CAAC,EAAE;MAAEE,KAAK,EAAET,CAAC,CAACO;IAAM,CAAC,CAAC;IACnHG,aAAa,EAAET,IAAI,GAAG,GAAG,GAAG,GAAG;IAC/BU,YAAY,EAAEV,IAAI,GAAG,EAAE,GAAG,EAAE;IAC5BW,WAAW,EAAEV,KAAK,CAACW,MAAM,CAACC,OAAO,CAAC,GAAG;EACvC,CAAC;AAAA\",\"ignoreList\":[]}"
};
function ParallaxCard(_ref) {
  var children = _ref.children,
    style = _ref.style,
    _ref$intensity = _ref.intensity,
    intensity = _ref$intensity === void 0 ? 0.6 : _ref$intensity,
    _ref$glow = _ref.glow,
    glow = _ref$glow === void 0 ? true : _ref$glow;
  var _useState = (0, _react.useState)({
      w: 0,
      h: 0
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    box = _useState2[0],
    setBox = _useState2[1];
  var rx = (0, _reactNativeReanimated.useSharedValue)(0);
  var ry = (0, _reactNativeReanimated.useSharedValue)(0);
  var s = (0, _reactNativeReanimated.useSharedValue)(1);
  var onLayout = function onLayout(e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout,
      width = _e$nativeEvent$layout.width,
      height = _e$nativeEvent$layout.height;
    setBox({
      w: width,
      h: height
    });
  };
  var onPressIn = function onPressIn(e) {
    var _e$nativeEvent = e.nativeEvent,
      locationX = _e$nativeEvent.locationX,
      locationY = _e$nativeEvent.locationY;
    var dx = locationX / Math.max(box.w, 1) - 0.5;
    var dy = locationY / Math.max(box.h, 1) - 0.5;
    rx.value = (0, _reactNativeReanimated.withSpring)((0, _reactNativeReanimated.interpolate)(dy, [-0.5, 0.5], [6, -6]) * intensity);
    ry.value = (0, _reactNativeReanimated.withSpring)((0, _reactNativeReanimated.interpolate)(dx, [-0.5, 0.5], [-6, 6]) * intensity);
    s.value = (0, _reactNativeReanimated.withSpring)(0.995);
  };
  var onPressOut = function onPressOut() {
    rx.value = (0, _reactNativeReanimated.withSpring)(0);
    ry.value = (0, _reactNativeReanimated.withSpring)(0);
    s.value = (0, _reactNativeReanimated.withSpring)(1);
  };
  var a = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -6, -27];
    var _f = function _f() {
      return {
        transform: [{
          perspective: 800
        }, {
          rotateX: `${rx.value}deg`
        }, {
          rotateY: `${ry.value}deg`
        }, {
          scale: s.value
        }],
        shadowOpacity: glow ? 0.2 : 0.1,
        shadowRadius: glow ? 24 : 12,
        shadowColor: _unifiedTheme.Theme.colors.primary[500]
      };
    };
    _f._closure = {
      rx: rx,
      ry: ry,
      s: s,
      glow: glow,
      Theme: _unifiedTheme.Theme
    };
    _f.__initData = _worklet_11475430993177_init_data;
    _f.__workletHash = 11475430993177;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    onLayout: onLayout,
    style: style,
    onStartShouldSetResponder: function onStartShouldSetResponder() {
      return true;
    },
    onResponderGrant: onPressIn,
    onResponderMove: onPressIn,
    onResponderRelease: onPressOut,
    onResponderTerminate: onPressOut,
    children: (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: [a, styles.radius],
      children: children
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  radius: {
    borderRadius: _unifiedTheme.Theme.borderRadius["2xl"],
    overflow: "visible"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,