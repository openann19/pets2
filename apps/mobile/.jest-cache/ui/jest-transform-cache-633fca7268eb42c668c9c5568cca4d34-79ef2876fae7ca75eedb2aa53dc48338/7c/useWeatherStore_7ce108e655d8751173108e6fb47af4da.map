{"version":3,"names":["_interopRequireDefault","require","_defineProperty2","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","default","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","_useWeatherStore","zustand_1","immer_1","create","immer","set","get","data","isLoading","error","location","latitude","longitude","setWeatherData","state","lastUpdated","Date","toISOString","setIsLoading","setError","setLocation","calculateTimeOfDay","sys","now","getTime","sunrise","sunset","dawnStart","duskEnd","timeOfDay","month","getMonth","season"],"sources":["useWeatherStore.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._useWeatherStore = void 0;\nconst zustand_1 = require(\"zustand\");\nconst immer_1 = require(\"zustand/middleware/immer\");\n/**\n * Weather store for managing ambient weather effects\n */\nexports._useWeatherStore = (0, zustand_1.create)()((0, immer_1.immer)((set, get) => ({\n    data: null,\n    isLoading: false,\n    error: null,\n    location: {\n        latitude: null,\n        longitude: null,\n    },\n    // Set weather data\n    setWeatherData: (data) => {\n        set((state) => {\n            state.data = {\n                ...data,\n                lastUpdated: new Date().toISOString(),\n            };\n            state.error = null;\n            return state;\n        });\n    },\n    // Set loading state\n    setIsLoading: (isLoading) => {\n        set((state) => {\n            state.isLoading = isLoading;\n            return state;\n        });\n    },\n    // Set error\n    setError: (error) => {\n        set((state) => {\n            state.error = error;\n            return state;\n        });\n    },\n    // Set user location\n    setLocation: (latitude, longitude) => {\n        set((state) => {\n            state.location = { latitude, longitude };\n            return state;\n        });\n    },\n    // Calculate and update time of day based on current time and sunrise/sunset\n    calculateTimeOfDay: () => {\n        set((state) => {\n            const data = get().data;\n            if (data == null || data.sys == null || state.data == null)\n                return state;\n            const now = new Date().getTime() / 1000; // Current time in seconds\n            const sunrise = data.sys.sunrise != null ? data.sys.sunrise : 0;\n            const sunset = data.sys.sunset != null ? data.sys.sunset : 0;\n            // Dawn: 30 minutes before sunrise to sunrise\n            const dawnStart = sunrise - 30 * 60;\n            // Dusk: sunset to 30 minutes after sunset\n            const duskEnd = sunset + 30 * 60;\n            if (now >= dawnStart && now < sunrise) {\n                state.data.timeOfDay = 'dawn';\n            }\n            else if (now >= sunrise && now < sunset) {\n                state.data.timeOfDay = 'day';\n            }\n            else if (now >= sunset && now < duskEnd) {\n                state.data.timeOfDay = 'dusk';\n            }\n            else {\n                state.data.timeOfDay = 'night';\n            }\n            // Calculate season based on month in northern hemisphere\n            const month = new Date().getMonth(); // 0-11\n            if (month >= 2 && month <= 4) {\n                state.data.season = 'spring';\n            }\n            else if (month >= 5 && month <= 7) {\n                state.data.season = 'summer';\n            }\n            else if (month >= 8 && month <= 10) {\n                state.data.season = 'fall';\n            }\n            else {\n                state.data.season = 'winter';\n            }\n            return state;\n        });\n    },\n})));\n"],"mappings":"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","ignoreList":[]}