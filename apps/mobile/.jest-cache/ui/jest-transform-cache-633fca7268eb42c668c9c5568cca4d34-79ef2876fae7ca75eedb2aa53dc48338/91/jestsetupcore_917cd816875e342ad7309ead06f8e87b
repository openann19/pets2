eeddbf7c005718c3c035618bd1627c8e
"use strict";

global.TextEncoder = global.TextEncoder || require('util').TextEncoder;
global.TextDecoder = global.TextDecoder || require('util').TextDecoder;
global.Alert = {
  alert: jest.fn()
};
global.Platform = {
  OS: 'ios',
  Version: '14.0',
  select: jest.fn(function (obj) {
    return obj.ios || obj.default;
  }),
  isTV: false,
  isTesting: true
};
global.Dimensions = {
  get: jest.fn(function () {
    return {
      width: 375,
      height: 812,
      scale: 2,
      fontScale: 1
    };
  }),
  addEventListener: jest.fn(),
  removeEventListener: jest.fn()
};
global.Linking = {
  openURL: jest.fn(function () {
    return Promise.resolve();
  }),
  canOpenURL: jest.fn(function () {
    return Promise.resolve(true);
  }),
  getInitialURL: jest.fn(function () {
    return Promise.resolve(null);
  }),
  addEventListener: jest.fn(function () {
    return {
      remove: jest.fn()
    };
  })
};
global.Keyboard = {
  addListener: jest.fn(function () {
    return {
      remove: jest.fn()
    };
  }),
  removeListener: jest.fn(),
  removeAllListeners: jest.fn(),
  dismiss: jest.fn(),
  scheduleLayoutAnimation: jest.fn()
};
var testStartMemory = null;
beforeEach(function () {
  jest.clearAllMocks();
  if (global.gc) {
    global.gc();
    testStartMemory = process.memoryUsage().heapUsed;
  }
});
afterEach(function () {
  try {
    if (jest.isMockFunction(setTimeout) || jest.isMockFunction(setInterval)) {
      var timerCount = jest.getTimerCount();
      if (timerCount > 0) {
        jest.runOnlyPendingTimers();
      }
    }
  } catch (e) {}
  jest.clearAllTimers();
  jest.clearAllMocks();
  try {
    jest.useRealTimers();
  } catch (e) {}
  if (global.gc && testStartMemory !== null) {
    global.gc();
    var testEndMemory = process.memoryUsage().heapUsed;
    var memoryGrowth = testEndMemory - testStartMemory;
    if (memoryGrowth > 5 * 1024 * 1024) {
      console.warn(`Potential memory leak detected: ${(memoryGrowth / 1024 / 1024).toFixed(2)}MB growth`);
    }
    testStartMemory = null;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,