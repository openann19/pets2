0d823054d64e11a6be4b4f1c7ebfdb2b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cropper = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _vectorIcons = require("@expo/vector-icons");
var ImageManipulator = _interopRequireWildcard(require("expo-image-manipulator"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _unifiedTheme = require("../../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  SCREEN_W = _Dimensions$get.width;
var ratioToNum = function ratioToNum(r) {
  switch (r) {
    case "1:1":
      return 1;
    case "4:5":
      return 4 / 5;
    case "9:16":
      return 9 / 16;
    case "16:9":
      return 16 / 9;
    case "3:2":
      return 3 / 2;
    default:
      return null;
  }
};
var clamp = function clamp(v, min, max) {
  return Math.max(min, Math.min(max, v));
};
var _worklet_4760109562005_init_data = {
  code: "function anonymous() {\n  const {\n    imgW,\n    baseScale,\n    scale,\n    imgH,\n    cropRight,\n    containerW,\n    cropLeft,\n    cropBottom,\n    containerH,\n    cropTop,\n    tx,\n    clamp,\n    ty\n  } = this._closure;\n  const dispW = imgW * baseScale * scale.value;\n  const dispH = imgH * baseScale * scale.value;\n  const minTx = cropRight - containerW / 2 - dispW / 2;\n  const maxTx = cropLeft - containerW / 2 + dispW / 2;\n  const minTy = cropBottom - containerH / 2 - dispH / 2;\n  const maxTy = cropTop - containerH / 2 + dispH / 2;\n  tx.value = clamp(tx.value, minTx, maxTx);\n  ty.value = clamp(ty.value, minTy, maxTy);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"imgW\",\"baseScale\",\"scale\",\"imgH\",\"cropRight\",\"containerW\",\"cropLeft\",\"cropBottom\",\"containerH\",\"cropTop\",\"tx\",\"clamp\",\"ty\",\"_closure\",\"dispW\",\"value\",\"dispH\",\"minTx\",\"maxTx\",\"minTy\",\"maxTy\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAuEoB,SAAAA,SAAMA,CAAA;EAAA;IAAAC,IAAA;IAAAC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,SAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,UAAA;IAAAC,UAAA;IAAAC,OAAA;IAAAC,EAAA;IAAAC,KAAA;IAAAC;EAAA,SAAAC,QAAA;EAEtB,MAAMC,KAAK,GAAGd,IAAI,GAAGC,SAAS,GAAGC,KAAK,CAACa,KAAK;EAC5C,MAAMC,KAAK,GAAGb,IAAI,GAAGF,SAAS,GAAGC,KAAK,CAACa,KAAK;EAC5C,MAAME,KAAK,GAAGb,SAAS,GAAGC,UAAU,GAAG,CAAC,GAAGS,KAAK,GAAG,CAAC;EACpD,MAAMI,KAAK,GAAGZ,QAAQ,GAAGD,UAAU,GAAG,CAAC,GAAGS,KAAK,GAAG,CAAC;EACnD,MAAMK,KAAK,GAAGZ,UAAU,GAAGC,UAAU,GAAG,CAAC,GAAGQ,KAAK,GAAG,CAAC;EACrD,MAAMI,KAAK,GAAGX,OAAO,GAAGD,UAAU,GAAG,CAAC,GAAGQ,KAAK,GAAG,CAAC;EAClDN,EAAE,CAACK,KAAK,GAAGJ,KAAK,CAACD,EAAE,CAACK,KAAK,EAAEE,KAAK,EAAEC,KAAK,CAAC;EACxCN,EAAE,CAACG,KAAK,GAAGJ,KAAK,CAACC,EAAE,CAACG,KAAK,EAAEI,KAAK,EAAEC,KAAK,CAAC;AAC1C\",\"ignoreList\":[]}"
};
var _worklet_15514434144562_init_data = {
  code: "function anonymous(e) {\n  const {\n    imgW,\n    baseScale,\n    scale,\n    imgH,\n    cropRight,\n    containerW,\n    cropLeft,\n    cropBottom,\n    containerH,\n    cropTop,\n    tx,\n    ty,\n    RUBBER\n  } = this._closure;\n  const dispW = imgW * baseScale * scale.value;\n  const dispH = imgH * baseScale * scale.value;\n  const minTx = cropRight - containerW / 2 - dispW / 2;\n  const maxTx = cropLeft - containerW / 2 + dispW / 2;\n  const minTy = cropBottom - containerH / 2 - dispH / 2;\n  const maxTy = cropTop - containerH / 2 + dispH / 2;\n  const nextX = tx.value + e.changeX;\n  const nextY = ty.value + e.changeY;\n  const overX = nextX < minTx ? nextX - minTx : nextX > maxTx ? nextX - maxTx : 0;\n  const overY = nextY < minTy ? nextY - minTy : nextY > maxTy ? nextY - maxTy : 0;\n  tx.value = overX ? nextX - overX * (1 - RUBBER) : nextX;\n  ty.value = overY ? nextY - overY * (1 - RUBBER) : nextY;\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"e\",\"imgW\",\"baseScale\",\"scale\",\"imgH\",\"cropRight\",\"containerW\",\"cropLeft\",\"cropBottom\",\"containerH\",\"cropTop\",\"tx\",\"ty\",\"RUBBER\",\"_closure\",\"dispW\",\"value\",\"dispH\",\"minTx\",\"maxTx\",\"minTy\",\"maxTy\",\"nextX\",\"changeX\",\"nextY\",\"changeY\",\"overX\",\"overY\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAoFe,SAACA,SAAKA,CAAAC,CAAA;EAAA;IAAAC,IAAA;IAAAC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,SAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,UAAA;IAAAC,UAAA;IAAAC,OAAA;IAAAC,EAAA;IAAAC,EAAA;IAAAC;EAAA,SAAAC,QAAA;EAEf,MAAMC,KAAK,GAAGd,IAAI,GAAGC,SAAS,GAAGC,KAAK,CAACa,KAAK;EAC5C,MAAMC,KAAK,GAAGb,IAAI,GAAGF,SAAS,GAAGC,KAAK,CAACa,KAAK;EAC5C,MAAME,KAAK,GAAGb,SAAS,GAAGC,UAAU,GAAG,CAAC,GAAGS,KAAK,GAAG,CAAC;EACpD,MAAMI,KAAK,GAAGZ,QAAQ,GAAGD,UAAU,GAAG,CAAC,GAAGS,KAAK,GAAG,CAAC;EACnD,MAAMK,KAAK,GAAGZ,UAAU,GAAGC,UAAU,GAAG,CAAC,GAAGQ,KAAK,GAAG,CAAC;EACrD,MAAMI,KAAK,GAAGX,OAAO,GAAGD,UAAU,GAAG,CAAC,GAAGQ,KAAK,GAAG,CAAC;EAElD,MAAMK,KAAK,GAAGX,EAAE,CAACK,KAAK,GAAGhB,CAAC,CAACuB,OAAO;EAClC,MAAMC,KAAK,GAAGZ,EAAE,CAACI,KAAK,GAAGhB,CAAC,CAACyB,OAAO;EAElC,MAAMC,KAAK,GAAGJ,KAAK,GAAGJ,KAAK,GAAGI,KAAK,GAAGJ,KAAK,GAAGI,KAAK,GAAGH,KAAK,GAAGG,KAAK,GAAGH,KAAK,GAAG,CAAC;EAC/E,MAAMQ,KAAK,GAAGH,KAAK,GAAGJ,KAAK,GAAGI,KAAK,GAAGJ,KAAK,GAAGI,KAAK,GAAGH,KAAK,GAAGG,KAAK,GAAGH,KAAK,GAAG,CAAC;EAE/EV,EAAE,CAACK,KAAK,GAAGU,KAAK,GAAGJ,KAAK,GAAGI,KAAK,IAAI,CAAC,GAAGb,MAAM,CAAC,GAAGS,KAAK;EACvDV,EAAE,CAACI,KAAK,GAAGW,KAAK,GAAGH,KAAK,GAAGG,KAAK,IAAI,CAAC,GAAGd,MAAM,CAAC,GAAGW,KAAK;AACzD\",\"ignoreList\":[]}"
};
var _worklet_2561773237314_init_data = {
  code: "function anonymous() {\n  const {\n    edgeClamp\n  } = this._closure;\n  edgeClamp();\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"edgeClamp\",\"_closure\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAsGW,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EACXD,SAAS,CAAC,CAAC;AACb\",\"ignoreList\":[]}"
};
var _worklet_4254833702622_init_data = {
  code: "function anonymous() {\n  const {\n    Haptics\n  } = this._closure;\n  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"Haptics\",\"_closure\",\"impactAsync\",\"ImpactFeedbackStyle\",\"Light\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AA2Ga,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAED,OAAO,CAACE,WAAW,CAACF,OAAO,CAACG,mBAAmB,CAACC,KAAK,CAAC;AAAE\",\"ignoreList\":[]}"
};
var _worklet_5632257845171_init_data = {
  code: "function anonymous(e) {\n  const {\n    scale,\n    clamp\n  } = this._closure;\n  const prev = scale.value;\n  scale.value = clamp(prev * e.scale, 1, 6);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"e\",\"scale\",\"clamp\",\"_closure\",\"prev\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AA4Ge,SAACA,SAAKA,CAAAC,CAAA;EAAA;IAAAC,KAAA;IAAAC;EAAA,SAAAC,QAAA;EACf,MAAMC,IAAI,GAAGH,KAAK,CAACI,KAAK;EACxBJ,KAAK,CAACI,KAAK,GAAGH,KAAK,CAACE,IAAI,GAAGJ,CAAC,CAACC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3C\",\"ignoreList\":[]}"
};
var _worklet_9743667463752_init_data = {
  code: "function anonymous() {\n  const {\n    edgeClamp,\n    Haptics\n  } = this._closure;\n  edgeClamp();\n  Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"edgeClamp\",\"Haptics\",\"_closure\",\"impactAsync\",\"ImpactFeedbackStyle\",\"Light\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAgHW,SAAAA,SAAMA,CAAA;EAAA;IAAAC,SAAA;IAAAC;EAAA,SAAAC,QAAA;EACXF,SAAS,CAAC,CAAC;EACXC,OAAO,CAACE,WAAW,CAACF,OAAO,CAACG,mBAAmB,CAACC,KAAK,CAAC;AACxD\",\"ignoreList\":[]}"
};
var _worklet_4343438352327_init_data = {
  code: "function anonymous(rect) {\n  const {\n    cropW,\n    baseScale,\n    cropH,\n    clamp,\n    imgW,\n    imgH,\n    scale,\n    withSpring,\n    tx,\n    edgeClamp,\n    ty\n  } = this._closure;\n  const pad = 1.10;\n  const needScale = Math.max(cropW * pad / (rect.width * baseScale), cropH * pad / (rect.height * baseScale));\n  const nextScale = clamp(needScale, 1, 6);\n  const dispW = imgW * baseScale * nextScale;\n  const dispH = imgH * baseScale * nextScale;\n  const rx = rect.x + rect.width / 2;\n  const ry = rect.y + rect.height / 2;\n  const targetTx = dispW / 2 - rx * baseScale * nextScale;\n  const targetTy = dispH / 2 - ry * baseScale * nextScale;\n  scale.value = withSpring(nextScale, {\n    damping: 18,\n    stiffness: 300\n  }, function () {});\n  tx.value = withSpring(targetTx, {\n    damping: 18,\n    stiffness: 300\n  }, edgeClamp);\n  ty.value = withSpring(targetTy, {\n    damping: 18,\n    stiffness: 300\n  }, edgeClamp);\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"rect\",\"cropW\",\"baseScale\",\"cropH\",\"clamp\",\"imgW\",\"imgH\",\"scale\",\"withSpring\",\"tx\",\"edgeClamp\",\"ty\",\"_closure\",\"pad\",\"needScale\",\"Math\",\"max\",\"width\",\"height\",\"nextScale\",\"dispW\",\"dispH\",\"rx\",\"x\",\"ry\",\"y\",\"targetTx\",\"targetTy\",\"value\",\"damping\",\"stiffness\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAwHkB,SAACA,SAAeA,CAAAC,IAAA;EAAA;IAAAC,KAAA;IAAAC,SAAA;IAAAC,KAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,IAAA;IAAAC,KAAA;IAAAC,UAAA;IAAAC,EAAA;IAAAC,SAAA;IAAAC;EAAA,SAAAC,QAAA;EAE9B,MAAMC,GAAG,GAAG,IAAI;EAChB,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CACvBf,KAAK,GAAGY,GAAG,IAAKb,IAAI,CAACiB,KAAK,GAAGf,SAAS,CAAC,EACvCC,KAAK,GAAGU,GAAG,IAAKb,IAAI,CAACkB,MAAM,GAAGhB,SAAS,CAC1C,CAAC;EACD,MAAMiB,SAAS,GAAGf,KAAK,CAACU,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;EACxC,MAAMM,KAAK,GAAGf,IAAI,GAAGH,SAAS,GAAGiB,SAAS;EAC1C,MAAME,KAAK,GAAGf,IAAI,GAAGJ,SAAS,GAAGiB,SAAS;EAG1C,MAAMG,EAAE,GAAGtB,IAAI,CAACuB,CAAC,GAAGvB,IAAI,CAACiB,KAAK,GAAG,CAAC;EAClC,MAAMO,EAAE,GAAGxB,IAAI,CAACyB,CAAC,GAAGzB,IAAI,CAACkB,MAAM,GAAG,CAAC;EAEnC,MAAMQ,QAAQ,GAAGN,KAAK,GAAG,CAAC,GAAGE,EAAE,GAAGpB,SAAS,GAAGiB,SAAS;EACvD,MAAMQ,QAAQ,GAAGN,KAAK,GAAG,CAAC,GAAGG,EAAE,GAAGtB,SAAS,GAAGiB,SAAS;EAEvDZ,KAAK,CAACqB,KAAK,GAAGpB,UAAU,CAACW,SAAS,EAAE;IAAEU,OAAO,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAI,CAAC,EAAE,YAAM,CACzE,CACD,CAAC;EACFrB,EAAE,CAACmB,KAAK,GAAGpB,UAAU,CAACkB,QAAQ,EAAE;IAAEG,OAAO,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAI,CAAC,EAAEpB,SAAS,CAAC;EAC3EC,EAAE,CAACiB,KAAK,GAAGpB,UAAU,CAACmB,QAAQ,EAAE;IAAEE,OAAO,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAI,CAAC,EAAEpB,SAAS,CAAC;AAC7E\",\"ignoreList\":[]}"
};
var _worklet_16556756009009_init_data = {
  code: "function anonymous() {}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AA0IyE,SAAAA,SAAMA,CAAA,GACzE\",\"ignoreList\":[]}"
};
var _worklet_10279186787711_init_data = {
  code: "function anonymous() {\n  const {\n    tx,\n    ty,\n    scale\n  } = this._closure;\n  return {\n    transform: [{\n      translateX: tx.value\n    }, {\n      translateY: ty.value\n    }, {\n      scale: scale.value\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"tx\",\"ty\",\"scale\",\"_closure\",\"transform\",\"translateX\",\"value\",\"translateY\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/photo/Cropper.tsx\"],\"mappings\":\"AAmJoC,SAAAA,UAAA;EAAA;IAAAC,EAAA;IAAAC,EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IACvCC,SAAS,EAAE,CACT;MAAEC,UAAU,EAAEL,EAAE,CAACM;IAAM,CAAC,EACxB;MAAEC,UAAU,EAAEN,EAAE,CAACK;IAAM,CAAC,EACxB;MAAEJ,KAAK,EAAEA,KAAK,CAACI;IAAM,CAAC;EAE1B,CAAC;AAAA\",\"ignoreList\":[]}"
};
var Cropper = exports.Cropper = (0, _react.forwardRef)(function (_ref, ref) {
  var uri = _ref.uri,
    containerW = _ref.containerW,
    containerH = _ref.containerH,
    _ref$defaultRatio = _ref.defaultRatio,
    defaultRatio = _ref$defaultRatio === void 0 ? "4:5" : _ref$defaultRatio,
    onCropped = _ref.onCropped,
    _ref$showStoryGuides = _ref.showStoryGuides,
    showStoryGuides = _ref$showStoryGuides === void 0 ? false : _ref$showStoryGuides;
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    imgW = _useState2[0],
    setImgW = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    imgH = _useState4[0],
    setImgH = _useState4[1];
  var _useState5 = (0, _react.useState)(defaultRatio),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    ratio = _useState6[0],
    setRatio = _useState6[1];
  (0, _react.useEffect)(function () {
    _reactNative.Image.getSize(uri, function (w, h) {
      setImgW(w);
      setImgH(h);
    }, function () {});
  }, [uri]);
  var baseScale = (0, _react.useMemo)(function () {
    return !imgW || !imgH ? 1 : Math.min(containerW / imgW, containerH / imgH);
  }, [imgW, imgH, containerW, containerH]);
  var ar = ratioToNum(ratio);
  var cropW = ar ? Math.min(containerW, containerH * ar) : Math.min(containerW, containerH);
  var cropH = ar ? cropW / ar : Math.min(containerW, containerH);
  var cropLeft = (containerW - cropW) / 2;
  var cropTop = (containerH - cropH) / 2;
  var cropRight = cropLeft + cropW;
  var cropBottom = cropTop + cropH;
  var scale = (0, _reactNativeReanimated.useSharedValue)(1);
  var tx = (0, _reactNativeReanimated.useSharedValue)(0);
  var ty = (0, _reactNativeReanimated.useSharedValue)(0);
  var RUBBER = 0.45;
  var edgeClamp = function () {
    var _e = [new global.Error(), -14, -27];
    var _f = function _f() {
      var dispW = imgW * baseScale * scale.value;
      var dispH = imgH * baseScale * scale.value;
      var minTx = cropRight - containerW / 2 - dispW / 2;
      var maxTx = cropLeft - containerW / 2 + dispW / 2;
      var minTy = cropBottom - containerH / 2 - dispH / 2;
      var maxTy = cropTop - containerH / 2 + dispH / 2;
      tx.value = clamp(tx.value, minTx, maxTx);
      ty.value = clamp(ty.value, minTy, maxTy);
    };
    _f._closure = {
      imgW: imgW,
      baseScale: baseScale,
      scale: scale,
      imgH: imgH,
      cropRight: cropRight,
      containerW: containerW,
      cropLeft: cropLeft,
      cropBottom: cropBottom,
      containerH: containerH,
      cropTop: cropTop,
      tx: tx,
      clamp: clamp,
      ty: ty
    };
    _f.__initData = _worklet_4760109562005_init_data;
    _f.__workletHash = 4760109562005;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
  var pan = _reactNativeGestureHandler.Gesture.Pan().onChange(function () {
    var _e = [new global.Error(), -14, -27];
    var _f = function _f(e) {
      var dispW = imgW * baseScale * scale.value;
      var dispH = imgH * baseScale * scale.value;
      var minTx = cropRight - containerW / 2 - dispW / 2;
      var maxTx = cropLeft - containerW / 2 + dispW / 2;
      var minTy = cropBottom - containerH / 2 - dispH / 2;
      var maxTy = cropTop - containerH / 2 + dispH / 2;
      var nextX = tx.value + e.changeX;
      var nextY = ty.value + e.changeY;
      var overX = nextX < minTx ? nextX - minTx : nextX > maxTx ? nextX - maxTx : 0;
      var overY = nextY < minTy ? nextY - minTy : nextY > maxTy ? nextY - maxTy : 0;
      tx.value = overX ? nextX - overX * (1 - RUBBER) : nextX;
      ty.value = overY ? nextY - overY * (1 - RUBBER) : nextY;
    };
    _f._closure = {
      imgW: imgW,
      baseScale: baseScale,
      scale: scale,
      imgH: imgH,
      cropRight: cropRight,
      containerW: containerW,
      cropLeft: cropLeft,
      cropBottom: cropBottom,
      containerH: containerH,
      cropTop: cropTop,
      tx: tx,
      ty: ty,
      RUBBER: RUBBER
    };
    _f.__initData = _worklet_15514434144562_init_data;
    _f.__workletHash = 15514434144562;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onEnd(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      edgeClamp();
    };
    _f._closure = {
      edgeClamp: edgeClamp
    };
    _f.__initData = _worklet_2561773237314_init_data;
    _f.__workletHash = 2561773237314;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var pinch = _reactNativeGestureHandler.Gesture.Pinch().onBegin(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    };
    _f._closure = {
      Haptics: Haptics
    };
    _f.__initData = _worklet_4254833702622_init_data;
    _f.__workletHash = 4254833702622;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onChange(function () {
    var _e = [new global.Error(), -3, -27];
    var _f = function _f(e) {
      var prev = scale.value;
      scale.value = clamp(prev * e.scale, 1, 6);
    };
    _f._closure = {
      scale: scale,
      clamp: clamp
    };
    _f.__initData = _worklet_5632257845171_init_data;
    _f.__workletHash = 5632257845171;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }()).onEnd(function () {
    var _e = [new global.Error(), -3, -27];
    var _f = function _f() {
      edgeClamp();
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    };
    _f._closure = {
      edgeClamp: edgeClamp,
      Haptics: Haptics
    };
    _f.__initData = _worklet_9743667463752_init_data;
    _f.__workletHash = 9743667463752;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var composed = _reactNativeGestureHandler.Gesture.Simultaneous(pan, pinch);
  var focusTo = function () {
    var _e = [new global.Error(), -12, -27];
    var _f = function _f(rect) {
      var pad = 1.10;
      var needScale = Math.max(cropW * pad / (rect.width * baseScale), cropH * pad / (rect.height * baseScale));
      var nextScale = clamp(needScale, 1, 6);
      var dispW = imgW * baseScale * nextScale;
      var dispH = imgH * baseScale * nextScale;
      var rx = rect.x + rect.width / 2;
      var ry = rect.y + rect.height / 2;
      var targetTx = dispW / 2 - rx * baseScale * nextScale;
      var targetTy = dispH / 2 - ry * baseScale * nextScale;
      scale.value = (0, _reactNativeReanimated.withSpring)(nextScale, {
        damping: 18,
        stiffness: 300
      }, function () {
        var _e = [new global.Error(), 1, -27];
        var _f = function _f() {};
        _f._closure = {};
        _f.__initData = _worklet_16556756009009_init_data;
        _f.__workletHash = 16556756009009;
        _f.__stackDetails = _e;
        _f.__version = "3.3.0";
        return _f;
      }());
      tx.value = (0, _reactNativeReanimated.withSpring)(targetTx, {
        damping: 18,
        stiffness: 300
      }, edgeClamp);
      ty.value = (0, _reactNativeReanimated.withSpring)(targetTy, {
        damping: 18,
        stiffness: 300
      }, edgeClamp);
    };
    _f._closure = {
      cropW: cropW,
      baseScale: baseScale,
      cropH: cropH,
      clamp: clamp,
      imgW: imgW,
      imgH: imgH,
      scale: scale,
      withSpring: _reactNativeReanimated.withSpring,
      tx: tx,
      edgeClamp: edgeClamp,
      ty: ty
    };
    _f.__initData = _worklet_4343438352327_init_data;
    _f.__workletHash = 4343438352327;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      focusTo: focusTo
    };
  });
  var imgStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -4, -27];
    var _f = function _f() {
      return {
        transform: [{
          translateX: tx.value
        }, {
          translateY: ty.value
        }, {
          scale: scale.value
        }]
      };
    };
    _f._closure = {
      tx: tx,
      ty: ty,
      scale: scale
    };
    _f.__initData = _worklet_10279186787711_init_data;
    _f.__workletHash = 10279186787711;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var applyCrop = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      var s = scale.value;
      var dispW = imgW * baseScale * s;
      var dispH = imgH * baseScale * s;
      var cx = containerW / 2 + tx.value;
      var cy = containerH / 2 + ty.value;
      var left = cx - dispW / 2;
      var top = cy - dispH / 2;
      var u = (cropLeft - left) / dispW;
      var v = (cropTop - top) / dispH;
      var uw = cropW / dispW;
      var vh = cropH / dispH;
      var originX = clamp(Math.round(u * imgW), 0, imgW - 1);
      var originY = clamp(Math.round(v * imgH), 0, imgH - 1);
      var widthPx = clamp(Math.round(uw * imgW), 1, imgW - originX);
      var heightPx = clamp(Math.round(vh * imgH), 1, imgH - originY);
      try {
        var result = yield ImageManipulator.manipulateAsync(uri, [{
          crop: {
            originX: originX,
            originY: originY,
            width: widthPx,
            height: heightPx
          }
        }], {
          compress: 1,
          format: ImageManipulator.SaveFormat.JPEG
        });
        onCropped(result.uri);
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      } catch (_unused) {
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
      }
    });
    return function applyCrop() {
      return _ref2.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      width: containerW,
      height: containerH
    },
    children: [(0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
      gesture: composed,
      children: (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.Image, {
        source: {
          uri: uri
        },
        style: [styles.img, {
          width: imgW * baseScale,
          height: imgH * baseScale
        }, imgStyle],
        resizeMode: "contain",
        accessibilityIgnoresInvertColors: true
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      pointerEvents: "none",
      style: _reactNative.StyleSheet.absoluteFill,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          flex: 1,
          backgroundColor: "rgba(0,0,0,0.6)"
        }
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: {
          height: cropH,
          flexDirection: "row"
        },
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            width: cropLeft,
            backgroundColor: "rgba(0,0,0,0.6)"
          }
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: {
            width: cropW,
            borderWidth: 1,
            borderColor: "rgba(255,255,255,0.85)"
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.gridRow
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.gridRow
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.gridRow
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: [_reactNative.StyleSheet.absoluteFill, {
              flexDirection: "row"
            }],
            children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.gridCol
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.gridCol
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.gridCol
            })]
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            width: cropLeft,
            backgroundColor: "rgba(0,0,0,0.6)"
          }
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          flex: 1,
          backgroundColor: "rgba(0,0,0,0.6)"
        }
      })]
    }), showStoryGuides && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      pointerEvents: "none",
      style: _reactNative.StyleSheet.absoluteFill,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.storyBand, {
          top: cropTop + 64
        }]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.storyBand, {
          bottom: containerH - cropBottom + 120
        }]
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.controls,
      children: [["FREE", "1:1", "4:5", "9:16", "16:9", "3:2"].map(function (r) {
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            setRatio(r);
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
          },
          style: [styles.ratioBtn, r === ratio && styles.ratioBtnActive],
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.ratioTxt, r === ratio && styles.ratioTxtActive],
            children: r
          })
        }, r);
      }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        onPress: applyCrop,
        style: styles.applyBtn,
        children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
          name: "crop",
          size: 16,
          color: "#fff"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.applyTxt,
          children: "Apply Crop"
        })]
      })]
    })]
  });
});
var styles = _reactNative.StyleSheet.create({
  img: {
    position: "absolute",
    left: 0,
    top: 0
  },
  gridRow: {
    flex: 1,
    borderBottomWidth: 1,
    borderColor: "rgba(255,255,255,0.35)"
  },
  gridCol: {
    flex: 1,
    borderRightWidth: 1,
    borderColor: "rgba(255,255,255,0.35)"
  },
  controls: {
    position: "absolute",
    bottom: 12,
    left: 12,
    right: 12,
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 8,
    justifyContent: "center"
  },
  ratioBtn: {
    paddingVertical: 6,
    paddingHorizontal: 10,
    borderRadius: 10,
    backgroundColor: "rgba(255,255,255,0.08)",
    borderWidth: 1,
    borderColor: "rgba(255,255,255,0.15)"
  },
  ratioBtnActive: {
    backgroundColor: "rgba(236,72,153,0.22)",
    borderColor: _unifiedTheme.Theme.colors.primary[500]
  },
  ratioTxt: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "600"
  },
  ratioTxtActive: {
    color: "#fff"
  },
  applyBtn: {
    marginLeft: 8,
    flexDirection: "row",
    alignItems: "center",
    gap: 6,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
    backgroundColor: _unifiedTheme.Theme.colors.primary[500]
  },
  applyTxt: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "700"
  },
  storyBand: {
    position: "absolute",
    left: 0,
    right: 0,
    height: 60,
    borderColor: "rgba(14,165,233,0.7)",
    borderWidth: 1,
    borderStyle: "dashed"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmVSZWFuaW1hdGVkIiwiX3JlYWN0TmF0aXZlR2VzdHVyZUhhbmRsZXIiLCJfdmVjdG9ySWNvbnMiLCJJbWFnZU1hbmlwdWxhdG9yIiwiSGFwdGljcyIsIl91bmlmaWVkVGhlbWUiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX0RpbWVuc2lvbnMkZ2V0IiwiRGltZW5zaW9ucyIsIlNDUkVFTl9XIiwid2lkdGgiLCJyYXRpb1RvTnVtIiwiY2xhbXAiLCJ2IiwibWluIiwibWF4IiwiTWF0aCIsIl93b3JrbGV0XzQ3NjAxMDk1NjIwMDVfaW5pdF9kYXRhIiwiY29kZSIsImxvY2F0aW9uIiwic291cmNlTWFwIiwiX3dvcmtsZXRfMTU1MTQ0MzQxNDQ1NjJfaW5pdF9kYXRhIiwiX3dvcmtsZXRfMjU2MTc3MzIzNzMxNF9pbml0X2RhdGEiLCJfd29ya2xldF80MjU0ODMzNzAyNjIyX2luaXRfZGF0YSIsIl93b3JrbGV0XzU2MzIyNTc4NDUxNzFfaW5pdF9kYXRhIiwiX3dvcmtsZXRfOTc0MzY2NzQ2Mzc1Ml9pbml0X2RhdGEiLCJfd29ya2xldF80MzQzNDM4MzUyMzI3X2luaXRfZGF0YSIsIl93b3JrbGV0XzE2NTU2NzU2MDA5MDA5X2luaXRfZGF0YSIsIl93b3JrbGV0XzEwMjc5MTg2Nzg3NzExX2luaXRfZGF0YSIsIkNyb3BwZXIiLCJleHBvcnRzIiwiZm9yd2FyZFJlZiIsIl9yZWYiLCJyZWYiLCJ1cmkiLCJjb250YWluZXJXIiwiY29udGFpbmVySCIsIl9yZWYkZGVmYXVsdFJhdGlvIiwiZGVmYXVsdFJhdGlvIiwib25Dcm9wcGVkIiwiX3JlZiRzaG93U3RvcnlHdWlkZXMiLCJzaG93U3RvcnlHdWlkZXMiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJpbWdXIiwic2V0SW1nVyIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwiaW1nSCIsInNldEltZ0giLCJfdXNlU3RhdGU1IiwiX3VzZVN0YXRlNiIsInJhdGlvIiwic2V0UmF0aW8iLCJ1c2VFZmZlY3QiLCJSTkltYWdlIiwiZ2V0U2l6ZSIsInciLCJoIiwiYmFzZVNjYWxlIiwidXNlTWVtbyIsImFyIiwiY3JvcFciLCJjcm9wSCIsImNyb3BMZWZ0IiwiY3JvcFRvcCIsImNyb3BSaWdodCIsImNyb3BCb3R0b20iLCJzY2FsZSIsInVzZVNoYXJlZFZhbHVlIiwidHgiLCJ0eSIsIlJVQkJFUiIsImVkZ2VDbGFtcCIsIl9lIiwiZ2xvYmFsIiwiRXJyb3IiLCJfZiIsImRpc3BXIiwidmFsdWUiLCJkaXNwSCIsIm1pblR4IiwibWF4VHgiLCJtaW5UeSIsIm1heFR5IiwiX2Nsb3N1cmUiLCJfX2luaXREYXRhIiwiX193b3JrbGV0SGFzaCIsIl9fc3RhY2tEZXRhaWxzIiwiX192ZXJzaW9uIiwicGFuIiwiR2VzdHVyZSIsIlBhbiIsIm9uQ2hhbmdlIiwibmV4dFgiLCJjaGFuZ2VYIiwibmV4dFkiLCJjaGFuZ2VZIiwib3ZlclgiLCJvdmVyWSIsIm9uRW5kIiwicGluY2giLCJQaW5jaCIsIm9uQmVnaW4iLCJpbXBhY3RBc3luYyIsIkltcGFjdEZlZWRiYWNrU3R5bGUiLCJMaWdodCIsInByZXYiLCJjb21wb3NlZCIsIlNpbXVsdGFuZW91cyIsImZvY3VzVG8iLCJyZWN0IiwicGFkIiwibmVlZFNjYWxlIiwiaGVpZ2h0IiwibmV4dFNjYWxlIiwicngiLCJ4IiwicnkiLCJ5IiwidGFyZ2V0VHgiLCJ0YXJnZXRUeSIsIndpdGhTcHJpbmciLCJkYW1waW5nIiwic3RpZmZuZXNzIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsImltZ1N0eWxlIiwidXNlQW5pbWF0ZWRTdHlsZSIsInRyYW5zZm9ybSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiYXBwbHlDcm9wIiwiX3JlZjIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJzIiwiY3giLCJjeSIsImxlZnQiLCJ0b3AiLCJ1IiwidXciLCJ2aCIsIm9yaWdpblgiLCJyb3VuZCIsIm9yaWdpblkiLCJ3aWR0aFB4IiwiaGVpZ2h0UHgiLCJyZXN1bHQiLCJtYW5pcHVsYXRlQXN5bmMiLCJjcm9wIiwiY29tcHJlc3MiLCJmb3JtYXQiLCJTYXZlRm9ybWF0IiwiSlBFRyIsIm5vdGlmaWNhdGlvbkFzeW5jIiwiTm90aWZpY2F0aW9uRmVlZGJhY2tUeXBlIiwiU3VjY2VzcyIsIl91bnVzZWQiLCJhcHBseSIsImFyZ3VtZW50cyIsImpzeHMiLCJWaWV3Iiwic3R5bGUiLCJjaGlsZHJlbiIsImpzeCIsIkdlc3R1cmVEZXRlY3RvciIsImdlc3R1cmUiLCJJbWFnZSIsInNvdXJjZSIsInN0eWxlcyIsImltZyIsInJlc2l6ZU1vZGUiLCJhY2Nlc3NpYmlsaXR5SWdub3Jlc0ludmVydENvbG9ycyIsInBvaW50ZXJFdmVudHMiLCJTdHlsZVNoZWV0IiwiYWJzb2x1dGVGaWxsIiwiZmxleCIsImJhY2tncm91bmRDb2xvciIsImZsZXhEaXJlY3Rpb24iLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiZ3JpZFJvdyIsImdyaWRDb2wiLCJzdG9yeUJhbmQiLCJib3R0b20iLCJjb250cm9scyIsIm1hcCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJvblByZXNzIiwicmF0aW9CdG4iLCJyYXRpb0J0bkFjdGl2ZSIsIlRleHQiLCJyYXRpb1R4dCIsInJhdGlvVHh0QWN0aXZlIiwiYXBwbHlCdG4iLCJJb25pY29ucyIsIm5hbWUiLCJzaXplIiwiY29sb3IiLCJhcHBseVR4dCIsImNyZWF0ZSIsInBvc2l0aW9uIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwicmlnaHQiLCJmbGV4V3JhcCIsImdhcCIsImp1c3RpZnlDb250ZW50IiwicGFkZGluZ1ZlcnRpY2FsIiwicGFkZGluZ0hvcml6b250YWwiLCJib3JkZXJSYWRpdXMiLCJUaGVtZSIsImNvbG9ycyIsInByaW1hcnkiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJtYXJnaW5MZWZ0IiwiYWxpZ25JdGVtcyIsImJvcmRlclN0eWxlIl0sInNvdXJjZXMiOlsiQ3JvcHBlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29tcG9uZW50cy9waG90by9Dcm9wcGVyLnRzeFxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUsIGZvcndhcmRSZWYsIHVzZUltcGVyYXRpdmVIYW5kbGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFZpZXcsIFN0eWxlU2hlZXQsIEltYWdlIGFzIFJOSW1hZ2UsIERpbWVuc2lvbnMsIFRleHQsIFRvdWNoYWJsZU9wYWNpdHkgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgQW5pbWF0ZWQsIHsgdXNlQW5pbWF0ZWRTdHlsZSwgdXNlU2hhcmVkVmFsdWUsIHdpdGhTcHJpbmcgfSBmcm9tIFwicmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWRcIjtcbmltcG9ydCB7IEdlc3R1cmUsIEdlc3R1cmVEZXRlY3RvciB9IGZyb20gXCJyZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyXCI7XG5pbXBvcnQgeyBJb25pY29ucyB9IGZyb20gXCJAZXhwby92ZWN0b3ItaWNvbnNcIjtcbmltcG9ydCAqIGFzIEltYWdlTWFuaXB1bGF0b3IgZnJvbSBcImV4cG8taW1hZ2UtbWFuaXB1bGF0b3JcIjtcbmltcG9ydCAqIGFzIEhhcHRpY3MgZnJvbSBcImV4cG8taGFwdGljc1wiO1xuaW1wb3J0IHsgVGhlbWUgfSBmcm9tIFwiLi4vLi4vdGhlbWUvdW5pZmllZC10aGVtZVwiO1xuXG5jb25zdCB7IHdpZHRoOiBTQ1JFRU5fVyB9ID0gRGltZW5zaW9ucy5nZXQoXCJ3aW5kb3dcIik7XG5cbnR5cGUgUmVjdCA9IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH07XG50eXBlIFJhdGlvID0gXCJGUkVFXCIgfCBcIjE6MVwiIHwgXCI0OjVcIiB8IFwiOToxNlwiIHwgXCIxNjo5XCIgfCBcIjM6MlwiO1xuY29uc3QgcmF0aW9Ub051bSA9IChyOiBSYXRpbyk6IG51bWJlciB8IG51bGwgPT4ge1xuICBzd2l0Y2ggKHIpIHtcbiAgICBjYXNlIFwiMToxXCI6IHJldHVybiAxO1xuICAgIGNhc2UgXCI0OjVcIjogcmV0dXJuIDQgLyA1O1xuICAgIGNhc2UgXCI5OjE2XCI6IHJldHVybiA5IC8gMTY7XG4gICAgY2FzZSBcIjE2OjlcIjogcmV0dXJuIDE2IC8gOTtcbiAgICBjYXNlIFwiMzoyXCI6IHJldHVybiAzIC8gMjtcbiAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuZXhwb3J0IHR5cGUgQ3JvcHBlckhhbmRsZSA9IHtcbiAgLyoqIFNtb290aGx5IHpvb20gJiBjZW50ZXIgdGhlIHZpZXcgc28gdGhpcyByZWN0YW5nbGUgKGluIGltYWdlIHBpeGVscykgZmlsbHMgdGhlIGNyb3Agd2luZG93ICovXG4gIGZvY3VzVG86IChyZWN0OiBSZWN0KSA9PiB2b2lkO1xufTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdXJpOiBzdHJpbmc7XG4gIGNvbnRhaW5lclc6IG51bWJlcjtcbiAgY29udGFpbmVySDogbnVtYmVyO1xuICBkZWZhdWx0UmF0aW8/OiBSYXRpbztcbiAgb25Dcm9wcGVkOiAobmV3VXJpOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHNob3dTdG9yeUd1aWRlcz86IGJvb2xlYW47XG59XG5cbmNvbnN0IGNsYW1wID0gKHY6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKSA9PiBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgdikpO1xuXG5leHBvcnQgY29uc3QgQ3JvcHBlciA9IGZvcndhcmRSZWY8Q3JvcHBlckhhbmRsZSwgUHJvcHM+KFxuKHsgdXJpLCBjb250YWluZXJXLCBjb250YWluZXJILCBkZWZhdWx0UmF0aW8gPSBcIjQ6NVwiLCBvbkNyb3BwZWQsIHNob3dTdG9yeUd1aWRlcyA9IGZhbHNlIH0sIHJlZikgPT4ge1xuICBjb25zdCBbaW1nVywgc2V0SW1nV10gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW2ltZ0gsIHNldEltZ0hdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtyYXRpbywgc2V0UmF0aW9dID0gdXNlU3RhdGU8UmF0aW8+KGRlZmF1bHRSYXRpbyk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBSTkltYWdlLmdldFNpemUodXJpLCAodywgaCkgPT4geyBzZXRJbWdXKHcpOyBzZXRJbWdIKGgpOyB9LCAoKSA9PiB7fSk7XG4gIH0sIFt1cmldKTtcblxuICAvLyBiYXNlIFwiY29udGFpblwiIHNjYWxlIChubyB0cmFuc2Zvcm1zIHlldClcbiAgY29uc3QgYmFzZVNjYWxlID0gdXNlTWVtbygoKSA9PiAoIWltZ1cgfHwgIWltZ0ggPyAxIDogTWF0aC5taW4oY29udGFpbmVyVyAvIGltZ1csIGNvbnRhaW5lckggLyBpbWdIKSksIFtpbWdXLCBpbWdILCBjb250YWluZXJXLCBjb250YWluZXJIXSk7XG5cbiAgLy8gY3JvcCB3aW5kb3cgKGNlbnRlcmVkKVxuICBjb25zdCBhciA9IHJhdGlvVG9OdW0ocmF0aW8pO1xuICBjb25zdCBjcm9wVyA9IGFyID8gTWF0aC5taW4oY29udGFpbmVyVywgY29udGFpbmVySCAqIGFyKSA6IE1hdGgubWluKGNvbnRhaW5lclcsIGNvbnRhaW5lckgpO1xuICBjb25zdCBjcm9wSCA9IGFyID8gY3JvcFcgLyBhciA6IE1hdGgubWluKGNvbnRhaW5lclcsIGNvbnRhaW5lckgpO1xuICBjb25zdCBjcm9wTGVmdCA9IChjb250YWluZXJXIC0gY3JvcFcpIC8gMjtcbiAgY29uc3QgY3JvcFRvcCA9IChjb250YWluZXJIIC0gY3JvcEgpIC8gMjtcbiAgY29uc3QgY3JvcFJpZ2h0ID0gY3JvcExlZnQgKyBjcm9wVztcbiAgY29uc3QgY3JvcEJvdHRvbSA9IGNyb3BUb3AgKyBjcm9wSDtcblxuICAvLyB0cmFuc2Zvcm1zXG4gIGNvbnN0IHNjYWxlID0gdXNlU2hhcmVkVmFsdWUoMSk7XG4gIGNvbnN0IHR4ID0gdXNlU2hhcmVkVmFsdWUoMCk7XG4gIGNvbnN0IHR5ID0gdXNlU2hhcmVkVmFsdWUoMCk7XG5cbiAgLy8gUnViYmVyLWJhbmQgZmFjdG9yIHdoZW4gZHJhZ2dpbmcgb3V0c2lkZVxuICBjb25zdCBSVUJCRVIgPSAwLjQ1O1xuXG4gIGNvbnN0IGVkZ2VDbGFtcCA9ICgpID0+IHtcbiAgICBcIndvcmtsZXRcIjtcbiAgICBjb25zdCBkaXNwVyA9IGltZ1cgKiBiYXNlU2NhbGUgKiBzY2FsZS52YWx1ZTtcbiAgICBjb25zdCBkaXNwSCA9IGltZ0ggKiBiYXNlU2NhbGUgKiBzY2FsZS52YWx1ZTtcbiAgICBjb25zdCBtaW5UeCA9IGNyb3BSaWdodCAtIGNvbnRhaW5lclcgLyAyIC0gZGlzcFcgLyAyO1xuICAgIGNvbnN0IG1heFR4ID0gY3JvcExlZnQgLSBjb250YWluZXJXIC8gMiArIGRpc3BXIC8gMjtcbiAgICBjb25zdCBtaW5UeSA9IGNyb3BCb3R0b20gLSBjb250YWluZXJIIC8gMiAtIGRpc3BIIC8gMjtcbiAgICBjb25zdCBtYXhUeSA9IGNyb3BUb3AgLSBjb250YWluZXJIIC8gMiArIGRpc3BIIC8gMjtcbiAgICB0eC52YWx1ZSA9IGNsYW1wKHR4LnZhbHVlLCBtaW5UeCwgbWF4VHgpO1xuICAgIHR5LnZhbHVlID0gY2xhbXAodHkudmFsdWUsIG1pblR5LCBtYXhUeSk7XG4gIH07XG5cbiAgY29uc3QgcGFuID0gR2VzdHVyZS5QYW4oKVxuICAgIC5vbkNoYW5nZSgoZSkgPT4ge1xuICAgICAgLy8gYWxsb3cgYSBiaXQgb2Ygb3ZlcnNob290IHdpdGggcnViYmVyIGVmZmVjdFxuICAgICAgY29uc3QgZGlzcFcgPSBpbWdXICogYmFzZVNjYWxlICogc2NhbGUudmFsdWU7XG4gICAgICBjb25zdCBkaXNwSCA9IGltZ0ggKiBiYXNlU2NhbGUgKiBzY2FsZS52YWx1ZTtcbiAgICAgIGNvbnN0IG1pblR4ID0gY3JvcFJpZ2h0IC0gY29udGFpbmVyVyAvIDIgLSBkaXNwVyAvIDI7XG4gICAgICBjb25zdCBtYXhUeCA9IGNyb3BMZWZ0IC0gY29udGFpbmVyVyAvIDIgKyBkaXNwVyAvIDI7XG4gICAgICBjb25zdCBtaW5UeSA9IGNyb3BCb3R0b20gLSBjb250YWluZXJIIC8gMiAtIGRpc3BIIC8gMjtcbiAgICAgIGNvbnN0IG1heFR5ID0gY3JvcFRvcCAtIGNvbnRhaW5lckggLyAyICsgZGlzcEggLyAyO1xuXG4gICAgICBjb25zdCBuZXh0WCA9IHR4LnZhbHVlICsgZS5jaGFuZ2VYO1xuICAgICAgY29uc3QgbmV4dFkgPSB0eS52YWx1ZSArIGUuY2hhbmdlWTtcblxuICAgICAgY29uc3Qgb3ZlclggPSBuZXh0WCA8IG1pblR4ID8gbmV4dFggLSBtaW5UeCA6IG5leHRYID4gbWF4VHggPyBuZXh0WCAtIG1heFR4IDogMDtcbiAgICAgIGNvbnN0IG92ZXJZID0gbmV4dFkgPCBtaW5UeSA/IG5leHRZIC0gbWluVHkgOiBuZXh0WSA+IG1heFR5ID8gbmV4dFkgLSBtYXhUeSA6IDA7XG5cbiAgICAgIHR4LnZhbHVlID0gb3ZlclggPyBuZXh0WCAtIG92ZXJYICogKDEgLSBSVUJCRVIpIDogbmV4dFg7XG4gICAgICB0eS52YWx1ZSA9IG92ZXJZID8gbmV4dFkgLSBvdmVyWSAqICgxIC0gUlVCQkVSKSA6IG5leHRZO1xuICAgIH0pXG4gICAgLm9uRW5kKCgpID0+IHtcbiAgICAgIGVkZ2VDbGFtcCgpO1xuICAgIH0pO1xuXG4gIGNvbnN0IHBpbmNoID0gR2VzdHVyZS5QaW5jaCgpXG4gICAgLm9uQmVnaW4oKCkgPT4geyBIYXB0aWNzLmltcGFjdEFzeW5jKEhhcHRpY3MuSW1wYWN0RmVlZGJhY2tTdHlsZS5MaWdodCk7IH0pXG4gICAgLm9uQ2hhbmdlKChlKSA9PiB7XG4gICAgICBjb25zdCBwcmV2ID0gc2NhbGUudmFsdWU7XG4gICAgICBzY2FsZS52YWx1ZSA9IGNsYW1wKHByZXYgKiBlLnNjYWxlLCAxLCA2KTtcbiAgICB9KVxuICAgIC5vbkVuZCgoKSA9PiB7XG4gICAgICBlZGdlQ2xhbXAoKTtcbiAgICAgIEhhcHRpY3MuaW1wYWN0QXN5bmMoSGFwdGljcy5JbXBhY3RGZWVkYmFja1N0eWxlLkxpZ2h0KTtcbiAgICB9KTtcblxuICBjb25zdCBjb21wb3NlZCA9IEdlc3R1cmUuU2ltdWx0YW5lb3VzKHBhbiwgcGluY2gpO1xuXG4gIC8vIEFuaW1hdGUgdG8gc3ViamVjdCBmb2N1cyByZWN0YW5nbGVcbiAgY29uc3QgZm9jdXNUbyA9IChyZWN0OiBSZWN0KSA9PiB7XG4gICAgXCJ3b3JrbGV0XCI7XG4gICAgY29uc3QgcGFkID0gMS4xMDsgLy8gMTAlIHBhZGRpbmcgYXJvdW5kIHN1YmplY3RcbiAgICBjb25zdCBuZWVkU2NhbGUgPSBNYXRoLm1heChcbiAgICAgIChjcm9wVyAqIHBhZCkgLyAocmVjdC53aWR0aCAqIGJhc2VTY2FsZSksXG4gICAgICAoY3JvcEggKiBwYWQpIC8gKHJlY3QuaGVpZ2h0ICogYmFzZVNjYWxlKSxcbiAgICApO1xuICAgIGNvbnN0IG5leHRTY2FsZSA9IGNsYW1wKG5lZWRTY2FsZSwgMSwgNik7XG4gICAgY29uc3QgZGlzcFcgPSBpbWdXICogYmFzZVNjYWxlICogbmV4dFNjYWxlO1xuICAgIGNvbnN0IGRpc3BIID0gaW1nSCAqIGJhc2VTY2FsZSAqIG5leHRTY2FsZTtcblxuICAgIC8vIEZpbmQgdHgvdHkgdGhhdCBjZW50ZXJzIHJlY3QgaW5zaWRlIGNyb3Agd2luZG93XG4gICAgY29uc3QgcnggPSByZWN0LnggKyByZWN0LndpZHRoIC8gMjtcbiAgICBjb25zdCByeSA9IHJlY3QueSArIHJlY3QuaGVpZ2h0IC8gMjtcblxuICAgIGNvbnN0IHRhcmdldFR4ID0gZGlzcFcgLyAyIC0gcnggKiBiYXNlU2NhbGUgKiBuZXh0U2NhbGU7XG4gICAgY29uc3QgdGFyZ2V0VHkgPSBkaXNwSCAvIDIgLSByeSAqIGJhc2VTY2FsZSAqIG5leHRTY2FsZTtcblxuICAgIHNjYWxlLnZhbHVlID0gd2l0aFNwcmluZyhuZXh0U2NhbGUsIHsgZGFtcGluZzogMTgsIHN0aWZmbmVzczogMzAwIH0sICgpID0+IHtcbiAgICAgIC8vIGFmdGVyIHNjYWxpbmcsIGNsYW1wXG4gICAgfSk7XG4gICAgdHgudmFsdWUgPSB3aXRoU3ByaW5nKHRhcmdldFR4LCB7IGRhbXBpbmc6IDE4LCBzdGlmZm5lc3M6IDMwMCB9LCBlZGdlQ2xhbXApO1xuICAgIHR5LnZhbHVlID0gd2l0aFNwcmluZyh0YXJnZXRUeSwgeyBkYW1waW5nOiAxOCwgc3RpZmZuZXNzOiAzMDAgfSwgZWRnZUNsYW1wKTtcbiAgfTtcblxuICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHsgZm9jdXNUbyB9KSk7XG5cbiAgY29uc3QgaW1nU3R5bGUgPSB1c2VBbmltYXRlZFN0eWxlKCgpID0+ICh7XG4gICAgdHJhbnNmb3JtOiBbXG4gICAgICB7IHRyYW5zbGF0ZVg6IHR4LnZhbHVlIH0sXG4gICAgICB7IHRyYW5zbGF0ZVk6IHR5LnZhbHVlIH0sXG4gICAgICB7IHNjYWxlOiBzY2FsZS52YWx1ZSB9LFxuICAgIF0sXG4gIH0pKTtcblxuICBjb25zdCBhcHBseUNyb3AgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcyA9IHNjYWxlLnZhbHVlO1xuICAgIGNvbnN0IGRpc3BXID0gaW1nVyAqIGJhc2VTY2FsZSAqIHM7XG4gICAgY29uc3QgZGlzcEggPSBpbWdIICogYmFzZVNjYWxlICogcztcblxuICAgIC8vIEltYWdlIHRvcC1sZWZ0IChkaXNwbGF5KSBnaXZlbiBjdXJyZW50IHR4L3R5XG4gICAgY29uc3QgY3ggPSBjb250YWluZXJXIC8gMiArIHR4LnZhbHVlO1xuICAgIGNvbnN0IGN5ID0gY29udGFpbmVySCAvIDIgKyB0eS52YWx1ZTtcbiAgICBjb25zdCBsZWZ0ID0gY3ggLSBkaXNwVyAvIDI7XG4gICAgY29uc3QgdG9wID0gY3kgLSBkaXNwSCAvIDI7XG5cbiAgICAvLyBOb3JtYWxpemUgY3JvcCB3aW5kb3cgaW5zaWRlIGltYWdlICgwLi4xKVxuICAgIGNvbnN0IHUgPSAoY3JvcExlZnQgLSBsZWZ0KSAvIGRpc3BXO1xuICAgIGNvbnN0IHYgPSAoY3JvcFRvcCAtIHRvcCkgLyBkaXNwSDtcbiAgICBjb25zdCB1dyA9IGNyb3BXIC8gZGlzcFc7XG4gICAgY29uc3QgdmggPSBjcm9wSCAvIGRpc3BIO1xuXG4gICAgLy8gQ29udmVydCB0byBvcmlnaW5hbCBwaXhlbHMgJiBndWFyZCBlZGdlc1xuICAgIGNvbnN0IG9yaWdpblggPSBjbGFtcChNYXRoLnJvdW5kKHUgKiBpbWdXKSwgMCwgaW1nVyAtIDEpO1xuICAgIGNvbnN0IG9yaWdpblkgPSBjbGFtcChNYXRoLnJvdW5kKHYgKiBpbWdIKSwgMCwgaW1nSCAtIDEpO1xuICAgIGNvbnN0IHdpZHRoUHggPSBjbGFtcChNYXRoLnJvdW5kKHV3ICogaW1nVyksIDEsIGltZ1cgLSBvcmlnaW5YKTtcbiAgICBjb25zdCBoZWlnaHRQeCA9IGNsYW1wKE1hdGgucm91bmQodmggKiBpbWdIKSwgMSwgaW1nSCAtIG9yaWdpblkpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IEltYWdlTWFuaXB1bGF0b3IubWFuaXB1bGF0ZUFzeW5jKFxuICAgICAgICB1cmksXG4gICAgICAgIFt7IGNyb3A6IHsgb3JpZ2luWCwgb3JpZ2luWSwgd2lkdGg6IHdpZHRoUHgsIGhlaWdodDogaGVpZ2h0UHggfSB9XSxcbiAgICAgICAgeyBjb21wcmVzczogMSwgZm9ybWF0OiBJbWFnZU1hbmlwdWxhdG9yLlNhdmVGb3JtYXQuSlBFRyB9XG4gICAgICApO1xuICAgICAgb25Dcm9wcGVkKHJlc3VsdC51cmkpO1xuICAgICAgSGFwdGljcy5ub3RpZmljYXRpb25Bc3luYyhIYXB0aWNzLk5vdGlmaWNhdGlvbkZlZWRiYWNrVHlwZS5TdWNjZXNzKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIEhhcHRpY3Mubm90aWZpY2F0aW9uQXN5bmMoSGFwdGljcy5Ob3RpZmljYXRpb25GZWVkYmFja1R5cGUuRXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxWaWV3IHN0eWxlPXt7IHdpZHRoOiBjb250YWluZXJXLCBoZWlnaHQ6IGNvbnRhaW5lckggfX0+XG4gICAgICB7LyogSW1hZ2UgbGF5ZXIgKi99XG4gICAgICA8R2VzdHVyZURldGVjdG9yIGdlc3R1cmU9e2NvbXBvc2VkfT5cbiAgICAgICAgPEFuaW1hdGVkLkltYWdlXG4gICAgICAgICAgc291cmNlPXt7IHVyaSB9fVxuICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLmltZywgeyB3aWR0aDogaW1nVyAqIGJhc2VTY2FsZSwgaGVpZ2h0OiBpbWdIICogYmFzZVNjYWxlIH0sIGltZ1N0eWxlXX1cbiAgICAgICAgICByZXNpemVNb2RlPVwiY29udGFpblwiXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eUlnbm9yZXNJbnZlcnRDb2xvcnNcbiAgICAgICAgLz5cbiAgICAgIDwvR2VzdHVyZURldGVjdG9yPlxuXG4gICAgICB7LyogTWFzayArIENyb3Agd2luZG93ICsgR3JpZCAqL31cbiAgICAgIDxWaWV3IHBvaW50ZXJFdmVudHM9XCJub25lXCIgc3R5bGU9e1N0eWxlU2hlZXQuYWJzb2x1dGVGaWxsfT5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3sgZmxleDogMSwgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMCwwLDAsMC42KVwiIH19IC8+XG4gICAgICAgIDxWaWV3IHN0eWxlPXt7IGhlaWdodDogY3JvcEgsIGZsZXhEaXJlY3Rpb246IFwicm93XCIgfX0+XG4gICAgICAgICAgPFZpZXcgc3R5bGU9e3sgd2lkdGg6IGNyb3BMZWZ0LCBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLDAsMCwwLjYpXCIgfX0gLz5cbiAgICAgICAgICA8VmlldyBzdHlsZT17eyB3aWR0aDogY3JvcFcsIGJvcmRlcldpZHRoOiAxLCBib3JkZXJDb2xvcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuODUpXCIgfX0+XG4gICAgICAgICAgICB7LyogdGhpcmRzIGdyaWQgKi99XG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmdyaWRSb3d9IC8+XG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmdyaWRSb3d9IC8+XG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmdyaWRSb3d9IC8+XG4gICAgICAgICAgICA8VmlldyBzdHlsZT17W1N0eWxlU2hlZXQuYWJzb2x1dGVGaWxsLCB7IGZsZXhEaXJlY3Rpb246IFwicm93XCIgfV19PlxuICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmdyaWRDb2x9IC8+XG4gICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuZ3JpZENvbH0gLz5cbiAgICAgICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5ncmlkQ29sfSAvPlxuICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICA8VmlldyBzdHlsZT17eyB3aWR0aDogY3JvcExlZnQsIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDAsMCwwLDAuNilcIiB9fSAvPlxuICAgICAgICA8L1ZpZXc+XG4gICAgICAgIDxWaWV3IHN0eWxlPXt7IGZsZXg6IDEsIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDAsMCwwLDAuNilcIiB9fSAvPlxuICAgICAgPC9WaWV3PlxuXG4gICAgICB7LyogU3Rvcnkgc2FmZSBhcmVhIGd1aWRlcyAqL31cbiAgICAgIHtzaG93U3RvcnlHdWlkZXMgJiYgKFxuICAgICAgICA8VmlldyBwb2ludGVyRXZlbnRzPVwibm9uZVwiIHN0eWxlPXtTdHlsZVNoZWV0LmFic29sdXRlRmlsbH0+XG4gICAgICAgICAgey8qIFRvcCBzYWZlIGJhbmQgKi99XG4gICAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMuc3RvcnlCYW5kLCB7IHRvcDogY3JvcFRvcCArIDY0IH1dfSAvPlxuICAgICAgICAgIHsvKiBCb3R0b20gc2FmZSBiYW5kICovfVxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLnN0b3J5QmFuZCwgeyBib3R0b206IChjb250YWluZXJIIC0gY3JvcEJvdHRvbSkgKyAxMjAgfV19IC8+XG4gICAgICAgIDwvVmlldz5cbiAgICAgICl9XG5cbiAgICAgIHsvKiBDb250cm9scyAqL31cbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udHJvbHN9PlxuICAgICAgICB7KFtcIkZSRUVcIixcIjE6MVwiLFwiNDo1XCIsXCI5OjE2XCIsXCIxNjo5XCIsXCIzOjJcIl0gYXMgUmF0aW9bXSkubWFwKChyKSA9PiAoXG4gICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcbiAgICAgICAgICAgIGtleT17cn1cbiAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IHsgc2V0UmF0aW8ocik7IEhhcHRpY3MuaW1wYWN0QXN5bmMoSGFwdGljcy5JbXBhY3RGZWVkYmFja1N0eWxlLkxpZ2h0KTsgfX1cbiAgICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLnJhdGlvQnRuLCByPT09cmF0aW8gJiYgc3R5bGVzLnJhdGlvQnRuQWN0aXZlXX0+XG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5yYXRpb1R4dCwgcj09PXJhdGlvICYmIHN0eWxlcy5yYXRpb1R4dEFjdGl2ZV19PntyfTwvVGV4dD5cbiAgICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgICAgICkpfVxuICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eSBvblByZXNzPXthcHBseUNyb3B9IHN0eWxlPXtzdHlsZXMuYXBwbHlCdG59PlxuICAgICAgICAgIDxJb25pY29ucyBuYW1lPVwiY3JvcFwiIHNpemU9ezE2fSBjb2xvcj1cIiNmZmZcIiAvPlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuYXBwbHlUeHR9PkFwcGx5IENyb3A8L1RleHQ+XG4gICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgIDwvVmlldz5cbiAgICA8L1ZpZXc+XG4gICk7XG59KTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBpbWc6IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgbGVmdDogMCwgdG9wOiAwIH0sXG4gIGdyaWRSb3c6IHsgZmxleDogMSwgYm9yZGVyQm90dG9tV2lkdGg6IDEsIGJvcmRlckNvbG9yOiBcInJnYmEoMjU1LDI1NSwyNTUsMC4zNSlcIiB9LFxuICBncmlkQ29sOiB7IGZsZXg6IDEsIGJvcmRlclJpZ2h0V2lkdGg6IDEsIGJvcmRlckNvbG9yOiBcInJnYmEoMjU1LDI1NSwyNTUsMC4zNSlcIiB9LFxuICBjb250cm9sczogeyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCBib3R0b206IDEyLCBsZWZ0OiAxMiwgcmlnaHQ6IDEyLCBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLCBmbGV4V3JhcDogXCJ3cmFwXCIsIGdhcDogOCwganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIgfSxcbiAgcmF0aW9CdG46IHsgcGFkZGluZ1ZlcnRpY2FsOiA2LCBwYWRkaW5nSG9yaXpvbnRhbDogMTAsIGJvcmRlclJhZGl1czogMTAsIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuMDgpXCIsIGJvcmRlcldpZHRoOiAxLCBib3JkZXJDb2xvcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuMTUpXCIgfSxcbiAgcmF0aW9CdG5BY3RpdmU6IHsgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjM2LDcyLDE1MywwLjIyKVwiLCBib3JkZXJDb2xvcjogVGhlbWUuY29sb3JzLnByaW1hcnlbNTAwXSB9LFxuICByYXRpb1R4dDogeyBjb2xvcjogXCIjZmZmXCIsIGZvbnRTaXplOiAxMiwgZm9udFdlaWdodDogXCI2MDBcIiB9LFxuICByYXRpb1R4dEFjdGl2ZTogeyBjb2xvcjogXCIjZmZmXCIgfSxcbiAgYXBwbHlCdG46IHsgbWFyZ2luTGVmdDogOCwgZmxleERpcmVjdGlvbjogXCJyb3dcIiwgYWxpZ25JdGVtczogXCJjZW50ZXJcIiwgZ2FwOiA2LCBwYWRkaW5nSG9yaXpvbnRhbDogMTIsIHBhZGRpbmdWZXJ0aWNhbDogNiwgYm9yZGVyUmFkaXVzOiAxMiwgYmFja2dyb3VuZENvbG9yOiBUaGVtZS5jb2xvcnMucHJpbWFyeVs1MDBdIH0sXG4gIGFwcGx5VHh0OiB7IGNvbG9yOiBcIiNmZmZcIiwgZm9udFNpemU6IDEyLCBmb250V2VpZ2h0OiBcIjcwMFwiIH0sXG4gIHN0b3J5QmFuZDoge1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgbGVmdDogMCwgcmlnaHQ6IDAsXG4gICAgaGVpZ2h0OiA2MCxcbiAgICBib3JkZXJDb2xvcjogXCJyZ2JhKDE0LDE2NSwyMzMsMC43KVwiLFxuICAgIGJvcmRlcldpZHRoOiAxLFxuICAgIGJvcmRlclN0eWxlOiBcImRhc2hlZFwiLFxuICB9LFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLHNCQUFBLEdBQUFILHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRywwQkFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksWUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssZ0JBQUEsR0FBQU4sdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFNLE9BQUEsR0FBQVAsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFPLGFBQUEsR0FBQVAsT0FBQTtBQUFrRCxJQUFBUSxXQUFBLEdBQUFSLE9BQUE7QUFBQSxTQUFBRCx3QkFBQVUsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQVosdUJBQUEsWUFBQUEsd0JBQUFVLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFBLEVBQUFRLENBQUEsY0FBQU0sRUFBQSxJQUFBZCxDQUFBLGdCQUFBYyxFQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsSUFBQUQsQ0FBQSxHQUFBVyxNQUFBLENBQUFDLGNBQUEsS0FBQUQsTUFBQSxDQUFBRSx3QkFBQSxDQUFBbkIsQ0FBQSxFQUFBYyxFQUFBLE9BQUFQLENBQUEsQ0FBQUssR0FBQSxJQUFBTCxDQUFBLENBQUFNLEdBQUEsSUFBQVAsQ0FBQSxDQUFBRSxDQUFBLEVBQUFNLEVBQUEsRUFBQVAsQ0FBQSxJQUFBQyxDQUFBLENBQUFNLEVBQUEsSUFBQWQsQ0FBQSxDQUFBYyxFQUFBLFdBQUFOLENBQUEsS0FBQVIsQ0FBQSxFQUFBQyxDQUFBO0FBRWxELElBQUFtQixlQUFBLEdBQTRCQyx1QkFBVSxDQUFDVCxHQUFHLENBQUMsUUFBUSxDQUFDO0VBQXJDVSxRQUFRLEdBQUFGLGVBQUEsQ0FBZkcsS0FBSztBQUliLElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFJckIsQ0FBUSxFQUFvQjtFQUM5QyxRQUFRQSxDQUFDO0lBQ1AsS0FBSyxLQUFLO01BQUUsT0FBTyxDQUFDO0lBQ3BCLEtBQUssS0FBSztNQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDeEIsS0FBSyxNQUFNO01BQUUsT0FBTyxDQUFDLEdBQUcsRUFBRTtJQUMxQixLQUFLLE1BQU07TUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDO0lBQzFCLEtBQUssS0FBSztNQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDeEI7TUFBUyxPQUFPLElBQUk7RUFDdEI7QUFDRixDQUFDO0FBZ0JELElBQU1zQixLQUFLLEdBQUcsU0FBUkEsS0FBS0EsQ0FBSUMsQ0FBUyxFQUFFQyxHQUFXLEVBQUVDLEdBQVc7RUFBQSxPQUFLQyxJQUFJLENBQUNELEdBQUcsQ0FBQ0QsR0FBRyxFQUFFRSxJQUFJLENBQUNGLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFRixDQUFDLENBQUMsQ0FBQztBQUFBO0FBQUMsSUFBQUksZ0NBQUE7RUFBQUMsSUFBQTtFQUFBQyxRQUFBO0VBQUFDLFNBQUE7QUFBQTtBQUFBLElBQUFDLGlDQUFBO0VBQUFILElBQUE7RUFBQUMsUUFBQTtFQUFBQyxTQUFBO0FBQUE7QUFBQSxJQUFBRSxnQ0FBQTtFQUFBSixJQUFBO0VBQUFDLFFBQUE7RUFBQUMsU0FBQTtBQUFBO0FBQUEsSUFBQUcsZ0NBQUE7RUFBQUwsSUFBQTtFQUFBQyxRQUFBO0VBQUFDLFNBQUE7QUFBQTtBQUFBLElBQUFJLGdDQUFBO0VBQUFOLElBQUE7RUFBQUMsUUFBQTtFQUFBQyxTQUFBO0FBQUE7QUFBQSxJQUFBSyxnQ0FBQTtFQUFBUCxJQUFBO0VBQUFDLFFBQUE7RUFBQUMsU0FBQTtBQUFBO0FBQUEsSUFBQU0sZ0NBQUE7RUFBQVIsSUFBQTtFQUFBQyxRQUFBO0VBQUFDLFNBQUE7QUFBQTtBQUFBLElBQUFPLGlDQUFBO0VBQUFULElBQUE7RUFBQUMsUUFBQTtFQUFBQyxTQUFBO0FBQUE7QUFBQSxJQUFBUSxpQ0FBQTtFQUFBVixJQUFBO0VBQUFDLFFBQUE7RUFBQUMsU0FBQTtBQUFBO0FBRWhGLElBQU1TLE9BQU8sR0FBQUMsT0FBQSxDQUFBRCxPQUFBLEdBQUcsSUFBQUUsaUJBQVUsRUFDakMsVUFBQUMsSUFBQSxFQUE0RkMsR0FBRyxFQUFLO0VBQUEsSUFBakdDLEdBQUcsR0FBQUYsSUFBQSxDQUFIRSxHQUFHO0lBQUVDLFVBQVUsR0FBQUgsSUFBQSxDQUFWRyxVQUFVO0lBQUVDLFVBQVUsR0FBQUosSUFBQSxDQUFWSSxVQUFVO0lBQUFDLGlCQUFBLEdBQUFMLElBQUEsQ0FBRU0sWUFBWTtJQUFaQSxZQUFZLEdBQUFELGlCQUFBLGNBQUcsS0FBSyxHQUFBQSxpQkFBQTtJQUFFRSxTQUFTLEdBQUFQLElBQUEsQ0FBVE8sU0FBUztJQUFBQyxvQkFBQSxHQUFBUixJQUFBLENBQUVTLGVBQWU7SUFBZkEsZUFBZSxHQUFBRCxvQkFBQSxjQUFHLEtBQUssR0FBQUEsb0JBQUE7RUFDdEYsSUFBQUUsU0FBQSxHQUF3QixJQUFBQyxlQUFRLEVBQUMsQ0FBQyxDQUFDO0lBQUFDLFVBQUEsT0FBQUMsZUFBQSxDQUFBaEQsT0FBQSxFQUFBNkMsU0FBQTtJQUE1QkksSUFBSSxHQUFBRixVQUFBO0lBQUVHLE9BQU8sR0FBQUgsVUFBQTtFQUNwQixJQUFBSSxVQUFBLEdBQXdCLElBQUFMLGVBQVEsRUFBQyxDQUFDLENBQUM7SUFBQU0sVUFBQSxPQUFBSixlQUFBLENBQUFoRCxPQUFBLEVBQUFtRCxVQUFBO0lBQTVCRSxJQUFJLEdBQUFELFVBQUE7SUFBRUUsT0FBTyxHQUFBRixVQUFBO0VBQ3BCLElBQUFHLFVBQUEsR0FBMEIsSUFBQVQsZUFBUSxFQUFRTCxZQUFZLENBQUM7SUFBQWUsVUFBQSxPQUFBUixlQUFBLENBQUFoRCxPQUFBLEVBQUF1RCxVQUFBO0lBQWhERSxLQUFLLEdBQUFELFVBQUE7SUFBRUUsUUFBUSxHQUFBRixVQUFBO0VBRXRCLElBQUFHLGdCQUFTLEVBQUMsWUFBTTtJQUNkQyxrQkFBTyxDQUFDQyxPQUFPLENBQUN4QixHQUFHLEVBQUUsVUFBQ3lCLENBQUMsRUFBRUMsQ0FBQyxFQUFLO01BQUViLE9BQU8sQ0FBQ1ksQ0FBQyxDQUFDO01BQUVSLE9BQU8sQ0FBQ1MsQ0FBQyxDQUFDO0lBQUUsQ0FBQyxFQUFFLFlBQU0sQ0FBQyxDQUFDLENBQUM7RUFDdkUsQ0FBQyxFQUFFLENBQUMxQixHQUFHLENBQUMsQ0FBQztFQUdULElBQU0yQixTQUFTLEdBQUcsSUFBQUMsY0FBTyxFQUFDO0lBQUEsT0FBTyxDQUFDaEIsSUFBSSxJQUFJLENBQUNJLElBQUksR0FBRyxDQUFDLEdBQUdsQyxJQUFJLENBQUNGLEdBQUcsQ0FBQ3FCLFVBQVUsR0FBR1csSUFBSSxFQUFFVixVQUFVLEdBQUdjLElBQUksQ0FBQztFQUFBLENBQUMsRUFBRSxDQUFDSixJQUFJLEVBQUVJLElBQUksRUFBRWYsVUFBVSxFQUFFQyxVQUFVLENBQUMsQ0FBQztFQUc1SSxJQUFNMkIsRUFBRSxHQUFHcEQsVUFBVSxDQUFDMkMsS0FBSyxDQUFDO0VBQzVCLElBQU1VLEtBQUssR0FBR0QsRUFBRSxHQUFHL0MsSUFBSSxDQUFDRixHQUFHLENBQUNxQixVQUFVLEVBQUVDLFVBQVUsR0FBRzJCLEVBQUUsQ0FBQyxHQUFHL0MsSUFBSSxDQUFDRixHQUFHLENBQUNxQixVQUFVLEVBQUVDLFVBQVUsQ0FBQztFQUMzRixJQUFNNkIsS0FBSyxHQUFHRixFQUFFLEdBQUdDLEtBQUssR0FBR0QsRUFBRSxHQUFHL0MsSUFBSSxDQUFDRixHQUFHLENBQUNxQixVQUFVLEVBQUVDLFVBQVUsQ0FBQztFQUNoRSxJQUFNOEIsUUFBUSxHQUFHLENBQUMvQixVQUFVLEdBQUc2QixLQUFLLElBQUksQ0FBQztFQUN6QyxJQUFNRyxPQUFPLEdBQUcsQ0FBQy9CLFVBQVUsR0FBRzZCLEtBQUssSUFBSSxDQUFDO0VBQ3hDLElBQU1HLFNBQVMsR0FBR0YsUUFBUSxHQUFHRixLQUFLO0VBQ2xDLElBQU1LLFVBQVUsR0FBR0YsT0FBTyxHQUFHRixLQUFLO0VBR2xDLElBQU1LLEtBQUssR0FBRyxJQUFBQyxxQ0FBYyxFQUFDLENBQUMsQ0FBQztFQUMvQixJQUFNQyxFQUFFLEdBQUcsSUFBQUQscUNBQWMsRUFBQyxDQUFDLENBQUM7RUFDNUIsSUFBTUUsRUFBRSxHQUFHLElBQUFGLHFDQUFjLEVBQUMsQ0FBQyxDQUFDO0VBRzVCLElBQU1HLE1BQU0sR0FBRyxJQUFJO0VBRW5CLElBQU1DLFNBQVM7SUFBQSxJQUFBQyxFQUFBLFFBQUFDLE1BQUEsQ0FBQUMsS0FBQTtJQUFBLElBQUFDLEVBQUEsWUFBQUEsR0FBQSxFQUFTO01BRXRCLElBQU1DLEtBQUssR0FBR2xDLElBQUksR0FBR2UsU0FBUyxHQUFHUyxLQUFLLENBQUNXLEtBQUs7TUFDNUMsSUFBTUMsS0FBSyxHQUFHaEMsSUFBSSxHQUFHVyxTQUFTLEdBQUdTLEtBQUssQ0FBQ1csS0FBSztNQUM1QyxJQUFNRSxLQUFLLEdBQUdmLFNBQVMsR0FBR2pDLFVBQVUsR0FBRyxDQUFDLEdBQUc2QyxLQUFLLEdBQUcsQ0FBQztNQUNwRCxJQUFNSSxLQUFLLEdBQUdsQixRQUFRLEdBQUcvQixVQUFVLEdBQUcsQ0FBQyxHQUFHNkMsS0FBSyxHQUFHLENBQUM7TUFDbkQsSUFBTUssS0FBSyxHQUFHaEIsVUFBVSxHQUFHakMsVUFBVSxHQUFHLENBQUMsR0FBRzhDLEtBQUssR0FBRyxDQUFDO01BQ3JELElBQU1JLEtBQUssR0FBR25CLE9BQU8sR0FBRy9CLFVBQVUsR0FBRyxDQUFDLEdBQUc4QyxLQUFLLEdBQUcsQ0FBQztNQUNsRFYsRUFBRSxDQUFDUyxLQUFLLEdBQUdyRSxLQUFLLENBQUM0RCxFQUFFLENBQUNTLEtBQUssRUFBRUUsS0FBSyxFQUFFQyxLQUFLLENBQUM7TUFDeENYLEVBQUUsQ0FBQ1EsS0FBSyxHQUFHckUsS0FBSyxDQUFDNkQsRUFBRSxDQUFDUSxLQUFLLEVBQUVJLEtBQUssRUFBRUMsS0FBSyxDQUFDO0lBQzFDLENBQUM7SUFBQVAsRUFBQSxDQUFBUSxRQUFBO01BQUF6QyxJQUFBLEVBaEZhQSxJQUFJO01BQUFlLFNBQUEsRUFDR0EsU0FBUztNQUFBUyxLQUFBLEVBQUdBLEtBQUs7TUFBQXBCLElBQUEsRUFBeEJBLElBQUk7TUFBQWtCLFNBQUEsRUFDSkEsU0FBUztNQUFBakMsVUFBQSxFQUNFQSxVQUFVO01BQUErQixRQUFBLEVBQXJCQSxRQUFRO01BQUFHLFVBQUEsRUFDUkEsVUFBVTtNQUFBakMsVUFBQSxFQUNBQSxVQUFVO01BQUErQixPQUFBLEVBQXBCQSxPQUFPO01BQUFLLEVBQUEsRUFDSkEsRUFBRTtNQUFBNUQsS0FBQSxFQUNSQSxLQUFLO01BQUE2RCxFQUFBLEVBQUNBO0lBQUU7SUFBQU0sRUFBQSxDQUFBUyxVQUFBLEdBQUF2RSxnQ0FBQTtJQUFBOEQsRUFBQSxDQUFBVSxhQUFBO0lBQUFWLEVBQUEsQ0FBQVcsY0FBQSxHQUFBZCxFQUFBO0lBQUFHLEVBQUEsQ0FBQVksU0FBQTtJQUFBLE9BQUFaLEVBQUE7RUFBQSxHQXlFbEI7RUFFRCxJQUFNYSxHQUFHLEdBQUdDLGtDQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFDLENBQ3RCQyxRQUFRO0lBQUEsSUFBQW5CLEVBQUEsUUFBQUMsTUFBQSxDQUFBQyxLQUFBO0lBQUEsSUFBQUMsRUFBQSxZQUFBQSxHQUFFNUYsQ0FBQyxFQUFLO01BRWYsSUFBTTZGLEtBQUssR0FBR2xDLElBQUksR0FBR2UsU0FBUyxHQUFHUyxLQUFLLENBQUNXLEtBQUs7TUFDNUMsSUFBTUMsS0FBSyxHQUFHaEMsSUFBSSxHQUFHVyxTQUFTLEdBQUdTLEtBQUssQ0FBQ1csS0FBSztNQUM1QyxJQUFNRSxLQUFLLEdBQUdmLFNBQVMsR0FBR2pDLFVBQVUsR0FBRyxDQUFDLEdBQUc2QyxLQUFLLEdBQUcsQ0FBQztNQUNwRCxJQUFNSSxLQUFLLEdBQUdsQixRQUFRLEdBQUcvQixVQUFVLEdBQUcsQ0FBQyxHQUFHNkMsS0FBSyxHQUFHLENBQUM7TUFDbkQsSUFBTUssS0FBSyxHQUFHaEIsVUFBVSxHQUFHakMsVUFBVSxHQUFHLENBQUMsR0FBRzhDLEtBQUssR0FBRyxDQUFDO01BQ3JELElBQU1JLEtBQUssR0FBR25CLE9BQU8sR0FBRy9CLFVBQVUsR0FBRyxDQUFDLEdBQUc4QyxLQUFLLEdBQUcsQ0FBQztNQUVsRCxJQUFNYyxLQUFLLEdBQUd4QixFQUFFLENBQUNTLEtBQUssR0FBRzlGLENBQUMsQ0FBQzhHLE9BQU87TUFDbEMsSUFBTUMsS0FBSyxHQUFHekIsRUFBRSxDQUFDUSxLQUFLLEdBQUc5RixDQUFDLENBQUNnSCxPQUFPO01BRWxDLElBQU1DLEtBQUssR0FBR0osS0FBSyxHQUFHYixLQUFLLEdBQUdhLEtBQUssR0FBR2IsS0FBSyxHQUFHYSxLQUFLLEdBQUdaLEtBQUssR0FBR1ksS0FBSyxHQUFHWixLQUFLLEdBQUcsQ0FBQztNQUMvRSxJQUFNaUIsS0FBSyxHQUFHSCxLQUFLLEdBQUdiLEtBQUssR0FBR2EsS0FBSyxHQUFHYixLQUFLLEdBQUdhLEtBQUssR0FBR1osS0FBSyxHQUFHWSxLQUFLLEdBQUdaLEtBQUssR0FBRyxDQUFDO01BRS9FZCxFQUFFLENBQUNTLEtBQUssR0FBR21CLEtBQUssR0FBR0osS0FBSyxHQUFHSSxLQUFLLElBQUksQ0FBQyxHQUFHMUIsTUFBTSxDQUFDLEdBQUdzQixLQUFLO01BQ3ZEdkIsRUFBRSxDQUFDUSxLQUFLLEdBQUdvQixLQUFLLEdBQUdILEtBQUssR0FBR0csS0FBSyxJQUFJLENBQUMsR0FBRzNCLE1BQU0sQ0FBQyxHQUFHd0IsS0FBSztJQUN6RCxDQUFDO0lBQUFuQixFQUFBLENBQUFRLFFBQUE7TUFBQXpDLElBQUEsRUFuR1dBLElBQUk7TUFBQWUsU0FBQSxFQUNHQSxTQUFTO01BQUFTLEtBQUEsRUFBR0EsS0FBSztNQUFBcEIsSUFBQSxFQUF4QkEsSUFBSTtNQUFBa0IsU0FBQSxFQUNKQSxTQUFTO01BQUFqQyxVQUFBLEVBQ0VBLFVBQVU7TUFBQStCLFFBQUEsRUFBckJBLFFBQVE7TUFBQUcsVUFBQSxFQUNSQSxVQUFVO01BQUFqQyxVQUFBLEVBQ0FBLFVBQVU7TUFBQStCLE9BQUEsRUFBcEJBLE9BQU87TUFBQUssRUFBQSxFQUtyQkEsRUFBRTtNQUFBQyxFQUFBLEVBQ0ZBLEVBQUU7TUFBQUMsTUFBQSxFQUFzQ0E7SUFBTTtJQUFBSyxFQUFBLENBQUFTLFVBQUEsR0FBQW5FLGlDQUFBO0lBQUEwRCxFQUFBLENBQUFVLGFBQUE7SUFBQVYsRUFBQSxDQUFBVyxjQUFBLEdBQUFkLEVBQUE7SUFBQUcsRUFBQSxDQUFBWSxTQUFBO0lBQUEsT0FBQVosRUFBQTtFQUFBLEdBd0YzQyxDQUFDLENBQ0R1QixLQUFLO0lBQUEsSUFBQTFCLEVBQUEsUUFBQUMsTUFBQSxDQUFBQyxLQUFBO0lBQUEsSUFBQUMsRUFBQSxZQUFBQSxHQUFBLEVBQU87TUFDWEosU0FBUyxDQUFDLENBQUM7SUFDYixDQUFDO0lBQUFJLEVBQUEsQ0FBQVEsUUFBQTtNQUFBWixTQUFBLEVBdkdIQTtJQUFTO0lBQUFJLEVBQUEsQ0FBQVMsVUFBQSxHQUFBbEUsZ0NBQUE7SUFBQXlELEVBQUEsQ0FBQVUsYUFBQTtJQUFBVixFQUFBLENBQUFXLGNBQUEsR0FBQWQsRUFBQTtJQUFBRyxFQUFBLENBQUFZLFNBQUE7SUFBQSxPQUFBWixFQUFBO0VBQUEsR0F1R04sQ0FBQztFQUVKLElBQU13QixLQUFLLEdBQUdWLGtDQUFPLENBQUNXLEtBQUssQ0FBQyxDQUFDLENBQzFCQyxPQUFPO0lBQUEsSUFBQTdCLEVBQUEsUUFBQUMsTUFBQSxDQUFBQyxLQUFBO0lBQUEsSUFBQUMsRUFBQSxZQUFBQSxHQUFBLEVBQU87TUFBRS9GLE9BQU8sQ0FBQzBILFdBQVcsQ0FBQzFILE9BQU8sQ0FBQzJILG1CQUFtQixDQUFDQyxLQUFLLENBQUM7SUFBRSxDQUFDO0lBQUE3QixFQUFBLENBQUFRLFFBQUE7TUFBQXZHLE9BQUEsRUExR3hEQTtJQUFPO0lBQUErRixFQUFBLENBQUFTLFVBQUEsR0FBQWpFLGdDQUFBO0lBQUF3RCxFQUFBLENBQUFVLGFBQUE7SUFBQVYsRUFBQSxDQUFBVyxjQUFBLEdBQUFkLEVBQUE7SUFBQUcsRUFBQSxDQUFBWSxTQUFBO0lBQUEsT0FBQVosRUFBQTtFQUFBLEdBMEdpRCxDQUFDLENBQzFFZ0IsUUFBUTtJQUFBLElBQUFuQixFQUFBLFFBQUFDLE1BQUEsQ0FBQUMsS0FBQTtJQUFBLElBQUFDLEVBQUEsWUFBQUEsR0FBRTVGLENBQUMsRUFBSztNQUNmLElBQU0wSCxJQUFJLEdBQUd2QyxLQUFLLENBQUNXLEtBQUs7TUFDeEJYLEtBQUssQ0FBQ1csS0FBSyxHQUFHckUsS0FBSyxDQUFDaUcsSUFBSSxHQUFHMUgsQ0FBQyxDQUFDbUYsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUFBUyxFQUFBLENBQUFRLFFBQUE7TUFBQWpCLEtBQUEsRUE3R0hBLEtBQUs7TUFBQTFELEtBQUEsRUFBU0E7SUFBSztJQUFBbUUsRUFBQSxDQUFBUyxVQUFBLEdBQUFoRSxnQ0FBQTtJQUFBdUQsRUFBQSxDQUFBVSxhQUFBO0lBQUFWLEVBQUEsQ0FBQVcsY0FBQSxHQUFBZCxFQUFBO0lBQUFHLEVBQUEsQ0FBQVksU0FBQTtJQUFBLE9BQUFaLEVBQUE7RUFBQSxHQTZHaEIsQ0FBQyxDQUNEdUIsS0FBSztJQUFBLElBQUExQixFQUFBLFFBQUFDLE1BQUEsQ0FBQUMsS0FBQTtJQUFBLElBQUFDLEVBQUEsWUFBQUEsR0FBQSxFQUFPO01BQ1hKLFNBQVMsQ0FBQyxDQUFDO01BQ1gzRixPQUFPLENBQUMwSCxXQUFXLENBQUMxSCxPQUFPLENBQUMySCxtQkFBbUIsQ0FBQ0MsS0FBSyxDQUFDO0lBQ3hELENBQUM7SUFBQTdCLEVBQUEsQ0FBQVEsUUFBQTtNQUFBWixTQUFBLEVBbEhIQSxTQUFTO01BQUEzRixPQUFBLEVBQ1dBO0lBQU87SUFBQStGLEVBQUEsQ0FBQVMsVUFBQSxHQUFBL0QsZ0NBQUE7SUFBQXNELEVBQUEsQ0FBQVUsYUFBQTtJQUFBVixFQUFBLENBQUFXLGNBQUEsR0FBQWQsRUFBQTtJQUFBRyxFQUFBLENBQUFZLFNBQUE7SUFBQSxPQUFBWixFQUFBO0VBQUEsR0FpSHhCLENBQUM7RUFFSixJQUFNK0IsUUFBUSxHQUFHakIsa0NBQU8sQ0FBQ2tCLFlBQVksQ0FBQ25CLEdBQUcsRUFBRVcsS0FBSyxDQUFDO0VBR2pELElBQU1TLE9BQU87SUFBQSxJQUFBcEMsRUFBQSxRQUFBQyxNQUFBLENBQUFDLEtBQUE7SUFBQSxJQUFBQyxFQUFBLFlBQUFBLEdBQUlrQyxJQUFVLEVBQUs7TUFFOUIsSUFBTUMsR0FBRyxHQUFHLElBQUk7TUFDaEIsSUFBTUMsU0FBUyxHQUFHbkcsSUFBSSxDQUFDRCxHQUFHLENBQ3ZCaUQsS0FBSyxHQUFHa0QsR0FBRyxJQUFLRCxJQUFJLENBQUN2RyxLQUFLLEdBQUdtRCxTQUFTLENBQUMsRUFDdkNJLEtBQUssR0FBR2lELEdBQUcsSUFBS0QsSUFBSSxDQUFDRyxNQUFNLEdBQUd2RCxTQUFTLENBQzFDLENBQUM7TUFDRCxJQUFNd0QsU0FBUyxHQUFHekcsS0FBSyxDQUFDdUcsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7TUFDeEMsSUFBTW5DLEtBQUssR0FBR2xDLElBQUksR0FBR2UsU0FBUyxHQUFHd0QsU0FBUztNQUMxQyxJQUFNbkMsS0FBSyxHQUFHaEMsSUFBSSxHQUFHVyxTQUFTLEdBQUd3RCxTQUFTO01BRzFDLElBQU1DLEVBQUUsR0FBR0wsSUFBSSxDQUFDTSxDQUFDLEdBQUdOLElBQUksQ0FBQ3ZHLEtBQUssR0FBRyxDQUFDO01BQ2xDLElBQU04RyxFQUFFLEdBQUdQLElBQUksQ0FBQ1EsQ0FBQyxHQUFHUixJQUFJLENBQUNHLE1BQU0sR0FBRyxDQUFDO01BRW5DLElBQU1NLFFBQVEsR0FBRzFDLEtBQUssR0FBRyxDQUFDLEdBQUdzQyxFQUFFLEdBQUd6RCxTQUFTLEdBQUd3RCxTQUFTO01BQ3ZELElBQU1NLFFBQVEsR0FBR3pDLEtBQUssR0FBRyxDQUFDLEdBQUdzQyxFQUFFLEdBQUczRCxTQUFTLEdBQUd3RCxTQUFTO01BRXZEL0MsS0FBSyxDQUFDVyxLQUFLLEdBQUcsSUFBQTJDLGlDQUFVLEVBQUNQLFNBQVMsRUFBRTtRQUFFUSxPQUFPLEVBQUUsRUFBRTtRQUFFQyxTQUFTLEVBQUU7TUFBSSxDQUFDO1FBQUEsSUFBQWxELEVBQUEsUUFBQUMsTUFBQSxDQUFBQyxLQUFBO1FBQUEsSUFBQUMsRUFBQSxZQUFBQSxHQUFBLEVBQVEsQ0FFM0UsQ0FBQztRQUFBQSxFQUFBLENBQUFRLFFBQUE7UUFBQVIsRUFBQSxDQUFBUyxVQUFBLEdBQUE3RCxpQ0FBQTtRQUFBb0QsRUFBQSxDQUFBVSxhQUFBO1FBQUFWLEVBQUEsQ0FBQVcsY0FBQSxHQUFBZCxFQUFBO1FBQUFHLEVBQUEsQ0FBQVksU0FBQTtRQUFBLE9BQUFaLEVBQUE7TUFBQSxJQUFDO01BQ0ZQLEVBQUUsQ0FBQ1MsS0FBSyxHQUFHLElBQUEyQyxpQ0FBVSxFQUFDRixRQUFRLEVBQUU7UUFBRUcsT0FBTyxFQUFFLEVBQUU7UUFBRUMsU0FBUyxFQUFFO01BQUksQ0FBQyxFQUFFbkQsU0FBUyxDQUFDO01BQzNFRixFQUFFLENBQUNRLEtBQUssR0FBRyxJQUFBMkMsaUNBQVUsRUFBQ0QsUUFBUSxFQUFFO1FBQUVFLE9BQU8sRUFBRSxFQUFFO1FBQUVDLFNBQVMsRUFBRTtNQUFJLENBQUMsRUFBRW5ELFNBQVMsQ0FBQztJQUM3RSxDQUFDO0lBQUFJLEVBQUEsQ0FBQVEsUUFBQTtNQUFBdkIsS0FBQSxFQTdJMEJBLEtBQUs7TUFBQUgsU0FBQSxFQVNFQSxTQUFTO01BQUFJLEtBQUEsRUFUd0JBLEtBQUs7TUFBQXJELEtBQUEsRUFDdERBLEtBQUs7TUFBQWtDLElBQUEsRUFDVEEsSUFBSTtNQUFBSSxJQUFBLEVBQ0pBLElBQUk7TUFBQW9CLEtBQUEsRUFPbEJBLEtBQUs7TUFBQXNELFVBQUEsRUFVTUEsaUNBQVU7TUFBQXBELEVBQUEsRUFKckJBLEVBQUU7TUFBQUcsU0FBQSxFQU9DQSxTQUFTO01BQUFGLEVBQUEsRUFIWkE7SUFBRTtJQUFBTSxFQUFBLENBQUFTLFVBQUEsR0FBQTlELGdDQUFBO0lBQUFxRCxFQUFBLENBQUFVLGFBQUE7SUFBQVYsRUFBQSxDQUFBVyxjQUFBLEdBQUFkLEVBQUE7SUFBQUcsRUFBQSxDQUFBWSxTQUFBO0lBQUEsT0FBQVosRUFBQTtFQUFBLEdBeUhEO0VBRUQsSUFBQWdELDBCQUFtQixFQUFDOUYsR0FBRyxFQUFFO0lBQUEsT0FBTztNQUFFK0UsT0FBTyxFQUFQQTtJQUFRLENBQUM7RUFBQSxDQUFDLENBQUM7RUFFN0MsSUFBTWdCLFFBQVEsR0FBRyxJQUFBQyx1Q0FBZ0I7SUFBQSxJQUFBckQsRUFBQSxRQUFBQyxNQUFBLENBQUFDLEtBQUE7SUFBQSxJQUFBQyxFQUFBLEdBQUMsU0FBQUEsR0FBQTtNQUFBLE9BQU87UUFDdkNtRCxTQUFTLEVBQUUsQ0FDVDtVQUFFQyxVQUFVLEVBQUUzRCxFQUFFLENBQUNTO1FBQU0sQ0FBQyxFQUN4QjtVQUFFbUQsVUFBVSxFQUFFM0QsRUFBRSxDQUFDUTtRQUFNLENBQUMsRUFDeEI7VUFBRVgsS0FBSyxFQUFFQSxLQUFLLENBQUNXO1FBQU0sQ0FBQztNQUUxQixDQUFDO0lBQUEsQ0FBQztJQUFBRixFQUFBLENBQUFRLFFBQUE7TUFBQWYsRUFBQSxFQXZKWUEsRUFBRTtNQUFBQyxFQUFBLEVBRUZBLEVBQUU7TUFBQUgsS0FBQSxFQUVQQTtJQUFLO0lBQUFTLEVBQUEsQ0FBQVMsVUFBQSxHQUFBNUQsaUNBQUE7SUFBQW1ELEVBQUEsQ0FBQVUsYUFBQTtJQUFBVixFQUFBLENBQUFXLGNBQUEsR0FBQWQsRUFBQTtJQUFBRyxFQUFBLENBQUFZLFNBQUE7SUFBQSxPQUFBWixFQUFBO0VBQUEsR0FtSlosQ0FBQztFQUVILElBQU1zRCxTQUFTO0lBQUEsSUFBQUMsS0FBQSxPQUFBQyxrQkFBQSxDQUFBMUksT0FBQSxFQUFHLGFBQVk7TUFDNUIsSUFBTTJJLENBQUMsR0FBR2xFLEtBQUssQ0FBQ1csS0FBSztNQUNyQixJQUFNRCxLQUFLLEdBQUdsQyxJQUFJLEdBQUdlLFNBQVMsR0FBRzJFLENBQUM7TUFDbEMsSUFBTXRELEtBQUssR0FBR2hDLElBQUksR0FBR1csU0FBUyxHQUFHMkUsQ0FBQztNQUdsQyxJQUFNQyxFQUFFLEdBQUd0RyxVQUFVLEdBQUcsQ0FBQyxHQUFHcUMsRUFBRSxDQUFDUyxLQUFLO01BQ3BDLElBQU15RCxFQUFFLEdBQUd0RyxVQUFVLEdBQUcsQ0FBQyxHQUFHcUMsRUFBRSxDQUFDUSxLQUFLO01BQ3BDLElBQU0wRCxJQUFJLEdBQUdGLEVBQUUsR0FBR3pELEtBQUssR0FBRyxDQUFDO01BQzNCLElBQU00RCxHQUFHLEdBQUdGLEVBQUUsR0FBR3hELEtBQUssR0FBRyxDQUFDO01BRzFCLElBQU0yRCxDQUFDLEdBQUcsQ0FBQzNFLFFBQVEsR0FBR3lFLElBQUksSUFBSTNELEtBQUs7TUFDbkMsSUFBTW5FLENBQUMsR0FBRyxDQUFDc0QsT0FBTyxHQUFHeUUsR0FBRyxJQUFJMUQsS0FBSztNQUNqQyxJQUFNNEQsRUFBRSxHQUFHOUUsS0FBSyxHQUFHZ0IsS0FBSztNQUN4QixJQUFNK0QsRUFBRSxHQUFHOUUsS0FBSyxHQUFHaUIsS0FBSztNQUd4QixJQUFNOEQsT0FBTyxHQUFHcEksS0FBSyxDQUFDSSxJQUFJLENBQUNpSSxLQUFLLENBQUNKLENBQUMsR0FBRy9GLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRUEsSUFBSSxHQUFHLENBQUMsQ0FBQztNQUN4RCxJQUFNb0csT0FBTyxHQUFHdEksS0FBSyxDQUFDSSxJQUFJLENBQUNpSSxLQUFLLENBQUNwSSxDQUFDLEdBQUdxQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUVBLElBQUksR0FBRyxDQUFDLENBQUM7TUFDeEQsSUFBTWlHLE9BQU8sR0FBR3ZJLEtBQUssQ0FBQ0ksSUFBSSxDQUFDaUksS0FBSyxDQUFDSCxFQUFFLEdBQUdoRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUVBLElBQUksR0FBR2tHLE9BQU8sQ0FBQztNQUMvRCxJQUFNSSxRQUFRLEdBQUd4SSxLQUFLLENBQUNJLElBQUksQ0FBQ2lJLEtBQUssQ0FBQ0YsRUFBRSxHQUFHN0YsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFQSxJQUFJLEdBQUdnRyxPQUFPLENBQUM7TUFFaEUsSUFBSTtRQUNGLElBQU1HLE1BQU0sU0FBU3RLLGdCQUFnQixDQUFDdUssZUFBZSxDQUNuRHBILEdBQUcsRUFDSCxDQUFDO1VBQUVxSCxJQUFJLEVBQUU7WUFBRVAsT0FBTyxFQUFQQSxPQUFPO1lBQUVFLE9BQU8sRUFBUEEsT0FBTztZQUFFeEksS0FBSyxFQUFFeUksT0FBTztZQUFFL0IsTUFBTSxFQUFFZ0M7VUFBUztRQUFFLENBQUMsQ0FBQyxFQUNsRTtVQUFFSSxRQUFRLEVBQUUsQ0FBQztVQUFFQyxNQUFNLEVBQUUxSyxnQkFBZ0IsQ0FBQzJLLFVBQVUsQ0FBQ0M7UUFBSyxDQUMxRCxDQUFDO1FBQ0RwSCxTQUFTLENBQUM4RyxNQUFNLENBQUNuSCxHQUFHLENBQUM7UUFDckJsRCxPQUFPLENBQUM0SyxpQkFBaUIsQ0FBQzVLLE9BQU8sQ0FBQzZLLHdCQUF3QixDQUFDQyxPQUFPLENBQUM7TUFDckUsQ0FBQyxDQUFDLE9BQUFDLE9BQUEsRUFBTTtRQUNOL0ssT0FBTyxDQUFDNEssaUJBQWlCLENBQUM1SyxPQUFPLENBQUM2Syx3QkFBd0IsQ0FBQy9FLEtBQUssQ0FBQztNQUNuRTtJQUNGLENBQUM7SUFBQSxnQkFsQ0t1RCxTQUFTQSxDQUFBO01BQUEsT0FBQUMsS0FBQSxDQUFBMEIsS0FBQSxPQUFBQyxTQUFBO0lBQUE7RUFBQSxHQWtDZDtFQUVELE9BQ0UsSUFBQS9LLFdBQUEsQ0FBQWdMLElBQUEsRUFBQ3ZMLFlBQUEsQ0FBQXdMLElBQUk7SUFBQ0MsS0FBSyxFQUFFO01BQUUxSixLQUFLLEVBQUV5QixVQUFVO01BQUVpRixNQUFNLEVBQUVoRjtJQUFXLENBQUU7SUFBQWlJLFFBQUEsR0FFckQsSUFBQW5MLFdBQUEsQ0FBQW9MLEdBQUEsRUFBQ3pMLDBCQUFBLENBQUEwTCxlQUFlO01BQUNDLE9BQU8sRUFBRTFELFFBQVM7TUFBQXVELFFBQUEsRUFDakMsSUFBQW5MLFdBQUEsQ0FBQW9MLEdBQUEsRUFBQzFMLHNCQUFBLENBQUFpQixPQUFRLENBQUM0SyxLQUFLO1FBQ2JDLE1BQU0sRUFBRTtVQUFFeEksR0FBRyxFQUFIQTtRQUFJLENBQUU7UUFDaEJrSSxLQUFLLEVBQUUsQ0FBQ08sTUFBTSxDQUFDQyxHQUFHLEVBQUU7VUFBRWxLLEtBQUssRUFBRW9DLElBQUksR0FBR2UsU0FBUztVQUFFdUQsTUFBTSxFQUFFbEUsSUFBSSxHQUFHVztRQUFVLENBQUMsRUFBRW1FLFFBQVEsQ0FBRTtRQUNyRjZDLFVBQVUsRUFBQyxTQUFTO1FBQ3BCQyxnQ0FBZ0M7TUFBQSxDQUNqQztJQUFDLENBQ2EsQ0FBQyxFQUdsQixJQUFBNUwsV0FBQSxDQUFBZ0wsSUFBQSxFQUFDdkwsWUFBQSxDQUFBd0wsSUFBSTtNQUFDWSxhQUFhLEVBQUMsTUFBTTtNQUFDWCxLQUFLLEVBQUVZLHVCQUFVLENBQUNDLFlBQWE7TUFBQVosUUFBQSxHQUN4RCxJQUFBbkwsV0FBQSxDQUFBb0wsR0FBQSxFQUFDM0wsWUFBQSxDQUFBd0wsSUFBSTtRQUFDQyxLQUFLLEVBQUU7VUFBRWMsSUFBSSxFQUFFLENBQUM7VUFBRUMsZUFBZSxFQUFFO1FBQWtCO01BQUUsQ0FBRSxDQUFDLEVBQ2hFLElBQUFqTSxXQUFBLENBQUFnTCxJQUFBLEVBQUN2TCxZQUFBLENBQUF3TCxJQUFJO1FBQUNDLEtBQUssRUFBRTtVQUFFaEQsTUFBTSxFQUFFbkQsS0FBSztVQUFFbUgsYUFBYSxFQUFFO1FBQU0sQ0FBRTtRQUFBZixRQUFBLEdBQ25ELElBQUFuTCxXQUFBLENBQUFvTCxHQUFBLEVBQUMzTCxZQUFBLENBQUF3TCxJQUFJO1VBQUNDLEtBQUssRUFBRTtZQUFFMUosS0FBSyxFQUFFd0QsUUFBUTtZQUFFaUgsZUFBZSxFQUFFO1VBQWtCO1FBQUUsQ0FBRSxDQUFDLEVBQ3hFLElBQUFqTSxXQUFBLENBQUFnTCxJQUFBLEVBQUN2TCxZQUFBLENBQUF3TCxJQUFJO1VBQUNDLEtBQUssRUFBRTtZQUFFMUosS0FBSyxFQUFFc0QsS0FBSztZQUFFcUgsV0FBVyxFQUFFLENBQUM7WUFBRUMsV0FBVyxFQUFFO1VBQXlCLENBQUU7VUFBQWpCLFFBQUEsR0FFbkYsSUFBQW5MLFdBQUEsQ0FBQW9MLEdBQUEsRUFBQzNMLFlBQUEsQ0FBQXdMLElBQUk7WUFBQ0MsS0FBSyxFQUFFTyxNQUFNLENBQUNZO1VBQVEsQ0FBRSxDQUFDLEVBQy9CLElBQUFyTSxXQUFBLENBQUFvTCxHQUFBLEVBQUMzTCxZQUFBLENBQUF3TCxJQUFJO1lBQUNDLEtBQUssRUFBRU8sTUFBTSxDQUFDWTtVQUFRLENBQUUsQ0FBQyxFQUMvQixJQUFBck0sV0FBQSxDQUFBb0wsR0FBQSxFQUFDM0wsWUFBQSxDQUFBd0wsSUFBSTtZQUFDQyxLQUFLLEVBQUVPLE1BQU0sQ0FBQ1k7VUFBUSxDQUFFLENBQUMsRUFDL0IsSUFBQXJNLFdBQUEsQ0FBQWdMLElBQUEsRUFBQ3ZMLFlBQUEsQ0FBQXdMLElBQUk7WUFBQ0MsS0FBSyxFQUFFLENBQUNZLHVCQUFVLENBQUNDLFlBQVksRUFBRTtjQUFFRyxhQUFhLEVBQUU7WUFBTSxDQUFDLENBQUU7WUFBQWYsUUFBQSxHQUMvRCxJQUFBbkwsV0FBQSxDQUFBb0wsR0FBQSxFQUFDM0wsWUFBQSxDQUFBd0wsSUFBSTtjQUFDQyxLQUFLLEVBQUVPLE1BQU0sQ0FBQ2E7WUFBUSxDQUFFLENBQUMsRUFDL0IsSUFBQXRNLFdBQUEsQ0FBQW9MLEdBQUEsRUFBQzNMLFlBQUEsQ0FBQXdMLElBQUk7Y0FBQ0MsS0FBSyxFQUFFTyxNQUFNLENBQUNhO1lBQVEsQ0FBRSxDQUFDLEVBQy9CLElBQUF0TSxXQUFBLENBQUFvTCxHQUFBLEVBQUMzTCxZQUFBLENBQUF3TCxJQUFJO2NBQUNDLEtBQUssRUFBRU8sTUFBTSxDQUFDYTtZQUFRLENBQUUsQ0FBQztVQUFBLENBQzNCLENBQUM7UUFBQSxDQUNILENBQUMsRUFDUCxJQUFBdE0sV0FBQSxDQUFBb0wsR0FBQSxFQUFDM0wsWUFBQSxDQUFBd0wsSUFBSTtVQUFDQyxLQUFLLEVBQUU7WUFBRTFKLEtBQUssRUFBRXdELFFBQVE7WUFBRWlILGVBQWUsRUFBRTtVQUFrQjtRQUFFLENBQUUsQ0FBQztNQUFBLENBQ3BFLENBQUMsRUFDUCxJQUFBak0sV0FBQSxDQUFBb0wsR0FBQSxFQUFDM0wsWUFBQSxDQUFBd0wsSUFBSTtRQUFDQyxLQUFLLEVBQUU7VUFBRWMsSUFBSSxFQUFFLENBQUM7VUFBRUMsZUFBZSxFQUFFO1FBQWtCO01BQUUsQ0FBRSxDQUFDO0lBQUEsQ0FDNUQsQ0FBQyxFQUdOMUksZUFBZSxJQUNkLElBQUF2RCxXQUFBLENBQUFnTCxJQUFBLEVBQUN2TCxZQUFBLENBQUF3TCxJQUFJO01BQUNZLGFBQWEsRUFBQyxNQUFNO01BQUNYLEtBQUssRUFBRVksdUJBQVUsQ0FBQ0MsWUFBYTtNQUFBWixRQUFBLEdBRXhELElBQUFuTCxXQUFBLENBQUFvTCxHQUFBLEVBQUMzTCxZQUFBLENBQUF3TCxJQUFJO1FBQUNDLEtBQUssRUFBRSxDQUFDTyxNQUFNLENBQUNjLFNBQVMsRUFBRTtVQUFFN0MsR0FBRyxFQUFFekUsT0FBTyxHQUFHO1FBQUcsQ0FBQztNQUFFLENBQUUsQ0FBQyxFQUUxRCxJQUFBakYsV0FBQSxDQUFBb0wsR0FBQSxFQUFDM0wsWUFBQSxDQUFBd0wsSUFBSTtRQUFDQyxLQUFLLEVBQUUsQ0FBQ08sTUFBTSxDQUFDYyxTQUFTLEVBQUU7VUFBRUMsTUFBTSxFQUFHdEosVUFBVSxHQUFHaUMsVUFBVSxHQUFJO1FBQUksQ0FBQztNQUFFLENBQUUsQ0FBQztJQUFBLENBQzVFLENBQ1AsRUFHRCxJQUFBbkYsV0FBQSxDQUFBZ0wsSUFBQSxFQUFDdkwsWUFBQSxDQUFBd0wsSUFBSTtNQUFDQyxLQUFLLEVBQUVPLE1BQU0sQ0FBQ2dCLFFBQVM7TUFBQXRCLFFBQUEsR0FDekIsQ0FBQyxNQUFNLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLEtBQUssQ0FBQyxDQUFhdUIsR0FBRyxDQUFDLFVBQUN0TSxDQUFDO1FBQUEsT0FDM0QsSUFBQUosV0FBQSxDQUFBb0wsR0FBQSxFQUFDM0wsWUFBQSxDQUFBa04sZ0JBQWdCO1VBRWZDLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFBLEVBQVE7WUFBRXZJLFFBQVEsQ0FBQ2pFLENBQUMsQ0FBQztZQUFFTixPQUFPLENBQUMwSCxXQUFXLENBQUMxSCxPQUFPLENBQUMySCxtQkFBbUIsQ0FBQ0MsS0FBSyxDQUFDO1VBQUUsQ0FBRTtVQUN4RndELEtBQUssRUFBRSxDQUFDTyxNQUFNLENBQUNvQixRQUFRLEVBQUV6TSxDQUFDLEtBQUdnRSxLQUFLLElBQUlxSCxNQUFNLENBQUNxQixjQUFjLENBQUU7VUFBQTNCLFFBQUEsRUFDN0QsSUFBQW5MLFdBQUEsQ0FBQW9MLEdBQUEsRUFBQzNMLFlBQUEsQ0FBQXNOLElBQUk7WUFBQzdCLEtBQUssRUFBRSxDQUFDTyxNQUFNLENBQUN1QixRQUFRLEVBQUU1TSxDQUFDLEtBQUdnRSxLQUFLLElBQUlxSCxNQUFNLENBQUN3QixjQUFjLENBQUU7WUFBQTlCLFFBQUEsRUFBRS9LO1VBQUMsQ0FBTztRQUFDLEdBSHpFQSxDQUlXLENBQUM7TUFBQSxDQUNwQixDQUFDLEVBQ0YsSUFBQUosV0FBQSxDQUFBZ0wsSUFBQSxFQUFDdkwsWUFBQSxDQUFBa04sZ0JBQWdCO1FBQUNDLE9BQU8sRUFBRXpELFNBQVU7UUFBQytCLEtBQUssRUFBRU8sTUFBTSxDQUFDeUIsUUFBUztRQUFBL0IsUUFBQSxHQUMzRCxJQUFBbkwsV0FBQSxDQUFBb0wsR0FBQSxFQUFDeEwsWUFBQSxDQUFBdU4sUUFBUTtVQUFDQyxJQUFJLEVBQUMsTUFBTTtVQUFDQyxJQUFJLEVBQUUsRUFBRztVQUFDQyxLQUFLLEVBQUM7UUFBTSxDQUFFLENBQUMsRUFDL0MsSUFBQXROLFdBQUEsQ0FBQW9MLEdBQUEsRUFBQzNMLFlBQUEsQ0FBQXNOLElBQUk7VUFBQzdCLEtBQUssRUFBRU8sTUFBTSxDQUFDOEIsUUFBUztVQUFBcEMsUUFBQSxFQUFDO1FBQVUsQ0FBTSxDQUFDO01BQUEsQ0FDL0IsQ0FBQztJQUFBLENBQ2YsQ0FBQztFQUFBLENBQ0gsQ0FBQztBQUVYLENBQUMsQ0FBQztBQUVGLElBQU1NLE1BQU0sR0FBR0ssdUJBQVUsQ0FBQzBCLE1BQU0sQ0FBQztFQUMvQjlCLEdBQUcsRUFBRTtJQUFFK0IsUUFBUSxFQUFFLFVBQVU7SUFBRWhFLElBQUksRUFBRSxDQUFDO0lBQUVDLEdBQUcsRUFBRTtFQUFFLENBQUM7RUFDOUMyQyxPQUFPLEVBQUU7SUFBRUwsSUFBSSxFQUFFLENBQUM7SUFBRTBCLGlCQUFpQixFQUFFLENBQUM7SUFBRXRCLFdBQVcsRUFBRTtFQUF5QixDQUFDO0VBQ2pGRSxPQUFPLEVBQUU7SUFBRU4sSUFBSSxFQUFFLENBQUM7SUFBRTJCLGdCQUFnQixFQUFFLENBQUM7SUFBRXZCLFdBQVcsRUFBRTtFQUF5QixDQUFDO0VBQ2hGSyxRQUFRLEVBQUU7SUFBRWdCLFFBQVEsRUFBRSxVQUFVO0lBQUVqQixNQUFNLEVBQUUsRUFBRTtJQUFFL0MsSUFBSSxFQUFFLEVBQUU7SUFBRW1FLEtBQUssRUFBRSxFQUFFO0lBQUUxQixhQUFhLEVBQUUsS0FBSztJQUFFMkIsUUFBUSxFQUFFLE1BQU07SUFBRUMsR0FBRyxFQUFFLENBQUM7SUFBRUMsY0FBYyxFQUFFO0VBQVMsQ0FBQztFQUM3SWxCLFFBQVEsRUFBRTtJQUFFbUIsZUFBZSxFQUFFLENBQUM7SUFBRUMsaUJBQWlCLEVBQUUsRUFBRTtJQUFFQyxZQUFZLEVBQUUsRUFBRTtJQUFFakMsZUFBZSxFQUFFLHdCQUF3QjtJQUFFRSxXQUFXLEVBQUUsQ0FBQztJQUFFQyxXQUFXLEVBQUU7RUFBeUIsQ0FBQztFQUMzS1UsY0FBYyxFQUFFO0lBQUViLGVBQWUsRUFBRSx1QkFBdUI7SUFBRUcsV0FBVyxFQUFFK0IsbUJBQUssQ0FBQ0MsTUFBTSxDQUFDQyxPQUFPLENBQUMsR0FBRztFQUFFLENBQUM7RUFDcEdyQixRQUFRLEVBQUU7SUFBRU0sS0FBSyxFQUFFLE1BQU07SUFBRWdCLFFBQVEsRUFBRSxFQUFFO0lBQUVDLFVBQVUsRUFBRTtFQUFNLENBQUM7RUFDNUR0QixjQUFjLEVBQUU7SUFBRUssS0FBSyxFQUFFO0VBQU8sQ0FBQztFQUNqQ0osUUFBUSxFQUFFO0lBQUVzQixVQUFVLEVBQUUsQ0FBQztJQUFFdEMsYUFBYSxFQUFFLEtBQUs7SUFBRXVDLFVBQVUsRUFBRSxRQUFRO0lBQUVYLEdBQUcsRUFBRSxDQUFDO0lBQUVHLGlCQUFpQixFQUFFLEVBQUU7SUFBRUQsZUFBZSxFQUFFLENBQUM7SUFBRUUsWUFBWSxFQUFFLEVBQUU7SUFBRWpDLGVBQWUsRUFBRWtDLG1CQUFLLENBQUNDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLEdBQUc7RUFBRSxDQUFDO0VBQ3hMZCxRQUFRLEVBQUU7SUFBRUQsS0FBSyxFQUFFLE1BQU07SUFBRWdCLFFBQVEsRUFBRSxFQUFFO0lBQUVDLFVBQVUsRUFBRTtFQUFNLENBQUM7RUFDNURoQyxTQUFTLEVBQUU7SUFDVGtCLFFBQVEsRUFBRSxVQUFVO0lBQ3BCaEUsSUFBSSxFQUFFLENBQUM7SUFBRW1FLEtBQUssRUFBRSxDQUFDO0lBQ2pCMUYsTUFBTSxFQUFFLEVBQUU7SUFDVmtFLFdBQVcsRUFBRSxzQkFBc0I7SUFDbkNELFdBQVcsRUFBRSxDQUFDO0lBQ2R1QyxXQUFXLEVBQUU7RUFDZjtBQUNGLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==