{"version":3,"names":["_msw","require","_environment","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","handlers","exports","http","post","API_BASE_URL","_ref2","_asyncToGenerator2","_ref","request","body","json","email","password","HttpResponse","token","user","id","name","error","status","_x","get","pets","subscription","data","profile","matches","messages","delete","success","message","gracePeriodEndsAt","Date","now","toISOString","_ref9","_ref8","url","URL","page","parseInt","searchParams","_id","type","breed","age","photos","pagination","totalPages","totalItems","_x2","_ref1","_ref0","params","_x3","_ref11","_ref10","_x4","put","_ref13","_ref12","_x5","petId","matchedPetId","createdAt","_ref17","_ref16","isMatch","Math","random","liked","matched","matchId","undefined","_x6","_ref19","_ref18","bio","keywords","sentiment","score","label","matchScore","_x7","breed_analysis","primary_breed","confidence","health_assessment","age_estimate","health_score","recommendations","photo_quality","overall_score","lighting_score","composition_score","clarity_score","matchability_score","ai_insights","all","_ref22","_ref21","console","warn","method","_x8"],"sources":["handlers.ts"],"sourcesContent":["/**\n * MSW (Mock Service Worker) request handlers\n * Used for intercepting HTTP requests in unit/integration tests\n */\n\nimport { http, HttpResponse } from 'msw';\nimport { API_BASE_URL } from '@/config/environment';\n\n// Define handlers for API endpoints\nexport const handlers = [\n  // Auth endpoints\n  http.post(`${API_BASE_URL}/auth/login`, async ({ request }) => {\n    const body = await request.json() as { email: string; password: string };\n    if (body.email === 'test@example.com' && body.password === 'password') {\n      return HttpResponse.json({\n        token: 'mock-jwt-token',\n        user: {\n          id: '123',\n          email: 'test@example.com',\n          name: 'Test User',\n        },\n      });\n    }\n    return HttpResponse.json(\n      { error: 'Invalid credentials' },\n      { status: 401 }\n    );\n  }),\n\n  http.post(`${API_BASE_URL}/auth/register`, async () => {\n    return HttpResponse.json({\n      token: 'mock-jwt-token',\n      user: {\n        id: '123',\n        email: 'new@example.com',\n        name: 'New User',\n      },\n    });\n  }),\n\n  http.post(`${API_BASE_URL}/auth/refresh-token`, async () => {\n    return HttpResponse.json({\n      token: 'refreshed-mock-jwt-token',\n    });\n  }),\n\n  // Users endpoints\n  http.get(`${API_BASE_URL}/users/me`, async () => {\n    return HttpResponse.json({\n      id: '123',\n      email: 'test@example.com',\n      name: 'Test User',\n      pets: [],\n      subscription: null,\n    });\n  }),\n\n  http.get(`${API_BASE_URL}/users/export-data`, async () => {\n    return HttpResponse.json({\n      data: {\n        profile: { email: 'test@example.com', name: 'Test User' },\n        pets: [],\n        matches: [],\n        messages: [],\n      },\n    });\n  }),\n\n  http.delete(`${API_BASE_URL}/users/delete-account`, async () => {\n    return HttpResponse.json({\n      success: true,\n      message: 'Account deletion initiated',\n      gracePeriodEndsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n    });\n  }),\n\n  // Pets endpoints\n  http.get(`${API_BASE_URL}/pets`, async ({ request }) => {\n    const url = new URL(request.url);\n    const page = parseInt(url.searchParams.get('page') || '1');\n    \n    return HttpResponse.json({\n      pets: [\n        {\n          _id: '1',\n          name: 'Fluffy',\n          type: 'dog',\n          breed: 'Golden Retriever',\n          age: 3,\n          photos: ['https://example.com/photo.jpg'],\n        },\n      ],\n      pagination: {\n        page,\n        totalPages: 1,\n        totalItems: 1,\n      },\n    });\n  }),\n\n  http.get(`${API_BASE_URL}/pets/:id`, async ({ params }) => {\n    const { id } = params;\n    return HttpResponse.json({\n      _id: id,\n      name: 'Fluffy',\n      type: 'dog',\n      breed: 'Golden Retriever',\n      age: 3,\n      photos: ['https://example.com/photo.jpg'],\n    });\n  }),\n\n  http.post(`${API_BASE_URL}/pets`, async ({ request }) => {\n    const body = await request.json();\n    return HttpResponse.json({\n      _id: 'new-pet-id',\n      ...(body as Record<string, unknown>),\n    }, { status: 201 });\n  }),\n\n  http.put(`${API_BASE_URL}/pets/:id`, async ({ request, params }) => {\n    const body = await request.json();\n    const { id } = params;\n    return HttpResponse.json({\n      _id: id,\n      ...(body as Record<string, unknown>),\n    });\n  }),\n\n  http.delete(`${API_BASE_URL}/pets/:id`, async () => {\n    return HttpResponse.json({ success: true });\n  }),\n\n  // Matches endpoints\n  http.get(`${API_BASE_URL}/matches`, async () => {\n    return HttpResponse.json({\n      matches: [\n        {\n          _id: 'match1',\n          petId: '1',\n          matchedPetId: '2',\n          createdAt: new Date().toISOString(),\n          status: 'active',\n        },\n      ],\n    });\n  }),\n\n  http.post(`${API_BASE_URL}/matches/like`, async ({ request }) => {\n    const body = await request.json() as { petId: string; likedPetId: string };\n    const isMatch = Math.random() > 0.5; // 50% chance of match\n    \n    return HttpResponse.json({\n      liked: true,\n      matched: isMatch,\n      matchId: isMatch ? 'match-id' : undefined,\n    });\n  }),\n\n  // AI endpoints\n  http.post(`${API_BASE_URL}/ai/generate-bio`, async ({ request }) => {\n    const body = await request.json();\n    return HttpResponse.json({\n      bio: 'A playful and friendly companion who loves adventure!',\n      keywords: ['friendly', 'playful', 'loves adventure'],\n      sentiment: { score: 0.8, label: 'positive' },\n      matchScore: 0.85,\n    });\n  }),\n\n  http.post(`${API_BASE_URL}/ai/analyze-photos`, async () => {\n    return HttpResponse.json({\n      breed_analysis: {\n        primary_breed: 'Golden Retriever',\n        confidence: 0.92,\n      },\n      health_assessment: {\n        age_estimate: 3,\n        health_score: 0.9,\n        recommendations: ['Maintain regular exercise'],\n      },\n      photo_quality: {\n        overall_score: 0.85,\n        lighting_score: 0.8,\n        composition_score: 0.9,\n        clarity_score: 0.85,\n      },\n      matchability_score: 0.88,\n      ai_insights: ['Great lighting', 'Good composition'],\n    });\n  }),\n\n  // Default catch-all handler\n  http.all('*', async ({ request }) => {\n    console.warn(`Unhandled MSW request: ${request.method} ${request.url}`);\n    return HttpResponse.json(\n      { error: 'No handler defined for this request' },\n      { status: 500 }\n    );\n  }),\n];\n\n"],"mappings":"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","ignoreList":[]}