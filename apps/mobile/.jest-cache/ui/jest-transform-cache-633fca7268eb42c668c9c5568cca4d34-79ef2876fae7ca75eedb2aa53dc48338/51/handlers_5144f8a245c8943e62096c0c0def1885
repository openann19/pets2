eb585550a10b37953005d37a7a42f421
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handlers = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _msw = require("msw");
var _environment = require("@/config/environment");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var handlers = exports.handlers = [_msw.http.post(`${_environment.API_BASE_URL}/auth/login`, function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (_ref) {
    var request = _ref.request;
    var body = yield request.json();
    if (body.email === 'test@example.com' && body.password === 'password') {
      return _msw.HttpResponse.json({
        token: 'mock-jwt-token',
        user: {
          id: '123',
          email: 'test@example.com',
          name: 'Test User'
        }
      });
    }
    return _msw.HttpResponse.json({
      error: 'Invalid credentials'
    }, {
      status: 401
    });
  });
  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}()), _msw.http.post(`${_environment.API_BASE_URL}/auth/register`, (0, _asyncToGenerator2.default)(function* () {
  return _msw.HttpResponse.json({
    token: 'mock-jwt-token',
    user: {
      id: '123',
      email: 'new@example.com',
      name: 'New User'
    }
  });
})), _msw.http.post(`${_environment.API_BASE_URL}/auth/refresh-token`, (0, _asyncToGenerator2.default)(function* () {
  return _msw.HttpResponse.json({
    token: 'refreshed-mock-jwt-token'
  });
})), _msw.http.get(`${_environment.API_BASE_URL}/users/me`, (0, _asyncToGenerator2.default)(function* () {
  return _msw.HttpResponse.json({
    id: '123',
    email: 'test@example.com',
    name: 'Test User',
    pets: [],
    subscription: null
  });
})), _msw.http.get(`${_environment.API_BASE_URL}/users/export-data`, (0, _asyncToGenerator2.default)(function* () {
  return _msw.HttpResponse.json({
    data: {
      profile: {
        email: 'test@example.com',
        name: 'Test User'
      },
      pets: [],
      matches: [],
      messages: []
    }
  });
})), _msw.http.delete(`${_environment.API_BASE_URL}/users/delete-account`, (0, _asyncToGenerator2.default)(function* () {
  return _msw.HttpResponse.json({
    success: true,
    message: 'Account deletion initiated',
    gracePeriodEndsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
  });
})), _msw.http.get(`${_environment.API_BASE_URL}/pets`, function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (_ref8) {
    var request = _ref8.request;
    var url = new URL(request.url);
    var page = parseInt(url.searchParams.get('page') || '1');
    return _msw.HttpResponse.json({
      pets: [{
        _id: '1',
        name: 'Fluffy',
        type: 'dog',
        breed: 'Golden Retriever',
        age: 3,
        photos: ['https://example.com/photo.jpg']
      }],
      pagination: {
        page: page,
        totalPages: 1,
        totalItems: 1
      }
    });
  });
  return function (_x2) {
    return _ref9.apply(this, arguments);
  };
}()), _msw.http.get(`${_environment.API_BASE_URL}/pets/:id`, function () {
  var _ref1 = (0, _asyncToGenerator2.default)(function* (_ref0) {
    var params = _ref0.params;
    var id = params.id;
    return _msw.HttpResponse.json({
      _id: id,
      name: 'Fluffy',
      type: 'dog',
      breed: 'Golden Retriever',
      age: 3,
      photos: ['https://example.com/photo.jpg']
    });
  });
  return function (_x3) {
    return _ref1.apply(this, arguments);
  };
}()), _msw.http.post(`${_environment.API_BASE_URL}/pets`, function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (_ref10) {
    var request = _ref10.request;
    var body = yield request.json();
    return _msw.HttpResponse.json(_objectSpread({
      _id: 'new-pet-id'
    }, body), {
      status: 201
    });
  });
  return function (_x4) {
    return _ref11.apply(this, arguments);
  };
}()), _msw.http.put(`${_environment.API_BASE_URL}/pets/:id`, function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (_ref12) {
    var request = _ref12.request,
      params = _ref12.params;
    var body = yield request.json();
    var id = params.id;
    return _msw.HttpResponse.json(_objectSpread({
      _id: id
    }, body));
  });
  return function (_x5) {
    return _ref13.apply(this, arguments);
  };
}()), _msw.http.delete(`${_environment.API_BASE_URL}/pets/:id`, (0, _asyncToGenerator2.default)(function* () {
  return _msw.HttpResponse.json({
    success: true
  });
})), _msw.http.get(`${_environment.API_BASE_URL}/matches`, (0, _asyncToGenerator2.default)(function* () {
  return _msw.HttpResponse.json({
    matches: [{
      _id: 'match1',
      petId: '1',
      matchedPetId: '2',
      createdAt: new Date().toISOString(),
      status: 'active'
    }]
  });
})), _msw.http.post(`${_environment.API_BASE_URL}/matches/like`, function () {
  var _ref17 = (0, _asyncToGenerator2.default)(function* (_ref16) {
    var request = _ref16.request;
    var body = yield request.json();
    var isMatch = Math.random() > 0.5;
    return _msw.HttpResponse.json({
      liked: true,
      matched: isMatch,
      matchId: isMatch ? 'match-id' : undefined
    });
  });
  return function (_x6) {
    return _ref17.apply(this, arguments);
  };
}()), _msw.http.post(`${_environment.API_BASE_URL}/ai/generate-bio`, function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (_ref18) {
    var request = _ref18.request;
    var body = yield request.json();
    return _msw.HttpResponse.json({
      bio: 'A playful and friendly companion who loves adventure!',
      keywords: ['friendly', 'playful', 'loves adventure'],
      sentiment: {
        score: 0.8,
        label: 'positive'
      },
      matchScore: 0.85
    });
  });
  return function (_x7) {
    return _ref19.apply(this, arguments);
  };
}()), _msw.http.post(`${_environment.API_BASE_URL}/ai/analyze-photos`, (0, _asyncToGenerator2.default)(function* () {
  return _msw.HttpResponse.json({
    breed_analysis: {
      primary_breed: 'Golden Retriever',
      confidence: 0.92
    },
    health_assessment: {
      age_estimate: 3,
      health_score: 0.9,
      recommendations: ['Maintain regular exercise']
    },
    photo_quality: {
      overall_score: 0.85,
      lighting_score: 0.8,
      composition_score: 0.9,
      clarity_score: 0.85
    },
    matchability_score: 0.88,
    ai_insights: ['Great lighting', 'Good composition']
  });
})), _msw.http.all('*', function () {
  var _ref22 = (0, _asyncToGenerator2.default)(function* (_ref21) {
    var request = _ref21.request;
    console.warn(`Unhandled MSW request: ${request.method} ${request.url}`);
    return _msw.HttpResponse.json({
      error: 'No handler defined for this request'
    }, {
      status: 500
    });
  });
  return function (_x8) {
    return _ref22.apply(this, arguments);
  };
}())];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,