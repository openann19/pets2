a7e3a12d8c6f1f8c504785e37c1e1440
"use strict";

var _reactNative = require("@testing-library/react-native");
var _useScrollOffsetTracker = require("../useScrollOffsetTracker");
describe('useScrollOffsetTracker', function () {
  describe('Basic Functionality', function () {
    it('should initialize with offset of 0', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook.result;
      expect(result.current.getOffset()).toBe(0);
    });
    it('should return onScroll and getOffset functions', function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook2.result;
      expect(typeof result.current.onScroll).toBe('function');
      expect(typeof result.current.getOffset).toBe('function');
    });
    it('should track scroll offset', function () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook3.result;
      (0, _reactNative.act)(function () {
        result.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 150
            },
            contentSize: {
              width: 375,
              height: 1000
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      expect(result.current.getOffset()).toBe(150);
    });
    it('should update tracked offset on subsequent scrolls', function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook4.result;
      (0, _reactNative.act)(function () {
        result.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 100
            },
            contentSize: {
              width: 375,
              height: 1000
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      (0, _reactNative.act)(function () {
        result.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 300
            },
            contentSize: {
              width: 375,
              height: 1000
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      expect(result.current.getOffset()).toBe(300);
    });
  });
  describe('Callback Stability', function () {
    it('should return stable onScroll reference', function () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook5.result,
        rerender = _renderHook5.rerender;
      var firstOnScroll = result.current.onScroll;
      rerender();
      expect(result.current.onScroll).toBe(firstOnScroll);
    });
    it('should return stable getOffset reference', function () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook6.result,
        rerender = _renderHook6.rerender;
      var firstGetOffset = result.current.getOffset;
      rerender();
      expect(result.current.getOffset).toBe(firstGetOffset);
    });
  });
  describe('Edge Cases', function () {
    it('should handle negative offset', function () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook7.result;
      (0, _reactNative.act)(function () {
        result.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: -50
            },
            contentSize: {
              width: 375,
              height: 1000
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      expect(result.current.getOffset()).toBe(-50);
    });
    it('should handle zero offset', function () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook8.result;
      (0, _reactNative.act)(function () {
        result.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 0
            },
            contentSize: {
              width: 375,
              height: 1000
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      expect(result.current.getOffset()).toBe(0);
    });
    it('should handle very large offset values', function () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook9.result;
      (0, _reactNative.act)(function () {
        result.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 999999
            },
            contentSize: {
              width: 375,
              height: 999999
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      expect(result.current.getOffset()).toBe(999999);
    });
    it('should handle rapid scroll events', function () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook0.result;
      var _loop = function _loop(i) {
        (0, _reactNative.act)(function () {
          result.current.onScroll({
            nativeEvent: {
              contentOffset: {
                x: 0,
                y: i * 100
              },
              contentSize: {
                width: 375,
                height: 10000
              },
              layoutMeasurement: {
                width: 375,
                height: 812
              }
            }
          });
        });
      };
      for (var i = 0; i < 10; i++) {
        _loop(i);
      }
      expect(result.current.getOffset()).toBe(900);
    });
  });
  describe('Integration with FlatList', function () {
    it('should work with FlatList scroll events', function () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result = _renderHook1.result;
      var mockFlatListEvent = {
        nativeEvent: {
          contentOffset: {
            x: 0,
            y: 250
          },
          contentSize: {
            width: 375,
            height: 5000
          },
          layoutMeasurement: {
            width: 375,
            height: 812
          },
          target: null
        }
      };
      (0, _reactNative.act)(function () {
        result.current.onScroll(mockFlatListEvent);
      });
      expect(result.current.getOffset()).toBe(250);
    });
  });
  describe('Multiple Instances', function () {
    it('should work independently across multiple hooks', function () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result1 = _renderHook10.result;
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useScrollOffsetTracker.useScrollOffsetTracker)();
        }),
        result2 = _renderHook11.result;
      (0, _reactNative.act)(function () {
        result1.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 100
            },
            contentSize: {
              width: 375,
              height: 1000
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      (0, _reactNative.act)(function () {
        result2.current.onScroll({
          nativeEvent: {
            contentOffset: {
              x: 0,
              y: 200
            },
            contentSize: {
              width: 375,
              height: 1000
            },
            layoutMeasurement: {
              width: 375,
              height: 812
            }
          }
        });
      });
      expect(result1.current.getOffset()).toBe(100);
      expect(result2.current.getOffset()).toBe(200);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,