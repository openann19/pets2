24251f4badae24a80314fc97c18554bb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnifiedThemeProvider = UnifiedThemeProvider;
exports.default = void 0;
exports.useColors = useColors;
exports.useSpacing = useSpacing;
exports.useTheme = useTheme;
exports.useThemeContext = useThemeContext;
exports.useThemeMode = useThemeMode;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _rnTokens = require("./rnTokens");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var warned = false;
if (!warned && process.env.NODE_ENV !== "test") {
  void Promise.resolve().then(function () {
    return _interopRequireWildcard(require("../services/logger"));
  }).then(function (_ref) {
    var logger = _ref.logger;
    logger.warn("[DEPRECATION] theme/Provider â†’ use theme/Provider instead.");
  });
  warned = true;
}
var ThemeContext = (0, _react.createContext)(undefined);
function UnifiedThemeProvider(_ref2) {
  var children = _ref2.children,
    _ref2$initialMode = _ref2.initialMode,
    initialMode = _ref2$initialMode === void 0 ? "system" : _ref2$initialMode;
  var _useState = (0, _react.useState)(initialMode),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    mode = _useState2[0],
    setMode = _useState2[1];
  var _useState3 = (0, _react.useState)(_reactNative.Appearance.getColorScheme()),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    systemColorScheme = _useState4[0],
    setSystemColorScheme = _useState4[1];
  (0, _react.useEffect)(function () {
    var subscription = _reactNative.Appearance.addChangeListener(function (_ref3) {
      var colorScheme = _ref3.colorScheme;
      setSystemColorScheme(colorScheme);
    });
    return function () {
      subscription == null ? void 0 : subscription.remove();
    };
  }, []);
  var isDark = (0, _react.useMemo)(function () {
    if (mode === "system") {
      return systemColorScheme === "dark";
    }
    return mode === "dark";
  }, [mode, systemColorScheme]);
  var theme = (0, _react.useMemo)(function () {
    return (0, _rnTokens.createTheme)(isDark ? "dark" : "light");
  }, [isDark]);
  var toggleTheme = _react.default.useCallback(function () {
    setMode(function (currentMode) {
      if (currentMode === "light") return "dark";
      if (currentMode === "dark") return "light";
      return systemColorScheme === "dark" ? "light" : "dark";
    });
  }, [systemColorScheme]);
  var value = (0, _react.useMemo)(function () {
    return {
      theme: theme,
      mode: mode,
      isDark: isDark,
      setMode: setMode,
      toggleTheme: toggleTheme
    };
  }, [theme, mode, isDark, toggleTheme]);
  return (0, _jsxRuntime.jsx)(ThemeContext.Provider, {
    value: value,
    children: children
  });
}
function useThemeContext() {
  var context = (0, _react.useContext)(ThemeContext);
  if (context === undefined) {
    throw new Error("useThemeContext must be used within a UnifiedThemeProvider");
  }
  return context;
}
function useTheme() {
  return useThemeContext().theme;
}
function useThemeMode() {
  var _useThemeContext = useThemeContext(),
    mode = _useThemeContext.mode,
    isDark = _useThemeContext.isDark,
    setMode = _useThemeContext.setMode,
    toggleTheme = _useThemeContext.toggleTheme;
  return {
    mode: mode,
    isDark: isDark,
    setMode: setMode,
    toggleTheme: toggleTheme
  };
}
function useColors() {
  return useThemeContext().theme.colors;
}
function useSpacing() {
  return useThemeContext().theme.spacing;
}
var _default = exports.default = UnifiedThemeProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,