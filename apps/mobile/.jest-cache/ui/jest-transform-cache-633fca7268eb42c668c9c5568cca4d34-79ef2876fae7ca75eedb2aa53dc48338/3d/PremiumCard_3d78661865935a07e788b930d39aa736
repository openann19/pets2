6e480c43912bddab15c14b84c0392d0c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PremiumCard = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _expoBlur = require("expo-blur");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Provider = require("../../theme/Provider");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  SCREEN_WIDTH = _Dimensions$get.width;
var PremiumCard = exports.PremiumCard = function PremiumCard(_ref) {
  var children = _ref.children,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "default" : _ref$variant,
    _ref$hover = _ref.hover,
    hover = _ref$hover === void 0 ? true : _ref$hover,
    _ref$tilt = _ref.tilt,
    tilt = _ref$tilt === void 0 ? false : _ref$tilt,
    _ref$glow = _ref.glow,
    glow = _ref$glow === void 0 ? false : _ref$glow,
    _ref$padding = _ref.padding,
    padding = _ref$padding === void 0 ? "md" : _ref$padding,
    style = _ref.style,
    onPress = _ref.onPress,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$haptic = _ref.haptic,
    haptic = _ref$haptic === void 0 ? true : _ref$haptic;
  var theme = (0, _Provider.useTheme)();
  var isDark = theme.scheme === "dark";
  var animatedScale = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var animatedRotateX = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var animatedRotateY = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var animatedElevation = (0, _react.useRef)(new _reactNative.Animated.Value(4)).current;
  var animatedGlow = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var panResponder = (0, _react.useRef)(_reactNative.PanResponder.create({
    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
      return tilt && !disabled;
    },
    onPanResponderGrant: function onPanResponderGrant() {
      if (haptic) {
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      }
    },
    onPanResponderMove: function onPanResponderMove(evt, gestureState) {
      if (!tilt) return;
      var dx = gestureState.dx,
        dy = gestureState.dy;
      var maxTilt = 15;
      var tiltX = Math.max(-maxTilt, Math.min(maxTilt, dy / 100 * maxTilt));
      var tiltY = Math.max(-maxTilt, Math.min(maxTilt, -(dx / 100) * maxTilt));
      animatedRotateX.setValue(tiltX);
      animatedRotateY.setValue(tiltY);
      _reactNative.Animated.timing(animatedElevation, {
        toValue: 8,
        duration: 150,
        useNativeDriver: false
      }).start();
    },
    onPanResponderRelease: function onPanResponderRelease() {
      _reactNative.Animated.parallel([_reactNative.Animated.spring(animatedRotateX, {
        toValue: 0,
        useNativeDriver: true,
        tension: 300,
        friction: 10
      }), _reactNative.Animated.spring(animatedRotateY, {
        toValue: 0,
        useNativeDriver: true,
        tension: 300,
        friction: 10
      }), _reactNative.Animated.timing(animatedElevation, {
        toValue: 4,
        duration: 200,
        useNativeDriver: false
      })]).start();
    }
  })).current;
  var handlePressIn = function handlePressIn() {
    if (disabled) return;
    if (haptic) {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    }
    var animations = [_reactNative.Animated.spring(animatedScale, {
      toValue: 0.98,
      useNativeDriver: true,
      tension: 300,
      friction: 10
    })];
    if (glow) {
      animations.push(_reactNative.Animated.timing(animatedGlow, {
        toValue: 1,
        duration: 150,
        useNativeDriver: false
      }));
    }
    _reactNative.Animated.parallel(animations).start();
  };
  var handlePressOut = function handlePressOut() {
    var animations = [_reactNative.Animated.spring(animatedScale, {
      toValue: 1,
      useNativeDriver: true,
      tension: 300,
      friction: 8
    })];
    if (glow) {
      animations.push(_reactNative.Animated.timing(animatedGlow, {
        toValue: 0,
        duration: 200,
        useNativeDriver: false
      }));
    }
    _reactNative.Animated.parallel(animations).start();
  };
  var handlePress = function handlePress() {
    if (disabled) return;
    if (haptic) {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    }
    onPress == null ? void 0 : onPress();
  };
  var getVariantStyles = function getVariantStyles() {
    var variants = {
      default: {
        colors: isDark ? ["#262626", "#171717"] : ["#ffffff", "#fafafa"],
        shadowColor: isDark ? "#000000" : "#000000"
      },
      glass: {
        colors: ["transparent", "transparent"],
        shadowColor: isDark ? "#000000" : "#000000"
      },
      elevated: {
        colors: isDark ? ["#262626", "#171717"] : ["#ffffff", "#fafafa"],
        shadowColor: isDark ? "#000000" : "#000000"
      },
      gradient: {
        colors: ["#667eea", "#764ba2"],
        shadowColor: "#667eea"
      },
      neon: {
        colors: ["#1a1a1a", "#1a1a1a"],
        shadowColor: theme.colors.primary
      },
      holographic: {
        colors: ["#ff6b6b", "#4ecdc4", "#45b7b8", "#96ceb4", "#ffeaa7"],
        shadowColor: "#ff6b6b"
      }
    };
    return variants[variant] || variants.default;
  };
  (0, _react.useEffect)(function () {
    _reactNative.Animated.sequence([_reactNative.Animated.timing(animatedScale, {
      toValue: 0.9,
      duration: 0,
      useNativeDriver: true
    }), _reactNative.Animated.spring(animatedScale, {
      toValue: 1,
      useNativeDriver: true,
      tension: 300,
      friction: 10
    })]).start();
  }, []);
  var getVariantContainerStyle = function getVariantContainerStyle() {
    var baseStyle = {
      borderRadius: 16,
      overflow: "hidden"
    };
    var paddingValues = {
      none: 0,
      sm: 12,
      md: 20,
      lg: 28,
      xl: 36
    };
    switch (variant) {
      case "elevated":
        return _objectSpread(_objectSpread({}, baseStyle), {}, {
          backgroundColor: isDark ? "#262626" : "#ffffff",
          shadowColor: "#000000",
          shadowOffset: {
            width: 0,
            height: 8
          },
          shadowOpacity: 0.15,
          shadowRadius: 16,
          elevation: 8,
          padding: paddingValues[padding]
        });
      case "neon":
        return _objectSpread(_objectSpread({}, baseStyle), {}, {
          backgroundColor: "#1a1a1a",
          borderWidth: 2,
          borderColor: theme.colors.primary,
          shadowColor: theme.colors.primary,
          shadowOffset: {
            width: 0,
            height: 4
          },
          shadowOpacity: 0.4,
          shadowRadius: 12,
          elevation: 6,
          padding: paddingValues[padding]
        });
      case "gradient":
        return _objectSpread(_objectSpread({}, baseStyle), {}, {
          shadowColor: "#667eea",
          shadowOffset: {
            width: 0,
            height: 6
          },
          shadowOpacity: 0.3,
          shadowRadius: 12,
          elevation: 6,
          padding: paddingValues[padding]
        });
      default:
        return _objectSpread(_objectSpread({}, baseStyle), {}, {
          backgroundColor: isDark ? "#262626" : "#ffffff",
          shadowColor: "#000000",
          shadowOffset: {
            width: 0,
            height: 4
          },
          shadowOpacity: 0.1,
          shadowRadius: 8,
          elevation: 4,
          padding: paddingValues[padding]
        });
    }
  };
  var containerStyle = getVariantContainerStyle();
  if (variant === "glass") {
    return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, _objectSpread(_objectSpread({
      style: _reactNative.StyleSheet.flatten([containerStyle, {
        transform: [{
          scale: animatedScale
        }, {
          rotateX: animatedRotateX.interpolate({
            inputRange: [-15, 15],
            outputRange: ["-15deg", "15deg"]
          })
        }, {
          rotateY: animatedRotateY.interpolate({
            inputRange: [-15, 15],
            outputRange: ["-15deg", "15deg"]
          })
        }]
      }, style])
    }, tilt ? panResponder.panHandlers : {}), {}, {
      children: [(0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
        intensity: 30,
        style: _reactNative.StyleSheet.absoluteFillObject
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([_reactNative.StyleSheet.absoluteFillObject, {
          backgroundColor: "rgba(255, 255, 255, 0.1)"
        }])
      }), onPress ? (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handlePress,
        onPressIn: handlePressIn,
        onPressOut: handlePressOut,
        disabled: disabled,
        style: styles.touchableCard,
        activeOpacity: 0.9,
        children: children
      }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.cardContent,
        children: children
      })]
    }));
  }
  if (variant === "gradient" || variant === "holographic") {
    var gradientColors = variant === "holographic" ? ["#ff6b6b", "#4ecdc4", "#45b7b8", "#96ceb4", "#ffeaa7"] : getVariantStyles().colors;
    return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, _objectSpread(_objectSpread({
      style: _reactNative.StyleSheet.flatten([containerStyle, {
        transform: [{
          scale: animatedScale
        }, {
          rotateX: animatedRotateX.interpolate({
            inputRange: [-15, 15],
            outputRange: ["-15deg", "15deg"]
          })
        }, {
          rotateY: animatedRotateY.interpolate({
            inputRange: [-15, 15],
            outputRange: ["-15deg", "15deg"]
          })
        }]
      }, style])
    }, tilt ? panResponder.panHandlers : {}), {}, {
      children: [(0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
        colors: gradientColors,
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        },
        style: _reactNative.StyleSheet.flatten([_reactNative.StyleSheet.absoluteFillObject, {
          borderRadius: containerStyle.borderRadius
        }])
      }), onPress ? (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handlePress,
        onPressIn: handlePressIn,
        onPressOut: handlePressOut,
        disabled: disabled,
        style: styles.touchableCard,
        activeOpacity: 0.9,
        children: children
      }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.cardContent,
        children: children
      }), glow && (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: _reactNative.StyleSheet.flatten([_reactNative.StyleSheet.absoluteFillObject, {
          borderRadius: containerStyle.borderRadius,
          backgroundColor: getVariantStyles().shadowColor,
          opacity: animatedGlow.interpolate({
            inputRange: [0, 1],
            outputRange: [0, 0.2]
          })
        }]),
        pointerEvents: "none"
      })]
    }));
  }
  return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, _objectSpread(_objectSpread({
    style: _reactNative.StyleSheet.flatten([containerStyle, {
      transform: [{
        scale: animatedScale
      }, {
        rotateX: animatedRotateX.interpolate({
          inputRange: [-15, 15],
          outputRange: ["-15deg", "15deg"]
        })
      }, {
        rotateY: animatedRotateY.interpolate({
          inputRange: [-15, 15],
          outputRange: ["-15deg", "15deg"]
        })
      }]
    }, style])
  }, tilt ? panResponder.panHandlers : {}), {}, {
    children: onPress ? (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: handlePress,
      onPressIn: handlePressIn,
      onPressOut: handlePressOut,
      disabled: disabled,
      style: styles.touchableCard,
      activeOpacity: 0.95,
      children: children
    }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.cardContent,
      children: children
    })
  }));
};
var styles = _reactNative.StyleSheet.create({
  touchableCard: {
    flex: 1
  },
  cardContent: {
    flex: 1
  }
});
var _default = exports.default = PremiumCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,