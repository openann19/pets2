{"version":3,"names":["_react","require","_asyncStorage","_interopRequireDefault","_core","useSettingsPersistence","_ref","key","_ref$initialData","initialData","loadSettings","useCallback","_asyncToGenerator2","default","stored","AsyncStorage","getItem","JSON","parse","error","logger","saveSettings","_ref3","data","setItem","stringify","_x","apply","arguments","clearSettings","removeItem"],"sources":["useSettingsPersistence.ts"],"sourcesContent":["import { useCallback } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { logger } from \"@pawfectmatch/core\";\n\nexport interface SettingsData {\n  [key: string]: string | number | boolean | null;\n}\n\nexport interface UseSettingsPersistenceOptions {\n  key: string;\n  initialData?: SettingsData;\n}\n\nexport interface UseSettingsPersistenceReturn {\n  loadSettings: () => Promise<SettingsData>;\n  saveSettings: (data: SettingsData) => Promise<void>;\n  clearSettings: () => Promise<void>;\n}\n\n/**\n * Hook for persisting settings data to AsyncStorage\n */\nexport function useSettingsPersistence({\n  key,\n  initialData = {},\n}: UseSettingsPersistenceOptions): UseSettingsPersistenceReturn {\n  const loadSettings = useCallback(async (): Promise<SettingsData> => {\n    try {\n      const stored = await AsyncStorage.getItem(key);\n      return stored ? JSON.parse(stored) : initialData;\n    } catch (error) {\n      logger.error(`Failed to load settings for key \"${key}\":`, { error });\n      return initialData;\n    }\n  }, [key, initialData]);\n\n  const saveSettings = useCallback(\n    async (data: SettingsData): Promise<void> => {\n      try {\n        await AsyncStorage.setItem(key, JSON.stringify(data));\n      } catch (error) {\n        logger.error(`Failed to save settings for key \"${key}\":`, { error });\n      }\n    },\n    [key],\n  );\n\n  const clearSettings = useCallback(async (): Promise<void> => {\n    try {\n      await AsyncStorage.removeItem(key);\n    } catch (error) {\n      logger.error(`Failed to clear settings for key \"${key}\":`, { error });\n    }\n  }, [key]);\n\n  return {\n    loadSettings,\n    saveSettings,\n    clearSettings,\n  };\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,KAAA,GAAAH,OAAA;AAoBO,SAASI,sBAAsBA,CAAAC,IAAA,EAG0B;EAAA,IAF9DC,GAAG,GAAAD,IAAA,CAAHC,GAAG;IAAAC,gBAAA,GAAAF,IAAA,CACHG,WAAW;IAAXA,WAAW,GAAAD,gBAAA,cAAG,CAAC,CAAC,GAAAA,gBAAA;EAEhB,IAAME,YAAY,GAAG,IAAAC,kBAAW,MAAAC,kBAAA,CAAAC,OAAA,EAAC,aAAmC;IAClE,IAAI;MACF,IAAMC,MAAM,SAASC,qBAAY,CAACC,OAAO,CAACT,GAAG,CAAC;MAC9C,OAAOO,MAAM,GAAGG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,GAAGL,WAAW;IAClD,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,YAAM,CAACD,KAAK,CAAC,oCAAoCZ,GAAG,IAAI,EAAE;QAAEY,KAAK,EAALA;MAAM,CAAC,CAAC;MACpE,OAAOV,WAAW;IACpB;EACF,CAAC,GAAE,CAACF,GAAG,EAAEE,WAAW,CAAC,CAAC;EAEtB,IAAMY,YAAY,GAAG,IAAAV,kBAAW;IAAA,IAAAW,KAAA,OAAAV,kBAAA,CAAAC,OAAA,EAC9B,WAAOU,IAAkB,EAAoB;MAC3C,IAAI;QACF,MAAMR,qBAAY,CAACS,OAAO,CAACjB,GAAG,EAAEU,IAAI,CAACQ,SAAS,CAACF,IAAI,CAAC,CAAC;MACvD,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACdC,YAAM,CAACD,KAAK,CAAC,oCAAoCZ,GAAG,IAAI,EAAE;UAAEY,KAAK,EAALA;QAAM,CAAC,CAAC;MACtE;IACF,CAAC;IAAA,iBAAAO,EAAA;MAAA,OAAAJ,KAAA,CAAAK,KAAA,OAAAC,SAAA;IAAA;EAAA,KACD,CAACrB,GAAG,CACN,CAAC;EAED,IAAMsB,aAAa,GAAG,IAAAlB,kBAAW,MAAAC,kBAAA,CAAAC,OAAA,EAAC,aAA2B;IAC3D,IAAI;MACF,MAAME,qBAAY,CAACe,UAAU,CAACvB,GAAG,CAAC;IACpC,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,YAAM,CAACD,KAAK,CAAC,qCAAqCZ,GAAG,IAAI,EAAE;QAAEY,KAAK,EAALA;MAAM,CAAC,CAAC;IACvE;EACF,CAAC,GAAE,CAACZ,GAAG,CAAC,CAAC;EAET,OAAO;IACLG,YAAY,EAAZA,YAAY;IACZW,YAAY,EAAZA,YAAY;IACZQ,aAAa,EAAbA;EACF,CAAC;AACH","ignoreList":[]}