05cd5e992841400f66a83131ef1e4da7
"use strict";

_getJestObj().mock("../../../../services/api");
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _useSettingsSync = require("../useSettingsSync");
var _api = require("../../../../services/api");
var _core = require("@pawfectmatch/core");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockMatchesAPI = _api.matchesAPI;
var mockLogger = _core.logger;
(0, _globals.describe)('useSettingsSync', function () {
  var mockSettings = {
    ageMin: 18,
    ageMax: 35,
    distance: 50,
    showMe: 'all'
  };
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockMatchesAPI.updateUserSettings = _globals.jest.fn().mockResolvedValue(undefined);
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with default state', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.isSyncing).toBe(false);
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.syncSettings).toBeDefined();
    });
    (0, _globals.it)('should initialize with callbacks', function () {
      var onSyncSuccess = _globals.jest.fn();
      var onSyncError = _globals.jest.fn();
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)({
            onSyncSuccess: onSyncSuccess,
            onSyncError: onSyncError
          });
        }),
        result = _renderHook2.result;
      (0, _globals.expect)(result.current.syncSettings).toBeDefined();
    });
  });
  (0, _globals.describe)('Sync Settings', function () {
    (0, _globals.it)('should sync settings successfully', (0, _asyncToGenerator2.default)(function* () {
      var onSyncSuccess = _globals.jest.fn();
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)({
            onSyncSuccess: onSyncSuccess
          });
        }),
        result = _renderHook3.result;
      var syncPromise;
      (0, _reactNative.act)(function () {
        syncPromise = result.current.syncSettings(mockSettings);
      });
      (0, _globals.expect)(result.current.isSyncing).toBe(true);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield syncPromise;
      }));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isSyncing).toBe(false);
      });
      (0, _globals.expect)(mockMatchesAPI.updateUserSettings).toHaveBeenCalledWith(mockSettings);
      (0, _globals.expect)(onSyncSuccess).toHaveBeenCalled();
      (0, _globals.expect)(mockLogger.info).toHaveBeenCalledWith('Settings synced successfully', {
        settings: mockSettings
      });
    }));
    (0, _globals.it)('should handle sync errors', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Network error');
      mockMatchesAPI.updateUserSettings.mockRejectedValue(error);
      var onSyncError = _globals.jest.fn();
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)({
            onSyncError: onSyncError
          });
        }),
        result = _renderHook4.result;
      var syncPromise;
      (0, _reactNative.act)(function () {
        syncPromise = result.current.syncSettings(mockSettings);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield syncPromise;
      }));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isSyncing).toBe(false);
        (0, _globals.expect)(result.current.error).toBe('Network error');
      });
      (0, _globals.expect)(onSyncError).toHaveBeenCalledWith(error);
      (0, _globals.expect)(mockLogger.error).toHaveBeenCalledWith('Failed to sync settings', {
        error: 'Network error'
      });
    }));
    (0, _globals.it)('should handle non-Error exceptions', (0, _asyncToGenerator2.default)(function* () {
      mockMatchesAPI.updateUserSettings.mockRejectedValue('String error');
      var onSyncError = _globals.jest.fn();
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)({
            onSyncError: onSyncError
          });
        }),
        result = _renderHook5.result;
      var syncPromise;
      (0, _reactNative.act)(function () {
        syncPromise = result.current.syncSettings(mockSettings);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield syncPromise;
      }));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.error).toBe('Failed to sync settings');
        (0, _globals.expect)(result.current.isSyncing).toBe(false);
      });
      (0, _globals.expect)(onSyncError).toHaveBeenCalled();
    }));
    (0, _globals.it)('should return true on success', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)();
        }),
        result = _renderHook6.result;
      var syncResult;
      (0, _reactNative.act)(function () {
        result.current.syncSettings(mockSettings).then(function (r) {
          syncResult = r;
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(syncResult).toBe(true);
      });
    }));
    (0, _globals.it)('should return false on failure', (0, _asyncToGenerator2.default)(function* () {
      mockMatchesAPI.updateUserSettings.mockRejectedValue(new Error('Error'));
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)();
        }),
        result = _renderHook7.result;
      var syncResult;
      (0, _reactNative.act)(function () {
        result.current.syncSettings(mockSettings).then(function (r) {
          syncResult = r;
        });
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(syncResult).toBe(false);
      });
    }));
  });
  (0, _globals.describe)('State Management', function () {
    (0, _globals.it)('should set isSyncing during sync', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)();
        }),
        result = _renderHook8.result;
      (0, _reactNative.act)(function () {
        result.current.syncSettings(mockSettings);
      });
      (0, _globals.expect)(result.current.isSyncing).toBe(true);
      (0, _globals.expect)(result.current.error).toBeNull();
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isSyncing).toBe(false);
      });
    }));
    (0, _globals.it)('should clear previous errors on new sync', (0, _asyncToGenerator2.default)(function* () {
      mockMatchesAPI.updateUserSettings.mockRejectedValueOnce(new Error('First error')).mockResolvedValueOnce(undefined);
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)();
        }),
        result = _renderHook9.result;
      var syncPromise;
      (0, _reactNative.act)(function () {
        syncPromise = result.current.syncSettings(mockSettings);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield syncPromise;
      }));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.error).toBe('First error');
      });
      (0, _reactNative.act)(function () {
        syncPromise = result.current.syncSettings(mockSettings);
      });
      (0, _globals.expect)(result.current.error).toBeNull();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield syncPromise;
      }));
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isSyncing).toBe(false);
        (0, _globals.expect)(result.current.error).toBeNull();
      });
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty settings object', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)();
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.syncSettings({});
      }));
      (0, _globals.expect)(mockMatchesAPI.updateUserSettings).toHaveBeenCalledWith({});
    }));
    (0, _globals.it)('should work without callbacks', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)();
        }),
        result = _renderHook1.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.syncSettings(mockSettings);
      }));
      (0, _globals.expect)(mockMatchesAPI.updateUserSettings).toHaveBeenCalled();
      (0, _globals.expect)(result.current.isSyncing).toBe(false);
    }));
    (0, _globals.it)('should handle multiple rapid sync attempts', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useSettingsSync.useSettingsSync)();
        }),
        result = _renderHook10.result;
      (0, _reactNative.act)(function () {
        result.current.syncSettings(mockSettings);
      });
      (0, _reactNative.act)(function () {
        result.current.syncSettings(mockSettings);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isSyncing).toBe(false);
      });
      (0, _globals.expect)(mockMatchesAPI.updateUserSettings).toHaveBeenCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJsb2dnZXIiLCJpbmZvIiwiamVzdCIsImZuIiwiZXJyb3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9nbG9iYWxzIiwiX3JlYWN0TmF0aXZlIiwiX3VzZVNldHRpbmdzU3luYyIsIl9hcGkiLCJfY29yZSIsIl9yZXF1aXJlIiwibW9ja01hdGNoZXNBUEkiLCJtYXRjaGVzQVBJIiwibW9ja0xvZ2dlciIsImRlc2NyaWJlIiwibW9ja1NldHRpbmdzIiwiYWdlTWluIiwiYWdlTWF4IiwiZGlzdGFuY2UiLCJzaG93TWUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInVwZGF0ZVVzZXJTZXR0aW5ncyIsIm1vY2tSZXNvbHZlZFZhbHVlIiwidW5kZWZpbmVkIiwiaXQiLCJfcmVuZGVySG9vayIsInJlbmRlckhvb2siLCJ1c2VTZXR0aW5nc1N5bmMiLCJyZXN1bHQiLCJleHBlY3QiLCJjdXJyZW50IiwiaXNTeW5jaW5nIiwidG9CZSIsInRvQmVOdWxsIiwic3luY1NldHRpbmdzIiwidG9CZURlZmluZWQiLCJvblN5bmNTdWNjZXNzIiwib25TeW5jRXJyb3IiLCJfcmVuZGVySG9vazIiLCJkZWZhdWx0IiwiX3JlbmRlckhvb2szIiwic3luY1Byb21pc2UiLCJhY3QiLCJ3YWl0Rm9yIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwic2V0dGluZ3MiLCJFcnJvciIsIm1vY2tSZWplY3RlZFZhbHVlIiwiX3JlbmRlckhvb2s0IiwiX3JlbmRlckhvb2s1IiwiX3JlbmRlckhvb2s2Iiwic3luY1Jlc3VsdCIsInRoZW4iLCJyIiwiX3JlbmRlckhvb2s3IiwiX3JlbmRlckhvb2s4IiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiX3JlbmRlckhvb2s5IiwiX3JlbmRlckhvb2swIiwiX3JlbmRlckhvb2sxIiwiX3JlbmRlckhvb2sxMCJdLCJzb3VyY2VzIjpbInVzZVNldHRpbmdzU3luYy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdHMgZm9yIHVzZVNldHRpbmdzU3luYyBob29rXG4gKiBUZXN0cyBzZXR0aW5ncyBzeW5jaHJvbml6YXRpb24gd2l0aCBiYWNrZW5kXG4gKi9cblxuaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QsIGplc3QsIGJlZm9yZUVhY2ggfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCB7IHJlbmRlckhvb2ssIGFjdCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHVzZVNldHRpbmdzU3luYyB9IGZyb20gJy4uL3VzZVNldHRpbmdzU3luYyc7XG5pbXBvcnQgeyBtYXRjaGVzQVBJIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvYXBpJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BwYXdmZWN0bWF0Y2gvY29yZSc7XG5pbXBvcnQgdHlwZSB7IFVzZXIgfSBmcm9tICdAcGF3ZmVjdG1hdGNoL2NvcmUnO1xuXG4vLyBNb2NrIGRlcGVuZGVuY2llc1xuamVzdC5tb2NrKCcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9hcGknKTtcbmplc3QubW9jaygnQHBhd2ZlY3RtYXRjaC9jb3JlJywgKCkgPT4gKHtcbiAgbG9nZ2VyOiB7XG4gICAgaW5mbzogamVzdC5mbigpLFxuICAgIGVycm9yOiBqZXN0LmZuKCksXG4gIH0sXG59KSk7XG5cbmNvbnN0IG1vY2tNYXRjaGVzQVBJID0gbWF0Y2hlc0FQSSBhcyBqZXN0Lk1vY2tlZDx0eXBlb2YgbWF0Y2hlc0FQST47XG5jb25zdCBtb2NrTG9nZ2VyID0gbG9nZ2VyIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBsb2dnZXI+O1xuXG5kZXNjcmliZSgndXNlU2V0dGluZ3NTeW5jJywgKCkgPT4ge1xuICBjb25zdCBtb2NrU2V0dGluZ3M6IFVzZXJbJ3ByZWZlcmVuY2VzJ10gPSB7XG4gICAgYWdlTWluOiAxOCxcbiAgICBhZ2VNYXg6IDM1LFxuICAgIGRpc3RhbmNlOiA1MCxcbiAgICBzaG93TWU6ICdhbGwnLFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIG1vY2tNYXRjaGVzQVBJLnVwZGF0ZVVzZXJTZXR0aW5ncyA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuICB9KTtcblxuICBkZXNjcmliZSgnSW5pdGlhbGl6YXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHdpdGggZGVmYXVsdCBzdGF0ZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNldHRpbmdzU3luYygpKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzU3luY2luZykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc3luY1NldHRpbmdzKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHdpdGggY2FsbGJhY2tzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgb25TeW5jU3VjY2VzcyA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG9uU3luY0Vycm9yID0gamVzdC5mbigpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PlxuICAgICAgICB1c2VTZXR0aW5nc1N5bmMoeyBvblN5bmNTdWNjZXNzLCBvblN5bmNFcnJvciB9KSxcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zeW5jU2V0dGluZ3MpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTeW5jIFNldHRpbmdzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc3luYyBzZXR0aW5ncyBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvblN5bmNTdWNjZXNzID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT5cbiAgICAgICAgdXNlU2V0dGluZ3NTeW5jKHsgb25TeW5jU3VjY2VzcyB9KSxcbiAgICAgICk7XG5cbiAgICAgIGxldCBzeW5jUHJvbWlzZTogUHJvbWlzZTxib29sZWFuPjtcbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHN5bmNQcm9taXNlID0gcmVzdWx0LmN1cnJlbnQuc3luY1NldHRpbmdzKG1vY2tTZXR0aW5ncyk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzU3luY2luZykudG9CZSh0cnVlKTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgc3luY1Byb21pc2UhO1xuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTeW5jaW5nKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja01hdGNoZXNBUEkudXBkYXRlVXNlclNldHRpbmdzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja1NldHRpbmdzLFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChvblN5bmNTdWNjZXNzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QobW9ja0xvZ2dlci5pbmZvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ1NldHRpbmdzIHN5bmNlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICB7IHNldHRpbmdzOiBtb2NrU2V0dGluZ3MgfSxcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzeW5jIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdOZXR3b3JrIGVycm9yJyk7XG4gICAgICBtb2NrTWF0Y2hlc0FQSS51cGRhdGVVc2VyU2V0dGluZ3MubW9ja1JlamVjdGVkVmFsdWUoZXJyb3IpO1xuICAgICAgY29uc3Qgb25TeW5jRXJyb3IgPSBqZXN0LmZuKCk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+XG4gICAgICAgIHVzZVNldHRpbmdzU3luYyh7IG9uU3luY0Vycm9yIH0pLFxuICAgICAgKTtcblxuICAgICAgbGV0IHN5bmNQcm9taXNlOiBQcm9taXNlPGJvb2xlYW4+O1xuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgc3luY1Byb21pc2UgPSByZXN1bHQuY3VycmVudC5zeW5jU2V0dGluZ3MobW9ja1NldHRpbmdzKTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBzeW5jUHJvbWlzZSE7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc1N5bmNpbmcpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmUoJ05ldHdvcmsgZXJyb3InKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qob25TeW5jRXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGVycm9yKTtcbiAgICAgIGV4cGVjdChtb2NrTG9nZ2VyLmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ0ZhaWxlZCB0byBzeW5jIHNldHRpbmdzJyxcbiAgICAgICAgeyBlcnJvcjogJ05ldHdvcmsgZXJyb3InIH0sXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbm9uLUVycm9yIGV4Y2VwdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrTWF0Y2hlc0FQSS51cGRhdGVVc2VyU2V0dGluZ3MubW9ja1JlamVjdGVkVmFsdWUoJ1N0cmluZyBlcnJvcicpO1xuICAgICAgY29uc3Qgb25TeW5jRXJyb3IgPSBqZXN0LmZuKCk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+XG4gICAgICAgIHVzZVNldHRpbmdzU3luYyh7IG9uU3luY0Vycm9yIH0pLFxuICAgICAgKTtcblxuICAgICAgbGV0IHN5bmNQcm9taXNlOiBQcm9taXNlPGJvb2xlYW4+O1xuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgc3luY1Byb21pc2UgPSByZXN1bHQuY3VycmVudC5zeW5jU2V0dGluZ3MobW9ja1NldHRpbmdzKTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBzeW5jUHJvbWlzZSE7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5lcnJvcikudG9CZSgnRmFpbGVkIHRvIHN5bmMgc2V0dGluZ3MnKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzU3luY2luZykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG9uU3luY0Vycm9yKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIG9uIHN1Y2Nlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZXR0aW5nc1N5bmMoKSk7XG5cbiAgICAgIGxldCBzeW5jUmVzdWx0OiBib29sZWFuO1xuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc3luY1NldHRpbmdzKG1vY2tTZXR0aW5ncykudGhlbigocikgPT4ge1xuICAgICAgICAgIHN5bmNSZXN1bHQgPSByO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHN5bmNSZXN1bHQhKS50b0JlKHRydWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSBvbiBmYWlsdXJlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja01hdGNoZXNBUEkudXBkYXRlVXNlclNldHRpbmdzLm1vY2tSZWplY3RlZFZhbHVlKFxuICAgICAgICBuZXcgRXJyb3IoJ0Vycm9yJyksXG4gICAgICApO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZXR0aW5nc1N5bmMoKSk7XG5cbiAgICAgIGxldCBzeW5jUmVzdWx0OiBib29sZWFuO1xuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc3luY1NldHRpbmdzKG1vY2tTZXR0aW5ncykudGhlbigocikgPT4ge1xuICAgICAgICAgIHN5bmNSZXN1bHQgPSByO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHN5bmNSZXN1bHQhKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU3RhdGUgTWFuYWdlbWVudCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNldCBpc1N5bmNpbmcgZHVyaW5nIHN5bmMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZXR0aW5nc1N5bmMoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnN5bmNTZXR0aW5ncyhtb2NrU2V0dGluZ3MpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc1N5bmNpbmcpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmVOdWxsKCk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTeW5jaW5nKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjbGVhciBwcmV2aW91cyBlcnJvcnMgb24gbmV3IHN5bmMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrTWF0Y2hlc0FQSS51cGRhdGVVc2VyU2V0dGluZ3NcbiAgICAgICAgLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ0ZpcnN0IGVycm9yJykpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UodW5kZWZpbmVkKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2V0dGluZ3NTeW5jKCkpO1xuXG4gICAgICAvLyBGaXJzdCBzeW5jIGZhaWxzXG4gICAgICBsZXQgc3luY1Byb21pc2U6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBzeW5jUHJvbWlzZSA9IHJlc3VsdC5jdXJyZW50LnN5bmNTZXR0aW5ncyhtb2NrU2V0dGluZ3MpO1xuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHN5bmNQcm9taXNlITtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlKCdGaXJzdCBlcnJvcicpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNlY29uZCBzeW5jIHN1Y2NlZWRzXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBzeW5jUHJvbWlzZSA9IHJlc3VsdC5jdXJyZW50LnN5bmNTZXR0aW5ncyhtb2NrU2V0dGluZ3MpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5lcnJvcikudG9CZU51bGwoKTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgc3luY1Byb21pc2UhO1xuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTeW5jaW5nKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlTnVsbCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFZGdlIENhc2VzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IHNldHRpbmdzIG9iamVjdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNldHRpbmdzU3luYygpKTtcblxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuc3luY1NldHRpbmdzKHt9KTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja01hdGNoZXNBUEkudXBkYXRlVXNlclNldHRpbmdzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7fSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdvcmsgd2l0aG91dCBjYWxsYmFja3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZXR0aW5nc1N5bmMoKSk7XG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LnN5bmNTZXR0aW5ncyhtb2NrU2V0dGluZ3MpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrTWF0Y2hlc0FQSS51cGRhdGVVc2VyU2V0dGluZ3MpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc1N5bmNpbmcpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbXVsdGlwbGUgcmFwaWQgc3luYyBhdHRlbXB0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNldHRpbmdzU3luYygpKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc3luY1NldHRpbmdzKG1vY2tTZXR0aW5ncyk7XG4gICAgICB9KTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc3luY1NldHRpbmdzKG1vY2tTZXR0aW5ncyk7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc1N5bmNpbmcpLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrTWF0Y2hlc0FQSS51cGRhdGVVc2VyU2V0dGluZ3MpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuIl0sIm1hcHBpbmdzIjoiOztBQWFBQSxXQUFBLEdBQUtDLElBQUksMkJBQTJCLENBQUM7QUFDckNELFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFO0VBQUEsT0FBTztJQUNyQ0MsTUFBTSxFQUFFO01BQ05DLElBQUksRUFBRUMsYUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNmQyxLQUFLLEVBQUVGLGFBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ2pCO0VBQ0YsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLElBQUFFLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxr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