e1f3a79ab84030b5e41363659a31ffa9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinearGradient = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _NativeLinearGradient = _interopRequireDefault(require("./NativeLinearGradient"));
var _excluded = ["colors", "locations", "start", "end"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var LinearGradient = exports.LinearGradient = function (_React$Component) {
  function LinearGradient() {
    (0, _classCallCheck2.default)(this, LinearGradient);
    return _callSuper(this, LinearGradient, arguments);
  }
  (0, _inherits2.default)(LinearGradient, _React$Component);
  return (0, _createClass2.default)(LinearGradient, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        colors = _this$props.colors,
        locations = _this$props.locations,
        start = _this$props.start,
        end = _this$props.end,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var resolvedLocations = locations;
      if (locations && colors.length !== locations.length) {
        console.warn('LinearGradient colors and locations props should be arrays of the same length');
        resolvedLocations = locations.slice(0, colors.length);
      }
      return React.createElement(_NativeLinearGradient.default, _objectSpread(_objectSpread({}, props), {}, {
        colors: _reactNative.Platform.select({
          web: colors,
          default: colors.map(_reactNative.processColor)
        }),
        locations: resolvedLocations,
        startPoint: _normalizePoint(start),
        endPoint: _normalizePoint(end)
      }));
    }
  }]);
}(React.Component);
function _normalizePoint(point) {
  if (!point) {
    return undefined;
  }
  if (Array.isArray(point) && point.length !== 2) {
    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');
    return undefined;
  }
  return Array.isArray(point) ? point : [point.x, point.y];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,