{"version":3,"names":["_interopRequireDefault","require","_asyncToGenerator2","_defineProperty2","_classCallCheck2","_createClass2","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","default","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","RequestRetryStrategy","logger_1","DEFAULT_CONFIG","maxRetries","baseDelay","maxDelay","strategy","jitter","retryBudget","retryableStatusCodes","retryableErrors","config","undefined","networkCondition","key","_execute","fn","errorHandler","lastError","startTime","Date","now","attempt","result","logger","info","attempts","error","elapsedTime","isRetryable","debug","warn","budget","retryContext","totalAttempts","delay","calculateDelay","reason","getErrorReason","sleep","execute","_x","_x2","_this$config$retryabl","errorMessage","Error","message","String","some","code","includes","isHttpError","_this$config$retryabl2","_this$config$retryabl3","statusCode","getHttpStatusCode","isNetworkError","Math","min","pow","jitterAmount","random","adjustForNetworkCondition","max","floor","multipliers","excellent","good","fair","poor","updateNetworkCondition","condition","generateIdempotencyKey","endpoint","data","dataHash","hashData","json","JSON","stringify","hash","i","char","charCodeAt","abs","toString","_unused","substring","ms","Promise","resolve","setTimeout","status"],"sources":["RequestRetryStrategy.js"],"sourcesContent":["\"use strict\";\n/**\n * Advanced Request Retry Strategy\n * Implements exponential backoff with jitter, retry budgets, and network awareness\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestRetryStrategy = void 0;\nconst logger_1 = require(\"../utils/logger\");\nconst DEFAULT_CONFIG = {\n    maxRetries: 3,\n    baseDelay: 1000,\n    maxDelay: 30000,\n    strategy: 'exponential',\n    jitter: true,\n    retryBudget: 10000,\n    retryableStatusCodes: [408, 429, 500, 502, 503, 504],\n    retryableErrors: ['ECONNRESET', 'ETIMEDOUT', 'ENOTFOUND'],\n};\nclass RequestRetryStrategy {\n    config;\n    networkCondition = 'excellent';\n    constructor(config = {}) {\n        this.config = { ...DEFAULT_CONFIG, ...config };\n    }\n    /**\n     * Execute function with retry logic\n     */\n    async execute(fn, errorHandler) {\n        let lastError;\n        const startTime = Date.now();\n        for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n            try {\n                const result = await fn();\n                if (attempt > 0) {\n                    logger_1.logger.info('Request succeeded after retry', {\n                        attempt,\n                        attempts: attempt + 1,\n                    });\n                }\n                return result;\n            }\n            catch (error) {\n                lastError = error;\n                const elapsedTime = Date.now() - startTime;\n                // Check if error is retryable\n                if (!this.isRetryable(error, attempt)) {\n                    logger_1.logger.debug('Error not retryable', { error, attempt });\n                    throw error;\n                }\n                // Check retry budget\n                if (this.config.retryBudget && elapsedTime >= this.config.retryBudget) {\n                    logger_1.logger.warn('Retry budget exceeded', { elapsedTime, budget: this.config.retryBudget });\n                    throw error;\n                }\n                // Check if we should retry based on custom handler\n                if (errorHandler) {\n                    const retryContext = {\n                        attempt,\n                        totalAttempts: attempt + 1,\n                        delay: this.calculateDelay(attempt),\n                        elapsedTime,\n                        reason: this.getErrorReason(error),\n                    };\n                    if (!errorHandler(error, retryContext)) {\n                        throw error;\n                    }\n                }\n                // Don't delay on last attempt\n                if (attempt < this.config.maxRetries) {\n                    const delay = this.calculateDelay(attempt);\n                    logger_1.logger.debug('Retrying request', {\n                        attempt: attempt + 1,\n                        maxRetries: this.config.maxRetries,\n                        delay,\n                    });\n                    await this.sleep(delay);\n                }\n            }\n        }\n        // All retries failed\n        logger_1.logger.error('Request failed after all retries', {\n            attempts: this.config.maxRetries + 1,\n            lastError,\n        });\n        throw lastError;\n    }\n    /**\n     * Check if error is retryable\n     */\n    isRetryable(error, attempt) {\n        if (attempt >= this.config.maxRetries) {\n            return false;\n        }\n        // Check if error is in retryable errors list\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        if (this.config.retryableErrors?.some(code => errorMessage.includes(code))) {\n            return true;\n        }\n        // Check HTTP status codes\n        if (this.isHttpError(error)) {\n            const statusCode = this.getHttpStatusCode(error);\n            return this.config.retryableStatusCodes?.includes(statusCode) ?? false;\n        }\n        // Default to retryable for network errors\n        return this.isNetworkError(error);\n    }\n    /**\n     * Calculate delay based on strategy\n     */\n    calculateDelay(attempt) {\n        let delay;\n        switch (this.config.strategy) {\n            case 'exponential':\n                delay = Math.min(this.config.baseDelay * Math.pow(2, attempt), this.config.maxDelay);\n                break;\n            case 'linear':\n                delay = Math.min(this.config.baseDelay * (attempt + 1), this.config.maxDelay);\n                break;\n            case 'fixed':\n                delay = this.config.baseDelay;\n                break;\n            case 'none':\n            default:\n                return 0;\n        }\n        // Apply jitter\n        if (this.config.jitter) {\n            const jitterAmount = delay * 0.1; // 10% jitter\n            delay += Math.random() * jitterAmount * 2 - jitterAmount;\n        }\n        // Adjust based on network condition\n        delay = this.adjustForNetworkCondition(delay);\n        return Math.max(0, Math.floor(delay));\n    }\n    /**\n     * Adjust delay based on network condition\n     */\n    adjustForNetworkCondition(delay) {\n        const multipliers = {\n            excellent: 1.0,\n            good: 1.2,\n            fair: 1.5,\n            poor: 2.0,\n        };\n        return delay * multipliers[this.networkCondition];\n    }\n    /**\n     * Update network condition\n     */\n    updateNetworkCondition(condition) {\n        this.networkCondition = condition;\n    }\n    /**\n     * Generate idempotency key\n     */\n    generateIdempotencyKey(endpoint, data) {\n        const dataHash = data ? this.hashData(data) : '';\n        return `${endpoint}_${Date.now()}_${dataHash}`;\n    }\n    /**\n     * Hash data for idempotency key\n     */\n    hashData(data) {\n        try {\n            const json = JSON.stringify(data);\n            // Simple hash function\n            let hash = 0;\n            for (let i = 0; i < json.length; i++) {\n                const char = json.charCodeAt(i);\n                hash = ((hash << 5) - hash) + char;\n                hash = hash & hash;\n            }\n            return Math.abs(hash).toString(36);\n        }\n        catch {\n            return Math.random().toString(36).substring(2, 11);\n        }\n    }\n    /**\n     * Sleep for specified milliseconds\n     */\n    sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    /**\n     * Check if error is network error\n     */\n    isNetworkError(error) {\n        if (error instanceof Error) {\n            return error.message.includes('network') ||\n                error.message.includes('timeout') ||\n                error.message.includes('ECONNREFUSED') ||\n                error.message.includes('ETIMEDOUT');\n        }\n        return false;\n    }\n    /**\n     * Check if error is HTTP error\n     */\n    isHttpError(error) {\n        return typeof error === 'object' && error !== null && 'status' in error;\n    }\n    /**\n     * Get HTTP status code from error\n     */\n    getHttpStatusCode(error) {\n        if (this.isHttpError(error)) {\n            return error.status;\n        }\n        return 0;\n    }\n    /**\n     * Get reason for error\n     */\n    getErrorReason(error) {\n        if (error instanceof Error) {\n            return error.message;\n        }\n        return String(error);\n    }\n}\nexports.RequestRetryStrategy = RequestRetryStrategy;\n"],"mappings":"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","ignoreList":[]}