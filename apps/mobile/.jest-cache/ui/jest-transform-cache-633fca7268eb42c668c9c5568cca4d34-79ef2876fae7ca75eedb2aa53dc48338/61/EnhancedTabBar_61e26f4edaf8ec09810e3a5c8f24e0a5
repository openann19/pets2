8266c6d3b427d47c2ca89f37c2f1d9aa
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EnhancedTabBar = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _vectorIcons = require("@expo/vector-icons");
var _native = require("@react-navigation/native");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _expoBlur = require("expo-blur");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _unifiedTheme = require("../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _worklet_6999366343294_init_data = {
  code: "function anonymous() {\n  const {\n    scale\n  } = this._closure;\n  return {\n    transform: [{\n      scale: scale.value\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"scale\",\"_closure\",\"transform\",\"value\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx\"],\"mappings\":\"AA8F6C,SAAAA,UAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAChDC,SAAS,EAAE,CAAC;MAAEF,KAAK,EAAEA,KAAK,CAACG;IAAM,CAAC;EACpC,CAAC;AAAA\",\"ignoreList\":[]}"
};
var _worklet_4577191107758_init_data = {
  code: "function anonymous() {\n  const {\n    ripple,\n    interpolate\n  } = this._closure;\n  return {\n    opacity: 1 - ripple.value,\n    transform: [{\n      scale: interpolate(ripple.value, [0, 1], [0.4, 2])\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"ripple\",\"interpolate\",\"_closure\",\"opacity\",\"value\",\"transform\",\"scale\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx\"],\"mappings\":\"AAkGuC,SAAAA,UAAA;EAAA;IAAAC,MAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IAC1CC,OAAO,EAAE,CAAC,GAAGH,MAAM,CAACI,KAAK;IACzBC,SAAS,EAAE,CAAC;MAAEC,KAAK,EAAEL,WAAW,CAACD,MAAM,CAACI,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;IAAE,CAAC;EACpE,CAAC;AAAA\",\"ignoreList\":[]}"
};
var _worklet_1426494334904_init_data = {
  code: "function anonymous() {\n  const {\n    badgeOpacity,\n    badgeScale\n  } = this._closure;\n  return {\n    opacity: badgeOpacity.value,\n    transform: [{\n      scale: badgeScale.value\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"badgeOpacity\",\"badgeScale\",\"_closure\",\"opacity\",\"value\",\"transform\",\"scale\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx\"],\"mappings\":\"AAuG8C,SAAAA,UAAA;EAAA;IAAAC,YAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,OAAO;IACjDC,OAAO,EAAEH,YAAY,CAACI,KAAK;IAC3BC,SAAS,EAAE,CAAC;MAAEC,KAAK,EAAEL,UAAU,CAACG;IAAM,CAAC;EACzC,CAAC;AAAA\",\"ignoreList\":[]}"
};
var TabBarIcon = function TabBarIcon(_ref) {
  var routeName = _ref.routeName,
    focused = _ref.focused,
    color = _ref.color,
    size = _ref.size,
    _ref$badgeCount = _ref.badgeCount,
    badgeCount = _ref$badgeCount === void 0 ? 0 : _ref$badgeCount,
    _ref$showBadge = _ref.showBadge,
    showBadge = _ref$showBadge === void 0 ? false : _ref$showBadge,
    _ref$impulse = _ref.impulse,
    impulse = _ref$impulse === void 0 ? 0 : _ref$impulse;
  var scale = (0, _reactNativeReanimated.useSharedValue)(1);
  var ripple = (0, _reactNativeReanimated.useSharedValue)(0);
  var badgeOpacity = (0, _reactNativeReanimated.useSharedValue)(showBadge ? 1 : 0);
  var badgeScale = (0, _reactNativeReanimated.useSharedValue)(showBadge ? 1 : 0);
  (0, _react.useEffect)(function () {
    if (focused) {
      scale.value = (0, _reactNativeReanimated.withSpring)(1.1, {
        damping: 15,
        stiffness: 200
      });
    } else {
      scale.value = (0, _reactNativeReanimated.withSpring)(1, {
        damping: 15,
        stiffness: 200
      });
    }
  }, [focused, scale]);
  (0, _react.useEffect)(function () {
    scale.value = (0, _reactNativeReanimated.withSpring)(1.18, {
      damping: 18,
      stiffness: 420
    });
    ripple.value = 0;
    ripple.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 450
    });
    var t = setTimeout(function () {
      scale.value = (0, _reactNativeReanimated.withSpring)(focused ? 1.1 : 1, {
        damping: 15,
        stiffness: 200
      });
    }, 180);
    return function () {
      clearTimeout(t);
    };
  }, [impulse, scale, ripple, focused]);
  (0, _react.useEffect)(function () {
    if (showBadge && badgeCount > 0) {
      badgeOpacity.value = (0, _reactNativeReanimated.withTiming)(1, {
        duration: 300
      });
      badgeScale.value = (0, _reactNativeReanimated.withSpring)(1, {
        damping: 10,
        stiffness: 200
      });
    } else {
      badgeOpacity.value = (0, _reactNativeReanimated.withTiming)(0, {
        duration: 200
      });
      badgeScale.value = (0, _reactNativeReanimated.withTiming)(0, {
        duration: 200
      });
    }
  }, [showBadge, badgeCount, badgeOpacity, badgeScale]);
  var getIconName = function getIconName() {
    switch (routeName) {
      case "Home":
        return focused ? "home" : "home-outline";
      case "Swipe":
        return focused ? "heart" : "heart-outline";
      case "Map":
        return focused ? "map" : "map-outline";
      case "Matches":
        return focused ? "chatbubbles" : "chatbubbles-outline";
      case "Profile":
        return focused ? "person" : "person-outline";
      case "AdoptionManager":
        return focused ? "list" : "list-outline";
      case "Premium":
        return focused ? "star" : "star-outline";
      default:
        return "home-outline";
    }
  };
  var animatedIconStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f() {
      return {
        transform: [{
          scale: scale.value
        }]
      };
    };
    _f._closure = {
      scale: scale
    };
    _f.__initData = _worklet_6999366343294_init_data;
    _f.__workletHash = 6999366343294;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var rippleStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -3, -27];
    var _f = function _f() {
      return {
        opacity: 1 - ripple.value,
        transform: [{
          scale: (0, _reactNativeReanimated.interpolate)(ripple.value, [0, 1], [0.4, 2])
        }]
      };
    };
    _f._closure = {
      ripple: ripple,
      interpolate: _reactNativeReanimated.interpolate
    };
    _f.__initData = _worklet_4577191107758_init_data;
    _f.__workletHash = 4577191107758;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var animatedBadgeStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -3, -27];
    var _f = function _f() {
      return {
        opacity: badgeOpacity.value,
        transform: [{
          scale: badgeScale.value
        }]
      };
    };
    _f._closure = {
      badgeOpacity: badgeOpacity,
      badgeScale: badgeScale
    };
    _f.__initData = _worklet_1426494334904_init_data;
    _f.__workletHash = 1426494334904;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.iconContainer,
    children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: [styles.ripple, rippleStyle]
    }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: animatedIconStyle,
      children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: getIconName(),
        size: size,
        color: color
      })
    }), showBadge && badgeCount > 0 ? (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
      style: _reactNative.StyleSheet.flatten([styles.badge, animatedBadgeStyle]),
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.badgeText,
        children: badgeCount > 99 ? "99+" : badgeCount.toString()
      })
    }) : null]
  });
};
var _worklet_7632900835961_init_data = {
  code: "function anonymous() {\n  const {\n    interpolate,\n    tabBarPosition,\n    Extrapolation\n  } = this._closure;\n  const translateY = interpolate(tabBarPosition.value, [0, 1], [80, 0], Extrapolation.CLAMP);\n  return {\n    transform: [{\n      translateY: translateY\n    }]\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"interpolate\",\"tabBarPosition\",\"Extrapolation\",\"_closure\",\"translateY\",\"value\",\"CLAMP\",\"transform\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx\"],\"mappings\":\"AAgM+C,SAAAA,SAAMA,CAAA;EAAA;IAAAC,WAAA;IAAAC,cAAA;IAAAC;EAAA,SAAAC,QAAA;EACjD,MAAMC,UAAU,GAAGJ,WAAW,CAC5BC,cAAc,CAACI,KAAK,EACpB,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,EAAE,EAAE,CAAC,CAAC,EACPH,aAAa,CAACI,KAChB,CAAC;EAED,OAAO;IACLC,SAAS,EAAE,CAAC;MAAEH,UAAA,EAAAA;IAAW,CAAC;EAC5B,CAAC;AACH\",\"ignoreList\":[]}"
};
var _worklet_12458704673015_init_data = {
  code: "function anonymous() {\n  const {\n    state,\n    indicatorOffset\n  } = this._closure;\n  const tabCount = state.routes.length;\n  const percentPerTab = 100 / tabCount;\n  const position = indicatorOffset.value * percentPerTab;\n  return {\n    left: position + \"%\",\n    width: percentPerTab + \"%\"\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"state\",\"indicatorOffset\",\"_closure\",\"tabCount\",\"routes\",\"length\",\"percentPerTab\",\"position\",\"value\",\"left\",\"width\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx\"],\"mappings\":\"AAuNkD,SAAAA,SAAMA,CAAA;EAAA;IAAAC,KAAA;IAAAC;EAAA,SAAAC,QAAA;EACpD,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAM,CAACC,MAAM;EACpC,MAAMC,aAAa,GAAG,GAAG,GAAGH,QAAQ;EACpC,MAAMI,QAAQ,GAAGN,eAAe,CAACO,KAAK,GAAGF,aAAa;EAEtD,OAAO;IACLG,IAAI,EAAKF,QAAQ,MAAG;IACpBG,KAAK,EAAKJ,aAAa;EACzB,CAAC;AACH\",\"ignoreList\":[]}"
};
var _worklet_3640161778225_init_data = {
  code: "function anonymous() {\n  const {\n    state,\n    indicatorOffset,\n    pillOpacity\n  } = this._closure;\n  const tabCount = state.routes.length;\n  const percentPerTab = 100 / tabCount;\n  const position = indicatorOffset.value * percentPerTab;\n  return {\n    left: position + \"%\",\n    width: percentPerTab + \"%\",\n    opacity: pillOpacity.value\n  };\n}",
  location: "/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx",
  sourceMap: "{\"version\":3,\"names\":[\"anonymous\",\"state\",\"indicatorOffset\",\"pillOpacity\",\"_closure\",\"tabCount\",\"routes\",\"length\",\"percentPerTab\",\"position\",\"value\",\"left\",\"width\",\"opacity\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/apps/mobile/src/components/EnhancedTabBar.tsx\"],\"mappings\":\"AAwO6C,SAAAA,SAAMA,CAAA;EAAA;IAAAC,KAAA;IAAAC,eAAA;IAAAC;EAAA,SAAAC,QAAA;EAC/C,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAACC,MAAM;EACpC,MAAMC,aAAa,GAAG,GAAG,GAAGH,QAAQ;EACpC,MAAMI,QAAQ,GAAGP,eAAe,CAACQ,KAAK,GAAGF,aAAa;EAEtD,OAAO;IACLG,IAAI,EAAKF,QAAQ,MAAG;IACpBG,KAAK,EAAKJ,aAAa,MAAG;IAC1BK,OAAO,EAAEV,WAAW,CAACO;EACvB,CAAC;AACH\",\"ignoreList\":[]}"
};
var EnhancedTabBar = exports.EnhancedTabBar = function EnhancedTabBar(_ref2) {
  var state = _ref2.state,
    descriptors = _ref2.descriptors,
    navigation = _ref2.navigation;
  var _useTheme = (0, _native.useTheme)(),
    colors = _useTheme.colors;
  var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
  var tabBarPosition = (0, _reactNativeReanimated.useSharedValue)(0);
  var lastTapRef = (0, _react.useRef)({});
  var _useState = (0, _react.useState)({}),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    impulses = _useState2[0],
    setImpulses = _useState2[1];
  var bump = function bump(key) {
    setImpulses(function (prev) {
      var _prev$key;
      return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, key, ((_prev$key = prev[key]) != null ? _prev$key : 0) + 1));
    });
  };
  (0, _react.useEffect)(function () {
    tabBarPosition.value = (0, _reactNativeReanimated.withSpring)(1, {
      damping: 20,
      stiffness: 90
    });
  }, [tabBarPosition]);
  var getBadgeCount = function getBadgeCount(routeName) {
    switch (routeName) {
      case "Matches":
        return 3;
      case "Swipe":
        return 0;
      case "Map":
        return 1;
      case "Profile":
        return 0;
      case "Home":
        return 2;
      case "AdoptionManager":
        return 0;
      case "Premium":
        return 0;
      default:
        return 0;
    }
  };
  var getBadgeVisibility = function getBadgeVisibility(routeName) {
    var count = getBadgeCount(routeName);
    return count > 0;
  };
  var animatedTabBarStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -4, -27];
    var _f = function _f() {
      var translateY = (0, _reactNativeReanimated.interpolate)(tabBarPosition.value, [0, 1], [80, 0], _reactNativeReanimated.Extrapolation.CLAMP);
      return {
        transform: [{
          translateY: translateY
        }]
      };
    };
    _f._closure = {
      interpolate: _reactNativeReanimated.interpolate,
      tabBarPosition: tabBarPosition,
      Extrapolation: _reactNativeReanimated.Extrapolation
    };
    _f.__initData = _worklet_7632900835961_init_data;
    _f.__workletHash = 7632900835961;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var indicatorOffset = (0, _reactNativeReanimated.useSharedValue)(state.index);
  (0, _react.useEffect)(function () {
    indicatorOffset.value = (0, _reactNativeReanimated.withSpring)(state.index, {
      damping: 20,
      stiffness: 300
    });
  }, [state.index, indicatorOffset]);
  var animatedIndicatorStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -3, -27];
    var _f = function _f() {
      var tabCount = state.routes.length;
      var percentPerTab = 100 / tabCount;
      var position = indicatorOffset.value * percentPerTab;
      return {
        left: `${position}%`,
        width: `${percentPerTab}%`
      };
    };
    _f._closure = {
      state: state,
      indicatorOffset: indicatorOffset
    };
    _f.__initData = _worklet_12458704673015_init_data;
    _f.__workletHash = 12458704673015;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  var pillOpacity = (0, _reactNativeReanimated.useSharedValue)(0);
  (0, _react.useEffect)(function () {
    pillOpacity.value = (0, _reactNativeReanimated.withTiming)(1, {
      duration: 200
    });
  }, [state.index, pillOpacity]);
  var animatedPillStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var _e = [new global.Error(), -4, -27];
    var _f = function _f() {
      var tabCount = state.routes.length;
      var percentPerTab = 100 / tabCount;
      var position = indicatorOffset.value * percentPerTab;
      return {
        left: `${position}%`,
        width: `${percentPerTab}%`,
        opacity: pillOpacity.value
      };
    };
    _f._closure = {
      state: state,
      indicatorOffset: indicatorOffset,
      pillOpacity: pillOpacity
    };
    _f.__initData = _worklet_3640161778225_init_data;
    _f.__workletHash = 3640161778225;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }());
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    style: [animatedTabBarStyle, {
      paddingBottom: insets.bottom + 8,
      paddingTop: 8
    }],
    children: (0, _jsxRuntime.jsxs)(_expoBlur.BlurView, {
      intensity: _reactNative.Platform.OS === 'ios' ? 80 : 100,
      tint: colors.background === '#ffffff' ? 'light' : 'dark',
      style: [styles.tabBar, {
        backgroundColor: _reactNative.Platform.OS === 'android' ? colors.background : 'transparent'
      }],
      children: [(0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        style: [styles.activePill, animatedPillStyle]
      }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
        style: [styles.activeIndicator, animatedIndicatorStyle]
      }), state.routes.map(function (route, index) {
        var _descriptor$options, _impulses$route$key;
        var descriptor = descriptors[route.key];
        var options = (_descriptor$options = descriptor == null ? void 0 : descriptor.options) != null ? _descriptor$options : {};
        var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;
        var isFocused = state.index === index;
        var onPress = function onPress() {
          var _lastTapRef$current$r;
          if (_reactNative.Platform.OS === 'ios') {
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
          }
          var now = Date.now();
          var last = (_lastTapRef$current$r = lastTapRef.current[route.key]) != null ? _lastTapRef$current$r : 0;
          lastTapRef.current[route.key] = now;
          var isDouble = now - last < 300;
          var event = navigation.emit({
            type: "tabPress",
            target: route.key,
            canPreventDefault: true
          });
          if (isFocused && !isDouble) {
            navigation.emit({
              type: "tabReselect",
              target: route.key
            });
            bump(route.key);
          }
          if (isFocused && isDouble) {
            bump(route.key);
            navigation.emit({
              type: "tabDoublePress",
              target: route.key
            });
            return;
          }
          if (!isFocused && !event.defaultPrevented) {
            navigation.navigate(route.name);
          }
        };
        var onLongPress = function onLongPress() {
          navigation.emit({
            type: "tabLongPress",
            target: route.key
          });
        };
        var badgeCount = getBadgeCount(route.name);
        var showBadge = getBadgeVisibility(route.name);
        return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          accessibilityRole: "tab",
          accessibilityState: isFocused ? {
            selected: true
          } : {},
          accessibilityLabel: options.tabBarAccessibilityLabel || `${label} tab`,
          accessibilityHint: isFocused ? `Currently selected ${label} tab` : `Navigate to ${label} tab`,
          testID: options.tabBarTestID,
          onPress: onPress,
          onLongPress: onLongPress,
          style: styles.tabButton,
          children: [(0, _jsxRuntime.jsx)(TabBarIcon, {
            routeName: route.name,
            focused: isFocused,
            color: isFocused ? colors.primary : colors.text,
            size: 24,
            badgeCount: badgeCount,
            showBadge: showBadge,
            impulse: (_impulses$route$key = impulses[route.key]) != null ? _impulses$route$key : 0
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: _reactNative.StyleSheet.flatten([styles.tabLabel, {
              color: isFocused ? colors.primary : colors.text,
              fontWeight: isFocused ? "600" : "400"
            }]),
            children: label
          })]
        }, route.key);
      })]
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  tabBar: {
    flexDirection: "row",
    height: 64,
    borderTopWidth: 0.5,
    borderTopColor: "rgba(255, 255, 255, 0.15)",
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: -8
    },
    shadowOpacity: 0.15,
    shadowRadius: 12,
    elevation: 24,
    overflow: "hidden",
    borderRadius: 16,
    marginHorizontal: 8,
    marginBottom: 6
  },
  tabButton: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 6,
    borderRadius: 12,
    marginHorizontal: 2
  },
  iconContainer: {
    position: "relative",
    alignItems: "center",
    justifyContent: "center"
  },
  ripple: {
    position: "absolute",
    width: 36,
    height: 36,
    borderRadius: 18,
    borderWidth: 2,
    borderColor: "rgba(236,72,153,0.35)"
  },
  badge: {
    position: "absolute",
    top: -6,
    right: -8,
    backgroundColor: _unifiedTheme.Theme.colors.status.error,
    borderRadius: 10,
    minWidth: 20,
    height: 20,
    alignItems: "center",
    justifyContent: "center",
    borderWidth: 2,
    borderColor: _unifiedTheme.Theme.colors.neutral[0]
  },
  badgeText: {
    color: _unifiedTheme.Theme.colors.neutral[0],
    fontSize: 10,
    fontWeight: "bold",
    textAlign: "center"
  },
  tabLabel: {
    fontSize: 12,
    marginTop: 2,
    textAlign: "center"
  },
  activePill: {
    position: "absolute",
    top: 8,
    bottom: 40,
    borderRadius: 12,
    zIndex: 0,
    backgroundColor: 'rgba(236, 72, 153, 0.12)'
  },
  activeIndicator: {
    position: "absolute",
    bottom: 8,
    height: 3,
    borderRadius: 2,
    zIndex: 1,
    backgroundColor: _unifiedTheme.Theme.colors.primary[500]
  }
});
var _default = exports.default = EnhancedTabBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,