ce720e3336ce35c37439323643b1abfb
"use strict";

_getJestObj().mock('@react-navigation/native');
_getJestObj().mock('expo-haptics');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _useTabReselectRefresh = require("../useTabReselectRefresh");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  addListener: jest.fn(function () {
    return jest.fn();
  }),
  emit: jest.fn()
};
var mockIsFocused = true;
var mockIsUnfocused = false;
describe('useTabReselectRefresh', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _native.useNavigation.mockReturnValue(mockNavigation);
    _native.useIsFocused.mockReturnValue(mockIsFocused);
  });
  describe('Basic Setup', function () {
    it('should subscribe to tabPress and tabDoublePress events', function () {
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh
        });
      });
      expect(mockNavigation.addListener).toHaveBeenCalledWith('tabPress', expect.any(Function));
      expect(mockNavigation.addListener).toHaveBeenCalledWith('tabDoublePress', expect.any(Function));
    });
    it('should cleanup subscriptions on unmount', function () {
      var unsubscribe1 = jest.fn();
      var unsubscribe2 = jest.fn();
      mockNavigation.addListener.mockReturnValueOnce(unsubscribe1).mockReturnValueOnce(unsubscribe2);
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useTabReselectRefresh.useTabReselectRefresh)({
            listRef: {
              current: {
                scrollTo: jest.fn()
              }
            },
            onRefresh: jest.fn()
          });
        }),
        unmount = _renderHook.unmount;
      unmount();
      expect(unsubscribe1).toHaveBeenCalled();
      expect(unsubscribe2).toHaveBeenCalled();
    });
  });
  describe('Single Tap Behavior (far from top)', function () {
    it('should scroll to top when scrolled far from top', function () {
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      var getOffset = jest.fn(function () {
        return 300;
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh,
          getOffset: getOffset,
          topThreshold: 120
        });
      });
      var _mockNavigation$addLi = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi[1];
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(listRef.current.scrollTo).toHaveBeenCalledWith({
        y: 0,
        animated: true
      });
      expect(onRefresh).not.toHaveBeenCalled();
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Light);
    });
    it('should scroll FlatList when using scrollToOffset', function () {
      var listRef = {
        current: {
          scrollToOffset: jest.fn()
        }
      };
      var getOffset = jest.fn(function () {
        return 300;
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: jest.fn(),
          getOffset: getOffset
        });
      });
      var _mockNavigation$addLi2 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi2[1];
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(listRef.current.scrollToOffset).toHaveBeenCalledWith({
        offset: 0,
        animated: true
      });
    });
    it('should scroll SectionList when using scrollToIndex', function () {
      var listRef = {
        current: {
          scrollToIndex: jest.fn()
        }
      };
      var getOffset = jest.fn(function () {
        return 300;
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: jest.fn(),
          getOffset: getOffset
        });
      });
      var _mockNavigation$addLi3 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi3[1];
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(listRef.current.scrollToIndex).toHaveBeenCalledWith({
        index: 0,
        animated: true
      });
    });
  });
  describe('Single Tap Behavior (near top)', function () {
    it('should refresh when scrolled near top', function () {
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      var getOffset = jest.fn(function () {
        return 50;
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh,
          getOffset: getOffset,
          topThreshold: 120
        });
      });
      var _mockNavigation$addLi4 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi4[1];
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).toHaveBeenCalled();
      expect(mockNavigation.emit).toHaveBeenCalledWith({
        type: 'tabReselect',
        target: 'Home'
      });
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Medium);
    });
    it('should not refresh when nearTopAction is "none"', function () {
      var onRefresh = jest.fn();
      var getOffset = jest.fn(function () {
        return 50;
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: {
            current: {
              scrollTo: jest.fn()
            }
          },
          onRefresh: onRefresh,
          getOffset: getOffset,
          nearTopAction: 'none'
        });
      });
      var _mockNavigation$addLi5 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi5[1];
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).not.toHaveBeenCalled();
    });
  });
  describe('Double Tap Behavior', function () {
    it('should scroll to top and refresh on double tap', function () {
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh
        });
      });
      var _mockNavigation$addLi6 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[1], 3),
        doubleTapHandler = _mockNavigation$addLi6[2];
      (0, _reactNative.act)(function () {
        doubleTapHandler({
          target: 'Home'
        });
      });
      expect(listRef.current.scrollTo).toHaveBeenCalledWith({
        y: 0,
        animated: true
      });
      expect(onRefresh).toHaveBeenCalled();
      expect(mockNavigation.emit).toHaveBeenCalledWith({
        type: 'tabDoublePulse',
        target: 'Home'
      });
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Heavy);
    });
  });
  describe('Cooldown Protection', function () {
    it('should prevent rapid triggering within cooldown period', function () {
      var onRefresh = jest.fn();
      jest.useFakeTimers();
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: {
            current: {
              scrollTo: jest.fn()
            }
          },
          onRefresh: onRefresh,
          cooldownMs: 700
        });
      });
      var _mockNavigation$addLi7 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi7[1];
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).toHaveBeenCalledTimes(1);
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).toHaveBeenCalledTimes(1);
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(701);
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).toHaveBeenCalledTimes(2);
      jest.useRealTimers();
    });
  });
  describe('Focus State', function () {
    it('should ignore tabPress when screen is not focused', function () {
      _native.useIsFocused.mockReturnValueOnce(mockIsUnfocused);
      var onRefresh = jest.fn();
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: {
            current: {
              scrollTo: jest.fn()
            }
          },
          onRefresh: onRefresh
        });
      });
      var _mockNavigation$addLi8 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi8[1];
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).not.toHaveBeenCalled();
    });
    it('should ignore tabDoublePress when screen is not focused', function () {
      _native.useIsFocused.mockReturnValueOnce(mockIsUnfocused);
      var onRefresh = jest.fn();
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: {
            current: {
              scrollTo: jest.fn()
            }
          },
          onRefresh: onRefresh
        });
      });
      var _mockNavigation$addLi9 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[1], 3),
        doubleTapHandler = _mockNavigation$addLi9[2];
      (0, _reactNative.act)(function () {
        doubleTapHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).not.toHaveBeenCalled();
    });
  });
  describe('Haptics Control', function () {
    it('should trigger haptics when enabled', function () {
      var onRefresh = jest.fn();
      var getOffset = jest.fn(function () {
        return 300;
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: {
            current: {
              scrollTo: jest.fn()
            }
          },
          onRefresh: onRefresh,
          getOffset: getOffset,
          haptics: true
        });
      });
      var _mockNavigation$addLi0 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi0[1];
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(Haptics.impactAsync).toHaveBeenCalled();
    });
    it('should not trigger haptics when disabled', function () {
      var onRefresh = jest.fn();
      var getOffset = jest.fn(function () {
        return 300;
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: {
            current: {
              scrollTo: jest.fn()
            }
          },
          onRefresh: onRefresh,
          getOffset: getOffset,
          haptics: false
        });
      });
      var _mockNavigation$addLi1 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi1[1];
      Haptics.impactAsync.mockClear();
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(Haptics.impactAsync).not.toHaveBeenCalled();
    });
  });
  describe('Edge Cases', function () {
    it('should handle missing scroll methods gracefully', function () {
      var listRef = {
        current: {}
      };
      var onRefresh = jest.fn();
      var getOffset = jest.fn(function () {
        return 300;
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh,
          getOffset: getOffset
        });
      });
      var _mockNavigation$addLi10 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi10[1];
      expect(function () {
        (0, _reactNative.act)(function () {
          tabPressHandler({
            target: 'Home'
          });
        });
      }).not.toThrow();
    });
    it('should handle null listRef gracefully', function () {
      var listRef = {
        current: null
      };
      var onRefresh = jest.fn();
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh
        });
      });
      var _mockNavigation$addLi11 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi11[1];
      expect(function () {
        (0, _reactNative.act)(function () {
          tabPressHandler({
            target: 'Home'
          });
        });
      }).not.toThrow();
    });
    it('should handle undefined getOffset', function () {
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh
        });
      });
      var _mockNavigation$addLi12 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi12[1];
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).toHaveBeenCalled();
    });
    it('should handle async onRefresh', (0, _asyncToGenerator2.default)(function* () {
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn(function () {
        return Promise.resolve();
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh,
          topThreshold: 120
        });
      });
      var _mockNavigation$addLi13 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[1], 3),
        doubleTapHandler = _mockNavigation$addLi13[2];
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield doubleTapHandler({
          target: 'Home'
        });
      }));
      expect(onRefresh).toHaveBeenCalled();
    }));
  });
  describe('Custom Thresholds', function () {
    it('should use custom topThreshold', function () {
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var onRefresh = jest.fn();
      var getOffset = jest.fn(function () {
        return 200;
      });
      (0, _reactNative.renderHook)(function () {
        return (0, _useTabReselectRefresh.useTabReselectRefresh)({
          listRef: listRef,
          onRefresh: onRefresh,
          getOffset: getOffset,
          topThreshold: 250
        });
      });
      var _mockNavigation$addLi14 = (0, _slicedToArray2.default)(mockNavigation.addListener.mock.calls[0], 2),
        tabPressHandler = _mockNavigation$addLi14[1];
      (0, _reactNative.act)(function () {
        tabPressHandler({
          target: 'Home'
        });
      });
      expect(onRefresh).toHaveBeenCalled();
      expect(listRef.current.scrollTo).not.toHaveBeenCalled();
    });
  });
  describe('Dependency Updates', function () {
    it('should re-subscribe when dependencies change', function () {
      var currentRefresh = jest.fn();
      var listRef = {
        current: {
          scrollTo: jest.fn()
        }
      };
      var _renderHook2 = (0, _reactNative.renderHook)(function (props) {
          return (0, _useTabReselectRefresh.useTabReselectRefresh)({
            listRef: props.listRef,
            onRefresh: props.onRefresh
          });
        }, {
          initialProps: {
            listRef: listRef,
            onRefresh: jest.fn()
          }
        }),
        rerender = _renderHook2.rerender;
      var initialCallCount = mockNavigation.addListener.mock.calls.length;
      currentRefresh = jest.fn();
      rerender({
        listRef: listRef,
        onRefresh: currentRefresh
      });
      expect(mockNavigation.addListener.mock.calls.length).toBeGreaterThan(initialCallCount);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,