793d869a3a59af0750ffc9fe90cd04db
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdvancedButton = void 0;
exports.AdvancedCard = AdvancedCard;
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _expoBlur = require("expo-blur");
var _core = require("@pawfectmatch/core");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getScreenDimensions = function getScreenDimensions() {
  try {
    return _reactNative.Dimensions.get("window");
  } catch (error) {
    return {
      width: 375,
      height: 812
    };
  }
};
var _getScreenDimensions = getScreenDimensions(),
  SCREEN_WIDTH = _getScreenDimensions.width,
  SCREEN_HEIGHT = _getScreenDimensions.height;
var ANIMATION_CONFIG = {
  spring: {
    tension: 300,
    friction: 10,
    useNativeDriver: true
  },
  timing: {
    duration: 200,
    useNativeDriver: true
  },
  bounce: {
    tension: 400,
    friction: 3,
    useNativeDriver: true
  },
  elastic: {
    tension: 200,
    friction: 4,
    useNativeDriver: true
  }
};
var HAPTIC_PATTERNS = {
  light: Haptics.ImpactFeedbackStyle.Light,
  medium: Haptics.ImpactFeedbackStyle.Medium,
  heavy: Haptics.ImpactFeedbackStyle.Heavy,
  selection: 0,
  notification: Haptics.NotificationFeedbackType.Success
};
function AdvancedButtonComponent(_ref) {
  var title = _ref.title,
    icon = _ref.icon,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "primary" : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? "md" : _ref$size,
    _ref$interactions = _ref.interactions,
    interactions = _ref$interactions === void 0 ? ["hover", "press"] : _ref$interactions,
    _ref$haptic = _ref.haptic,
    haptic = _ref$haptic === void 0 ? "medium" : _ref$haptic,
    onPress = _ref.onPress,
    onLongPress = _ref.onLongPress,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    style = _ref.style,
    textStyle = _ref.textStyle,
    children = _ref.children,
    apiAction = _ref.apiAction,
    _ref$glowColor = _ref.glowColor,
    glowColor = _ref$glowColor === void 0 ? "Theme.colors.primary[500]" : _ref$glowColor,
    _ref$gradientColors = _ref.gradientColors,
    gradientColors = _ref$gradientColors === void 0 ? ["Theme.colors.primary[500]", "Theme.colors.primary[600]"] : _ref$gradientColors,
    _ref$blurIntensity = _ref.blurIntensity,
    blurIntensity = _ref$blurIntensity === void 0 ? 20 : _ref$blurIntensity;
  var scale = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var opacity = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var rotation = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var glow = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var elevation = (0, _react.useRef)(new _reactNative.Animated.Value(4)).current;
  var tiltX = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var tiltY = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isPressed = _useState2[0],
    setIsPressed = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isHovered = _useState4[0],
    setIsHovered = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isAccessibilityEnabled = _useState8[0],
    setIsAccessibilityEnabled = _useState8[1];
  (0, _react.useEffect)(function () {
    _reactNative.AccessibilityInfo.isReduceMotionEnabled().then(setIsAccessibilityEnabled);
  }, []);
  var triggerHaptic = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : haptic;
    if (disabled || isAccessibilityEnabled) return;
    try {
      switch (type) {
        case "light":
        case "medium":
        case "heavy":
          yield Haptics.impactAsync(HAPTIC_PATTERNS[type]);
          break;
        case "selection":
          yield Haptics.selectionAsync();
          break;
        case "notification":
          yield Haptics.notificationAsync(HAPTIC_PATTERNS[type]);
          break;
      }
    } catch (error) {
      _core.logger.debug("Haptic feedback not available");
    }
  }), [disabled, isAccessibilityEnabled, haptic]);
  var animatePress = (0, _react.useCallback)(function (pressed) {
    if (disabled || loading || isLoading) return;
    setIsPressed(pressed);
    var animations = [];
    if (interactions.includes("press")) {
      animations.push(_reactNative.Animated.spring(scale, _objectSpread({
        toValue: pressed ? 0.95 : 1
      }, ANIMATION_CONFIG.spring)));
    }
    if (interactions.includes("glow")) {
      animations.push(_reactNative.Animated.timing(glow, {
        toValue: pressed ? 1 : 0,
        duration: 200,
        useNativeDriver: false
      }));
    }
    if (interactions.includes("bounce")) {
      animations.push(_reactNative.Animated.spring(elevation, _objectSpread({
        toValue: pressed ? 12 : 4
      }, ANIMATION_CONFIG.bounce)));
    }
    if (animations.length > 0) {
      _reactNative.Animated.parallel(animations).start();
    }
    if (pressed) {
      triggerHaptic("light");
    }
  }, [disabled, loading, isLoading, interactions, scale, glow, elevation, triggerHaptic]);
  var animateHover = (0, _react.useCallback)(function (hovered) {
    if (disabled || loading || isLoading) return;
    setIsHovered(hovered);
    var animations = [];
    if (interactions.includes("hover")) {
      animations.push(_reactNative.Animated.spring(scale, _objectSpread({
        toValue: hovered ? 1.05 : 1
      }, ANIMATION_CONFIG.spring)));
    }
    if (interactions.includes("glow")) {
      animations.push(_reactNative.Animated.timing(glow, {
        toValue: hovered ? 0.5 : 0,
        duration: 300,
        useNativeDriver: false
      }));
    }
    if (animations.length > 0) {
      _reactNative.Animated.parallel(animations).start();
    }
  }, [disabled, loading, isLoading, interactions, scale, glow]);
  var panResponder = (0, _react.useRef)(_reactNative.PanResponder.create({
    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
      return interactions.includes("tilt") && !disabled;
    },
    onPanResponderGrant: function onPanResponderGrant() {
      triggerHaptic("light");
    },
    onPanResponderMove: function onPanResponderMove(evt, gestureState) {
      if (!interactions.includes("tilt")) return;
      var dx = gestureState.dx,
        dy = gestureState.dy;
      var maxTilt = 10;
      var tiltXValue = Math.max(-maxTilt, Math.min(maxTilt, dy / 100 * maxTilt));
      var tiltYValue = Math.max(-maxTilt, Math.min(maxTilt, -(dx / 100) * maxTilt));
      tiltX.setValue(tiltXValue);
      tiltY.setValue(tiltYValue);
    },
    onPanResponderRelease: function onPanResponderRelease() {
      if (!interactions.includes("tilt")) return;
      _reactNative.Animated.parallel([_reactNative.Animated.spring(tiltX, _objectSpread({
        toValue: 0
      }, ANIMATION_CONFIG.spring)), _reactNative.Animated.spring(tiltY, _objectSpread({
        toValue: 0
      }, ANIMATION_CONFIG.spring))]).start();
    }
  })).current;
  var handlePress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (disabled || loading || isLoading) return;
    setIsLoading(true);
    triggerHaptic("medium");
    try {
      if (apiAction) {
        yield apiAction();
      }
      if (onPress) {
        yield onPress();
      }
    } catch (error) {
      _core.logger.error("Button action failed:", {
        error: error
      });
      triggerHaptic("notification");
    } finally {
      setIsLoading(false);
    }
  }), [disabled, loading, isLoading, apiAction, onPress, triggerHaptic]);
  var handleLongPress = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (disabled || loading || isLoading) return;
    triggerHaptic("heavy");
    if (onLongPress) {
      yield onLongPress();
    }
  }), [disabled, loading, isLoading, onLongPress, triggerHaptic]);
  var getVariantStyles = (0, _react.useCallback)(function () {
    var baseStyles = {
      borderRadius: 12,
      overflow: "hidden"
    };
    switch (variant) {
      case "glass":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: "rgba(255, 255, 255, 0.1)",
          borderWidth: 1,
          borderColor: "rgba(255, 255, 255, 0.2)"
        });
      case "neon":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: "transparent",
          borderWidth: 2,
          borderColor: glowColor
        });
      case "holographic":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: "transparent"
        });
      case "gradient":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: "transparent"
        });
      case "minimal":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: "transparent",
          borderWidth: 1,
          borderColor: "Theme.colors.neutral[200]"
        });
      case "premium":
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: "rgba(139, 92, 246, 0.1)",
          borderWidth: 1,
          borderColor: "rgba(139, 92, 246, 0.3)"
        });
      default:
        return _objectSpread(_objectSpread({}, baseStyles), {}, {
          backgroundColor: "Theme.colors.primary[500]"
        });
    }
  }, [variant, glowColor]);
  var getSizeStyles = (0, _react.useCallback)(function () {
    switch (size) {
      case "xs":
        return {
          paddingHorizontal: 8,
          paddingVertical: 4,
          minHeight: 28
        };
      case "sm":
        return {
          paddingHorizontal: 12,
          paddingVertical: 6,
          minHeight: 36
        };
      case "md":
        return {
          paddingHorizontal: 16,
          paddingVertical: 8,
          minHeight: 44
        };
      case "lg":
        return {
          paddingHorizontal: 20,
          paddingVertical: 12,
          minHeight: 52
        };
      case "xl":
        return {
          paddingHorizontal: 24,
          paddingVertical: 16,
          minHeight: 60
        };
      default:
        return {
          paddingHorizontal: 16,
          paddingVertical: 8,
          minHeight: 44
        };
    }
  }, [size]);
  var renderContent = function renderContent() {
    if (children) return children;
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.contentContainer,
      children: [icon && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _reactNative.StyleSheet.flatten([styles.icon, textStyle, {
          fontSize: getSizeStyles().minHeight * 0.4
        }]),
        children: icon
      }), title && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _reactNative.StyleSheet.flatten([styles.title, textStyle, {
          fontSize: getSizeStyles().minHeight * 0.35
        }]),
        children: title
      })]
    });
  };
  var renderButton = function renderButton() {
    var buttonStyle = [getVariantStyles(), getSizeStyles(), style, {
      transform: [{
        scale: scale
      }, {
        rotateX: tiltX.interpolate({
          inputRange: [-10, 10],
          outputRange: ["-10deg", "10deg"]
        })
      }, {
        rotateY: tiltY.interpolate({
          inputRange: [-10, 10],
          outputRange: ["-10deg", "10deg"]
        })
      }],
      opacity: disabled ? 0.6 : opacity,
      elevation: elevation,
      shadowColor: glowColor,
      shadowOffset: {
        width: 0,
        height: 4
      },
      shadowOpacity: glow.interpolate({
        inputRange: [0, 1],
        outputRange: [0.1, 0.3]
      }),
      shadowRadius: glow.interpolate({
        inputRange: [0, 1],
        outputRange: [4, 12]
      })
    }];
    var content = (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      style: buttonStyle,
      children: [interactions.includes("glow") && (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: _reactNative.StyleSheet.flatten([_reactNative.StyleSheet.absoluteFillObject, {
          backgroundColor: glowColor,
          opacity: glow.interpolate({
            inputRange: [0, 1],
            outputRange: [0, 0.2]
          }),
          borderRadius: getVariantStyles().borderRadius
        }]),
        pointerEvents: "none"
      }), variant === "gradient" && (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
        colors: gradientColors,
        style: _reactNative.StyleSheet.absoluteFillObject,
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        }
      }), variant === "holographic" && (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
        colors: ["rgba(255,255,255,0.1)", "rgba(255,255,255,0.05)", "rgba(255,255,255,0.1)"],
        style: _reactNative.StyleSheet.absoluteFillObject,
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        }
      }), (variant === "glass" || variant === "premium") && (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
        intensity: blurIntensity,
        style: _reactNative.StyleSheet.absoluteFillObject
      }), renderContent(), (loading || isLoading) && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingOverlay,
        children: (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: _reactNative.StyleSheet.flatten([styles.loadingSpinner, {
            transform: [{
              rotate: rotation.interpolate({
                inputRange: [0, 1],
                outputRange: ["0deg", "360deg"]
              })
            }]
          }])
        })
      })]
    });
    return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, _objectSpread(_objectSpread({
      onPress: handlePress,
      onLongPress: handleLongPress,
      onPressIn: function onPressIn() {
        animatePress(true);
      },
      onPressOut: function onPressOut() {
        animatePress(false);
      },
      disabled: disabled || loading || isLoading,
      activeOpacity: 0.9
    }, interactions.includes("tilt") ? panResponder.panHandlers : {}), {}, {
      accessible: true,
      accessibilityRole: "button",
      accessibilityLabel: title,
      accessibilityHint: disabled ? "Button is disabled" : "Double tap to activate",
      children: content
    }));
  };
  (0, _react.useEffect)(function () {
    if (loading || isLoading) {
      var rotationAnimation = _reactNative.Animated.loop(_reactNative.Animated.timing(rotation, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true
      }));
      rotationAnimation.start();
      return function () {
        rotationAnimation.stop();
      };
    }
  }, [loading, isLoading, rotation]);
  return renderButton();
}
var AdvancedButton = exports.AdvancedButton = AdvancedButtonComponent;
function AdvancedCard(_ref5) {
  var children = _ref5.children,
    _ref5$variant = _ref5.variant,
    variant = _ref5$variant === void 0 ? "primary" : _ref5$variant,
    _ref5$interactions = _ref5.interactions,
    interactions = _ref5$interactions === void 0 ? ["hover", "press"] : _ref5$interactions,
    _ref5$haptic = _ref5.haptic,
    haptic = _ref5$haptic === void 0 ? "light" : _ref5$haptic,
    onPress = _ref5.onPress,
    _ref5$disabled = _ref5.disabled,
    disabled = _ref5$disabled === void 0 ? false : _ref5$disabled,
    style = _ref5.style,
    _ref5$glowColor = _ref5.glowColor,
    glowColor = _ref5$glowColor === void 0 ? "Theme.colors.primary[500]" : _ref5$glowColor,
    _ref5$gradientColors = _ref5.gradientColors,
    gradientColors = _ref5$gradientColors === void 0 ? ["Theme.colors.primary[500]", "Theme.colors.primary[600]"] : _ref5$gradientColors,
    _ref5$blurIntensity = _ref5.blurIntensity,
    blurIntensity = _ref5$blurIntensity === void 0 ? 20 : _ref5$blurIntensity,
    _ref5$padding = _ref5.padding,
    padding = _ref5$padding === void 0 ? "md" : _ref5$padding;
  return (0, _jsxRuntime.jsx)(AdvancedButton, {
    variant: variant,
    interactions: interactions,
    haptic: haptic,
    onPress: onPress,
    disabled: disabled,
    style: style,
    glowColor: glowColor,
    gradientColors: gradientColors,
    blurIntensity: blurIntensity,
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.cardContent, {
        padding: getPaddingValue(padding)
      }]),
      children: children
    })
  });
}
var getPaddingValue = function getPaddingValue(size) {
  switch (size) {
    case "xs":
      return 4;
    case "sm":
      return 8;
    case "md":
      return 16;
    case "lg":
      return 24;
    case "xl":
      return 32;
    default:
      return 16;
  }
};
var styles = _reactNative.StyleSheet.create({
  contentContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center"
  },
  icon: {
    marginRight: 8,
    color: "Theme.colors.neutral[0]"
  },
  title: {
    color: "Theme.colors.neutral[0]",
    fontWeight: "600",
    textAlign: "center"
  },
  loadingOverlay: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {
    backgroundColor: "rgba(0, 0, 0, 0.1)",
    justifyContent: "center",
    alignItems: "center"
  }),
  loadingSpinner: {
    width: 20,
    height: 20,
    borderWidth: 2,
    borderColor: "Theme.colors.neutral[0]",
    borderTopColor: "transparent",
    borderRadius: 10
  },
  cardContent: {
    flex: 1
  }
});
var _default = exports.default = AdvancedButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,