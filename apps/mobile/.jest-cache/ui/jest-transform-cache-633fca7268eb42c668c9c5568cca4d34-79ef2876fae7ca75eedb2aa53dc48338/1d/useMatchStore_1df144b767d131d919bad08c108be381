18871390784415eaa876c9ac27377abe
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMatchStore = void 0;
var zustand_1 = require("zustand");
var immer_1 = require("zustand/middleware/immer");
exports.useMatchStore = (0, zustand_1.create)()((0, immer_1.immer)(function (set) {
  return {
    currentPet: null,
    swipePets: [],
    matches: [],
    activeMatchId: null,
    paginationInfo: {
      page: 1,
      hasMore: true,
      isLoading: false
    },
    swipeHistory: {
      likes: [],
      passes: [],
      superlikes: []
    },
    setCurrentPet: function setCurrentPet(petId) {
      set(function (state) {
        return _objectSpread(_objectSpread({}, state), {}, {
          currentPet: petId
        });
      });
    },
    setSwipePets: function setSwipePets(pets) {
      set(function (state) {
        state.swipePets = pets;
      });
    },
    addSwipePets: function addSwipePets(pets) {
      set(function (state) {
        state.swipePets = [].concat((0, _toConsumableArray2.default)(state.swipePets), (0, _toConsumableArray2.default)(pets));
      });
    },
    setMatches: function setMatches(matches) {
      set(function (state) {
        state.matches = matches;
      });
    },
    addMatch: function addMatch(match) {
      set(function (state) {
        state.matches.unshift(match);
      });
    },
    updateMatch: function updateMatch(matchId, data) {
      set(function (state) {
        var index = state.matches.findIndex(function (match) {
          return match._id === matchId;
        });
        if (index !== -1) {
          var existing = state.matches[index];
          if (existing !== undefined) {
            Object.assign(existing, data);
          }
        }
      });
    },
    removeMatch: function removeMatch(matchId) {
      set(function (state) {
        state.matches = state.matches.filter(function (match) {
          return match._id !== matchId;
        });
      });
    },
    setActiveMatchId: function setActiveMatchId(matchId) {
      set(function (state) {
        state.activeMatchId = matchId;
      });
    },
    setPaginationInfo: function setPaginationInfo(info) {
      set(function (state) {
        state.paginationInfo = _objectSpread(_objectSpread({}, state.paginationInfo), info);
      });
    },
    addToSwipeHistory: function addToSwipeHistory(petId, action) {
      set(function (state) {
        if (action === 'like') {
          state.swipeHistory.likes.push(petId);
        } else if (action === 'pass') {
          state.swipeHistory.passes.push(petId);
        } else {
          state.swipeHistory.superlikes.push(petId);
        }
      });
    },
    clearSwipeHistory: function clearSwipeHistory() {
      set(function (state) {
        state.swipeHistory = {
          likes: [],
          passes: [],
          superlikes: []
        };
      });
    }
  };
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,