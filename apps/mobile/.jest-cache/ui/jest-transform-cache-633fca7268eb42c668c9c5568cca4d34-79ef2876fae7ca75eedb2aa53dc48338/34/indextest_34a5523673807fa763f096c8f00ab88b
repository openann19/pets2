b6b8a4dcf4d17a308b1697dbd3592598
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _AdvancedPhotoEditor = require("../AdvancedPhotoEditor");
var _PhotoAdjustmentSlider = require("../PhotoAdjustmentSlider");
var _usePhotoEditor = require("../../../hooks/usePhotoEditor");
var _jsxRuntime = require("react/jsx-runtime");
describe('Photo Editing Components Integration', function () {
  describe('Component Exports', function () {
    it('should export AdvancedPhotoEditor', function () {
      expect(_AdvancedPhotoEditor.AdvancedPhotoEditor).toBeDefined();
    });
    it('should export PhotoAdjustmentSlider', function () {
      expect(_PhotoAdjustmentSlider.PhotoAdjustmentSlider).toBeDefined();
    });
    it('should export usePhotoEditor hook', function () {
      expect(_usePhotoEditor.usePhotoEditor).toBeDefined();
    });
  });
  describe('Component Interaction', function () {
    it('should integrate slider with editor', function () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
          imageUri: "file://test.jpg",
          onSave: jest.fn(),
          onCancel: jest.fn()
        })),
        getByText = _render.getByText;
      expect(getByText('Adjust')).toBeTruthy();
    });
    it('should allow slider value to update editor', function () {
      var mockOnValueChange = jest.fn();
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
          label: "Brightness",
          value: 100,
          min: 0,
          max: 200,
          icon: "sunny",
          onValueChange: mockOnValueChange
        })),
        container = _render2.container;
      expect(container).toBeTruthy();
    });
  });
});
describe('Photo Editing Workflow', function () {
  it('should complete full editing workflow', (0, _asyncToGenerator2.default)(function* () {
    var mockOnSave = jest.fn();
    var mockOnCancel = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
        imageUri: "file://test.jpg",
        onSave: mockOnSave,
        onCancel: mockOnCancel
      })),
      getByText = _render3.getByText;
    var adjustTab = getByText('Adjust');
    _reactNative.fireEvent.press(adjustTab);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Rotate L')).toBeTruthy();
    });
    var resetButton = getByText('Reset All');
    _reactNative.fireEvent.press(resetButton);
    var saveButton = getByText('Save');
    yield (0, _reactNative.waitFor)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(saveButton);
    }));
    expect(mockOnSave).toHaveBeenCalled();
  }));
  it('should allow filter application', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPhotoEditor.AdvancedPhotoEditor, {
        imageUri: "file://test.jpg",
        onSave: jest.fn(),
        onCancel: jest.fn()
      })),
      getByText = _render4.getByText;
    var filtersTab = getByText('Filters');
    _reactNative.fireEvent.press(filtersTab);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Vivid')).toBeTruthy();
    });
    var vividFilter = getByText('Vivid');
    _reactNative.fireEvent.press(vividFilter);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('Adjust')).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,