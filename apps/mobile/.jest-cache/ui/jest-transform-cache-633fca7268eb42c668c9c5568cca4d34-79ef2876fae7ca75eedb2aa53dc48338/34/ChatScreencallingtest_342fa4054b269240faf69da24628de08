32b5451c0604cf0f4070d6e141105a32
"use strict";

_getJestObj().mock("../../components/calling/CallManager");
_getJestObj().mock("@pawfectmatch/core");
_getJestObj().mock("../../services/api", function () {
  return {
    chatAPI: {
      getMessages: jest.fn(),
      sendMessage: jest.fn(),
      markAsRead: jest.fn()
    }
  };
});
_getJestObj().mock("react-native", function () {
  return {
    Alert: {
      alert: jest.fn()
    },
    View: "View",
    Text: "Text",
    TouchableOpacity: "TouchableOpacity",
    ScrollView: "ScrollView",
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _core = require("@pawfectmatch/core");
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("react-native");
var _CallManager = require("../../components/calling/CallManager");
var _ChatScreen = _interopRequireDefault(require("../ChatScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseCallManager = _CallManager.useCallManager;
var mockUseAuthStore = _core.useAuthStore;
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var mockRoute = {
  params: {
    matchId: "test-match-id",
    petName: "Test Pet"
  }
};
describe("ChatScreen - Calling Features", function () {
  var mockStartCall = jest.fn();
  var mockIsCallActive = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    mockUseCallManager.mockReturnValue({
      startCall: mockStartCall,
      endCall: jest.fn(),
      isCallActive: mockIsCallActive,
      getCallState: jest.fn()
    });
    mockUseAuthStore.mockReturnValue({
      user: {
        id: "test-user-id",
        firstName: "Test",
        lastName: "User"
      }
    });
    mockIsCallActive.mockReturnValue(false);
  });
  it("should render call buttons in header", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId("voice-call-button")).toBeTruthy();
    expect(getByTestId("video-call-button")).toBeTruthy();
  });
  it("should start voice call when voice button is pressed", (0, _asyncToGenerator2.default)(function* () {
    mockStartCall.mockResolvedValue(true);
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByTestId = _render2.getByTestId;
    var voiceButton = getByTestId("voice-call-button");
    _reactNative.fireEvent.press(voiceButton);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Voice Call", "Start a voice call with Test Pet?", expect.arrayContaining([expect.objectContaining({
      text: "Cancel"
    }), expect.objectContaining({
      text: "Call"
    })]));
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmButton = alertCall[2].find(function (button) {
      return button.text === "Call";
    });
    yield confirmButton.onPress();
    expect(mockStartCall).toHaveBeenCalledWith("test-match-id", "voice");
  }));
  it("should start video call when video button is pressed", (0, _asyncToGenerator2.default)(function* () {
    mockStartCall.mockResolvedValue(true);
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByTestId = _render3.getByTestId;
    var videoButton = getByTestId("video-call-button");
    _reactNative.fireEvent.press(videoButton);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Video Call", "Start a video call with Test Pet?", expect.arrayContaining([expect.objectContaining({
      text: "Cancel"
    }), expect.objectContaining({
      text: "Call"
    })]));
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmButton = alertCall[2].find(function (button) {
      return button.text === "Call";
    });
    yield confirmButton.onPress();
    expect(mockStartCall).toHaveBeenCalledWith("test-match-id", "video");
  }));
  it("should show error when call fails to start", (0, _asyncToGenerator2.default)(function* () {
    mockStartCall.mockResolvedValue(false);
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByTestId = _render4.getByTestId;
    var voiceButton = getByTestId("voice-call-button");
    _reactNative.fireEvent.press(voiceButton);
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmButton = alertCall[2].find(function (button) {
      return button.text === "Call";
    });
    yield confirmButton.onPress();
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Error", "Failed to start call. Please check your permissions and try again.");
  }));
  it("should prevent starting call when another call is active", function () {
    mockIsCallActive.mockReturnValue(true);
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByTestId = _render5.getByTestId;
    var voiceButton = getByTestId("voice-call-button");
    _reactNative.fireEvent.press(voiceButton);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Call in Progress", "You already have an active call.");
    expect(mockStartCall).not.toHaveBeenCalled();
  });
  it("should handle call button press with haptic feedback", function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByTestId = _render6.getByTestId;
    var voiceButton = getByTestId("voice-call-button");
    _reactNative.fireEvent.press(voiceButton);
    expect(_reactNative2.Alert.alert).toHaveBeenCalled();
  });
  it("should cancel call when user presses cancel", function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByTestId = _render7.getByTestId;
    var voiceButton = getByTestId("voice-call-button");
    _reactNative.fireEvent.press(voiceButton);
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var cancelButton = alertCall[2].find(function (button) {
      return button.text === "Cancel";
    });
    if (cancelButton.onPress) {
      cancelButton.onPress();
    }
    expect(mockStartCall).not.toHaveBeenCalled();
  });
  it("should show correct call button icons", function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByTestId = _render8.getByTestId;
    var voiceButton = getByTestId("voice-call-button");
    var videoButton = getByTestId("video-call-button");
    expect(voiceButton).toBeTruthy();
    expect(videoButton).toBeTruthy();
  });
  it("should apply correct styling to call buttons", function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByTestId = _render9.getByTestId;
    var voiceButton = getByTestId("voice-call-button");
    var videoButton = getByTestId("video-call-button");
    expect(voiceButton).toHaveStyle({
      width: 36,
      height: 36,
      borderRadius: 18
    });
    expect(videoButton).toHaveStyle({
      width: 36,
      height: 36,
      borderRadius: 18
    });
  });
  it("should handle call manager hook errors gracefully", function () {
    mockUseCallManager.mockImplementation(function () {
      throw new Error("Call manager error");
    });
    expect(function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      }));
    }).not.toThrow();
  });
  it("should show different confirmation messages for voice and video calls", function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByTestId = _render0.getByTestId;
    var voiceButton = getByTestId("voice-call-button");
    _reactNative.fireEvent.press(voiceButton);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Voice Call", "Start a voice call with Test Pet?", expect.any(Array));
    jest.clearAllMocks();
    var videoButton = getByTestId("video-call-button");
    _reactNative.fireEvent.press(videoButton);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Video Call", "Start a video call with Test Pet?", expect.any(Array));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,