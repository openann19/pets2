56bcce3084d9ed0a724cce1fd4b9e1d6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EliteHeader = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _vectorIcons = require("@expo/vector-icons");
var _expoBlur = require("expo-blur");
var _reactNativeReanimated = require("react-native-reanimated");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _animation = require("../../../animation");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var styles = _reactNative.StyleSheet.create({
  backButton: _objectSpread({
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: _animation.Colors.glassWhite,
    justifyContent: "center",
    alignItems: "center",
    marginRight: _animation.Spacing.md
  }, _animation.Shadows.sm),
  headerContainer: _objectSpread({
    backgroundColor: _animation.Colors.white
  }, _animation.Shadows.sm),
  headerTitleContainer: {
    flex: 1,
    alignItems: "center"
  },
  headerRight: {
    width: 40,
    alignItems: "flex-end"
  }
});
var EliteHeader = exports.EliteHeader = function EliteHeader(_ref) {
  var title = _ref.title,
    subtitle = _ref.subtitle,
    _ref$showLogo = _ref.showLogo,
    _showLogo = _ref$showLogo === void 0 ? false : _ref$showLogo,
    onBack = _ref.onBack,
    rightComponent = _ref.rightComponent,
    _ref$blur = _ref.blur,
    blur = _ref$blur === void 0 ? true : _ref$blur;
  var triggerHaptic = function triggerHaptic() {
    void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
  };
  var handleBackPress = function handleBackPress() {
    (0, _reactNativeReanimated.runOnJS)(triggerHaptic)();
    onBack == null ? void 0 : onBack();
  };
  var HeaderContent = (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: _animation.GlobalStyles.headerContent,
    children: [onBack && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: handleBackPress,
      style: styles.backButton,
      hitSlop: {
        top: 10,
        bottom: 10,
        left: 10,
        right: 10
      },
      children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
        name: "arrow-back",
        size: 24,
        color: _animation.Colors.gray800
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.headerTitleContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _animation.GlobalStyles.heading2,
        children: title
      }), subtitle != null && subtitle.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _animation.GlobalStyles.bodySmall,
        children: subtitle
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.headerRight,
      children: rightComponent
    })]
  });
  if (blur) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _animation.GlobalStyles.headerBlur,
      children: (0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
        intensity: 95,
        style: {
          flex: 1
        },
        children: HeaderContent
      })
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.headerContainer,
    children: HeaderContent
  });
};
var _default = exports.default = EliteHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,