fd9e4301f7548fb8fc933734c72db106
"use strict";

_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    useAuthStore: jest.fn()
  };
});
_getJestObj().mock("../../services/logger", function () {
  return {
    logger: {
      error: jest.fn(),
      warn: jest.fn(),
      info: jest.fn(),
      debug: jest.fn()
    }
  };
});
_getJestObj().mock("../../services/api", function () {
  return {
    api: {
      ai: {
        analyzeCompatibility: function analyzeCompatibility() {
          return mockAnalyzeCompatibility();
        }
      }
    },
    matchesAPI: {
      getPets: function getPets() {
        return mockGetPets();
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _core = require("@pawfectmatch/core");
var _AICompatibilityScreen = _interopRequireDefault(require("../AICompatibilityScreen"));
var _api = require("../../services/api");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGetPets = jest.fn();
var mockAnalyzeCompatibility = jest.fn();
var mockNavigation = {
  goBack: jest.fn(),
  navigate: jest.fn()
};
var mockUser = {
  _id: "user123",
  name: "Test User",
  email: "test@example.com"
};
var mockPets = [{
  _id: "1",
  name: "Buddy",
  photos: ["https://example.com/buddy.jpg"],
  breed: "Golden Retriever",
  age: 3,
  species: "dog",
  owner: {
    _id: "user123",
    name: "Test User"
  }
}, {
  _id: "2",
  name: "Luna",
  photos: ["https://example.com/luna.jpg"],
  breed: "Labrador",
  age: 2,
  species: "dog",
  owner: {
    _id: "user456",
    name: "Sarah"
  }
}, {
  _id: "3",
  name: "Max",
  photos: ["https://example.com/max.jpg"],
  breed: "German Shepherd",
  age: 4,
  species: "dog",
  owner: {
    _id: "user789",
    name: "Mike"
  }
}];
var mockMatchesAPI = _api.matchesAPI;
var mockApi = _api.api;
describe("AICompatibilityScreen", function () {
  beforeEach(function () {
    mockGetPets.mockClear();
    mockAnalyzeCompatibility.mockClear();
    _core.useAuthStore.mockReturnValue({
      user: mockUser
    });
    mockGetPets.mockResolvedValue(mockPets);
    mockAnalyzeCompatibility.mockResolvedValue({});
  });
  var renderComponent = function renderComponent(routeParams) {
    var mockRoute = {
      params: routeParams
    };
    return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AICompatibilityScreen.default, {
      navigation: mockNavigation,
      route: mockRoute
    }));
  };
  describe("Rendering", function () {
    it("renders correctly with initial state", function () {
      var _renderComponent = renderComponent(),
        getByText = _renderComponent.getByText,
        getByTestId = _renderComponent.getByTestId;
      expect(getByText("AI Compatibility")).toBeTruthy();
      expect(getByText("üêï Select Two Pets")).toBeTruthy();
      expect(getByText("Pet 1")).toBeTruthy();
      expect(getByText("Pet 2")).toBeTruthy();
      expect(getByText("VS")).toBeTruthy();
      expect(getByText("Available Pets")).toBeTruthy();
      expect(getByTestId("back-button")).toBeTruthy();
    });
    it("shows loading state initially", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent2 = renderComponent(),
        getByText = _renderComponent2.getByText,
        queryByText = _renderComponent2.queryByText;
      expect(getByText("Loading pets...")).toBeTruthy();
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      expect(queryByText("Loading pets...")).toBeNull();
    }));
    it("displays available pets after loading", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent3 = renderComponent(),
        getByText = _renderComponent3.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      expect(getByText("Luna")).toBeTruthy();
      expect(getByText("Max")).toBeTruthy();
    }));
  });
  describe("Pet Selection", function () {
    it("allows selecting first pet", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent4 = renderComponent(),
        getByText = _renderComponent4.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
        expect(getByText("Golden Retriever")).toBeTruthy();
      });
    }));
    it("allows selecting second pet after first is selected", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent5 = renderComponent(),
        getByText = _renderComponent5.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Analyze Compatibility")).toBeTruthy();
      });
    }));
    it("prevents selecting same pet twice", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent6 = renderComponent(),
        getByText = _renderComponent6.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Analyze Compatibility")).toBeTruthy();
      });
    }));
    it("prevents selecting pets from same owner", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent7 = renderComponent(),
        getByText = _renderComponent7.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Labrador")).toBeTruthy();
        expect(getByText("German Shepherd")).toBeTruthy();
      });
    }));
    it("allows deselecting pets", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent8 = renderComponent(),
        getByText = _renderComponent8.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Analyze Compatibility")).toBeTruthy();
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Select Pet 1")).toBeTruthy();
      });
    }));
  });
  describe("Compatibility Analysis", function () {
    it("shows error when trying to analyze without selecting both pets", (0, _asyncToGenerator2.default)(function* () {
      var _renderComponent9 = renderComponent(),
        getByText = _renderComponent9.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      var analyzeButton = getByText("Analyze Compatibility");
      _reactNative.fireEvent.press(analyzeButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Selection Required", "Please select two pets to analyze compatibility.");
      });
    }));
    it("calls API with correct parameters when analyzing compatibility", (0, _asyncToGenerator2.default)(function* () {
      var mockAnalyzeCompatibility = jest.fn().mockResolvedValue({
        compatibility_score: 0.85,
        ai_analysis: "These pets show excellent compatibility potential.",
        breakdown: {
          personality_compatibility: 0.9,
          lifestyle_compatibility: 0.8,
          activity_compatibility: 0.85,
          social_compatibility: 0.9,
          environment_compatibility: 0.8
        },
        recommendations: {
          meeting_suggestions: ["Neutral territory", "Supervised introduction"],
          activity_recommendations: ["Play fetch together", "Go for walks"],
          supervision_requirements: ["Initial supervision recommended"],
          success_probability: 0.9
        }
      });
      _api.api.ai.analyzeCompatibility.mockImplementation(mockAnalyzeCompatibility);
      var _renderComponent0 = renderComponent(),
        getByText = _renderComponent0.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Compatibility"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAnalyzeCompatibility).toHaveBeenCalledWith({
          pet1Id: "1",
          pet2Id: "2"
        });
      });
    }));
    it("displays compatibility results when API call succeeds", (0, _asyncToGenerator2.default)(function* () {
      var mockCompatibilityResult = {
        compatibility_score: 0.85,
        ai_analysis: "These pets show excellent compatibility potential.",
        breakdown: {
          personality_compatibility: 0.9,
          lifestyle_compatibility: 0.8,
          activity_compatibility: 0.85,
          social_compatibility: 0.9,
          environment_compatibility: 0.8
        },
        recommendations: {
          meeting_suggestions: ["Neutral territory", "Supervised introduction"],
          activity_recommendations: ["Play fetch together", "Go for walks"],
          supervision_requirements: ["Initial supervision recommended"],
          success_probability: 0.9
        }
      };
      _api.api.ai.analyzeCompatibility.mockResolvedValue(mockCompatibilityResult);
      var _renderComponent1 = renderComponent(),
        getByText = _renderComponent1.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Compatibility"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("üéØ Compatibility Results")).toBeTruthy();
        expect(getByText("85/100")).toBeTruthy();
        expect(getByText("Very Good Match")).toBeTruthy();
        expect(getByText("These pets show excellent compatibility potential.")).toBeTruthy();
      }, {
        timeout: 10000
      });
    }));
    it("shows loading state during analysis", (0, _asyncToGenerator2.default)(function* () {
      var resolvePromise;
      var promise = new Promise(function (resolve) {
        resolvePromise = resolve;
      });
      _api.api.ai.analyzeCompatibility.mockReturnValue(promise);
      var _renderComponent10 = renderComponent(),
        getByText = _renderComponent10.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Compatibility"));
      }));
      expect(getByText("Analyzing...")).toBeTruthy();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        resolvePromise({
          compatibility_score: 0.8,
          ai_analysis: "Test analysis",
          breakdown: {
            personality_compatibility: 0.8,
            lifestyle_compatibility: 0.8,
            activity_compatibility: 0.8,
            social_compatibility: 0.8,
            environment_compatibility: 0.8
          },
          recommendations: {
            meeting_suggestions: [],
            activity_recommendations: [],
            supervision_requirements: [],
            success_probability: 0.8
          }
        });
      }));
    }));
    it("shows error message when API call fails", (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error("Analysis failed");
      _api.api.ai.analyzeCompatibility.mockRejectedValue(mockError);
      var _renderComponent11 = renderComponent(),
        getByText = _renderComponent11.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Compatibility"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Analysis failed")).toBeTruthy();
      });
    }));
  });
  describe("Results Display", function () {
    it("shows compatibility score with correct color coding for high score", (0, _asyncToGenerator2.default)(function* () {
      var mockCompatibilityResult = {
        compatibility_score: 0.95,
        ai_analysis: "Excellent compatibility",
        breakdown: {
          personality_compatibility: 0.9,
          lifestyle_compatibility: 0.8,
          activity_compatibility: 0.85,
          social_compatibility: 0.9,
          environment_compatibility: 0.8
        },
        recommendations: {
          meeting_suggestions: [],
          activity_recommendations: [],
          supervision_requirements: [],
          success_probability: 0.9
        }
      };
      _api.api.ai.analyzeCompatibility.mockResolvedValue(mockCompatibilityResult);
      var _renderComponent12 = renderComponent(),
        getByText = _renderComponent12.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Compatibility"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("95/100")).toBeTruthy();
        expect(getByText("Excellent Match!")).toBeTruthy();
      }, {
        timeout: 10000
      });
    }));
    it("shows compatibility score with correct color coding for medium score", (0, _asyncToGenerator2.default)(function* () {
      var mockCompatibilityResult = {
        compatibility_score: 0.65,
        ai_analysis: "Good compatibility",
        breakdown: {
          personality_compatibility: 0.7,
          lifestyle_compatibility: 0.6,
          activity_compatibility: 0.65,
          social_compatibility: 0.7,
          environment_compatibility: 0.6
        },
        recommendations: {
          meeting_suggestions: [],
          activity_recommendations: [],
          supervision_requirements: [],
          success_probability: 0.7
        }
      };
      _api.api.ai.analyzeCompatibility.mockResolvedValue(mockCompatibilityResult);
      var _renderComponent13 = renderComponent(),
        getByText = _renderComponent13.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Compatibility"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("65/100")).toBeTruthy();
        expect(getByText("Fair Compatibility")).toBeTruthy();
      }, {
        timeout: 10000
      });
    }));
    it("displays detailed breakdown with progress bars", (0, _asyncToGenerator2.default)(function* () {
      var mockCompatibilityResult = {
        compatibility_score: 0.8,
        ai_analysis: "Good compatibility",
        breakdown: {
          personality_compatibility: 0.9,
          lifestyle_compatibility: 0.7,
          activity_compatibility: 0.8,
          social_compatibility: 0.85,
          environment_compatibility: 0.75
        },
        recommendations: {
          meeting_suggestions: [],
          activity_recommendations: [],
          supervision_requirements: [],
          success_probability: 0.8
        }
      };
      _api.api.ai.analyzeCompatibility.mockResolvedValue(mockCompatibilityResult);
      var _renderComponent14 = renderComponent(),
        getByText = _renderComponent14.getByText,
        getAllByText = _renderComponent14.getAllByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Compatibility"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("üìä Detailed Breakdown")).toBeTruthy();
        expect(getByText("Personality")).toBeTruthy();
        expect(getByText("Lifestyle")).toBeTruthy();
        expect(getByText("Activity Level")).toBeTruthy();
        expect(getByText("Social Behavior")).toBeTruthy();
        expect(getByText("Environment")).toBeTruthy();
        expect(getByText("90%")).toBeTruthy();
        expect(getByText("70%")).toBeTruthy();
        expect(getAllByText("80%").length).toBeGreaterThanOrEqual(1);
        expect(getByText("85%")).toBeTruthy();
        expect(getByText("75%")).toBeTruthy();
      }, {
        timeout: 10000
      });
    }));
    it("displays recommendations when available", (0, _asyncToGenerator2.default)(function* () {
      var mockCompatibilityResult = {
        compatibility_score: 0.8,
        ai_analysis: "Good compatibility",
        breakdown: {
          personality_compatibility: 0.8,
          lifestyle_compatibility: 0.8,
          activity_compatibility: 0.8,
          social_compatibility: 0.8,
          environment_compatibility: 0.8
        },
        recommendations: {
          meeting_suggestions: ["Neutral territory", "Supervised introduction"],
          activity_recommendations: ["Play fetch together", "Go for walks"],
          supervision_requirements: ["Initial supervision recommended"],
          success_probability: 0.85
        }
      };
      _api.api.ai.analyzeCompatibility.mockResolvedValue(mockCompatibilityResult);
      var _renderComponent15 = renderComponent(),
        getByText = _renderComponent15.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Compatibility"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("üí° Recommendations")).toBeTruthy();
        expect(getByText("üéØ Meeting Suggestions")).toBeTruthy();
        expect(getByText("‚Ä¢ Neutral territory")).toBeTruthy();
        expect(getByText("‚Ä¢ Supervised introduction")).toBeTruthy();
        expect(getByText("üéæ Activity Recommendations")).toBeTruthy();
        expect(getByText("‚Ä¢ Play fetch together")).toBeTruthy();
        expect(getByText("‚Ä¢ Go for walks")).toBeTruthy();
        expect(getByText("‚ö†Ô∏è Supervision Requirements")).toBeTruthy();
        expect(getByText("‚Ä¢ Initial supervision recommended")).toBeTruthy();
        expect(getByText("Success Probability:")).toBeTruthy();
        expect(getByText("85%")).toBeTruthy();
      }, {
        timeout: 10000
      });
    }));
  });
  describe("Route Parameters", function () {
    it("auto-selects pets when passed via route params", (0, _asyncToGenerator2.default)(function* () {
      var routeParams = {
        pet1Id: "1",
        pet2Id: "2"
      };
      var _renderComponent16 = renderComponent(routeParams),
        getAllByText = _renderComponent16.getAllByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getAllByText("Buddy").length).toBeGreaterThan(0);
        expect(getAllByText("Luna").length).toBeGreaterThan(0);
      }, {
        timeout: 10000
      });
    }));
  });
  describe("Reset Functionality", function () {
    it("resets analysis when new analysis button is pressed", (0, _asyncToGenerator2.default)(function* () {
      var mockCompatibilityResult = {
        compatibility_score: 0.8,
        ai_analysis: "Good compatibility",
        breakdown: {
          personality_compatibility: 0.8,
          lifestyle_compatibility: 0.8,
          activity_compatibility: 0.8,
          social_compatibility: 0.8,
          environment_compatibility: 0.8
        },
        recommendations: {
          meeting_suggestions: [],
          activity_recommendations: [],
          supervision_requirements: [],
          success_probability: 0.8
        }
      };
      _api.api.ai.analyzeCompatibility.mockResolvedValue(mockCompatibilityResult);
      var _renderComponent17 = renderComponent(),
        getByText = _renderComponent17.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Compatibility"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("üéØ Compatibility Results")).toBeTruthy();
      }, {
        timeout: 10000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("New Analysis"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("üêï Select Two Pets")).toBeTruthy();
      });
    }));
  });
  describe("Navigation", function () {
    it("navigates back when back button is pressed", function () {
      var _renderComponent18 = renderComponent(),
        getByTestId = _renderComponent18.getByTestId;
      _reactNative.fireEvent.press(getByTestId("back-button"));
      expect(mockNavigation.goBack).toHaveBeenCalled();
    });
  });
  describe("Error Handling", function () {
    it("handles loading pets error gracefully", (0, _asyncToGenerator2.default)(function* () {
      _api.matchesAPI.getPets.mockRejectedValueOnce(new Error("Failed to load pets. Please try again."));
      var _renderComponent19 = renderComponent(),
        getByText = _renderComponent19.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Failed to load pets. Please try again.")).toBeTruthy();
      });
    }));
    it("handles network timeout gracefully", (0, _asyncToGenerator2.default)(function* () {
      var timeoutError = new Error("Network timeout");
      timeoutError.name = "TimeoutError";
      _api.api.ai.analyzeCompatibility.mockRejectedValue(timeoutError);
      var _renderComponent20 = renderComponent(),
        getByText = _renderComponent20.getByText;
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Buddy")).toBeTruthy();
      }, {
        timeout: 5000
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Buddy"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Luna"));
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        _reactNative.fireEvent.press(getByText("Analyze Compatibility"));
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(getByText("Network timeout")).toBeTruthy();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,