61ad25a6df1c0195070da35d81fcf2d3
"use strict";

_getJestObj().mock("@react-native-async-storage/async-storage", function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _usePersistedState = require("../usePersistedState");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
describe("usePersistedState", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue();
  });
  it("should initialize with provided initial value when no stored value", (0, _asyncToGenerator2.default)(function* () {
    var initialValue = {
      theme: "light",
      language: "en"
    };
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _usePersistedState.usePersistedState)({
          key: "test-key",
          initialValue: initialValue
        });
      }),
      result = _renderHook.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.value).toEqual(initialValue);
  }));
  it("should load stored value from AsyncStorage", (0, _asyncToGenerator2.default)(function* () {
    var storedValue = {
      theme: "dark",
      language: "es"
    };
    mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify(storedValue));
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _usePersistedState.usePersistedState)({
          key: "test-key",
          initialValue: {
            theme: "light",
            language: "en"
          }
        });
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(mockAsyncStorage.getItem).toHaveBeenCalledWith("test-key");
    expect(result.current.value).toEqual(storedValue);
  }));
  it("should update stored value when setValue is called", (0, _asyncToGenerator2.default)(function* () {
    var initialValue = {
      count: 0
    };
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _usePersistedState.usePersistedState)({
          key: "counter",
          initialValue: initialValue
        });
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    var newValue = {
      count: 5
    };
    (0, _reactNative.act)(function () {
      result.current.setValue(newValue);
    });
    expect(mockAsyncStorage.setItem).toHaveBeenCalledWith("counter", JSON.stringify(newValue));
    expect(result.current.value).toEqual(newValue);
  }));
  it("should handle AsyncStorage errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    var consoleSpy = jest.spyOn(console, "error").mockImplementation();
    mockAsyncStorage.getItem.mockRejectedValue(new Error("Storage error"));
    var initialValue = {
      data: "fallback"
    };
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _usePersistedState.usePersistedState)({
          key: "error-key",
          initialValue: initialValue
        });
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.value).toEqual(initialValue);
    expect(consoleSpy).toHaveBeenCalled();
    consoleSpy.mockRestore();
  }));
  it("should return stable function references", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _usePersistedState.usePersistedState)({
          key: "stable-test",
          initialValue: {}
        });
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    var firstSetValue = result.current.setValue;
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _usePersistedState.usePersistedState)({
          key: "stable-test-2",
          initialValue: {}
        });
      }),
      result2 = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.setValue).toBe(firstSetValue);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,