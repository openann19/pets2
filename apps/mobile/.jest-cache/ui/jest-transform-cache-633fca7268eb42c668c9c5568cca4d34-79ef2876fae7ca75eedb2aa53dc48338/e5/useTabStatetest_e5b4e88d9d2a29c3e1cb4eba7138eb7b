b17e93e7e9eed5d05334863f123aa986
"use strict";

var _reactNative = require("@testing-library/react-native");
var _useTabState = require("../useTabState");
describe("useTabState", function () {
  it("should initialize with provided tab", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useTabState.useTabState)("tab1");
      }),
      result = _renderHook.result;
    expect(result.current.activeTab).toBe("tab1");
  });
  it("should switch to different tab", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useTabState.useTabState)("tab1");
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.setActiveTab("tab1");
    });
    expect(result.current.activeTab).toBe("tab1");
  });
  it("should work with different tab types", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useTabState.useTabState)("matches");
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      return result.current.setActiveTab("matches");
    });
    expect(result.current.activeTab).toBe("matches");
  });
  it("should return stable function references", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useTabState.useTabState)("tab1");
      }),
      result = _renderHook4.result;
    var firstSetActiveTab = result.current.setActiveTab;
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useTabState.useTabState)("tab1");
      }),
      result2 = _renderHook5.result;
    expect(result.current.setActiveTab).toBe(firstSetActiveTab);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3VzZVRhYlN0YXRlIiwiZGVzY3JpYmUiLCJpdCIsIl9yZW5kZXJIb29rIiwicmVuZGVySG9vayIsInVzZVRhYlN0YXRlIiwicmVzdWx0IiwiZXhwZWN0IiwiY3VycmVudCIsImFjdGl2ZVRhYiIsInRvQmUiLCJfcmVuZGVySG9vazIiLCJhY3QiLCJzZXRBY3RpdmVUYWIiLCJfcmVuZGVySG9vazMiLCJfcmVuZGVySG9vazQiLCJmaXJzdFNldEFjdGl2ZVRhYiIsIl9yZW5kZXJIb29rNSIsInJlc3VsdDIiXSwic291cmNlcyI6WyJ1c2VUYWJTdGF0ZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiAqL1xuaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyB1c2VUYWJTdGF0ZSB9IGZyb20gXCIuLi91c2VUYWJTdGF0ZVwiO1xuXG5kZXNjcmliZShcInVzZVRhYlN0YXRlXCIsICgpID0+IHtcbiAgaXQoXCJzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIHByb3ZpZGVkIHRhYlwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlVGFiU3RhdGUoXCJ0YWIxXCIpKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYWN0aXZlVGFiKS50b0JlKFwidGFiMVwiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgc3dpdGNoIHRvIGRpZmZlcmVudCB0YWJcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVRhYlN0YXRlKFwidGFiMVwiKSk7XG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0QWN0aXZlVGFiKFwidGFiMVwiKTsgLy8gQ2FuIG9ubHkgc2V0IHRvIHNhbWUgdHlwZVxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmFjdGl2ZVRhYikudG9CZShcInRhYjFcIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHdvcmsgd2l0aCBkaWZmZXJlbnQgdGFiIHR5cGVzXCIsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VUYWJTdGF0ZShcIm1hdGNoZXNcIikpO1xuXG4gICAgYWN0KCgpID0+IHJlc3VsdC5jdXJyZW50LnNldEFjdGl2ZVRhYihcIm1hdGNoZXNcIikpOyAvLyBDYW4gb25seSBzZXQgdG8gc2FtZSB0eXBlXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmFjdGl2ZVRhYikudG9CZShcIm1hdGNoZXNcIik7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHJldHVybiBzdGFibGUgZnVuY3Rpb24gcmVmZXJlbmNlc1wiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlVGFiU3RhdGUoXCJ0YWIxXCIpKTtcblxuICAgIGNvbnN0IGZpcnN0U2V0QWN0aXZlVGFiID0gcmVzdWx0LmN1cnJlbnQuc2V0QWN0aXZlVGFiO1xuXG4gICAgLy8gSW4gUmVhY3QgTmF0aXZlIHRlc3RpbmcsIGNyZWF0ZSBhIG5ldyBob29rIGluc3RhbmNlIHRvIHRlc3Qgc3RhYmlsaXR5XG4gICAgY29uc3QgeyByZXN1bHQ6IHJlc3VsdDIgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlVGFiU3RhdGUoXCJ0YWIxXCIpKTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZXRBY3RpdmVUYWIpLnRvQmUoZmlyc3RTZXRBY3RpdmVUYWIpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUdBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUVBRSxRQUFRLENBQUMsYUFBYSxFQUFFLFlBQU07RUFDNUJDLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxZQUFNO0lBQzlDLElBQUFDLFdBQUEsR0FBbUIsSUFBQUMsdUJBQVUsRUFBQztRQUFBLE9BQU0sSUFBQUMsd0JBQVcsRUFBQyxNQUFNLENBQUM7TUFBQSxFQUFDO01BQWhEQyxNQUFNLEdBQUFILFdBQUEsQ0FBTkcsTUFBTTtJQUNkQyxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDQyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLE1BQU0sQ0FBQztFQUMvQyxDQUFDLENBQUM7RUFFRlIsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07SUFDekMsSUFBQVMsWUFBQSxHQUFtQixJQUFBUCx1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyx3QkFBVyxFQUFDLE1BQU0sQ0FBQztNQUFBLEVBQUM7TUFBaERDLE1BQU0sR0FBQUssWUFBQSxDQUFOTCxNQUFNO0lBRWQsSUFBQU0sZ0JBQUcsRUFBQyxZQUFNO01BQ1JOLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDSyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQ3JDLENBQUMsQ0FBQztJQUVGTixNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDQyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLE1BQU0sQ0FBQztFQUMvQyxDQUFDLENBQUM7RUFFRlIsRUFBRSxDQUFDLHNDQUFzQyxFQUFFLFlBQU07SUFDL0MsSUFBQVksWUFBQSxHQUFtQixJQUFBVix1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyx3QkFBVyxFQUFDLFNBQVMsQ0FBQztNQUFBLEVBQUM7TUFBbkRDLE1BQU0sR0FBQVEsWUFBQSxDQUFOUixNQUFNO0lBRWQsSUFBQU0sZ0JBQUcsRUFBQztNQUFBLE9BQU1OLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDSyxZQUFZLENBQUMsU0FBUyxDQUFDO0lBQUEsRUFBQztJQUNqRE4sTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQyxTQUFTLENBQUM7RUFDbEQsQ0FBQyxDQUFDO0VBRUZSLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxZQUFNO0lBQ25ELElBQUFhLFlBQUEsR0FBbUIsSUFBQVgsdUJBQVUsRUFBQztRQUFBLE9BQU0sSUFBQUMsd0JBQVcsRUFBQyxNQUFNLENBQUM7TUFBQSxFQUFDO01BQWhEQyxNQUFNLEdBQUFTLFlBQUEsQ0FBTlQsTUFBTTtJQUVkLElBQU1VLGlCQUFpQixHQUFHVixNQUFNLENBQUNFLE9BQU8sQ0FBQ0ssWUFBWTtJQUdyRCxJQUFBSSxZQUFBLEdBQTRCLElBQUFiLHVCQUFVLEVBQUM7UUFBQSxPQUFNLElBQUFDLHdCQUFXLEVBQUMsTUFBTSxDQUFDO01BQUEsRUFBQztNQUFqRGEsT0FBTyxHQUFBRCxZQUFBLENBQWZYLE1BQU07SUFFZEMsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ0ssWUFBWSxDQUFDLENBQUNILElBQUksQ0FBQ00saUJBQWlCLENBQUM7RUFDN0QsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119