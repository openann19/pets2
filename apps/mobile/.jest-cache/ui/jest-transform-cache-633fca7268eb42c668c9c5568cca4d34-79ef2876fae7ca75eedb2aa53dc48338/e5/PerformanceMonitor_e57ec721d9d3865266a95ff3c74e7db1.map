{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_core","PerformanceMonitor","_classCallCheck2","default","isEnabled","__DEV__","lastFrameTime","frameCount","currentFPS","interactions","Map","metricsHistory","maxHistorySize","startFPSMonitoring","_createClass2","key","value","setEnabled","enabled","_this","measureFPS","now","Date","deltaTime","Math","round","logger","warn","fps","recordMetrics","requestAnimationFrame","getCurrentFPS","startInteraction","name","interaction","startTime","set","endInteraction","get","undefined","interactionName","endTime","duration","delete","_measureInteraction","_asyncToGenerator2","fn","result","measureInteraction","_x","_x2","apply","arguments","getMemoryUsage","Platform","OS","metrics","memoryUsage","interactionTime","getAverageInteractionTime","timestamp","push","length","shift","recentInteractions","Array","from","values","filter","slice","totalTime","reduce","sum","getMetricsHistory","_toConsumableArray2","getPerformanceSummary","fpsValues","map","m","averageFPS","a","b","minFPS","min","maxFPS","max","activeInteractions","size","logPerformanceSummary","summary","clearHistory","clear","waitForInteractions","Promise","resolve","InteractionManager","runAfterInteractions","performanceMonitor","exports","usePerformanceMonitor","withPerformanceMonitoring","_name","target","propertyKey","descriptor","originalMethod","_this2","_len","args","_key","constructor","withComponentPerformanceMonitoring","Component","componentName","WrappedComponent","props","_ref2","displayName","React","useEffect","createElement","_default"],"sources":["PerformanceMonitor.ts"],"sourcesContent":["import React from \"react\";\nimport { InteractionManager, Platform } from \"react-native\";\nimport { logger } from \"@pawfectmatch/core\";\n\n// Declare global __DEV__ variable\ndeclare const __DEV__: boolean;\n\n/**\n * Performance Monitoring Utility\n * Implements P-08: Measure JS FPS with react-native-performance overlay\n * Features:\n * - FPS monitoring and reporting\n * - Memory usage tracking\n * - Interaction timing measurements\n * - Performance metrics collection\n * - Development-only monitoring\n */\n\nexport interface PerformanceMetrics {\n  fps: number;\n  memoryUsage: number;\n  interactionTime: number;\n  timestamp: number;\n  gestureResponseTime?: number;\n  animationFrameTime?: number;\n  componentRenderTime?: number;\n}\n\ninterface InteractionTiming {\n  name: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n}\n\nclass PerformanceMonitor {\n  private isEnabled: boolean = __DEV__;\n  private lastFrameTime: number = 0;\n  private frameCount: number = 0;\n  private currentFPS: number = 60;\n  private interactions: Map<string, InteractionTiming> = new Map();\n  private metricsHistory: PerformanceMetrics[] = [];\n  private maxHistorySize: number = 100;\n\n  constructor() {\n    if (this.isEnabled) {\n      this.startFPSMonitoring();\n    }\n  }\n\n  /**\n   * Enable or disable performance monitoring\n   */\n  public setEnabled(enabled: boolean): void {\n    this.isEnabled = enabled && __DEV__;\n\n    if (this.isEnabled) {\n      this.startFPSMonitoring();\n    }\n  }\n\n  /**\n   * Start FPS monitoring\n   */\n  private startFPSMonitoring(): void {\n    if (!this.isEnabled) return;\n\n    const measureFPS = () => {\n      const now = Date.now();\n\n      if (this.lastFrameTime > 0) {\n        const deltaTime = now - this.lastFrameTime;\n        this.frameCount++;\n\n        // Calculate FPS every second\n        if (deltaTime >= 1000) {\n          this.currentFPS = Math.round((this.frameCount * 1000) / deltaTime);\n          this.frameCount = 0;\n          this.lastFrameTime = now;\n\n          // Log low FPS warnings\n          if (this.currentFPS < 30) {\n            logger.warn(\"Low FPS detected\", { fps: this.currentFPS });\n          }\n\n          this.recordMetrics();\n        }\n      } else {\n        this.lastFrameTime = now;\n      }\n\n      requestAnimationFrame(measureFPS);\n    };\n\n    requestAnimationFrame(measureFPS);\n  }\n\n  /**\n   * Get current FPS\n   */\n  public getCurrentFPS(): number {\n    return this.currentFPS;\n  }\n\n  /**\n   * Start timing an interaction\n   */\n  public startInteraction(name: string): void {\n    if (!this.isEnabled) return;\n\n    const interaction: InteractionTiming = {\n      name,\n      startTime: Date.now(),\n    };\n\n    this.interactions.set(name, interaction);\n  }\n\n  /**\n   * End timing an interaction\n   */\n  public endInteraction(name: string): number | null {\n    if (!this.isEnabled) return null;\n\n    const interaction = this.interactions.get(name);\n    if (interaction === undefined) {\n      logger.warn(\"Interaction was not started\", { interactionName: name });\n      return null;\n    }\n\n    const endTime = Date.now();\n    const duration = endTime - interaction.startTime;\n\n    interaction.endTime = endTime;\n    interaction.duration = duration;\n\n    // Log slow interactions\n    if (duration > 100) {\n      logger.warn(\"Slow interaction detected\", {\n        interactionName: name,\n        duration,\n      });\n    }\n\n    this.interactions.delete(name);\n    return duration;\n  }\n\n  /**\n   * Measure interaction with automatic timing\n   */\n  public async measureInteraction<T>(\n    name: string,\n    fn: () => Promise<T> | T,\n  ): Promise<T> {\n    if (!this.isEnabled) {\n      return await fn();\n    }\n\n    this.startInteraction(name);\n\n    try {\n      const result = await fn();\n      return result;\n    } finally {\n      this.endInteraction(name);\n    }\n  }\n\n  /**\n   * Get memory usage (approximate)\n   */\n  private getMemoryUsage(): number {\n    // Note: React Native doesn't provide direct memory access\n    // This is a placeholder for native module implementation\n    if (Platform.OS === \"ios\") {\n      // On iOS, you could use a native module to get memory info\n      return 0;\n    } else {\n      // On Android, you could use a native module to get memory info\n      return 0;\n    }\n  }\n\n  /**\n   * Record current performance metrics\n   */\n  private recordMetrics(): void {\n    if (!this.isEnabled) return;\n\n    const metrics: PerformanceMetrics = {\n      fps: this.currentFPS,\n      memoryUsage: this.getMemoryUsage(),\n      interactionTime: this.getAverageInteractionTime(),\n      timestamp: Date.now(),\n    };\n\n    this.metricsHistory.push(metrics);\n\n    // Keep history size manageable\n    if (this.metricsHistory.length > this.maxHistorySize) {\n      this.metricsHistory.shift();\n    }\n  }\n\n  /**\n   * Get average interaction time from recent interactions\n   */\n  private getAverageInteractionTime(): number {\n    const recentInteractions = Array.from(this.interactions.values())\n      .filter((interaction) => interaction.duration !== undefined)\n      .slice(-10); // Last 10 interactions\n\n    if (recentInteractions.length === 0) return 0;\n\n    const totalTime = recentInteractions.reduce(\n      (sum, interaction) =>\n        sum + (interaction.duration !== undefined ? interaction.duration : 0),\n      0,\n    );\n\n    return totalTime / recentInteractions.length;\n  }\n\n  /**\n   * Get performance metrics history\n   */\n  public getMetricsHistory(): PerformanceMetrics[] {\n    return [...this.metricsHistory];\n  }\n\n  /**\n   * Get current performance summary\n   */\n  public getPerformanceSummary(): {\n    currentFPS: number;\n    averageFPS: number;\n    minFPS: number;\n    maxFPS: number;\n    memoryUsage: number;\n    activeInteractions: number;\n  } {\n    const fpsValues = this.metricsHistory.map((m) => m.fps);\n\n    return {\n      currentFPS: this.currentFPS,\n      averageFPS:\n        fpsValues.length > 0\n          ? Math.round(fpsValues.reduce((a, b) => a + b, 0) / fpsValues.length)\n          : 0,\n      minFPS: fpsValues.length > 0 ? Math.min(...fpsValues) : 0,\n      maxFPS: fpsValues.length > 0 ? Math.max(...fpsValues) : 0,\n      memoryUsage: this.getMemoryUsage(),\n      activeInteractions: this.interactions.size,\n    };\n  }\n\n  /**\n   * Log performance summary to console\n   */\n  public logPerformanceSummary(): void {\n    if (!this.isEnabled) return;\n\n    const summary = this.getPerformanceSummary();\n    logger.warn(\"Performance Summary\", summary);\n  }\n\n  /**\n   * Clear metrics history\n   */\n  public clearHistory(): void {\n    this.metricsHistory = [];\n    this.interactions.clear();\n  }\n\n  /**\n   * Wait for interactions to complete\n   */\n  public waitForInteractions(): Promise<void> {\n    return new Promise((resolve) => {\n      InteractionManager.runAfterInteractions(resolve);\n    });\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n/**\n * React Hook for performance monitoring\n */\nexport const usePerformanceMonitor = () => {\n  const startInteraction = (name: string) => {\n    performanceMonitor.startInteraction(name);\n  };\n  const endInteraction = (name: string) => {\n    return performanceMonitor.endInteraction(name);\n  };\n  const measureInteraction = <T>(name: string, fn: () => Promise<T> | T) =>\n    performanceMonitor.measureInteraction(name, fn);\n  const getCurrentFPS = () => performanceMonitor.getCurrentFPS();\n  const getPerformanceSummary = () =>\n    performanceMonitor.getPerformanceSummary();\n\n  return {\n    startInteraction,\n    endInteraction,\n    measureInteraction,\n    getCurrentFPS,\n    getPerformanceSummary,\n  };\n};\n\n/**\n * Performance monitoring decorator for class methods\n */\nexport const withPerformanceMonitoring = (_name: string) => {\n  return (\n    target: Record<string, unknown>,\n    propertyKey: string,\n    descriptor: PropertyDescriptor,\n  ) => {\n    const originalMethod = descriptor.value as (...args: unknown[]) => unknown;\n\n    descriptor.value = async function (...args: unknown[]): Promise<unknown> {\n      return performanceMonitor.measureInteraction(\n        `${target.constructor.name}.${propertyKey}`,\n        () => originalMethod.apply(this, args),\n      );\n    };\n\n    return descriptor;\n  };\n};\n\n/**\n * Performance monitoring HOC for React components\n */\nexport const withComponentPerformanceMonitoring = <P extends object>(\n  Component: React.ComponentType<P>,\n  componentName?: string,\n): React.FC<P> => {\n  const WrappedComponent: React.FC<P> = (props) => {\n    const name = componentName ?? Component.displayName ?? Component.name;\n\n    React.useEffect(() => {\n      performanceMonitor.startInteraction(`${name}.mount`);\n\n      return () => {\n        performanceMonitor.endInteraction(`${name}.mount`);\n      };\n    }, [name]);\n\n    return React.createElement(Component, props);\n  };\n\n  WrappedComponent.displayName = `withPerformanceMonitoring(${Component.displayName !== undefined && Component.displayName !== \"\" ? Component.displayName : Component.name})`;\n\n  return WrappedComponent;\n};\n\nexport default performanceMonitor;\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,KAAA,GAAAF,OAAA;AAA4C,IAiCtCG,kBAAkB;EAStB,SAAAA,mBAAA,EAAc;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAF,kBAAA;IAAA,KARNG,SAAS,GAAYC,OAAO;IAAA,KAC5BC,aAAa,GAAW,CAAC;IAAA,KACzBC,UAAU,GAAW,CAAC;IAAA,KACtBC,UAAU,GAAW,EAAE;IAAA,KACvBC,YAAY,GAAmC,IAAIC,GAAG,CAAC,CAAC;IAAA,KACxDC,cAAc,GAAyB,EAAE;IAAA,KACzCC,cAAc,GAAW,GAAG;IAGlC,IAAI,IAAI,CAACR,SAAS,EAAE;MAClB,IAAI,CAACS,kBAAkB,CAAC,CAAC;IAC3B;EACF;EAAC,WAAAC,aAAA,CAAAX,OAAA,EAAAF,kBAAA;IAAAc,GAAA;IAAAC,KAAA,EAKD,SAAOC,UAAUA,CAACC,OAAgB,EAAQ;MACxC,IAAI,CAACd,SAAS,GAAGc,OAAO,IAAIb,OAAO;MAEnC,IAAI,IAAI,CAACD,SAAS,EAAE;QAClB,IAAI,CAACS,kBAAkB,CAAC,CAAC;MAC3B;IACF;EAAC;IAAAE,GAAA;IAAAC,KAAA,EAKD,SAAQH,kBAAkBA,CAAA,EAAS;MAAA,IAAAM,KAAA;MACjC,IAAI,CAAC,IAAI,CAACf,SAAS,EAAE;MAErB,IAAMgB,WAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;QACvB,IAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;QAEtB,IAAIF,KAAI,CAACb,aAAa,GAAG,CAAC,EAAE;UAC1B,IAAMiB,SAAS,GAAGF,GAAG,GAAGF,KAAI,CAACb,aAAa;UAC1Ca,KAAI,CAACZ,UAAU,EAAE;UAGjB,IAAIgB,SAAS,IAAI,IAAI,EAAE;YACrBJ,KAAI,CAACX,UAAU,GAAGgB,IAAI,CAACC,KAAK,CAAEN,KAAI,CAACZ,UAAU,GAAG,IAAI,GAAIgB,SAAS,CAAC;YAClEJ,KAAI,CAACZ,UAAU,GAAG,CAAC;YACnBY,KAAI,CAACb,aAAa,GAAGe,GAAG;YAGxB,IAAIF,KAAI,CAACX,UAAU,GAAG,EAAE,EAAE;cACxBkB,YAAM,CAACC,IAAI,CAAC,kBAAkB,EAAE;gBAAEC,GAAG,EAAET,KAAI,CAACX;cAAW,CAAC,CAAC;YAC3D;YAEAW,KAAI,CAACU,aAAa,CAAC,CAAC;UACtB;QACF,CAAC,MAAM;UACLV,KAAI,CAACb,aAAa,GAAGe,GAAG;QAC1B;QAEAS,qBAAqB,CAACV,WAAU,CAAC;MACnC,CAAC;MAEDU,qBAAqB,CAACV,WAAU,CAAC;IACnC;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAKD,SAAOe,aAAaA,CAAA,EAAW;MAC7B,OAAO,IAAI,CAACvB,UAAU;IACxB;EAAC;IAAAO,GAAA;IAAAC,KAAA,EAKD,SAAOgB,gBAAgBA,CAACC,IAAY,EAAQ;MAC1C,IAAI,CAAC,IAAI,CAAC7B,SAAS,EAAE;MAErB,IAAM8B,WAA8B,GAAG;QACrCD,IAAI,EAAJA,IAAI;QACJE,SAAS,EAAEb,IAAI,CAACD,GAAG,CAAC;MACtB,CAAC;MAED,IAAI,CAACZ,YAAY,CAAC2B,GAAG,CAACH,IAAI,EAAEC,WAAW,CAAC;IAC1C;EAAC;IAAAnB,GAAA;IAAAC,KAAA,EAKD,SAAOqB,cAAcA,CAACJ,IAAY,EAAiB;MACjD,IAAI,CAAC,IAAI,CAAC7B,SAAS,EAAE,OAAO,IAAI;MAEhC,IAAM8B,WAAW,GAAG,IAAI,CAACzB,YAAY,CAAC6B,GAAG,CAACL,IAAI,CAAC;MAC/C,IAAIC,WAAW,KAAKK,SAAS,EAAE;QAC7Bb,YAAM,CAACC,IAAI,CAAC,6BAA6B,EAAE;UAAEa,eAAe,EAAEP;QAAK,CAAC,CAAC;QACrE,OAAO,IAAI;MACb;MAEA,IAAMQ,OAAO,GAAGnB,IAAI,CAACD,GAAG,CAAC,CAAC;MAC1B,IAAMqB,QAAQ,GAAGD,OAAO,GAAGP,WAAW,CAACC,SAAS;MAEhDD,WAAW,CAACO,OAAO,GAAGA,OAAO;MAC7BP,WAAW,CAACQ,QAAQ,GAAGA,QAAQ;MAG/B,IAAIA,QAAQ,GAAG,GAAG,EAAE;QAClBhB,YAAM,CAACC,IAAI,CAAC,2BAA2B,EAAE;UACvCa,eAAe,EAAEP,IAAI;UACrBS,QAAQ,EAARA;QACF,CAAC,CAAC;MACJ;MAEA,IAAI,CAACjC,YAAY,CAACkC,MAAM,CAACV,IAAI,CAAC;MAC9B,OAAOS,QAAQ;IACjB;EAAC;IAAA3B,GAAA;IAAAC,KAAA;MAAA,IAAA4B,mBAAA,OAAAC,kBAAA,CAAA1C,OAAA,EAKD,WACE8B,IAAY,EACZa,EAAwB,EACZ;QACZ,IAAI,CAAC,IAAI,CAAC1C,SAAS,EAAE;UACnB,aAAa0C,EAAE,CAAC,CAAC;QACnB;QAEA,IAAI,CAACd,gBAAgB,CAACC,IAAI,CAAC;QAE3B,IAAI;UACF,IAAMc,MAAM,SAASD,EAAE,CAAC,CAAC;UACzB,OAAOC,MAAM;QACf,CAAC,SAAS;UACR,IAAI,CAACV,cAAc,CAACJ,IAAI,CAAC;QAC3B;MACF,CAAC;MAAA,SAhBYe,kBAAkBA,CAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAN,mBAAA,CAAAO,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAlBJ,kBAAkB;IAAA;EAAA;IAAAjC,GAAA;IAAAC,KAAA,EAqB/B,SAAQqC,cAAcA,CAAA,EAAW;MAG/B,IAAIC,qBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;QAEzB,OAAO,CAAC;MACV,CAAC,MAAM;QAEL,OAAO,CAAC;MACV;IACF;EAAC;IAAAxC,GAAA;IAAAC,KAAA,EAKD,SAAQa,aAAaA,CAAA,EAAS;MAC5B,IAAI,CAAC,IAAI,CAACzB,SAAS,EAAE;MAErB,IAAMoD,OAA2B,GAAG;QAClC5B,GAAG,EAAE,IAAI,CAACpB,UAAU;QACpBiD,WAAW,EAAE,IAAI,CAACJ,cAAc,CAAC,CAAC;QAClCK,eAAe,EAAE,IAAI,CAACC,yBAAyB,CAAC,CAAC;QACjDC,SAAS,EAAEtC,IAAI,CAACD,GAAG,CAAC;MACtB,CAAC;MAED,IAAI,CAACV,cAAc,CAACkD,IAAI,CAACL,OAAO,CAAC;MAGjC,IAAI,IAAI,CAAC7C,cAAc,CAACmD,MAAM,GAAG,IAAI,CAAClD,cAAc,EAAE;QACpD,IAAI,CAACD,cAAc,CAACoD,KAAK,CAAC,CAAC;MAC7B;IACF;EAAC;IAAAhD,GAAA;IAAAC,KAAA,EAKD,SAAQ2C,yBAAyBA,CAAA,EAAW;MAC1C,IAAMK,kBAAkB,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACzD,YAAY,CAAC0D,MAAM,CAAC,CAAC,CAAC,CAC9DC,MAAM,CAAC,UAAClC,WAAW;QAAA,OAAKA,WAAW,CAACQ,QAAQ,KAAKH,SAAS;MAAA,EAAC,CAC3D8B,KAAK,CAAC,CAAC,EAAE,CAAC;MAEb,IAAIL,kBAAkB,CAACF,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;MAE7C,IAAMQ,SAAS,GAAGN,kBAAkB,CAACO,MAAM,CACzC,UAACC,GAAG,EAAEtC,WAAW;QAAA,OACfsC,GAAG,IAAItC,WAAW,CAACQ,QAAQ,KAAKH,SAAS,GAAGL,WAAW,CAACQ,QAAQ,GAAG,CAAC,CAAC;MAAA,GACvE,CACF,CAAC;MAED,OAAO4B,SAAS,GAAGN,kBAAkB,CAACF,MAAM;IAC9C;EAAC;IAAA/C,GAAA;IAAAC,KAAA,EAKD,SAAOyD,iBAAiBA,CAAA,EAAyB;MAC/C,WAAAC,mBAAA,CAAAvE,OAAA,EAAW,IAAI,CAACQ,cAAc;IAChC;EAAC;IAAAI,GAAA;IAAAC,KAAA,EAKD,SAAO2D,qBAAqBA,CAAA,EAO1B;MACA,IAAMC,SAAS,GAAG,IAAI,CAACjE,cAAc,CAACkE,GAAG,CAAC,UAACC,CAAC;QAAA,OAAKA,CAAC,CAAClD,GAAG;MAAA,EAAC;MAEvD,OAAO;QACLpB,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BuE,UAAU,EACRH,SAAS,CAACd,MAAM,GAAG,CAAC,GAChBtC,IAAI,CAACC,KAAK,CAACmD,SAAS,CAACL,MAAM,CAAC,UAACS,CAAC,EAAEC,CAAC;UAAA,OAAKD,CAAC,GAAGC,CAAC;QAAA,GAAE,CAAC,CAAC,GAAGL,SAAS,CAACd,MAAM,CAAC,GACnE,CAAC;QACPoB,MAAM,EAAEN,SAAS,CAACd,MAAM,GAAG,CAAC,GAAGtC,IAAI,CAAC2D,GAAG,CAAAhC,KAAA,CAAR3B,IAAI,MAAAkD,mBAAA,CAAAvE,OAAA,EAAQyE,SAAS,EAAC,GAAG,CAAC;QACzDQ,MAAM,EAAER,SAAS,CAACd,MAAM,GAAG,CAAC,GAAGtC,IAAI,CAAC6D,GAAG,CAAAlC,KAAA,CAAR3B,IAAI,MAAAkD,mBAAA,CAAAvE,OAAA,EAAQyE,SAAS,EAAC,GAAG,CAAC;QACzDnB,WAAW,EAAE,IAAI,CAACJ,cAAc,CAAC,CAAC;QAClCiC,kBAAkB,EAAE,IAAI,CAAC7E,YAAY,CAAC8E;MACxC,CAAC;IACH;EAAC;IAAAxE,GAAA;IAAAC,KAAA,EAKD,SAAOwE,qBAAqBA,CAAA,EAAS;MACnC,IAAI,CAAC,IAAI,CAACpF,SAAS,EAAE;MAErB,IAAMqF,OAAO,GAAG,IAAI,CAACd,qBAAqB,CAAC,CAAC;MAC5CjD,YAAM,CAACC,IAAI,CAAC,qBAAqB,EAAE8D,OAAO,CAAC;IAC7C;EAAC;IAAA1E,GAAA;IAAAC,KAAA,EAKD,SAAO0E,YAAYA,CAAA,EAAS;MAC1B,IAAI,CAAC/E,cAAc,GAAG,EAAE;MACxB,IAAI,CAACF,YAAY,CAACkF,KAAK,CAAC,CAAC;IAC3B;EAAC;IAAA5E,GAAA;IAAAC,KAAA,EAKD,SAAO4E,mBAAmBA,CAAA,EAAkB;MAC1C,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAK;QAC9BC,+BAAkB,CAACC,oBAAoB,CAACF,OAAO,CAAC;MAClD,CAAC,CAAC;IACJ;EAAC;AAAA;AAII,IAAMG,kBAAkB,GAAAC,OAAA,CAAAD,kBAAA,GAAG,IAAIhG,kBAAkB,CAAC,CAAC;AAKnD,IAAMkG,qBAAqB,GAAAD,OAAA,CAAAC,qBAAA,GAAG,SAAxBA,qBAAqBA,CAAA,EAAS;EACzC,IAAMnE,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,IAAY,EAAK;IACzCgE,kBAAkB,CAACjE,gBAAgB,CAACC,IAAI,CAAC;EAC3C,CAAC;EACD,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CAAIJ,IAAY,EAAK;IACvC,OAAOgE,kBAAkB,CAAC5D,cAAc,CAACJ,IAAI,CAAC;EAChD,CAAC;EACD,IAAMe,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAOf,IAAY,EAAEa,EAAwB;IAAA,OACnEmD,kBAAkB,CAACjD,kBAAkB,CAACf,IAAI,EAAEa,EAAE,CAAC;EAAA;EACjD,IAAMf,aAAa,GAAG,SAAhBA,aAAaA,CAAA;IAAA,OAASkE,kBAAkB,CAAClE,aAAa,CAAC,CAAC;EAAA;EAC9D,IAAM4C,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA;IAAA,OACzBsB,kBAAkB,CAACtB,qBAAqB,CAAC,CAAC;EAAA;EAE5C,OAAO;IACL3C,gBAAgB,EAAhBA,gBAAgB;IAChBK,cAAc,EAAdA,cAAc;IACdW,kBAAkB,EAAlBA,kBAAkB;IAClBjB,aAAa,EAAbA,aAAa;IACb4C,qBAAqB,EAArBA;EACF,CAAC;AACH,CAAC;AAKM,IAAMyB,yBAAyB,GAAAF,OAAA,CAAAE,yBAAA,GAAG,SAA5BA,yBAAyBA,CAAIC,KAAa,EAAK;EAC1D,OAAO,UACLC,MAA+B,EAC/BC,WAAmB,EACnBC,UAA8B,EAC3B;IACH,IAAMC,cAAc,GAAGD,UAAU,CAACxF,KAAwC;IAE1EwF,UAAU,CAACxF,KAAK,OAAA6B,kBAAA,CAAA1C,OAAA,EAAG,aAAsD;MAAA,IAAAuG,MAAA;MAAA,SAAAC,IAAA,GAAAvD,SAAA,CAAAU,MAAA,EAAnC8C,IAAI,OAAA3C,KAAA,CAAA0C,IAAA,GAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;QAAJD,IAAI,CAAAC,IAAA,IAAAzD,SAAA,CAAAyD,IAAA;MAAA;MACxC,OAAOZ,kBAAkB,CAACjD,kBAAkB,CAC1C,GAAGsD,MAAM,CAACQ,WAAW,CAAC7E,IAAI,IAAIsE,WAAW,EAAE,EAC3C;QAAA,OAAME,cAAc,CAACtD,KAAK,CAACuD,MAAI,EAAEE,IAAI,CAAC;MAAA,CACxC,CAAC;IACH,CAAC;IAED,OAAOJ,UAAU;EACnB,CAAC;AACH,CAAC;AAKM,IAAMO,kCAAkC,GAAAb,OAAA,CAAAa,kCAAA,GAAG,SAArCA,kCAAkCA,CAC7CC,SAAiC,EACjCC,aAAsB,EACN;EAChB,IAAMC,gBAA6B,GAAG,SAAhCA,gBAA6BA,CAAIC,KAAK,EAAK;IAAA,IAAAC,KAAA;IAC/C,IAAMnF,IAAI,IAAAmF,KAAA,GAAGH,aAAa,WAAbA,aAAa,GAAID,SAAS,CAACK,WAAW,YAAAD,KAAA,GAAIJ,SAAS,CAAC/E,IAAI;IAErEqF,cAAK,CAACC,SAAS,CAAC,YAAM;MACpBtB,kBAAkB,CAACjE,gBAAgB,CAAC,GAAGC,IAAI,QAAQ,CAAC;MAEpD,OAAO,YAAM;QACXgE,kBAAkB,CAAC5D,cAAc,CAAC,GAAGJ,IAAI,QAAQ,CAAC;MACpD,CAAC;IACH,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;IAEV,OAAOqF,cAAK,CAACE,aAAa,CAACR,SAAS,EAAEG,KAAK,CAAC;EAC9C,CAAC;EAEDD,gBAAgB,CAACG,WAAW,GAAG,6BAA6BL,SAAS,CAACK,WAAW,KAAK9E,SAAS,IAAIyE,SAAS,CAACK,WAAW,KAAK,EAAE,GAAGL,SAAS,CAACK,WAAW,GAAGL,SAAS,CAAC/E,IAAI,GAAG;EAE3K,OAAOiF,gBAAgB;AACzB,CAAC;AAAC,IAAAO,QAAA,GAAAvB,OAAA,CAAA/F,OAAA,GAEa8F,kBAAkB","ignoreList":[]}