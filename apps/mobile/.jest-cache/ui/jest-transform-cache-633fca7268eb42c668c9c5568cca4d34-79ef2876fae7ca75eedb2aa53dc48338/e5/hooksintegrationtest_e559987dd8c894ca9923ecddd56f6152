3ad9a5e3e087414b70f9c9f74e660b5c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useHomeScreen = require("../../screens/useHomeScreen");
var _useProfileScreen = require("../../screens/useProfileScreen");
describe("Hooks Integration Tests", function () {
  describe("Navigation Flow", function () {
    it("should handle navigation from home to profile", function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        homeResult = _renderHook.result;
      expect(homeResult.current.handleProfilePress).toBeDefined();
      expect(typeof homeResult.current.handleProfilePress).toBe("function");
    });
    it("should maintain state consistency across screens", function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        homeResult = _renderHook2.result;
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        profileResult = _renderHook3.result;
      expect(homeResult.current).toBeDefined();
      expect(profileResult.current).toBeDefined();
    });
  });
  describe("Error Handling", function () {
    it("should gracefully handle API failures", (0, _asyncToGenerator2.default)(function* () {
      expect(true).toBe(true);
    }));
  });
  describe("Performance", function () {
    it("should not cause unnecessary re-renders", function () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useHomeScreen.useHomeScreen)();
        }),
        result = _renderHook4.result;
      expect(result.current).toBeDefined();
      expect(typeof result.current).toBe("object");
      expect(true).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3VzZUhvbWVTY3JlZW4iLCJfdXNlUHJvZmlsZVNjcmVlbiIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVySG9vayIsInJlbmRlckhvb2siLCJ1c2VIb21lU2NyZWVuIiwiaG9tZVJlc3VsdCIsInJlc3VsdCIsImV4cGVjdCIsImN1cnJlbnQiLCJoYW5kbGVQcm9maWxlUHJlc3MiLCJ0b0JlRGVmaW5lZCIsInRvQmUiLCJfcmVuZGVySG9vazIiLCJfcmVuZGVySG9vazMiLCJ1c2VQcm9maWxlU2NyZWVuIiwicHJvZmlsZVJlc3VsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJfcmVuZGVySG9vazQiXSwic291cmNlcyI6WyJob29rcy5pbnRlZ3JhdGlvbi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW50ZWdyYXRpb24gVGVzdHMgZm9yIFNjcmVlbiBIb29rc1xuICogVGVzdHMgbXVsdGlwbGUgaG9va3Mgd29ya2luZyB0b2dldGhlclxuICovXG5cbmltcG9ydCB7IHJlbmRlckhvb2sgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcbmltcG9ydCB7IHVzZUhvbWVTY3JlZW4gfSBmcm9tIFwiLi4vLi4vc2NyZWVucy91c2VIb21lU2NyZWVuXCI7XG5pbXBvcnQgeyB1c2VQcm9maWxlU2NyZWVuIH0gZnJvbSBcIi4uLy4uL3NjcmVlbnMvdXNlUHJvZmlsZVNjcmVlblwiO1xuXG5kZXNjcmliZShcIkhvb2tzIEludGVncmF0aW9uIFRlc3RzXCIsICgpID0+IHtcbiAgZGVzY3JpYmUoXCJOYXZpZ2F0aW9uIEZsb3dcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBuYXZpZ2F0aW9uIGZyb20gaG9tZSB0byBwcm9maWxlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0OiBob21lUmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUhvbWVTY3JlZW4oKSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChob21lUmVzdWx0LmN1cnJlbnQuaGFuZGxlUHJvZmlsZVByZXNzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBob21lUmVzdWx0LmN1cnJlbnQuaGFuZGxlUHJvZmlsZVByZXNzKS50b0JlKFwiZnVuY3Rpb25cIik7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBtYWludGFpbiBzdGF0ZSBjb25zaXN0ZW5jeSBhY3Jvc3Mgc2NyZWVuc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdDogaG9tZVJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VIb21lU2NyZWVuKCkpO1xuICAgICAgY29uc3QgeyByZXN1bHQ6IHByb2ZpbGVSZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUHJvZmlsZVNjcmVlbigpKTtcblxuICAgICAgLy8gQm90aCBob29rcyBzaG91bGQgaGF2ZSB1c2VyIGRhdGFcbiAgICAgIGV4cGVjdChob21lUmVzdWx0LmN1cnJlbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocHJvZmlsZVJlc3VsdC5jdXJyZW50KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIkVycm9yIEhhbmRsaW5nXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBncmFjZWZ1bGx5IGhhbmRsZSBBUEkgZmFpbHVyZXNcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gVGVzdCB0aGF0IGhvb2tzIGhhbmRsZSBlcnJvcnMgcHJvcGVybHlcbiAgICAgIGV4cGVjdCh0cnVlKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIlBlcmZvcm1hbmNlXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBub3QgY2F1c2UgdW5uZWNlc3NhcnkgcmUtcmVuZGVyc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VIb21lU2NyZWVuKCkpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZnkgaG9vayBpbml0aWFsaXplcyBwcm9wZXJseVxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHR5cGVvZiByZXN1bHQuY3VycmVudCkudG9CZShcIm9iamVjdFwiKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IGhvb2tzIGRvbid0IGNhdXNlIGV4Y2Vzc2l2ZSByZS1yZW5kZXJzXG4gICAgICBleHBlY3QodHJ1ZSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuIl0sIm1hcHBpbmdzIjoiOzs7O0FBS0EsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsY0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsaUJBQUEsR0FBQUYsT0FBQTtBQUVBRyxRQUFRLENBQUMseUJBQXlCLEVBQUUsWUFBTTtFQUN4Q0EsUUFBUSxDQUFDLGlCQUFpQixFQUFFLFlBQU07SUFDaENDLEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxZQUFNO01BQ3hELElBQUFDLFdBQUEsR0FBK0IsSUFBQUMsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsNEJBQWEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUFoREMsVUFBVSxHQUFBSCxXQUFBLENBQWxCSSxNQUFNO01BRWRDLE1BQU0sQ0FBQ0YsVUFBVSxDQUFDRyxPQUFPLENBQUNDLGtCQUFrQixDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO01BQzNESCxNQUFNLENBQUMsT0FBT0YsVUFBVSxDQUFDRyxPQUFPLENBQUNDLGtCQUFrQixDQUFDLENBQUNFLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDdkUsQ0FBQyxDQUFDO0lBRUZWLEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxZQUFNO01BQzNELElBQUFXLFlBQUEsR0FBK0IsSUFBQVQsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsNEJBQWEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUFoREMsVUFBVSxHQUFBTyxZQUFBLENBQWxCTixNQUFNO01BQ2QsSUFBQU8sWUFBQSxHQUFrQyxJQUFBVix1QkFBVSxFQUFDO1VBQUEsT0FBTSxJQUFBVyxrQ0FBZ0IsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUF0REMsYUFBYSxHQUFBRixZQUFBLENBQXJCUCxNQUFNO01BR2RDLE1BQU0sQ0FBQ0YsVUFBVSxDQUFDRyxPQUFPLENBQUMsQ0FBQ0UsV0FBVyxDQUFDLENBQUM7TUFDeENILE1BQU0sQ0FBQ1EsYUFBYSxDQUFDUCxPQUFPLENBQUMsQ0FBQ0UsV0FBVyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZWLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFNO0lBQy9CQyxFQUFFLENBQUMsdUNBQXVDLE1BQUFlLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO01BRXREVixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUNJLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQyxFQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZYLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTtJQUM1QkMsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLFlBQU07TUFDbEQsSUFBQWlCLFlBQUEsR0FBbUIsSUFBQWYsdUJBQVUsRUFBQztVQUFBLE9BQU0sSUFBQUMsNEJBQWEsRUFBQyxDQUFDO1FBQUEsRUFBQztRQUE1Q0UsTUFBTSxHQUFBWSxZQUFBLENBQU5aLE1BQU07TUFHZEMsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQyxDQUFDRSxXQUFXLENBQUMsQ0FBQztNQUNwQ0gsTUFBTSxDQUFDLE9BQU9ELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDLENBQUNHLElBQUksQ0FBQyxRQUFRLENBQUM7TUFHNUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=