e85670133dd4736a64b50bf4de1daf3c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useApiQuery = useApiQuery;
exports.useApiMutation = useApiMutation;
exports.useLogin = useLogin;
exports.useRegister = useRegister;
exports.useLogout = useLogout;
exports.useUser = useUser;
exports.useUpdateUser = useUpdateUser;
exports.usePets = usePets;
exports.usePet = usePet;
exports.useCreatePet = useCreatePet;
exports.useUpdatePet = useUpdatePet;
exports.useMatches = useMatches;
exports.useMatch = useMatch;
exports.useCreateMatch = useCreateMatch;
exports.useChat = useChat;
exports.useSendMessage = useSendMessage;
exports.useGenerateBio = useGenerateBio;
exports.useAnalyzePhotos = useAnalyzePhotos;
exports.useCompatibilityAnalysis = useCompatibilityAnalysis;
exports.useApplicationAssistance = useApplicationAssistance;
exports.useTrackUserEvent = useTrackUserEvent;
exports.useTrackPetEvent = useTrackPetEvent;
exports.useTrackMatchEvent = useTrackMatchEvent;
exports.useUserAnalytics = useUserAnalytics;
exports.usePetAnalytics = usePetAnalytics;
exports.useMatchAnalytics = useMatchAnalytics;
exports.useReportUser = useReportUser;
exports.useBlockUser = useBlockUser;
exports.useUnblockUser = useUnblockUser;
exports.useMuteUser = useMuteUser;
exports.useAdminListReports = useAdminListReports;
exports.useAdminUpdateReport = useAdminUpdateReport;
exports.useUnmuteUser = useUnmuteUser;
var react_query_1 = require("@tanstack/react-query");
var client_1 = require("./client");
var environment_1 = require("../utils/environment");
function useApiQuery(queryKey, endpoint, options) {
  return (0, react_query_1.useQuery)(_objectSpread({
    queryKey: queryKey,
    queryFn: function queryFn() {
      return client_1.apiClient.get(endpoint);
    }
  }, options));
}
function useApiMutation(endpoint, options) {
  var queryClient = (0, react_query_1.useQueryClient)();
  return (0, react_query_1.useMutation)(_objectSpread({
    mutationFn: function mutationFn(variables) {
      if (variables === undefined) {
        return client_1.apiClient.post(endpoint);
      }
      return client_1.apiClient.post(endpoint, variables);
    },
    onSuccess: function onSuccess() {
      void queryClient.invalidateQueries();
      if (options != null && options.onSuccess != null) {
        options.onSuccess.apply(options, arguments);
      }
    }
  }, options));
}
function useLogin() {
  return useApiMutation('/auth/login', {
    onSuccess: function onSuccess(data) {
      if (data.success && data.data != null) {
        var _data$data = data.data,
          accessToken = _data$data.accessToken,
          refreshToken = _data$data.refreshToken;
        (0, environment_1.setLocalStorageValue)('accessToken', accessToken);
        (0, environment_1.setLocalStorageValue)('refreshToken', refreshToken);
      }
    }
  });
}
function useRegister() {
  return useApiMutation('/auth/register', {
    onSuccess: function onSuccess(data) {
      if (data.success && data.data != null) {
        var _data$data2 = data.data,
          accessToken = _data$data2.accessToken,
          refreshToken = _data$data2.refreshToken;
        (0, environment_1.setLocalStorageValue)('accessToken', accessToken);
        (0, environment_1.setLocalStorageValue)('refreshToken', refreshToken);
      }
    }
  });
}
function useLogout() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return useApiMutation('/auth/logout', {
    onSuccess: function onSuccess() {
      (0, environment_1.removeLocalStorageValue)('accessToken');
      (0, environment_1.removeLocalStorageValue)('refreshToken');
      queryClient.clear();
    }
  });
}
function useUser(userId) {
  var userIdStr = userId != null ? userId : 'me';
  return useApiQuery(['user', userIdStr], userIdStr !== 'me' ? `/users/${userIdStr}` : '/users/me');
}
function useUpdateUser() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return useApiMutation('/users/me', {
    onSuccess: function onSuccess() {
      void queryClient.invalidateQueries({
        queryKey: ['user']
      });
    }
  });
}
function usePets(filters) {
  var serializedFilters = JSON.stringify(filters != null ? filters : {});
  var queryKey = ['pets', serializedFilters];
  var queryString = filters != null ? `?${new URLSearchParams(Object.fromEntries(Object.entries(filters).filter(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      _k = _ref2[0],
      v = _ref2[1];
    return v != null;
  }).map(function (_ref3) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
      k = _ref4[0],
      v = _ref4[1];
    return [k, String(v)];
  }))).toString()}` : '';
  return useApiQuery(queryKey, `/pets${queryString}`);
}
function usePet(petId) {
  return useApiQuery(['pet', petId], `/pets/${petId}`);
}
function useCreatePet() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return useApiMutation('/pets', {
    onSuccess: function onSuccess() {
      void queryClient.invalidateQueries({
        queryKey: ['pets']
      });
    }
  });
}
function useUpdatePet() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return useApiMutation('/pets', {
    onSuccess: function onSuccess() {
      void queryClient.invalidateQueries({
        queryKey: ['pets']
      });
      void queryClient.invalidateQueries({
        queryKey: ['pet']
      });
    }
  });
}
function useMatches() {
  return useApiQuery(['matches'], '/matches');
}
function useMatch(matchId) {
  return useApiQuery(['match', matchId], `/matches/${matchId}`);
}
function useCreateMatch() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return useApiMutation('/matches', {
    onSuccess: function onSuccess() {
      void queryClient.invalidateQueries({
        queryKey: ['matches']
      });
    }
  });
}
function useChat(matchId) {
  return useApiQuery(['chat', matchId], `/chat/${matchId}`);
}
function useSendMessage() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return useApiMutation('/chat', {
    onSuccess: function onSuccess() {
      void queryClient.invalidateQueries({
        queryKey: ['chat']
      });
    }
  });
}
function useGenerateBio() {
  return useApiMutation('/ai/generate-bio');
}
function useAnalyzePhotos() {
  return useApiMutation('/ai/analyze-photos');
}
function useCompatibilityAnalysis() {
  return useApiMutation('/ai/compatibility');
}
function useApplicationAssistance() {
  return useApiMutation('/ai/assist-application');
}
function useTrackUserEvent() {
  return useApiMutation('/analytics/user');
}
function useTrackPetEvent() {
  return useApiMutation('/analytics/pet');
}
function useTrackMatchEvent() {
  return useApiMutation('/analytics/match');
}
function useUserAnalytics() {
  return useApiQuery(['analytics', 'user'], '/analytics/user');
}
function usePetAnalytics(petId) {
  return useApiQuery(['analytics', 'pet', petId], `/analytics/pet/${petId}`);
}
function useMatchAnalytics(matchId) {
  return useApiQuery(['analytics', 'match', matchId], `/analytics/match/${matchId}`);
}
function useReportUser() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return (0, react_query_1.useMutation)({
    mutationFn: function () {
      var _mutationFn = (0, _asyncToGenerator2.default)(function* (payload) {
        return yield client_1.apiClient.post('/user/moderation/report', payload);
      });
      function mutationFn(_x) {
        return _mutationFn.apply(this, arguments);
      }
      return mutationFn;
    }(),
    onSuccess: function onSuccess() {
      void queryClient.invalidateQueries({
        queryKey: ['admin', 'moderation', 'reports']
      });
    }
  });
}
function useBlockUser() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return (0, react_query_1.useMutation)({
    mutationFn: function () {
      var _mutationFn2 = (0, _asyncToGenerator2.default)(function* (payload) {
        return yield client_1.apiClient.post('/user/moderation/block', payload);
      });
      function mutationFn(_x2) {
        return _mutationFn2.apply(this, arguments);
      }
      return mutationFn;
    }(),
    onMutate: function () {
      var _onMutate = (0, _asyncToGenerator2.default)(function* (variables) {
        yield queryClient.cancelQueries({
          queryKey: ['moderation', 'state']
        });
        var previousState = queryClient.getQueryData(['moderation', 'state']);
        queryClient.setQueryData(['moderation', 'state'], function (old) {
          return _objectSpread(_objectSpread({}, old), {}, {
            blocks: [].concat((0, _toConsumableArray2.default)(old != null ? old.blocks : []), [{
              blockedUserId: variables.blockedUserId
            }])
          });
        });
        return {
          previousState: previousState
        };
      });
      function onMutate(_x3) {
        return _onMutate.apply(this, arguments);
      }
      return onMutate;
    }(),
    onError: function onError(_err, _variables, context) {
      if (context != null && context.previousState != null) {
        queryClient.setQueryData(['moderation', 'state'], context.previousState);
      }
    },
    onSettled: function onSettled() {
      void queryClient.invalidateQueries({
        queryKey: ['moderation', 'state']
      });
    }
  });
}
function useUnblockUser() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return (0, react_query_1.useMutation)({
    mutationFn: function () {
      var _mutationFn3 = (0, _asyncToGenerator2.default)(function* (vars) {
        var res = yield client_1.apiClient.delete(`/user/moderation/block/${vars.blockedUserId}`);
        return res;
      });
      function mutationFn(_x4) {
        return _mutationFn3.apply(this, arguments);
      }
      return mutationFn;
    }(),
    onMutate: function () {
      var _onMutate2 = (0, _asyncToGenerator2.default)(function* (variables) {
        yield queryClient.cancelQueries({
          queryKey: ['moderation', 'state']
        });
        var previousState = queryClient.getQueryData(['moderation', 'state']);
        queryClient.setQueryData(['moderation', 'state'], function (old) {
          return _objectSpread(_objectSpread({}, old), {}, {
            blocks: (old != null ? old.blocks : []).filter(function (b) {
              return b.blockedUserId !== variables.blockedUserId;
            })
          });
        });
        return {
          previousState: previousState
        };
      });
      function onMutate(_x5) {
        return _onMutate2.apply(this, arguments);
      }
      return onMutate;
    }(),
    onError: function onError(_err, _variables, context) {
      if (context != null && context.previousState != null) {
        queryClient.setQueryData(['moderation', 'state'], context.previousState);
      }
    },
    onSettled: function onSettled() {
      void queryClient.invalidateQueries({
        queryKey: ['moderation', 'state']
      });
    }
  });
}
function useMuteUser() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return (0, react_query_1.useMutation)({
    mutationFn: function () {
      var _mutationFn4 = (0, _asyncToGenerator2.default)(function* (payload) {
        return yield client_1.apiClient.post('/user/moderation/mute', payload);
      });
      function mutationFn(_x6) {
        return _mutationFn4.apply(this, arguments);
      }
      return mutationFn;
    }(),
    onMutate: function () {
      var _onMutate3 = (0, _asyncToGenerator2.default)(function* (variables) {
        yield queryClient.cancelQueries({
          queryKey: ['moderation', 'state']
        });
        var previousState = queryClient.getQueryData(['moderation', 'state']);
        queryClient.setQueryData(['moderation', 'state'], function (old) {
          return _objectSpread(_objectSpread({}, old), {}, {
            mutes: [].concat((0, _toConsumableArray2.default)(old != null ? old.mutes : []), [{
              mutedUserId: variables.mutedUserId,
              durationMinutes: variables.durationMinutes
            }])
          });
        });
        return {
          previousState: previousState
        };
      });
      function onMutate(_x7) {
        return _onMutate3.apply(this, arguments);
      }
      return onMutate;
    }(),
    onError: function onError(_err, _variables, context) {
      if (context != null && context.previousState != null) {
        queryClient.setQueryData(['moderation', 'state'], context.previousState);
      }
    },
    onSettled: function onSettled() {
      void queryClient.invalidateQueries({
        queryKey: ['moderation', 'state']
      });
    }
  });
}
function useAdminListReports() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var query = new URLSearchParams(Object.fromEntries(Object.entries(params).filter(function (_ref5) {
    var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
      v = _ref6[1];
    return Boolean(v);
  }).map(function (_ref7) {
    var _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
      k = _ref8[0],
      v = _ref8[1];
    return [k, String(v)];
  }))).toString();
  var path = `/admin/moderation/reports${query.length > 0 ? `?${query}` : ''}`;
  return useApiQuery(['admin', 'moderation', 'reports', query], path);
}
function useAdminUpdateReport() {
  return (0, react_query_1.useMutation)({
    mutationFn: function () {
      var _mutationFn5 = (0, _asyncToGenerator2.default)(function* (_ref9) {
        var id = _ref9.id,
          updates = _ref9.updates;
        var res = yield client_1.apiClient.patch(`/admin/moderation/reports/${id}`, updates);
        return res;
      });
      function mutationFn(_x8) {
        return _mutationFn5.apply(this, arguments);
      }
      return mutationFn;
    }()
  });
}
function useUnmuteUser() {
  var queryClient = (0, react_query_1.useQueryClient)();
  return (0, react_query_1.useMutation)({
    mutationFn: function () {
      var _mutationFn6 = (0, _asyncToGenerator2.default)(function* (vars) {
        var res = yield client_1.apiClient.delete(`/user/moderation/mute/${vars.mutedUserId}`);
        return res;
      });
      function mutationFn(_x9) {
        return _mutationFn6.apply(this, arguments);
      }
      return mutationFn;
    }(),
    onMutate: function () {
      var _onMutate4 = (0, _asyncToGenerator2.default)(function* (variables) {
        yield queryClient.cancelQueries({
          queryKey: ['moderation', 'state']
        });
        var previousState = queryClient.getQueryData(['moderation', 'state']);
        queryClient.setQueryData(['moderation', 'state'], function (old) {
          return _objectSpread(_objectSpread({}, old), {}, {
            mutes: (old != null ? old.mutes : []).filter(function (m) {
              return m.mutedUserId !== variables.mutedUserId;
            })
          });
        });
        return {
          previousState: previousState
        };
      });
      function onMutate(_x0) {
        return _onMutate4.apply(this, arguments);
      }
      return onMutate;
    }(),
    onError: function onError(_err, _variables, context) {
      if (context != null && context.previousState != null) {
        queryClient.setQueryData(['moderation', 'state'], context.previousState);
      }
    },
    onSettled: function onSettled() {
      void queryClient.invalidateQueries({
        queryKey: ['moderation', 'state']
      });
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,