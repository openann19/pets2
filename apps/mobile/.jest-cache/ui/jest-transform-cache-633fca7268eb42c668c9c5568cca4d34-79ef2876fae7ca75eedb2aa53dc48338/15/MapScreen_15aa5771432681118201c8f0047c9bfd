a9869ee78d991f6c300aad513913cf34
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MapScreen;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeMaps = _interopRequireWildcard(require("react-native-maps"));
var _vectorIcons = require("@expo/vector-icons");
var _useMapScreen2 = require("../hooks/screens/useMapScreen");
var _map = require("../components/map");
var _ScreenShell = require("../ui/layout/ScreenShell");
var _AdvancedHeader = require("../components/Advanced/AdvancedHeader");
var _haptics = require("../ui/haptics");
var _unifiedTheme = require("../theme/unified-theme");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function MapScreen(_ref) {
  var navigation = _ref.navigation;
  var _useMapScreen = (0, _useMapScreen2.useMapScreen)(),
    region = _useMapScreen.region,
    userLocation = _useMapScreen.userLocation,
    filteredPins = _useMapScreen.filteredPins,
    filters = _useMapScreen.filters,
    stats = _useMapScreen.stats,
    selectedPin = _useMapScreen.selectedPin,
    showFilters = _useMapScreen.showFilters,
    filterPanelHeight = _useMapScreen.filterPanelHeight,
    statsOpacity = _useMapScreen.statsOpacity,
    activityTypes = _useMapScreen.activityTypes,
    setSelectedPin = _useMapScreen.setSelectedPin,
    setFilters = _useMapScreen.setFilters,
    getCurrentLocation = _useMapScreen.getCurrentLocation,
    toggleFilterPanel = _useMapScreen.toggleFilterPanel,
    handlePinPress = _useMapScreen.handlePinPress,
    toggleActivity = _useMapScreen.toggleActivity,
    getMarkerColor = _useMapScreen.getMarkerColor,
    getStableMatchFlag = _useMapScreen.getStableMatchFlag,
    heatmapPoints = _useMapScreen.heatmapPoints;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showCreate = _useState2[0],
    setShowCreate = _useState2[1];
  var handleARPress = function handleARPress() {
    _haptics.haptic.confirm();
    if (userLocation) {
      navigation.navigate("ARScentTrails", {
        initialLocation: userLocation
      });
    }
  };
  return (0, _jsxRuntime.jsx)(_ScreenShell.ScreenShell, {
    header: (0, _jsxRuntime.jsx)(_AdvancedHeader.AdvancedHeader, _objectSpread({}, _AdvancedHeader.HeaderConfigs.glass({
      title: "Pet Activity Map",
      subtitle: "Real-time locations",
      showBackButton: true,
      onBackPress: function onBackPress() {
        _haptics.haptic.tap();
        navigation.goBack();
      }
    }))),
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      testID: "MapScreen",
      style: styles.container,
      children: [(0, _jsxRuntime.jsxs)(_reactNativeMaps.default, {
        provider: _reactNativeMaps.PROVIDER_GOOGLE,
        style: styles.map,
        initialRegion: region,
        showsUserLocation: true,
        testID: "map-view",
        children: [filters != null && filters.radius && userLocation ? (0, _jsxRuntime.jsx)(_reactNativeMaps.Circle, {
          testID: "map-radius",
          center: {
            latitude: userLocation.latitude,
            longitude: userLocation.longitude
          },
          radius: filters.radius,
          strokeColor: "rgba(99,102,241,0.4)",
          fillColor: "rgba(99,102,241,0.15)"
        }) : null, (0, _jsxRuntime.jsx)(_map.HeatmapOverlay, {
          points: heatmapPoints
        }), filteredPins.map(function (pin) {
          return (0, _jsxRuntime.jsx)(_reactNativeMaps.Marker, {
            testID: `marker-${pin._id}`,
            coordinate: {
              latitude: pin.latitude,
              longitude: pin.longitude
            },
            pinColor: getMarkerColor(pin.activity, getStableMatchFlag(pin)),
            onPress: function onPress() {
              setSelectedPin(pin);
            },
            title: pin.activity,
            description: pin.message || ""
          }, pin._id);
        })]
      }), (0, _jsxRuntime.jsx)(_map.MapStatsPanel, {
        stats: stats,
        opacity: statsOpacity
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.fabs,
        children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.fab, styles.fabLocate],
          onPress: function onPress() {
            _haptics.haptic.tap();
            getCurrentLocation();
          },
          testID: "fab-locate",
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.fabText,
            children: "\uD83D\uDCCD"
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.fab, styles.fabAR],
          onPress: function onPress() {
            _haptics.haptic.confirm();
            navigation.navigate("ARScentTrails", {
              initialLocation: userLocation
            });
          },
          testID: "fab-ar",
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.fabText,
            children: "\uD83D\uDC41\uFE0F"
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.fab, styles.fabCreate],
          onPress: function onPress() {
            _haptics.haptic.confirm();
            setShowCreate(true);
          },
          testID: "fab-create-activity",
          children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "add",
            size: 20,
            color: "#fff"
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.fab, styles.fabFilters],
          onPress: function onPress() {
            _haptics.haptic.tap();
            toggleFilterPanel();
          },
          testID: "btn-filters",
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.fabText,
            children: "\u2699\uFE0F"
          })
        })]
      }), showFilters && (0, _jsxRuntime.jsx)(_reactNative.View, {
        testID: "filters-modal-wrapper",
        children: (0, _jsxRuntime.jsx)(_map.MapFiltersModal, {
          filters: filters,
          activityTypes: activityTypes,
          onToggleActivity: toggleActivity,
          onSetFilters: setFilters
        })
      }), (0, _jsxRuntime.jsx)(_map.PinDetailsModal, {
        visible: !!selectedPin,
        pin: selectedPin,
        activityTypes: activityTypes.map(function (a) {
          return a.id;
        }),
        onClose: function onClose() {
          setSelectedPin(null);
        },
        onLike: function onLike() {
          return navigation.navigate("Swipe");
        },
        onChat: function onChat() {
          navigation.navigate("Matches");
        },
        testID: "pin-details-modal"
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        testID: "create-activity-modal",
        children: (0, _jsxRuntime.jsx)(_map.CreateActivityModal, {
          visible: showCreate,
          onClose: function onClose() {
            _haptics.haptic.selection();
            setShowCreate(false);
          },
          pets: [],
          activityTypes: activityTypes
        })
      })]
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff"
  },
  map: {
    flex: 1
  },
  fabs: {
    position: "absolute",
    right: 12,
    bottom: 24,
    gap: 10
  },
  fab: {
    width: 44,
    height: 44,
    borderRadius: 22,
    alignItems: "center",
    justifyContent: "center",
    shadowColor: "#000",
    shadowOpacity: 0.15,
    shadowRadius: 8,
    elevation: 6
  },
  fabLocate: {
    backgroundColor: "#fff"
  },
  fabAR: {
    backgroundColor: "#fff"
  },
  fabFilters: {
    backgroundColor: "#fff"
  },
  fabCreate: {
    backgroundColor: _unifiedTheme.Theme.colors.primary[500]
  },
  fabText: {
    fontSize: 18
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,