0ea6b3ece3275cb5fb4928acfaf26200
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PremiumButton = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _vectorIcons = require("@expo/vector-icons");
var _core = require("@pawfectmatch/core");
var _expoBlur = require("expo-blur");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  SCREEN_WIDTH = _Dimensions$get.width;
function PremiumButtonComponent(_ref) {
  var title = _ref.title,
    onPress = _ref.onPress,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? "primary" : _ref$variant,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? "md" : _ref$size,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    icon = _ref.icon,
    _ref$iconPosition = _ref.iconPosition,
    iconPosition = _ref$iconPosition === void 0 ? "left" : _ref$iconPosition,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    _ref$haptic = _ref.haptic,
    haptic = _ref$haptic === void 0 ? "medium" : _ref$haptic,
    _ref$glow = _ref.glow,
    glow = _ref$glow === void 0 ? false : _ref$glow,
    style = _ref.style;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isPressed = _useState2[0],
    setIsPressed = _useState2[1];
  var animatedScale = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var animatedGlow = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var triggerHaptic = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "medium";
      if (!haptic) return;
      try {
        switch (type) {
          case "light":
            yield Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
            break;
          case "medium":
            yield Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
            break;
          case "heavy":
            yield Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);
            setTimeout((0, _asyncToGenerator2.default)(function* () {
              yield Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
            }), 100);
            break;
        }
      } catch (error) {
        _core.logger.debug("Haptic feedback not available");
      }
    });
    return function triggerHaptic() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handlePressIn = function handlePressIn() {
    setIsPressed(true);
    var animations = [_reactNative.Animated.spring(animatedScale, {
      toValue: 0.95,
      useNativeDriver: true,
      tension: 400,
      friction: 8
    })];
    if (glow) {
      animations.push(_reactNative.Animated.timing(animatedGlow, {
        toValue: 1,
        duration: 120,
        useNativeDriver: false
      }));
    }
    _reactNative.Animated.parallel(animations).start();
    triggerHaptic("light");
  };
  var handlePressOut = function handlePressOut() {
    setIsPressed(false);
    var animations = [_reactNative.Animated.spring(animatedScale, {
      toValue: 1,
      useNativeDriver: true,
      tension: 400,
      friction: 6
    })];
    if (glow) {
      animations.push(_reactNative.Animated.timing(animatedGlow, {
        toValue: 0,
        duration: 180,
        useNativeDriver: false
      }));
    }
    _reactNative.Animated.parallel(animations).start();
  };
  var handlePress = function handlePress() {
    if (disabled || loading) return;
    triggerHaptic("medium");
    onPress();
  };
  var getVariantStyles = function getVariantStyles() {
    var _variants$variant;
    var variants = {
      primary: {
        colors: ["Theme.colors.primary[500]", "Theme.colors.primary[400]"],
        textColor: "Theme.colors.neutral[0]",
        shadowColor: "Theme.colors.primary[500]"
      },
      secondary: {
        colors: ["Theme.colors.secondary[500]", "#38bdf8"],
        textColor: "Theme.colors.neutral[0]",
        shadowColor: "Theme.colors.secondary[500]"
      },
      glass: {
        colors: ["transparent", "transparent"],
        textColor: "Theme.colors.neutral[700]",
        shadowColor: "Theme.colors.neutral[950]",
        blur: true
      },
      gradient: {
        colors: ["#667eea", "#764ba2", "#f093fb", "#f5576c"],
        textColor: "Theme.colors.neutral[0]",
        shadowColor: "#667eea"
      },
      neon: {
        colors: ["#1a1a1a", "#1a1a1a"],
        textColor: "Theme.colors.primary[500]",
        shadowColor: "Theme.colors.primary[500]",
        border: true,
        borderColor: "Theme.colors.primary[500]"
      },
      ghost: {
        colors: ["transparent", "transparent"],
        textColor: "Theme.colors.neutral[500]",
        shadowColor: "transparent",
        border: true,
        borderColor: "Theme.colors.neutral[300]"
      }
    };
    return (_variants$variant = variants[variant]) != null ? _variants$variant : variants.primary;
  };
  var getSizeStyles = function getSizeStyles() {
    var sizes = {
      sm: {
        height: 36,
        paddingHorizontal: 16,
        fontSize: 14
      },
      md: {
        height: 44,
        paddingHorizontal: 24,
        fontSize: 16
      },
      lg: {
        height: 52,
        paddingHorizontal: 32,
        fontSize: 18
      }
    };
    return sizes[size] || sizes.md;
  };
  var variantStyle = getVariantStyles();
  var sizeStyle = getSizeStyles();
  var renderIcon = function renderIcon() {
    if (!icon) return null;
    return (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
      name: icon,
      size: sizeStyle.fontSize + 2,
      color: loading ? "transparent" : variantStyle.textColor,
      style: {
        marginRight: iconPosition === "left" ? 8 : 0,
        marginLeft: iconPosition === "right" ? 8 : 0
      }
    });
  };
  var buttonStyle = _objectSpread(_objectSpread({
    width: fullWidth ? "100%" : "auto",
    minWidth: fullWidth ? undefined : 120,
    height: sizeStyle.height,
    paddingHorizontal: sizeStyle.paddingHorizontal,
    borderRadius: sizeStyle.height / 2,
    opacity: disabled ? 0.5 : 1
  }, variantStyle.border && {
    borderWidth: 2,
    borderColor: variantStyle.borderColor || variantStyle.shadowColor
  }), style);
  if (variant === "glass") {
    return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      style: _reactNative.StyleSheet.flatten([buttonStyle, {
        transform: [{
          scale: animatedScale
        }]
      }]),
      children: [(0, _jsxRuntime.jsx)(_expoBlur.BlurView, {
        intensity: 80,
        style: _reactNative.StyleSheet.absoluteFill
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([_reactNative.StyleSheet.absoluteFillObject, {
          backgroundColor: "rgba(255, 255, 255, 0.1)"
        }])
      }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        onPress: handlePress,
        onPressIn: handlePressIn,
        onPressOut: handlePressOut,
        disabled: disabled || loading,
        style: styles.buttonContent,
        activeOpacity: 0.9,
        children: [iconPosition === "left" && renderIcon(), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _reactNative.StyleSheet.flatten([styles.buttonText, {
            color: variantStyle.textColor,
            fontSize: sizeStyle.fontSize
          }]),
          children: title
        }), iconPosition === "right" && renderIcon(), loading && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.loadingContainer,
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _reactNative.StyleSheet.flatten([styles.loadingDot, {
              backgroundColor: variantStyle.textColor
            }])
          })
        })]
      })]
    });
  }
  if (variant === "gradient") {
    return (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      style: _reactNative.StyleSheet.flatten([buttonStyle, {
        transform: [{
          scale: animatedScale
        }]
      }]),
      children: [(0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
        colors: variantStyle.colors,
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        },
        style: _reactNative.StyleSheet.absoluteFill
      }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        onPress: handlePress,
        onPressIn: handlePressIn,
        onPressOut: handlePressOut,
        disabled: disabled || loading,
        style: styles.buttonContent,
        activeOpacity: 0.9,
        children: [iconPosition === "left" && renderIcon(), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: _reactNative.StyleSheet.flatten([styles.buttonText, {
            color: variantStyle.textColor,
            fontSize: sizeStyle.fontSize
          }]),
          children: title
        }), iconPosition === "right" && renderIcon(), loading && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.loadingContainer,
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: _reactNative.StyleSheet.flatten([styles.loadingDot, {
              backgroundColor: variantStyle.textColor
            }])
          })
        })]
      })]
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
    style: _reactNative.StyleSheet.flatten([buttonStyle, {
      backgroundColor: variantStyle.colors[0],
      transform: [{
        scale: animatedScale
      }]
    }, glow && {
      shadowColor: variantStyle.shadowColor,
      shadowOffset: {
        width: 0,
        height: 4
      },
      shadowOpacity: animatedGlow,
      shadowRadius: 12,
      elevation: 8
    }]),
    children: (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      onPress: handlePress,
      onPressIn: handlePressIn,
      onPressOut: handlePressOut,
      disabled: disabled || loading,
      style: styles.buttonContent,
      activeOpacity: 0.95,
      children: [iconPosition === "left" && renderIcon(), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: _reactNative.StyleSheet.flatten([styles.buttonText, {
          color: variantStyle.textColor,
          fontSize: sizeStyle.fontSize
        }]),
        children: title
      }), iconPosition === "right" && renderIcon(), loading && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: _reactNative.StyleSheet.flatten([styles.loadingDot, {
            backgroundColor: variantStyle.textColor
          }])
        })
      })]
    })
  });
}
var PremiumButton = exports.PremiumButton = PremiumButtonComponent;
var styles = _reactNative.StyleSheet.create({
  buttonContent: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingHorizontal: 16
  },
  buttonText: {
    fontWeight: "600",
    textAlign: "center"
  },
  loadingContainer: {
    position: "absolute",
    right: 16,
    justifyContent: "center",
    alignItems: "center"
  },
  loadingDot: {
    width: 6,
    height: 6,
    borderRadius: 3,
    justifyContent: "center",
    alignItems: "center"
  }
});
var _default = exports.default = PremiumButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,