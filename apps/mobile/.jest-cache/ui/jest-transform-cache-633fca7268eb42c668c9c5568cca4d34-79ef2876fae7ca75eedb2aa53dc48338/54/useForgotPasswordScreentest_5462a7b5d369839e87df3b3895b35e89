039a191778b7df40808960311a0e951c
"use strict";

_getJestObj().mock("../../../services/AuthService", function () {
  return {
    authService: {
      forgotPassword: jest.fn()
    }
  };
});
_getJestObj().mock("react-native", function () {
  return {
    Alert: {
      alert: jest.fn()
    }
  };
});
_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(),
    notificationAsync: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _AuthService = require("../../../services/AuthService");
var _useForgotPasswordScreen = require("../useForgotPasswordScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAuthService = _AuthService.authService;
describe("useForgotPasswordScreen", function () {
  var mockNavigation = {
    goBack: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe("Initial State", function () {
    it("should initialize with empty email", function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useForgotPasswordScreen.useForgotPasswordScreen)({
            navigation: mockNavigation
          });
        }),
        result = _renderHook.result;
      expect(result.current.values.email).toBe("");
      expect(result.current.loading).toBe(false);
    });
  });
  describe("Validation", function () {
    it("should validate email format", (0, _asyncToGenerator2.default)(function* () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useForgotPasswordScreen.useForgotPasswordScreen)({
            navigation: mockNavigation
          });
        }),
        result = _renderHook2.result;
      (0, _reactNative.act)(function () {
        result.current.setValue("email", "invalid-email");
      });
      yield (0, _reactNative.waitFor)(function () {
        expect(result.current.errors.email).toBeDefined();
      });
    }));
    it("should require email", function () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useForgotPasswordScreen.useForgotPasswordScreen)({
            navigation: mockNavigation
          });
        }),
        result = _renderHook3.result;
      expect(result.current.isValid).toBe(false);
    });
  });
  describe("handleSubmit", function () {
    it("should send password reset successfully", (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.forgotPassword.mockResolvedValue({
        success: true,
        message: "Email sent"
      });
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useForgotPasswordScreen.useForgotPasswordScreen)({
            navigation: mockNavigation
          });
        }),
        result = _renderHook4.result;
      (0, _reactNative.act)(function () {
        result.current.setValue("email", "test@example.com");
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleSubmit();
      }));
      expect(mockAuthService.forgotPassword).toHaveBeenCalledWith("test@example.com");
      expect(_reactNative2.Alert.alert).toHaveBeenCalled();
    }));
    it("should handle API errors", (0, _asyncToGenerator2.default)(function* () {
      mockAuthService.forgotPassword.mockRejectedValue(new Error("API Error"));
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useForgotPasswordScreen.useForgotPasswordScreen)({
            navigation: {
              goBack: jest.fn()
            }
          });
        }),
        result = _renderHook5.result;
      (0, _reactNative.act)(function () {
        result.current.setValue("email", "test@example.com");
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.handleSubmit();
      }));
      expect(_reactNative2.Alert.alert).toHaveBeenCalled();
    }));
  });
  describe("Navigation", function () {
    it("should provide navigation handlers", function () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useForgotPasswordScreen.useForgotPasswordScreen)({
            navigation: mockNavigation
          });
        }),
        result = _renderHook6.result;
      expect(result.current.navigateBack).toBeDefined();
      expect(typeof result.current.navigateBack).toBe("function");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,