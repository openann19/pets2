d7395ea8e2649c2cf000833c8bde5ab6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = exports.LogLevel = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var Sentry = _interopRequireWildcard(require("@sentry/react-native"));
var Keychain = _interopRequireWildcard(require("react-native-keychain"));
var Aes = _interopRequireWildcard(require("react-native-aes-crypto"));
var _reactNativeEncryptedStorage = _interopRequireDefault(require("react-native-encrypted-storage"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var sentry = Sentry;
var LogLevel = exports.LogLevel = function (LogLevel) {
  LogLevel["DEBUG"] = "debug";
  LogLevel["INFO"] = "info";
  LogLevel["WARN"] = "warn";
  LogLevel["ERROR"] = "error";
  LogLevel["SECURITY"] = "security";
  LogLevel["PERFORMANCE"] = "performance";
  return LogLevel;
}({});
var MobileLogger = function () {
  function MobileLogger() {
    (0, _classCallCheck2.default)(this, MobileLogger);
    this.isDevelopment = __DEV__;
    this.userInfo = null;
    this.logBuffer = [];
    this.offlineBuffer = [];
    this.encryptionKey = null;
    this.encryptionSalt = null;
    this.ENCRYPTION_KEY_SIZE = 32;
    this.ENCRYPTION_IV_SIZE = 16;
    this.ENCRYPTION_KEY_STORAGE_KEY = "logger_encryption_key";
    this.ENCRYPTION_SALT_STORAGE_KEY = "logger_encryption_salt";
    this.MAX_LOG_BUFFER_SIZE = 1000;
    this.MAX_LOG_SIZE = 32768;
    this.MAX_OFFLINE_BUFFER_SIZE = 500;
    this.rateLimitBackoff = 100;
    this.rateLimits = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, LogLevel.DEBUG, {
      points: 1000,
      interval: 60000
    }), LogLevel.INFO, {
      points: 500,
      interval: 60000
    }), LogLevel.WARN, {
      points: 100,
      interval: 60000
    }), LogLevel.ERROR, {
      points: 50,
      interval: 60000
    }), LogLevel.SECURITY, {
      points: 20,
      interval: 60000
    }), LogLevel.PERFORMANCE, {
      points: 200,
      interval: 60000
    });
    this.rateTracking = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, LogLevel.DEBUG, {
      count: 0,
      resetTime: Date.now()
    }), LogLevel.INFO, {
      count: 0,
      resetTime: Date.now()
    }), LogLevel.WARN, {
      count: 0,
      resetTime: Date.now()
    }), LogLevel.ERROR, {
      count: 0,
      resetTime: Date.now()
    }), LogLevel.SECURITY, {
      count: 0,
      resetTime: Date.now()
    }), LogLevel.PERFORMANCE, {
      count: 0,
      resetTime: Date.now()
    });
    this.lastLogTime = 0;
    this.sessionId = this.generateSessionId();
    this.appVersion = "1.0.0";
    this.setupLogRotation();
    void this.initializeEncryption();
  }
  return (0, _createClass2.default)(MobileLogger, [{
    key: "initializeEncryption",
    value: (function () {
      var _initializeEncryption = (0, _asyncToGenerator2.default)(function* () {
        try {
          var storedKey = yield Keychain.getGenericPassword({
            service: this.ENCRYPTION_KEY_STORAGE_KEY
          });
          var storedSalt = yield Keychain.getGenericPassword({
            service: this.ENCRYPTION_SALT_STORAGE_KEY
          });
          if (storedKey && storedSalt) {
            this.encryptionKey = storedKey.password;
            this.encryptionSalt = storedSalt.password;
          } else {
            var _key = yield this.generateSecureKey();
            var salt = yield this.generateSecureRandomBytes(this.ENCRYPTION_KEY_SIZE);
            yield Keychain.setGenericPassword(this.ENCRYPTION_KEY_STORAGE_KEY, _key, {
              service: this.ENCRYPTION_KEY_STORAGE_KEY
            });
            yield Keychain.setGenericPassword(this.ENCRYPTION_SALT_STORAGE_KEY, salt, {
              service: this.ENCRYPTION_SALT_STORAGE_KEY
            });
            this.encryptionKey = _key;
            this.encryptionSalt = salt;
          }
        } catch (error) {
          var errorMessage = error instanceof Error ? error.message : String(error);
          this.error("Failed to initialize encryption", {
            error: new Error(errorMessage),
            component: "Logger",
            action: "initializeEncryption"
          });
          this.encryptionKey = null;
          this.encryptionSalt = null;
        }
      });
      function initializeEncryption() {
        return _initializeEncryption.apply(this, arguments);
      }
      return initializeEncryption;
    }())
  }, {
    key: "setUserContext",
    value: function setUserContext(userId) {
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.userInfo = {
        id: userId
      };
      try {
        sentry.setUser(_objectSpread({
          id: userId
        }, properties));
      } catch (_unused) {}
    }
  }, {
    key: "clearUserContext",
    value: function clearUserContext() {
      this.userInfo = null;
      this.clearSentryContext();
    }
  }, {
    key: "generateSecureKey",
    value: (function () {
      var _generateSecureKey = (0, _asyncToGenerator2.default)(function* () {
        try {
          var _this$encryptionSalt;
          var randomBytes = yield this.generateSecureRandomBytes(this.ENCRYPTION_KEY_SIZE);
          return yield Aes.pbkdf2(randomBytes, (_this$encryptionSalt = this.encryptionSalt) != null ? _this$encryptionSalt : yield this.generateSecureRandomBytes(this.ENCRYPTION_KEY_SIZE), 10000, this.ENCRYPTION_KEY_SIZE, "sha256");
        } catch (error) {
          throw new Error("Failed to generate secure key: " + String(error));
        }
      });
      function generateSecureKey() {
        return _generateSecureKey.apply(this, arguments);
      }
      return generateSecureKey;
    }())
  }, {
    key: "generateSecureRandomBytes",
    value: (function () {
      var _generateSecureRandomBytes = (0, _asyncToGenerator2.default)(function* (size) {
        try {
          var _key2 = yield Aes.randomKey(size);
          return _key2;
        } catch (error) {
          throw new Error("Failed to generate random bytes: " + String(error));
        }
      });
      function generateSecureRandomBytes(_x) {
        return _generateSecureRandomBytes.apply(this, arguments);
      }
      return generateSecureRandomBytes;
    }())
  }, {
    key: "encryptData",
    value: (function () {
      var _encryptData = (0, _asyncToGenerator2.default)(function* (data) {
        try {
          if (!this.encryptionKey || !this.encryptionSalt) {
            throw new Error("Encryption not initialized");
          }
          var iv = yield this.generateSecureRandomBytes(this.ENCRYPTION_IV_SIZE);
          var ciphertext = yield Aes.encrypt(data, this.encryptionKey, iv, "aes-256-cbc");
          return {
            ciphertext: ciphertext,
            iv: iv
          };
        } catch (error) {
          throw new Error("Encryption failed: " + String(error));
        }
      });
      function encryptData(_x2) {
        return _encryptData.apply(this, arguments);
      }
      return encryptData;
    }())
  }, {
    key: "decryptData",
    value: (function () {
      var _decryptData = (0, _asyncToGenerator2.default)(function* (encryptedData) {
        try {
          if (!this.encryptionKey || !this.encryptionSalt) {
            throw new Error("Encryption not initialized");
          }
          var decrypted = yield Aes.decrypt(encryptedData.ciphertext, this.encryptionKey, encryptedData.iv, "aes-128-cbc");
          return decrypted;
        } catch (error) {
          throw new Error("Decryption failed: " + String(error));
        }
      });
      function decryptData(_x3) {
        return _decryptData.apply(this, arguments);
      }
      return decryptData;
    }())
  }, {
    key: "setupLogRotation",
    value: function setupLogRotation() {
      var _this = this;
      setInterval(function () {
        if (_this.logBuffer.length > 0) {
          void _this.rotateAndPersistLogs();
        }
      }, 60000);
    }
  }, {
    key: "rotateAndPersistLogs",
    value: (function () {
      var _rotateAndPersistLogs = (0, _asyncToGenerator2.default)(function* () {
        var _this2 = this;
        try {
          var logsToRotate = (0, _toConsumableArray2.default)(this.logBuffer);
          this.logBuffer = [];
          var encryptedLogs = yield Promise.all(logsToRotate.map(function () {
            var _ref = (0, _asyncToGenerator2.default)(function* (log) {
              return _this2.shouldEncryptLog(log) ? yield _this2.encryptLogEntry(log) : log;
            });
            return function (_x4) {
              return _ref.apply(this, arguments);
            };
          }()));
          this.logBuffer = encryptedLogs.slice(-this.MAX_LOG_BUFFER_SIZE);
        } catch (error) {
          console.error("Failed to rotate logs:", error instanceof Error ? error.message : String(error));
        }
      });
      function rotateAndPersistLogs() {
        return _rotateAndPersistLogs.apply(this, arguments);
      }
      return rotateAndPersistLogs;
    }())
  }, {
    key: "shouldEncryptLog",
    value: function shouldEncryptLog(log) {
      return log.level === LogLevel.SECURITY || log.metadata.userId !== undefined || log.metadata.sessionId !== undefined;
    }
  }, {
    key: "encryptLogEntry",
    value: (function () {
      var _encryptLogEntry = (0, _asyncToGenerator2.default)(function* (log) {
        try {
          if (!this.encryptionKey) {
            return _objectSpread(_objectSpread({}, log), {}, {
              message: "[REDACTED] Encryption unavailable",
              metadata: {
                timestamp: log.timestamp,
                level: log.level,
                isRedacted: true
              }
            });
          }
          var encryptedData = yield this.encryptData(JSON.stringify({
            message: log.message,
            metadata: this.sanitizeMetadata(log.metadata)
          }));
          return _objectSpread(_objectSpread({}, log), {}, {
            message: "[ENCRYPTED]",
            metadata: _objectSpread(_objectSpread({}, log.metadata), {}, {
              isEncrypted: true,
              encryptedAt: new Date().toISOString(),
              encryptedData: encryptedData,
              integrity: {
                hash: yield this.generateHMAC(log.message + JSON.stringify(log.metadata)),
                timestamp: new Date().toISOString()
              }
            })
          });
        } catch (error) {
          this.error("Log encryption failed", {
            error: error instanceof Error ? error : new Error(String(error)),
            component: "Logger",
            action: "encryptLogEntry"
          });
          return _objectSpread(_objectSpread({}, log), {}, {
            message: "[REDACTED] Log encryption failed",
            metadata: {
              timestamp: log.timestamp,
              level: log.level,
              isRedacted: true,
              error: new Error("Encryption failed")
            }
          });
        }
      });
      function encryptLogEntry(_x5) {
        return _encryptLogEntry.apply(this, arguments);
      }
      return encryptLogEntry;
    }())
  }, {
    key: "generateHMAC",
    value: (function () {
      var _generateHMAC = (0, _asyncToGenerator2.default)(function* (data) {
        try {
          if (!this.encryptionKey || !this.encryptionSalt) {
            throw new Error("Encryption not initialized");
          }
          var hmac = yield Aes.hmac256(data, this.encryptionKey);
          return hmac;
        } catch (error) {
          throw new Error("HMAC generation failed: " + String(error));
        }
      });
      function generateHMAC(_x6) {
        return _generateHMAC.apply(this, arguments);
      }
      return generateHMAC;
    }())
  }, {
    key: "generateSessionId",
    value: function generateSessionId() {
      var timestamp = Date.now();
      var randomValue = Math.random().toString(36).substring(2, 10);
      return `mobile_session_${timestamp.toString()}_${randomValue}`;
    }
  }, {
    key: "sanitizeMetadata",
    value: function sanitizeMetadata(data) {
      var _this3 = this;
      if (data === undefined) {
        return {};
      }
      var sanitized = {};
      var sensitiveFields = ["password", "token", "accessToken", "refreshToken", "secret", "apiKey", "authorization", "auth", "credentials", "credit", "card", "ccv", "cvv", "ssn", "social", "address", "phone", "birth", "zip", "postal", "payment"];
      var hashValue = function hashValue(value) {
        if (value === undefined || value === null || value === "") {
          return "empty";
        }
        var hash = 0;
        for (var i = 0; i < value.length; i++) {
          var char = value.charCodeAt(i);
          hash = (hash << 5) - hash + char;
          hash = hash & hash;
        }
        return hash.toString(16).substring(0, 8);
      };
      var _loop = function _loop() {
        var lowerKey = _key3.toLowerCase();
        if (sensitiveFields.some(function (field) {
          return lowerKey.includes(field);
        })) {
          if (typeof value === "string" && value !== "") {
            sanitized[_key3] = `[REDACTED:${hashValue(value)}]`;
          } else {
            sanitized[_key3] = "[REDACTED]";
          }
        } else if (value instanceof Error) {
          var _value$stack$split, _value$stack, _value$message, _value$name, _code;
          var stackLines = (_value$stack$split = (_value$stack = value.stack) == null ? void 0 : _value$stack.split("\n")) != null ? _value$stack$split : [];
          var sensitivePatterns = [/password=/i, /api_?key=/i, /secret=/i, /token=/i, /auth=/i, /bearer /i, /basic /i, /\/users\/\d+/i, /\b[\w.%+-]+@[\w.-]+\.[A-Za-z]{2,}\b/, /\b\d{4}[- ]?\d{4}[- ]?\d{4}[- ]?\d{4}\b/];
          var sanitizedStack = _this3.isDevelopment ? stackLines.filter(function (line) {
            return !sensitivePatterns.some(function (pattern) {
              return pattern.test(line);
            });
          }).join("\n") : undefined;
          sanitized[_key3] = {
            message: (_value$message = value.message) != null ? _value$message : "Unknown error",
            stack: sanitizedStack,
            name: (_value$name = value.name) != null ? _value$name : "Error",
            code: (_code = value.code) != null ? _code : "UNKNOWN"
          };
        } else if (value !== null && typeof value === "object") {
          sanitized[_key3] = _this3.sanitizeMetadata(value);
        } else {
          sanitized[_key3] = value;
        }
      };
      for (var _ref2 of Object.entries(data)) {
        var _ref3 = (0, _slicedToArray2.default)(_ref2, 2);
        var _key3 = _ref3[0];
        var value = _ref3[1];
        _loop();
      }
      return sanitized;
    }
  }, {
    key: "formatLogMessage",
    value: function formatLogMessage(level, message, metadata) {
      var timestamp = new Date().toISOString();
      var sanitized = this.sanitizeMetadata(metadata);
      var parts = [`[${timestamp}]`, `[${level.toUpperCase()}]`, message];
      if (Object.keys(sanitized).length > 0) {
        parts.push(JSON.stringify(sanitized, null, 2));
      }
      return parts.join(" ");
    }
  }, {
    key: "validateLogEntry",
    value: function validateLogEntry(message, metadata) {
      if (message.length === 0) {
        return false;
      }
      var totalSize = new TextEncoder().encode(JSON.stringify({
        message: message,
        metadata: metadata
      })).length;
      if (totalSize > this.MAX_LOG_SIZE) {
        this.warn("Log entry exceeded maximum size limit", {
          size: totalSize,
          limit: this.MAX_LOG_SIZE,
          truncated: true
        });
        return false;
      }
      return true;
    }
  }, {
    key: "checkRateLimit",
    value: function checkRateLimit(level) {
      if (this.isDevelopment) {
        return true;
      }
      var now = Date.now();
      var tracking = this.rateTracking[level];
      var limits = this.rateLimits[level];
      if (now - tracking.resetTime >= limits.interval) {
        tracking.count = 0;
        tracking.resetTime = now;
      }
      if (tracking.count >= limits.points) {
        return false;
      }
      tracking.count++;
      return true;
    }
  }, {
    key: "applyRateLimit",
    value: function applyRateLimit() {
      if (this.isDevelopment) {
        return true;
      }
      var now = Date.now();
      var timeSinceLastLog = now - this.lastLogTime;
      if (timeSinceLastLog < this.rateLimitBackoff) {
        this.rateLimitBackoff = Math.min(this.rateLimitBackoff * 2, 5000);
        return false;
      }
      if (timeSinceLastLog > 1000) {
        this.rateLimitBackoff = 100;
      }
      this.lastLogTime = now;
      return true;
    }
  }, {
    key: "bufferOfflineLog",
    value: (function () {
      var _bufferOfflineLog = (0, _asyncToGenerator2.default)(function* (entry) {
        if (entry.level === LogLevel.DEBUG || entry.level === LogLevel.INFO) {
          return;
        }
        try {
          this.offlineBuffer.push(entry);
          if (this.offlineBuffer.length > this.MAX_OFFLINE_BUFFER_SIZE) {
            this.offlineBuffer = this.offlineBuffer.slice(-this.MAX_OFFLINE_BUFFER_SIZE);
          }
          var storageKey = `offline_log_${entry.timestamp}_${this.hashIdentifier(entry.message)}`;
          var encryptedData = yield this.encryptData(JSON.stringify(entry));
          yield _reactNativeEncryptedStorage.default.setItem(storageKey, JSON.stringify({
            data: encryptedData,
            timestamp: entry.timestamp,
            level: entry.level,
            hash: yield this.generateHMAC(JSON.stringify(entry))
          }));
          yield this.cleanupOldOfflineLogs();
        } catch (error) {
          var errorMessage = error instanceof Error ? error.message : String(error);
          this.error("Failed to buffer offline log", {
            error: new Error(errorMessage),
            component: "Logger",
            action: "bufferOfflineLog"
          });
        }
      });
      function bufferOfflineLog(_x7) {
        return _bufferOfflineLog.apply(this, arguments);
      }
      return bufferOfflineLog;
    }())
  }, {
    key: "cleanupOldOfflineLogs",
    value: (function () {
      var _cleanupOldOfflineLogs = (0, _asyncToGenerator2.default)(function* () {
        try {
          var allKeys = Object.keys((yield _reactNativeEncryptedStorage.default.getItem("__keys__")) || {});
          var offlineLogKeys = allKeys.filter(function (key) {
            return key.startsWith("offline_log_");
          });
          offlineLogKeys.sort(function (a, b) {
            var _a$split = a.split("_"),
              _a$split2 = (0, _slicedToArray2.default)(_a$split, 3),
              _a$split2$ = _a$split2[2],
              timestampA = _a$split2$ === void 0 ? "0" : _a$split2$;
            var _b$split = b.split("_"),
              _b$split2 = (0, _slicedToArray2.default)(_b$split, 3),
              _b$split2$ = _b$split2[2],
              timestampB = _b$split2$ === void 0 ? "0" : _b$split2$;
            return timestampA.localeCompare(timestampB);
          });
          var logsToRemove = offlineLogKeys.slice(0, -this.MAX_OFFLINE_BUFFER_SIZE);
          yield Promise.all(logsToRemove.map(function (key) {
            return _reactNativeEncryptedStorage.default.removeItem(key);
          }));
          if (logsToRemove.length > 0) {
            this.info("Cleaned up old offline logs", {
              component: "Logger",
              action: "cleanupOldOfflineLogs",
              removedCount: logsToRemove.length
            });
          }
        } catch (error) {
          var errorMessage = error instanceof Error ? error.message : String(error);
          this.error("Failed to cleanup old offline logs", {
            error: new Error(errorMessage),
            component: "Logger",
            action: "cleanupOldOfflineLogs"
          });
        }
      });
      function cleanupOldOfflineLogs() {
        return _cleanupOldOfflineLogs.apply(this, arguments);
      }
      return cleanupOldOfflineLogs;
    }())
  }, {
    key: "loadOfflineLogs",
    value: (function () {
      var _loadOfflineLogs = (0, _asyncToGenerator2.default)(function* () {
        try {
          var allKeys = Object.keys((yield _reactNativeEncryptedStorage.default.getItem("__keys__")) || {});
          var offlineLogKeys = allKeys.filter(function (key) {
            return key.startsWith("offline_log_");
          });
          var encryptedLogs = yield Promise.all(offlineLogKeys.map(function () {
            var _ref4 = (0, _asyncToGenerator2.default)(function* (key) {
              try {
                var encrypted = yield _reactNativeEncryptedStorage.default.getItem(key);
                if (!encrypted) return null;
                var parsedItem = JSON.parse(encrypted);
                return _objectSpread({
                  key: key
                }, parsedItem);
              } catch (_error) {
                yield _reactNativeEncryptedStorage.default.removeItem(key);
                return null;
              }
            });
            return function (_x8) {
              return _ref4.apply(this, arguments);
            };
          }()));
          for (var log of encryptedLogs) {
            if (!log) continue;
            try {
              var decrypted = yield this.decryptData(log.data);
              var entry = JSON.parse(decrypted);
              var calculatedHash = yield this.generateHMAC(JSON.stringify(entry));
              if (calculatedHash !== log.hash) {
                this.error("Offline log integrity check failed", {
                  error: new Error("Log tampering detected"),
                  component: "Logger",
                  action: "loadOfflineLogs",
                  key: log.key
                });
                yield _reactNativeEncryptedStorage.default.removeItem(log.key);
                continue;
              }
              this.offlineBuffer.push(entry);
            } catch (decryptError) {
              yield _reactNativeEncryptedStorage.default.removeItem(log.key);
              var errorMessage = decryptError instanceof Error ? decryptError.message : String(decryptError);
              this.error("Failed to decrypt offline log", {
                error: new Error(errorMessage),
                component: "Logger",
                action: "loadOfflineLogs",
                key: log.key
              });
            }
          }
          this.offlineBuffer.sort(function (a, b) {
            return a.timestamp.localeCompare(b.timestamp);
          });
          if (this.offlineBuffer.length > this.MAX_OFFLINE_BUFFER_SIZE) {
            this.offlineBuffer = this.offlineBuffer.slice(-this.MAX_OFFLINE_BUFFER_SIZE);
          }
          this.info("Offline logs loaded successfully", {
            component: "Logger",
            action: "loadOfflineLogs",
            logsLoaded: this.offlineBuffer.length
          });
        } catch (error) {
          var _errorMessage = error instanceof Error ? error.message : String(error);
          this.error("Failed to load offline logs", {
            error: new Error(_errorMessage),
            component: "Logger",
            action: "loadOfflineLogs"
          });
        }
      });
      function loadOfflineLogs() {
        return _loadOfflineLogs.apply(this, arguments);
      }
      return loadOfflineLogs;
    }())
  }, {
    key: "getBufferMetrics",
    value: function getBufferMetrics() {
      var criticalEntries = this.offlineBuffer.filter(function (entry) {
        return entry.level === LogLevel.ERROR || entry.level === LogLevel.SECURITY;
      }).length;
      var oldestEntry = null;
      var latestEntry = null;
      if (this.offlineBuffer.length > 0) {
        var firstEntry = this.offlineBuffer[0];
        var lastEntry = this.offlineBuffer[this.offlineBuffer.length - 1];
        if (firstEntry && firstEntry.timestamp) {
          oldestEntry = new Date(firstEntry.timestamp);
        }
        if (lastEntry && lastEntry.timestamp) {
          latestEntry = new Date(lastEntry.timestamp);
        }
      }
      return {
        totalEntries: this.offlineBuffer.length,
        criticalEntries: criticalEntries,
        oldestEntry: oldestEntry,
        latestEntry: latestEntry
      };
    }
  }, {
    key: "log",
    value: function log(level, message, metadata) {
      var _this$userInfo, _enhancedMetadata$tim;
      if (!this.isDevelopment && level === LogLevel.DEBUG) {
        return;
      }
      if (!this.validateLogEntry(message, metadata)) {
        return;
      }
      if (!this.applyRateLimit() || !this.checkRateLimit(level)) {
        if (level === LogLevel.ERROR || level === LogLevel.SECURITY) {
          var timestamp = new Date().toISOString();
          void this.bufferOfflineLog({
            message: `[Rate Limited] ${message}`,
            level: level,
            timestamp: timestamp,
            metadata: _objectSpread(_objectSpread({}, metadata), {}, {
              rateLimited: true,
              originalTimestamp: timestamp
            })
          });
        }
        return;
      }
      var enhancedMetadata = _objectSpread(_objectSpread({
        timestamp: new Date().toISOString(),
        sessionId: this.sessionId,
        version: this.appVersion,
        userId: ((_this$userInfo = this.userInfo) == null ? void 0 : _this$userInfo.id) !== undefined ? this.userInfo.id : "anonymous"
      }, metadata), {}, {
        securityContext: {
          environment: this.isDevelopment ? "development" : "production",
          sessionHash: this.hashIdentifier(this.sessionId),
          logId: this.hashIdentifier(`${level}_${String(Date.now())}_${message}`)
        }
      });
      var formattedMessage = this.formatLogMessage(level, message, enhancedMetadata);
      var sanitized = this.sanitizeMetadata(enhancedMetadata);
      var logEntry = {
        message: message,
        level: level,
        timestamp: (_enhancedMetadata$tim = enhancedMetadata.timestamp) != null ? _enhancedMetadata$tim : new Date().toISOString(),
        metadata: sanitized
      };
      void this.bufferOfflineLog(logEntry);
      if (this.isDevelopment) {
        switch (level) {
          case LogLevel.DEBUG:
            console.warn(formattedMessage);
            break;
          case LogLevel.INFO:
            console.warn(formattedMessage);
            break;
          case LogLevel.WARN:
            console.warn(formattedMessage);
            break;
          case LogLevel.ERROR:
            console.error(formattedMessage);
            break;
          case LogLevel.SECURITY:
            console.warn(`🔒 ${formattedMessage}`);
            break;
          case LogLevel.PERFORMANCE:
            console.warn(`⚡ ${formattedMessage}`);
            break;
        }
      }
      if (level === LogLevel.ERROR || level === LogLevel.SECURITY) {
        try {
          var fingerprint = this.generateErrorFingerprint(message, metadata);
          if ((metadata == null ? void 0 : metadata.error) instanceof Error) {
            var _metadata$component, _metadata$action;
            sentry.captureException(metadata.error, _objectSpread({
              extra: sanitized,
              tags: _objectSpread({
                logLevel: level,
                errorType: metadata.error.name,
                errorCode: metadata.error.code
              }, metadata.tags !== undefined ? Object.fromEntries(metadata.tags.map(function (tag) {
                return [tag, true];
              })) : {}),
              fingerprint: fingerprint
            }, metadata.correlationId ? {
              transaction: `${(_metadata$component = metadata.component) != null ? _metadata$component : "unknown"}.${(_metadata$action = metadata.action) != null ? _metadata$action : "action"}`,
              transactionHash: this.hashIdentifier(metadata.correlationId)
            } : {}));
          } else {
            var sentryLevel = String(level) === "security" ? "warning" : "error";
            var secureContext = _objectSpread(_objectSpread({}, sanitized), {}, {
              timestamp: new Date().toISOString(),
              sessionHash: this.hashIdentifier(this.sessionId),
              environment: this.isDevelopment ? "development" : "production"
            });
            sentry.setContext("metadata", secureContext);
            sentry.captureMessage(message, sentryLevel);
          }
          this.clearSentryContext();
        } catch (error) {
          if (this.isDevelopment) {
            console.error("Failed to send to Sentry:", error instanceof Error ? error.message : String(error));
          }
        }
      }
    }
  }, {
    key: "debug",
    value: function debug(message, metadata) {
      this.log(LogLevel.DEBUG, message, metadata);
    }
  }, {
    key: "info",
    value: function info(message, metadata) {
      this.log(LogLevel.INFO, message, metadata);
    }
  }, {
    key: "warn",
    value: function warn(message, metadata) {
      this.log(LogLevel.WARN, message, metadata);
    }
  }, {
    key: "error",
    value: function error(message, metadata) {
      this.log(LogLevel.ERROR, message, metadata);
    }
  }, {
    key: "security",
    value: function security(message, metadata) {
      this.log(LogLevel.SECURITY, message, _objectSpread(_objectSpread({}, metadata), {}, {
        tags: [].concat((0, _toConsumableArray2.default)((metadata == null ? void 0 : metadata.tags) !== undefined && metadata.tags !== null ? metadata.tags : []), ["security"])
      }));
    }
  }, {
    key: "performance",
    value: function performance(operation, durationMs, metadata) {
      this.log(LogLevel.PERFORMANCE, `${operation} completed in ${String(durationMs)}ms`, _objectSpread(_objectSpread({}, metadata), {}, {
        duration: durationMs,
        operation: operation,
        tags: [].concat((0, _toConsumableArray2.default)((metadata == null ? void 0 : metadata.tags) !== undefined && metadata.tags !== null ? metadata.tags : []), ["performance"])
      }));
    }
  }, {
    key: "startTimer",
    value: function startTimer(operation) {
      var _this4 = this;
      var startTime = Date.now();
      return function (metadata) {
        var duration = Math.round(Date.now() - startTime);
        _this4.performance(operation, duration, metadata);
      };
    }
  }, {
    key: "setUser",
    value: function setUser(user) {
      if (user === undefined || user === null || user.id === undefined || user.id === null || user.id === "" || user.email === undefined || user.email === null || user.email === "" || user.username === undefined || user.username === null || user.username === "") {
        throw new Error("Invalid user data provided to logger");
      }
      this.userInfo = user;
      sentry.setUser({
        id: user.id,
        email: user.email,
        username: user.username
      });
      this.info("User context set", {
        userId: user.id,
        tags: ["user-context"],
        level: LogLevel.INFO
      });
    }
  }, {
    key: "addBreadcrumb",
    value: function addBreadcrumb(message, category, data) {
      var sanitizedData = this.sanitizeMetadata(data);
      try {
        var _data$component;
        var secureBreadcrumb = {
          message: this.truncateString(message, 1000),
          category: this.validateCategory(category),
          data: sanitizedData,
          level: "info",
          timestamp: Date.now() / 1000,
          sessionHash: this.hashIdentifier(this.sessionId),
          sourceComponent: (_data$component = data == null ? void 0 : data["component"]) != null ? _data$component : "unknown"
        };
        sentry.addBreadcrumb(secureBreadcrumb);
        if (this.isDevelopment) {
          this.debug(`Breadcrumb: ${message}`, _objectSpread(_objectSpread({
            category: category
          }, sanitizedData), {}, {
            securityHash: this.hashIdentifier(message)
          }));
        }
      } catch (error) {
        if (this.isDevelopment) {
          console.warn("Failed to add breadcrumb:", error instanceof Error ? error.message : String(error));
        }
      }
    }
  }, {
    key: "exportAuditLogs",
    value: function () {
      var _exportAuditLogs = (0, _asyncToGenerator2.default)(function* () {
        var _this5 = this;
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        try {
          var startDate = options.startDate,
            _options$endDate = options.endDate,
            endDate = _options$endDate === void 0 ? new Date() : _options$endDate,
            _options$levels = options.levels,
            levels = _options$levels === void 0 ? Object.values(LogLevel) : _options$levels,
            _options$includeMetri = options.includeMetrics,
            includeMetrics = _options$includeMetri === void 0 ? false : _options$includeMetri;
          if (endDate < (startDate != null ? startDate : new Date(0))) {
            throw new Error("End date must be after start date");
          }
          var filteredLogs = [].concat((0, _toConsumableArray2.default)(this.logBuffer), (0, _toConsumableArray2.default)(this.offlineBuffer)).filter(function (entry) {
            if (!entry.timestamp) {
              return false;
            }
            var entryDate = new Date(entry.timestamp);
            if (isNaN(entryDate.getTime())) {
              return false;
            }
            var matchesDate = startDate ? entryDate >= startDate && entryDate <= endDate : true;
            var matchesLevel = levels.includes(entry.level);
            return matchesDate && matchesLevel;
          }).map(function (entry) {
            return _objectSpread(_objectSpread({}, entry), {}, {
              metadata: _this5.sanitizeMetadata(entry.metadata)
            });
          });
          var baseFilters = {
            startDate: (startDate != null ? startDate : new Date(0)).toISOString(),
            endDate: endDate.toISOString(),
            levels: levels,
            includeMetrics: includeMetrics,
            contentHash: "",
            totalEntries: 0
          };
          var exportData = _objectSpread(_objectSpread({
            logs: filteredLogs
          }, includeMetrics ? {
            metrics: this.getBufferMetrics()
          } : {}), {}, {
            exportMetadata: {
              timestamp: new Date().toISOString(),
              exportId: this.hashIdentifier(`audit_${Date.now()}`),
              filters: baseFilters
            }
          });
          var contentHash = this.hashIdentifier(JSON.stringify(exportData.logs));
          exportData.exportMetadata.filters.contentHash = contentHash;
          exportData.exportMetadata.filters.totalEntries = filteredLogs.length;
          this.security("Audit logs exported", {
            exportId: exportData.exportMetadata.exportId,
            entriesCount: filteredLogs.length,
            timeRange: {
              start: startDate == null ? void 0 : startDate.toISOString(),
              end: endDate.toISOString()
            },
            contentHash: contentHash
          });
          return exportData;
        } catch (error) {
          var errorMessage = error instanceof Error ? error.message : String(error);
          this.error("Failed to export audit logs", {
            error: new Error(errorMessage),
            options: options
          });
          throw new Error("Audit log export failed: " + errorMessage);
        }
      });
      function exportAuditLogs() {
        return _exportAuditLogs.apply(this, arguments);
      }
      return exportAuditLogs;
    }()
  }, {
    key: "generateErrorFingerprint",
    value: function generateErrorFingerprint(message, metadata) {
      var _metadata$component2, _metadata$action2;
      var components = [(_metadata$component2 = metadata == null ? void 0 : metadata.component) != null ? _metadata$component2 : "unknown", (_metadata$action2 = metadata == null ? void 0 : metadata.action) != null ? _metadata$action2 : "action", this.hashIdentifier(message)];
      if ((metadata == null ? void 0 : metadata.error) instanceof Error) {
        var _code2;
        components.push(metadata.error.name, (_code2 = metadata.error.code) != null ? _code2 : "UNKNOWN");
      }
      if ((metadata == null ? void 0 : metadata.tags) !== undefined) {
        components.push.apply(components, (0, _toConsumableArray2.default)(metadata.tags));
      }
      return components;
    }
  }, {
    key: "hashIdentifier",
    value: function hashIdentifier(value) {
      var hash = 0;
      for (var i = 0; i < value.length; i++) {
        var char = value.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
      return hash.toString(36).substring(0, 8);
    }
  }, {
    key: "clearSentryContext",
    value: function clearSentryContext() {
      try {
        sentry.setContext("metadata", {});
        sentry.setUser({});
      } catch (_unused2) {}
    }
  }, {
    key: "exportSecureAuditLogs",
    value: (function () {
      var _exportSecureAuditLogs = (0, _asyncToGenerator2.default)(function* () {
        var _this6 = this;
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        try {
          var _startDate$toISOStrin, _startDate$toISOStrin2;
          var startDate = options.startDate,
            _options$endDate2 = options.endDate,
            endDate = _options$endDate2 === void 0 ? new Date() : _options$endDate2,
            _options$levels2 = options.levels,
            levels = _options$levels2 === void 0 ? Object.values(LogLevel) : _options$levels2,
            _options$includeMetri2 = options.includeMetrics,
            includeMetrics = _options$includeMetri2 === void 0 ? false : _options$includeMetri2;
          if (endDate < (startDate != null ? startDate : new Date(0))) {
            throw new Error("End date must be after start date");
          }
          var filteredLogs = [].concat((0, _toConsumableArray2.default)(this.logBuffer), (0, _toConsumableArray2.default)(this.offlineBuffer)).filter(function (entry) {
            if (!entry.timestamp) {
              return false;
            }
            var entryDate = new Date(entry.timestamp);
            if (isNaN(entryDate.getTime())) {
              return false;
            }
            var matchesDate = startDate ? entryDate >= startDate && entryDate <= endDate : true;
            var matchesLevel = levels.includes(entry.level);
            return matchesDate && matchesLevel;
          }).map(function (entry) {
            return _objectSpread(_objectSpread({}, entry), {}, {
              metadata: _this6.sanitizeMetadata(entry.metadata)
            });
          });
          var metrics = this.getBufferMetrics();
          var contentHash = this.hashIdentifier(JSON.stringify(filteredLogs));
          var exportData = {
            logs: filteredLogs,
            metrics: metrics,
            exportMetadata: {
              timestamp: new Date().toISOString(),
              exportId: this.hashIdentifier(`audit_${Date.now()}`),
              filters: {
                startDate: (_startDate$toISOStrin = startDate == null ? void 0 : startDate.toISOString()) != null ? _startDate$toISOStrin : undefined,
                endDate: endDate.toISOString(),
                levels: levels,
                includeMetrics: includeMetrics,
                contentHash: contentHash,
                totalEntries: filteredLogs.length
              }
            }
          };
          this.security("Audit logs exported", {
            exportId: exportData.exportMetadata.exportId,
            entriesCount: filteredLogs.length,
            timeRange: {
              start: (_startDate$toISOStrin2 = startDate == null ? void 0 : startDate.toISOString()) != null ? _startDate$toISOStrin2 : "beginning",
              end: endDate.toISOString()
            },
            contentHash: contentHash
          });
          return exportData;
        } catch (error) {
          var errorMessage = error instanceof Error ? error.message : String(error);
          this.error("Failed to export audit logs", {
            error: new Error(errorMessage),
            options: options
          });
          throw new Error("Audit log export failed: " + errorMessage);
        }
      });
      function exportSecureAuditLogs() {
        return _exportSecureAuditLogs.apply(this, arguments);
      }
      return exportSecureAuditLogs;
    }())
  }, {
    key: "validateCategory",
    value: function validateCategory(category) {
      return category.replace(/[^a-zA-Z0-9_.-]/g, "_").substring(0, 100);
    }
  }, {
    key: "truncateString",
    value: function truncateString(str, maxLength) {
      if (str.length <= maxLength) {
        return str;
      }
      return str.substring(0, maxLength - 3) + "...";
    }
  }, {
    key: "trackFeature",
    value: function trackFeature(feature, metadata) {
      var enhancedMetadata = _objectSpread(_objectSpread({}, metadata), {}, {
        feature: feature,
        tags: [].concat((0, _toConsumableArray2.default)((metadata == null ? void 0 : metadata.tags) !== undefined ? metadata.tags : []), ["feature-usage"]),
        trackingId: this.hashIdentifier(`${feature}_${Date.now()}`),
        featureHash: this.hashIdentifier(feature),
        timestamp: new Date().toISOString(),
        sessionHash: this.hashIdentifier(this.sessionId)
      });
      this.info(`Feature used: ${feature}`, enhancedMetadata);
    }
  }, {
    key: "logSecurityEvent",
    value: function logSecurityEvent(event, details) {
      var _details$component, _details$action;
      var safeEvent = this.validateCategory(event);
      var sanitizedDetails = this.sanitizeMetadata(details);
      var enhancedDetails = _objectSpread(_objectSpread({}, sanitizedDetails), {}, {
        eventType: safeEvent,
        timestamp: new Date().toISOString(),
        sessionHash: this.hashIdentifier(this.sessionId),
        securityLevel: "standard",
        contentHash: this.hashIdentifier(JSON.stringify(sanitizedDetails)),
        component: String((_details$component = details["component"]) != null ? _details$component : "unknown"),
        action: String((_details$action = details["action"]) != null ? _details$action : "unknown"),
        eventId: this.hashIdentifier(`${safeEvent}_${Date.now()}`),
        environmentHash: this.hashIdentifier(this.isDevelopment ? "development" : "production")
      });
      this.security(`Security Event: ${safeEvent}`, enhancedDetails);
      this.clearSentryContext();
    }
  }]);
}();
var logger = exports.logger = new MobileLogger();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,