b96140c4890d6a949df9a8b119d8bec1
"use strict";

_getJestObj().mock("expo-image-picker", function () {
  return {
    requestMediaLibraryPermissionsAsync: jest.fn(),
    launchImageLibraryAsync: jest.fn(),
    PermissionStatus: {
      GRANTED: "granted",
      DENIED: "denied"
    },
    MediaTypeOptions: {
      Images: "Images"
    }
  };
});
_getJestObj().mock("../../services/multipartUpload", function () {
  return {
    multipartUpload: jest.fn()
  };
});
_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _usePhotoManager = require("../usePhotoManager");
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _multipartUpload = require("../../services/multipartUpload");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.Alert, "alert");
var mockMultipartUpload = _multipartUpload.multipartUpload;
describe("usePhotoManager", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _multipartUpload.multipartUpload.mockResolvedValue({
      url: "https://s3.amazonaws.com/bucket/uploads/photo.jpg",
      key: "uploads/photo.jpg",
      thumbnails: {
        jpg: "https://s3.amazonaws.com/bucket/thumbnails/photo.jpg",
        webp: "https://s3.amazonaws.com/bucket/thumbnails/photo.webp"
      }
    });
  });
  it("should initialize with empty photos array", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook.result;
    expect(result.current.photos).toEqual([]);
  });
  it("should request permissions when picking image", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: true
    });
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(ImagePicker.requestMediaLibraryPermissionsAsync).toHaveBeenCalled();
  }));
  it("should show alert when permissions denied", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "denied"
    });
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Permission needed", "Please grant permission to access your photos");
    expect(ImagePicker.launchImageLibraryAsync).not.toHaveBeenCalled();
  }));
  it("should add photos when image picker succeeds", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo1.jpg"
      }, {
        uri: "file://photo2.jpg"
      }]
    });
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.photos).toHaveLength(2);
    expect(result.current.photos[0].uri).toBe("file://photo1.jpg");
    expect(result.current.photos[1].uri).toBe("file://photo2.jpg");
  }));
  it("should mark first photo as primary", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo1.jpg"
      }]
    });
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.photos[0].isPrimary).toBe(true);
  }));
  it("should not mark additional photos as primary", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo1.jpg"
      }]
    });
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo2.jpg"
      }]
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.photos[0].isPrimary).toBe(true);
    expect(result.current.photos[1].isPrimary).toBe(false);
  }));
  it("should remove photo by index", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo1.jpg"
      }, {
        uri: "file://photo2.jpg"
      }, {
        uri: "file://photo3.jpg"
      }]
    });
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.photos).toHaveLength(3);
    (0, _reactNative.act)(function () {
      result.current.removePhoto(1);
    });
    expect(result.current.photos).toHaveLength(2);
    expect(result.current.photos[0].uri).toBe("file://photo1.jpg");
    expect(result.current.photos[1].uri).toBe("file://photo3.jpg");
  }));
  it("should make first photo primary when removing primary photo", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo1.jpg"
      }, {
        uri: "file://photo2.jpg"
      }]
    });
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.photos[0].isPrimary).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.removePhoto(0);
    });
    expect(result.current.photos).toHaveLength(1);
    expect(result.current.photos[0].uri).toBe("file://photo2.jpg");
    expect(result.current.photos[0].isPrimary).toBe(true);
  }));
  it("should set primary photo by index", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo1.jpg"
      }, {
        uri: "file://photo2.jpg"
      }, {
        uri: "file://photo3.jpg"
      }]
    });
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.photos[0].isPrimary).toBe(true);
    (0, _reactNative.act)(function () {
      result.current.setPrimaryPhoto(2);
    });
    expect(result.current.photos[0].isPrimary).toBe(false);
    expect(result.current.photos[1].isPrimary).toBe(false);
    expect(result.current.photos[2].isPrimary).toBe(true);
  }));
  it("should handle canceled image picker", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: true
    });
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.photos).toEqual([]);
  }));
  it("should generate unique file names", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo1.jpg"
      }, {
        uri: "file://photo2.jpg"
      }]
    });
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook1.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    var file1 = result.current.photos[0].fileName;
    var file2 = result.current.photos[1].fileName;
    expect(file1).toContain("pet-photo-");
    expect(file2).toContain("pet-photo-");
    expect(file1).not.toBe(file2);
  }));
  it("should set image type to image/jpeg", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo1.jpg"
      }]
    });
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.photos[0].type).toBe("image/jpeg");
  }));
  it("should respect photo limit (10 photos)", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo1.jpg"
      }, {
        uri: "file://photo2.jpg"
      }, {
        uri: "file://photo3.jpg"
      }]
    });
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook11.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(result.current.photos).toHaveLength(3);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    expect(ImagePicker.launchImageLibraryAsync).toHaveBeenCalledWith(expect.objectContaining({
      selectionLimit: 7
    }));
  }));
  it("should preserve photo data structure", (0, _asyncToGenerator2.default)(function* () {
    ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      status: "granted"
    });
    ImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: "file://photo1.jpg"
      }]
    });
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _usePhotoManager.usePhotoManager)();
      }),
      result = _renderHook12.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.pickImage();
    }));
    var photo = result.current.photos[0];
    expect(photo).toHaveProperty("uri");
    expect(photo).toHaveProperty("type");
    expect(photo).toHaveProperty("fileName");
    expect(photo).toHaveProperty("isPrimary");
  }));
  describe("Multipart Upload Functionality", function () {
    it("should automatically upload photos when picked", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "file://photo1.jpg",
          type: "image/jpeg"
        }]
      });
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _usePhotoManager.usePhotoManager)();
        }),
        result = _renderHook13.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.pickImage();
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockMultipartUpload).toHaveBeenCalled();
      });
    }));
    it("should track upload progress", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "file://photo1.jpg",
          type: "image/jpeg"
        }]
      });
      var progressCallbacks = [];
      mockMultipartUpload.mockImplementation(function (_ref30) {
        var onProgress = _ref30.onProgress;
        if (onProgress) {
          progressCallbacks.push(onProgress);
          setTimeout(function () {
            return onProgress(50, 100);
          }, 10);
          setTimeout(function () {
            return onProgress(100, 100);
          }, 20);
        }
        return Promise.resolve({
          url: "https://s3.amazonaws.com/bucket/uploads/photo.jpg",
          key: "uploads/photo.jpg",
          thumbnails: {
            jpg: "https://s3.amazonaws.com/bucket/thumbnails/photo.jpg",
            webp: "https://s3.amazonaws.com/bucket/thumbnails/photo.webp"
          }
        });
      });
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _usePhotoManager.usePhotoManager)();
        }),
        result = _renderHook14.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.pickImage();
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(mockMultipartUpload).toHaveBeenCalled();
      });
    }));
    it("should mark photo as uploaded successfully", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "file://photo1.jpg",
          type: "image/jpeg"
        }]
      });
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _usePhotoManager.usePhotoManager)();
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.pickImage();
      }));
      yield (0, _reactNative.waitFor)(function () {
        var photo = result.current.photos[0];
        expect(photo).toHaveProperty("uploadedUrl");
        expect(photo).toHaveProperty("thumbnailUrl");
        expect(photo).toHaveProperty("s3Key");
        expect(photo.isUploading).toBe(false);
      }, {
        timeout: 1000
      });
    }));
    it("should handle upload errors gracefully", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "file://photo1.jpg",
          type: "image/jpeg"
        }]
      });
      mockMultipartUpload.mockRejectedValue(new Error("Upload failed"));
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _usePhotoManager.usePhotoManager)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.pickImage();
      }));
      yield (0, _reactNative.waitFor)(function () {
        var photo = result.current.photos[0];
        expect(photo.error).toBe("Upload failed");
        expect(photo.isUploading).toBe(false);
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith("Upload Failed", expect.stringContaining("Failed to upload"));
    }));
    it("should handle uploading status correctly", (0, _asyncToGenerator2.default)(function* () {
      ImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
        status: "granted"
      });
      ImagePicker.launchImageLibraryAsync.mockResolvedValue({
        canceled: false,
        assets: [{
          uri: "file://photo1.jpg",
          type: "image/jpeg"
        }]
      });
      mockMultipartUpload.mockImplementation(function (_ref37) {
        var onProgress = _ref37.onProgress;
        return new Promise(function (resolve) {
          if (onProgress) {
            onProgress(0, 100);
            setTimeout(function () {
              return onProgress(50, 100);
            }, 10);
            setTimeout(function () {
              return onProgress(100, 100);
            }, 20);
          }
          setTimeout(function () {
            resolve({
              url: "https://s3.amazonaws.com/bucket/uploads/photo.jpg",
              key: "uploads/photo.jpg",
              thumbnails: {
                jpg: "https://s3.amazonaws.com/bucket/thumbnails/photo.jpg",
                webp: "https://s3.amazonaws.com/bucket/thumbnails/photo.webp"
              }
            });
          }, 30);
        });
      });
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _usePhotoManager.usePhotoManager)();
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.pickImage();
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(result.current.photos[0].isUploading).toBe(false);
      }, {
        timeout: 1000
      });
      var photo = result.current.photos[0];
      expect(photo.uploadedUrl).toBe("https://s3.amazonaws.com/bucket/uploads/photo.jpg");
      expect(photo.thumbnailUrl).toBe("https://s3.amazonaws.com/bucket/thumbnails/photo.webp");
      expect(photo.s3Key).toBe("uploads/photo.jpg");
    }));
    it("should provide uploadPendingPhotos method", function () {
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _usePhotoManager.usePhotoManager)();
        }),
        result = _renderHook18.result;
      expect(result.current.uploadPendingPhotos).toBeDefined();
      expect(typeof result.current.uploadPendingPhotos).toBe("function");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,