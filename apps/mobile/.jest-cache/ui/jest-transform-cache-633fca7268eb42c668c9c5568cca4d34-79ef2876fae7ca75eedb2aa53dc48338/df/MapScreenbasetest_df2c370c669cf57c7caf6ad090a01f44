47905c6bd42c1dbb72200463347924f0
"use strict";

_getJestObj().mock("react-native-maps");
_getJestObj().mock("expo-linear-gradient", function () {
  var React = require("react");
  var _require = require("react-native"),
    View = _require.View;
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, _objectSpread(_objectSpread({
        accessibilityLabel: "LinearGradient"
      }, rest), {}, {
        children: children
      }));
    }
  };
});
_getJestObj().mock("../../hooks/navigation/useTabDoublePress", function () {
  return {
    useTabDoublePress: function useTabDoublePress(cb) {
      return void cb;
    }
  };
});
_getJestObj().mock("../../components/map", function () {
  var React = require("react");
  var _require2 = require("react-native"),
    View = _require2.View,
    Text = _require2.Text,
    TouchableOpacity = _require2.TouchableOpacity;
  return {
    MapFiltersModal: function MapFiltersModal(_ref2) {
      var onSetFilters = _ref2.onSetFilters,
        onToggleActivity = _ref2.onToggleActivity;
      return (0, _jsxRuntime.jsx)(View, {
        testID: "MapFiltersModal",
        children: (0, _jsxRuntime.jsx)(TouchableOpacity, {
          accessibilityLabel: "apply-filters",
          onPress: function onPress() {
            onToggleActivity("walk");
            onSetFilters({
              radius: 1000
            });
          },
          children: (0, _jsxRuntime.jsx)(Text, {
            children: "Filters"
          })
        })
      });
    },
    MapStatsPanel: function MapStatsPanel(_ref3) {
      var stats = _ref3.stats;
      return (0, _jsxRuntime.jsx)(View, {
        testID: "MapStatsPanel",
        children: (0, _jsxRuntime.jsx)(Text, {
          children: JSON.stringify(stats)
        })
      });
    },
    PinDetailsModal: function PinDetailsModal(_ref4) {
      var visible = _ref4.visible,
        onClose = _ref4.onClose;
      return visible ? (0, _jsxRuntime.jsx)(View, {
        testID: "PinDetailsModal",
        children: (0, _jsxRuntime.jsx)(TouchableOpacity, {
          accessibilityLabel: "close-pin",
          onPress: onClose,
          children: (0, _jsxRuntime.jsx)(Text, {
            children: "Close Pin"
          })
        })
      }) : null;
    }
  };
});
_getJestObj().mock("../../hooks/screens/useMapScreen", function () {
  var _require3 = require("react-native"),
    Animated = _require3.Animated;
  return {
    useMapScreen: function useMapScreen() {
      return {
        region: {
          latitude: 42.6977,
          longitude: 23.3219,
          latitudeDelta: 0.05,
          longitudeDelta: 0.05
        },
        userLocation: {
          latitude: 42.6977,
          longitude: 23.3219
        },
        filteredPins: [{
          _id: "pin-1",
          latitude: 42.698,
          longitude: 23.322,
          activity: "walk",
          message: "Dog walking spotted",
          title: "Pin #1"
        }],
        filters: {
          radius: 500,
          types: {
            walk: true
          }
        },
        stats: {
          activeDogs: 3,
          activeCats: 1,
          hotspots: 2
        },
        selectedPin: null,
        filterPanelHeight: new Animated.Value(120),
        statsOpacity: new Animated.Value(1),
        activityTypes: ["walk", "play", "lost_pet"],
        setSelectedPin: mockSetSelectedPin,
        setFilters: mockSetFilters,
        getCurrentLocation: mockGetCurrentLocation,
        toggleFilterPanel: mockToggleFilterPanel,
        toggleActivity: mockToggleActivity,
        getMarkerColor: function getMarkerColor(activity, isMatch) {
          if (isMatch) return "#00ff88";
          if (activity === "walk") return "#4da6ff";
          return "#ffffff";
        },
        getStableMatchFlag: function getStableMatchFlag(pin) {
          return pin.activity === "walk";
        }
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _testUtils = require("./test-utils");
var _MapScreen = _interopRequireDefault(require("../MapScreen"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGetCurrentLocation = jest.fn();
var mockToggleFilterPanel = jest.fn();
var mockSetSelectedPin = jest.fn();
var mockSetFilters = jest.fn();
var mockToggleActivity = jest.fn();
describe("MapScreen (base)", function () {
  afterEach(function () {
    jest.clearAllMocks();
  });
  it("renders header title and subtitle", function () {
    var _renderWithProviders = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_MapScreen.default, {
        navigation: {
          navigate: _testUtils.mockNavigate
        },
        as: true,
        any: true
      })),
      getByText = _renderWithProviders.getByText;
    expect(getByText("Pet Activity Map")).toBeTruthy();
    expect(getByText("Real-time locations")).toBeTruthy();
  });
  it("shows MapView, Circle (radius), and at least one Marker", function () {
    var _renderWithProviders2 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_MapScreen.default, {
        navigation: {
          navigate: _testUtils.mockNavigate
        },
        as: true,
        any: true
      })),
      getByTestId = _renderWithProviders2.getByTestId,
      getAllByTestId = _renderWithProviders2.getAllByTestId;
    expect(getByTestId("MapView")).toBeTruthy();
    expect(getByTestId("Circle")).toBeTruthy();
    expect(getAllByTestId("Marker").length).toBeGreaterThan(0);
  });
  it("FAB: pressing location triggers getCurrentLocation()", function () {
    var _renderWithProviders3 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_MapScreen.default, {
        navigation: {
          navigate: _testUtils.mockNavigate
        },
        as: true,
        any: true
      })),
      getAllByText = _renderWithProviders3.getAllByText;
    _reactNative.fireEvent.press(getAllByText("📍")[0]);
    expect(mockGetCurrentLocation).toHaveBeenCalledTimes(1);
  });
  it("settings button toggles filter panel", function () {
    var _renderWithProviders4 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_MapScreen.default, {
        navigation: {
          navigate: _testUtils.mockNavigate
        },
        as: true,
        any: true
      })),
      getByText = _renderWithProviders4.getByText;
    _reactNative.fireEvent.press(getByText("⚙️"));
    expect(mockToggleFilterPanel).toHaveBeenCalledTimes(1);
  });
  it("AR FAB navigates to ARScentTrails with user location", function () {
    var _renderWithProviders5 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_MapScreen.default, {
        navigation: {
          navigate: _testUtils.mockNavigate
        },
        as: true,
        any: true
      })),
      getAllByText = _renderWithProviders5.getAllByText;
    _reactNative.fireEvent.press(getAllByText("👁️")[0]);
    expect(_testUtils.mockNavigate).toHaveBeenCalledWith("ARScentTrails", {
      initialLocation: {
        latitude: 42.6977,
        longitude: 23.3219
      }
    });
  });
  it("filters modal: apply triggers activity toggle + setFilters", function () {
    var _renderWithProviders6 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_MapScreen.default, {
        navigation: {
          navigate: _testUtils.mockNavigate
        },
        as: true,
        any: true
      })),
      getByTestId = _renderWithProviders6.getByTestId,
      getByText = _renderWithProviders6.getByText;
    expect(getByTestId("MapFiltersModal")).toBeTruthy();
    _reactNative.fireEvent.press(getByText("Filters"));
    expect(mockToggleActivity).toHaveBeenCalledWith("walk");
    expect(mockSetFilters).toHaveBeenCalledWith({
      radius: 1000
    });
  });
  it("stats panel renders stats payload", function () {
    var _renderWithProviders7 = (0, _testUtils.renderWithProviders)((0, _jsxRuntime.jsx)(_MapScreen.default, {
        navigation: {
          navigate: _testUtils.mockNavigate
        },
        as: true,
        any: true
      })),
      getByTestId = _renderWithProviders7.getByTestId;
    var statsNode = getByTestId("MapStatsPanel");
    expect(statsNode).toBeTruthy();
    expect(statsNode.props.children.props.children).toContain('activeDogs');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,