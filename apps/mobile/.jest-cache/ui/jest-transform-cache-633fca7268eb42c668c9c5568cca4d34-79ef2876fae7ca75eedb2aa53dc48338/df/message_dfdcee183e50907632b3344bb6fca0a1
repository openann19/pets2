dde874aacfc0773e6c39605a3884da82
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toCoreMessage = toCoreMessage;
exports.toCoreMessages = toCoreMessages;
function toCoreMessage(legacy) {
  var _legacy$_id, _ref, _legacy$messageType, _legacy$attachments, _ref3, _ref4, _legacy$sentAt, _legacy$readBy, _legacy$isEdited, _legacy$isDeleted;
  var messageId = (_legacy$_id = legacy._id) != null ? _legacy$_id : legacy.id;
  var contentCandidate = [legacy.content, legacy.text, legacy.message].find(function (value) {
    return typeof value === 'string' && value.trim().length > 0;
  });
  var content = contentCandidate != null ? contentCandidate : '';
  var sender;
  if (typeof legacy.sender === 'string' || legacy.sender === undefined) {
    var _legacy$senderId;
    var senderId = typeof legacy.sender === 'string' && legacy.sender.length > 0 ? legacy.sender : (_legacy$senderId = legacy.senderId) != null ? _legacy$senderId : messageId;
    sender = {
      _id: senderId,
      id: senderId,
      email: '',
      firstName: 'User',
      lastName: '',
      dateOfBirth: '',
      age: 0,
      location: {
        type: 'Point',
        coordinates: [0, 0]
      },
      preferences: {
        maxDistance: 50,
        ageRange: {
          min: 18,
          max: 100
        },
        species: [],
        intents: [],
        notifications: {
          email: true,
          push: true,
          matches: true,
          messages: true
        }
      },
      premium: {
        isActive: false,
        plan: 'basic',
        features: {
          unlimitedLikes: false,
          boostProfile: false,
          seeWhoLiked: false,
          advancedFilters: false
        }
      },
      pets: [],
      analytics: {
        totalSwipes: 0,
        totalLikes: 0,
        totalMatches: 0,
        profileViews: 0,
        lastActive: new Date().toISOString()
      },
      isEmailVerified: false,
      isActive: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
  } else {
    var _senderObj$name, _senderObj$_id, _senderObj$email;
    var senderObj = legacy.sender;
    var senderName = (_senderObj$name = senderObj.name) != null ? _senderObj$name : 'User';
    var nameParts = senderName.split(' ');
    var firstName = nameParts[0] != null && nameParts[0].trim() !== '' ? nameParts[0] : 'User';
    var lastName = nameParts.slice(1).join(' ').trim();
    sender = _objectSpread(_objectSpread({
      _id: (_senderObj$_id = senderObj._id) != null ? _senderObj$_id : senderObj.id,
      id: senderObj.id,
      email: (_senderObj$email = senderObj.email) != null ? _senderObj$email : '',
      firstName: firstName,
      lastName: lastName,
      dateOfBirth: '',
      age: 0
    }, senderObj.avatar != null && senderObj.avatar.trim() !== '' ? {
      avatar: senderObj.avatar
    } : {}), {}, {
      location: {
        type: 'Point',
        coordinates: [0, 0]
      },
      preferences: {
        maxDistance: 50,
        ageRange: {
          min: 18,
          max: 100
        },
        species: [],
        intents: [],
        notifications: {
          email: true,
          push: true,
          matches: true,
          messages: true
        }
      },
      premium: {
        isActive: false,
        plan: 'basic',
        features: {
          unlimitedLikes: false,
          boostProfile: false,
          seeWhoLiked: false,
          advancedFilters: false
        }
      },
      pets: [],
      analytics: {
        totalSwipes: 0,
        totalLikes: 0,
        totalMatches: 0,
        profileViews: 0,
        lastActive: new Date().toISOString()
      },
      isEmailVerified: false,
      isActive: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    });
  }
  var rawType = (_ref = (_legacy$messageType = legacy.messageType) != null ? _legacy$messageType : legacy.type) != null ? _ref : 'text';
  var isMessageType = function isMessageType(value) {
    return value === 'text' || value === 'image' || value === 'location' || value === 'system';
  };
  var normalizedType = rawType.toLowerCase();
  var messageType = isMessageType(normalizedType) ? normalizedType : 'text';
  var attachments = ((_legacy$attachments = legacy.attachments) != null ? _legacy$attachments : []).map(function (att) {
    var _att$fileName, _att$fileType, _ref2, _att$type;
    var fileName = (_att$fileName = att.fileName) == null ? void 0 : _att$fileName.trim();
    var fileNameObj = fileName != null && fileName.length > 0 ? {
      fileName: fileName
    } : {};
    var resolvedFileType = (_att$fileType = att.fileType) != null ? _att$fileType : att.type;
    return _objectSpread(_objectSpread({
      type: (_ref2 = (_att$type = att.type) != null ? _att$type : att.fileType) != null ? _ref2 : 'file',
      url: att.url
    }, fileNameObj), resolvedFileType != null ? {
      fileType: resolvedFileType
    } : {});
  });
  var sentAt = (_ref3 = (_ref4 = (_legacy$sentAt = legacy.sentAt) != null ? _legacy$sentAt : legacy.timestamp) != null ? _ref4 : legacy.createdAt) != null ? _ref3 : new Date().toISOString();
  return _objectSpread(_objectSpread(_objectSpread({
    _id: messageId,
    sender: sender,
    content: content,
    messageType: messageType
  }, attachments.length > 0 ? {
    attachments: attachments
  } : {}), {}, {
    readBy: (_legacy$readBy = legacy.readBy) != null ? _legacy$readBy : [],
    sentAt: sentAt
  }, legacy.editedAt != null ? {
    editedAt: legacy.editedAt
  } : {}), {}, {
    isEdited: (_legacy$isEdited = legacy.isEdited) != null ? _legacy$isEdited : false,
    isDeleted: (_legacy$isDeleted = legacy.isDeleted) != null ? _legacy$isDeleted : false
  });
}
function toCoreMessages(legacyMessages) {
  return legacyMessages.map(toCoreMessage);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,