0ea12bc818333918e987a8bced8ec54c
"use strict";

var _reactNative = require("@testing-library/react-native");
var _useMatchesTabs = require("../useMatchesTabs");
describe("useMatchesTabs", function () {
  it("should initialize with matches tab as active", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesTabs.useMatchesTabs)();
      }),
      result = _renderHook.result;
    expect(result.current.activeTab).toBe("matches");
  });
  it("should switch to different tab", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesTabs.useMatchesTabs)();
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.setActiveTab("likes");
    });
    expect(result.current.activeTab).toBe("likes");
  });
  it("should check if tab is active", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesTabs.useMatchesTabs)();
      }),
      result = _renderHook3.result;
    expect(result.current.isActive("matches")).toBe(true);
    expect(result.current.isActive("likes")).toBe(false);
    expect(result.current.isActive("passes")).toBe(false);
  });
  it("should update isActive checks when tab changes", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesTabs.useMatchesTabs)();
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      return result.current.setActiveTab("likes");
    });
    expect(result.current.isActive("matches")).toBe(false);
    expect(result.current.isActive("likes")).toBe(true);
    expect(result.current.isActive("passes")).toBe(false);
  });
  it("should support all tab types", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesTabs.useMatchesTabs)();
      }),
      result = _renderHook5.result;
    var tabs = ["matches", "likes", "passes"];
    tabs.forEach(function (tab) {
      (0, _reactNative.act)(function () {
        return result.current.setActiveTab(tab);
      });
      expect(result.current.activeTab).toBe(tab);
      expect(result.current.isActive(tab)).toBe(true);
    });
  });
  it("should return stable function references", function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesTabs.useMatchesTabs)();
      }),
      result = _renderHook6.result,
      rerender = _renderHook6.rerender;
    var firstSetActiveTab = result.current.setActiveTab;
    var firstIsActive = result.current.isActive;
    rerender();
    expect(result.current.setActiveTab).toBe(firstSetActiveTab);
    expect(result.current.isActive).toBe(firstIsActive);
  });
  it("should provide tab configuration", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useMatchesTabs.useMatchesTabs)();
      }),
      result = _renderHook7.result;
    expect(typeof result.current.setActiveTab).toBe("function");
    expect(typeof result.current.isActive).toBe("function");
    expect(["matches", "likes", "passes"]).toContain(result.current.activeTab);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,