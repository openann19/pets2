686b789823226726861be180109f8ad2
"use strict";

var _reactNative = require("@testing-library/react-native");
var _useFormState = require("../useFormState");
var initialValues = {
  email: "",
  password: "",
  age: 18
};
var validateForm = function validateForm(values) {
  var errors = {};
  if (!values.email) {
    errors.email = "Email is required";
  } else if (!values.email.includes("@")) {
    errors.email = "Invalid email format";
  }
  if (!values.password) {
    errors.password = "Password is required";
  } else if (values.password.length < 6) {
    errors.password = "Password must be at least 6 characters";
  }
  if (values.age < 18) {
    errors.age = "Must be at least 18 years old";
  }
  return errors;
};
describe("useFormState", function () {
  it("should initialize with correct values and no errors", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useFormState.useFormState)({
          initialValues: initialValues,
          validate: validateForm
        });
      }),
      result = _renderHook.result;
    expect(result.current.values).toEqual(initialValues);
    expect(result.current.errors).toEqual({});
    expect(result.current.isValid).toBe(true);
  });
  it("should update field values", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useFormState.useFormState)({
          initialValues: initialValues,
          validate: validateForm
        });
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "test@example.com");
    });
    expect(result.current.values.email).toBe("test@example.com");
    expect(result.current.values.password).toBe("");
    expect(result.current.values.age).toBe(18);
  });
  it("should validate form and show errors", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useFormState.useFormState)({
          initialValues: initialValues,
          validate: validateForm
        });
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.validate();
    });
    expect(result.current.errors.email).toBe("Email is required");
    expect(result.current.errors.password).toBe("Password is required");
    expect(result.current.isValid).toBe(false);
  });
  it("should clear errors when valid data is entered", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useFormState.useFormState)({
          initialValues: initialValues,
          validate: validateForm
        });
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "invalid-email");
      result.current.setValue("password", "123");
      result.current.validate();
    });
    expect(result.current.isValid).toBe(false);
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "valid@example.com");
      result.current.setValue("password", "validpassword");
      result.current.setValue("age", 25);
      result.current.validate();
    });
    expect(result.current.isValid).toBe(true);
    expect(result.current.errors).toEqual({});
  });
  it("should reset form to initial values", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useFormState.useFormState)({
          initialValues: initialValues,
          validate: validateForm
        });
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "modified@example.com");
      result.current.setValue("password", "modifiedpass");
      result.current.setValue("age", 30);
    });
    expect(result.current.values.email).toBe("modified@example.com");
    (0, _reactNative.act)(function () {
      result.current.reset();
    });
    expect(result.current.values).toEqual(initialValues);
    expect(result.current.errors).toEqual({});
  });
  it("should handle dynamic validation", function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useFormState.useFormState)({
          initialValues: initialValues,
          validate: validateForm
        });
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "test@example.com");
      result.current.validate();
    });
    expect(result.current.errors.email).toBeUndefined();
    expect(result.current.errors.password).toBe("Password is required");
    expect(result.current.isValid).toBe(false);
  });
  it("should work without validation function", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useFormState.useFormState)({
          initialValues: initialValues
        });
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "test@example.com");
    });
    expect(result.current.values.email).toBe("test@example.com");
    expect(result.current.isValid).toBe(true);
    expect(result.current.errors).toEqual({});
  });
  it("should return stable function references", function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useFormState.useFormState)({
          initialValues: initialValues,
          validate: validateForm
        });
      }),
      result = _renderHook8.result,
      rerender = _renderHook8.rerender;
    var firstSetValue = result.current.setValue;
    var firstValidate = result.current.validate;
    var firstReset = result.current.reset;
    rerender();
    expect(result.current.setValue).toBe(firstSetValue);
    expect(result.current.validate).toBe(firstValidate);
    expect(result.current.reset).toBe(firstReset);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,