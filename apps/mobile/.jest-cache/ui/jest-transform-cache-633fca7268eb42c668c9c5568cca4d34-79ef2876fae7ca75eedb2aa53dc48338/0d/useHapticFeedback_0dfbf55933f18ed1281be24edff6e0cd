072af1ba721abaec290249ff55ff6474
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHapticFeedback = exports.default = void 0;
var Haptics = _interopRequireWildcard(require("expo-haptics"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var useHapticFeedback = exports.useHapticFeedback = function useHapticFeedback() {
  var triggerHaptic = function triggerHaptic() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "light";
    switch (type) {
      case "light":
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        break;
      case "medium":
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
        break;
      case "heavy":
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);
        break;
    }
  };
  var triggerSuccess = function triggerSuccess() {
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
  };
  var triggerWarning = function triggerWarning() {
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);
  };
  var triggerError = function triggerError() {
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
  };
  return {
    triggerHaptic: triggerHaptic,
    triggerSuccess: triggerSuccess,
    triggerWarning: triggerWarning,
    triggerError: triggerError
  };
};
var _default = exports.default = useHapticFeedback;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIYXB0aWNzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1c2VIYXB0aWNGZWVkYmFjayIsImV4cG9ydHMiLCJ0cmlnZ2VySGFwdGljIiwidHlwZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImltcGFjdEFzeW5jIiwiSW1wYWN0RmVlZGJhY2tTdHlsZSIsIkxpZ2h0IiwiTWVkaXVtIiwiSGVhdnkiLCJ0cmlnZ2VyU3VjY2VzcyIsIm5vdGlmaWNhdGlvbkFzeW5jIiwiTm90aWZpY2F0aW9uRmVlZGJhY2tUeXBlIiwiU3VjY2VzcyIsInRyaWdnZXJXYXJuaW5nIiwiV2FybmluZyIsInRyaWdnZXJFcnJvciIsIkVycm9yIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJ1c2VIYXB0aWNGZWVkYmFjay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHVzZUhhcHRpY0ZlZWRiYWNrIEhvb2tcbiAqIEhhcHRpYyBmZWVkYmFjayB1dGlsaXRpZXNcbiAqL1xuXG5pbXBvcnQgKiBhcyBIYXB0aWNzIGZyb20gXCJleHBvLWhhcHRpY3NcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUhhcHRpY0ZlZWRiYWNrID0gKCkgPT4ge1xuICBjb25zdCB0cmlnZ2VySGFwdGljID0gKHR5cGU6IFwibGlnaHRcIiB8IFwibWVkaXVtXCIgfCBcImhlYXZ5XCIgPSBcImxpZ2h0XCIpID0+IHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJsaWdodFwiOlxuICAgICAgICBIYXB0aWNzLmltcGFjdEFzeW5jKEhhcHRpY3MuSW1wYWN0RmVlZGJhY2tTdHlsZS5MaWdodCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1lZGl1bVwiOlxuICAgICAgICBIYXB0aWNzLmltcGFjdEFzeW5jKEhhcHRpY3MuSW1wYWN0RmVlZGJhY2tTdHlsZS5NZWRpdW0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJoZWF2eVwiOlxuICAgICAgICBIYXB0aWNzLmltcGFjdEFzeW5jKEhhcHRpY3MuSW1wYWN0RmVlZGJhY2tTdHlsZS5IZWF2eSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB0cmlnZ2VyU3VjY2VzcyA9ICgpID0+IHtcbiAgICBIYXB0aWNzLm5vdGlmaWNhdGlvbkFzeW5jKEhhcHRpY3MuTm90aWZpY2F0aW9uRmVlZGJhY2tUeXBlLlN1Y2Nlc3MpO1xuICB9O1xuXG4gIGNvbnN0IHRyaWdnZXJXYXJuaW5nID0gKCkgPT4ge1xuICAgIEhhcHRpY3Mubm90aWZpY2F0aW9uQXN5bmMoSGFwdGljcy5Ob3RpZmljYXRpb25GZWVkYmFja1R5cGUuV2FybmluZyk7XG4gIH07XG5cbiAgY29uc3QgdHJpZ2dlckVycm9yID0gKCkgPT4ge1xuICAgIEhhcHRpY3Mubm90aWZpY2F0aW9uQXN5bmMoSGFwdGljcy5Ob3RpZmljYXRpb25GZWVkYmFja1R5cGUuRXJyb3IpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdHJpZ2dlckhhcHRpYyxcbiAgICB0cmlnZ2VyU3VjY2VzcyxcbiAgICB0cmlnZ2VyV2FybmluZyxcbiAgICB0cmlnZ2VyRXJyb3IsXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VIYXB0aWNGZWVkYmFjaztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBS0EsSUFBQUEsT0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQXdDLFNBQUFELHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYs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