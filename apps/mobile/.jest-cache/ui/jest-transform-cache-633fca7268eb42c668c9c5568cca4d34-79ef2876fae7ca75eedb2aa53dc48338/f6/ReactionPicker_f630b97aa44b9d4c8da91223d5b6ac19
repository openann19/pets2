fd8cda3138595351e34feedb5f37b58a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactionPicker = ReactionPicker;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Provider = require("../../theme/Provider");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var REACTIONS = [{
  emoji: "‚ù§Ô∏è",
  label: "Love"
}, {
  emoji: "üòÇ",
  label: "Laugh"
}, {
  emoji: "üòÆ",
  label: "Wow"
}, {
  emoji: "üò¢",
  label: "Sad"
}, {
  emoji: "üî•",
  label: "Fire"
}, {
  emoji: "üéâ",
  label: "Party"
}, {
  emoji: "üëç",
  label: "Like"
}, {
  emoji: "üëè",
  label: "Clap"
}];
function ReactionPicker(_ref) {
  var visible = _ref.visible,
    onClose = _ref.onClose,
    onSelect = _ref.onSelect,
    position = _ref.position;
  var _useTheme = (0, _Provider.useTheme)(),
    colors = _useTheme.colors;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedReaction = _useState2[0],
    setSelectedReaction = _useState2[1];
  var handleSelect = function handleSelect(reaction) {
    setSelectedReaction(reaction);
    onSelect(reaction);
    setTimeout(function () {
      onClose();
      setSelectedReaction(null);
    }, 300);
  };
  var renderReaction = function renderReaction(_ref2) {
    var item = _ref2.item;
    return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: _reactNative.StyleSheet.flatten([styles.reactionButton, selectedReaction === item.emoji && styles.selectedReaction]),
      onPress: function onPress() {
        handleSelect(item.emoji);
      },
      accessibilityLabel: `React with ${item.label}`,
      accessibilityRole: "button",
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emoji,
        children: item.emoji
      })
    });
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    visible: visible,
    transparent: true,
    animationType: "fade",
    onRequestClose: onClose,
    children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.overlay,
      activeOpacity: 1,
      onPress: onClose,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, position && {
          position: "absolute",
          top: position.y,
          left: position.x
        }]),
        children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
          data: REACTIONS,
          renderItem: renderReaction,
          keyExtractor: function keyExtractor(item) {
            return item.emoji;
          },
          horizontal: true,
          showsHorizontalScrollIndicator: false,
          contentContainerStyle: styles.reactionsList
        })
      })
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.3)"
  },
  container: {
    backgroundColor: "#ffffff",
    borderRadius: 20,
    paddingVertical: 10,
    paddingHorizontal: 5,
    shadowColor: "#0a0a0a",
    shadowOffset: {
      width: 0,
      height: 4
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 10
  },
  reactionsList: {
    paddingHorizontal: 5,
    gap: 5
  },
  reactionButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#f5f5f5"
  },
  selectedReaction: {
    backgroundColor: "#e3f2fd",
    transform: [{
      scale: 1.1
    }]
  },
  emoji: {
    fontSize: 24
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,