3a207d6581c4e51eed0a7490687bb649
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUserAnalytics = useUserAnalytics;
var react_1 = require("react");
var logger_1 = require("../utils/logger");
var env_1 = require("../utils/env");
function useUserAnalytics() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var userId = options.userId,
    _options$autoRefresh = options.autoRefresh,
    autoRefresh = _options$autoRefresh === void 0 ? false : _options$autoRefresh,
    _options$refreshInter = options.refreshInterval,
    refreshInterval = _options$refreshInter === void 0 ? 60000 : _options$refreshInter;
  var _ref = (0, react_1.useState)(null),
    _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    analytics = _ref2[0],
    setAnalytics = _ref2[1];
  var _ref3 = (0, react_1.useState)(true),
    _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
    isLoading = _ref4[0],
    setIsLoading = _ref4[1];
  var _ref5 = (0, react_1.useState)(null),
    _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
    error = _ref6[0],
    setError = _ref6[1];
  var fetchAnalytics = (0, react_1.useCallback)((0, _asyncToGenerator2.default)(function* () {
    if (!userId) {
      setIsLoading(false);
      return;
    }
    try {
      var _ref8;
      setIsLoading(true);
      setError(null);
      var response = yield fetch(`/api/analytics/user/${userId}`, {
        headers: {
          'Authorization': `Bearer ${(_ref8 = (0, env_1.getLocalStorageItem)('accessToken')) != null ? _ref8 : ''}`
        }
      });
      if (!response.ok) {
        throw new Error(`Failed to fetch analytics: ${response.statusText}`);
      }
      var data = yield response.json();
      if (data.success) {
        setAnalytics(data.data);
      } else {
        throw new Error(data.message || 'Failed to fetch analytics');
      }
    } catch (err) {
      var errorMessage = err instanceof Error ? err.message : 'Unknown error';
      setError(errorMessage);
      logger_1.logger.error('Failed to fetch user analytics', {
        error: errorMessage,
        userId: userId
      });
    } finally {
      setIsLoading(false);
    }
  }), [userId]);
  (0, react_1.useEffect)(function () {
    void fetchAnalytics();
  }, [fetchAnalytics]);
  (0, react_1.useEffect)(function () {
    if (!autoRefresh || !userId) return;
    var interval = setInterval(function () {
      void fetchAnalytics();
    }, refreshInterval);
    return function () {
      return clearInterval(interval);
    };
  }, [autoRefresh, refreshInterval, userId, fetchAnalytics]);
  return {
    analytics: analytics,
    isLoading: isLoading,
    error: error,
    refresh: fetchAnalytics
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,