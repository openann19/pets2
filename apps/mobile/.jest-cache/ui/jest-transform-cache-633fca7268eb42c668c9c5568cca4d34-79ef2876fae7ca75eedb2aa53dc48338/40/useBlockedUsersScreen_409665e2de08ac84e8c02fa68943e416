f3b4baeaac0cac67447a3c5e520c4069
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBlockedUsersScreen = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _core = require("@pawfectmatch/core");
var _api = require("../../services/api");
var useBlockedUsersScreen = exports.useBlockedUsersScreen = function useBlockedUsersScreen() {
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    blockedUsers = _useState2[0],
    setBlockedUsers = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    loading = _useState4[0],
    setLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    refreshing = _useState6[0],
    setRefreshing = _useState6[1];
  var loadBlockedUsers = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    try {
      if (refresh) setRefreshing(true);else setLoading(true);
      var users = yield _api.matchesAPI.getBlockedUsers();
      var transformedUsers = users.map(function (user) {
        return {
          id: user._id || user.id || "",
          name: user.firstName && user.lastName ? `${user.firstName} ${user.lastName}`.trim() : user.firstName || "Unknown",
          email: user.email || "",
          blockedAt: user.createdAt || new Date().toISOString(),
          reason: "User blocked"
        };
      });
      setBlockedUsers(transformedUsers);
    } catch (error) {
      _core.logger.error("Failed to load blocked users:", {
        error: error
      });
      _reactNative.Alert.alert("Error", "Failed to load blocked users. Please try again.");
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  }), []);
  var refreshBlockedUsers = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    yield loadBlockedUsers(true);
  }), [loadBlockedUsers]);
  var unblockUser = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (userId) {
      try {
        yield _api.matchesAPI.unblockUser(userId);
        setBlockedUsers(function (prev) {
          return prev.filter(function (user) {
            return user.id !== userId;
          });
        });
        _core.logger.info("User unblocked successfully", {
          userId: userId
        });
        _reactNative.Alert.alert("Success", "User has been unblocked");
      } catch (error) {
        _core.logger.error("Failed to unblock user:", {
          error: error,
          userId: userId
        });
        _reactNative.Alert.alert("Error", "Failed to unblock user. Please try again.");
      }
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), []);
  return {
    blockedUsers: blockedUsers,
    loading: loading,
    refreshing: refreshing,
    loadBlockedUsers: loadBlockedUsers,
    refreshBlockedUsers: refreshBlockedUsers,
    unblockUser: unblockUser
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,