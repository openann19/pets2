d70dfd311d4cd22bbc897766c36174c3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.useThemeToggle = useThemeToggle;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _react = require("react");
var _reactNative = require("react-native");
var _UnifiedThemeProvider = require("../theme/UnifiedThemeProvider");
var _Provider = require("../theme/Provider");
var _adapters = require("../theme/adapters");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useThemeToggle() {
  var theme = (0, _Provider.useTheme)();
  var _useThemeContext = (0, _UnifiedThemeProvider.useThemeContext)(),
    isDark = _useThemeContext.isDark,
    mode = _useThemeContext.mode,
    setMode = _useThemeContext.setMode,
    contextToggleTheme = _useThemeContext.toggleTheme;
  var colors = (0, _adapters.getExtendedColors)(theme);
  var styles = {};
  var shadows = {};
  var themeMode = mode;
  var toggleTheme = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      yield Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      contextToggleTheme();
    } catch (error) {
      contextToggleTheme();
    }
  }), [contextToggleTheme]);
  var setLightTheme = (0, _react.useCallback)(function () {
    setMode("light");
  }, [setMode]);
  var setDarkTheme = (0, _react.useCallback)(function () {
    setMode("dark");
  }, [setMode]);
  var setSystemTheme = (0, _react.useCallback)(function () {
    setMode("system");
  }, [setMode]);
  var showThemeSelector = (0, _react.useCallback)(function () {
    var currentThemeLabel = {
      light: "Light",
      dark: "Dark",
      system: "System Default"
    }[themeMode];
    _reactNative.Alert.alert("Select Theme", `Current theme: ${currentThemeLabel}`, [{
      text: "Light",
      onPress: setLightTheme,
      style: themeMode === "light" ? "default" : "default"
    }, {
      text: "Dark",
      onPress: setDarkTheme,
      style: themeMode === "dark" ? "default" : "default"
    }, {
      text: "System Default",
      onPress: setSystemTheme,
      style: themeMode === "system" ? "default" : "default"
    }, {
      text: "Cancel",
      style: "cancel"
    }], {
      cancelable: true,
      userInterfaceStyle: isDark ? "dark" : "light"
    });
  }, [themeMode, isDark, setLightTheme, setDarkTheme, setSystemTheme]);
  return {
    isDark: isDark != null ? isDark : false,
    themeMode: themeMode,
    colors: colors,
    styles: styles,
    shadows: shadows,
    toggleTheme: toggleTheme,
    setLightTheme: setLightTheme,
    setDarkTheme: setDarkTheme,
    setSystemTheme: setSystemTheme,
    showThemeSelector: showThemeSelector
  };
}
var _default = exports.default = useThemeToggle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,