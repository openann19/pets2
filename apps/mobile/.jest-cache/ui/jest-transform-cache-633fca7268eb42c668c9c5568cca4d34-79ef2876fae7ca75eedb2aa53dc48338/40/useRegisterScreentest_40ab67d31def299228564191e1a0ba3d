608a9f982a17e9d1cd237d65a91de688
"use strict";

_getJestObj().mock("../../stores/useAuthStore", function () {
  return {
    useAuthStore: function useAuthStore() {
      return {
        register: jest.fn(),
        isLoading: false,
        error: null
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useRegisterScreen = require("../useRegisterScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockNavigation = {
  navigate: mockNavigate,
  goBack: jest.fn(),
  reset: jest.fn()
};
describe("useRegisterScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("should initialize with empty form values", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook.result;
    expect(result.current.values.firstName).toBe("");
    expect(result.current.values.lastName).toBe("");
    expect(result.current.values.email).toBe("");
    expect(result.current.values.password).toBe("");
    expect(result.current.values.confirmPassword).toBe("");
    expect(result.current.values.dateOfBirth).toBe("");
    expect(result.current.errors).toEqual({});
    expect(result.current.isSubmitting).toBe(false);
  });
  it("should update form field values", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("firstName", "John");
      result.current.setValue("email", "john@example.com");
      result.current.setValue("password", "password123");
      result.current.setValue("confirmPassword", "password123");
      result.current.setValue("dateOfBirth", "1990-01-01");
    });
    expect(result.current.values.firstName).toBe("John");
    expect(result.current.values.email).toBe("john@example.com");
    expect(result.current.values.password).toBe("password123");
    expect(result.current.values.confirmPassword).toBe("password123");
    expect(result.current.values.dateOfBirth).toBe("1990-01-01");
  });
  it("should validate required fields", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.validateForm();
    });
    expect(result.current.errors.firstName).toBe("First name is required");
    expect(result.current.errors.lastName).toBe("Last name is required");
    expect(result.current.errors.email).toBe("Email is required");
    expect(result.current.errors.password).toBe("Password is required");
    expect(result.current.errors.dateOfBirth).toBe("Date of birth is required");
  });
  it("should validate email format", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "invalid-email");
      result.current.setValue("firstName", "John");
      result.current.setValue("lastName", "Doe");
      result.current.setValue("password", "password123");
      result.current.setValue("confirmPassword", "password123");
      result.current.setValue("dateOfBirth", "1990-01-01");
      result.current.validateForm();
    });
    expect(result.current.errors.email).toBe("Please enter a valid email address");
    expect(result.current.errors.firstName).toBeUndefined();
  });
  it("should validate password strength", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("firstName", "John");
      result.current.setValue("lastName", "Doe");
      result.current.setValue("email", "john@example.com");
      result.current.setValue("password", "weak");
      result.current.setValue("confirmPassword", "weak");
      result.current.setValue("dateOfBirth", "1990-01-01");
      result.current.validateForm();
    });
    expect(result.current.errors.password).toBe("Password must be at least 8 characters");
  });
  it("should validate password confirmation match", function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("firstName", "John");
      result.current.setValue("lastName", "Doe");
      result.current.setValue("email", "john@example.com");
      result.current.setValue("password", "password123");
      result.current.setValue("confirmPassword", "differentpassword");
      result.current.setValue("dateOfBirth", "1990-01-01");
      result.current.validateForm();
    });
    expect(result.current.errors.confirmPassword).toBe("Passwords do not match");
  });
  it("should validate age (must be 18+)", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook7.result;
    var underageDate = new Date();
    underageDate.setFullYear(underageDate.getFullYear() - 17);
    (0, _reactNative.act)(function () {
      result.current.setValue("firstName", "John");
      result.current.setValue("lastName", "Doe");
      result.current.setValue("email", "john@example.com");
      result.current.setValue("password", "password123");
      result.current.setValue("confirmPassword", "password123");
      result.current.setValue("dateOfBirth", underageDate.toISOString().split("T")[0]);
      result.current.validateForm();
    });
    expect(result.current.errors.dateOfBirth).toBe("You must be at least 18 years old");
  });
  it("should clear errors when valid data is entered", function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook8.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "invalid");
      result.current.setValue("password", "weak");
      result.current.validateForm();
    });
    expect(result.current.errors.email).toBeTruthy();
    expect(result.current.errors.password).toBeTruthy();
    (0, _reactNative.act)(function () {
      result.current.setValue("firstName", "John");
      result.current.setValue("lastName", "Doe");
      result.current.setValue("email", "john@example.com");
      result.current.setValue("password", "validpassword");
      result.current.setValue("confirmPassword", "validpassword");
      result.current.setValue("dateOfBirth", "1990-01-01");
      result.current.validateForm();
    });
    expect(result.current.errors.email).toBeUndefined();
    expect(result.current.errors.password).toBeUndefined();
    expect(result.current.isValid).toBe(true);
  });
  it("should navigate to login screen", function () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook9.result;
    (0, _reactNative.act)(function () {
      result.current.navigateToLogin();
    });
    expect(mockNavigate).toHaveBeenCalledWith("Login");
  });
  it("should handle form submission with valid data", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook0.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("firstName", "John");
      result.current.setValue("lastName", "Doe");
      result.current.setValue("email", "john@example.com");
      result.current.setValue("password", "password123");
      result.current.setValue("confirmPassword", "password123");
      result.current.setValue("dateOfBirth", "1990-01-01");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleSubmit();
    }));
    expect(result.current.values.firstName).toBe("John");
    expect(result.current.values.email).toBe("john@example.com");
  }));
  it("should reset form to initial state", function () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook1.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("firstName", "John");
      result.current.setValue("email", "john@example.com");
      result.current.validateForm();
    });
    expect(result.current.values.firstName).toBe("John");
    expect(Object.keys(result.current.errors).length).toBeGreaterThan(0);
    (0, _reactNative.act)(function () {
      result.current.resetForm();
    });
    expect(result.current.values.firstName).toBe("");
    expect(result.current.values.email).toBe("");
    expect(result.current.errors).toEqual({});
  });
  it("should return stable function references", function () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useRegisterScreen.useRegisterScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook10.result,
      rerender = _renderHook10.rerender;
    var firstSetValue = result.current.setValue;
    var firstValidate = result.current.validateForm;
    var firstSubmit = result.current.handleSubmit;
    var firstReset = result.current.resetForm;
    var firstNavigate = result.current.navigateToLogin;
    rerender();
    expect(result.current.setValue).toBe(firstSetValue);
    expect(result.current.validateForm).toBe(firstValidate);
    expect(result.current.handleSubmit).toBe(firstSubmit);
    expect(result.current.resetForm).toBe(firstReset);
    expect(result.current.navigateToLogin).toBe(firstNavigate);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,