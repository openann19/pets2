ac4d80be55f94edbe40cc3b7d1094d7b
"use strict";

_getJestObj().mock("@react-native-async-storage/async-storage", function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useScrollPersistence = require("../useScrollPersistence");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAsyncStorage = _asyncStorage.default;
describe("useScrollPersistence", function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue();
  });
  it("should initialize with default scroll position", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useScrollPersistence.useScrollPersistence)({
          key: "test-scroll"
        });
      }),
      result = _renderHook.result;
    expect(result.current.scrollPosition).toBe(0);
  });
  it("should load stored scroll position", (0, _asyncToGenerator2.default)(function* () {
    mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify({
      y: 150
    }));
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useScrollPersistence.useScrollPersistence)({
          key: "test-scroll"
        });
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.scrollPosition).toBe(150);
  }));
  it("should save scroll position when updated", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useScrollPersistence.useScrollPersistence)({
          key: "test-scroll"
        });
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    (0, _reactNative.act)(function () {
      result.current.saveScrollPosition(250);
    });
    expect(mockAsyncStorage.setItem).toHaveBeenCalledWith("test-scroll", JSON.stringify({
      y: 250,
      timestamp: expect.any(Number)
    }));
    expect(result.current.scrollPosition).toBe(250);
  }));
  it("should restore scroll position", (0, _asyncToGenerator2.default)(function* () {
    mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify({
      y: 100
    }));
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useScrollPersistence.useScrollPersistence)({
          key: "test-scroll"
        });
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.scrollPosition).toBe(100);
    (0, _reactNative.act)(function () {
      result.current.saveScrollPosition(200);
    });
    expect(result.current.scrollPosition).toBe(200);
  }));
  it("should handle AsyncStorage errors gracefully", (0, _asyncToGenerator2.default)(function* () {
    var consoleSpy = jest.spyOn(console, "error").mockImplementation();
    mockAsyncStorage.getItem.mockRejectedValue(new Error("Storage error"));
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useScrollPersistence.useScrollPersistence)({
          key: "error-scroll"
        });
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.scrollPosition).toBe(0);
    expect(consoleSpy).toHaveBeenCalled();
    consoleSpy.mockRestore();
  }));
  it("should clear stored scroll position", (0, _asyncToGenerator2.default)(function* () {
    mockAsyncStorage.getItem.mockResolvedValue(JSON.stringify({
      y: 75
    }));
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useScrollPersistence.useScrollPersistence)({
          key: "clear-test"
        });
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.scrollPosition).toBe(75);
    (0, _reactNative.act)(function () {
      result.current.clearScrollPosition();
    });
    expect(result.current.scrollPosition).toBe(0);
  }));
  it("should work with custom default position", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useScrollPersistence.useScrollPersistence)({
          key: "custom-default",
          defaultPosition: 50
        });
      }),
      result = _renderHook7.result;
    expect(result.current.scrollPosition).toBe(50);
  });
  it("should return stable function references", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useScrollPersistence.useScrollPersistence)({
          key: "stable-test"
        });
      }),
      result = _renderHook8.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    var firstSave = result.current.saveScrollPosition;
    var firstClear = result.current.clearScrollPosition;
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useScrollPersistence.useScrollPersistence)({
          key: "stable-test-2"
        });
      }),
      result2 = _renderHook9.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.saveScrollPosition).toBe(firstSave);
    expect(result.current.clearScrollPosition).toBe(firstClear);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,