8764f4a3a1db0a93cec0d74548285c79
"use strict";

_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(),
    ImpactFeedbackStyle: {
      Light: "light",
      Medium: "medium",
      Heavy: "heavy"
    }
  };
});
_getJestObj().mock("react-native-reanimated", function () {
  return {
    default: {
      View: "Animated.View",
      Text: "Animated.Text",
      ScrollView: "Animated.ScrollView",
      createAnimatedComponent: function createAnimatedComponent(component) {
        return component;
      }
    },
    interpolate: jest.fn(),
    withSpring: jest.fn(function (value) {
      return value;
    }),
    withTiming: jest.fn(function (value) {
      return value;
    }),
    useSharedValue: jest.fn(function () {
      return {
        value: 0
      };
    }),
    useAnimatedStyle: jest.fn(function () {
      return {};
    }),
    useAnimatedGestureHandler: jest.fn(function () {
      return {};
    }),
    useDerivedValue: jest.fn(function () {
      return {
        value: 0
      };
    }),
    runOnJS: jest.fn(function (fn) {
      return fn;
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("@testing-library/react-native");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _AdvancedPetFilters = require("../AdvancedPetFilters");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("AdvancedPetFilters", function () {
  var mockOnChange = jest.fn();
  var mockOnReset = jest.fn();
  var mockOnApply = jest.fn();
  var defaultFilters = {
    maxDistance: 50,
    personalityTags: []
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe("Rendering", function () {
    it("renders main filter sections", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      expect(_reactNative.screen.getByText("Advanced Pet Filters")).toBeTruthy();
      expect(_reactNative.screen.getByText("Species")).toBeTruthy();
      expect(_reactNative.screen.getByText("Age Range")).toBeTruthy();
      expect(_reactNative.screen.getByText("Size")).toBeTruthy();
      expect(_reactNative.screen.getByText("Intent")).toBeTruthy();
      expect(_reactNative.screen.getByText("Max Distance")).toBeTruthy();
      expect(_reactNative.screen.getByText("Personality Tags")).toBeTruthy();
    });
    it("displays filter values correctly", function () {
      var filtersWithValues = {
        species: "dog",
        minAge: 2,
        maxAge: 8,
        size: "medium",
        intent: "adoption",
        maxDistance: 25,
        personalityTags: ["Friendly", "Playful"]
      };
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: filtersWithValues,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      expect(_reactNative.screen.getByText("Advanced Pet Filters")).toBeTruthy();
    });
  });
  describe("Species Filter", function () {
    it("triggers onChange when species is selected", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var speciesSelect = _reactNative.screen.getByTestId("species-select");
      (0, _reactNative.fireEvent)(speciesSelect, "onValueChange", "cat");
      expect(mockOnChange).toHaveBeenCalledWith(_objectSpread(_objectSpread({}, defaultFilters), {}, {
        species: "cat"
      }));
    });
    it("triggers haptic feedback on selection", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var speciesSelect = _reactNative.screen.getByTestId("species-select");
      (0, _reactNative.fireEvent)(speciesSelect, "onValueChange", "dog");
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Light);
    });
  });
  describe("Age Range Filter", function () {
    it("updates min age correctly", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var minAgeInput = _reactNative.screen.getByTestId("min-age-input");
      _reactNative.fireEvent.changeText(minAgeInput, "3");
      expect(mockOnChange).toHaveBeenCalledWith(_objectSpread(_objectSpread({}, defaultFilters), {}, {
        minAge: 3
      }));
    });
    it("updates max age correctly", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var maxAgeInput = _reactNative.screen.getByTestId("max-age-input");
      _reactNative.fireEvent.changeText(maxAgeInput, "10");
      expect(mockOnChange).toHaveBeenCalledWith(_objectSpread(_objectSpread({}, defaultFilters), {}, {
        maxAge: 10
      }));
    });
    it("handles empty age input correctly", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var minAgeInput = _reactNative.screen.getByTestId("min-age-input");
      _reactNative.fireEvent.changeText(minAgeInput, "");
      expect(mockOnChange).toHaveBeenCalledWith(_objectSpread(_objectSpread({}, defaultFilters), {}, {
        minAge: undefined
      }));
    });
  });
  describe("Distance Slider", function () {
    it("updates distance when slider value changes", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var distanceSlider = _reactNative.screen.getByTestId("distance-slider");
      (0, _reactNative.fireEvent)(distanceSlider, "onValueChange", 75);
      expect(mockOnChange).toHaveBeenCalledWith(_objectSpread(_objectSpread({}, defaultFilters), {}, {
        maxDistance: 75
      }));
    });
    it("triggers haptic feedback on slider interaction", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var distanceSlider = _reactNative.screen.getByTestId("distance-slider");
      (0, _reactNative.fireEvent)(distanceSlider, "onValueChange", 75);
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Light);
    });
  });
  describe("Personality Tags", function () {
    it("toggles personality tags correctly", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var friendlyTag = _reactNative.screen.getByText("Friendly");
      _reactNative.fireEvent.press(friendlyTag);
      expect(mockOnChange).toHaveBeenCalledWith(_objectSpread(_objectSpread({}, defaultFilters), {}, {
        personalityTags: ["Friendly"]
      }));
    });
    it("removes selected personality tags", function () {
      var filtersWithTags = _objectSpread(_objectSpread({}, defaultFilters), {}, {
        personalityTags: ["Friendly", "Playful"]
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: filtersWithTags,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var friendlyTag = _reactNative.screen.getByText("Friendly");
      _reactNative.fireEvent.press(friendlyTag);
      expect(mockOnChange).toHaveBeenCalledWith(_objectSpread(_objectSpread({}, filtersWithTags), {}, {
        personalityTags: ["Playful"]
      }));
    });
    it("triggers haptic feedback on tag press", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var friendlyTag = _reactNative.screen.getByText("Friendly");
      _reactNative.fireEvent.press(friendlyTag);
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Medium);
    });
  });
  describe("Action Buttons", function () {
    it("calls onReset when reset button is pressed", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var resetButton = _reactNative.screen.getByText("Reset");
      _reactNative.fireEvent.press(resetButton);
      expect(mockOnReset).toHaveBeenCalledTimes(1);
    });
    it("calls onApply when apply button is pressed", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var applyButton = _reactNative.screen.getByText("Apply");
      _reactNative.fireEvent.press(applyButton);
      expect(mockOnApply).toHaveBeenCalledTimes(1);
    });
    it("triggers haptic feedback on button press", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var applyButton = _reactNative.screen.getByText("Apply");
      _reactNative.fireEvent.press(applyButton);
      expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Medium);
    });
  });
  describe("Accessibility", function () {
    it("has proper accessibility labels", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      expect(_reactNative.screen.getByLabelText("Select species")).toBeTruthy();
      expect(_reactNative.screen.getByLabelText("Minimum age")).toBeTruthy();
      expect(_reactNative.screen.getByLabelText("Maximum age")).toBeTruthy();
      expect(_reactNative.screen.getByLabelText("Select size")).toBeTruthy();
      expect(_reactNative.screen.getByLabelText("Select intent")).toBeTruthy();
    });
    it("supports screen readers with role attributes", function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      expect(_reactNative.screen.getByRole("group", {
        name: "Advanced Pet Filters"
      })).toBeTruthy();
    });
  });
  describe("Edge Cases", function () {
    it("handles undefined values gracefully", function () {
      var undefinedFilters = {};
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: undefinedFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      expect(_reactNative.screen.getByText("Advanced Pet Filters")).toBeTruthy();
    });
    it("handles large personality tag arrays", function () {
      var filtersWithManyTags = _objectSpread(_objectSpread({}, defaultFilters), {}, {
        personalityTags: ["Friendly", "Energetic", "Calm", "Playful", "Affectionate", "Independent"]
      });
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: filtersWithManyTags,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      expect(_reactNative.screen.getByText("Friendly")).toBeTruthy();
      expect(_reactNative.screen.getByText("Energetic")).toBeTruthy();
    });
  });
  describe("Performance", function () {
    it("renders efficiently with many personality tags", function () {
      var startTime = performance.now();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AdvancedPetFilters.AdvancedPetFilters, {
        value: defaultFilters,
        onChange: mockOnChange,
        onReset: mockOnReset,
        onApply: mockOnApply
      }));
      var endTime = performance.now();
      expect(endTime - startTime).toBeLessThan(100);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,