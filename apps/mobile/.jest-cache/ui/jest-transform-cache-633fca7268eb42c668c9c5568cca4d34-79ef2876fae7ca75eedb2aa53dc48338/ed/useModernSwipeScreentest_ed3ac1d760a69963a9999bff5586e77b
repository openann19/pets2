f2ace996ac5ff0deb0c77846e66708fb
"use strict";

_getJestObj().mock('@pawfectmatch/core', function () {
  return _objectSpread(_objectSpread({}, _globals.jest.requireActual('@pawfectmatch/core')), {}, {
    useAuthStore: _globals.jest.fn(),
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn()
    }
  });
});
_getJestObj().mock("../../../services/api", function () {
  return {
    matchesAPI: {
      getPets: _globals.jest.fn(),
      createMatch: _globals.jest.fn(),
      swipePet: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _useModernSwipeScreen = require("../useModernSwipeScreen");
var _core = require("@pawfectmatch/core");
var _api = require("../../../services/api");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseAuthStore = _core.useAuthStore;
var mockGetPets = _api.matchesAPI.getPets;
var mockCreateMatch = _api.matchesAPI.createMatch;
var mockSwipePet = _api.matchesAPI.swipePet;
var mockPets = [{
  _id: 'pet-1',
  name: 'Buddy',
  species: 'dog',
  photos: []
}, {
  _id: 'pet-2',
  name: 'Max',
  species: 'cat',
  photos: []
}, {
  _id: 'pet-3',
  name: 'Luna',
  species: 'dog',
  photos: []
}];
var mockMatch = {
  _id: 'match-1',
  pets: mockPets.slice(0, 2)
};
(0, _globals.describe)('useModernSwipeScreen Hook', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockUseAuthStore.mockReturnValue({
      user: {
        _id: 'user-123'
      }
    });
    mockGetPets.mockResolvedValue(mockPets);
    mockCreateMatch.mockResolvedValue(mockMatch);
    mockSwipePet.mockResolvedValue(undefined);
  });
  (0, _globals.afterEach)(function () {
    _globals.jest.clearAllTimers();
  });
  (0, _globals.describe)('Initialization', function () {
    (0, _globals.it)('should initialize with default values', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.pets).toEqual([]);
      (0, _globals.expect)(result.current.currentPet).toBeNull();
      (0, _globals.expect)(result.current.isLoading).toBe(false);
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.currentIndex).toBe(0);
      (0, _globals.expect)(result.current.showMatchModal).toBe(false);
      (0, _globals.expect)(result.current.matchedPet).toBeNull();
      (0, _globals.expect)(result.current.showFilters).toBe(false);
    });
    (0, _globals.it)('should initialize filters with default values', function () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook2.result;
      (0, _globals.expect)(result.current.filters).toEqual({
        breed: '',
        species: '',
        size: '',
        maxDistance: 25
      });
    });
  });
  (0, _globals.describe)('Load Pets', function () {
    (0, _globals.it)('should load pets successfully', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      (0, _globals.expect)(result.current.isLoading).toBe(false);
      (0, _globals.expect)(result.current.error).toBeNull();
      (0, _globals.expect)(result.current.pets).toEqual(mockPets);
      (0, _globals.expect)(mockGetPets).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle loading state correctly', (0, _asyncToGenerator2.default)(function* () {
      mockGetPets.mockImplementation(function () {
        return new Promise(function (resolve) {
          return setTimeout(function () {
            return resolve(mockPets);
          }, 100);
        });
      });
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook4.result;
      (0, _reactNative.act)(function () {
        result.current.loadPets();
      });
      (0, _globals.expect)(result.current.isLoading).toBe(true);
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
    }));
    (0, _globals.it)('should handle error when loading fails', (0, _asyncToGenerator2.default)(function* () {
      var errorMessage = 'Network error';
      mockGetPets.mockRejectedValue(new Error(errorMessage));
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      (0, _globals.expect)(result.current.isLoading).toBe(false);
      (0, _globals.expect)(result.current.error).toBe(errorMessage);
      (0, _globals.expect)(result.current.pets).toEqual([]);
    }));
    (0, _globals.it)('should use filters when loading pets', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook6.result;
      (0, _reactNative.act)(function () {
        result.current.setFilters({
          breed: 'Golden Retriever',
          species: 'dog',
          size: 'large',
          maxDistance: 50
        });
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      (0, _globals.expect)(mockGetPets).toHaveBeenCalledWith({
        breed: 'Golden Retriever',
        species: 'dog',
        size: 'large',
        maxDistance: 50
      });
    }));
  });
  (0, _globals.describe)('Swipe Actions', function () {
    (0, _globals.it)('should handle swipe right (like)', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      var currentPet = result.current.pets[0];
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.handleSwipeRight(currentPet);
      }));
      (0, _globals.expect)(mockCreateMatch).toHaveBeenCalledWith('user-123', currentPet._id);
    }));
    (0, _globals.it)('should handle swipe left (pass)', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      var currentPet = result.current.pets[0];
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.handleSwipeLeft(currentPet);
      }));
      (0, _globals.expect)(mockSwipePet).toHaveBeenCalledWith(currentPet._id, 'pass');
    }));
    (0, _globals.it)('should handle swipe up (superlike)', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      var currentPet = result.current.pets[0];
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.handleSwipeUp(currentPet);
      }));
      (0, _globals.expect)(mockCreateMatch).toHaveBeenCalledWith('user-123', currentPet._id);
    }));
    (0, _globals.it)('should handle button swipe actions', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.handleButtonSwipe('like');
      }));
      (0, _globals.expect)(mockSwipePet).toHaveBeenCalledWith(_globals.expect.any(String), 'like');
    }));
    (0, _globals.it)('should show match modal on successful match', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook1.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      var currentPet = result.current.pets[0];
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.handleSwipeRight(currentPet);
      }));
      (0, _globals.expect)(result.current.showMatchModal).toBe(true);
      (0, _globals.expect)(result.current.matchedPet).toEqual(currentPet);
    }));
  });
  (0, _globals.describe)('State Management', function () {
    (0, _globals.it)('should update current index', function () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook10.result;
      (0, _reactNative.act)(function () {
        result.current.setCurrentIndex(2);
      });
      (0, _globals.expect)(result.current.currentIndex).toBe(2);
    });
    (0, _globals.it)('should toggle match modal', function () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook11.result;
      (0, _reactNative.act)(function () {
        result.current.setShowMatchModal(true);
      });
      (0, _globals.expect)(result.current.showMatchModal).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.setShowMatchModal(false);
      });
      (0, _globals.expect)(result.current.showMatchModal).toBe(false);
    });
    (0, _globals.it)('should toggle filters panel', function () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook12.result;
      (0, _reactNative.act)(function () {
        result.current.setShowFilters(true);
      });
      (0, _globals.expect)(result.current.showFilters).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.setShowFilters(false);
      });
      (0, _globals.expect)(result.current.showFilters).toBe(false);
    });
    (0, _globals.it)('should update filters', function () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook13.result;
      var newFilters = {
        breed: 'Poodle',
        species: 'dog',
        size: 'medium',
        maxDistance: 30
      };
      (0, _reactNative.act)(function () {
        result.current.setFilters(newFilters);
      });
      (0, _globals.expect)(result.current.filters).toEqual(newFilters);
    });
  });
  (0, _globals.describe)('Filter Management', function () {
    (0, _globals.it)('should reload pets when filters change', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook14.result;
      var newFilters = {
        breed: 'Labrador',
        species: 'dog',
        size: 'large',
        maxDistance: 40
      };
      (0, _reactNative.act)(function () {
        result.current.setFilters(newFilters);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(mockGetPets).toHaveBeenCalledWith(newFilters);
      });
    }));
    (0, _globals.it)('should maintain previous filters on error', (0, _asyncToGenerator2.default)(function* () {
      mockGetPets.mockRejectedValueOnce(new Error('Filter error'));
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook15.result;
      var newFilters = {
        breed: 'Poodle',
        species: 'dog',
        size: 'small',
        maxDistance: 20
      };
      (0, _reactNative.act)(function () {
        result.current.setFilters(newFilters);
      });
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.error).toBeDefined();
      });
      (0, _globals.expect)(result.current.filters).toEqual(newFilters);
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle network errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockGetPets.mockRejectedValue(new Error('Network error'));
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      (0, _globals.expect)(result.current.error).toBe('Network error');
      (0, _globals.expect)(result.current.pets).toEqual([]);
      (0, _globals.expect)(result.current.isLoading).toBe(false);
    }));
    (0, _globals.it)('should handle API errors without user ID', (0, _asyncToGenerator2.default)(function* () {
      mockUseAuthStore.mockReturnValue({
        user: null
      });
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      var currentPet = result.current.pets[0];
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.handleSwipeRight(currentPet);
      }));
      (0, _globals.expect)(mockCreateMatch).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle missing pet ID', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook18.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      var incompletePet = {};
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.handleSwipeRight(incompletePet);
      }));
      (0, _globals.expect)(mockCreateMatch).not.toHaveBeenCalled();
    }));
  });
  (0, _globals.describe)('Current Pet Management', function () {
    (0, _globals.it)('should update current pet based on index', function () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook19.result;
      (0, _reactNative.act)(function () {
        result.current.loadPets();
      });
      (0, _reactNative.act)(function () {
        result.current.setCurrentIndex(1);
      });
      (0, _globals.expect)(result.current.currentPet).toEqual(result.current.pets[1]);
    });
    (0, _globals.it)('should handle null current pet when index is out of bounds', function () {
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook20.result;
      (0, _reactNative.act)(function () {
        result.current.setCurrentIndex(100);
      });
      (0, _globals.expect)(result.current.currentPet).toBeNull();
    });
    (0, _globals.it)('should reset current pet when pets array is empty', function () {
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook21.result;
      (0, _reactNative.act)(function () {
        result.current.setCurrentIndex(0);
      });
      (0, _globals.expect)(result.current.currentPet).toBeNull();
    });
  });
  (0, _globals.describe)('Match Modal', function () {
    (0, _globals.it)('should close match modal correctly', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook22.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var pet = result.current.pets[0];
        result.current.handleSwipeRight(pet);
      }));
      (0, _globals.expect)(result.current.showMatchModal).toBe(true);
      (0, _reactNative.act)(function () {
        result.current.setShowMatchModal(false);
      });
      (0, _globals.expect)(result.current.showMatchModal).toBe(false);
      (0, _globals.expect)(result.current.matchedPet).toBeNull();
    }));
    (0, _globals.it)('should maintain matched pet data when modal is shown', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook23.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      var pet = result.current.pets[0];
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.handleSwipeRight(pet);
      }));
      (0, _globals.expect)(result.current.showMatchModal).toBe(true);
      (0, _globals.expect)(result.current.matchedPet).toEqual(pet);
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty pets array', (0, _asyncToGenerator2.default)(function* () {
      mockGetPets.mockResolvedValue([]);
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook24.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      (0, _globals.expect)(result.current.pets).toEqual([]);
      (0, _globals.expect)(result.current.currentPet).toBeNull();
    }));
    (0, _globals.it)('should handle null user gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockUseAuthStore.mockReturnValue({
        user: null
      });
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook25.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        result.current.handleSwipeRight(mockPets[0]);
      }));
      (0, _globals.expect)(mockCreateMatch).not.toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle concurrent swipes', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook26.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.loadPets();
      }));
      var pet1 = result.current.pets[0];
      var pet2 = result.current.pets[1];
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield Promise.all([result.current.handleSwipeRight(pet1), result.current.handleSwipeLeft(pet2)]);
      }));
      (0, _globals.expect)(mockCreateMatch).toHaveBeenCalled();
      (0, _globals.expect)(mockSwipePet).toHaveBeenCalled();
    }));
    (0, _globals.it)('should handle swipe actions when pets are loading', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook27 = (0, _reactNative.renderHook)(function () {
          return (0, _useModernSwipeScreen.useModernSwipeScreen)();
        }),
        result = _renderHook27.result;
      (0, _reactNative.act)(function () {
        result.current.handleSwipeRight(mockPets[0]);
      });
      (0, _globals.expect)(mockCreateMatch).not.toHaveBeenCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,