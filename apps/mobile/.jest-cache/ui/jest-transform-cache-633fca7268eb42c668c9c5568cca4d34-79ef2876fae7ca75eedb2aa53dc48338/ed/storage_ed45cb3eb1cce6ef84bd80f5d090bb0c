4b6bf6bf2d4aad9c5b1c05112e5298fd
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secureStorage = void 0;
exports.getAccessToken = getAccessToken;
exports.setAccessToken = setAccessToken;
exports.removeAccessToken = removeAccessToken;
exports.getRefreshToken = getRefreshToken;
exports.setRefreshToken = setRefreshToken;
exports.removeRefreshToken = removeRefreshToken;
var environment_1 = require("./environment");
var WebStorageImpl = function () {
  function WebStorageImpl() {
    var getStorage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : environment_1.getLocalStorage;
    var getNavigator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : environment_1.getNavigatorObject;
    (0, _classCallCheck2.default)(this, WebStorageImpl);
    this.getStorage = getStorage;
    this.getNavigator = getNavigator;
  }
  return (0, _createClass2.default)(WebStorageImpl, [{
    key: "encryptData",
    value: function encryptData(data, key) {
      try {
        var encrypted = '';
        for (var i = 0; i < data.length; i++) {
          var charCode = data.charCodeAt(i) ^ key.charCodeAt(i % key.length);
          encrypted += String.fromCharCode(charCode);
        }
        return btoa(encrypted);
      } catch (error) {
        console.error('Encryption error:', error);
        return data;
      }
    }
  }, {
    key: "decryptData",
    value: function decryptData(encryptedData, key) {
      try {
        var decoded = atob(encryptedData);
        var decrypted = '';
        for (var i = 0; i < decoded.length; i++) {
          var charCode = decoded.charCodeAt(i) ^ key.charCodeAt(i % key.length);
          decrypted += String.fromCharCode(charCode);
        }
        return decrypted;
      } catch (error) {
        console.error('Decryption error:', error);
        return '';
      }
    }
  }, {
    key: "generateStorageKey",
    value: function generateStorageKey() {
      var _navigator$userAgent;
      var navigator = this.getNavigator();
      var userAgent = (_navigator$userAgent = navigator == null ? void 0 : navigator.userAgent) != null ? _navigator$userAgent : 'unknown_agent';
      var timestamp = Date.now().toString(36);
      var baseKey = `${userAgent}-${timestamp}`;
      return btoa(baseKey).slice(0, 16);
    }
  }, {
    key: "getItem",
    value: function getItem(key) {
      var storage = this.getStorage();
      if (storage == null) return Promise.resolve(null);
      try {
        var item = storage.getItem(key);
        if (item == null) return Promise.resolve(null);
        var storageKey = this.generateStorageKey();
        var decrypted = this.decryptData(item, storageKey);
        return Promise.resolve(decrypted);
      } catch (error) {
        console.error('Web storage get error:', error);
        return Promise.resolve(null);
      }
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      var storage = this.getStorage();
      if (storage == null) return Promise.resolve();
      try {
        var storageKey = this.generateStorageKey();
        var encrypted = this.encryptData(value, storageKey);
        storage.setItem(key, encrypted);
        return Promise.resolve();
      } catch (error) {
        console.error('Web storage set error:', error);
        return Promise.resolve();
      }
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      var storage = this.getStorage();
      if (storage == null) return Promise.resolve();
      try {
        storage.removeItem(key);
        return Promise.resolve();
      } catch (error) {
        console.error('Web storage remove error:', error);
        return Promise.resolve();
      }
    }
  }]);
}();
var MobileStorageImpl = function () {
  function MobileStorageImpl() {
    (0, _classCallCheck2.default)(this, MobileStorageImpl);
    this.secureStore = null;
    try {
      if (typeof window === 'undefined') {}
    } catch (_unused) {
      console.warn('expo-secure-store not available, falling back to AsyncStorage');
    }
  }
  return (0, _createClass2.default)(MobileStorageImpl, [{
    key: "getItem",
    value: function () {
      var _getItem = (0, _asyncToGenerator2.default)(function* (key) {
        try {
          if (this.secureStore !== null) {
            return yield this.secureStore.getItemAsync(key);
          } else {
            try {
              var AsyncStorageModule = yield Promise.resolve().then(function () {
                return require('@react-native-async-storage/async-storage');
              });
              var AsyncStorage = AsyncStorageModule.default;
              return yield AsyncStorage.getItem(key);
            } catch (_unused2) {
              console.warn('AsyncStorage not available');
              return null;
            }
          }
        } catch (_unused3) {
          console.error('Mobile storage get error');
          return null;
        }
      });
      function getItem(_x) {
        return _getItem.apply(this, arguments);
      }
      return getItem;
    }()
  }, {
    key: "setItem",
    value: function () {
      var _setItem = (0, _asyncToGenerator2.default)(function* (key, value) {
        try {
          if (this.secureStore !== null) {
            yield this.secureStore.setItemAsync(key, value);
          } else {
            try {
              var AsyncStorageModule = yield Promise.resolve().then(function () {
                return require('@react-native-async-storage/async-storage');
              });
              var AsyncStorage = AsyncStorageModule.default;
              yield AsyncStorage.setItem(key, value);
            } catch (_unused4) {
              console.warn('AsyncStorage not available');
            }
          }
        } catch (_unused5) {
          console.error('Mobile storage set error');
        }
      });
      function setItem(_x2, _x3) {
        return _setItem.apply(this, arguments);
      }
      return setItem;
    }()
  }, {
    key: "removeItem",
    value: function () {
      var _removeItem = (0, _asyncToGenerator2.default)(function* (key) {
        try {
          if (this.secureStore !== null) {
            yield this.secureStore.deleteItemAsync(key);
          } else {
            try {
              var AsyncStorageModule = yield Promise.resolve().then(function () {
                return require('@react-native-async-storage/async-storage');
              });
              var AsyncStorage = AsyncStorageModule.default;
              yield AsyncStorage.removeItem(key);
            } catch (_unused6) {
              console.warn('AsyncStorage not available');
            }
          }
        } catch (_unused7) {
          console.error('Mobile storage remove error');
        }
      });
      function removeItem(_x4) {
        return _removeItem.apply(this, arguments);
      }
      return removeItem;
    }()
  }]);
}();
var createStorageImplementation = function createStorageImplementation() {
  if ((0, environment_1.isBrowserEnvironment)()) {
    return new WebStorageImpl();
  }
  return new MobileStorageImpl();
};
exports.secureStorage = createStorageImplementation();
function getAccessToken() {
  return _getAccessToken.apply(this, arguments);
}
function _getAccessToken() {
  _getAccessToken = (0, _asyncToGenerator2.default)(function* () {
    return yield exports.secureStorage.getItem('accessToken');
  });
  return _getAccessToken.apply(this, arguments);
}
function setAccessToken(_x5) {
  return _setAccessToken.apply(this, arguments);
}
function _setAccessToken() {
  _setAccessToken = (0, _asyncToGenerator2.default)(function* (token) {
    yield exports.secureStorage.setItem('accessToken', token);
  });
  return _setAccessToken.apply(this, arguments);
}
function removeAccessToken() {
  return _removeAccessToken.apply(this, arguments);
}
function _removeAccessToken() {
  _removeAccessToken = (0, _asyncToGenerator2.default)(function* () {
    yield exports.secureStorage.removeItem('accessToken');
  });
  return _removeAccessToken.apply(this, arguments);
}
function getRefreshToken() {
  return _getRefreshToken.apply(this, arguments);
}
function _getRefreshToken() {
  _getRefreshToken = (0, _asyncToGenerator2.default)(function* () {
    return yield exports.secureStorage.getItem('refreshToken');
  });
  return _getRefreshToken.apply(this, arguments);
}
function setRefreshToken(_x6) {
  return _setRefreshToken.apply(this, arguments);
}
function _setRefreshToken() {
  _setRefreshToken = (0, _asyncToGenerator2.default)(function* (token) {
    yield exports.secureStorage.setItem('refreshToken', token);
  });
  return _setRefreshToken.apply(this, arguments);
}
function removeRefreshToken() {
  return _removeRefreshToken.apply(this, arguments);
}
function _removeRefreshToken() {
  _removeRefreshToken = (0, _asyncToGenerator2.default)(function* () {
    yield exports.secureStorage.removeItem('refreshToken');
  });
  return _removeRefreshToken.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,