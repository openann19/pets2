076e5a1d973218b71264c705aac10c78
"use strict";

_getJestObj().mock("expo-haptics", function () {
  return {
    impactAsync: jest.fn(),
    ImpactFeedbackStyle: {
      Light: "light",
      Medium: "medium",
      Heavy: "heavy"
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _PhotoAdjustmentSlider = require("../PhotoAdjustmentSlider");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("PhotoAdjustmentSlider", function () {
  var mockOnValueChange = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    Haptics.impactAsync.mockResolvedValue(undefined);
  });
  it("renders with all required props", function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Brightness",
        value: 100,
        min: 0,
        max: 200,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render.getByText;
    expect(getByText("Brightness")).toBeTruthy();
    expect(getByText("100")).toBeTruthy();
  });
  it("displays correct label", function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Contrast",
        value: 100,
        min: 0,
        max: 200,
        icon: "contrast",
        onValueChange: mockOnValueChange
      })),
      getByText = _render2.getByText;
    expect(getByText("Contrast")).toBeTruthy();
  });
  it("displays correct value", function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Saturation",
        value: 85,
        min: 0,
        max: 200,
        icon: "color-palette",
        onValueChange: mockOnValueChange
      })),
      getByText = _render3.getByText;
    expect(getByText("85")).toBeTruthy();
  });
  it("renders icon correctly", function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 50,
        min: 0,
        max: 100,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      UNSAFE_getByType = _render4.UNSAFE_getByType;
    expect(UNSAFE_getByType).toBeDefined();
  });
  it("provides haptic feedback on gesture start", function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 50,
        min: 0,
        max: 100,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render5.getByText;
    var slider = getByText("Test").parent;
    if (slider) (0, _reactNative.fireEvent)(slider, "touchStart");
    expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Light);
  });
  it("provides haptic feedback on gesture release", function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 50,
        min: 0,
        max: 100,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render6.getByText;
    var slider = getByText("Test").parent;
    if (slider) {
      (0, _reactNative.fireEvent)(slider, "touchStart");
      (0, _reactNative.fireEvent)(slider, "touchEnd");
    }
    expect(Haptics.impactAsync).toHaveBeenCalledWith(Haptics.ImpactFeedbackStyle.Medium);
  });
  it("calls onValueChange when dragging", function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 50,
        min: 0,
        max: 100,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render7.getByText;
    var slider = getByText("Test").parent;
    if (slider) (0, _reactNative.fireEvent)(slider, "touchStart");
    expect(mockOnValueChange).toHaveBeenCalled();
  });
  it("clamps values to min/max range", function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 50,
        min: 0,
        max: 100,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render8.getByText;
    var slider = getByText("Test").parent;
    if (slider) (0, _reactNative.fireEvent)(slider, "touchStart");
    var calls = mockOnValueChange.mock.calls;
    if (calls.length > 0) {
      var value = calls[0][0];
      expect(value).toBeGreaterThanOrEqual(0);
      expect(value).toBeLessThanOrEqual(100);
    }
  });
  it("handles minimum value correctly", function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 0,
        min: 0,
        max: 200,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render9.getByText;
    expect(getByText("0")).toBeTruthy();
  });
  it("handles maximum value correctly", function () {
    var _render0 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 200,
        min: 0,
        max: 200,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render0.getByText;
    expect(getByText("200")).toBeTruthy();
  });
  it("handles negative min values", function () {
    var _render1 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Warmth",
        value: -20,
        min: -100,
        max: 100,
        icon: "flame",
        onValueChange: mockOnValueChange
      })),
      getByText = _render1.getByText;
    expect(getByText("-20")).toBeTruthy();
  });
  it("displays positive values with plus sign when appropriate", function () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Warmth",
        value: 30,
        min: -100,
        max: 100,
        icon: "flame",
        onValueChange: mockOnValueChange
      })),
      getByText = _render10.getByText;
    expect(getByText("30")).toBeTruthy();
  });
  it("uses active state style when dragging", function () {
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 50,
        min: 0,
        max: 100,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render11.getByText;
    var slider = getByText("Test").parent;
    if (slider) (0, _reactNative.fireEvent)(slider, "touchStart");
    expect(slider).toBeTruthy();
  });
  it("resets to normal state after drag", function () {
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 50,
        min: 0,
        max: 100,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render12.getByText;
    var slider = getByText("Test").parent;
    if (slider) {
      (0, _reactNative.fireEvent)(slider, "touchStart");
      (0, _reactNative.fireEvent)(slider, "touchEnd");
    }
    expect(slider).toBeTruthy();
  });
  it("calculates correct percentage for value", function () {
    var value = 75;
    var min = 0;
    var max = 100;
    var expectedPercentage = (value - min) / (max - min) * 100;
    var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: value,
        min: min,
        max: max,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render13.getByText;
    var slider = getByText("Test").parent;
    expect(slider).toBeTruthy();
    expect(expectedPercentage).toBe(75);
  });
  it("handles rapid drag gestures", function () {
    var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 50,
        min: 0,
        max: 100,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render14.getByText;
    var slider = getByText("Test").parent;
    if (slider) {
      (0, _reactNative.fireEvent)(slider, "touchStart");
      (0, _reactNative.fireEvent)(slider, "touchMove");
      (0, _reactNative.fireEvent)(slider, "touchMove");
      (0, _reactNative.fireEvent)(slider, "touchEnd");
    }
    expect(slider).toBeTruthy();
  });
  it("uses different icons for different adjustments", function () {
    var icons = ["sunny", "contrast", "color-palette", "flame"];
    var labels = ["Brightness", "Contrast", "Saturation", "Warmth"];
    icons.forEach(function (icon, index) {
      var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
          label: labels[index],
          value: 50,
          min: 0,
          max: 100,
          icon: icon,
          onValueChange: mockOnValueChange
        })),
        getByText = _render15.getByText;
      expect(getByText(labels[index])).toBeTruthy();
    });
  });
  it("maintains value precision for floating point values", function () {
    var _render16 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 50.5,
        min: 0,
        max: 100,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render16.getByText;
    expect(getByText("50")).toBeTruthy();
  });
  it("handles disabled state gracefully", function () {
    var _render17 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PhotoAdjustmentSlider.PhotoAdjustmentSlider, {
        label: "Test",
        value: 50,
        min: 0,
        max: 100,
        icon: "sunny",
        onValueChange: mockOnValueChange
      })),
      getByText = _render17.getByText;
    var slider = getByText("Test").parent;
    expect(slider).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,