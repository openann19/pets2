d1d46469beaf3ab452f82b7b405f4c31
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useForgotPasswordScreen = useForgotPasswordScreen;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _core = require("@pawfectmatch/core");
var _AuthService = require("../../services/AuthService");
var _useFormState2 = require("../utils/useFormState");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function useForgotPasswordScreen(_ref) {
  var navigation = _ref.navigation;
  var validateForm = (0, _react.useCallback)(function (values) {
    var errors = {};
    if (!values.email.trim()) {
      errors.email = "Email is required";
    } else if (!/\S+@\S+\.\S+/.test(values.email)) {
      errors.email = "Please enter a valid email address";
    }
    return errors;
  }, []);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useFormState = (0, _useFormState2.useFormState)({
      initialValues: {
        email: ""
      },
      validate: validateForm
    }),
    values = _useFormState.values,
    errors = _useFormState.errors,
    isValid = _useFormState.isValid,
    setValue = _useFormState.setValue,
    handleSubmitForm = _useFormState.handleSubmit;
  var handleForgotPassword = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    setLoading(true);
    try {
      _core.logger.info("Forgot password request", {
        email: values.email
      });
      var response = yield _AuthService.authService.forgotPassword(values.email);
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(function () {});
      _reactNative.Alert.alert("Check Your Email", "We've sent you a password reset link. Please check your email and follow the instructions.", [{
        text: "OK",
        onPress: function onPress() {
          return navigation.goBack();
        },
        style: "default"
      }], {
        cancelable: false
      });
    } catch (error) {
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error).catch(function () {});
      _core.logger.error("Forgot password failed", {
        error: error
      });
      var errorMessage = error instanceof _AuthService.AuthError ? error.message : "Failed to send password reset email. Please try again.";
      _reactNative.Alert.alert("Error", errorMessage, [{
        text: "OK",
        style: "default"
      }]);
    } finally {
      setLoading(false);
    }
  }), [values.email, navigation]);
  var handleSubmit = handleSubmitForm(handleForgotPassword);
  var navigateBack = (0, _react.useCallback)(function () {
    navigation.goBack();
  }, [navigation]);
  return {
    values: values,
    errors: errors,
    isValid: isValid,
    loading: loading,
    setValue: setValue,
    handleSubmit: handleSubmit,
    navigateBack: navigateBack
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiSGFwdGljcyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NvcmUiLCJfQXV0aFNlcnZpY2UiLCJfdXNlRm9ybVN0YXRlMiIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdDIiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInVzZUZvcmdvdFBhc3N3b3JkU2NyZWVuIiwiX3JlZiIsIm5hdmlnYXRpb24iLCJ2YWxpZGF0ZUZvcm0iLCJ1c2VDYWxsYmFjayIsInZhbHVlcyIsImVycm9ycyIsImVtYWlsIiwidHJpbSIsInRlc3QiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsIl91c2VGb3JtU3RhdGUiLCJ1c2VGb3JtU3RhdGUiLCJpbml0aWFsVmFsdWVzIiwidmFsaWRhdGUiLCJpc1ZhbGlkIiwic2V0VmFsdWUiLCJoYW5kbGVTdWJtaXRGb3JtIiwiaGFuZGxlU3VibWl0IiwiaGFuZGxlRm9yZ290UGFzc3dvcmQiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJpbXBhY3RBc3luYyIsIkltcGFjdEZlZWRiYWNrU3R5bGUiLCJMaWdodCIsImNhdGNoIiwibG9nZ2VyIiwiaW5mbyIsInJlc3BvbnNlIiwiYXV0aFNlcnZpY2UiLCJmb3Jnb3RQYXNzd29yZCIsIm5vdGlmaWNhdGlvbkFzeW5jIiwiTm90aWZpY2F0aW9uRmVlZGJhY2tUeXBlIiwiU3VjY2VzcyIsIkFsZXJ0IiwiYWxlcnQiLCJ0ZXh0Iiwib25QcmVzcyIsImdvQmFjayIsInN0eWxlIiwiY2FuY2VsYWJsZSIsImVycm9yIiwiRXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJBdXRoRXJyb3IiLCJtZXNzYWdlIiwibmF2aWdhdGVCYWNrIl0sInNvdXJjZXMiOlsidXNlRm9yZ290UGFzc3dvcmRTY3JlZW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB1c2VGb3Jnb3RQYXNzd29yZFNjcmVlbiBIb29rXG4gKiBNYW5hZ2VzIEZvcmdvdCBQYXNzd29yZCBzY3JlZW4gc3RhdGUgYW5kIGludGVyYWN0aW9uc1xuICovXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0ICogYXMgSGFwdGljcyBmcm9tIFwiZXhwby1oYXB0aWNzXCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiQHBhd2ZlY3RtYXRjaC9jb3JlXCI7XG5pbXBvcnQgeyBhdXRoU2VydmljZSwgQXV0aEVycm9yIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL0F1dGhTZXJ2aWNlXCI7XG5pbXBvcnQgeyB1c2VGb3JtU3RhdGUgfSBmcm9tIFwiLi4vdXRpbHMvdXNlRm9ybVN0YXRlXCI7XG5pbXBvcnQgdHlwZSB7IFJvb3RTdGFja1NjcmVlblByb3BzIH0gZnJvbSBcIi4uLy4uL25hdmlnYXRpb24vdHlwZXNcIjtcblxuaW50ZXJmYWNlIEZvcmdvdFBhc3N3b3JkRm9ybVZhbHVlcyB7XG4gIGVtYWlsOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBVc2VGb3Jnb3RQYXNzd29yZFNjcmVlbk9wdGlvbnMge1xuICBuYXZpZ2F0aW9uOiBSb290U3RhY2tTY3JlZW5Qcm9wczxcIkZvcmdvdFBhc3N3b3JkXCI+W1wibmF2aWdhdGlvblwiXTtcbn1cblxuaW50ZXJmYWNlIFVzZUZvcmdvdFBhc3N3b3JkU2NyZWVuUmV0dXJuIHtcbiAgdmFsdWVzOiBGb3Jnb3RQYXNzd29yZEZvcm1WYWx1ZXM7XG4gIGVycm9yczogUGFydGlhbDxSZWNvcmQ8a2V5b2YgRm9yZ290UGFzc3dvcmRGb3JtVmFsdWVzLCBzdHJpbmc+PjtcbiAgaXNWYWxpZDogYm9vbGVhbjtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgc2V0VmFsdWU6IChuYW1lOiBrZXlvZiBGb3Jnb3RQYXNzd29yZEZvcm1WYWx1ZXMsIHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGhhbmRsZVN1Ym1pdDogKGU/OiBhbnkpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+O1xuICBuYXZpZ2F0ZUJhY2s6ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3Jnb3RQYXNzd29yZFNjcmVlbih7XG4gIG5hdmlnYXRpb24sXG59OiBVc2VGb3Jnb3RQYXNzd29yZFNjcmVlbk9wdGlvbnMpOiBVc2VGb3Jnb3RQYXNzd29yZFNjcmVlblJldHVybiB7XG4gIC8vIEZvcm0gdmFsaWRhdGlvbiBydWxlc1xuICBjb25zdCB2YWxpZGF0ZUZvcm0gPSB1c2VDYWxsYmFjayhcbiAgICAoXG4gICAgICB2YWx1ZXM6IEZvcmdvdFBhc3N3b3JkRm9ybVZhbHVlcyxcbiAgICApOiBQYXJ0aWFsPFJlY29yZDxrZXlvZiBGb3Jnb3RQYXNzd29yZEZvcm1WYWx1ZXMsIHN0cmluZz4+ID0+IHtcbiAgICAgIGNvbnN0IGVycm9yczogUGFydGlhbDxSZWNvcmQ8a2V5b2YgRm9yZ290UGFzc3dvcmRGb3JtVmFsdWVzLCBzdHJpbmc+PiA9XG4gICAgICAgIHt9O1xuXG4gICAgICBpZiAoIXZhbHVlcy5lbWFpbC50cmltKCkpIHtcbiAgICAgICAgZXJyb3JzLmVtYWlsID0gXCJFbWFpbCBpcyByZXF1aXJlZFwiO1xuICAgICAgfSBlbHNlIGlmICghL1xcUytAXFxTK1xcLlxcUysvLnRlc3QodmFsdWVzLmVtYWlsKSkge1xuICAgICAgICBlcnJvcnMuZW1haWwgPSBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3NcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVycm9ycztcbiAgICB9LFxuICAgIFtdLFxuICApO1xuXG4gIC8vIEZvcm0gc3RhdGUgbWFuYWdlbWVudFxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXMsXG4gICAgZXJyb3JzLFxuICAgIGlzVmFsaWQsXG4gICAgc2V0VmFsdWUsXG4gICAgaGFuZGxlU3VibWl0OiBoYW5kbGVTdWJtaXRGb3JtLFxuICB9ID0gdXNlRm9ybVN0YXRlPEZvcmdvdFBhc3N3b3JkRm9ybVZhbHVlcz4oe1xuICAgIGluaXRpYWxWYWx1ZXM6IHtcbiAgICAgIGVtYWlsOiBcIlwiLFxuICAgIH0sXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlRm9ybSxcbiAgfSk7XG5cbiAgLy8gSGFuZGxlIGZvcmdvdCBwYXNzd29yZCBzdWJtaXNzaW9uXG4gIGNvbnN0IGhhbmRsZUZvcmdvdFBhc3N3b3JkID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIEhhcHRpY3MuaW1wYWN0QXN5bmMoSGFwdGljcy5JbXBhY3RGZWVkYmFja1N0eWxlLkxpZ2h0KS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgc2V0TG9hZGluZyh0cnVlKTtcblxuICAgIHRyeSB7XG4gICAgICBsb2dnZXIuaW5mbyhcIkZvcmdvdCBwYXNzd29yZCByZXF1ZXN0XCIsIHsgZW1haWw6IHZhbHVlcy5lbWFpbCB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoU2VydmljZS5mb3Jnb3RQYXNzd29yZCh2YWx1ZXMuZW1haWwpO1xuXG4gICAgICAvLyBTdWNjZXNzIGhhcHRpYyBmZWVkYmFja1xuICAgICAgSGFwdGljcy5ub3RpZmljYXRpb25Bc3luYyhIYXB0aWNzLk5vdGlmaWNhdGlvbkZlZWRiYWNrVHlwZS5TdWNjZXNzKS5jYXRjaChcbiAgICAgICAgKCkgPT4ge30sXG4gICAgICApO1xuXG4gICAgICBBbGVydC5hbGVydChcbiAgICAgICAgXCJDaGVjayBZb3VyIEVtYWlsXCIsXG4gICAgICAgIFwiV2UndmUgc2VudCB5b3UgYSBwYXNzd29yZCByZXNldCBsaW5rLiBQbGVhc2UgY2hlY2sgeW91ciBlbWFpbCBhbmQgZm9sbG93IHRoZSBpbnN0cnVjdGlvbnMuXCIsXG4gICAgICAgIFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0OiBcIk9LXCIsXG4gICAgICAgICAgICBvblByZXNzOiAoKSA9PiBuYXZpZ2F0aW9uLmdvQmFjaygpLFxuICAgICAgICAgICAgc3R5bGU6IFwiZGVmYXVsdFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHsgY2FuY2VsYWJsZTogZmFsc2UgfSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIEVycm9yIGhhcHRpYyBmZWVkYmFja1xuICAgICAgSGFwdGljcy5ub3RpZmljYXRpb25Bc3luYyhIYXB0aWNzLk5vdGlmaWNhdGlvbkZlZWRiYWNrVHlwZS5FcnJvcikuY2F0Y2goXG4gICAgICAgICgpID0+IHt9LFxuICAgICAgKTtcblxuICAgICAgbG9nZ2VyLmVycm9yKFwiRm9yZ290IHBhc3N3b3JkIGZhaWxlZFwiLCB7IGVycm9yIH0pO1xuXG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEF1dGhFcnJvclxuICAgICAgICAgID8gZXJyb3IubWVzc2FnZVxuICAgICAgICAgIDogXCJGYWlsZWQgdG8gc2VuZCBwYXNzd29yZCByZXNldCBlbWFpbC4gUGxlYXNlIHRyeSBhZ2Fpbi5cIjtcblxuICAgICAgQWxlcnQuYWxlcnQoXCJFcnJvclwiLCBlcnJvck1lc3NhZ2UsIFt7IHRleHQ6IFwiT0tcIiwgc3R5bGU6IFwiZGVmYXVsdFwiIH1dKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9LCBbdmFsdWVzLmVtYWlsLCBuYXZpZ2F0aW9uXSk7XG5cbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gaGFuZGxlU3VibWl0Rm9ybShoYW5kbGVGb3Jnb3RQYXNzd29yZCk7XG5cbiAgY29uc3QgbmF2aWdhdGVCYWNrID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIG5hdmlnYXRpb24uZ29CYWNrKCk7XG4gIH0sIFtuYXZpZ2F0aW9uXSk7XG5cbiAgcmV0dXJuIHtcbiAgICB2YWx1ZXMsXG4gICAgZXJyb3JzLFxuICAgIGlzVmFsaWQsXG4gICAgbG9hZGluZyxcbiAgICBzZXRWYWx1ZSxcbiAgICBoYW5kbGVTdWJtaXQsXG4gICAgbmF2aWdhdGVCYWNrLFxuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFJQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFDLHVCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxLQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxZQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxjQUFBLEdBQUFOLE9BQUE7QUFBcUQsU0FBQUcsd0JBQUFJLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFOLHVCQUFBLFlBQUFBLHdCQUFBSSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEdBQUEs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