5c0c070f959f7cf0eb9e4e0ca33afe42
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ModernSwipeScreen;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _vectorIcons = require("@expo/vector-icons");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _components = require("../components");
var _useModernSwipeScreen2 = require("../hooks/screens/useModernSwipeScreen");
var _swipe = require("../components/swipe");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  screenWidth = _Dimensions$get.width,
  screenHeight = _Dimensions$get.height;
function ModernSwipeScreen(_ref) {
  var navigation = _ref.navigation;
  var _useModernSwipeScreen = (0, _useModernSwipeScreen2.useModernSwipeScreen)(),
    pets = _useModernSwipeScreen.pets,
    currentPet = _useModernSwipeScreen.currentPet,
    isLoading = _useModernSwipeScreen.isLoading,
    error = _useModernSwipeScreen.error,
    currentIndex = _useModernSwipeScreen.currentIndex,
    showMatchModal = _useModernSwipeScreen.showMatchModal,
    matchedPet = _useModernSwipeScreen.matchedPet,
    showFilters = _useModernSwipeScreen.showFilters,
    filters = _useModernSwipeScreen.filters,
    setCurrentIndex = _useModernSwipeScreen.setCurrentIndex,
    setShowMatchModal = _useModernSwipeScreen.setShowMatchModal,
    setShowFilters = _useModernSwipeScreen.setShowFilters,
    setFilters = _useModernSwipeScreen.setFilters,
    loadPets = _useModernSwipeScreen.loadPets,
    handleButtonSwipe = _useModernSwipeScreen.handleButtonSwipe,
    handleSwipeLeft = _useModernSwipeScreen.handleSwipeLeft,
    handleSwipeRight = _useModernSwipeScreen.handleSwipeRight,
    handleSwipeUp = _useModernSwipeScreen.handleSwipeUp;
  if (isLoading && pets.length === 0) {
    return (0, _jsxRuntime.jsx)(_components.EliteContainer, {
      gradient: "primary",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loadingContainer,
        children: (0, _jsxRuntime.jsxs)(_components.FXContainerPresets.glass, {
          style: styles.loadingCard,
          children: [(0, _jsxRuntime.jsx)(_components.Heading1, {
            animated: true,
            style: styles.loadingTitle,
            children: "Finding Matches"
          }), (0, _jsxRuntime.jsx)(_components.Body, {
            style: styles.loadingSubtitle,
            children: "Discovering your perfect pet companions..."
          })]
        })
      })
    });
  }
  if (error) {
    return (0, _jsxRuntime.jsx)(_components.EliteContainer, {
      gradient: "primary",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.emptyContainer,
        children: (0, _jsxRuntime.jsxs)(_components.FXContainer, {
          type: "glow",
          hasGlow: true,
          glowColor: _components.Theme.colors.status.error,
          style: styles.errorCard,
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "alert-circle-outline",
            size: 80,
            color: _components.Theme.colors.status.error
          }), (0, _jsxRuntime.jsx)(_components.Heading2, {
            style: styles.errorTitle,
            children: "Error loading pets"
          }), (0, _jsxRuntime.jsx)(_components.Body, {
            style: styles.errorMessage,
            children: error
          }), (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.premium, {
            title: "Try Again",
            leftIcon: "refresh",
            onPress: loadPets
          })]
        })
      })
    });
  }
  if (!currentPet) {
    return (0, _jsxRuntime.jsx)(_components.EliteContainer, {
      gradient: "primary",
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.emptyContainer,
        children: (0, _jsxRuntime.jsxs)(_components.FXContainerPresets.glass, {
          style: styles.emptyCard,
          children: [(0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: "heart-outline",
            size: 80,
            color: _components.Theme.colors.primary[500]
          }), (0, _jsxRuntime.jsx)(_components.Heading2, {
            style: styles.emptyTitle,
            children: "No more pets!"
          }), (0, _jsxRuntime.jsx)(_components.Body, {
            style: styles.emptySubtitle,
            children: "Check back later for more matches"
          }), (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.premium, {
            title: "Refresh",
            leftIcon: "refresh",
            onPress: loadPets
          })]
        })
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_components.EliteContainer, {
    gradient: "primary",
    children: [(0, _jsxRuntime.jsx)(_components.EliteHeader, {
      title: "Discover",
      subtitle: "Find your perfect match",
      blur: true,
      onBack: function onBack() {
        return navigation.goBack();
      },
      rightComponent: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.headerActions,
        children: [(0, _jsxRuntime.jsx)(_components.EliteButtonPresets.glass, {
          title: "Filter",
          size: "sm",
          leftIcon: "options-outline",
          onPress: function onPress() {
            setShowFilters(!showFilters);
          }
        }), (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.glass, {
          title: "",
          size: "sm",
          leftIcon: "heart",
          onPress: function onPress() {
            return navigation.navigate("Matches");
          }
        })]
      })
    }), showFilters && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.filterContainer,
      children: (0, _jsxRuntime.jsx)(_swipe.FilterPanel, {
        filters: filters,
        onFilterChange: function onFilterChange(newFilters) {
          setFilters(_objectSpread(_objectSpread({}, filters), newFilters));
        }
      })
    }), (0, _jsxRuntime.jsx)(_swipe.SwipeGestureHints, {}), (0, _jsxRuntime.jsx)(_swipe.SwipeGestureHintOverlay, {}), (0, _jsxRuntime.jsx)(_swipe.CardStack, {
      currentPet: currentPet,
      nextPet: pets[currentIndex + 1],
      currentIndex: currentIndex,
      onSwipeLeft: function onSwipeLeft() {
        handleSwipeLeft(currentPet);
      },
      onSwipeRight: function onSwipeRight() {
        handleSwipeRight(currentPet);
      },
      onSwipeUp: function onSwipeUp() {
        handleSwipeUp(currentPet);
      }
    }), pets[currentIndex + 1] && (0, _jsxRuntime.jsx)(_swipe.PeekSheet, {
      nextPet: pets[currentIndex + 1],
      show: true
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.actionButtons,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        children: (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.glass, {
          title: "",
          size: "xl",
          leftIcon: "close",
          onPress: function onPress() {
            handleButtonSwipe("pass");
          },
          style: styles.actionButton
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        children: (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.holographic, {
          title: "",
          size: "lg",
          leftIcon: "star",
          onPress: function onPress() {
            handleButtonSwipe("superlike");
          },
          style: styles.actionButton
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        children: (0, _jsxRuntime.jsx)(_components.EliteButtonPresets.premium, {
          title: "",
          size: "xl",
          leftIcon: "heart",
          onPress: function onPress() {
            handleButtonSwipe("like");
          },
          style: styles.actionButton
        })
      })]
    }), showMatchModal && matchedPet && (0, _jsxRuntime.jsx)(_swipe.MatchModal, {
      pet: matchedPet,
      show: showMatchModal,
      onKeepSwiping: function onKeepSwiping() {
        setShowMatchModal(false);
      },
      onSendMessage: function onSendMessage() {
        setShowMatchModal(false);
        navigation.navigate("Chat", {
          matchId: matchedPet._id,
          petName: matchedPet.name
        });
      }
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: _components.Theme.spacing.xl
  },
  loadingCard: {
    padding: _components.Theme.spacing["4xl"],
    alignItems: "center"
  },
  loadingTitle: {
    textAlign: "center",
    marginBottom: _components.Theme.spacing.lg
  },
  loadingSubtitle: {
    textAlign: "center",
    color: _components.Theme.colors.text.secondary
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: _components.Theme.spacing.xl
  },
  errorCard: {
    padding: _components.Theme.spacing["4xl"],
    alignItems: "center"
  },
  errorTitle: {
    textAlign: "center",
    marginTop: _components.Theme.spacing.lg,
    marginBottom: _components.Theme.spacing.md,
    color: _components.Theme.colors.status.error
  },
  errorMessage: {
    textAlign: "center",
    marginBottom: _components.Theme.spacing.xl,
    color: _components.Theme.colors.text.secondary
  },
  emptyCard: {
    padding: _components.Theme.spacing["4xl"],
    alignItems: "center"
  },
  emptyTitle: {
    textAlign: "center",
    marginTop: _components.Theme.spacing.lg,
    marginBottom: _components.Theme.spacing.md
  },
  emptySubtitle: {
    textAlign: "center",
    marginBottom: _components.Theme.spacing.xl,
    color: _components.Theme.colors.text.secondary
  },
  headerActions: {
    flexDirection: "row",
    gap: _components.Theme.spacing.sm
  },
  filterContainer: {
    padding: _components.Theme.spacing.lg
  },
  filterPanel: {
    padding: _components.Theme.spacing.xl
  },
  filterTitle: {
    marginBottom: _components.Theme.spacing.lg,
    textAlign: "center"
  },
  filterSection: {
    marginBottom: _components.Theme.spacing.lg
  },
  filterLabel: {
    marginBottom: _components.Theme.spacing.sm,
    fontWeight: _components.Theme.typography.fontWeight.semibold
  },
  filterButtons: {
    flexDirection: "row",
    flexWrap: "wrap",
    gap: _components.Theme.spacing.sm
  },
  cardContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingHorizontal: _components.Theme.spacing.xl
  },
  nextCardContainer: {
    position: "absolute",
    zIndex: -1
  },
  nextCard: {
    width: screenWidth - _components.Theme.spacing["4xl"] - _components.Theme.spacing.lg,
    height: screenHeight * 0.65,
    transform: [{
      scale: 0.95
    }],
    opacity: 0.8
  },
  actionButtons: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    paddingVertical: _components.Theme.spacing.xl,
    paddingHorizontal: _components.Theme.spacing["4xl"],
    gap: _components.Theme.spacing.lg
  },
  actionButton: {
    width: 60,
    height: 60,
    borderRadius: 30
  },
  matchModal: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(0,0,0,0.8)",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 1000
  },
  matchModalContent: {
    width: screenWidth - _components.Theme.spacing["4xl"],
    padding: _components.Theme.spacing["4xl"],
    alignItems: "center"
  },
  matchTitle: {
    textAlign: "center",
    marginBottom: _components.Theme.spacing.xl
  },
  matchPhotos: {
    flexDirection: "row",
    marginBottom: _components.Theme.spacing.xl,
    gap: _components.Theme.spacing.lg
  },
  matchPhotoContainer: {
    width: 80,
    height: 80,
    borderRadius: 40
  },
  matchText: {
    textAlign: "center",
    marginBottom: _components.Theme.spacing.xl,
    color: _components.Theme.colors.text.secondary
  },
  matchButtons: {
    flexDirection: "row",
    gap: _components.Theme.spacing.lg
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,