defc08dc4072de5511b19af3d168e9fc
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _vectorIcons = require("@expo/vector-icons");
var _core = require("@pawfectmatch/core");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _expoLinearGradient = require("expo-linear-gradient");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = _interopRequireDefault(require("react-native-reanimated"));
var _useUnifiedAnimations = require("../hooks/useUnifiedAnimations");
var _useSwipeGesturesRNGH2 = require("../hooks/useSwipeGesturesRNGH");
var _unifiedTheme = require("../theme/unified-theme");
var _Provider = require("../theme/Provider");
var _DoubleTapLikePlus = require("./Gestures/DoubleTapLikePlus");
var _LikeArbitrator = _interopRequireDefault(require("./Gestures/LikeArbitrator"));
var _UndoPill = _interopRequireDefault(require("./feedback/UndoPill"));
var _useLikeWithUndo2 = require("../hooks/useLikeWithUndo");
var _useInteractionMetrics = require("../hooks/useInteractionMetrics");
var _SmartImage = _interopRequireDefault(require("./common/SmartImage"));
var _MicroPressable = _interopRequireDefault(require("./micro/MicroPressable"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _Dimensions$get = _reactNative.Dimensions.get("window"),
  SCREEN_WIDTH = _Dimensions$get.width,
  SCREEN_HEIGHT = _Dimensions$get.height;
function ModernSwipeCardComponent(_ref) {
  var pet = _ref.pet,
    onSwipeLeft = _ref.onSwipeLeft,
    onSwipeRight = _ref.onSwipeRight,
    onSwipeUp = _ref.onSwipeUp,
    _ref$isTopCard = _ref.isTopCard,
    isTopCard = _ref$isTopCard === void 0 ? false : _ref$isTopCard,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    style = _ref.style;
  var _useTheme = (0, _Provider.useTheme)(),
    colors = _useTheme.colors;
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentPhotoIndex = _useState2[0],
    setCurrentPhotoIndex = _useState2[1];
  var _useDoubleTapMetrics = (0, _useInteractionMetrics.useDoubleTapMetrics)(),
    startInteraction = _useDoubleTapMetrics.startInteraction,
    endInteraction = _useDoubleTapMetrics.endInteraction;
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isAccessibilityEnabled = _useState4[0],
    setIsAccessibilityEnabled = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isProcessing = _useState6[0],
    setIsProcessing = _useState6[1];
  var _useLikeWithUndo = (0, _useLikeWithUndo2.useLikeWithUndo)({
      onLike: function onLike() {
        var cleanup = function cleanup() {
          startInteraction('doubleTap', {
            petId: pet._id
          });
          onSwipeRight(pet);
          endInteraction('doubleTap', true, {
            method: 'doubleTap'
          });
        };
        cleanup();
        return function () {
          _core.logger.info("Like undone for:", {
            petName: pet.name
          });
        };
      },
      onUndo: function onUndo() {
        _core.logger.info("Undo like for:", {
          petName: pet.name
        });
      }
    }),
    likeNow = _useLikeWithUndo.likeNow,
    triggerUndoPill = _useLikeWithUndo.triggerUndoPill,
    undoNow = _useLikeWithUndo.undoNow;
  var handleDoubleTapLike = (0, _react.useCallback)(function () {
    likeNow();
    triggerUndoPill();
  }, [likeNow, triggerUndoPill]);
  _react.default.useEffect(function () {
    _reactNative.AccessibilityInfo.isReduceMotionEnabled().then(setIsAccessibilityEnabled);
  }, []);
  var handleLike = (0, _react.useCallback)(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (pet) {
      if (isProcessing) return;
      setIsProcessing(true);
      try {
        _core.logger.info("Liked pet:", {
          petName: pet.name
        });
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 100);
        });
      } catch (error) {
        _core.logger.error("Error liking pet:", {
          error: error
        });
      } finally {
        setIsProcessing(false);
      }
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [isProcessing]);
  var handlePass = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (pet) {
      if (isProcessing) return;
      setIsProcessing(true);
      try {
        _core.logger.info("Passed pet:", {
          petName: pet.name
        });
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 100);
        });
      } catch (error) {
        _core.logger.error("Error passing pet:", {
          error: error
        });
      } finally {
        setIsProcessing(false);
      }
    });
    return function (_x2) {
      return _ref3.apply(this, arguments);
    };
  }(), [isProcessing]);
  var handleSuperLike = (0, _react.useCallback)(function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (pet) {
      if (isProcessing) return;
      setIsProcessing(true);
      try {
        _core.logger.info("Super liked pet:", {
          petName: pet.name
        });
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 100);
        });
      } catch (error) {
        _core.logger.error("Error super liking pet:", {
          error: error
        });
      } finally {
        setIsProcessing(false);
      }
    });
    return function (_x3) {
      return _ref4.apply(this, arguments);
    };
  }(), [isProcessing]);
  var handleSwipeLeft = (0, _react.useCallback)(function () {
    if (disabled || isProcessing) return;
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    handlePass(pet).then(function () {
      onSwipeLeft(pet);
    });
  }, [disabled, isProcessing, pet, handlePass, onSwipeLeft]);
  var handleSwipeRight = (0, _react.useCallback)(function () {
    if (disabled || isProcessing) return;
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    handleLike(pet).then(function () {
      onSwipeRight(pet);
    });
  }, [disabled, isProcessing, pet, handleLike, onSwipeRight]);
  var handleSwipeUp = (0, _react.useCallback)(function () {
    if (disabled || isProcessing) return;
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);
    handleSuperLike(pet).then(function () {
      onSwipeUp(pet);
    });
  }, [disabled, isProcessing, pet, handleSuperLike, onSwipeUp]);
  var _useSwipeGesturesRNGH = (0, _useSwipeGesturesRNGH2.useSwipeGesturesRNGH)({
      onSwipeLeft: function onSwipeLeft() {
        handleSwipeLeft();
      },
      onSwipeRight: function onSwipeRight() {
        handleSwipeRight();
      },
      onSwipeUp: function onSwipeUp() {
        handleSwipeUp();
      },
      swipeThreshold: 0.30,
      enabled: !disabled && isTopCard
    }),
    gesture = _useSwipeGesturesRNGH.gesture,
    panStyle = _useSwipeGesturesRNGH.cardStyle,
    likeStyle = _useSwipeGesturesRNGH.likeStyle,
    nopeStyle = _useSwipeGesturesRNGH.nopeStyle,
    superStyle = _useSwipeGesturesRNGH.superStyle,
    translateX = _useSwipeGesturesRNGH.tx,
    translateY = _useSwipeGesturesRNGH.ty;
  var _useEntranceAnimation = (0, _useUnifiedAnimations.useEntranceAnimation)("slideIn", 0),
    startEntrance = _useEntranceAnimation.start,
    entranceStyle = _useEntranceAnimation.animatedStyle;
  _react.default.useEffect(function () {
    if (!isTopCard) {
      startEntrance();
    }
  }, [isTopCard, startEntrance]);
  var nextPhoto = (0, _react.useCallback)(function () {
    if (currentPhotoIndex < pet.photos.length - 1) {
      setCurrentPhotoIndex(function (prev) {
        return prev + 1;
      });
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    }
  }, [currentPhotoIndex, pet.photos.length]);
  var prevPhoto = (0, _react.useCallback)(function () {
    if (currentPhotoIndex > 0) {
      setCurrentPhotoIndex(function (prev) {
        return prev - 1;
      });
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    }
  }, [currentPhotoIndex]);
  var cardStyle = (0, _react.useMemo)(function () {
    return [styles.card, {
      opacity: isTopCard ? 1 : 0.8,
      transform: [{
        scale: isTopCard ? 1 : 0.95
      }]
    }, disabled && styles.cardDisabled, style];
  }, [isTopCard, disabled, style]);
  var combinedAnimatedStyle = (0, _react.useMemo)(function () {
    return !isTopCard && entranceStyle ? [panStyle, entranceStyle] : panStyle;
  }, [panStyle, isTopCard, entranceStyle]);
  return (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureDetector, {
    gesture: gesture,
    children: (0, _jsxRuntime.jsxs)(_reactNativeReanimated.default.View, {
      style: [].concat((0, _toConsumableArray2.default)(cardStyle), (0, _toConsumableArray2.default)(Array.isArray(combinedAnimatedStyle) ? combinedAnimatedStyle : [combinedAnimatedStyle])),
      accessible: true,
      accessibilityRole: "button",
      accessibilityLabel: `Pet profile for ${pet.name}, ${pet.age} years old ${pet.breed}`,
      accessibilityHint: "Swipe right to like, left to pass, or up for super like",
      children: [(0, _jsxRuntime.jsx)(_LikeArbitrator.default, {
        onLike: likeNow,
        triggerUndo: triggerUndoPill,
        onReact: function onReact(emoji) {
          _core.logger.info("Reaction:", {
            emoji: emoji,
            petName: pet.name
          });
        },
        children: (0, _jsxRuntime.jsx)(_DoubleTapLikePlus.DoubleTapLikePlus, {
          onDoubleTap: handleDoubleTapLike,
          heartColor: "#ff3b5c",
          particles: 6,
          haptics: {
            enabled: true,
            style: "medium"
          },
          disabled: disabled || !isTopCard,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.photoContainer,
            children: [(0, _jsxRuntime.jsx)(_SmartImage.default, {
              source: {
                uri: pet.photos[currentPhotoIndex]
              },
              style: styles.photo,
              resizeMode: "cover"
            }), (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.photoIndicators,
              children: pet.photos.map(function (_, index) {
                return (0, _jsxRuntime.jsx)(_reactNative.View, {
                  style: _reactNative.StyleSheet.flatten([styles.photoDot, {
                    backgroundColor: index === currentPhotoIndex ? _unifiedTheme.Theme.colors.neutral[0] : "rgba(255,255,255,0.4)"
                  }])
                }, index);
              })
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.photoNavigation,
              children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.photoNavLeft,
                onTouchEnd: prevPhoto
              }), (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.photoNavRight,
                onTouchEnd: nextPhoto
              })]
            }), pet.isVerified && (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.verifiedBadge,
              children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
                name: "checkmark-circle",
                size: 24,
                color: _unifiedTheme.Theme.colors.status.success
              })
            }), (0, _jsxRuntime.jsx)(_MicroPressable.default, {
              style: styles.distanceBadge,
              haptics: true,
              onPress: function onPress() {
                _core.logger.info("Distance badge pressed:", {
                  petName: pet.name,
                  distance: pet.distance
                });
              },
              children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                style: styles.distanceText,
                children: [pet.distance, "km away"]
              })
            }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
              style: _reactNative.StyleSheet.flatten([styles.overlay, styles.likeOverlay, likeStyle]),
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.overlayText,
                children: "LIKE"
              })
            }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
              style: _reactNative.StyleSheet.flatten([styles.overlay, styles.nopeOverlay, nopeStyle]),
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.overlayText,
                children: "NOPE"
              })
            }), (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
              style: _reactNative.StyleSheet.flatten([styles.overlay, styles.superLikeOverlay, superStyle]),
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.overlayText,
                children: "SUPER LIKE"
              })
            })]
          })
        })
      }), (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
        colors: ["transparent", "rgba(0,0,0,0.8)"],
        style: styles.infoGradient,
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.infoContainer,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.nameRow,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.name,
              children: pet.name
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.age,
              children: pet.age
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.breed,
            children: pet.breed
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.compatibilityContainer,
            children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
              style: styles.compatibilityBar,
              children: (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: _reactNative.StyleSheet.flatten([styles.compatibilityFill, {
                  width: `${pet.compatibility}%`,
                  backgroundColor: _unifiedTheme.Theme.colors.primary[500]
                }])
              })
            }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.compatibilityText,
              children: [pet.compatibility, "% match"]
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.tagsContainer,
            children: pet.tags.slice(0, 3).map(function (tag, index) {
              return (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: _reactNative.StyleSheet.flatten([styles.tag, {
                  backgroundColor: `${_unifiedTheme.Theme.colors.primary[500]}20`
                }]),
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: _reactNative.StyleSheet.flatten([styles.tagText, {
                    color: _unifiedTheme.Theme.colors.primary[500]
                  }]),
                  children: tag
                })
              }, index);
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.bio,
            numberOfLines: 2,
            children: pet.bio
          })]
        })
      }), (0, _jsxRuntime.jsx)(_UndoPill.default, {
        onUndo: undoNow
      })]
    })
  });
}
var ModernSwipeCard = _react.default.memo(ModernSwipeCardComponent);
var styles = _reactNative.StyleSheet.create({
  card: _objectSpread({
    position: "absolute",
    width: SCREEN_WIDTH - _unifiedTheme.Theme.spacing["4xl"],
    height: SCREEN_HEIGHT * 0.75,
    borderRadius: _unifiedTheme.Theme.borderRadius["2xl"],
    backgroundColor: _unifiedTheme.Theme.colors.neutral[0]
  }, _unifiedTheme.Theme.shadows.depth.lg),
  cardDisabled: {
    opacity: 0.6
  },
  photoContainer: {
    flex: 1,
    borderRadius: _unifiedTheme.Theme.borderRadius["2xl"],
    overflow: "hidden",
    position: "relative"
  },
  photo: {
    width: "100%",
    height: "100%"
  },
  photoIndicators: {
    position: "absolute",
    top: _unifiedTheme.Theme.spacing.xl,
    left: _unifiedTheme.Theme.spacing.xl,
    right: _unifiedTheme.Theme.spacing.xl,
    flexDirection: "row",
    gap: _unifiedTheme.Theme.spacing.sm
  },
  photoDot: {
    flex: 1,
    height: 3,
    borderRadius: 2
  },
  photoNavigation: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    flexDirection: "row"
  },
  photoNavLeft: {
    flex: 1
  },
  photoNavRight: {
    flex: 1
  },
  verifiedBadge: {
    position: "absolute",
    top: _unifiedTheme.Theme.spacing.xl,
    right: _unifiedTheme.Theme.spacing.xl,
    backgroundColor: "rgba(255,255,255,0.9)",
    borderRadius: _unifiedTheme.Theme.borderRadius.lg,
    padding: _unifiedTheme.Theme.spacing.xs
  },
  distanceBadge: {
    position: "absolute",
    bottom: 120,
    right: _unifiedTheme.Theme.spacing.xl,
    backgroundColor: "rgba(0,0,0,0.6)",
    paddingHorizontal: _unifiedTheme.Theme.spacing.md,
    paddingVertical: _unifiedTheme.Theme.spacing.sm,
    borderRadius: _unifiedTheme.Theme.borderRadius.full
  },
  distanceText: {
    color: _unifiedTheme.Theme.colors.neutral[0],
    fontSize: _unifiedTheme.Theme.typography.fontSize.sm,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.semibold
  },
  overlay: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: _unifiedTheme.Theme.borderRadius["2xl"]
  },
  likeOverlay: {
    backgroundColor: "rgba(16, 185, 129, 0.8)"
  },
  nopeOverlay: {
    backgroundColor: "rgba(239, 68, 68, 0.8)"
  },
  superLikeOverlay: {
    backgroundColor: "rgba(14, 165, 233, 0.8)"
  },
  overlayText: {
    color: _unifiedTheme.Theme.colors.neutral[0],
    fontSize: _unifiedTheme.Theme.typography.fontSize["5xl"],
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.black,
    textAlign: "center",
    textShadowColor: "rgba(0,0,0,0.5)",
    textShadowOffset: {
      width: 2,
      height: 2
    },
    textShadowRadius: 4
  },
  infoGradient: {
    position: "absolute",
    bottom: 0,
    left: 0,
    right: 0,
    height: 200,
    borderBottomLeftRadius: _unifiedTheme.Theme.borderRadius["2xl"],
    borderBottomRightRadius: _unifiedTheme.Theme.borderRadius["2xl"]
  },
  infoContainer: {
    flex: 1,
    justifyContent: "flex-end",
    padding: _unifiedTheme.Theme.spacing.xl
  },
  nameRow: {
    flexDirection: "row",
    alignItems: "baseline",
    marginBottom: _unifiedTheme.Theme.spacing.xs
  },
  name: {
    fontSize: _unifiedTheme.Theme.typography.fontSize["3xl"],
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.bold,
    color: _unifiedTheme.Theme.colors.neutral[0],
    marginRight: _unifiedTheme.Theme.spacing.sm
  },
  age: {
    fontSize: _unifiedTheme.Theme.typography.fontSize["2xl"],
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.normal,
    color: _unifiedTheme.Theme.colors.neutral[0]
  },
  breed: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.lg,
    color: "rgba(255,255,255,0.9)",
    marginBottom: _unifiedTheme.Theme.spacing.sm
  },
  compatibilityContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: _unifiedTheme.Theme.spacing.sm
  },
  compatibilityBar: {
    flex: 1,
    height: 4,
    backgroundColor: "rgba(255,255,255,0.3)",
    borderRadius: 2,
    marginRight: _unifiedTheme.Theme.spacing.sm
  },
  compatibilityFill: {
    height: "100%",
    borderRadius: 2
  },
  compatibilityText: {
    color: _unifiedTheme.Theme.colors.neutral[0],
    fontSize: _unifiedTheme.Theme.typography.fontSize.sm,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.semibold
  },
  tagsContainer: {
    flexDirection: "row",
    marginBottom: _unifiedTheme.Theme.spacing.sm,
    gap: _unifiedTheme.Theme.spacing.sm
  },
  tag: {
    paddingHorizontal: _unifiedTheme.Theme.spacing.sm,
    paddingVertical: _unifiedTheme.Theme.spacing.xs,
    borderRadius: _unifiedTheme.Theme.borderRadius.md
  },
  tagText: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.sm,
    fontWeight: _unifiedTheme.Theme.typography.fontWeight.semibold
  },
  bio: {
    fontSize: _unifiedTheme.Theme.typography.fontSize.sm,
    color: "rgba(255,255,255,0.9)",
    lineHeight: _unifiedTheme.Theme.typography.fontSize.sm * _unifiedTheme.Theme.typography.lineHeight.normal
  }
});
ModernSwipeCard.displayName = "ModernSwipeCard";
var _default = exports.default = ModernSwipeCard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,