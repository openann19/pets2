6a2feadc74a5ffc407080d829a4ebdd5
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureLayoutAnimationBatch = configureLayoutAnimationBatch;
Object.defineProperty(exports, "createWorkletRuntime", {
  enumerable: true,
  get: function get() {
    return _runtimes.createWorkletRuntime;
  }
});
exports.enableLayoutAnimations = enableLayoutAnimations;
Object.defineProperty(exports, "executeOnUIRuntimeSync", {
  enumerable: true,
  get: function get() {
    return _threads.executeOnUIRuntimeSync;
  }
});
exports.getViewProp = getViewProp;
exports.initializeSensor = initializeSensor;
exports.isReanimated3 = exports.isConfigured = void 0;
exports.jsiConfigureProps = jsiConfigureProps;
Object.defineProperty(exports, "makeMutable", {
  enumerable: true,
  get: function get() {
    return _mutables.makeMutable;
  }
});
Object.defineProperty(exports, "makeShareable", {
  enumerable: true,
  get: function get() {
    return _shareables.makeShareable;
  }
});
Object.defineProperty(exports, "makeShareableCloneRecursive", {
  enumerable: true,
  get: function get() {
    return _shareables.makeShareableCloneRecursive;
  }
});
exports.markNodeAsRemovable = markNodeAsRemovable;
exports.registerEventHandler = registerEventHandler;
exports.registerSensor = registerSensor;
Object.defineProperty(exports, "runOnJS", {
  enumerable: true,
  get: function get() {
    return _threads.runOnJS;
  }
});
Object.defineProperty(exports, "runOnRuntime", {
  enumerable: true,
  get: function get() {
    return _runtimes.runOnRuntime;
  }
});
Object.defineProperty(exports, "runOnUI", {
  enumerable: true,
  get: function get() {
    return _threads.runOnUI;
  }
});
exports.setShouldAnimateExitingForTag = setShouldAnimateExitingForTag;
Object.defineProperty(exports, "startMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.startMapper;
  }
});
Object.defineProperty(exports, "stopMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.stopMapper;
  }
});
exports.subscribeForKeyboardEvents = subscribeForKeyboardEvents;
exports.unmarkNodeAsRemovable = unmarkNodeAsRemovable;
exports.unregisterEventHandler = unregisterEventHandler;
exports.unregisterSensor = unregisterSensor;
exports.unsubscribeFromKeyboardEvents = unsubscribeFromKeyboardEvents;
var _reactNativeIsEdgeToEdge = require("react-native-is-edge-to-edge");
var _errors = require("./errors");
var _PlatformChecker = require("./PlatformChecker");
var _ReanimatedModule = require("./ReanimatedModule");
var _SensorContainer = require("./SensorContainer");
var _shareables = require("./shareables");
var _mappers = require("./mappers");
var _mutables = require("./mutables");
var _runtimes = require("./runtimes");
var _threads = require("./threads");
var EDGE_TO_EDGE = (0, _reactNativeIsEdgeToEdge.isEdgeToEdge)();
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
var isReanimated3 = exports.isReanimated3 = function isReanimated3() {
  return true;
};
var isConfigured = exports.isConfigured = isReanimated3;
function getViewProp(viewTag, propName, component) {
  if ((0, _PlatformChecker.isFabric)() && !component) {
    throw new _errors.ReanimatedError('Function `getViewProp` requires a component to be passed as an argument on Fabric.');
  }
  return new Promise(function (resolve, reject) {
    return _ReanimatedModule.ReanimatedModule.getViewProp(viewTag, propName, component, function (result) {
      if (typeof result === 'string' && result.substr(0, 6) === 'error:') {
        reject(result);
      } else {
        resolve(result);
      }
    });
  });
}
function getSensorContainer() {
  if (!global.__sensorContainer) {
    global.__sensorContainer = new _SensorContainer.SensorContainer();
  }
  return global.__sensorContainer;
}
var _worklet_4585136441649_init_data = {
  code: "function handleAndFlushAnimationFrame(eventTimestamp, event) {\n  const {\n    eventHandler\n  } = this._closure;\n  global.__frameTimestamp = eventTimestamp;\n  eventHandler(event);\n  global.__flushAnimationFrame(eventTimestamp);\n  global.__frameTimestamp = undefined;\n}",
  location: "/home/ben/Downloads/pets-fresh/node_modules/react-native-reanimated/src/core.ts",
  sourceMap: "{\"version\":3,\"names\":[\"handleAndFlushAnimationFrame\",\"eventTimestamp\",\"event\",\"eventHandler\",\"_closure\",\"global\",\"__frameTimestamp\",\"__flushAnimationFrame\",\"undefined\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/node_modules/react-native-reanimated/src/core.ts\"],\"mappings\":\"AAsFE,SAAAA,4BAASA,CAA6BC,cAAA,EAAsBC,KAAE,EAAQ;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAEpEC,MAAM,CAACC,gBAAgB,GAAGL,cAAc;EACxCE,YAAY,CAACD,KAAK,CAAC;EACnBG,MAAM,CAACE,qBAAqB,CAACN,cAAc,CAAC;EAC5CI,MAAM,CAACC,gBAAgB,GAAGE,SAAS;AACrC\",\"ignoreList\":[]}"
};
function registerEventHandler(eventHandler, eventName) {
  var emitterReactTag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  var handleAndFlushAnimationFrame = function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f(eventTimestamp, event) {
      global.__frameTimestamp = eventTimestamp;
      eventHandler(event);
      global.__flushAnimationFrame(eventTimestamp);
      global.__frameTimestamp = undefined;
    };
    _f._closure = {
      eventHandler: eventHandler
    };
    _f.__initData = _worklet_4585136441649_init_data;
    _f.__workletHash = 4585136441649;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
  return _ReanimatedModule.ReanimatedModule.registerEventHandler((0, _shareables.makeShareableCloneRecursive)(handleAndFlushAnimationFrame), eventName, emitterReactTag);
}
function unregisterEventHandler(id) {
  return _ReanimatedModule.ReanimatedModule.unregisterEventHandler(id);
}
var _worklet_36706492245_init_data = {
  code: "function handleAndFlushAnimationFrame(state, height) {\n  const {\n    eventHandler\n  } = this._closure;\n  const now = global._getAnimationTimestamp();\n  global.__frameTimestamp = now;\n  eventHandler(state, height);\n  global.__flushAnimationFrame(now);\n  global.__frameTimestamp = undefined;\n}",
  location: "/home/ben/Downloads/pets-fresh/node_modules/react-native-reanimated/src/core.ts",
  sourceMap: "{\"version\":3,\"names\":[\"handleAndFlushAnimationFrame\",\"state\",\"height\",\"eventHandler\",\"_closure\",\"now\",\"global\",\"_getAnimationTimestamp\",\"__frameTimestamp\",\"__flushAnimationFrame\",\"undefined\"],\"sources\":[\"/home/ben/Downloads/pets-fresh/node_modules/react-native-reanimated/src/core.ts\"],\"mappings\":\"AA8GE,SAAAA,6BAAAC,KAAA,EAAAC,MAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAAA,MAAAC,GAAA,GAAAC,MAAA,CAAAC,sBAAA;EACAD,MAAA,CAAAE,gBAAA,GAAAH,GAAA;EACAF,YAAS,CAAAF,KAAA,EAAAC,MAAA;EAEPI,MAAM,CAAAG,qBAAa,CAAAJ,GAAA;EACnBC,MAAM,CAACE,gBAAgB,GAAGE,SAAG\",\"ignoreList\":[]}"
};
function subscribeForKeyboardEvents(eventHandler, options) {
  var _options$isStatusBarT, _options$isNavigation;
  var handleAndFlushAnimationFrame = function () {
    var _e = [new global.Error(), -2, -27];
    var _f = function _f(state, height) {
      var now = global._getAnimationTimestamp();
      global.__frameTimestamp = now;
      eventHandler(state, height);
      global.__flushAnimationFrame(now);
      global.__frameTimestamp = undefined;
    };
    _f._closure = {
      eventHandler: eventHandler
    };
    _f.__initData = _worklet_36706492245_init_data;
    _f.__workletHash = 36706492245;
    _f.__stackDetails = _e;
    _f.__version = "3.3.0";
    return _f;
  }();
  if (__DEV__) {
    (0, _reactNativeIsEdgeToEdge.controlEdgeToEdgeValues)({
      isStatusBarTranslucentAndroid: options.isStatusBarTranslucentAndroid,
      isNavigationBarTranslucentAndroid: options.isNavigationBarTranslucentAndroid
    });
  }
  return _ReanimatedModule.ReanimatedModule.subscribeForKeyboardEvents((0, _shareables.makeShareableCloneRecursive)(handleAndFlushAnimationFrame), EDGE_TO_EDGE || ((_options$isStatusBarT = options.isStatusBarTranslucentAndroid) != null ? _options$isStatusBarT : false), EDGE_TO_EDGE || ((_options$isNavigation = options.isNavigationBarTranslucentAndroid) != null ? _options$isNavigation : false));
}
function unsubscribeFromKeyboardEvents(listenerId) {
  return _ReanimatedModule.ReanimatedModule.unsubscribeFromKeyboardEvents(listenerId);
}
function registerSensor(sensorType, config, eventHandler) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.registerSensor(sensorType, config, (0, _shareables.makeShareableCloneRecursive)(eventHandler));
}
function initializeSensor(sensorType, config) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.initializeSensor(sensorType, config);
}
function unregisterSensor(sensorId) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.unregisterSensor(sensorId);
}
var featuresConfig = {
  enableLayoutAnimations: false,
  setByUser: false
};
function enableLayoutAnimations(flag) {
  var isCallByUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (isCallByUser) {
    featuresConfig = {
      enableLayoutAnimations: flag,
      setByUser: true
    };
    _ReanimatedModule.ReanimatedModule.enableLayoutAnimations(flag);
  } else if (!featuresConfig.setByUser && featuresConfig.enableLayoutAnimations !== flag) {
    featuresConfig.enableLayoutAnimations = flag;
    _ReanimatedModule.ReanimatedModule.enableLayoutAnimations(flag);
  }
}
function configureLayoutAnimationBatch(layoutAnimationsBatch) {
  _ReanimatedModule.ReanimatedModule.configureLayoutAnimationBatch(layoutAnimationsBatch);
}
function setShouldAnimateExitingForTag(viewTag, shouldAnimate) {
  _ReanimatedModule.ReanimatedModule.setShouldAnimateExitingForTag(viewTag, shouldAnimate);
}
function jsiConfigureProps(uiProps, nativeProps) {
  if (!SHOULD_BE_USE_WEB) {
    _ReanimatedModule.ReanimatedModule.configureProps(uiProps, nativeProps);
  }
}
function markNodeAsRemovable(shadowNodeWrapper) {
  _ReanimatedModule.ReanimatedModule.markNodeAsRemovable(shadowNodeWrapper);
}
function unmarkNodeAsRemovable(viewTag) {
  _ReanimatedModule.ReanimatedModule.unmarkNodeAsRemovable(viewTag);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbmZpZ3VyZUxheW91dEFuaW1hdGlvbkJhdGNoIiwiZW51bWVyYWJsZSIsImdldCIsIl9ydW50aW1lcyIsImNyZWF0ZVdvcmtsZXRSdW50aW1lIiwiZW5hYmxlTGF5b3V0QW5pbWF0aW9ucyIsIl90aHJlYWRzIiwiZXhlY3V0ZU9uVUlSdW50aW1lU3luYyIsImdldFZpZXdQcm9wIiwiaW5pdGlhbGl6ZVNlbnNvciIsImlzUmVhbmltYXRlZDMiLCJpc0NvbmZpZ3VyZWQiLCJqc2lDb25maWd1cmVQcm9wcyIsIl9tdXRhYmxlcyIsIm1ha2VNdXRhYmxlIiwiX3NoYXJlYWJsZXMiLCJtYWtlU2hhcmVhYmxlIiwibWFrZVNoYXJlYWJsZUNsb25lUmVjdXJzaXZlIiwibWFya05vZGVBc1JlbW92YWJsZSIsInJlZ2lzdGVyRXZlbnRIYW5kbGVyIiwicmVnaXN0ZXJTZW5zb3IiLCJydW5PbkpTIiwicnVuT25SdW50aW1lIiwicnVuT25VSSIsInNldFNob3VsZEFuaW1hdGVFeGl0aW5nRm9yVGFnIiwiX21hcHBlcnMiLCJzdGFydE1hcHBlciIsInN0b3BNYXBwZXIiLCJzdWJzY3JpYmVGb3JLZXlib2FyZEV2ZW50cyIsInVubWFya05vZGVBc1JlbW92YWJsZSIsInVucmVnaXN0ZXJFdmVudEhhbmRsZXIiLCJ1bnJlZ2lzdGVyU2Vuc29yIiwidW5zdWJzY3JpYmVGcm9tS2V5Ym9hcmRFdmVudHMiLCJfcmVhY3ROYXRpdmVJc0VkZ2VUb0VkZ2UiLCJyZXF1aXJlIiwiX2Vycm9ycyIsIl9QbGF0Zm9ybUNoZWNrZXIiLCJfUmVhbmltYXRlZE1vZHVsZSIsIl9TZW5zb3JDb250YWluZXIiLCJFREdFX1RPX0VER0UiLCJpc0VkZ2VUb0VkZ2UiLCJTSE9VTERfQkVfVVNFX1dFQiIsInNob3VsZEJlVXNlV2ViIiwidmlld1RhZyIsInByb3BOYW1lIiwiY29tcG9uZW50IiwiaXNGYWJyaWMiLCJSZWFuaW1hdGVkRXJyb3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIlJlYW5pbWF0ZWRNb2R1bGUiLCJyZXN1bHQiLCJzdWJzdHIiLCJnZXRTZW5zb3JDb250YWluZXIiLCJnbG9iYWwiLCJfX3NlbnNvckNvbnRhaW5lciIsIlNlbnNvckNvbnRhaW5lciIsIl93b3JrbGV0XzQ1ODUxMzY0NDE2NDlfaW5pdF9kYXRhIiwiY29kZSIsImxvY2F0aW9uIiwic291cmNlTWFwIiwiZXZlbnRIYW5kbGVyIiwiZXZlbnROYW1lIiwiZW1pdHRlclJlYWN0VGFnIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiaGFuZGxlQW5kRmx1c2hBbmltYXRpb25GcmFtZSIsIl9lIiwiRXJyb3IiLCJfZiIsImV2ZW50VGltZXN0YW1wIiwiZXZlbnQiLCJfX2ZyYW1lVGltZXN0YW1wIiwiX19mbHVzaEFuaW1hdGlvbkZyYW1lIiwiX2Nsb3N1cmUiLCJfX2luaXREYXRhIiwiX193b3JrbGV0SGFzaCIsIl9fc3RhY2tEZXRhaWxzIiwiX192ZXJzaW9uIiwiaWQiLCJfd29ya2xldF8zNjcwNjQ5MjI0NV9pbml0X2RhdGEiLCJvcHRpb25zIiwiX29wdGlvbnMkaXNTdGF0dXNCYXJUIiwiX29wdGlvbnMkaXNOYXZpZ2F0aW9uIiwic3RhdGUiLCJoZWlnaHQiLCJub3ciLCJfZ2V0QW5pbWF0aW9uVGltZXN0YW1wIiwiX19ERVZfXyIsImNvbnRyb2xFZGdlVG9FZGdlVmFsdWVzIiwiaXNTdGF0dXNCYXJUcmFuc2x1Y2VudEFuZHJvaWQiLCJpc05hdmlnYXRpb25CYXJUcmFuc2x1Y2VudEFuZHJvaWQiLCJsaXN0ZW5lcklkIiwic2Vuc29yVHlwZSIsImNvbmZpZyIsInNlbnNvckNvbnRhaW5lciIsInNlbnNvcklkIiwiZmVhdHVyZXNDb25maWciLCJzZXRCeVVzZXIiLCJmbGFnIiwiaXNDYWxsQnlVc2VyIiwibGF5b3V0QW5pbWF0aW9uc0JhdGNoIiwic2hvdWxkQW5pbWF0ZSIsInVpUHJvcHMiLCJuYXRpdmVQcm9wcyIsImNvbmZpZ3VyZVByb3BzIiwic2hhZG93Tm9kZVdyYXBwZXIiXSwic291cmNlcyI6WyJjb3JlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmltcG9ydCB7XG4gIGNvbnRyb2xFZGdlVG9FZGdlVmFsdWVzLFxuICBpc0VkZ2VUb0VkZ2UsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZS1pcy1lZGdlLXRvLWVkZ2UnO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEFuaW1hdGVkS2V5Ym9hcmRPcHRpb25zLFxuICBMYXlvdXRBbmltYXRpb25CYXRjaEl0ZW0sXG4gIFNlbnNvckNvbmZpZyxcbiAgU2Vuc29yVHlwZSxcbiAgU2hhZG93Tm9kZVdyYXBwZXIsXG4gIFNoYXJlZFZhbHVlLFxuICBWYWx1ZTNELFxuICBWYWx1ZVJvdGF0aW9uLFxuICBXb3JrbGV0RnVuY3Rpb24sXG59IGZyb20gJy4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHsgUmVhbmltYXRlZEVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuaW1wb3J0IHsgaXNGYWJyaWMsIHNob3VsZEJlVXNlV2ViIH0gZnJvbSAnLi9QbGF0Zm9ybUNoZWNrZXInO1xuaW1wb3J0IHsgUmVhbmltYXRlZE1vZHVsZSB9IGZyb20gJy4vUmVhbmltYXRlZE1vZHVsZSc7XG5pbXBvcnQgeyBTZW5zb3JDb250YWluZXIgfSBmcm9tICcuL1NlbnNvckNvbnRhaW5lcic7XG5pbXBvcnQgeyBtYWtlU2hhcmVhYmxlQ2xvbmVSZWN1cnNpdmUgfSBmcm9tICcuL3NoYXJlYWJsZXMnO1xuXG5leHBvcnQgeyBzdGFydE1hcHBlciwgc3RvcE1hcHBlciB9IGZyb20gJy4vbWFwcGVycyc7XG5leHBvcnQgeyBtYWtlTXV0YWJsZSB9IGZyb20gJy4vbXV0YWJsZXMnO1xuZXhwb3J0IHR5cGUgeyBXb3JrbGV0UnVudGltZSB9IGZyb20gJy4vcnVudGltZXMnO1xuZXhwb3J0IHsgY3JlYXRlV29ya2xldFJ1bnRpbWUsIHJ1bk9uUnVudGltZSB9IGZyb20gJy4vcnVudGltZXMnO1xuZXhwb3J0IHsgbWFrZVNoYXJlYWJsZSwgbWFrZVNoYXJlYWJsZUNsb25lUmVjdXJzaXZlIH0gZnJvbSAnLi9zaGFyZWFibGVzJztcbmV4cG9ydCB7IGV4ZWN1dGVPblVJUnVudGltZVN5bmMsIHJ1bk9uSlMsIHJ1bk9uVUkgfSBmcm9tICcuL3RocmVhZHMnO1xuXG5jb25zdCBFREdFX1RPX0VER0UgPSBpc0VkZ2VUb0VkZ2UoKTtcbmNvbnN0IFNIT1VMRF9CRV9VU0VfV0VCID0gc2hvdWxkQmVVc2VXZWIoKTtcblxuLyoqIEByZXR1cm5zIGB0cnVlYCBpbiBSZWFuaW1hdGVkIDMsIGRvZXNuJ3QgZXhpc3QgaW4gUmVhbmltYXRlZCAyIG9yIDEgKi9cbmV4cG9ydCBjb25zdCBpc1JlYW5pbWF0ZWQzID0gKCkgPT4gdHJ1ZTtcblxuLy8gU3VwZXJzZWRlZCBieSBjaGVjayBpbiBgL3NyYy90aHJlYWRzLnRzYC5cbi8vIFVzZWQgYnkgYHJlYWN0LW5hdmlnYXRpb25gIHRvIGRldGVjdCBpZiB1c2luZyBSZWFuaW1hdGVkIDIgb3IgMy5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiB3YXMgc3VwZXJzZWRlZCBieSBvdGhlciBjaGVja3MuIFdlIGtlZXAgaXQgaGVyZSBmb3JcbiAqICAgYmFja3dhcmQgY29tcGF0aWJpbGl0eSByZWFzb25zLiBJZiB5b3UgbmVlZCB0byBjaGVjayBpZiB5b3UgYXJlIHVzaW5nXG4gKiAgIFJlYW5pbWF0ZWQgMyBvciBSZWFuaW1hdGVkIDIgcGxlYXNlIHVzZSBgaXNSZWFuaW1hdGVkM2AgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIEByZXR1cm5zIGB0cnVlYCBpbiBSZWFuaW1hdGVkIDMsIGRvZXNuJ3QgZXhpc3QgaW4gUmVhbmltYXRlZCAyXG4gKi9cbmV4cG9ydCBjb25zdCBpc0NvbmZpZ3VyZWQgPSBpc1JlYW5pbWF0ZWQzO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Vmlld1Byb3A8VD4oXG4gIHZpZXdUYWc6IG51bWJlcixcbiAgcHJvcE5hbWU6IHN0cmluZyxcbiAgY29tcG9uZW50PzogUmVhY3QuQ29tcG9uZW50IC8vIHJlcXVpcmVkIG9uIEZhYnJpY1xuKTogUHJvbWlzZTxUPiB7XG4gIGlmIChpc0ZhYnJpYygpICYmICFjb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgUmVhbmltYXRlZEVycm9yKFxuICAgICAgJ0Z1bmN0aW9uIGBnZXRWaWV3UHJvcGAgcmVxdWlyZXMgYSBjb21wb25lbnQgdG8gYmUgcGFzc2VkIGFzIGFuIGFyZ3VtZW50IG9uIEZhYnJpYy4nXG4gICAgKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWlzdXNlZC1wcm9taXNlc1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHJldHVybiBSZWFuaW1hdGVkTW9kdWxlLmdldFZpZXdQcm9wKFxuICAgICAgdmlld1RhZyxcbiAgICAgIHByb3BOYW1lLFxuICAgICAgY29tcG9uZW50LFxuICAgICAgKHJlc3VsdDogVCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycgJiYgcmVzdWx0LnN1YnN0cigwLCA2KSA9PT0gJ2Vycm9yOicpIHtcbiAgICAgICAgICByZWplY3QocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0U2Vuc29yQ29udGFpbmVyKCk6IFNlbnNvckNvbnRhaW5lciB7XG4gIGlmICghZ2xvYmFsLl9fc2Vuc29yQ29udGFpbmVyKSB7XG4gICAgZ2xvYmFsLl9fc2Vuc29yQ29udGFpbmVyID0gbmV3IFNlbnNvckNvbnRhaW5lcigpO1xuICB9XG4gIHJldHVybiBnbG9iYWwuX19zZW5zb3JDb250YWluZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckV2ZW50SGFuZGxlcjxUPihcbiAgZXZlbnRIYW5kbGVyOiAoZXZlbnQ6IFQpID0+IHZvaWQsXG4gIGV2ZW50TmFtZTogc3RyaW5nLFxuICBlbWl0dGVyUmVhY3RUYWcgPSAtMVxuKTogbnVtYmVyIHtcbiAgZnVuY3Rpb24gaGFuZGxlQW5kRmx1c2hBbmltYXRpb25GcmFtZShldmVudFRpbWVzdGFtcDogbnVtYmVyLCBldmVudDogVCkge1xuICAgICd3b3JrbGV0JztcbiAgICBnbG9iYWwuX19mcmFtZVRpbWVzdGFtcCA9IGV2ZW50VGltZXN0YW1wO1xuICAgIGV2ZW50SGFuZGxlcihldmVudCk7XG4gICAgZ2xvYmFsLl9fZmx1c2hBbmltYXRpb25GcmFtZShldmVudFRpbWVzdGFtcCk7XG4gICAgZ2xvYmFsLl9fZnJhbWVUaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIFJlYW5pbWF0ZWRNb2R1bGUucmVnaXN0ZXJFdmVudEhhbmRsZXIoXG4gICAgbWFrZVNoYXJlYWJsZUNsb25lUmVjdXJzaXZlKFxuICAgICAgaGFuZGxlQW5kRmx1c2hBbmltYXRpb25GcmFtZSBhcyBXb3JrbGV0RnVuY3Rpb25cbiAgICApLFxuICAgIGV2ZW50TmFtZSxcbiAgICBlbWl0dGVyUmVhY3RUYWdcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXJFdmVudEhhbmRsZXIoaWQ6IG51bWJlcik6IHZvaWQge1xuICByZXR1cm4gUmVhbmltYXRlZE1vZHVsZS51bnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGlkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZUZvcktleWJvYXJkRXZlbnRzKFxuICBldmVudEhhbmRsZXI6IChzdGF0ZTogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4gdm9pZCxcbiAgb3B0aW9uczogQW5pbWF0ZWRLZXlib2FyZE9wdGlvbnNcbik6IG51bWJlciB7XG4gIC8vIFRPRE86IHRoaXMgc2hvdWxkIHJlYWxseSBnbyB3aXRoIHRoZSBzYW1lIGNvZGUgcGF0aCBhcyBvdGhlciBldmVudHMsIHRoYXQgaXNcbiAgLy8gdmlhIHJlZ2lzdGVyRXZlbnRIYW5kbGVyLiBGb3Igbm93IHdlIGFyZSBjb3B5aW5nIHRoZSBjb2RlIGZyb20gdGhlcmUuXG4gIGZ1bmN0aW9uIGhhbmRsZUFuZEZsdXNoQW5pbWF0aW9uRnJhbWUoc3RhdGU6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAnd29ya2xldCc7XG4gICAgY29uc3Qgbm93ID0gZ2xvYmFsLl9nZXRBbmltYXRpb25UaW1lc3RhbXAoKTtcbiAgICBnbG9iYWwuX19mcmFtZVRpbWVzdGFtcCA9IG5vdztcbiAgICBldmVudEhhbmRsZXIoc3RhdGUsIGhlaWdodCk7XG4gICAgZ2xvYmFsLl9fZmx1c2hBbmltYXRpb25GcmFtZShub3cpO1xuICAgIGdsb2JhbC5fX2ZyYW1lVGltZXN0YW1wID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBjb250cm9sRWRnZVRvRWRnZVZhbHVlcyh7XG4gICAgICBpc1N0YXR1c0JhclRyYW5zbHVjZW50QW5kcm9pZDogb3B0aW9ucy5pc1N0YXR1c0JhclRyYW5zbHVjZW50QW5kcm9pZCxcbiAgICAgIGlzTmF2aWdhdGlvbkJhclRyYW5zbHVjZW50QW5kcm9pZDpcbiAgICAgICAgb3B0aW9ucy5pc05hdmlnYXRpb25CYXJUcmFuc2x1Y2VudEFuZHJvaWQsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gUmVhbmltYXRlZE1vZHVsZS5zdWJzY3JpYmVGb3JLZXlib2FyZEV2ZW50cyhcbiAgICBtYWtlU2hhcmVhYmxlQ2xvbmVSZWN1cnNpdmUoXG4gICAgICBoYW5kbGVBbmRGbHVzaEFuaW1hdGlvbkZyYW1lIGFzIFdvcmtsZXRGdW5jdGlvblxuICAgICksXG4gICAgRURHRV9UT19FREdFIHx8IChvcHRpb25zLmlzU3RhdHVzQmFyVHJhbnNsdWNlbnRBbmRyb2lkID8/IGZhbHNlKSxcbiAgICBFREdFX1RPX0VER0UgfHwgKG9wdGlvbnMuaXNOYXZpZ2F0aW9uQmFyVHJhbnNsdWNlbnRBbmRyb2lkID8/IGZhbHNlKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zdWJzY3JpYmVGcm9tS2V5Ym9hcmRFdmVudHMobGlzdGVuZXJJZDogbnVtYmVyKTogdm9pZCB7XG4gIHJldHVybiBSZWFuaW1hdGVkTW9kdWxlLnVuc3Vic2NyaWJlRnJvbUtleWJvYXJkRXZlbnRzKGxpc3RlbmVySWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJTZW5zb3IoXG4gIHNlbnNvclR5cGU6IFNlbnNvclR5cGUsXG4gIGNvbmZpZzogU2Vuc29yQ29uZmlnLFxuICBldmVudEhhbmRsZXI6IChcbiAgICBkYXRhOiBWYWx1ZTNEIHwgVmFsdWVSb3RhdGlvbixcbiAgICBvcmllbnRhdGlvbkRlZ3JlZXM6IG51bWJlclxuICApID0+IHZvaWRcbik6IG51bWJlciB7XG4gIGNvbnN0IHNlbnNvckNvbnRhaW5lciA9IGdldFNlbnNvckNvbnRhaW5lcigpO1xuICByZXR1cm4gc2Vuc29yQ29udGFpbmVyLnJlZ2lzdGVyU2Vuc29yKFxuICAgIHNlbnNvclR5cGUsXG4gICAgY29uZmlnLFxuICAgIG1ha2VTaGFyZWFibGVDbG9uZVJlY3Vyc2l2ZShldmVudEhhbmRsZXIgYXMgV29ya2xldEZ1bmN0aW9uKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVNlbnNvcihcbiAgc2Vuc29yVHlwZTogU2Vuc29yVHlwZSxcbiAgY29uZmlnOiBTZW5zb3JDb25maWdcbik6IFNoYXJlZFZhbHVlPFZhbHVlM0QgfCBWYWx1ZVJvdGF0aW9uPiB7XG4gIGNvbnN0IHNlbnNvckNvbnRhaW5lciA9IGdldFNlbnNvckNvbnRhaW5lcigpO1xuICByZXR1cm4gc2Vuc29yQ29udGFpbmVyLmluaXRpYWxpemVTZW5zb3Ioc2Vuc29yVHlwZSwgY29uZmlnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXJTZW5zb3Ioc2Vuc29ySWQ6IG51bWJlcik6IHZvaWQge1xuICBjb25zdCBzZW5zb3JDb250YWluZXIgPSBnZXRTZW5zb3JDb250YWluZXIoKTtcbiAgcmV0dXJuIHNlbnNvckNvbnRhaW5lci51bnJlZ2lzdGVyU2Vuc29yKHNlbnNvcklkKTtcbn1cblxudHlwZSBGZWF0dXJlc0NvbmZpZyA9IHtcbiAgZW5hYmxlTGF5b3V0QW5pbWF0aW9uczogYm9vbGVhbjtcbiAgc2V0QnlVc2VyOiBib29sZWFuO1xufTtcblxubGV0IGZlYXR1cmVzQ29uZmlnOiBGZWF0dXJlc0NvbmZpZyA9IHtcbiAgZW5hYmxlTGF5b3V0QW5pbWF0aW9uczogZmFsc2UsXG4gIHNldEJ5VXNlcjogZmFsc2UsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlTGF5b3V0QW5pbWF0aW9ucyhcbiAgZmxhZzogYm9vbGVhbixcbiAgaXNDYWxsQnlVc2VyID0gdHJ1ZVxuKTogdm9pZCB7XG4gIGlmIChpc0NhbGxCeVVzZXIpIHtcbiAgICBmZWF0dXJlc0NvbmZpZyA9IHtcbiAgICAgIGVuYWJsZUxheW91dEFuaW1hdGlvbnM6IGZsYWcsXG4gICAgICBzZXRCeVVzZXI6IHRydWUsXG4gICAgfTtcbiAgICBSZWFuaW1hdGVkTW9kdWxlLmVuYWJsZUxheW91dEFuaW1hdGlvbnMoZmxhZyk7XG4gIH0gZWxzZSBpZiAoXG4gICAgIWZlYXR1cmVzQ29uZmlnLnNldEJ5VXNlciAmJlxuICAgIGZlYXR1cmVzQ29uZmlnLmVuYWJsZUxheW91dEFuaW1hdGlvbnMgIT09IGZsYWdcbiAgKSB7XG4gICAgZmVhdHVyZXNDb25maWcuZW5hYmxlTGF5b3V0QW5pbWF0aW9ucyA9IGZsYWc7XG4gICAgUmVhbmltYXRlZE1vZHVsZS5lbmFibGVMYXlvdXRBbmltYXRpb25zKGZsYWcpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVMYXlvdXRBbmltYXRpb25CYXRjaChcbiAgbGF5b3V0QW5pbWF0aW9uc0JhdGNoOiBMYXlvdXRBbmltYXRpb25CYXRjaEl0ZW1bXVxuKTogdm9pZCB7XG4gIFJlYW5pbWF0ZWRNb2R1bGUuY29uZmlndXJlTGF5b3V0QW5pbWF0aW9uQmF0Y2gobGF5b3V0QW5pbWF0aW9uc0JhdGNoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFNob3VsZEFuaW1hdGVFeGl0aW5nRm9yVGFnKFxuICB2aWV3VGFnOiBudW1iZXIgfCBIVE1MRWxlbWVudCxcbiAgc2hvdWxkQW5pbWF0ZTogYm9vbGVhblxuKSB7XG4gIFJlYW5pbWF0ZWRNb2R1bGUuc2V0U2hvdWxkQW5pbWF0ZUV4aXRpbmdGb3JUYWcoXG4gICAgdmlld1RhZyBhcyBudW1iZXIsXG4gICAgc2hvdWxkQW5pbWF0ZVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24ganNpQ29uZmlndXJlUHJvcHMoXG4gIHVpUHJvcHM6IHN0cmluZ1tdLFxuICBuYXRpdmVQcm9wczogc3RyaW5nW11cbik6IHZvaWQge1xuICBpZiAoIVNIT1VMRF9CRV9VU0VfV0VCKSB7XG4gICAgUmVhbmltYXRlZE1vZHVsZS5jb25maWd1cmVQcm9wcyh1aVByb3BzLCBuYXRpdmVQcm9wcyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmtOb2RlQXNSZW1vdmFibGUoc2hhZG93Tm9kZVdyYXBwZXI6IFNoYWRvd05vZGVXcmFwcGVyKSB7XG4gIFJlYW5pbWF0ZWRNb2R1bGUubWFya05vZGVBc1JlbW92YWJsZShzaGFkb3dOb2RlV3JhcHBlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bm1hcmtOb2RlQXNSZW1vdmFibGUodmlld1RhZzogbnVtYmVyKSB7XG4gIFJlYW5pbWF0ZWRNb2R1bGUudW5tYXJrTm9kZUFzUmVtb3ZhYmxlKHZpZXdUYWcpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDQSxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSw2QkFBQSxHQUFBQSw2QkFBQTtBQUFBSixNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBRyxVQUFBO0VBQUFDLEdBQUEsV0FBQUEsSUFB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