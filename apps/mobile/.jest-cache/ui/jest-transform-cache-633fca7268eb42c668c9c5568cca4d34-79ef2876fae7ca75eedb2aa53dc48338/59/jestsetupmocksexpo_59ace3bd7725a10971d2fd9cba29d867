f4459c7e5b54cf14450212c189ce385d
"use strict";

_getJestObj().mock('expo-linear-gradient', function () {
  return {
    LinearGradient: function LinearGradient(_ref) {
      var children = _ref.children;
      return children;
    }
  };
});
_getJestObj().mock('expo-image-picker', function () {
  return {
    launchImageLibraryAsync: jest.fn(function () {
      return Promise.resolve({
        cancelled: true
      });
    }),
    launchCameraAsync: jest.fn(function () {
      return Promise.resolve({
        cancelled: true
      });
    }),
    requestMediaLibraryPermissionsAsync: jest.fn(function () {
      return Promise.resolve({
        granted: true,
        status: 'granted'
      });
    }),
    requestCameraPermissionsAsync: jest.fn(function () {
      return Promise.resolve({
        granted: true,
        status: 'granted'
      });
    }),
    MediaTypeOptions: {
      Images: 'Images',
      Videos: 'Videos',
      All: 'All'
    }
  };
});
_getJestObj().mock('expo-camera', function () {
  return {
    Camera: {
      Constants: {
        Type: {
          back: 'back',
          front: 'front'
        }
      }
    },
    CameraView: function CameraView(_ref2) {
      var children = _ref2.children;
      return children;
    },
    useCameraPermissions: jest.fn(function () {
      return [{
        granted: true
      }, jest.fn()];
    })
  };
});
_getJestObj().mock('expo-location', function () {
  return {
    requestForegroundPermissionsAsync: jest.fn(function () {
      return Promise.resolve({
        granted: true,
        status: 'granted'
      });
    }),
    requestBackgroundPermissionsAsync: jest.fn(function () {
      return Promise.resolve({
        granted: true,
        status: 'granted'
      });
    }),
    getCurrentPositionAsync: jest.fn(function () {
      return Promise.resolve({
        coords: {
          latitude: 0,
          longitude: 0,
          altitude: 0,
          accuracy: 0,
          altitudeAccuracy: 0,
          heading: 0,
          speed: 0
        },
        timestamp: Date.now()
      });
    }),
    watchPositionAsync: jest.fn(function () {
      return Promise.resolve({
        remove: jest.fn()
      });
    })
  };
});
_getJestObj().mock('expo-notifications', function () {
  return {
    setNotificationHandler: jest.fn(),
    getPermissionsAsync: jest.fn(function () {
      return Promise.resolve({
        granted: true,
        status: 'granted'
      });
    }),
    requestPermissionsAsync: jest.fn(function () {
      return Promise.resolve({
        granted: true,
        status: 'granted'
      });
    }),
    getExpoPushTokenAsync: jest.fn(function () {
      return Promise.resolve({
        data: 'ExponentPushToken[test]'
      });
    }),
    scheduleNotificationAsync: jest.fn(function () {
      return Promise.resolve('notification-id');
    }),
    cancelScheduledNotificationAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    cancelAllScheduledNotificationsAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    addNotificationReceivedListener: jest.fn(function () {
      return {
        remove: jest.fn()
      };
    }),
    addNotificationResponseReceivedListener: jest.fn(function () {
      return {
        remove: jest.fn()
      };
    })
  };
});
_getJestObj().mock('expo-device', function () {
  return {
    isDevice: true,
    deviceName: 'Test Device'
  };
});
_getJestObj().mock('expo-font', function () {
  return {
    loadAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    isLoaded: jest.fn(function () {
      return true;
    })
  };
});
_getJestObj().mock('expo-haptics', function () {
  return {
    impactAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    notificationAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    selectionAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    ImpactFeedbackStyle: {
      Light: 'light',
      Medium: 'medium',
      Heavy: 'heavy'
    },
    NotificationFeedbackType: {
      Success: 'success',
      Warning: 'warning',
      Error: 'error'
    }
  };
});
_getJestObj().mock('expo-blur', function () {
  var RN = require('react-native');
  return {
    BlurView: RN.View
  };
});
_getJestObj().mock('expo-image-manipulator', function () {
  return {
    manipulateAsync: jest.fn(function (uri) {
      return Promise.resolve({
        uri: uri,
        width: 1920,
        height: 1920
      });
    }),
    FlipType: {
      Horizontal: 'horizontal',
      Vertical: 'vertical'
    },
    SaveFormat: {
      JPEG: 'jpeg',
      PNG: 'png'
    }
  };
});
_getJestObj().mock('expo-av', function () {
  return {
    Audio: {
      Sound: jest.fn().mockImplementation(function () {
        return {
          loadAsync: jest.fn(function () {
            return Promise.resolve();
          }),
          playAsync: jest.fn(function () {
            return Promise.resolve();
          }),
          pauseAsync: jest.fn(function () {
            return Promise.resolve();
          }),
          stopAsync: jest.fn(function () {
            return Promise.resolve();
          }),
          unloadAsync: jest.fn(function () {
            return Promise.resolve();
          }),
          setVolumeAsync: jest.fn(function () {
            return Promise.resolve();
          }),
          getStatusAsync: jest.fn(function () {
            return Promise.resolve({
              isLoaded: true,
              isPlaying: false,
              durationMillis: 10000
            });
          })
        };
      }),
      Recording: jest.fn().mockImplementation(function () {
        return {
          prepareToRecordAsync: jest.fn(function () {
            return Promise.resolve();
          }),
          startAsync: jest.fn(function () {
            return Promise.resolve();
          }),
          stopAndUnloadAsync: jest.fn(function () {
            return Promise.resolve();
          }),
          getURI: jest.fn(function () {
            return 'file:///test-recording.m4a';
          })
        };
      })
    },
    Video: jest.fn(function () {
      return 'View';
    })
  };
});
_getJestObj().mock('expo-file-system', function () {
  return {
    documentDirectory: 'file:///documents/',
    cacheDirectory: 'file:///cache/',
    readAsStringAsync: jest.fn(function () {
      return Promise.resolve('file content');
    }),
    writeAsStringAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    deleteAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    moveAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    copyAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    makeDirectoryAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    readDirectoryAsync: jest.fn(function () {
      return Promise.resolve(['file1.txt', 'file2.jpg']);
    }),
    getInfoAsync: jest.fn(function () {
      return Promise.resolve({
        exists: true,
        isDirectory: false,
        size: 1024,
        modificationTime: Date.now(),
        uri: 'file:///test-file.txt'
      });
    }),
    downloadAsync: jest.fn(function () {
      return Promise.resolve({
        uri: 'file:///downloaded-file.jpg',
        status: 200
      });
    }),
    uploadAsync: jest.fn(function () {
      return Promise.resolve({
        status: 200
      });
    }),
    createDownloadResumable: jest.fn(function () {
      return {
        downloadAsync: jest.fn(function () {
          return Promise.resolve({
            uri: 'file:///resumed-download.jpg',
            status: 200
          });
        }),
        pauseAsync: jest.fn(function () {
          return Promise.resolve();
        }),
        resumeAsync: jest.fn(function () {
          return Promise.resolve();
        }),
        savable: jest.fn(function () {
          return Promise.resolve();
        })
      };
    })
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  var React = require('react');
  var RN = require('react-native');
  var createIconComponent = function createIconComponent() {
    return React.forwardRef(function (props, ref) {
      var iconName = props.name,
        size = props.size,
        color = props.color,
        testID = props.testID,
        restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
      return React.createElement(RN.View, _objectSpread({
        testID: testID || `icon-${iconName}`,
        accessibilityLabel: iconName,
        'data-name': iconName,
        'data-size': size,
        'data-color': color,
        ref: ref
      }, restProps));
    });
  };
  return {
    Ionicons: createIconComponent(),
    MaterialIcons: createIconComponent(),
    MaterialCommunityIcons: createIconComponent(),
    FontAwesome: createIconComponent(),
    FontAwesome5: createIconComponent(),
    Feather: createIconComponent(),
    AntDesign: createIconComponent(),
    Entypo: createIconComponent()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["name", "size", "color", "testID"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,