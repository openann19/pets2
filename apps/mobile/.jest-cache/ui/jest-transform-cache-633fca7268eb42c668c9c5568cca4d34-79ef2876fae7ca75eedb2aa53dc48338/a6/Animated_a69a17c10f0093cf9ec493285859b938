4af676f9cad1835e78ddb567534c843e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _AnimatedImplementation = _interopRequireDefault(require("./AnimatedImplementation"));
var _AnimatedMock = _interopRequireDefault(require("./AnimatedMock"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Animated = _Platform.default.isTesting ? _AnimatedMock.default : _AnimatedImplementation.default;
var _default = exports.default = _objectSpread({
  get FlatList() {
    return require("./components/AnimatedFlatList").default;
  },
  get Image() {
    return require("./components/AnimatedImage").default;
  },
  get ScrollView() {
    return require("./components/AnimatedScrollView").default;
  },
  get SectionList() {
    return require("./components/AnimatedSectionList").default;
  },
  get Text() {
    return require("./components/AnimatedText").default;
  },
  get View() {
    return require("./components/AnimatedView").default;
  }
}, Animated);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGxhdGZvcm0iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9BbmltYXRlZEltcGxlbWVudGF0aW9uIiwiX0FuaW1hdGVkTW9jayIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIkFuaW1hdGVkIiwiUGxhdGZvcm0iLCJpc1Rlc3RpbmciLCJBbmltYXRlZE1vY2siLCJBbmltYXRlZEltcGxlbWVudGF0aW9uIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiRmxhdExpc3QiLCJJbWFnZSIsIlNjcm9sbFZpZXciLCJTZWN0aW9uTGlzdCIsIlRleHQiLCJWaWV3Il0sInNvdXJjZXMiOlsiQW5pbWF0ZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuZXhwb3J0IHR5cGUge0NvbXBvc2l0ZUFuaW1hdGlvbiwgTnVtZXJpY30gZnJvbSAnLi9BbmltYXRlZEltcGxlbWVudGF0aW9uJztcblxuaW1wb3J0IHR5cGVvZiBBbmltYXRlZEZsYXRMaXN0IGZyb20gJy4vY29tcG9uZW50cy9BbmltYXRlZEZsYXRMaXN0JztcbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWRJbWFnZSBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRJbWFnZSc7XG5pbXBvcnQgdHlwZW9mIEFuaW1hdGVkU2Nyb2xsVmlldyBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTY3JvbGxWaWV3JztcbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWRTZWN0aW9uTGlzdCBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTZWN0aW9uTGlzdCc7XG5pbXBvcnQgdHlwZW9mIEFuaW1hdGVkVGV4dCBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRUZXh0JztcbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWRWaWV3IGZyb20gJy4vY29tcG9uZW50cy9BbmltYXRlZFZpZXcnO1xuXG5pbXBvcnQgUGxhdGZvcm0gZnJvbSAnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJztcbmltcG9ydCBBbmltYXRlZEltcGxlbWVudGF0aW9uIGZyb20gJy4vQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbic7XG5pbXBvcnQgQW5pbWF0ZWRNb2NrIGZyb20gJy4vQW5pbWF0ZWRNb2NrJztcblxuY29uc3QgQW5pbWF0ZWQgPSAoKFBsYXRmb3JtLmlzVGVzdGluZ1xuICA/IEFuaW1hdGVkTW9ja1xuICA6IEFuaW1hdGVkSW1wbGVtZW50YXRpb24pOiB0eXBlb2YgQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbik7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0IEZsYXRMaXN0KCk6IEFuaW1hdGVkRmxhdExpc3Qge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRGbGF0TGlzdCcpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBJbWFnZSgpOiBBbmltYXRlZEltYWdlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9jb21wb25lbnRzL0FuaW1hdGVkSW1hZ2UnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgU2Nyb2xsVmlldygpOiBBbmltYXRlZFNjcm9sbFZpZXcge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTY3JvbGxWaWV3JykuZGVmYXVsdDtcbiAgfSxcbiAgZ2V0IFNlY3Rpb25MaXN0KCk6IEFuaW1hdGVkU2VjdGlvbkxpc3Qge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTZWN0aW9uTGlzdCcpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBUZXh0KCk6IEFuaW1hdGVkVGV4dCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vY29tcG9uZW50cy9BbmltYXRlZFRleHQnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgVmlldygpOiBBbmltYXRlZFZpZXcge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRWaWV3JykuZGVmYXVsdDtcbiAgfSxcbiAgLi4uQW5pbWF0ZWQsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQW1CQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyx1QkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQTBDLFNBQUFHLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsUUFBQWUsZ0JBQUEsQ0FBQUMsT0FBQSxFQUFBakIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQSxTQUFBRSxNQUFBLENBQUFlLHlCQUFBLEdBQUFmLE1BQUEsQ0FBQWdCLGdCQUFBLENBQUFuQixDQUFBLEVBQUFHLE1BQUEsQ0FBQWUseUJBQUEsQ0FBQWhCLENBQUEsS0FBQUgsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsR0FBQWEsT0FBQSxXQUFBZCxDQUFBLElBQUFFLE1BQUEsQ0FBQWlCLGNBQUEsQ0FBQXBCLENBQUEsRUFBQUMsQ0FBQSxFQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFOLENBQUEsRUFBQUQsQ0FBQSxpQkFBQUQsQ0FBQTtBQUUxQyxJQUFNcUIsUUFBUSxHQUFLQyxpQkFBUSxDQUFDQyxTQUFTLEdBQ2pDQyxxQkFBWSxHQUNaQywrQkFBdUQ7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQVYsT0FBQSxHQUFBTCxhQUFBO0VBRzFELElBQUlnQixRQUFRQSxDQUFBLEVBQXFCO0lBQy9CLE9BQU9oQyxPQUFPLGdDQUFnQyxDQUFDLENBQUNxQixPQUFPO0VBQ3pELENBQUM7RUFDRCxJQUFJWSxLQUFLQSxDQUFBLEVBQWtCO0lBQ3pCLE9BQU9qQyxPQUFPLDZCQUE2QixDQUFDLENBQUNxQixPQUFPO0VBQ3RELENBQUM7RUFDRCxJQUFJYSxVQUFVQSxDQUFBLEVBQXVCO0lBQ25DLE9BQU9sQyxPQUFPLGtDQUFrQyxDQUFDLENBQUNxQixPQUFPO0VBQzNELENBQUM7RUFDRCxJQUFJYyxXQUFXQSxDQUFBLEVBQXdCO0lBQ3JDLE9BQU9uQyxPQUFPLG1DQUFtQyxDQUFDLENBQUNxQixPQUFPO0VBQzVELENBQUM7RUFDRCxJQUFJZSxJQUFJQSxDQUFBLEVBQWlCO0lBQ3ZCLE9BQU9wQyxPQUFPLDRCQUE0QixDQUFDLENBQUNxQixPQUFPO0VBQ3JELENBQUM7RUFDRCxJQUFJZ0IsSUFBSUEsQ0FBQSxFQUFpQjtJQUN2QixPQUFPckMsT0FBTyw0QkFBNEIsQ0FBQyxDQUFDcUIsT0FBTztFQUNyRDtBQUFDLEdBQ0VJLFFBQVEiLCJpZ25vcmVMaXN0IjpbXX0=