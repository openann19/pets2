b75d45bae86c42e529203aa366fed39e
"use strict";

_getJestObj().mock("@pawfectmatch/core", function () {
  return {
    useAuthStore: function useAuthStore() {
      return {
        login: mockLogin,
        isLoading: false,
        error: null
      };
    },
    logger: {
      info: jest.fn(),
      error: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useLoginScreen = require("../useLoginScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockNavigation = {
  navigate: mockNavigate,
  goBack: jest.fn(),
  reset: jest.fn()
};
var mockLogin = jest.fn();
describe("useLoginScreen", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it("should initialize with empty form values", function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useLoginScreen.useLoginScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook.result;
    expect(result.current.values.email).toBe("");
    expect(result.current.values.password).toBe("");
    expect(result.current.errors).toEqual({});
    expect(result.current.isSubmitting).toBe(false);
  });
  it("should update email field", function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useLoginScreen.useLoginScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook2.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "test@example.com");
    });
    expect(result.current.values.email).toBe("test@example.com");
  });
  it("should update password field", function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useLoginScreen.useLoginScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("password", "password123");
    });
    expect(result.current.values.password).toBe("password123");
  });
  it("should validate email format", function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useLoginScreen.useLoginScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "invalid-email");
      result.current.setValue("password", "password123");
      result.current.validateForm();
    });
    expect(result.current.errors.email).toBe("Please enter a valid email address");
  });
  it("should validate password presence", function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useLoginScreen.useLoginScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "test@example.com");
      result.current.validateForm();
    });
    expect(result.current.errors.password).toBe("Password is required");
  });
  it("should clear errors when valid data is entered", function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useLoginScreen.useLoginScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "invalid");
      result.current.setValue("password", "");
      result.current.validateForm();
    });
    expect(result.current.errors.email).toBeTruthy();
    expect(result.current.errors.password).toBeTruthy();
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "valid@example.com");
      result.current.setValue("password", "validpassword");
      result.current.validateForm();
    });
    expect(result.current.errors.email).toBeUndefined();
    expect(result.current.errors.password).toBeUndefined();
  });
  it("should navigate to register screen", function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useLoginScreen.useLoginScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.navigateToRegister();
    });
    expect(mockNavigate).toHaveBeenCalledWith("Register");
  });
  it("should navigate to forgot password screen", function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useLoginScreen.useLoginScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook8.result;
    (0, _reactNative.act)(function () {
      result.current.navigateToForgotPassword();
    });
    expect(mockNavigate).toHaveBeenCalledWith("ForgotPassword");
  });
  it("should handle form submission", (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useLoginScreen.useLoginScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook9.result;
    (0, _reactNative.act)(function () {
      result.current.setValue("email", "test@example.com");
      result.current.setValue("password", "password123");
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleSubmit();
    }));
    expect(result.current.values.email).toBe("test@example.com");
    expect(result.current.values.password).toBe("password123");
  }));
  it("should return stable function references", function () {
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useLoginScreen.useLoginScreen)({
          navigation: mockNavigation
        });
      }),
      result = _renderHook0.result,
      rerender = _renderHook0.rerender;
    var firstSetValue = result.current.setValue;
    var firstValidate = result.current.validateForm;
    var firstSubmit = result.current.handleSubmit;
    var firstNavigateRegister = result.current.navigateToRegister;
    rerender();
    expect(result.current.setValue).toBe(firstSetValue);
    expect(result.current.validateForm).toBe(firstValidate);
    expect(result.current.handleSubmit).toBe(firstSubmit);
    expect(result.current.navigateToRegister).toBe(firstNavigateRegister);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,