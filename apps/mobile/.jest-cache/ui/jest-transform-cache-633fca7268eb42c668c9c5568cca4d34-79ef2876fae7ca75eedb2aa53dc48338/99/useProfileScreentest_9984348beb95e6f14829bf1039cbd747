25bc9b174c31390d169ca31a1d677a75
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage');
_getJestObj().mock('expo-image-picker');
_getJestObj().mock("../../../services/api", function () {
  return {
    api: {
      get: _globals.jest.fn(),
      post: _globals.jest.fn(),
      put: _globals.jest.fn(),
      delete: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../../../services/analyticsService", function () {
  return {
    analyticsService: {
      trackEvent: _globals.jest.fn(),
      trackScreenView: _globals.jest.fn()
    }
  };
});
_getJestObj().mock("../../../hooks/useColorScheme", function () {
  return {
    useColorScheme: _globals.jest.fn()
  };
});
_getJestObj().mock('@pawfectmatch/core', function () {
  return {
    logger: {
      info: _globals.jest.fn(),
      error: _globals.jest.fn(),
      warn: _globals.jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _globals = require("@jest/globals");
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var ImagePicker = _interopRequireWildcard(require("expo-image-picker"));
var _useProfileScreen = require("../useProfileScreen");
var _api = require("../../../services/api");
var _analyticsService = require("../../../services/analyticsService");
var _useColorScheme = require("../../../hooks/useColorScheme");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApi = _api.api;
var mockAnalyticsService = _analyticsService.analyticsService;
var mockUseColorScheme = _useColorScheme.useColorScheme;
var mockAsyncStorage = _asyncStorage.default;
var mockImagePicker = ImagePicker;
(0, _globals.describe)('useProfileScreen', function () {
  var mockProfileData = {
    id: 'user123',
    name: 'John Doe',
    email: 'john@example.com',
    bio: 'I love pets and outdoor activities!',
    age: 28,
    location: {
      city: 'New York',
      state: 'NY',
      country: 'USA'
    },
    photos: [{
      id: 'photo1',
      url: 'profile1.jpg',
      isPrimary: true,
      order: 1
    }, {
      id: 'photo2',
      url: 'profile2.jpg',
      isPrimary: false,
      order: 2
    }, {
      id: 'photo3',
      url: 'profile3.jpg',
      isPrimary: false,
      order: 3
    }],
    preferences: {
      petTypes: ['dogs', 'cats'],
      maxDistance: 25,
      ageRange: {
        min: 1,
        max: 10
      },
      breed: 'Golden Retriever'
    },
    stats: {
      profileViews: 150,
      likesReceived: 45,
      matches: 12,
      superLikes: 3
    },
    settings: {
      profileVisible: true,
      showDistance: true,
      showAge: true,
      notifications: {
        matches: true,
        messages: true,
        likes: false
      }
    },
    isComplete: true,
    completionPercentage: 95
  };
  var mockPets = [{
    id: 'pet1',
    name: 'Buddy',
    species: 'dog',
    breed: 'Golden Retriever',
    age: 2,
    photos: ['buddy1.jpg', 'buddy2.jpg'],
    isActive: true
  }, {
    id: 'pet2',
    name: 'Luna',
    species: 'cat',
    breed: 'Siamese',
    age: 1,
    photos: ['luna1.jpg'],
    isActive: false
  }];
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
    mockAsyncStorage.getItem.mockResolvedValue(null);
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    mockApi.get.mockImplementation(function (endpoint) {
      if (endpoint === '/profile') {
        return Promise.resolve({
          data: mockProfileData
        });
      }
      if (endpoint === '/profile/pets') {
        return Promise.resolve({
          data: mockPets
        });
      }
      return Promise.resolve({
        data: {}
      });
    });
    mockApi.post.mockResolvedValue({
      data: {
        success: true
      }
    });
    mockApi.put.mockResolvedValue({
      data: {
        success: true
      }
    });
    mockUseColorScheme.mockReturnValue('light');
    mockImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValue({
      granted: true,
      status: 'granted'
    });
    mockImagePicker.launchImageLibraryAsync.mockResolvedValue({
      canceled: false,
      assets: [{
        uri: 'new-photo.jpg',
        type: 'image/jpeg'
      }]
    });
  });
  (0, _globals.describe)('Initial State and Data Loading', function () {
    (0, _globals.it)('should initialize with loading state', function () {
      var _renderHook = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook.result;
      (0, _globals.expect)(result.current.isLoading).toBe(true);
      (0, _globals.expect)(result.current.profile).toBeNull();
      (0, _globals.expect)(result.current.pets).toEqual([]);
      (0, _globals.expect)(result.current.error).toBeNull();
    });
    (0, _globals.it)('should load profile data on mount', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook2 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook2.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.profile).toEqual(mockProfileData);
      (0, _globals.expect)(result.current.pets).toEqual(mockPets);
      (0, _globals.expect)(mockApi.get).toHaveBeenCalledWith('/profile');
      (0, _globals.expect)(mockApi.get).toHaveBeenCalledWith('/profile/pets');
      (0, _globals.expect)(mockAnalyticsService.trackScreenView).toHaveBeenCalledWith('ProfileScreen');
    }));
    (0, _globals.it)('should handle loading errors', (0, _asyncToGenerator2.default)(function* () {
      mockApi.get.mockRejectedValueOnce(new Error('Profile not found'));
      var _renderHook3 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook3.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.error).toBe('Profile not found');
      (0, _globals.expect)(result.current.profile).toBeNull();
    }));
  });
  (0, _globals.describe)('Profile Updates', function () {
    (0, _globals.it)('should update profile successfully', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$profi, _result$current$profi2;
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook4.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var updates = {
        bio: 'Updated bio!',
        age: 29
      };
      var updatedProfile = _objectSpread(_objectSpread({}, mockProfileData), updates);
      mockApi.put.mockResolvedValueOnce({
        data: updatedProfile
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updateProfile(updates);
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$profi = result.current.profile) == null ? void 0 : _result$current$profi.bio).toBe('Updated bio!');
      (0, _globals.expect)((_result$current$profi2 = result.current.profile) == null ? void 0 : _result$current$profi2.age).toBe(29);
      (0, _globals.expect)(mockApi.put).toHaveBeenCalledWith('/profile', updates);
    }));
    (0, _globals.it)('should handle profile update errors', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook5.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.put.mockRejectedValueOnce(new Error('Update failed'));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updateProfile({
          bio: 'New bio'
        });
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Update failed');
    }));
    (0, _globals.it)('should validate profile updates', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook6.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updateProfile({
          age: -5
        });
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Invalid age');
      var longBio = 'A'.repeat(1000);
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updateProfile({
          bio: longBio
        });
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Bio is too long');
    }));
  });
  (0, _globals.describe)('Photo Management', function () {
    (0, _globals.it)('should add photo successfully', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$profi3;
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook7.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var newPhoto = {
        id: 'photo4',
        url: 'new-photo.jpg',
        isPrimary: false,
        order: 4
      };
      mockApi.post.mockResolvedValueOnce({
        data: newPhoto
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.addPhoto();
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$profi3 = result.current.profile) == null ? void 0 : _result$current$profi3.photos).toContain(newPhoto);
    }));
    (0, _globals.it)('should remove photo successfully', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$profi4;
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.delete.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.removePhoto('photo2');
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$profi4 = result.current.profile) == null ? void 0 : _result$current$profi4.photos.find(function (p) {
        return p.id === 'photo2';
      })).toBeUndefined();
    }));
    (0, _globals.it)('should set primary photo', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$profi5, _result$current$profi6;
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.put.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.setPrimaryPhoto('photo2');
        (0, _globals.expect)(success).toBe(true);
      }));
      var primaryPhoto = (_result$current$profi5 = result.current.profile) == null ? void 0 : _result$current$profi5.photos.find(function (p) {
        return p.id === 'photo2';
      });
      var oldPrimary = (_result$current$profi6 = result.current.profile) == null ? void 0 : _result$current$profi6.photos.find(function (p) {
        return p.id === 'photo1';
      });
      (0, _globals.expect)(primaryPhoto == null ? void 0 : primaryPhoto.isPrimary).toBe(true);
      (0, _globals.expect)(oldPrimary == null ? void 0 : oldPrimary.isPrimary).toBe(false);
    }));
    (0, _globals.it)('should reorder photos', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$profi7, _result$current$profi8, _result$current$profi9;
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook0.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var newOrder = ['photo3', 'photo1', 'photo2'];
      mockApi.put.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.reorderPhotos(newOrder);
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$profi7 = result.current.profile) == null ? void 0 : _result$current$profi7.photos[0].id).toBe('photo3');
      (0, _globals.expect)((_result$current$profi8 = result.current.profile) == null ? void 0 : _result$current$profi8.photos[1].id).toBe('photo1');
      (0, _globals.expect)((_result$current$profi9 = result.current.profile) == null ? void 0 : _result$current$profi9.photos[2].id).toBe('photo2');
    }));
    (0, _globals.it)('should handle photo permission denied', (0, _asyncToGenerator2.default)(function* () {
      mockImagePicker.requestMediaLibraryPermissionsAsync.mockResolvedValueOnce({
        granted: false,
        status: 'denied'
      });
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook1.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.addPhoto();
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Photo library permission denied');
    }));
  });
  (0, _globals.describe)('Pet Management', function () {
    (0, _globals.it)('should add pet successfully', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook10.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var newPet = {
        name: 'Max',
        species: 'dog',
        breed: 'Labrador',
        age: 3
      };
      mockApi.post.mockResolvedValueOnce({
        data: _objectSpread(_objectSpread({}, newPet), {}, {
          id: 'pet3'
        })
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.addPet(newPet);
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(result.current.pets).toHaveLength(3);
    }));
    (0, _globals.it)('should update pet successfully', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook11 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook11.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var updates = {
        name: 'Buddy Jr.',
        age: 3
      };
      mockApi.put.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePet('pet1', updates);
        (0, _globals.expect)(success).toBe(true);
      }));
      var updatedPet = result.current.pets.find(function (p) {
        return p.id === 'pet1';
      });
      (0, _globals.expect)(updatedPet == null ? void 0 : updatedPet.name).toBe('Buddy Jr.');
      (0, _globals.expect)(updatedPet == null ? void 0 : updatedPet.age).toBe(3);
    }));
    (0, _globals.it)('should remove pet successfully', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook12 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook12.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.delete.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.removePet('pet2');
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(result.current.pets).toHaveLength(1);
      (0, _globals.expect)(result.current.pets.find(function (p) {
        return p.id === 'pet2';
      })).toBeUndefined();
    }));
    (0, _globals.it)('should get active pets only', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook13 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook13.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.getActivePets()).toHaveLength(1);
      (0, _globals.expect)(result.current.getActivePets()[0].name).toBe('Buddy');
    }));
  });
  (0, _globals.describe)('Privacy and Settings', function () {
    (0, _globals.it)('should update privacy settings', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$profi0;
      var _renderHook14 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook14.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var newSettings = {
        profileVisible: false,
        showDistance: false,
        notifications: {
          matches: false,
          messages: true,
          likes: true
        }
      };
      mockApi.put.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updatePrivacySettings(newSettings);
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)((_result$current$profi0 = result.current.profile) == null ? void 0 : _result$current$profi0.settings).toEqual(newSettings);
    }));
    (0, _globals.it)('should toggle profile visibility', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$profi1;
      var _renderHook15 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook15.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      mockApi.put.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.toggleProfileVisibility();
      }));
      (0, _globals.expect)((_result$current$profi1 = result.current.profile) == null ? void 0 : _result$current$profi1.settings.profileVisible).toBe(false);
    }));
  });
  (0, _globals.describe)('Profile Completion', function () {
    (0, _globals.it)('should calculate completion percentage', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook16 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook16.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.getCompletionPercentage()).toBe(95);
      (0, _globals.expect)(result.current.isProfileComplete()).toBe(true);
    }));
    (0, _globals.it)('should get completion requirements', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook17 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook17.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var requirements = result.current.getCompletionRequirements();
      (0, _globals.expect)(requirements).toContain('Add profile photo');
      (0, _globals.expect)(requirements).toContain('Write a bio');
      (0, _globals.expect)(requirements).toContain('Add pet information');
    }));
    (0, _globals.it)('should validate profile completeness', (0, _asyncToGenerator2.default)(function* () {
      var incompleteProfile = _objectSpread(_objectSpread({}, mockProfileData), {}, {
        bio: '',
        photos: [],
        completionPercentage: 45
      });
      mockApi.get.mockResolvedValueOnce({
        data: incompleteProfile
      });
      var _renderHook18 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook18.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.isProfileComplete()).toBe(false);
      (0, _globals.expect)(result.current.getCompletionPercentage()).toBe(45);
    }));
  });
  (0, _globals.describe)('Statistics and Analytics', function () {
    (0, _globals.it)('should provide profile statistics', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook19 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook19.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.getProfileStats()).toEqual(mockProfileData.stats);
      (0, _globals.expect)(result.current.getEngagementRate()).toBeCloseTo(0.3);
    }));
    (0, _globals.it)('should track profile interactions', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook20 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook20.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _reactNative.act)(function () {
        result.current.trackProfileView();
      });
      (0, _globals.expect)(mockAnalyticsService.trackEvent).toHaveBeenCalledWith('profile_view', {
        profileId: 'user123'
      }, 'user123');
    }));
  });
  (0, _globals.describe)('Cache Management', function () {
    (0, _globals.it)('should cache profile data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook21 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook21.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(mockAsyncStorage.setItem).toHaveBeenCalledWith('profile_screen_cache', _globals.expect.any(String));
    }));
    (0, _globals.it)('should clear cache when requested', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook22 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook22.result;
      (0, _reactNative.act)(function () {
        result.current.profile = mockProfileData;
        result.current.pets = mockPets;
      });
      (0, _reactNative.act)(function () {
        result.current.clearCache();
      });
      (0, _globals.expect)(result.current.profile).toBeNull();
      (0, _globals.expect)(result.current.pets).toEqual([]);
    }));
  });
  (0, _globals.describe)('Error Handling', function () {
    (0, _globals.it)('should handle network errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockApi.put.mockRejectedValueOnce(new Error('Network error'));
      var _renderHook23 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook23.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updateProfile({
          bio: 'New bio'
        });
        (0, _globals.expect)(success).toBe(false);
      }));
      (0, _globals.expect)(result.current.error).toBe('Network error');
    }));
    (0, _globals.it)('should handle AsyncStorage errors gracefully', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.setItem.mockRejectedValue(new Error('Storage full'));
      var _renderHook24 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook24.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.profile).toEqual(mockProfileData);
    }));
    (0, _globals.it)('should reset error state on successful operations', (0, _asyncToGenerator2.default)(function* () {
      mockApi.put.mockRejectedValueOnce(new Error('First error'));
      var _renderHook25 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook25.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield result.current.updateProfile({
          bio: 'Bio 1'
        });
      }));
      (0, _globals.expect)(result.current.error).toBe('First error');
      mockApi.put.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        var success = yield result.current.updateProfile({
          bio: 'Bio 2'
        });
        (0, _globals.expect)(success).toBe(true);
      }));
      (0, _globals.expect)(result.current.error).toBeNull();
    }));
  });
  (0, _globals.describe)('Real-time Updates', function () {
    (0, _globals.it)('should handle real-time profile updates', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$profi10;
      var _renderHook26 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook26.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var updatedProfile = _objectSpread(_objectSpread({}, mockProfileData), {}, {
        profileViews: 200
      });
      (0, _reactNative.act)(function () {
        result.current.handleProfileUpdate(updatedProfile);
      });
      (0, _globals.expect)((_result$current$profi10 = result.current.profile) == null ? void 0 : _result$current$profi10.stats.profileViews).toBe(200);
    }));
    (0, _globals.it)('should handle real-time pet updates', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook27 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook27.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var updatedPet = _objectSpread(_objectSpread({}, mockPets[0]), {}, {
        name: 'Buddy Updated'
      });
      (0, _reactNative.act)(function () {
        result.current.handlePetUpdate(updatedPet);
      });
      var pet = result.current.pets.find(function (p) {
        return p.id === 'pet1';
      });
      (0, _globals.expect)(pet == null ? void 0 : pet.name).toBe('Buddy Updated');
    }));
  });
  (0, _globals.describe)('Edge Cases', function () {
    (0, _globals.it)('should handle empty profile data', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$profi11;
      var emptyProfile = {
        id: 'user123',
        name: '',
        photos: [],
        stats: {
          profileViews: 0,
          likesReceived: 0,
          matches: 0,
          superLikes: 0
        },
        isComplete: false,
        completionPercentage: 0
      };
      mockApi.get.mockResolvedValueOnce({
        data: emptyProfile
      });
      var _renderHook28 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook28.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.isProfileComplete()).toBe(false);
      (0, _globals.expect)(result.current.getCompletionPercentage()).toBe(0);
      (0, _globals.expect)((_result$current$profi11 = result.current.profile) == null ? void 0 : _result$current$profi11.photos).toEqual([]);
    }));
    (0, _globals.it)('should handle profile with no pets', (0, _asyncToGenerator2.default)(function* () {
      mockApi.get.mockImplementation(function (endpoint) {
        if (endpoint === '/profile') {
          return Promise.resolve({
            data: mockProfileData
          });
        }
        if (endpoint === '/profile/pets') {
          return Promise.resolve({
            data: []
          });
        }
        return Promise.resolve({
          data: {}
        });
      });
      var _renderHook29 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook29.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.pets).toEqual([]);
      (0, _globals.expect)(result.current.getActivePets()).toEqual([]);
    }));
    (0, _globals.it)('should handle very large photo arrays', (0, _asyncToGenerator2.default)(function* () {
      var _result$current$profi12;
      var profileWithManyPhotos = _objectSpread(_objectSpread({}, mockProfileData), {}, {
        photos: Array.from({
          length: 20
        }, function (_, i) {
          return {
            id: `photo${i}`,
            url: `photo${i}.jpg`,
            isPrimary: i === 0,
            order: i + 1
          };
        })
      });
      mockApi.get.mockResolvedValueOnce({
        data: profileWithManyPhotos
      });
      var _renderHook30 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook30.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)((_result$current$profi12 = result.current.profile) == null ? void 0 : _result$current$profi12.photos).toHaveLength(20);
    }));
    (0, _globals.it)('should handle malformed cached data', (0, _asyncToGenerator2.default)(function* () {
      mockAsyncStorage.getItem.mockResolvedValue('{invalid json}');
      var _renderHook31 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook31.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      (0, _globals.expect)(result.current.profile).toEqual(mockProfileData);
    }));
    (0, _globals.it)('should handle concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook32 = (0, _reactNative.renderHook)(function () {
          return (0, _useProfileScreen.useProfileScreen)();
        }),
        result = _renderHook32.result;
      yield (0, _reactNative.waitFor)(function () {
        (0, _globals.expect)(result.current.isLoading).toBe(false);
      });
      var updates = [result.current.updateProfile({
        bio: 'Bio 1'
      }), result.current.updateProfile({
        bio: 'Bio 2'
      }), result.current.updateProfile({
        bio: 'Bio 3'
      })];
      var results = yield Promise.all(updates);
      (0, _globals.expect)(results.some(function (r) {
        return r === true;
      })).toBe(true);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,