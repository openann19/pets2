c12ac1b6a12eacce35d8d1229d3a4662
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.useSocket = useSocket;
exports.useSocketEmit = useSocketEmit;
exports.useSocketWithStatus = useSocketWithStatus;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _core = require("@pawfectmatch/core");
var _react = require("react");
var _socket = require("socket.io-client");
function useSocket() {
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    socket = _useState2[0],
    setSocket = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    _isConnected = _useState4[0],
    setIsConnected = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    error = _useState6[0],
    setError = _useState6[1];
  var _useAuthStore = (0, _core.useAuthStore)(),
    user = _useAuthStore.user,
    accessToken = _useAuthStore.accessToken;
  var reconnectAttempts = (0, _react.useRef)(0);
  var maxReconnectAttempts = 5;
  (0, _react.useEffect)(function () {
    if (!user || !accessToken) {
      return;
    }
    function connectSocket() {
      try {
        var socketUrl = process.env["EXPO_PUBLIC_SOCKET_URL"] || "http://localhost:3001";
        var newSocket = (0, _socket.io)(socketUrl, {
          auth: {
            token: accessToken,
            userId: user._id
          },
          transports: ["websocket"],
          timeout: 10000,
          reconnection: true,
          reconnectionAttempts: maxReconnectAttempts,
          reconnectionDelay: 1000
        });
        newSocket.on("connect", function () {
          _core.logger.info("Socket connected:", {
            socketId: newSocket.id
          });
          setIsConnected(true);
          setError(null);
          reconnectAttempts.current = 0;
        });
        newSocket.on("disconnect", function (reason) {
          _core.logger.info("Socket disconnected:", {
            reason: reason
          });
          setIsConnected(false);
          if (reason === "io server disconnect") {
            newSocket.connect();
          }
        });
        newSocket.on("connect_error", function (err) {
          _core.logger.error("Socket connection error:", {
            error: err
          });
          setError(err.message);
          reconnectAttempts.current++;
          if (reconnectAttempts.current >= maxReconnectAttempts) {
            setError("Failed to connect after multiple attempts");
          }
        });
        newSocket.on("error", function (err) {
          _core.logger.error("Socket error:", {
            error: error
          });
          setError(err.message || "Socket error occurred");
        });
        newSocket.on("auth_error", function (_err) {
          _core.logger.error("Socket auth error:", {
            error: error
          });
          setError("Authentication failed");
          newSocket.disconnect();
        });
        newSocket.on("user_online", function (data) {
          _core.logger.info("User came online:", {
            data: data
          });
        });
        newSocket.on("user_offline", function (data) {
          _core.logger.info("User went offline:", {
            data: data
          });
        });
        newSocket.on("new_match", function (data) {
          _core.logger.info("New match:", {
            data: data
          });
        });
        newSocket.on("new_message", function (data) {
          _core.logger.info("New message:", {
            data: data
          });
        });
        newSocket.on("incoming_call", function (data) {
          _core.logger.info("Incoming call:", {
            data: data
          });
        });
        setSocket(newSocket);
        return newSocket;
      } catch (err) {
        _core.logger.error("Error creating socket:", {
          error: error
        });
        setError("Failed to create socket connection");
        return null;
      }
    }
    var socketInstance = connectSocket();
    return function () {
      if (socketInstance) {
        _core.logger.info("Cleaning up socket connection");
        socketInstance.removeAllListeners();
        socketInstance.disconnect();
      }
      setSocket(null);
      setIsConnected(false);
      setError(null);
    };
  }, [user, accessToken]);
  return socket;
}
function useSocketWithStatus() {
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    socket = _useState8[0],
    setSocket = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    isConnected = _useState0[0],
    setIsConnected = _useState0[1];
  var _useState1 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    error = _useState10[0],
    setError = _useState10[1];
  var _useAuthStore2 = (0, _core.useAuthStore)(),
    user = _useAuthStore2.user,
    accessToken = _useAuthStore2.accessToken;
  (0, _react.useEffect)(function () {
    if (!user || !accessToken) {
      return;
    }
    var socketUrl = process.env["EXPO_PUBLIC_SOCKET_URL"] || "http://localhost:3001";
    var newSocket = (0, _socket.io)(socketUrl, {
      auth: {
        token: accessToken,
        userId: user._id
      },
      transports: ["websocket"]
    });
    newSocket.on("connect", function () {
      setIsConnected(true);
      setError(null);
    });
    newSocket.on("disconnect", function () {
      setIsConnected(false);
    });
    newSocket.on("connect_error", function (err) {
      setError(err.message);
      setIsConnected(false);
    });
    setSocket(newSocket);
    return function () {
      newSocket.removeAllListeners();
      newSocket.disconnect();
      setSocket(null);
      setIsConnected(false);
      setError(null);
    };
  }, [user, accessToken]);
  return {
    socket: socket,
    isConnected: isConnected,
    error: error
  };
}
function useSocketEmit() {
  var socket = useSocket();
  function emit(event, data) {
    if (socket && socket.connected) {
      socket.emit(event, data);
      return true;
    }
    _core.logger.warn("Socket not connected, cannot emit:", {
      event: event
    });
    return false;
  }
  return emit;
}
var _default = exports.default = useSocket;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,