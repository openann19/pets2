7c98598499931f1c58db22aff1c308c5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLoginScreen = useLoginScreen;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var Haptics = _interopRequireWildcard(require("expo-haptics"));
var _logger = require("../../services/logger");
var _AuthService = require("../../services/AuthService");
var _useFormState2 = require("../utils/useFormState");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function useLoginScreen(_ref) {
  var navigation = _ref.navigation;
  var validateForm = (0, _react.useCallback)(function (values) {
    var errors = {};
    if (!values.email.trim()) {
      errors.email = "Email is required";
    } else if (!/\S+@\S+\.\S+/.test(values.email)) {
      errors.email = "Email format is invalid";
    }
    if (!values.password) {
      errors.password = "Password is required";
    } else if (values.password.length < 8) {
      errors.password = "Password must be at least 8 characters";
    }
    return errors;
  }, []);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useFormState = (0, _useFormState2.useFormState)({
      initialValues: {
        email: "",
        password: ""
      },
      validate: validateForm
    }),
    values = _useFormState.values,
    errors = _useFormState.errors,
    touched = _useFormState.touched,
    isValid = _useFormState.isValid,
    setValue = _useFormState.setValue,
    handleSubmitForm = _useFormState.handleSubmit;
  var handleLogin = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(function () {});
    setLoading(true);
    try {
      _logger.logger.info("Login attempt:", {
        email: values.email
      });
      var response = yield _AuthService.authService.login({
        email: values.email,
        password: values.password
      });
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(function () {});
      _logger.logger.info("Login successful", {
        userId: response.user.id
      });
      navigation.navigate("Home");
    } catch (error) {
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error).catch(function () {});
      _logger.logger.error("Login failed", {
        error: error,
        email: values.email
      });
      var errorMessage = error instanceof _AuthService.AuthError ? error.message : "Login failed. Please check your credentials and try again.";
      _reactNative.Alert.alert("Login Failed", errorMessage, [{
        text: "OK",
        style: "default"
      }]);
    } finally {
      setLoading(false);
    }
  }), [values.email, values.password, navigation]);
  var handleSubmit = (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (e) {
      yield handleSubmitForm(handleLogin)(e);
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [handleSubmitForm, handleLogin]);
  var navigateToRegister = (0, _react.useCallback)(function () {
    navigation.navigate("Register");
  }, [navigation]);
  var navigateToForgotPassword = (0, _react.useCallback)(function () {
    navigation.navigate("ForgotPassword");
  }, [navigation]);
  return {
    values: values,
    errors: errors,
    touched: touched,
    isValid: isValid,
    loading: loading,
    setValue: setValue,
    handleSubmit: handleSubmit,
    navigateToRegister: navigateToRegister,
    navigateToForgotPassword: navigateToForgotPassword
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,