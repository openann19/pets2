d2dd4ffbf0b32f0c1950ef499b8dc4ba
"use strict";

module.exports = {
  get BatchedBridge() {
    return require("../BatchedBridge/BatchedBridge");
  },
  get ExceptionsManager() {
    return require("../Core/ExceptionsManager");
  },
  get Platform() {
    return require("../Utilities/Platform");
  },
  get RCTEventEmitter() {
    return require("../EventEmitter/RCTEventEmitter");
  },
  get ReactNativeViewConfigRegistry() {
    return require("../Renderer/shims/ReactNativeViewConfigRegistry");
  },
  get TextInputState() {
    return require("../Components/TextInput/TextInputState");
  },
  get UIManager() {
    return require("../ReactNative/UIManager");
  },
  get deepDiffer() {
    return require("../Utilities/differ/deepDiffer");
  },
  get deepFreezeAndThrowOnMutationInDev() {
    return require("../Utilities/deepFreezeAndThrowOnMutationInDev");
  },
  get flattenStyle() {
    return require("../StyleSheet/flattenStyle");
  },
  get ReactFiberErrorDialog() {
    return require("../Core/ReactFiberErrorDialog").default;
  },
  get legacySendAccessibilityEvent() {
    return require("../Components/AccessibilityInfo/legacySendAccessibilityEvent");
  },
  get RawEventEmitter() {
    return require("../Core/RawEventEmitter").default;
  },
  get CustomEvent() {
    return require("../Events/CustomEvent").default;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQmF0Y2hlZEJyaWRnZSIsInJlcXVpcmUiLCJFeGNlcHRpb25zTWFuYWdlciIsIlBsYXRmb3JtIiwiUkNURXZlbnRFbWl0dGVyIiwiUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkiLCJUZXh0SW5wdXRTdGF0ZSIsIlVJTWFuYWdlciIsImRlZXBEaWZmZXIiLCJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJmbGF0dGVuU3R5bGUiLCJSZWFjdEZpYmVyRXJyb3JEaWFsb2ciLCJkZWZhdWx0IiwibGVnYWN5U2VuZEFjY2Vzc2liaWxpdHlFdmVudCIsIlJhd0V2ZW50RW1pdHRlciIsIkN1c3RvbUV2ZW50Il0sInNvdXJjZXMiOlsiUmVhY3ROYXRpdmVQcml2YXRlSW50ZXJmYWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgdHlwZW9mIEJhdGNoZWRCcmlkZ2UgZnJvbSAnLi4vQmF0Y2hlZEJyaWRnZS9CYXRjaGVkQnJpZGdlJztcbmltcG9ydCB0eXBlb2YgbGVnYWN5U2VuZEFjY2Vzc2liaWxpdHlFdmVudCBmcm9tICcuLi9Db21wb25lbnRzL0FjY2Vzc2liaWxpdHlJbmZvL2xlZ2FjeVNlbmRBY2Nlc3NpYmlsaXR5RXZlbnQnO1xuaW1wb3J0IHR5cGVvZiBUZXh0SW5wdXRTdGF0ZSBmcm9tICcuLi9Db21wb25lbnRzL1RleHRJbnB1dC9UZXh0SW5wdXRTdGF0ZSc7XG5pbXBvcnQgdHlwZW9mIEV4Y2VwdGlvbnNNYW5hZ2VyIGZyb20gJy4uL0NvcmUvRXhjZXB0aW9uc01hbmFnZXInO1xuaW1wb3J0IHR5cGVvZiBSYXdFdmVudEVtaXR0ZXIgZnJvbSAnLi4vQ29yZS9SYXdFdmVudEVtaXR0ZXInO1xuaW1wb3J0IHR5cGVvZiBSZWFjdEZpYmVyRXJyb3JEaWFsb2cgZnJvbSAnLi4vQ29yZS9SZWFjdEZpYmVyRXJyb3JEaWFsb2cnO1xuaW1wb3J0IHR5cGVvZiBSQ1RFdmVudEVtaXR0ZXIgZnJvbSAnLi4vRXZlbnRFbWl0dGVyL1JDVEV2ZW50RW1pdHRlcic7XG5pbXBvcnQgdHlwZW9mIEN1c3RvbUV2ZW50IGZyb20gJy4uL0V2ZW50cy9DdXN0b21FdmVudCc7XG5pbXBvcnQgdHlwZW9mIFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IHR5cGVvZiBSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSc7XG5pbXBvcnQgdHlwZW9mIGZsYXR0ZW5TdHlsZSBmcm9tICcuLi9TdHlsZVNoZWV0L2ZsYXR0ZW5TdHlsZSc7XG5pbXBvcnQgdHlwZW9mIGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldiBmcm9tICcuLi9VdGlsaXRpZXMvZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2JztcbmltcG9ydCB0eXBlb2YgZGVlcERpZmZlciBmcm9tICcuLi9VdGlsaXRpZXMvZGlmZmVyL2RlZXBEaWZmZXInO1xuaW1wb3J0IHR5cGVvZiBQbGF0Zm9ybSBmcm9tICcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuXG5pbXBvcnQge3R5cGUgRGFuZ2Vyb3VzbHlJbXByZWNpc2VTdHlsZVByb3B9IGZyb20gJy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5cbi8vIGZsb3dsaW50IHVuc2FmZS1nZXR0ZXJzLXNldHRlcnM6b2ZmXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0IEJhdGNoZWRCcmlkZ2UoKTogQmF0Y2hlZEJyaWRnZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0JhdGNoZWRCcmlkZ2UvQmF0Y2hlZEJyaWRnZScpO1xuICB9LFxuICBnZXQgRXhjZXB0aW9uc01hbmFnZXIoKTogRXhjZXB0aW9uc01hbmFnZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db3JlL0V4Y2VwdGlvbnNNYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCBQbGF0Zm9ybSgpOiBQbGF0Zm9ybSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1V0aWxpdGllcy9QbGF0Zm9ybScpO1xuICB9LFxuICBnZXQgUkNURXZlbnRFbWl0dGVyKCk6IFJDVEV2ZW50RW1pdHRlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0V2ZW50RW1pdHRlci9SQ1RFdmVudEVtaXR0ZXInKTtcbiAgfSxcbiAgZ2V0IFJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5KCk6IFJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnknKTtcbiAgfSxcbiAgZ2V0IFRleHRJbnB1dFN0YXRlKCk6IFRleHRJbnB1dFN0YXRlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0U3RhdGUnKTtcbiAgfSxcbiAgZ2V0IFVJTWFuYWdlcigpOiBVSU1hbmFnZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInKTtcbiAgfSxcbiAgZ2V0IGRlZXBEaWZmZXIoKTogZGVlcERpZmZlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1V0aWxpdGllcy9kaWZmZXIvZGVlcERpZmZlcicpO1xuICB9LFxuICBnZXQgZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2KCk6IGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldjxcbiAgICB7Li4ufSB8IEFycmF5PG1peGVkPixcbiAgPiB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1V0aWxpdGllcy9kZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYnKTtcbiAgfSxcbiAgZ2V0IGZsYXR0ZW5TdHlsZSgpOiBmbGF0dGVuU3R5bGU8RGFuZ2Vyb3VzbHlJbXByZWNpc2VTdHlsZVByb3A+IHtcbiAgICAvLyAkRmxvd0ZpeE1lW3VuZGVyY29uc3RyYWluZWQtaW1wbGljaXQtaW5zdGFudGlhdGlvbl1cbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9mbGF0dGVuU3R5bGUnKTtcbiAgfSxcbiAgZ2V0IFJlYWN0RmliZXJFcnJvckRpYWxvZygpOiBSZWFjdEZpYmVyRXJyb3JEaWFsb2cge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db3JlL1JlYWN0RmliZXJFcnJvckRpYWxvZycpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBsZWdhY3lTZW5kQWNjZXNzaWJpbGl0eUV2ZW50KCk6IGxlZ2FjeVNlbmRBY2Nlc3NpYmlsaXR5RXZlbnQge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL0FjY2Vzc2liaWxpdHlJbmZvL2xlZ2FjeVNlbmRBY2Nlc3NpYmlsaXR5RXZlbnQnKTtcbiAgfSxcbiAgZ2V0IFJhd0V2ZW50RW1pdHRlcigpOiBSYXdFdmVudEVtaXR0ZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db3JlL1Jhd0V2ZW50RW1pdHRlcicpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBDdXN0b21FdmVudCgpOiBDdXN0b21FdmVudCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0V2ZW50cy9DdXN0b21FdmVudCcpLmRlZmF1bHQ7XG4gIH0sXG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQTRCQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZixJQUFJQyxhQUFhQSxDQUFBLEVBQWtCO0lBQ2pDLE9BQU9DLE9BQU8saUNBQWlDLENBQUM7RUFDbEQsQ0FBQztFQUNELElBQUlDLGlCQUFpQkEsQ0FBQSxFQUFzQjtJQUN6QyxPQUFPRCxPQUFPLDRCQUE0QixDQUFDO0VBQzdDLENBQUM7RUFDRCxJQUFJRSxRQUFRQSxDQUFBLEVBQWE7SUFDdkIsT0FBT0YsT0FBTyx3QkFBd0IsQ0FBQztFQUN6QyxDQUFDO0VBQ0QsSUFBSUcsZUFBZUEsQ0FBQSxFQUFvQjtJQUNyQyxPQUFPSCxPQUFPLGtDQUFrQyxDQUFDO0VBQ25ELENBQUM7RUFDRCxJQUFJSSw2QkFBNkJBLENBQUEsRUFBa0M7SUFDakUsT0FBT0osT0FBTyxrREFBa0QsQ0FBQztFQUNuRSxDQUFDO0VBQ0QsSUFBSUssY0FBY0EsQ0FBQSxFQUFtQjtJQUNuQyxPQUFPTCxPQUFPLHlDQUF5QyxDQUFDO0VBQzFELENBQUM7RUFDRCxJQUFJTSxTQUFTQSxDQUFBLEVBQWM7SUFDekIsT0FBT04sT0FBTywyQkFBMkIsQ0FBQztFQUM1QyxDQUFDO0VBQ0QsSUFBSU8sVUFBVUEsQ0FBQSxFQUFlO0lBQzNCLE9BQU9QLE9BQU8saUNBQWlDLENBQUM7RUFDbEQsQ0FBQztFQUNELElBQUlRLGlDQUFpQ0EsQ0FBQSxFQUVuQztJQUNBLE9BQU9SLE9BQU8saURBQWlELENBQUM7RUFDbEUsQ0FBQztFQUNELElBQUlTLFlBQVlBLENBQUEsRUFBZ0Q7SUFFOUQsT0FBT1QsT0FBTyw2QkFBNkIsQ0FBQztFQUM5QyxDQUFDO0VBQ0QsSUFBSVUscUJBQXFCQSxDQUFBLEVBQTBCO0lBQ2pELE9BQU9WLE9BQU8sZ0NBQWdDLENBQUMsQ0FBQ1csT0FBTztFQUN6RCxDQUFDO0VBQ0QsSUFBSUMsNEJBQTRCQSxDQUFBLEVBQWlDO0lBQy9ELE9BQU9aLE9BQU8sK0RBQStELENBQUM7RUFDaEYsQ0FBQztFQUNELElBQUlhLGVBQWVBLENBQUEsRUFBb0I7SUFDckMsT0FBT2IsT0FBTywwQkFBMEIsQ0FBQyxDQUFDVyxPQUFPO0VBQ25ELENBQUM7RUFDRCxJQUFJRyxXQUFXQSxDQUFBLEVBQWdCO0lBQzdCLE9BQU9kLE9BQU8sd0JBQXdCLENBQUMsQ0FBQ1csT0FBTztFQUNqRDtBQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=