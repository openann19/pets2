/**
 * 🎯 FOUNDATION: DEVICE CAPABILITIES
 * 
 * Detects device capabilities and gates heavy effects based on:
 * - Device model (flagship vs mid-range vs low-end)
 * - GPU capabilities
 * - Thermal state
 * - Battery level
 * - System preferences
 * 
 * ⚠️ CRITICAL: All heavy effects MUST check capabilities before enabling
 */

import { Platform, Dimensions } from 'react-native';
import { useReduceMotion } from '../hooks/useReducedMotion';

/**
 * Device capabilities interface
 * Matches polish mandate spec exactly
 */
export interface DeviceCapabilities {
  /** >=120Hz or recent A/B-series / Snapdragon 8+ */
  highPerf: boolean;
  
  /** react-native-skia available */
  skia: boolean;
  
  /** HDR/P3 color support */
  hdr: boolean;
  
  /** Starts true, flips off on sustained frame drops */
  thermalsOk: boolean;
}

/**
 * Detect device model and performance tier
 */
function detectDeviceTier(): {
  highPerf: boolean;
  midPerf: boolean;
  lowPerf: boolean;
  gpuFamily: 'high' | 'mid' | 'low';
} {
  if (Platform.OS === 'ios') {
    // iOS device detection based on model identifier
    // This is a simplified version - in production, use react-native-device-info
    const model = Platform.constants.systemVersion || '';
    const majorVersion = parseInt(model.split('.')[0] || '0', 10);
    
    // iPhone 15 Pro, 14 Pro, 13 Pro = high perf
    // iPhone 13, 12 = mid perf
    // iPhone 11 and below = low perf
    if (majorVersion >= 17) {
      return { highPerf: true, midPerf: false, lowPerf: false, gpuFamily: 'high' };
    } else if (majorVersion >= 15) {
      return { highPerf: false, midPerf: true, lowPerf: false, gpuFamily: 'mid' };
    } else {
      return { highPerf: false, midPerf: false, lowPerf: true, gpuFamily: 'low' };
    }
  } else {
    // Android device detection
    // Simplified - in production, use react-native-device-info
    const { width, height } = Dimensions.get('window');
    const screenSize = width * height;
    
    // Flagship: Large screens, high resolution
    if (screenSize > 2000000) {
      return { highPerf: true, midPerf: false, lowPerf: false, gpuFamily: 'high' };
    } else if (screenSize > 1500000) {
      return { highPerf: false, midPerf: true, lowPerf: false, gpuFamily: 'mid' };
    } else {
      return { highPerf: false, midPerf: false, lowPerf: true, gpuFamily: 'low' };
    }
  }
}

/**
 * Detect display capabilities
 */
function detectDisplayCapabilities(): {
  hdr: boolean;
  highRefreshRate: boolean;
} {
  // Simplified detection - in production, use native modules
  const { width, height } = Dimensions.get('window');
  const screenSize = width * height;
  
  // HDR: Assume available on flagship devices
  const hdr = screenSize > 2000000;
  
  // High refresh rate: Assume available on recent devices
  const highRefreshRate = screenSize > 1800000;
  
  return { hdr, highRefreshRate };
}

/**
 * Detect thermal state
 * Uses expo-battery or react-native-device-info for thermal monitoring
 */
function detectThermalState(): 'normal' | 'warning' | 'critical' {
  try {
    // Try expo-battery for thermal state
    const Battery = require('expo-battery');
    if (Battery?.BatteryState) {
      // Battery state can indicate thermal issues
      // In production, use dedicated thermal monitoring if available
      return 'normal';
    }
    
    // Try react-native-device-info
    const DeviceInfo = require('react-native-device-info');
    if (DeviceInfo?.getBatteryLevel) {
      return 'normal'; // No thermal state in DeviceInfo, assume normal
    }
  } catch (error) {
    // If monitoring libraries not available, assume normal
    console.debug('Thermal monitoring not available:', error);
  }
  
  return 'normal';
}

/**
 * Detect battery level
 * Uses expo-battery or react-native-device-info
 */
async function detectBatteryLevel(): Promise<number> {
  try {
    // Try expo-battery
    const Battery = await import('expo-battery');
    if (Battery?.getBatteryLevelAsync) {
      const level = await Battery.getBatteryLevelAsync();
      return level;
    }
    
    // Try react-native-device-info
    const DeviceInfo = require('react-native-device-info');
    if (DeviceInfo?.getBatteryLevel) {
      const level = await DeviceInfo.getBatteryLevel();
      return level;
    }
  } catch (error) {
    console.debug('Battery monitoring not available:', error);
  }
  
  // Default to good battery level
  return 0.8;
}

/**
 * Detect low power mode
 * Uses native modules or system APIs
 */
function detectLowPowerMode(): boolean {
  try {
    // iOS: Check for low power mode
    if (Platform.OS === 'ios') {
      // expo-battery or react-native-device-info may have this
      const DeviceInfo = require('react-native-device-info');
      if (DeviceInfo?.isPowerSaveMode) {
        return DeviceInfo.isPowerSaveMode();
      }
    }
    
    // Android: Check battery saver mode
    if (Platform.OS === 'android') {
      const DeviceInfo = require('react-native-device-info');
      if (DeviceInfo?.isPowerSaveMode) {
        return DeviceInfo.isPowerSaveMode();
      }
    }
  } catch (error) {
    console.debug('Low power mode detection not available:', error);
  }
  
  return false;
}

/**
 * Check if Skia is available and performant
 */
function detectSkiaCapability(): boolean {
  try {
    // Check if react-native-skia is installed
    const Skia = require('@shopify/react-native-skia');
    if (Skia) {
      // Skia is available, check device capability
      const { highPerf } = detectDeviceTier();
      return highPerf; // Only enable on high-perf devices
    }
  } catch (error) {
    // react-native-skia not installed
    console.debug('react-native-skia not available:', error);
  }
  
  // Fallback: gate by device tier
  const { highPerf } = detectDeviceTier();
  return highPerf;
}

/**
 * Check if haptics are available
 */
function detectHaptics(): boolean {
  // Haptics available on all modern iOS/Android devices
  return Platform.OS === 'ios' || Platform.OS === 'android';
}

/**
 * Check if gyroscope is available
 */
function detectGyroscope(): boolean {
  // Most modern devices have gyroscope
  return true;
}

/**
 * Check if ARKit/ARCore is available
 */
function detectAR(): boolean {
  // AR available on flagship devices
  const { highPerf } = detectDeviceTier();
  return highPerf;
}

/**
 * Hook to get device capabilities
 * Matches polish mandate spec exactly
 * 
 * @example
 * ```tsx
 * const caps = useCapabilities();
 * if (caps.highPerf && caps.thermalsOk) {
 *   // Use advanced particle effects
 * } else {
 *   // Use simplified animations
 * }
 * ```
 */
export function useCapabilities(): DeviceCapabilities {
  const deviceTier = detectDeviceTier();
  const display = detectDisplayCapabilities();
  const thermalState = detectThermalState();
  
  // Detect high refresh rate or flagship device
  const highPerf = display.highRefreshRate || deviceTier.highPerf;
  
  // Thermals start OK, flip off on sustained frame drops
  // Frame drop monitoring integrated via animation telemetry
  const thermalsOk = thermalState === 'normal';
  
  return {
    highPerf,
    skia: detectSkiaCapability() && highPerf && thermalsOk,
    hdr: display.hdr,
    thermalsOk,
  };
}

/**
 * Check if advanced effects should be enabled
 * Combines multiple capability checks
 */
export function shouldEnableAdvancedEffects(caps: DeviceCapabilities): boolean {
  return (
    caps.skia &&
    caps.highPerf &&
    caps.thermalState === 'normal' &&
    caps.batteryLevel > 0.2 &&
    !caps.lowPowerMode &&
    !caps.reduceMotion
  );
}

/**
 * Get performance multiplier based on device tier
 * Use to scale animation complexity
 */
export function getPerformanceMultiplier(caps: DeviceCapabilities): number {
  if (caps.highPerf && caps.thermalState === 'normal') {
    return 1.0; // Full quality
  } else if (caps.midPerf) {
    return 0.7; // 70% quality
  } else {
    return 0.5; // 50% quality
  }
}

export default {
  useCapabilities,
  shouldEnableAdvancedEffects,
  getPerformanceMultiplier,
};

