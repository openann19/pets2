/**
 * NavigationGuard Component
 * 
 * High-level navigation guard that wraps the entire navigation container
 * and enforces authentication checks, deep linking, and session restoration.
 * 
 * Features:
 * - Authentication state checking
 * - Session restoration on app launch
 * - Deep linking with authentication
 * - Onboarding flow enforcement
 * - Initial route determination
 */

import React, { useEffect, useState } from 'react';
import { View, ActivityIndicator, StyleSheet } from 'react-native';
import { NavigationContainer, useNavigationContainerRef } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useAuthStore } from '../stores/useAuthStore';
import { useTheme } from '@mobile/theme';
import { linking } from './linking';
import type { RootStackParamList } from './types';

const ONBOARDING_COMPLETE_KEY = 'onboarding_complete';

interface NavigationGuardProps {
  children: React.ReactNode;
}

/**
 * NavigationGuard wrapper that handles authentication and initial routing
 */
export function NavigationGuard({ children }: NavigationGuardProps): React.JSX.Element {
  const theme = useTheme();
  const navigationRef = useNavigationContainerRef<RootStackParamList>();
  const { isAuthenticated, isLoading, accessToken } = useAuthStore();
  const [isInitializing, setIsInitializing] = useState(true);
  const [isOnboarded, setIsOnboarded] = useState(false);
  const [initialRoute, setInitialRoute] = useState<keyof RootStackParamList | null>(null);

  // Initialize navigation state
  useEffect(() => {
    const initializeNavigation = async () => {
      try {
        // Check onboarding status
        const onboardingComplete = await AsyncStorage.getItem(ONBOARDING_COMPLETE_KEY);
        setIsOnboarded(onboardingComplete === 'true');

        // Determine initial route based on auth and onboarding state
        if (!isAuthenticated || !accessToken) {
          // Not authenticated - go to login
          setInitialRoute('Login');
        } else if (!isOnboarded && onboardingComplete !== 'true') {
          // Authenticated but not onboarded - go to onboarding
          setInitialRoute('Welcome' as keyof RootStackParamList);
        } else {
          // Authenticated and onboarded - go to main app
          setInitialRoute('Home');
        }

        setIsInitializing(false);
      } catch (error) {
        console.error('Navigation initialization error:', error);
        // Default to login on error
        setInitialRoute('Login');
        setIsInitializing(false);
      }
    };

    if (!isLoading) {
      initializeNavigation();
    }
  }, [isAuthenticated, isLoading, accessToken, isOnboarded]);

  // Handle deep linking with authentication checks
  useEffect(() => {
    if (!navigationRef.isReady() || isInitializing) return;

    const handleDeepLink = async () => {
      // Deep linking is handled by React Navigation's linking config
      // But we need to verify authentication before allowing access
      const currentRoute = navigationRef.getCurrentRoute();
      
      if (currentRoute) {
        const protectedRoutes: (keyof RootStackParamList)[] = [
          'Home',
          'Swipe',
          'Matches',
          'Profile',
          'Settings',
          'Chat',
          'MyPets',
          'CreatePet',
          'Premium',
          'AdoptionManager',
        ];

        const isProtectedRoute = protectedRoutes.includes(
          currentRoute.name as keyof RootStackParamList
        );

        if (isProtectedRoute && !isAuthenticated) {
          // Redirect to login with return route
          navigationRef.navigate('Login', {
            redirectTo: currentRoute.name,
            redirectParams: currentRoute.params,
          });
        }
      }
    };

    handleDeepLink();
  }, [navigationRef, isAuthenticated, isInitializing]);

  // Show loading state during initialization
  if (isInitializing || isLoading) {
    return (
      <View style={[styles.loadingContainer, { backgroundColor: theme.colors.bg }]}>
        <ActivityIndicator size="large" color={theme.colors.primary} />
      </View>
    );
  }

  return (
    <NavigationContainer
      ref={navigationRef}
      linking={linking}
      onReady={() => {
        // Navigation is ready, can perform initial navigation if needed
        if (initialRoute && navigationRef.isReady()) {
          const currentRoute = navigationRef.getCurrentRoute();
          if (!currentRoute || currentRoute.name === 'Home') {
            // Only navigate if we're at the default route
            navigationRef.navigate(initialRoute as any);
          }
        }
      }}
    >
      {children}
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

